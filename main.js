/*! For license information please see main.js.LICENSE.txt */
(()=>{"use strict";var t={28:(t,e,i)=>{i.d(e,{Z:()=>u});var s=i(7537),n=i.n(s),o=i(3645),a=i.n(o),r=i(1667),h=i.n(r),l=new URL(i(1815),i.b),c=a()(n());c.push([t.id,"@import url(http://fonts.googleapis.com/css?family=Roboto:400,100,100italic,300,300ita‌​lic,400italic,500,500italic,700,700italic,900italic,900);"]);var d=h()(l);c.push([t.id,"*,\r\n*::before,\r\n*::after {\r\n  box-sizing: border-box;\r\n  padding: 0;\r\n  margin: 0;\r\n  font-size: 10px;\r\n  font-family: 'Roboto', sans-serif;\r\n}\r\nbody {\r\n  background-color: grey;\r\n  color: hsla(0, 0%, 38%, 1);\r\n}\r\n\r\n.temp-container {\r\n  grid-area: temp;\r\n}\r\n.empty-container {\r\n  grid-area: empty;\r\n}\r\n.time-container {\r\n  grid-area: time;\r\n}\r\n.chart-container {\r\n  grid-area: chart;\r\n}\r\n.map-container {\r\n  grid-area: map;\r\n}\r\n\r\n.grid-container {\r\n  background-image: url("+d+");\r\n  height: 720px;\r\n  width: 1280px;\r\n  display: grid;\r\n  grid-template-areas:\r\n    'temp empty time map'\r\n    'chart chart chart map';\r\n  gap: 26px;\r\n  /* overflow: hidden; */\r\n  justify-content: right;\r\n  align-items: right;\r\n}\r\n\r\n.temp-container,\r\n.time-container {\r\n  font-size: 9.6rem;\r\n  justify-self: right;\r\n  border-radius: 10px 10px 10px 10px;\r\n  background-color: hsla(0, 0%, 100%, 0.95);\r\n  height: 165px;\r\n  width: 355px;\r\n  display: flex;\r\n  align-self: flex-end;\r\n  justify-content: center;\r\n  align-items: center;\r\n}\r\n.empty-container {\r\n  justify-self: right;\r\n  align-self: flex-end;\r\n  height: 165px;\r\n  width: 80px;\r\n}\r\n.chart-container {\r\n  border-radius: 10px 10px 10px 10px;\r\n  background-color: hsla(0, 0%, 100%, 0.95);\r\n  padding: 20px;\r\n  height: 467px;\r\n  width: 845px;\r\n}\r\n.map-container {\r\n  height: 720px;\r\n  width: 382px;\r\n  filter: drop-shadow(0px 4px 8px #4e87b1);\r\n  display: grid;\r\n  grid-template-columns: [first-col];\r\n  grid-template-rows: [first-row];\r\n}\r\n.map-container img {\r\n  border-radius: 10px 0px 0px 10px;\r\n  max-width: 100%;\r\n  max-height: 100%;\r\n}\r\n\r\n#base-map {\r\n  grid-column-start: first-col;\r\n  grid-row-start: first-row;\r\n}\r\n#radar-map {\r\n  grid-column-start: first-col;\r\n  grid-row-start: first-row;\r\n\r\n  /* clip-path: ellipse(700px 745px at 100% 100%); */\r\n}\r\n","",{version:3,sources:["webpack://./src/styles.css"],names:[],mappings:"AAEA;;;EAGE,sBAAsB;EACtB,UAAU;EACV,SAAS;EACT,eAAe;EACf,iCAAiC;AACnC;AACA;EACE,sBAAsB;EACtB,0BAA0B;AAC5B;;AAEA;EACE,eAAe;AACjB;AACA;EACE,gBAAgB;AAClB;AACA;EACE,eAAe;AACjB;AACA;EACE,gBAAgB;AAClB;AACA;EACE,cAAc;AAChB;;AAEA;EACE,yDAAgD;EAChD,aAAa;EACb,aAAa;EACb,aAAa;EACb;;2BAEyB;EACzB,SAAS;EACT,sBAAsB;EACtB,sBAAsB;EACtB,kBAAkB;AACpB;;AAEA;;EAEE,iBAAiB;EACjB,mBAAmB;EACnB,kCAAkC;EAClC,yCAAyC;EACzC,aAAa;EACb,YAAY;EACZ,aAAa;EACb,oBAAoB;EACpB,uBAAuB;EACvB,mBAAmB;AACrB;AACA;EACE,mBAAmB;EACnB,oBAAoB;EACpB,aAAa;EACb,WAAW;AACb;AACA;EACE,kCAAkC;EAClC,yCAAyC;EACzC,aAAa;EACb,aAAa;EACb,YAAY;AACd;AACA;EACE,aAAa;EACb,YAAY;EACZ,wCAAwC;EACxC,aAAa;EACb,kCAAkC;EAClC,+BAA+B;AACjC;AACA;EACE,gCAAgC;EAChC,eAAe;EACf,gBAAgB;AAClB;;AAEA;EACE,4BAA4B;EAC5B,yBAAyB;AAC3B;AACA;EACE,4BAA4B;EAC5B,yBAAyB;;EAEzB,kDAAkD;AACpD",sourcesContent:["@import url(http://fonts.googleapis.com/css?family=Roboto:400,100,100italic,300,300ita‌​lic,400italic,500,500italic,700,700italic,900italic,900);\r\n\r\n*,\r\n*::before,\r\n*::after {\r\n  box-sizing: border-box;\r\n  padding: 0;\r\n  margin: 0;\r\n  font-size: 10px;\r\n  font-family: 'Roboto', sans-serif;\r\n}\r\nbody {\r\n  background-color: grey;\r\n  color: hsla(0, 0%, 38%, 1);\r\n}\r\n\r\n.temp-container {\r\n  grid-area: temp;\r\n}\r\n.empty-container {\r\n  grid-area: empty;\r\n}\r\n.time-container {\r\n  grid-area: time;\r\n}\r\n.chart-container {\r\n  grid-area: chart;\r\n}\r\n.map-container {\r\n  grid-area: map;\r\n}\r\n\r\n.grid-container {\r\n  background-image: url(images/background_img.png);\r\n  height: 720px;\r\n  width: 1280px;\r\n  display: grid;\r\n  grid-template-areas:\r\n    'temp empty time map'\r\n    'chart chart chart map';\r\n  gap: 26px;\r\n  /* overflow: hidden; */\r\n  justify-content: right;\r\n  align-items: right;\r\n}\r\n\r\n.temp-container,\r\n.time-container {\r\n  font-size: 9.6rem;\r\n  justify-self: right;\r\n  border-radius: 10px 10px 10px 10px;\r\n  background-color: hsla(0, 0%, 100%, 0.95);\r\n  height: 165px;\r\n  width: 355px;\r\n  display: flex;\r\n  align-self: flex-end;\r\n  justify-content: center;\r\n  align-items: center;\r\n}\r\n.empty-container {\r\n  justify-self: right;\r\n  align-self: flex-end;\r\n  height: 165px;\r\n  width: 80px;\r\n}\r\n.chart-container {\r\n  border-radius: 10px 10px 10px 10px;\r\n  background-color: hsla(0, 0%, 100%, 0.95);\r\n  padding: 20px;\r\n  height: 467px;\r\n  width: 845px;\r\n}\r\n.map-container {\r\n  height: 720px;\r\n  width: 382px;\r\n  filter: drop-shadow(0px 4px 8px #4e87b1);\r\n  display: grid;\r\n  grid-template-columns: [first-col];\r\n  grid-template-rows: [first-row];\r\n}\r\n.map-container img {\r\n  border-radius: 10px 0px 0px 10px;\r\n  max-width: 100%;\r\n  max-height: 100%;\r\n}\r\n\r\n#base-map {\r\n  grid-column-start: first-col;\r\n  grid-row-start: first-row;\r\n}\r\n#radar-map {\r\n  grid-column-start: first-col;\r\n  grid-row-start: first-row;\r\n\r\n  /* clip-path: ellipse(700px 745px at 100% 100%); */\r\n}\r\n"],sourceRoot:""}]);const u=c},3645:t=>{t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var i="",s=void 0!==e[5];return e[4]&&(i+="@supports (".concat(e[4],") {")),e[2]&&(i+="@media ".concat(e[2]," {")),s&&(i+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),i+=t(e),s&&(i+="}"),e[2]&&(i+="}"),e[4]&&(i+="}"),i})).join("")},e.i=function(t,i,s,n,o){"string"==typeof t&&(t=[[null,t,void 0]]);var a={};if(s)for(var r=0;r<this.length;r++){var h=this[r][0];null!=h&&(a[h]=!0)}for(var l=0;l<t.length;l++){var c=[].concat(t[l]);s&&a[c[0]]||(void 0!==o&&(void 0===c[5]||(c[1]="@layer".concat(c[5].length>0?" ".concat(c[5]):""," {").concat(c[1],"}")),c[5]=o),i&&(c[2]?(c[1]="@media ".concat(c[2]," {").concat(c[1],"}"),c[2]=i):c[2]=i),n&&(c[4]?(c[1]="@supports (".concat(c[4],") {").concat(c[1],"}"),c[4]=n):c[4]="".concat(n)),e.push(c))}},e}},1667:t=>{t.exports=function(t,e){return e||(e={}),t?(t=String(t.__esModule?t.default:t),/^['"].*['"]$/.test(t)&&(t=t.slice(1,-1)),e.hash&&(t+=e.hash),/["'() \t\n]|(%20)/.test(t)||e.needQuotes?'"'.concat(t.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):t):t}},7537:t=>{t.exports=function(t){var e=t[1],i=t[3];if(!i)return e;if("function"==typeof btoa){var s=btoa(unescape(encodeURIComponent(JSON.stringify(i)))),n="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(s),o="/*# ".concat(n," */"),a=i.sources.map((function(t){return"/*# sourceURL=".concat(i.sourceRoot||"").concat(t," */")}));return[e].concat(a).concat([o]).join("\n")}return[e].join("\n")}},3379:t=>{var e=[];function i(t){for(var i=-1,s=0;s<e.length;s++)if(e[s].identifier===t){i=s;break}return i}function s(t,s){for(var o={},a=[],r=0;r<t.length;r++){var h=t[r],l=s.base?h[0]+s.base:h[0],c=o[l]||0,d="".concat(l," ").concat(c);o[l]=c+1;var u=i(d),p={css:h[1],media:h[2],sourceMap:h[3],supports:h[4],layer:h[5]};if(-1!==u)e[u].references++,e[u].updater(p);else{var g=n(p,s);s.byIndex=r,e.splice(r,0,{identifier:d,updater:g,references:1})}a.push(d)}return a}function n(t,e){var i=e.domAPI(e);return i.update(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap&&e.supports===t.supports&&e.layer===t.layer)return;i.update(t=e)}else i.remove()}}t.exports=function(t,n){var o=s(t=t||[],n=n||{});return function(t){t=t||[];for(var a=0;a<o.length;a++){var r=i(o[a]);e[r].references--}for(var h=s(t,n),l=0;l<o.length;l++){var c=i(o[l]);0===e[c].references&&(e[c].updater(),e.splice(c,1))}o=h}}},569:t=>{var e={};t.exports=function(t,i){var s=function(t){if(void 0===e[t]){var i=document.querySelector(t);if(window.HTMLIFrameElement&&i instanceof window.HTMLIFrameElement)try{i=i.contentDocument.head}catch(t){i=null}e[t]=i}return e[t]}(t);if(!s)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");s.appendChild(i)}},9216:t=>{t.exports=function(t){var e=document.createElement("style");return t.setAttributes(e,t.attributes),t.insert(e,t.options),e}},3565:(t,e,i)=>{t.exports=function(t){var e=i.nc;e&&t.setAttribute("nonce",e)}},7795:t=>{t.exports=function(t){var e=t.insertStyleElement(t);return{update:function(i){!function(t,e,i){var s="";i.supports&&(s+="@supports (".concat(i.supports,") {")),i.media&&(s+="@media ".concat(i.media," {"));var n=void 0!==i.layer;n&&(s+="@layer".concat(i.layer.length>0?" ".concat(i.layer):""," {")),s+=i.css,n&&(s+="}"),i.media&&(s+="}"),i.supports&&(s+="}");var o=i.sourceMap;o&&"undefined"!=typeof btoa&&(s+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),e.styleTagTransform(s,t,e.options)}(e,t,i)},remove:function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(e)}}}},4589:t=>{t.exports=function(t,e){if(e.styleSheet)e.styleSheet.cssText=t;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(t))}}},1815:(t,e,i)=>{t.exports=i.p+"6aa9d6a03c5fe663fa23.png"},5945:(t,e,i)=>{t.exports=i.p+"10569e3e08cc76ebc19b.png"},3761:(t,e,i)=>{t.exports=i.p+"9b2d66a41eb245188264.svg"},8287:(t,e,i)=>{t.exports=i.p+"de8410b5be4ad70db196.svg"},1454:(t,e,i)=>{t.exports=i.p+"730bfe55beab95f8a099.svg"},5077:(t,e,i)=>{t.exports=i.p+"f4c494b8b1d37c5de359.svg"},9155:(t,e,i)=>{t.exports=i.p+"0f5e2e50940fd379710d.svg"},8203:(t,e,i)=>{t.exports=i.p+"a28f8ef702f1ff8fd0fe.svg"},8941:(t,e,i)=>{t.exports=i.p+"7b4918679ff5f6cc8f9e.svg"},1549:(t,e,i)=>{t.exports=i.p+"a1cb77cdf4a65b474104.svg"},5783:(t,e,i)=>{t.exports=i.p+"089c7c0ba45475701fe4.svg"},2757:(t,e,i)=>{t.exports=i.p+"b1bb9b2fe75a6642e3de.svg"},7708:(t,e,i)=>{t.exports=i.p+"2bd57e3e2da7ec86bbc4.svg"},965:(t,e,i)=>{t.exports=i.p+"df8ed63dd9e2501a3418.svg"},1936:(t,e,i)=>{t.exports=i.p+"d2b3d4c7708a4e8f5a19.svg"},9195:(t,e,i)=>{t.exports=i.p+"7c408c29d81bf405e206.svg"},752:(t,e,i)=>{t.exports=i.p+"ac72c13887fa3e805a68.svg"},1471:(t,e,i)=>{t.exports=i.p+"f20b436197fab1c3dad9.svg"},2804:(t,e,i)=>{t.exports=i.p+"7209b5f6a71a7ac0bc6e.svg"},8912:(t,e,i)=>{t.exports=i.p+"dfb7aa0dfca946cfcaec.svg"},8612:(t,e,i)=>{t.exports=i.p+"0e22c031e287f7a3f61c.svg"},8851:(t,e,i)=>{t.exports=i.p+"61c862d4e93b89c08591.svg"},9014:(t,e,i)=>{t.exports=i.p+"56b97cabb86f7972e5b9.svg"},3452:(t,e,i)=>{t.exports=i.p+"90f950cd12e7aa73b3d8.svg"},7703:(t,e,i)=>{t.exports=i.p+"dd93d2741761f6c04f53.svg"},5594:(t,e,i)=>{t.exports=i.p+"951e634e652fd1359771.svg"},1958:(t,e,i)=>{t.exports=i.p+"4fb7c021acfa8839ba29.svg"},590:(t,e,i)=>{t.exports=i.p+"c6deb376186155d44e94.svg"},1422:(t,e,i)=>{t.exports=i.p+"d6f14ea455742d118a69.svg"},7848:(t,e,i)=>{t.exports=i.p+"4d290f547c1900d8d239.svg"},1910:(t,e,i)=>{t.exports=i.p+"d20ad74f8ee3e036c8a9.svg"},6048:(t,e,i)=>{t.exports=i.p+"1d44b0d48dc062a43e5c.svg"},8092:(t,e,i)=>{t.exports=i.p+"4e70360f3902bb444a5b.svg"},7943:(t,e,i)=>{t.exports=i.p+"6f398bef6ff1e4659e23.svg"},3446:(t,e,i)=>{t.exports=i.p+"d9073d0940b4044b1cc6.svg"},2343:(t,e,i)=>{t.exports=i.p+"9da9c915654156d14db2.svg"},2268:(t,e,i)=>{t.exports=i.p+"c417bfb0d0b8a4692290.svg"},9208:(t,e,i)=>{t.exports=i.p+"8439c26aa5d3ad7b7e13.svg"},8533:(t,e,i)=>{t.exports=i.p+"57403d605e47b1ef777f.svg"},7151:(t,e,i)=>{t.exports=i.p+"9b476bf2b55a23fa6106.svg"},4938:(t,e,i)=>{t.exports=i.p+"5770a9811b26ef2395bd.svg"},2790:(t,e,i)=>{t.exports=i.p+"80742531c82e1a2fd41d.svg"},822:(t,e,i)=>{t.exports=i.p+"ca57bcd4bf2d51752d5f.svg"},5296:(t,e,i)=>{t.exports=i.p+"1c5c4ee53da79b4f3d7a.svg"},134:(t,e,i)=>{t.exports=i.p+"51b51cca0b6b1f3a7206.svg"},6507:(t,e,i)=>{t.exports=i.p+"442399228fd54713a676.svg"},9065:(t,e,i)=>{t.exports=i.p+"e097129c5ee95a6e86df.svg"},5560:(t,e,i)=>{t.exports=i.p+"9bb124ae9d4cf5fe1378.svg"},9856:(t,e,i)=>{t.exports=i.p+"d3f4d394a81d8a93f15d.svg"},3317:(t,e,i)=>{t.exports=i.p+"be72ca9ded55bb8cb829.svg"},6001:(t,e,i)=>{t.exports=i.p+"4b56431736751ce3f97c.svg"},8282:(t,e,i)=>{t.exports=i.p+"7d826487d89395a11567.svg"},4659:(t,e,i)=>{t.exports=i.p+"b6ac39b4c8987639ec9d.svg"},5518:(t,e,i)=>{t.exports=i.p+"0538c89c0490a67c813c.svg"},2049:(t,e,i)=>{t.exports=i.p+"7340b6568ca80f67eaf2.svg"},9322:(t,e,i)=>{t.exports=i.p+"02e56cdeb6097302ea14.svg"},8587:(t,e,i)=>{t.exports=i.p+"c097ab66c582e9d6fd78.svg"},378:(t,e,i)=>{t.exports=i.p+"5c19564c5b11623741bd.svg"},2496:(t,e,i)=>{t.exports=i.p+"ffb2c91891a03d0cef1b.svg"},8133:(t,e,i)=>{t.exports=i.p+"c5935776698662c6d162.svg"},1793:(t,e,i)=>{t.exports=i.p+"5877456a4768106fc590.svg"},2473:(t,e,i)=>{t.exports=i.p+"372a9293781c2e3e9ab6.svg"},9345:(t,e,i)=>{t.exports=i.p+"acceb14a3066ddcf2533.png"},1550:(t,e,i)=>{t.exports=i.p+"c346e04dee848d481274.svg"},8084:(t,e,i)=>{t.exports=i.p+"25c4db965c11a6942a70.svg"},6679:(t,e,i)=>{t.exports=i.p+"d33a32cada0e1d576519.svg"},8749:(t,e,i)=>{t.exports=i.p+"79c0ac54002c7a2737f8.svg"},3148:(t,e,i)=>{t.exports=i.p+"3416eddaf730529b2a9c.svg"},5:(t,e,i)=>{t.exports=i.p+"f00689879f1d7540600f.svg"},4863:(t,e,i)=>{t.exports=i.p+"5224ddc2d3a7642d4d4c.svg"},1467:(t,e,i)=>{t.exports=i.p+"dbf298b1d77cb8a4bac0.svg"},6949:(t,e,i)=>{t.exports=i.p+"19395b05a6c10cc3756f.svg"},662:(t,e,i)=>{t.exports=i.p+"66a8dec8e3ffd26d6922.svg"},5587:(t,e,i)=>{t.exports=i.p+"eeb55fba05b74b284ad9.svg"},3464:(t,e,i)=>{t.exports=i.p+"28f9b323c50dd61fcfd9.svg"},2686:(t,e,i)=>{t.exports=i.p+"e3d5e503b506535c9005.svg"},8200:(t,e,i)=>{t.exports=i.p+"8cb85a2a85c7f0cb99db.svg"},3271:(t,e,i)=>{t.exports=i.p+"fbd0855c9369b58adfce.svg"},8817:(t,e,i)=>{t.exports=i.p+"1bfc1d12c025d53d16b9.svg"},4112:(t,e,i)=>{t.exports=i.p+"c1a8f3d33111f3194d7f.svg"},8902:(t,e,i)=>{t.exports=i.p+"06e008b210b440c973db.svg"},2182:(t,e,i)=>{t.exports=i.p+"6077f3d1f1812a03493b.svg"},625:(t,e,i)=>{t.exports=i.p+"21cca350e5d5e6550d4d.svg"},9292:(t,e,i)=>{t.exports=i.p+"89c910647ebd5cd9f26d.svg"},2957:(t,e,i)=>{t.exports=i.p+"973f97b9180740f4b0dc.svg"},3851:(t,e,i)=>{t.exports=i.p+"2009070e651a249282da.svg"},6508:(t,e,i)=>{t.exports=i.p+"fab8ed37d2f1998742e1.svg"}},e={};function i(s){var n=e[s];if(void 0!==n)return n.exports;var o=e[s]={id:s,exports:{}};return t[s](o,o.exports,i),o.exports}i.m=t,i.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return i.d(e,{a:e}),e},i.d=(t,e)=>{for(var s in e)i.o(e,s)&&!i.o(t,s)&&Object.defineProperty(t,s,{enumerable:!0,get:e[s]})},i.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),i.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),(()=>{var t;i.g.importScripts&&(t=i.g.location+"");var e=i.g.document;if(!t&&e&&(e.currentScript&&(t=e.currentScript.src),!t)){var s=e.getElementsByTagName("script");s.length&&(t=s[s.length-1].src)}if(!t)throw new Error("Automatic publicPath is not supported in this browser");t=t.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),i.p=t})(),i.b=document.baseURI||self.location.href,(()=>{var t=i(3379),e=i.n(t),s=i(7795),n=i.n(s),o=i(569),a=i.n(o),r=i(3565),h=i.n(r),l=i(9216),c=i.n(l),d=i(4589),u=i.n(d),p=i(28),g={};g.styleTagTransform=u(),g.setAttributes=h(),g.insert=a().bind(null,"head"),g.domAPI=n(),g.insertStyleElement=c(),e()(p.Z,g),p.Z&&p.Z.locals&&p.Z.locals;const f="undefined"==typeof window?function(t){return t()}:window.requestAnimationFrame;function m(t,e,i){const s=i||(t=>Array.prototype.slice.call(t));let n=!1,o=[];return function(...i){o=s(i),n||(n=!0,f.call(window,(()=>{n=!1,t.apply(e,o)})))}}const b=t=>"start"===t?"left":"end"===t?"right":"center",x=(t,e,i)=>"start"===t?e:"end"===t?i:(e+i)/2;function _(){}const y=function(){let t=0;return function(){return t++}}();function v(t){return null==t}function w(t){if(Array.isArray&&Array.isArray(t))return!0;const e=Object.prototype.toString.call(t);return"[object"===e.substr(0,7)&&"Array]"===e.substr(-6)}function M(t){return null!==t&&"[object Object]"===Object.prototype.toString.call(t)}const A=t=>("number"==typeof t||t instanceof Number)&&isFinite(+t);function k(t,e){return A(t)?t:e}function C(t,e){return void 0===t?e:t}const S=(t,e)=>"string"==typeof t&&t.endsWith("%")?parseFloat(t)/100*e:+t;function D(t,e,i){if(t&&"function"==typeof t.call)return t.apply(i,e)}function P(t,e,i,s){let n,o,a;if(w(t))if(o=t.length,s)for(n=o-1;n>=0;n--)e.call(i,t[n],n);else for(n=0;n<o;n++)e.call(i,t[n],n);else if(M(t))for(a=Object.keys(t),o=a.length,n=0;n<o;n++)e.call(i,t[a[n]],a[n])}function E(t,e){let i,s,n,o;if(!t||!e||t.length!==e.length)return!1;for(i=0,s=t.length;i<s;++i)if(n=t[i],o=e[i],n.datasetIndex!==o.datasetIndex||n.index!==o.index)return!1;return!0}function O(t){if(w(t))return t.map(O);if(M(t)){const e=Object.create(null),i=Object.keys(t),s=i.length;let n=0;for(;n<s;++n)e[i[n]]=O(t[i[n]]);return e}return t}function T(t){return-1===["__proto__","prototype","constructor"].indexOf(t)}function L(t,e,i,s){if(!T(t))return;const n=e[t],o=i[t];M(n)&&M(o)?R(n,o,s):e[t]=O(o)}function R(t,e,i){const s=w(e)?e:[e],n=s.length;if(!M(t))return t;const o=(i=i||{}).merger||L;for(let a=0;a<n;++a){if(!M(e=s[a]))continue;const n=Object.keys(e);for(let s=0,a=n.length;s<a;++s)o(n[s],t,e,i)}return t}function I(t,e){return R(t,e,{merger:B})}function B(t,e,i){if(!T(t))return;const s=e[t],n=i[t];M(s)&&M(n)?I(s,n):Object.prototype.hasOwnProperty.call(e,t)||(e[t]=O(n))}function z(t,e){const i=t.indexOf(".",e);return-1===i?t.length:i}function F(t,e){if(""===e)return t;let i=0,s=z(e,i);for(;t&&s>i;)t=t[e.substr(i,s-i)],i=s+1,s=z(e,i);return t}function V(t){return t.charAt(0).toUpperCase()+t.slice(1)}const W=t=>void 0!==t,j=t=>"function"==typeof t,N=(t,e)=>{if(t.size!==e.size)return!1;for(const i of t)if(!e.has(i))return!1;return!0},H=Math.PI,$=2*H,Y=$+H,U=Number.POSITIVE_INFINITY,X=H/180,q=H/2,K=H/4,Z=2*H/3,G=Math.log10,J=Math.sign;function Q(t){const e=Math.round(t);t=et(t,e,t/1e3)?e:t;const i=Math.pow(10,Math.floor(G(t))),s=t/i;return(s<=1?1:s<=2?2:s<=5?5:10)*i}function tt(t){return!isNaN(parseFloat(t))&&isFinite(t)}function et(t,e,i){return Math.abs(t-e)<i}function it(t,e,i){let s,n,o;for(s=0,n=t.length;s<n;s++)o=t[s][i],isNaN(o)||(e.min=Math.min(e.min,o),e.max=Math.max(e.max,o))}function st(t){return t*(H/180)}function nt(t){return t*(180/H)}function ot(t){if(!A(t))return;let e=1,i=0;for(;Math.round(t*e)/e!==t;)e*=10,i++;return i}function at(t,e){const i=e.x-t.x,s=e.y-t.y,n=Math.sqrt(i*i+s*s);let o=Math.atan2(s,i);return o<-.5*H&&(o+=$),{angle:o,distance:n}}function rt(t,e){return Math.sqrt(Math.pow(e.x-t.x,2)+Math.pow(e.y-t.y,2))}function ht(t,e){return(t-e+Y)%$-H}function lt(t){return(t%$+$)%$}function ct(t,e,i,s){const n=lt(t),o=lt(e),a=lt(i),r=lt(o-n),h=lt(a-n),l=lt(n-o),c=lt(n-a);return n===o||n===a||s&&o===a||r>h&&l<c}function dt(t,e,i){return Math.max(e,Math.min(i,t))}function ut(t,e,i,s=1e-6){return t>=Math.min(e,i)-s&&t<=Math.max(e,i)+s}const pt=t=>0===t||1===t,gt=(t,e,i)=>-Math.pow(2,10*(t-=1))*Math.sin((t-e)*$/i),ft=(t,e,i)=>Math.pow(2,-10*t)*Math.sin((t-e)*$/i)+1,mt={linear:t=>t,easeInQuad:t=>t*t,easeOutQuad:t=>-t*(t-2),easeInOutQuad:t=>(t/=.5)<1?.5*t*t:-.5*(--t*(t-2)-1),easeInCubic:t=>t*t*t,easeOutCubic:t=>(t-=1)*t*t+1,easeInOutCubic:t=>(t/=.5)<1?.5*t*t*t:.5*((t-=2)*t*t+2),easeInQuart:t=>t*t*t*t,easeOutQuart:t=>-((t-=1)*t*t*t-1),easeInOutQuart:t=>(t/=.5)<1?.5*t*t*t*t:-.5*((t-=2)*t*t*t-2),easeInQuint:t=>t*t*t*t*t,easeOutQuint:t=>(t-=1)*t*t*t*t+1,easeInOutQuint:t=>(t/=.5)<1?.5*t*t*t*t*t:.5*((t-=2)*t*t*t*t+2),easeInSine:t=>1-Math.cos(t*q),easeOutSine:t=>Math.sin(t*q),easeInOutSine:t=>-.5*(Math.cos(H*t)-1),easeInExpo:t=>0===t?0:Math.pow(2,10*(t-1)),easeOutExpo:t=>1===t?1:1-Math.pow(2,-10*t),easeInOutExpo:t=>pt(t)?t:t<.5?.5*Math.pow(2,10*(2*t-1)):.5*(2-Math.pow(2,-10*(2*t-1))),easeInCirc:t=>t>=1?t:-(Math.sqrt(1-t*t)-1),easeOutCirc:t=>Math.sqrt(1-(t-=1)*t),easeInOutCirc:t=>(t/=.5)<1?-.5*(Math.sqrt(1-t*t)-1):.5*(Math.sqrt(1-(t-=2)*t)+1),easeInElastic:t=>pt(t)?t:gt(t,.075,.3),easeOutElastic:t=>pt(t)?t:ft(t,.075,.3),easeInOutElastic(t){const e=.1125;return pt(t)?t:t<.5?.5*gt(2*t,e,.45):.5+.5*ft(2*t-1,e,.45)},easeInBack(t){const e=1.70158;return t*t*((e+1)*t-e)},easeOutBack(t){const e=1.70158;return(t-=1)*t*((e+1)*t+e)+1},easeInOutBack(t){let e=1.70158;return(t/=.5)<1?t*t*((1+(e*=1.525))*t-e)*.5:.5*((t-=2)*t*((1+(e*=1.525))*t+e)+2)},easeInBounce:t=>1-mt.easeOutBounce(1-t),easeOutBounce(t){const e=7.5625,i=2.75;return t<1/i?e*t*t:t<2/i?e*(t-=1.5/i)*t+.75:t<2.5/i?e*(t-=2.25/i)*t+.9375:e*(t-=2.625/i)*t+.984375},easeInOutBounce:t=>t<.5?.5*mt.easeInBounce(2*t):.5*mt.easeOutBounce(2*t-1)+.5},bt={0:0,1:1,2:2,3:3,4:4,5:5,6:6,7:7,8:8,9:9,A:10,B:11,C:12,D:13,E:14,F:15,a:10,b:11,c:12,d:13,e:14,f:15},xt="0123456789ABCDEF",_t=t=>xt[15&t],yt=t=>xt[(240&t)>>4]+xt[15&t],vt=t=>(240&t)>>4==(15&t);function wt(t){return t+.5|0}const Mt=(t,e,i)=>Math.max(Math.min(t,i),e);function At(t){return Mt(wt(2.55*t),0,255)}function kt(t){return Mt(wt(255*t),0,255)}function Ct(t){return Mt(wt(t/2.55)/100,0,1)}function St(t){return Mt(wt(100*t),0,100)}const Dt=/^rgba?\(\s*([-+.\d]+)(%)?[\s,]+([-+.e\d]+)(%)?[\s,]+([-+.e\d]+)(%)?(?:[\s,/]+([-+.e\d]+)(%)?)?\s*\)$/,Pt=/^(hsla?|hwb|hsv)\(\s*([-+.e\d]+)(?:deg)?[\s,]+([-+.e\d]+)%[\s,]+([-+.e\d]+)%(?:[\s,]+([-+.e\d]+)(%)?)?\s*\)$/;function Et(t,e,i){const s=e*Math.min(i,1-i),n=(e,n=(e+t/30)%12)=>i-s*Math.max(Math.min(n-3,9-n,1),-1);return[n(0),n(8),n(4)]}function Ot(t,e,i){const s=(s,n=(s+t/60)%6)=>i-i*e*Math.max(Math.min(n,4-n,1),0);return[s(5),s(3),s(1)]}function Tt(t,e,i){const s=Et(t,1,.5);let n;for(e+i>1&&(n=1/(e+i),e*=n,i*=n),n=0;n<3;n++)s[n]*=1-e-i,s[n]+=e;return s}function Lt(t){const e=t.r/255,i=t.g/255,s=t.b/255,n=Math.max(e,i,s),o=Math.min(e,i,s),a=(n+o)/2;let r,h,l;return n!==o&&(l=n-o,h=a>.5?l/(2-n-o):l/(n+o),r=n===e?(i-s)/l+(i<s?6:0):n===i?(s-e)/l+2:(e-i)/l+4,r=60*r+.5),[0|r,h||0,a]}function Rt(t,e,i,s){return(Array.isArray(e)?t(e[0],e[1],e[2]):t(e,i,s)).map(kt)}function It(t,e,i){return Rt(Et,t,e,i)}function Bt(t){return(t%360+360)%360}const zt={x:"dark",Z:"light",Y:"re",X:"blu",W:"gr",V:"medium",U:"slate",A:"ee",T:"ol",S:"or",B:"ra",C:"lateg",D:"ights",R:"in",Q:"turquois",E:"hi",P:"ro",O:"al",N:"le",M:"de",L:"yello",F:"en",K:"ch",G:"arks",H:"ea",I:"ightg",J:"wh"},Ft={OiceXe:"f0f8ff",antiquewEte:"faebd7",aqua:"ffff",aquamarRe:"7fffd4",azuY:"f0ffff",beige:"f5f5dc",bisque:"ffe4c4",black:"0",blanKedOmond:"ffebcd",Xe:"ff",XeviTet:"8a2be2",bPwn:"a52a2a",burlywood:"deb887",caMtXe:"5f9ea0",KartYuse:"7fff00",KocTate:"d2691e",cSO:"ff7f50",cSnflowerXe:"6495ed",cSnsilk:"fff8dc",crimson:"dc143c",cyan:"ffff",xXe:"8b",xcyan:"8b8b",xgTMnPd:"b8860b",xWay:"a9a9a9",xgYF:"6400",xgYy:"a9a9a9",xkhaki:"bdb76b",xmagFta:"8b008b",xTivegYF:"556b2f",xSange:"ff8c00",xScEd:"9932cc",xYd:"8b0000",xsOmon:"e9967a",xsHgYF:"8fbc8f",xUXe:"483d8b",xUWay:"2f4f4f",xUgYy:"2f4f4f",xQe:"ced1",xviTet:"9400d3",dAppRk:"ff1493",dApskyXe:"bfff",dimWay:"696969",dimgYy:"696969",dodgerXe:"1e90ff",fiYbrick:"b22222",flSOwEte:"fffaf0",foYstWAn:"228b22",fuKsia:"ff00ff",gaRsbSo:"dcdcdc",ghostwEte:"f8f8ff",gTd:"ffd700",gTMnPd:"daa520",Way:"808080",gYF:"8000",gYFLw:"adff2f",gYy:"808080",honeyMw:"f0fff0",hotpRk:"ff69b4",RdianYd:"cd5c5c",Rdigo:"4b0082",ivSy:"fffff0",khaki:"f0e68c",lavFMr:"e6e6fa",lavFMrXsh:"fff0f5",lawngYF:"7cfc00",NmoncEffon:"fffacd",ZXe:"add8e6",ZcSO:"f08080",Zcyan:"e0ffff",ZgTMnPdLw:"fafad2",ZWay:"d3d3d3",ZgYF:"90ee90",ZgYy:"d3d3d3",ZpRk:"ffb6c1",ZsOmon:"ffa07a",ZsHgYF:"20b2aa",ZskyXe:"87cefa",ZUWay:"778899",ZUgYy:"778899",ZstAlXe:"b0c4de",ZLw:"ffffe0",lime:"ff00",limegYF:"32cd32",lRF:"faf0e6",magFta:"ff00ff",maPon:"800000",VaquamarRe:"66cdaa",VXe:"cd",VScEd:"ba55d3",VpurpN:"9370db",VsHgYF:"3cb371",VUXe:"7b68ee",VsprRggYF:"fa9a",VQe:"48d1cc",VviTetYd:"c71585",midnightXe:"191970",mRtcYam:"f5fffa",mistyPse:"ffe4e1",moccasR:"ffe4b5",navajowEte:"ffdead",navy:"80",Tdlace:"fdf5e6",Tive:"808000",TivedBb:"6b8e23",Sange:"ffa500",SangeYd:"ff4500",ScEd:"da70d6",pOegTMnPd:"eee8aa",pOegYF:"98fb98",pOeQe:"afeeee",pOeviTetYd:"db7093",papayawEp:"ffefd5",pHKpuff:"ffdab9",peru:"cd853f",pRk:"ffc0cb",plum:"dda0dd",powMrXe:"b0e0e6",purpN:"800080",YbeccapurpN:"663399",Yd:"ff0000",Psybrown:"bc8f8f",PyOXe:"4169e1",saddNbPwn:"8b4513",sOmon:"fa8072",sandybPwn:"f4a460",sHgYF:"2e8b57",sHshell:"fff5ee",siFna:"a0522d",silver:"c0c0c0",skyXe:"87ceeb",UXe:"6a5acd",UWay:"708090",UgYy:"708090",snow:"fffafa",sprRggYF:"ff7f",stAlXe:"4682b4",tan:"d2b48c",teO:"8080",tEstN:"d8bfd8",tomato:"ff6347",Qe:"40e0d0",viTet:"ee82ee",JHt:"f5deb3",wEte:"ffffff",wEtesmoke:"f5f5f5",Lw:"ffff00",LwgYF:"9acd32"};let Vt;function Wt(t,e,i){if(t){let s=Lt(t);s[e]=Math.max(0,Math.min(s[e]+s[e]*i,0===e?360:1)),s=It(s),t.r=s[0],t.g=s[1],t.b=s[2]}}function jt(t,e){return t?Object.assign(e||{},t):t}function Nt(t){var e={r:0,g:0,b:0,a:255};return Array.isArray(t)?t.length>=3&&(e={r:t[0],g:t[1],b:t[2],a:255},t.length>3&&(e.a=kt(t[3]))):(e=jt(t,{r:0,g:0,b:0,a:1})).a=kt(e.a),e}function Ht(t){return"r"===t.charAt(0)?function(t){const e=Dt.exec(t);let i,s,n,o=255;if(e){if(e[7]!==i){const t=+e[7];o=255&(e[8]?At(t):255*t)}return i=+e[1],s=+e[3],n=+e[5],i=255&(e[2]?At(i):i),s=255&(e[4]?At(s):s),n=255&(e[6]?At(n):n),{r:i,g:s,b:n,a:o}}}(t):function(t){const e=Pt.exec(t);let i,s=255;if(!e)return;e[5]!==i&&(s=e[6]?At(+e[5]):kt(+e[5]));const n=Bt(+e[2]),o=+e[3]/100,a=+e[4]/100;return i="hwb"===e[1]?function(t,e,i){return Rt(Tt,t,e,i)}(n,o,a):"hsv"===e[1]?function(t,e,i){return Rt(Ot,t,e,i)}(n,o,a):It(n,o,a),{r:i[0],g:i[1],b:i[2],a:s}}(t)}class $t{constructor(t){if(t instanceof $t)return t;const e=typeof t;let i;var s,n,o;"object"===e?i=Nt(t):"string"===e&&(o=(s=t).length,"#"===s[0]&&(4===o||5===o?n={r:255&17*bt[s[1]],g:255&17*bt[s[2]],b:255&17*bt[s[3]],a:5===o?17*bt[s[4]]:255}:7!==o&&9!==o||(n={r:bt[s[1]]<<4|bt[s[2]],g:bt[s[3]]<<4|bt[s[4]],b:bt[s[5]]<<4|bt[s[6]],a:9===o?bt[s[7]]<<4|bt[s[8]]:255})),i=n||function(t){Vt||(Vt=function(){const t={},e=Object.keys(Ft),i=Object.keys(zt);let s,n,o,a,r;for(s=0;s<e.length;s++){for(a=r=e[s],n=0;n<i.length;n++)o=i[n],r=r.replace(o,zt[o]);o=parseInt(Ft[a],16),t[r]=[o>>16&255,o>>8&255,255&o]}return t}(),Vt.transparent=[0,0,0,0]);const e=Vt[t.toLowerCase()];return e&&{r:e[0],g:e[1],b:e[2],a:4===e.length?e[3]:255}}(t)||Ht(t)),this._rgb=i,this._valid=!!i}get valid(){return this._valid}get rgb(){var t=jt(this._rgb);return t&&(t.a=Ct(t.a)),t}set rgb(t){this._rgb=Nt(t)}rgbString(){return this._valid?(t=this._rgb)&&(t.a<255?`rgba(${t.r}, ${t.g}, ${t.b}, ${Ct(t.a)})`:`rgb(${t.r}, ${t.g}, ${t.b})`):this._rgb;var t}hexString(){return this._valid?(t=this._rgb,e=function(t){return vt(t.r)&&vt(t.g)&&vt(t.b)&&vt(t.a)}(t)?_t:yt,t?"#"+e(t.r)+e(t.g)+e(t.b)+(t.a<255?e(t.a):""):t):this._rgb;var t,e}hslString(){return this._valid?function(t){if(!t)return;const e=Lt(t),i=e[0],s=St(e[1]),n=St(e[2]);return t.a<255?`hsla(${i}, ${s}%, ${n}%, ${Ct(t.a)})`:`hsl(${i}, ${s}%, ${n}%)`}(this._rgb):this._rgb}mix(t,e){const i=this;if(t){const s=i.rgb,n=t.rgb;let o;const a=e===o?.5:e,r=2*a-1,h=s.a-n.a,l=((r*h==-1?r:(r+h)/(1+r*h))+1)/2;o=1-l,s.r=255&l*s.r+o*n.r+.5,s.g=255&l*s.g+o*n.g+.5,s.b=255&l*s.b+o*n.b+.5,s.a=a*s.a+(1-a)*n.a,i.rgb=s}return i}clone(){return new $t(this.rgb)}alpha(t){return this._rgb.a=kt(t),this}clearer(t){return this._rgb.a*=1-t,this}greyscale(){const t=this._rgb,e=wt(.3*t.r+.59*t.g+.11*t.b);return t.r=t.g=t.b=e,this}opaquer(t){return this._rgb.a*=1+t,this}negate(){const t=this._rgb;return t.r=255-t.r,t.g=255-t.g,t.b=255-t.b,this}lighten(t){return Wt(this._rgb,2,t),this}darken(t){return Wt(this._rgb,2,-t),this}saturate(t){return Wt(this._rgb,1,t),this}desaturate(t){return Wt(this._rgb,1,-t),this}rotate(t){return function(t,e){var i=Lt(t);i[0]=Bt(i[0]+e),i=It(i),t.r=i[0],t.g=i[1],t.b=i[2]}(this._rgb,t),this}}function Yt(t){return new $t(t)}const Ut=t=>t instanceof CanvasGradient||t instanceof CanvasPattern;function Xt(t){return Ut(t)?t:Yt(t)}function qt(t){return Ut(t)?t:Yt(t).saturate(.5).darken(.1).hexString()}const Kt=Object.create(null),Zt=Object.create(null);function Gt(t,e){if(!e)return t;const i=e.split(".");for(let e=0,s=i.length;e<s;++e){const s=i[e];t=t[s]||(t[s]=Object.create(null))}return t}function Jt(t,e,i){return"string"==typeof e?R(Gt(t,e),i):R(Gt(t,""),e)}var Qt=new class{constructor(t){this.animation=void 0,this.backgroundColor="rgba(0,0,0,0.1)",this.borderColor="rgba(0,0,0,0.1)",this.color="#666",this.datasets={},this.devicePixelRatio=t=>t.chart.platform.getDevicePixelRatio(),this.elements={},this.events=["mousemove","mouseout","click","touchstart","touchmove"],this.font={family:"'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",size:12,style:"normal",lineHeight:1.2,weight:null},this.hover={},this.hoverBackgroundColor=(t,e)=>qt(e.backgroundColor),this.hoverBorderColor=(t,e)=>qt(e.borderColor),this.hoverColor=(t,e)=>qt(e.color),this.indexAxis="x",this.interaction={mode:"nearest",intersect:!0},this.maintainAspectRatio=!0,this.onHover=null,this.onClick=null,this.parsing=!0,this.plugins={},this.responsive=!0,this.scale=void 0,this.scales={},this.showLine=!0,this.drawActiveElementsOnTop=!0,this.describe(t)}set(t,e){return Jt(this,t,e)}get(t){return Gt(this,t)}describe(t,e){return Jt(Zt,t,e)}override(t,e){return Jt(Kt,t,e)}route(t,e,i,s){const n=Gt(this,t),o=Gt(this,i),a="_"+e;Object.defineProperties(n,{[a]:{value:n[e],writable:!0},[e]:{enumerable:!0,get(){const t=this[a],e=o[s];return M(t)?Object.assign({},e,t):C(t,e)},set(t){this[a]=t}}})}}({_scriptable:t=>!t.startsWith("on"),_indexable:t=>"events"!==t,hover:{_fallback:"interaction"},interaction:{_scriptable:!1,_indexable:!1}});function te(t,e,i,s,n){let o=e[n];return o||(o=e[n]=t.measureText(n).width,i.push(n)),o>s&&(s=o),s}function ee(t,e,i,s){let n=(s=s||{}).data=s.data||{},o=s.garbageCollect=s.garbageCollect||[];s.font!==e&&(n=s.data={},o=s.garbageCollect=[],s.font=e),t.save(),t.font=e;let a=0;const r=i.length;let h,l,c,d,u;for(h=0;h<r;h++)if(d=i[h],null!=d&&!0!==w(d))a=te(t,n,o,a,d);else if(w(d))for(l=0,c=d.length;l<c;l++)u=d[l],null==u||w(u)||(a=te(t,n,o,a,u));t.restore();const p=o.length/2;if(p>i.length){for(h=0;h<p;h++)delete n[o[h]];o.splice(0,p)}return a}function ie(t,e,i){const s=t.currentDevicePixelRatio,n=0!==i?Math.max(i/2,.5):0;return Math.round((e-n)*s)/s+n}function se(t,e){(e=e||t.getContext("2d")).save(),e.resetTransform(),e.clearRect(0,0,t.width,t.height),e.restore()}function ne(t,e,i,s){let n,o,a,r,h;const l=e.pointStyle,c=e.rotation,d=e.radius;let u=(c||0)*X;if(l&&"object"==typeof l&&(n=l.toString(),"[object HTMLImageElement]"===n||"[object HTMLCanvasElement]"===n))return t.save(),t.translate(i,s),t.rotate(u),t.drawImage(l,-l.width/2,-l.height/2,l.width,l.height),void t.restore();if(!(isNaN(d)||d<=0)){switch(t.beginPath(),l){default:t.arc(i,s,d,0,$),t.closePath();break;case"triangle":t.moveTo(i+Math.sin(u)*d,s-Math.cos(u)*d),u+=Z,t.lineTo(i+Math.sin(u)*d,s-Math.cos(u)*d),u+=Z,t.lineTo(i+Math.sin(u)*d,s-Math.cos(u)*d),t.closePath();break;case"rectRounded":h=.516*d,r=d-h,o=Math.cos(u+K)*r,a=Math.sin(u+K)*r,t.arc(i-o,s-a,h,u-H,u-q),t.arc(i+a,s-o,h,u-q,u),t.arc(i+o,s+a,h,u,u+q),t.arc(i-a,s+o,h,u+q,u+H),t.closePath();break;case"rect":if(!c){r=Math.SQRT1_2*d,t.rect(i-r,s-r,2*r,2*r);break}u+=K;case"rectRot":o=Math.cos(u)*d,a=Math.sin(u)*d,t.moveTo(i-o,s-a),t.lineTo(i+a,s-o),t.lineTo(i+o,s+a),t.lineTo(i-a,s+o),t.closePath();break;case"crossRot":u+=K;case"cross":o=Math.cos(u)*d,a=Math.sin(u)*d,t.moveTo(i-o,s-a),t.lineTo(i+o,s+a),t.moveTo(i+a,s-o),t.lineTo(i-a,s+o);break;case"star":o=Math.cos(u)*d,a=Math.sin(u)*d,t.moveTo(i-o,s-a),t.lineTo(i+o,s+a),t.moveTo(i+a,s-o),t.lineTo(i-a,s+o),u+=K,o=Math.cos(u)*d,a=Math.sin(u)*d,t.moveTo(i-o,s-a),t.lineTo(i+o,s+a),t.moveTo(i+a,s-o),t.lineTo(i-a,s+o);break;case"line":o=Math.cos(u)*d,a=Math.sin(u)*d,t.moveTo(i-o,s-a),t.lineTo(i+o,s+a);break;case"dash":t.moveTo(i,s),t.lineTo(i+Math.cos(u)*d,s+Math.sin(u)*d)}t.fill(),e.borderWidth>0&&t.stroke()}}function oe(t,e,i){return i=i||.5,!e||t&&t.x>e.left-i&&t.x<e.right+i&&t.y>e.top-i&&t.y<e.bottom+i}function ae(t,e){t.save(),t.beginPath(),t.rect(e.left,e.top,e.right-e.left,e.bottom-e.top),t.clip()}function re(t){t.restore()}function he(t,e,i,s,n){if(!e)return t.lineTo(i.x,i.y);if("middle"===n){const s=(e.x+i.x)/2;t.lineTo(s,e.y),t.lineTo(s,i.y)}else"after"===n!=!!s?t.lineTo(e.x,i.y):t.lineTo(i.x,e.y);t.lineTo(i.x,i.y)}function le(t,e,i,s){if(!e)return t.lineTo(i.x,i.y);t.bezierCurveTo(s?e.cp1x:e.cp2x,s?e.cp1y:e.cp2y,s?i.cp2x:i.cp1x,s?i.cp2y:i.cp1y,i.x,i.y)}function ce(t,e,i,s,n,o={}){const a=w(e)?e:[e],r=o.strokeWidth>0&&""!==o.strokeColor;let h,l;for(t.save(),t.font=n.string,function(t,e){e.translation&&t.translate(e.translation[0],e.translation[1]),v(e.rotation)||t.rotate(e.rotation),e.color&&(t.fillStyle=e.color),e.textAlign&&(t.textAlign=e.textAlign),e.textBaseline&&(t.textBaseline=e.textBaseline)}(t,o),h=0;h<a.length;++h)l=a[h],r&&(o.strokeColor&&(t.strokeStyle=o.strokeColor),v(o.strokeWidth)||(t.lineWidth=o.strokeWidth),t.strokeText(l,i,s,o.maxWidth)),t.fillText(l,i,s,o.maxWidth),de(t,i,s,l,o),s+=n.lineHeight;t.restore()}function de(t,e,i,s,n){if(n.strikethrough||n.underline){const o=t.measureText(s),a=e-o.actualBoundingBoxLeft,r=e+o.actualBoundingBoxRight,h=i-o.actualBoundingBoxAscent,l=i+o.actualBoundingBoxDescent,c=n.strikethrough?(h+l)/2:l;t.strokeStyle=t.fillStyle,t.beginPath(),t.lineWidth=n.decorationWidth||2,t.moveTo(a,c),t.lineTo(r,c),t.stroke()}}function ue(t,e){const{x:i,y:s,w:n,h:o,radius:a}=e;t.arc(i+a.topLeft,s+a.topLeft,a.topLeft,-q,H,!0),t.lineTo(i,s+o-a.bottomLeft),t.arc(i+a.bottomLeft,s+o-a.bottomLeft,a.bottomLeft,H,q,!0),t.lineTo(i+n-a.bottomRight,s+o),t.arc(i+n-a.bottomRight,s+o-a.bottomRight,a.bottomRight,q,0,!0),t.lineTo(i+n,s+a.topRight),t.arc(i+n-a.topRight,s+a.topRight,a.topRight,0,-q,!0),t.lineTo(i+a.topLeft,s)}const pe=new RegExp(/^(normal|(\d+(?:\.\d+)?)(px|em|%)?)$/),ge=new RegExp(/^(normal|italic|initial|inherit|unset|(oblique( -?[0-9]?[0-9]deg)?))$/);function fe(t,e){const i=(""+t).match(pe);if(!i||"normal"===i[1])return 1.2*e;switch(t=+i[2],i[3]){case"px":return t;case"%":t/=100}return e*t}function me(t,e){const i={},s=M(e),n=s?Object.keys(e):e,o=M(t)?s?i=>C(t[i],t[e[i]]):e=>t[e]:()=>t;for(const t of n)i[t]=+o(t)||0;return i}function be(t){return me(t,{top:"y",right:"x",bottom:"y",left:"x"})}function xe(t){return me(t,["topLeft","topRight","bottomLeft","bottomRight"])}function _e(t){const e=be(t);return e.width=e.left+e.right,e.height=e.top+e.bottom,e}function ye(t,e){t=t||{},e=e||Qt.font;let i=C(t.size,e.size);"string"==typeof i&&(i=parseInt(i,10));let s=C(t.style,e.style);s&&!(""+s).match(ge)&&(console.warn('Invalid font style specified: "'+s+'"'),s="");const n={family:C(t.family,e.family),lineHeight:fe(C(t.lineHeight,e.lineHeight),i),size:i,style:s,weight:C(t.weight,e.weight),string:""};return n.string=function(t){return!t||v(t.size)||v(t.family)?null:(t.style?t.style+" ":"")+(t.weight?t.weight+" ":"")+t.size+"px "+t.family}(n),n}function ve(t,e,i,s){let n,o,a,r=!0;for(n=0,o=t.length;n<o;++n)if(a=t[n],void 0!==a&&(void 0!==e&&"function"==typeof a&&(a=a(e),r=!1),void 0!==i&&w(a)&&(a=a[i%a.length],r=!1),void 0!==a))return s&&!r&&(s.cacheable=!1),a}function we(t,e){return Object.assign(Object.create(t),e)}function Me(t,e,i){i=i||(i=>t[i]<e);let s,n=t.length-1,o=0;for(;n-o>1;)s=o+n>>1,i(s)?o=s:n=s;return{lo:o,hi:n}}const Ae=(t,e,i)=>Me(t,i,(s=>t[s][e]<i)),ke=(t,e,i)=>Me(t,i,(s=>t[s][e]>=i)),Ce=["push","pop","shift","splice","unshift"];function Se(t,e){const i=t._chartjs;if(!i)return;const s=i.listeners,n=s.indexOf(e);-1!==n&&s.splice(n,1),s.length>0||(Ce.forEach((e=>{delete t[e]})),delete t._chartjs)}function De(t){const e=new Set;let i,s;for(i=0,s=t.length;i<s;++i)e.add(t[i]);return e.size===s?t:Array.from(e)}function Pe(t,e=[""],i=t,s,n=(()=>t[0])){W(s)||(s=We("_fallback",t));const o={[Symbol.toStringTag]:"Object",_cacheable:!0,_scopes:t,_rootScopes:i,_fallback:s,_getTarget:n,override:n=>Pe([n,...t],e,i,s)};return new Proxy(o,{deleteProperty:(e,i)=>(delete e[i],delete e._keys,delete t[0][i],!0),get:(i,s)=>Re(i,s,(()=>function(t,e,i,s){let n;for(const o of e)if(n=We(Te(o,t),i),W(n))return Le(t,n)?Fe(i,s,t,n):n}(s,e,t,i))),getOwnPropertyDescriptor:(t,e)=>Reflect.getOwnPropertyDescriptor(t._scopes[0],e),getPrototypeOf:()=>Reflect.getPrototypeOf(t[0]),has:(t,e)=>je(t).includes(e),ownKeys:t=>je(t),set(t,e,i){const s=t._storage||(t._storage=n());return t[e]=s[e]=i,delete t._keys,!0}})}function Ee(t,e,i,s){const n={_cacheable:!1,_proxy:t,_context:e,_subProxy:i,_stack:new Set,_descriptors:Oe(t,s),setContext:e=>Ee(t,e,i,s),override:n=>Ee(t.override(n),e,i,s)};return new Proxy(n,{deleteProperty:(e,i)=>(delete e[i],delete t[i],!0),get:(t,e,i)=>Re(t,e,(()=>function(t,e,i){const{_proxy:s,_context:n,_subProxy:o,_descriptors:a}=t;let r=s[e];return j(r)&&a.isScriptable(e)&&(r=function(t,e,i,s){const{_proxy:n,_context:o,_subProxy:a,_stack:r}=i;if(r.has(t))throw new Error("Recursion detected: "+Array.from(r).join("->")+"->"+t);return r.add(t),e=e(o,a||s),r.delete(t),Le(t,e)&&(e=Fe(n._scopes,n,t,e)),e}(e,r,t,i)),w(r)&&r.length&&(r=function(t,e,i,s){const{_proxy:n,_context:o,_subProxy:a,_descriptors:r}=i;if(W(o.index)&&s(t))e=e[o.index%e.length];else if(M(e[0])){const i=e,s=n._scopes.filter((t=>t!==i));e=[];for(const h of i){const i=Fe(s,n,t,h);e.push(Ee(i,o,a&&a[t],r))}}return e}(e,r,t,a.isIndexable)),Le(e,r)&&(r=Ee(r,n,o&&o[e],a)),r}(t,e,i))),getOwnPropertyDescriptor:(e,i)=>e._descriptors.allKeys?Reflect.has(t,i)?{enumerable:!0,configurable:!0}:void 0:Reflect.getOwnPropertyDescriptor(t,i),getPrototypeOf:()=>Reflect.getPrototypeOf(t),has:(e,i)=>Reflect.has(t,i),ownKeys:()=>Reflect.ownKeys(t),set:(e,i,s)=>(t[i]=s,delete e[i],!0)})}function Oe(t,e={scriptable:!0,indexable:!0}){const{_scriptable:i=e.scriptable,_indexable:s=e.indexable,_allKeys:n=e.allKeys}=t;return{allKeys:n,scriptable:i,indexable:s,isScriptable:j(i)?i:()=>i,isIndexable:j(s)?s:()=>s}}const Te=(t,e)=>t?t+V(e):e,Le=(t,e)=>M(e)&&"adapters"!==t&&(null===Object.getPrototypeOf(e)||e.constructor===Object);function Re(t,e,i){if(Object.prototype.hasOwnProperty.call(t,e))return t[e];const s=i();return t[e]=s,s}function Ie(t,e,i){return j(t)?t(e,i):t}const Be=(t,e)=>!0===t?e:"string"==typeof t?F(e,t):void 0;function ze(t,e,i,s,n){for(const o of e){const e=Be(i,o);if(e){t.add(e);const o=Ie(e._fallback,i,n);if(W(o)&&o!==i&&o!==s)return o}else if(!1===e&&W(s)&&i!==s)return null}return!1}function Fe(t,e,i,s){const n=e._rootScopes,o=Ie(e._fallback,i,s),a=[...t,...n],r=new Set;r.add(s);let h=Ve(r,a,i,o||i,s);return null!==h&&(!W(o)||o===i||(h=Ve(r,a,o,h,s),null!==h))&&Pe(Array.from(r),[""],n,o,(()=>function(t,e,i){const s=t._getTarget();e in s||(s[e]={});const n=s[e];return w(n)&&M(i)?i:n}(e,i,s)))}function Ve(t,e,i,s,n){for(;i;)i=ze(t,e,i,s,n);return i}function We(t,e){for(const i of e){if(!i)continue;const e=i[t];if(W(e))return e}}function je(t){let e=t._keys;return e||(e=t._keys=function(t){const e=new Set;for(const i of t)for(const t of Object.keys(i).filter((t=>!t.startsWith("_"))))e.add(t);return Array.from(e)}(t._scopes)),e}const Ne=Number.EPSILON||1e-14,He=(t,e)=>e<t.length&&!t[e].skip&&t[e],$e=t=>"x"===t?"y":"x";function Ye(t,e,i,s){const n=t.skip?e:t,o=e,a=i.skip?e:i,r=rt(o,n),h=rt(a,o);let l=r/(r+h),c=h/(r+h);l=isNaN(l)?0:l,c=isNaN(c)?0:c;const d=s*l,u=s*c;return{previous:{x:o.x-d*(a.x-n.x),y:o.y-d*(a.y-n.y)},next:{x:o.x+u*(a.x-n.x),y:o.y+u*(a.y-n.y)}}}function Ue(t,e,i){return Math.max(Math.min(t,i),e)}function Xe(t,e,i,s,n){let o,a,r,h;if(e.spanGaps&&(t=t.filter((t=>!t.skip))),"monotone"===e.cubicInterpolationMode)!function(t,e="x"){const i=$e(e),s=t.length,n=Array(s).fill(0),o=Array(s);let a,r,h,l=He(t,0);for(a=0;a<s;++a)if(r=h,h=l,l=He(t,a+1),h){if(l){const t=l[e]-h[e];n[a]=0!==t?(l[i]-h[i])/t:0}o[a]=r?l?J(n[a-1])!==J(n[a])?0:(n[a-1]+n[a])/2:n[a-1]:n[a]}!function(t,e,i){const s=t.length;let n,o,a,r,h,l=He(t,0);for(let c=0;c<s-1;++c)h=l,l=He(t,c+1),h&&l&&(et(e[c],0,Ne)?i[c]=i[c+1]=0:(n=i[c]/e[c],o=i[c+1]/e[c],r=Math.pow(n,2)+Math.pow(o,2),r<=9||(a=3/Math.sqrt(r),i[c]=n*a*e[c],i[c+1]=o*a*e[c])))}(t,n,o),function(t,e,i="x"){const s=$e(i),n=t.length;let o,a,r,h=He(t,0);for(let l=0;l<n;++l){if(a=r,r=h,h=He(t,l+1),!r)continue;const n=r[i],c=r[s];a&&(o=(n-a[i])/3,r[`cp1${i}`]=n-o,r[`cp1${s}`]=c-o*e[l]),h&&(o=(h[i]-n)/3,r[`cp2${i}`]=n+o,r[`cp2${s}`]=c+o*e[l])}}(t,o,e)}(t,n);else{let i=s?t[t.length-1]:t[0];for(o=0,a=t.length;o<a;++o)r=t[o],h=Ye(i,r,t[Math.min(o+1,a-(s?0:1))%a],e.tension),r.cp1x=h.previous.x,r.cp1y=h.previous.y,r.cp2x=h.next.x,r.cp2y=h.next.y,i=r}e.capBezierPoints&&function(t,e){let i,s,n,o,a,r=oe(t[0],e);for(i=0,s=t.length;i<s;++i)a=o,o=r,r=i<s-1&&oe(t[i+1],e),o&&(n=t[i],a&&(n.cp1x=Ue(n.cp1x,e.left,e.right),n.cp1y=Ue(n.cp1y,e.top,e.bottom)),r&&(n.cp2x=Ue(n.cp2x,e.left,e.right),n.cp2y=Ue(n.cp2y,e.top,e.bottom)))}(t,i)}function qe(){return"undefined"!=typeof window&&"undefined"!=typeof document}function Ke(t){let e=t.parentNode;return e&&"[object ShadowRoot]"===e.toString()&&(e=e.host),e}function Ze(t,e,i){let s;return"string"==typeof t?(s=parseInt(t,10),-1!==t.indexOf("%")&&(s=s/100*e.parentNode[i])):s=t,s}const Ge=t=>window.getComputedStyle(t,null),Je=["top","right","bottom","left"];function Qe(t,e,i){const s={};i=i?"-"+i:"";for(let n=0;n<4;n++){const o=Je[n];s[o]=parseFloat(t[e+"-"+o+i])||0}return s.width=s.left+s.right,s.height=s.top+s.bottom,s}function ti(t,e){const{canvas:i,currentDevicePixelRatio:s}=e,n=Ge(i),o="border-box"===n.boxSizing,a=Qe(n,"padding"),r=Qe(n,"border","width"),{x:h,y:l,box:c}=function(t,e){const i=t.native||t,s=i.touches,n=s&&s.length?s[0]:i,{offsetX:o,offsetY:a}=n;let r,h,l=!1;if(((t,e,i)=>(t>0||e>0)&&(!i||!i.shadowRoot))(o,a,i.target))r=o,h=a;else{const t=e.getBoundingClientRect();r=n.clientX-t.left,h=n.clientY-t.top,l=!0}return{x:r,y:h,box:l}}(t,i),d=a.left+(c&&r.left),u=a.top+(c&&r.top);let{width:p,height:g}=e;return o&&(p-=a.width+r.width,g-=a.height+r.height),{x:Math.round((h-d)/p*i.width/s),y:Math.round((l-u)/g*i.height/s)}}const ei=t=>Math.round(10*t)/10;function ii(t,e,i){const s=e||1,n=Math.floor(t.height*s),o=Math.floor(t.width*s);t.height=n/s,t.width=o/s;const a=t.canvas;return a.style&&(i||!a.style.height&&!a.style.width)&&(a.style.height=`${t.height}px`,a.style.width=`${t.width}px`),(t.currentDevicePixelRatio!==s||a.height!==n||a.width!==o)&&(t.currentDevicePixelRatio=s,a.height=n,a.width=o,t.ctx.setTransform(s,0,0,s,0,0),!0)}const si=function(){let t=!1;try{const e={get passive(){return t=!0,!1}};window.addEventListener("test",null,e),window.removeEventListener("test",null,e)}catch(t){}return t}();function ni(t,e){const i=function(t,e){return Ge(t).getPropertyValue(e)}(t,e),s=i&&i.match(/^(\d+)(\.\d+)?px$/);return s?+s[1]:void 0}function oi(t,e,i,s){return{x:t.x+i*(e.x-t.x),y:t.y+i*(e.y-t.y)}}function ai(t,e,i,s){return{x:t.x+i*(e.x-t.x),y:"middle"===s?i<.5?t.y:e.y:"after"===s?i<1?t.y:e.y:i>0?e.y:t.y}}function ri(t,e,i,s){const n={x:t.cp2x,y:t.cp2y},o={x:e.cp1x,y:e.cp1y},a=oi(t,n,i),r=oi(n,o,i),h=oi(o,e,i),l=oi(a,r,i),c=oi(r,h,i);return oi(l,c,i)}const hi=new Map;function li(t,e,i){return function(t,e){e=e||{};const i=t+JSON.stringify(e);let s=hi.get(i);return s||(s=new Intl.NumberFormat(t,e),hi.set(i,s)),s}(e,i).format(t)}function ci(t,e,i){return t?function(t,e){return{x:i=>t+t+e-i,setWidth(t){e=t},textAlign:t=>"center"===t?t:"right"===t?"left":"right",xPlus:(t,e)=>t-e,leftForLtr:(t,e)=>t-e}}(e,i):{x:t=>t,setWidth(t){},textAlign:t=>t,xPlus:(t,e)=>t+e,leftForLtr:(t,e)=>t}}function di(t,e){let i,s;"ltr"!==e&&"rtl"!==e||(i=t.canvas.style,s=[i.getPropertyValue("direction"),i.getPropertyPriority("direction")],i.setProperty("direction",e,"important"),t.prevTextDirection=s)}function ui(t,e){void 0!==e&&(delete t.prevTextDirection,t.canvas.style.setProperty("direction",e[0],e[1]))}function pi(t){return"angle"===t?{between:ct,compare:ht,normalize:lt}:{between:ut,compare:(t,e)=>t-e,normalize:t=>t}}function gi({start:t,end:e,count:i,loop:s,style:n}){return{start:t%i,end:e%i,loop:s&&(e-t+1)%i==0,style:n}}function fi(t,e,i){if(!i)return[t];const{property:s,start:n,end:o}=i,a=e.length,{compare:r,between:h,normalize:l}=pi(s),{start:c,end:d,loop:u,style:p}=function(t,e,i){const{property:s,start:n,end:o}=i,{between:a,normalize:r}=pi(s),h=e.length;let l,c,{start:d,end:u,loop:p}=t;if(p){for(d+=h,u+=h,l=0,c=h;l<c&&a(r(e[d%h][s]),n,o);++l)d--,u--;d%=h,u%=h}return u<d&&(u+=h),{start:d,end:u,loop:p,style:t.style}}(t,e,i),g=[];let f,m,b,x=!1,_=null;for(let t=c,i=c;t<=d;++t)m=e[t%a],m.skip||(f=l(m[s]),f!==b&&(x=h(f,n,o),null===_&&(x||h(n,b,f)&&0!==r(n,b))&&(_=0===r(f,n)?t:i),null!==_&&(!x||0===r(o,f)||h(o,b,f))&&(g.push(gi({start:_,end:t,loop:u,count:a,style:p})),_=null),i=t,b=f));return null!==_&&g.push(gi({start:_,end:d,loop:u,count:a,style:p})),g}function mi(t,e){const i=[],s=t.segments;for(let n=0;n<s.length;n++){const o=fi(s[n],t.points,e);o.length&&i.push(...o)}return i}function bi(t){return{backgroundColor:t.backgroundColor,borderCapStyle:t.borderCapStyle,borderDash:t.borderDash,borderDashOffset:t.borderDashOffset,borderJoinStyle:t.borderJoinStyle,borderWidth:t.borderWidth,borderColor:t.borderColor}}function xi(t,e){return e&&JSON.stringify(t)!==JSON.stringify(e)}var _i=new class{constructor(){this._request=null,this._charts=new Map,this._running=!1,this._lastDate=void 0}_notify(t,e,i,s){const n=e.listeners[s],o=e.duration;n.forEach((s=>s({chart:t,initial:e.initial,numSteps:o,currentStep:Math.min(i-e.start,o)})))}_refresh(){this._request||(this._running=!0,this._request=f.call(window,(()=>{this._update(),this._request=null,this._running&&this._refresh()})))}_update(t=Date.now()){let e=0;this._charts.forEach(((i,s)=>{if(!i.running||!i.items.length)return;const n=i.items;let o,a=n.length-1,r=!1;for(;a>=0;--a)o=n[a],o._active?(o._total>i.duration&&(i.duration=o._total),o.tick(t),r=!0):(n[a]=n[n.length-1],n.pop());r&&(s.draw(),this._notify(s,i,t,"progress")),n.length||(i.running=!1,this._notify(s,i,t,"complete"),i.initial=!1),e+=n.length})),this._lastDate=t,0===e&&(this._running=!1)}_getAnims(t){const e=this._charts;let i=e.get(t);return i||(i={running:!1,initial:!0,items:[],listeners:{complete:[],progress:[]}},e.set(t,i)),i}listen(t,e,i){this._getAnims(t).listeners[e].push(i)}add(t,e){e&&e.length&&this._getAnims(t).items.push(...e)}has(t){return this._getAnims(t).items.length>0}start(t){const e=this._charts.get(t);e&&(e.running=!0,e.start=Date.now(),e.duration=e.items.reduce(((t,e)=>Math.max(t,e._duration)),0),this._refresh())}running(t){if(!this._running)return!1;const e=this._charts.get(t);return!!(e&&e.running&&e.items.length)}stop(t){const e=this._charts.get(t);if(!e||!e.items.length)return;const i=e.items;let s=i.length-1;for(;s>=0;--s)i[s].cancel();e.items=[],this._notify(t,e,Date.now(),"complete")}remove(t){return this._charts.delete(t)}};const yi="transparent",vi={boolean:(t,e,i)=>i>.5?e:t,color(t,e,i){const s=Xt(t||yi),n=s.valid&&Xt(e||yi);return n&&n.valid?n.mix(s,i).hexString():e},number:(t,e,i)=>t+(e-t)*i};class wi{constructor(t,e,i,s){const n=e[i];s=ve([t.to,s,n,t.from]);const o=ve([t.from,n,s]);this._active=!0,this._fn=t.fn||vi[t.type||typeof o],this._easing=mt[t.easing]||mt.linear,this._start=Math.floor(Date.now()+(t.delay||0)),this._duration=this._total=Math.floor(t.duration),this._loop=!!t.loop,this._target=e,this._prop=i,this._from=o,this._to=s,this._promises=void 0}active(){return this._active}update(t,e,i){if(this._active){this._notify(!1);const s=this._target[this._prop],n=i-this._start,o=this._duration-n;this._start=i,this._duration=Math.floor(Math.max(o,t.duration)),this._total+=n,this._loop=!!t.loop,this._to=ve([t.to,e,s,t.from]),this._from=ve([t.from,s,e])}}cancel(){this._active&&(this.tick(Date.now()),this._active=!1,this._notify(!1))}tick(t){const e=t-this._start,i=this._duration,s=this._prop,n=this._from,o=this._loop,a=this._to;let r;if(this._active=n!==a&&(o||e<i),!this._active)return this._target[s]=a,void this._notify(!0);e<0?this._target[s]=n:(r=e/i%2,r=o&&r>1?2-r:r,r=this._easing(Math.min(1,Math.max(0,r))),this._target[s]=this._fn(n,a,r))}wait(){const t=this._promises||(this._promises=[]);return new Promise(((e,i)=>{t.push({res:e,rej:i})}))}_notify(t){const e=t?"res":"rej",i=this._promises||[];for(let t=0;t<i.length;t++)i[t][e]()}}Qt.set("animation",{delay:void 0,duration:1e3,easing:"easeOutQuart",fn:void 0,from:void 0,loop:void 0,to:void 0,type:void 0});const Mi=Object.keys(Qt.animation);Qt.describe("animation",{_fallback:!1,_indexable:!1,_scriptable:t=>"onProgress"!==t&&"onComplete"!==t&&"fn"!==t}),Qt.set("animations",{colors:{type:"color",properties:["color","borderColor","backgroundColor"]},numbers:{type:"number",properties:["x","y","borderWidth","radius","tension"]}}),Qt.describe("animations",{_fallback:"animation"}),Qt.set("transitions",{active:{animation:{duration:400}},resize:{animation:{duration:0}},show:{animations:{colors:{from:"transparent"},visible:{type:"boolean",duration:0}}},hide:{animations:{colors:{to:"transparent"},visible:{type:"boolean",easing:"linear",fn:t=>0|t}}}});class Ai{constructor(t,e){this._chart=t,this._properties=new Map,this.configure(e)}configure(t){if(!M(t))return;const e=this._properties;Object.getOwnPropertyNames(t).forEach((i=>{const s=t[i];if(!M(s))return;const n={};for(const t of Mi)n[t]=s[t];(w(s.properties)&&s.properties||[i]).forEach((t=>{t!==i&&e.has(t)||e.set(t,n)}))}))}_animateOptions(t,e){const i=e.options,s=function(t,e){if(!e)return;let i=t.options;if(i)return i.$shared&&(t.options=i=Object.assign({},i,{$shared:!1,$animations:{}})),i;t.options=e}(t,i);if(!s)return[];const n=this._createAnimations(s,i);return i.$shared&&function(t,e){const i=[],s=Object.keys(e);for(let e=0;e<s.length;e++){const n=t[s[e]];n&&n.active()&&i.push(n.wait())}return Promise.all(i)}(t.options.$animations,i).then((()=>{t.options=i}),(()=>{})),n}_createAnimations(t,e){const i=this._properties,s=[],n=t.$animations||(t.$animations={}),o=Object.keys(e),a=Date.now();let r;for(r=o.length-1;r>=0;--r){const h=o[r];if("$"===h.charAt(0))continue;if("options"===h){s.push(...this._animateOptions(t,e));continue}const l=e[h];let c=n[h];const d=i.get(h);if(c){if(d&&c.active()){c.update(d,l,a);continue}c.cancel()}d&&d.duration?(n[h]=c=new wi(d,t,h,l),s.push(c)):t[h]=l}return s}update(t,e){if(0===this._properties.size)return void Object.assign(t,e);const i=this._createAnimations(t,e);return i.length?(_i.add(this._chart,i),!0):void 0}}function ki(t,e){const i=t&&t.options||{},s=i.reverse,n=void 0===i.min?e:0,o=void 0===i.max?e:0;return{start:s?o:n,end:s?n:o}}function Ci(t,e){const i=[],s=t._getSortedDatasetMetas(e);let n,o;for(n=0,o=s.length;n<o;++n)i.push(s[n].index);return i}function Si(t,e,i,s={}){const n=t.keys,o="single"===s.mode;let a,r,h,l;if(null!==e){for(a=0,r=n.length;a<r;++a){if(h=+n[a],h===i){if(s.all)continue;break}l=t.values[h],A(l)&&(o||0===e||J(e)===J(l))&&(e+=l)}return e}}function Di(t,e){const i=t&&t.options.stacked;return i||void 0===i&&void 0!==e.stack}function Pi(t,e,i){const s=t[e]||(t[e]={});return s[i]||(s[i]={})}function Ei(t,e,i,s){for(const n of e.getMatchingVisibleMetas(s).reverse()){const e=t[n.index];if(i&&e>0||!i&&e<0)return n.index}return null}function Oi(t,e){const{chart:i,_cachedMeta:s}=t,n=i._stacks||(i._stacks={}),{iScale:o,vScale:a,index:r}=s,h=o.axis,l=a.axis,c=function(t,e,i){return`${t.id}.${e.id}.${i.stack||i.type}`}(o,a,s),d=e.length;let u;for(let t=0;t<d;++t){const i=e[t],{[h]:o,[l]:d}=i;u=(i._stacks||(i._stacks={}))[l]=Pi(n,c,o),u[r]=d,u._top=Ei(u,a,!0,s.type),u._bottom=Ei(u,a,!1,s.type)}}function Ti(t,e){const i=t.scales;return Object.keys(i).filter((t=>i[t].axis===e)).shift()}function Li(t,e){const i=t.controller.index,s=t.vScale&&t.vScale.axis;if(s){e=e||t._parsed;for(const t of e){const e=t._stacks;if(!e||void 0===e[s]||void 0===e[s][i])return;delete e[s][i]}}}const Ri=t=>"reset"===t||"none"===t,Ii=(t,e)=>e?t:Object.assign({},t);class Bi{constructor(t,e){this.chart=t,this._ctx=t.ctx,this.index=e,this._cachedDataOpts={},this._cachedMeta=this.getMeta(),this._type=this._cachedMeta.type,this.options=void 0,this._parsing=!1,this._data=void 0,this._objectData=void 0,this._sharedOptions=void 0,this._drawStart=void 0,this._drawCount=void 0,this.enableOptionSharing=!1,this.$context=void 0,this._syncList=[],this.initialize()}initialize(){const t=this._cachedMeta;this.configure(),this.linkScales(),t._stacked=Di(t.vScale,t),this.addElements()}updateIndex(t){this.index!==t&&Li(this._cachedMeta),this.index=t}linkScales(){const t=this.chart,e=this._cachedMeta,i=this.getDataset(),s=(t,e,i,s)=>"x"===t?e:"r"===t?s:i,n=e.xAxisID=C(i.xAxisID,Ti(t,"x")),o=e.yAxisID=C(i.yAxisID,Ti(t,"y")),a=e.rAxisID=C(i.rAxisID,Ti(t,"r")),r=e.indexAxis,h=e.iAxisID=s(r,n,o,a),l=e.vAxisID=s(r,o,n,a);e.xScale=this.getScaleForId(n),e.yScale=this.getScaleForId(o),e.rScale=this.getScaleForId(a),e.iScale=this.getScaleForId(h),e.vScale=this.getScaleForId(l)}getDataset(){return this.chart.data.datasets[this.index]}getMeta(){return this.chart.getDatasetMeta(this.index)}getScaleForId(t){return this.chart.scales[t]}_getOtherScale(t){const e=this._cachedMeta;return t===e.iScale?e.vScale:e.iScale}reset(){this._update("reset")}_destroy(){const t=this._cachedMeta;this._data&&Se(this._data,this),t._stacked&&Li(t)}_dataCheck(){const t=this.getDataset(),e=t.data||(t.data=[]),i=this._data;if(M(e))this._data=function(t){const e=Object.keys(t),i=new Array(e.length);let s,n,o;for(s=0,n=e.length;s<n;++s)o=e[s],i[s]={x:o,y:t[o]};return i}(e);else if(i!==e){if(i){Se(i,this);const t=this._cachedMeta;Li(t),t._parsed=[]}e&&Object.isExtensible(e)&&(this,(s=e)._chartjs?s._chartjs.listeners.push(this):(Object.defineProperty(s,"_chartjs",{configurable:!0,enumerable:!1,value:{listeners:[this]}}),Ce.forEach((t=>{const e="_onData"+V(t),i=s[t];Object.defineProperty(s,t,{configurable:!0,enumerable:!1,value(...t){const n=i.apply(this,t);return s._chartjs.listeners.forEach((i=>{"function"==typeof i[e]&&i[e](...t)})),n}})})))),this._syncList=[],this._data=e}var s}addElements(){const t=this._cachedMeta;this._dataCheck(),this.datasetElementType&&(t.dataset=new this.datasetElementType)}buildOrUpdateElements(t){const e=this._cachedMeta,i=this.getDataset();let s=!1;this._dataCheck();const n=e._stacked;e._stacked=Di(e.vScale,e),e.stack!==i.stack&&(s=!0,Li(e),e.stack=i.stack),this._resyncElements(t),(s||n!==e._stacked)&&Oi(this,e._parsed)}configure(){const t=this.chart.config,e=t.datasetScopeKeys(this._type),i=t.getOptionScopes(this.getDataset(),e,!0);this.options=t.createResolver(i,this.getContext()),this._parsing=this.options.parsing,this._cachedDataOpts={}}parse(t,e){const{_cachedMeta:i,_data:s}=this,{iScale:n,_stacked:o}=i,a=n.axis;let r,h,l,c=0===t&&e===s.length||i._sorted,d=t>0&&i._parsed[t-1];if(!1===this._parsing)i._parsed=s,i._sorted=!0,l=s;else{l=w(s[t])?this.parseArrayData(i,s,t,e):M(s[t])?this.parseObjectData(i,s,t,e):this.parsePrimitiveData(i,s,t,e);const n=()=>null===h[a]||d&&h[a]<d[a];for(r=0;r<e;++r)i._parsed[r+t]=h=l[r],c&&(n()&&(c=!1),d=h);i._sorted=c}o&&Oi(this,l)}parsePrimitiveData(t,e,i,s){const{iScale:n,vScale:o}=t,a=n.axis,r=o.axis,h=n.getLabels(),l=n===o,c=new Array(s);let d,u,p;for(d=0,u=s;d<u;++d)p=d+i,c[d]={[a]:l||n.parse(h[p],p),[r]:o.parse(e[p],p)};return c}parseArrayData(t,e,i,s){const{xScale:n,yScale:o}=t,a=new Array(s);let r,h,l,c;for(r=0,h=s;r<h;++r)l=r+i,c=e[l],a[r]={x:n.parse(c[0],l),y:o.parse(c[1],l)};return a}parseObjectData(t,e,i,s){const{xScale:n,yScale:o}=t,{xAxisKey:a="x",yAxisKey:r="y"}=this._parsing,h=new Array(s);let l,c,d,u;for(l=0,c=s;l<c;++l)d=l+i,u=e[d],h[l]={x:n.parse(F(u,a),d),y:o.parse(F(u,r),d)};return h}getParsed(t){return this._cachedMeta._parsed[t]}getDataElement(t){return this._cachedMeta.data[t]}applyStack(t,e,i){const s=this.chart,n=this._cachedMeta,o=e[t.axis];return Si({keys:Ci(s,!0),values:e._stacks[t.axis]},o,n.index,{mode:i})}updateRangeFromParsed(t,e,i,s){const n=i[e.axis];let o=null===n?NaN:n;const a=s&&i._stacks[e.axis];s&&a&&(s.values=a,o=Si(s,n,this._cachedMeta.index)),t.min=Math.min(t.min,o),t.max=Math.max(t.max,o)}getMinMax(t,e){const i=this._cachedMeta,s=i._parsed,n=i._sorted&&t===i.iScale,o=s.length,a=this._getOtherScale(t),r=((t,e,i)=>t&&!e.hidden&&e._stacked&&{keys:Ci(i,!0),values:null})(e,i,this.chart),h={min:Number.POSITIVE_INFINITY,max:Number.NEGATIVE_INFINITY},{min:l,max:c}=function(t){const{min:e,max:i,minDefined:s,maxDefined:n}=t.getUserBounds();return{min:s?e:Number.NEGATIVE_INFINITY,max:n?i:Number.POSITIVE_INFINITY}}(a);let d,u;function p(){u=s[d];const e=u[a.axis];return!A(u[t.axis])||l>e||c<e}for(d=0;d<o&&(p()||(this.updateRangeFromParsed(h,t,u,r),!n));++d);if(n)for(d=o-1;d>=0;--d)if(!p()){this.updateRangeFromParsed(h,t,u,r);break}return h}getAllParsedValues(t){const e=this._cachedMeta._parsed,i=[];let s,n,o;for(s=0,n=e.length;s<n;++s)o=e[s][t.axis],A(o)&&i.push(o);return i}getMaxOverflow(){return!1}getLabelAndValue(t){const e=this._cachedMeta,i=e.iScale,s=e.vScale,n=this.getParsed(t);return{label:i?""+i.getLabelForValue(n[i.axis]):"",value:s?""+s.getLabelForValue(n[s.axis]):""}}_update(t){const e=this._cachedMeta;this.update(t||"default"),e._clip=function(t){let e,i,s,n;return M(t)?(e=t.top,i=t.right,s=t.bottom,n=t.left):e=i=s=n=t,{top:e,right:i,bottom:s,left:n,disabled:!1===t}}(C(this.options.clip,function(t,e,i){if(!1===i)return!1;const s=ki(t,i),n=ki(e,i);return{top:n.end,right:s.end,bottom:n.start,left:s.start}}(e.xScale,e.yScale,this.getMaxOverflow())))}update(t){}draw(){const t=this._ctx,e=this.chart,i=this._cachedMeta,s=i.data||[],n=e.chartArea,o=[],a=this._drawStart||0,r=this._drawCount||s.length-a,h=this.options.drawActiveElementsOnTop;let l;for(i.dataset&&i.dataset.draw(t,n,a,r),l=a;l<a+r;++l){const e=s[l];e.hidden||(e.active&&h?o.push(e):e.draw(t,n))}for(l=0;l<o.length;++l)o[l].draw(t,n)}getStyle(t,e){const i=e?"active":"default";return void 0===t&&this._cachedMeta.dataset?this.resolveDatasetElementOptions(i):this.resolveDataElementOptions(t||0,i)}getContext(t,e,i){const s=this.getDataset();let n;if(t>=0&&t<this._cachedMeta.data.length){const e=this._cachedMeta.data[t];n=e.$context||(e.$context=function(t,e,i){return we(t,{active:!1,dataIndex:e,parsed:void 0,raw:void 0,element:i,index:e,mode:"default",type:"data"})}(this.getContext(),t,e)),n.parsed=this.getParsed(t),n.raw=s.data[t],n.index=n.dataIndex=t}else n=this.$context||(this.$context=function(t,e){return we(t,{active:!1,dataset:void 0,datasetIndex:e,index:e,mode:"default",type:"dataset"})}(this.chart.getContext(),this.index)),n.dataset=s,n.index=n.datasetIndex=this.index;return n.active=!!e,n.mode=i,n}resolveDatasetElementOptions(t){return this._resolveElementOptions(this.datasetElementType.id,t)}resolveDataElementOptions(t,e){return this._resolveElementOptions(this.dataElementType.id,e,t)}_resolveElementOptions(t,e="default",i){const s="active"===e,n=this._cachedDataOpts,o=t+"-"+e,a=n[o],r=this.enableOptionSharing&&W(i);if(a)return Ii(a,r);const h=this.chart.config,l=h.datasetElementScopeKeys(this._type,t),c=s?[`${t}Hover`,"hover",t,""]:[t,""],d=h.getOptionScopes(this.getDataset(),l),u=Object.keys(Qt.elements[t]),p=h.resolveNamedOptions(d,u,(()=>this.getContext(i,s)),c);return p.$shared&&(p.$shared=r,n[o]=Object.freeze(Ii(p,r))),p}_resolveAnimations(t,e,i){const s=this.chart,n=this._cachedDataOpts,o=`animation-${e}`,a=n[o];if(a)return a;let r;if(!1!==s.options.animation){const s=this.chart.config,n=s.datasetAnimationScopeKeys(this._type,e),o=s.getOptionScopes(this.getDataset(),n);r=s.createResolver(o,this.getContext(t,i,e))}const h=new Ai(s,r&&r.animations);return r&&r._cacheable&&(n[o]=Object.freeze(h)),h}getSharedOptions(t){if(t.$shared)return this._sharedOptions||(this._sharedOptions=Object.assign({},t))}includeOptions(t,e){return!e||Ri(t)||this.chart._animationsDisabled}updateElement(t,e,i,s){Ri(s)?Object.assign(t,i):this._resolveAnimations(e,s).update(t,i)}updateSharedOptions(t,e,i){t&&!Ri(e)&&this._resolveAnimations(void 0,e).update(t,i)}_setStyle(t,e,i,s){t.active=s;const n=this.getStyle(e,s);this._resolveAnimations(e,i,s).update(t,{options:!s&&this.getSharedOptions(n)||n})}removeHoverStyle(t,e,i){this._setStyle(t,i,"active",!1)}setHoverStyle(t,e,i){this._setStyle(t,i,"active",!0)}_removeDatasetHoverStyle(){const t=this._cachedMeta.dataset;t&&this._setStyle(t,void 0,"active",!1)}_setDatasetHoverStyle(){const t=this._cachedMeta.dataset;t&&this._setStyle(t,void 0,"active",!0)}_resyncElements(t){const e=this._data,i=this._cachedMeta.data;for(const[t,e,i]of this._syncList)this[t](e,i);this._syncList=[];const s=i.length,n=e.length,o=Math.min(n,s);o&&this.parse(0,o),n>s?this._insertElements(s,n-s,t):n<s&&this._removeElements(n,s-n)}_insertElements(t,e,i=!0){const s=this._cachedMeta,n=s.data,o=t+e;let a;const r=t=>{for(t.length+=e,a=t.length-1;a>=o;a--)t[a]=t[a-e]};for(r(n),a=t;a<o;++a)n[a]=new this.dataElementType;this._parsing&&r(s._parsed),this.parse(t,e),i&&this.updateElements(n,t,e,"reset")}updateElements(t,e,i,s){}_removeElements(t,e){const i=this._cachedMeta;if(this._parsing){const s=i._parsed.splice(t,e);i._stacked&&Li(i,s)}i.data.splice(t,e)}_sync(t){if(this._parsing)this._syncList.push(t);else{const[e,i,s]=t;this[e](i,s)}this.chart._dataChanges.push([this.index,...t])}_onDataPush(){const t=arguments.length;this._sync(["_insertElements",this.getDataset().data.length-t,t])}_onDataPop(){this._sync(["_removeElements",this._cachedMeta.data.length-1,1])}_onDataShift(){this._sync(["_removeElements",0,1])}_onDataSplice(t,e){e&&this._sync(["_removeElements",t,e]);const i=arguments.length-2;i&&this._sync(["_insertElements",t,i])}_onDataUnshift(){this._sync(["_insertElements",0,arguments.length])}}function zi(t){const e=t.iScale,i=function(t,e){if(!t._cache.$bar){const i=t.getMatchingVisibleMetas(e);let s=[];for(let e=0,n=i.length;e<n;e++)s=s.concat(i[e].controller.getAllParsedValues(t));t._cache.$bar=De(s.sort(((t,e)=>t-e)))}return t._cache.$bar}(e,t.type);let s,n,o,a,r=e._length;const h=()=>{32767!==o&&-32768!==o&&(W(a)&&(r=Math.min(r,Math.abs(o-a)||r)),a=o)};for(s=0,n=i.length;s<n;++s)o=e.getPixelForValue(i[s]),h();for(a=void 0,s=0,n=e.ticks.length;s<n;++s)o=e.getPixelForTick(s),h();return r}function Fi(t,e,i,s){return w(t)?function(t,e,i,s){const n=i.parse(t[0],s),o=i.parse(t[1],s),a=Math.min(n,o),r=Math.max(n,o);let h=a,l=r;Math.abs(a)>Math.abs(r)&&(h=r,l=a),e[i.axis]=l,e._custom={barStart:h,barEnd:l,start:n,end:o,min:a,max:r}}(t,e,i,s):e[i.axis]=i.parse(t,s),e}function Vi(t,e,i,s){const n=t.iScale,o=t.vScale,a=n.getLabels(),r=n===o,h=[];let l,c,d,u;for(l=i,c=i+s;l<c;++l)u=e[l],d={},d[n.axis]=r||n.parse(a[l],l),h.push(Fi(u,d,o,l));return h}function Wi(t){return t&&void 0!==t.barStart&&void 0!==t.barEnd}function ji(t,e,i,s){let n=e.borderSkipped;const o={};if(!n)return void(t.borderSkipped=o);const{start:a,end:r,reverse:h,top:l,bottom:c}=function(t){let e,i,s,n,o;return t.horizontal?(e=t.base>t.x,i="left",s="right"):(e=t.base<t.y,i="bottom",s="top"),e?(n="end",o="start"):(n="start",o="end"),{start:i,end:s,reverse:e,top:n,bottom:o}}(t);"middle"===n&&i&&(t.enableBorderRadius=!0,(i._top||0)===s?n=l:(i._bottom||0)===s?n=c:(o[Ni(c,a,r,h)]=!0,n=l)),o[Ni(n,a,r,h)]=!0,t.borderSkipped=o}function Ni(t,e,i,s){var n,o,a;return s?(a=i,t=Hi(t=(n=t)===(o=e)?a:n===a?o:n,i,e)):t=Hi(t,e,i),t}function Hi(t,e,i){return"start"===t?e:"end"===t?i:t}function $i(t,{inflateAmount:e},i){t.inflateAmount="auto"===e?1===i?.33:0:e}Bi.defaults={},Bi.prototype.datasetElementType=null,Bi.prototype.dataElementType=null;class Yi extends Bi{parsePrimitiveData(t,e,i,s){return Vi(t,e,i,s)}parseArrayData(t,e,i,s){return Vi(t,e,i,s)}parseObjectData(t,e,i,s){const{iScale:n,vScale:o}=t,{xAxisKey:a="x",yAxisKey:r="y"}=this._parsing,h="x"===n.axis?a:r,l="x"===o.axis?a:r,c=[];let d,u,p,g;for(d=i,u=i+s;d<u;++d)g=e[d],p={},p[n.axis]=n.parse(F(g,h),d),c.push(Fi(F(g,l),p,o,d));return c}updateRangeFromParsed(t,e,i,s){super.updateRangeFromParsed(t,e,i,s);const n=i._custom;n&&e===this._cachedMeta.vScale&&(t.min=Math.min(t.min,n.min),t.max=Math.max(t.max,n.max))}getMaxOverflow(){return 0}getLabelAndValue(t){const e=this._cachedMeta,{iScale:i,vScale:s}=e,n=this.getParsed(t),o=n._custom,a=Wi(o)?"["+o.start+", "+o.end+"]":""+s.getLabelForValue(n[s.axis]);return{label:""+i.getLabelForValue(n[i.axis]),value:a}}initialize(){this.enableOptionSharing=!0,super.initialize(),this._cachedMeta.stack=this.getDataset().stack}update(t){const e=this._cachedMeta;this.updateElements(e.data,0,e.data.length,t)}updateElements(t,e,i,s){const n="reset"===s,{index:o,_cachedMeta:{vScale:a}}=this,r=a.getBasePixel(),h=a.isHorizontal(),l=this._getRuler(),c=this.resolveDataElementOptions(e,s),d=this.getSharedOptions(c),u=this.includeOptions(s,d);this.updateSharedOptions(d,s,c);for(let c=e;c<e+i;c++){const e=this.getParsed(c),i=n||v(e[a.axis])?{base:r,head:r}:this._calculateBarValuePixels(c),p=this._calculateBarIndexPixels(c,l),g=(e._stacks||{})[a.axis],f={horizontal:h,base:i.base,enableBorderRadius:!g||Wi(e._custom)||o===g._top||o===g._bottom,x:h?i.head:p.center,y:h?p.center:i.head,height:h?p.size:Math.abs(i.size),width:h?Math.abs(i.size):p.size};u&&(f.options=d||this.resolveDataElementOptions(c,t[c].active?"active":s));const m=f.options||t[c].options;ji(f,m,g,o),$i(f,m,l.ratio),this.updateElement(t[c],c,f,s)}}_getStacks(t,e){const i=this._cachedMeta.iScale,s=i.getMatchingVisibleMetas(this._type),n=i.options.stacked,o=s.length,a=[];let r,h;for(r=0;r<o;++r)if(h=s[r],h.controller.options.grouped){if(void 0!==e){const t=h.controller.getParsed(e)[h.controller._cachedMeta.vScale.axis];if(v(t)||isNaN(t))continue}if((!1===n||-1===a.indexOf(h.stack)||void 0===n&&void 0===h.stack)&&a.push(h.stack),h.index===t)break}return a.length||a.push(void 0),a}_getStackCount(t){return this._getStacks(void 0,t).length}_getStackIndex(t,e,i){const s=this._getStacks(t,i),n=void 0!==e?s.indexOf(e):-1;return-1===n?s.length-1:n}_getRuler(){const t=this.options,e=this._cachedMeta,i=e.iScale,s=[];let n,o;for(n=0,o=e.data.length;n<o;++n)s.push(i.getPixelForValue(this.getParsed(n)[i.axis],n));const a=t.barThickness;return{min:a||zi(e),pixels:s,start:i._startPixel,end:i._endPixel,stackCount:this._getStackCount(),scale:i,grouped:t.grouped,ratio:a?1:t.categoryPercentage*t.barPercentage}}_calculateBarValuePixels(t){const{_cachedMeta:{vScale:e,_stacked:i},options:{base:s,minBarLength:n}}=this,o=s||0,a=this.getParsed(t),r=a._custom,h=Wi(r);let l,c,d=a[e.axis],u=0,p=i?this.applyStack(e,a,i):d;p!==d&&(u=p-d,p=d),h&&(d=r.barStart,p=r.barEnd-r.barStart,0!==d&&J(d)!==J(r.barEnd)&&(u=0),u+=d);const g=v(s)||h?u:s;let f=e.getPixelForValue(g);if(l=this.chart.getDataVisibility(t)?e.getPixelForValue(u+p):f,c=l-f,Math.abs(c)<n&&(c=function(t,e,i){return 0!==t?J(t):(e.isHorizontal()?1:-1)*(e.min>=i?1:-1)}(c,e,o)*n,d===o&&(f-=c/2),l=f+c),f===e.getPixelForValue(o)){const t=J(c)*e.getLineWidthForValue(o)/2;f+=t,c-=t}return{size:c,base:f,head:l,center:l+c/2}}_calculateBarIndexPixels(t,e){const i=e.scale,s=this.options,n=s.skipNull,o=C(s.maxBarThickness,1/0);let a,r;if(e.grouped){const i=n?this._getStackCount(t):e.stackCount,h="flex"===s.barThickness?function(t,e,i,s){const n=e.pixels,o=n[t];let a=t>0?n[t-1]:null,r=t<n.length-1?n[t+1]:null;const h=i.categoryPercentage;null===a&&(a=o-(null===r?e.end-e.start:r-o)),null===r&&(r=o+o-a);const l=o-(o-Math.min(a,r))/2*h;return{chunk:Math.abs(r-a)/2*h/s,ratio:i.barPercentage,start:l}}(t,e,s,i):function(t,e,i,s){const n=i.barThickness;let o,a;return v(n)?(o=e.min*i.categoryPercentage,a=i.barPercentage):(o=n*s,a=1),{chunk:o/s,ratio:a,start:e.pixels[t]-o/2}}(t,e,s,i),l=this._getStackIndex(this.index,this._cachedMeta.stack,n?t:void 0);a=h.start+h.chunk*l+h.chunk/2,r=Math.min(o,h.chunk*h.ratio)}else a=i.getPixelForValue(this.getParsed(t)[i.axis],t),r=Math.min(o,e.min*e.ratio);return{base:a-r/2,head:a+r/2,center:a,size:r}}draw(){const t=this._cachedMeta,e=t.vScale,i=t.data,s=i.length;let n=0;for(;n<s;++n)null!==this.getParsed(n)[e.axis]&&i[n].draw(this._ctx)}}Yi.id="bar",Yi.defaults={datasetElementType:!1,dataElementType:"bar",categoryPercentage:.8,barPercentage:.9,grouped:!0,animations:{numbers:{type:"number",properties:["x","y","base","width","height"]}}},Yi.overrides={scales:{_index_:{type:"category",offset:!0,grid:{offset:!0}},_value_:{type:"linear",beginAtZero:!0}}};class Ui extends Bi{initialize(){this.enableOptionSharing=!0,super.initialize()}parsePrimitiveData(t,e,i,s){const n=super.parsePrimitiveData(t,e,i,s);for(let t=0;t<n.length;t++)n[t]._custom=this.resolveDataElementOptions(t+i).radius;return n}parseArrayData(t,e,i,s){const n=super.parseArrayData(t,e,i,s);for(let t=0;t<n.length;t++){const s=e[i+t];n[t]._custom=C(s[2],this.resolveDataElementOptions(t+i).radius)}return n}parseObjectData(t,e,i,s){const n=super.parseObjectData(t,e,i,s);for(let t=0;t<n.length;t++){const s=e[i+t];n[t]._custom=C(s&&s.r&&+s.r,this.resolveDataElementOptions(t+i).radius)}return n}getMaxOverflow(){const t=this._cachedMeta.data;let e=0;for(let i=t.length-1;i>=0;--i)e=Math.max(e,t[i].size(this.resolveDataElementOptions(i))/2);return e>0&&e}getLabelAndValue(t){const e=this._cachedMeta,{xScale:i,yScale:s}=e,n=this.getParsed(t),o=i.getLabelForValue(n.x),a=s.getLabelForValue(n.y),r=n._custom;return{label:e.label,value:"("+o+", "+a+(r?", "+r:"")+")"}}update(t){const e=this._cachedMeta.data;this.updateElements(e,0,e.length,t)}updateElements(t,e,i,s){const n="reset"===s,{iScale:o,vScale:a}=this._cachedMeta,r=this.resolveDataElementOptions(e,s),h=this.getSharedOptions(r),l=this.includeOptions(s,h),c=o.axis,d=a.axis;for(let r=e;r<e+i;r++){const e=t[r],i=!n&&this.getParsed(r),h={},u=h[c]=n?o.getPixelForDecimal(.5):o.getPixelForValue(i[c]),p=h[d]=n?a.getBasePixel():a.getPixelForValue(i[d]);h.skip=isNaN(u)||isNaN(p),l&&(h.options=this.resolveDataElementOptions(r,e.active?"active":s),n&&(h.options.radius=0)),this.updateElement(e,r,h,s)}this.updateSharedOptions(h,s,r)}resolveDataElementOptions(t,e){const i=this.getParsed(t);let s=super.resolveDataElementOptions(t,e);s.$shared&&(s=Object.assign({},s,{$shared:!1}));const n=s.radius;return"active"!==e&&(s.radius=0),s.radius+=C(i&&i._custom,n),s}}Ui.id="bubble",Ui.defaults={datasetElementType:!1,dataElementType:"point",animations:{numbers:{type:"number",properties:["x","y","borderWidth","radius"]}}},Ui.overrides={scales:{x:{type:"linear"},y:{type:"linear"}},plugins:{tooltip:{callbacks:{title:()=>""}}}};class Xi extends Bi{constructor(t,e){super(t,e),this.enableOptionSharing=!0,this.innerRadius=void 0,this.outerRadius=void 0,this.offsetX=void 0,this.offsetY=void 0}linkScales(){}parse(t,e){const i=this.getDataset().data,s=this._cachedMeta;if(!1===this._parsing)s._parsed=i;else{let n,o,a=t=>+i[t];if(M(i[t])){const{key:t="value"}=this._parsing;a=e=>+F(i[e],t)}for(n=t,o=t+e;n<o;++n)s._parsed[n]=a(n)}}_getRotation(){return st(this.options.rotation-90)}_getCircumference(){return st(this.options.circumference)}_getRotationExtents(){let t=$,e=-$;for(let i=0;i<this.chart.data.datasets.length;++i)if(this.chart.isDatasetVisible(i)){const s=this.chart.getDatasetMeta(i).controller,n=s._getRotation(),o=s._getCircumference();t=Math.min(t,n),e=Math.max(e,n+o)}return{rotation:t,circumference:e-t}}update(t){const e=this.chart,{chartArea:i}=e,s=this._cachedMeta,n=s.data,o=this.getMaxBorderWidth()+this.getMaxOffset(n)+this.options.spacing,a=Math.max((Math.min(i.width,i.height)-o)/2,0),r=Math.min((l=a,"string"==typeof(h=this.options.cutout)&&h.endsWith("%")?parseFloat(h)/100:h/l),1);var h,l;const c=this._getRingWeight(this.index),{circumference:d,rotation:u}=this._getRotationExtents(),{ratioX:p,ratioY:g,offsetX:f,offsetY:m}=function(t,e,i){let s=1,n=1,o=0,a=0;if(e<$){const r=t,h=r+e,l=Math.cos(r),c=Math.sin(r),d=Math.cos(h),u=Math.sin(h),p=(t,e,s)=>ct(t,r,h,!0)?1:Math.max(e,e*i,s,s*i),g=(t,e,s)=>ct(t,r,h,!0)?-1:Math.min(e,e*i,s,s*i),f=p(0,l,d),m=p(q,c,u),b=g(H,l,d),x=g(H+q,c,u);s=(f-b)/2,n=(m-x)/2,o=-(f+b)/2,a=-(m+x)/2}return{ratioX:s,ratioY:n,offsetX:o,offsetY:a}}(u,d,r),b=(i.width-o)/p,x=(i.height-o)/g,_=Math.max(Math.min(b,x)/2,0),y=S(this.options.radius,_),v=(y-Math.max(y*r,0))/this._getVisibleDatasetWeightTotal();this.offsetX=f*y,this.offsetY=m*y,s.total=this.calculateTotal(),this.outerRadius=y-v*this._getRingWeightOffset(this.index),this.innerRadius=Math.max(this.outerRadius-v*c,0),this.updateElements(n,0,n.length,t)}_circumference(t,e){const i=this.options,s=this._cachedMeta,n=this._getCircumference();return e&&i.animation.animateRotate||!this.chart.getDataVisibility(t)||null===s._parsed[t]||s.data[t].hidden?0:this.calculateCircumference(s._parsed[t]*n/$)}updateElements(t,e,i,s){const n="reset"===s,o=this.chart,a=o.chartArea,r=o.options.animation,h=(a.left+a.right)/2,l=(a.top+a.bottom)/2,c=n&&r.animateScale,d=c?0:this.innerRadius,u=c?0:this.outerRadius,p=this.resolveDataElementOptions(e,s),g=this.getSharedOptions(p),f=this.includeOptions(s,g);let m,b=this._getRotation();for(m=0;m<e;++m)b+=this._circumference(m,n);for(m=e;m<e+i;++m){const e=this._circumference(m,n),i=t[m],o={x:h+this.offsetX,y:l+this.offsetY,startAngle:b,endAngle:b+e,circumference:e,outerRadius:u,innerRadius:d};f&&(o.options=g||this.resolveDataElementOptions(m,i.active?"active":s)),b+=e,this.updateElement(i,m,o,s)}this.updateSharedOptions(g,s,p)}calculateTotal(){const t=this._cachedMeta,e=t.data;let i,s=0;for(i=0;i<e.length;i++){const n=t._parsed[i];null===n||isNaN(n)||!this.chart.getDataVisibility(i)||e[i].hidden||(s+=Math.abs(n))}return s}calculateCircumference(t){const e=this._cachedMeta.total;return e>0&&!isNaN(t)?$*(Math.abs(t)/e):0}getLabelAndValue(t){const e=this._cachedMeta,i=this.chart,s=i.data.labels||[],n=li(e._parsed[t],i.options.locale);return{label:s[t]||"",value:n}}getMaxBorderWidth(t){let e=0;const i=this.chart;let s,n,o,a,r;if(!t)for(s=0,n=i.data.datasets.length;s<n;++s)if(i.isDatasetVisible(s)){o=i.getDatasetMeta(s),t=o.data,a=o.controller;break}if(!t)return 0;for(s=0,n=t.length;s<n;++s)r=a.resolveDataElementOptions(s),"inner"!==r.borderAlign&&(e=Math.max(e,r.borderWidth||0,r.hoverBorderWidth||0));return e}getMaxOffset(t){let e=0;for(let i=0,s=t.length;i<s;++i){const t=this.resolveDataElementOptions(i);e=Math.max(e,t.offset||0,t.hoverOffset||0)}return e}_getRingWeightOffset(t){let e=0;for(let i=0;i<t;++i)this.chart.isDatasetVisible(i)&&(e+=this._getRingWeight(i));return e}_getRingWeight(t){return Math.max(C(this.chart.data.datasets[t].weight,1),0)}_getVisibleDatasetWeightTotal(){return this._getRingWeightOffset(this.chart.data.datasets.length)||1}}Xi.id="doughnut",Xi.defaults={datasetElementType:!1,dataElementType:"arc",animation:{animateRotate:!0,animateScale:!1},animations:{numbers:{type:"number",properties:["circumference","endAngle","innerRadius","outerRadius","startAngle","x","y","offset","borderWidth","spacing"]}},cutout:"50%",rotation:0,circumference:360,radius:"100%",spacing:0,indexAxis:"r"},Xi.descriptors={_scriptable:t=>"spacing"!==t,_indexable:t=>"spacing"!==t},Xi.overrides={aspectRatio:1,plugins:{legend:{labels:{generateLabels(t){const e=t.data;if(e.labels.length&&e.datasets.length){const{labels:{pointStyle:i}}=t.legend.options;return e.labels.map(((e,s)=>{const n=t.getDatasetMeta(0).controller.getStyle(s);return{text:e,fillStyle:n.backgroundColor,strokeStyle:n.borderColor,lineWidth:n.borderWidth,pointStyle:i,hidden:!t.getDataVisibility(s),index:s}}))}return[]}},onClick(t,e,i){i.chart.toggleDataVisibility(e.index),i.chart.update()}},tooltip:{callbacks:{title:()=>"",label(t){let e=t.label;const i=": "+t.formattedValue;return w(e)?(e=e.slice(),e[0]+=i):e+=i,e}}}}};class qi extends Bi{initialize(){this.enableOptionSharing=!0,super.initialize()}update(t){const e=this._cachedMeta,{dataset:i,data:s=[],_dataset:n}=e,o=this.chart._animationsDisabled;let{start:a,count:r}=function(t,e,i){const s=e.length;let n=0,o=s;if(t._sorted){const{iScale:a,_parsed:r}=t,h=a.axis,{min:l,max:c,minDefined:d,maxDefined:u}=a.getUserBounds();d&&(n=dt(Math.min(Ae(r,a.axis,l).lo,i?s:Ae(e,h,a.getPixelForValue(l)).lo),0,s-1)),o=u?dt(Math.max(Ae(r,a.axis,c).hi+1,i?0:Ae(e,h,a.getPixelForValue(c)).hi+1),n,s)-n:s-n}return{start:n,count:o}}(e,s,o);this._drawStart=a,this._drawCount=r,function(t){const{xScale:e,yScale:i,_scaleRanges:s}=t,n={xmin:e.min,xmax:e.max,ymin:i.min,ymax:i.max};if(!s)return t._scaleRanges=n,!0;const o=s.xmin!==e.min||s.xmax!==e.max||s.ymin!==i.min||s.ymax!==i.max;return Object.assign(s,n),o}(e)&&(a=0,r=s.length),i._chart=this.chart,i._datasetIndex=this.index,i._decimated=!!n._decimated,i.points=s;const h=this.resolveDatasetElementOptions(t);this.options.showLine||(h.borderWidth=0),h.segment=this.options.segment,this.updateElement(i,void 0,{animated:!o,options:h},t),this.updateElements(s,a,r,t)}updateElements(t,e,i,s){const n="reset"===s,{iScale:o,vScale:a,_stacked:r,_dataset:h}=this._cachedMeta,l=this.resolveDataElementOptions(e,s),c=this.getSharedOptions(l),d=this.includeOptions(s,c),u=o.axis,p=a.axis,{spanGaps:g,segment:f}=this.options,m=tt(g)?g:Number.POSITIVE_INFINITY,b=this.chart._animationsDisabled||n||"none"===s;let x=e>0&&this.getParsed(e-1);for(let l=e;l<e+i;++l){const e=t[l],i=this.getParsed(l),g=b?e:{},_=v(i[p]),y=g[u]=o.getPixelForValue(i[u],l),w=g[p]=n||_?a.getBasePixel():a.getPixelForValue(r?this.applyStack(a,i,r):i[p],l);g.skip=isNaN(y)||isNaN(w)||_,g.stop=l>0&&i[u]-x[u]>m,f&&(g.parsed=i,g.raw=h.data[l]),d&&(g.options=c||this.resolveDataElementOptions(l,e.active?"active":s)),b||this.updateElement(e,l,g,s),x=i}this.updateSharedOptions(c,s,l)}getMaxOverflow(){const t=this._cachedMeta,e=t.dataset,i=e.options&&e.options.borderWidth||0,s=t.data||[];if(!s.length)return i;const n=s[0].size(this.resolveDataElementOptions(0)),o=s[s.length-1].size(this.resolveDataElementOptions(s.length-1));return Math.max(i,n,o)/2}draw(){const t=this._cachedMeta;t.dataset.updateControlPoints(this.chart.chartArea,t.iScale.axis),super.draw()}}qi.id="line",qi.defaults={datasetElementType:"line",dataElementType:"point",showLine:!0,spanGaps:!1},qi.overrides={scales:{_index_:{type:"category"},_value_:{type:"linear"}}};class Ki extends Bi{constructor(t,e){super(t,e),this.innerRadius=void 0,this.outerRadius=void 0}getLabelAndValue(t){const e=this._cachedMeta,i=this.chart,s=i.data.labels||[],n=li(e._parsed[t].r,i.options.locale);return{label:s[t]||"",value:n}}update(t){const e=this._cachedMeta.data;this._updateRadius(),this.updateElements(e,0,e.length,t)}_updateRadius(){const t=this.chart,e=t.chartArea,i=t.options,s=Math.min(e.right-e.left,e.bottom-e.top),n=Math.max(s/2,0),o=(n-Math.max(i.cutoutPercentage?n/100*i.cutoutPercentage:1,0))/t.getVisibleDatasetCount();this.outerRadius=n-o*this.index,this.innerRadius=this.outerRadius-o}updateElements(t,e,i,s){const n="reset"===s,o=this.chart,a=this.getDataset(),r=o.options.animation,h=this._cachedMeta.rScale,l=h.xCenter,c=h.yCenter,d=h.getIndexAngle(0)-.5*H;let u,p=d;const g=360/this.countVisibleElements();for(u=0;u<e;++u)p+=this._computeAngle(u,s,g);for(u=e;u<e+i;u++){const e=t[u];let i=p,f=p+this._computeAngle(u,s,g),m=o.getDataVisibility(u)?h.getDistanceFromCenterForValue(a.data[u]):0;p=f,n&&(r.animateScale&&(m=0),r.animateRotate&&(i=f=d));const b={x:l,y:c,innerRadius:0,outerRadius:m,startAngle:i,endAngle:f,options:this.resolveDataElementOptions(u,e.active?"active":s)};this.updateElement(e,u,b,s)}}countVisibleElements(){const t=this.getDataset(),e=this._cachedMeta;let i=0;return e.data.forEach(((e,s)=>{!isNaN(t.data[s])&&this.chart.getDataVisibility(s)&&i++})),i}_computeAngle(t,e,i){return this.chart.getDataVisibility(t)?st(this.resolveDataElementOptions(t,e).angle||i):0}}Ki.id="polarArea",Ki.defaults={dataElementType:"arc",animation:{animateRotate:!0,animateScale:!0},animations:{numbers:{type:"number",properties:["x","y","startAngle","endAngle","innerRadius","outerRadius"]}},indexAxis:"r",startAngle:0},Ki.overrides={aspectRatio:1,plugins:{legend:{labels:{generateLabels(t){const e=t.data;if(e.labels.length&&e.datasets.length){const{labels:{pointStyle:i}}=t.legend.options;return e.labels.map(((e,s)=>{const n=t.getDatasetMeta(0).controller.getStyle(s);return{text:e,fillStyle:n.backgroundColor,strokeStyle:n.borderColor,lineWidth:n.borderWidth,pointStyle:i,hidden:!t.getDataVisibility(s),index:s}}))}return[]}},onClick(t,e,i){i.chart.toggleDataVisibility(e.index),i.chart.update()}},tooltip:{callbacks:{title:()=>"",label:t=>t.chart.data.labels[t.dataIndex]+": "+t.formattedValue}}},scales:{r:{type:"radialLinear",angleLines:{display:!1},beginAtZero:!0,grid:{circular:!0},pointLabels:{display:!1},startAngle:0}}};class Zi extends Xi{}Zi.id="pie",Zi.defaults={cutout:0,rotation:0,circumference:360,radius:"100%"};class Gi extends Bi{getLabelAndValue(t){const e=this._cachedMeta.vScale,i=this.getParsed(t);return{label:e.getLabels()[t],value:""+e.getLabelForValue(i[e.axis])}}update(t){const e=this._cachedMeta,i=e.dataset,s=e.data||[],n=e.iScale.getLabels();if(i.points=s,"resize"!==t){const e=this.resolveDatasetElementOptions(t);this.options.showLine||(e.borderWidth=0);const o={_loop:!0,_fullLoop:n.length===s.length,options:e};this.updateElement(i,void 0,o,t)}this.updateElements(s,0,s.length,t)}updateElements(t,e,i,s){const n=this.getDataset(),o=this._cachedMeta.rScale,a="reset"===s;for(let r=e;r<e+i;r++){const e=t[r],i=this.resolveDataElementOptions(r,e.active?"active":s),h=o.getPointPositionForValue(r,n.data[r]),l=a?o.xCenter:h.x,c=a?o.yCenter:h.y,d={x:l,y:c,angle:h.angle,skip:isNaN(l)||isNaN(c),options:i};this.updateElement(e,r,d,s)}}}Gi.id="radar",Gi.defaults={datasetElementType:"line",dataElementType:"point",indexAxis:"r",showLine:!0,elements:{line:{fill:"start"}}},Gi.overrides={aspectRatio:1,scales:{r:{type:"radialLinear"}}};class Ji extends qi{}Ji.id="scatter",Ji.defaults={showLine:!1,fill:!1},Ji.overrides={interaction:{mode:"point"},plugins:{tooltip:{callbacks:{title:()=>"",label:t=>"("+t.label+", "+t.formattedValue+")"}}},scales:{x:{type:"linear"},y:{type:"linear"}}};var Qi=Object.freeze({__proto__:null,BarController:Yi,BubbleController:Ui,DoughnutController:Xi,LineController:qi,PolarAreaController:Ki,PieController:Zi,RadarController:Gi,ScatterController:Ji});function ts(){throw new Error("This method is not implemented: Check that a complete date adapter is provided.")}class es{constructor(t){this.options=t||{}}formats(){return ts()}parse(t,e){return ts()}format(t,e){return ts()}add(t,e,i){return ts()}diff(t,e,i){return ts()}startOf(t,e,i){return ts()}endOf(t,e){return ts()}}es.override=function(t){Object.assign(es.prototype,t)};var is={_date:es};function ss(t,e){return"native"in t?{x:t.x,y:t.y}:ti(t,e)}function ns(t,e,i,s){const{controller:n,data:o,_sorted:a}=t,r=n._cachedMeta.iScale;if(r&&e===r.axis&&"r"!==e&&a&&o.length){const t=r._reversePixels?ke:Ae;if(!s)return t(o,e,i);if(n._sharedOptions){const s=o[0],n="function"==typeof s.getRange&&s.getRange(e);if(n){const s=t(o,e,i-n),a=t(o,e,i+n);return{lo:s.lo,hi:a.hi}}}}return{lo:0,hi:o.length-1}}function os(t,e,i,s,n){const o=t.getSortedVisibleDatasetMetas(),a=i[e];for(let t=0,i=o.length;t<i;++t){const{index:i,data:r}=o[t],{lo:h,hi:l}=ns(o[t],e,a,n);for(let t=h;t<=l;++t){const e=r[t];e.skip||s(e,i,t)}}}function as(t,e,i,s){const n=[];return oe(e,t.chartArea,t._minPadding)?(os(t,i,e,(function(t,i,o){t.inRange(e.x,e.y,s)&&n.push({element:t,datasetIndex:i,index:o})}),!0),n):n}function rs(t,e,i,s,n){return oe(e,t.chartArea,t._minPadding)?"r"!==i||s?function(t,e,i,s,n){let o=[];const a=function(t){const e=-1!==t.indexOf("x"),i=-1!==t.indexOf("y");return function(t,s){const n=e?Math.abs(t.x-s.x):0,o=i?Math.abs(t.y-s.y):0;return Math.sqrt(Math.pow(n,2)+Math.pow(o,2))}}(i);let r=Number.POSITIVE_INFINITY;return os(t,i,e,(function(i,h,l){const c=i.inRange(e.x,e.y,n);if(s&&!c)return;const d=i.getCenterPoint(n);if(!oe(d,t.chartArea,t._minPadding)&&!c)return;const u=a(e,d);u<r?(o=[{element:i,datasetIndex:h,index:l}],r=u):u===r&&o.push({element:i,datasetIndex:h,index:l})})),o}(t,e,i,s,n):function(t,e,i,s){let n=[];return os(t,i,e,(function(t,i,o){const{startAngle:a,endAngle:r}=t.getProps(["startAngle","endAngle"],s),{angle:h}=at(t,{x:e.x,y:e.y});ct(h,a,r)&&n.push({element:t,datasetIndex:i,index:o})})),n}(t,e,i,n):[]}function hs(t,e,i,s){const n=ss(e,t),o=[],a=i.axis,r="x"===a?"inXRange":"inYRange";let h=!1;return function(t,e){const i=t.getSortedVisibleDatasetMetas();let s,n,o;for(let t=0,a=i.length;t<a;++t){({index:s,data:n}=i[t]);for(let t=0,i=n.length;t<i;++t)o=n[t],o.skip||e(o,s,t)}}(t,((t,e,i)=>{t[r](n[a],s)&&o.push({element:t,datasetIndex:e,index:i}),t.inRange(n.x,n.y,s)&&(h=!0)})),i.intersect&&!h?[]:o}var ls={modes:{index(t,e,i,s){const n=ss(e,t),o=i.axis||"x",a=i.intersect?as(t,n,o,s):rs(t,n,o,!1,s),r=[];return a.length?(t.getSortedVisibleDatasetMetas().forEach((t=>{const e=a[0].index,i=t.data[e];i&&!i.skip&&r.push({element:i,datasetIndex:t.index,index:e})})),r):[]},dataset(t,e,i,s){const n=ss(e,t),o=i.axis||"xy";let a=i.intersect?as(t,n,o,s):rs(t,n,o,!1,s);if(a.length>0){const e=a[0].datasetIndex,i=t.getDatasetMeta(e).data;a=[];for(let t=0;t<i.length;++t)a.push({element:i[t],datasetIndex:e,index:t})}return a},point:(t,e,i,s)=>as(t,ss(e,t),i.axis||"xy",s),nearest:(t,e,i,s)=>rs(t,ss(e,t),i.axis||"xy",i.intersect,s),x:(t,e,i,s)=>hs(t,e,{axis:"x",intersect:i.intersect},s),y:(t,e,i,s)=>hs(t,e,{axis:"y",intersect:i.intersect},s)}};const cs=["left","top","right","bottom"];function ds(t,e){return t.filter((t=>t.pos===e))}function us(t,e){return t.filter((t=>-1===cs.indexOf(t.pos)&&t.box.axis===e))}function ps(t,e){return t.sort(((t,i)=>{const s=e?i:t,n=e?t:i;return s.weight===n.weight?s.index-n.index:s.weight-n.weight}))}function gs(t,e,i,s){return Math.max(t[i],e[i])+Math.max(t[s],e[s])}function fs(t,e){t.top=Math.max(t.top,e.top),t.left=Math.max(t.left,e.left),t.bottom=Math.max(t.bottom,e.bottom),t.right=Math.max(t.right,e.right)}function ms(t,e,i,s){const{pos:n,box:o}=i,a=t.maxPadding;if(!M(n)){i.size&&(t[n]-=i.size);const e=s[i.stack]||{size:0,count:1};e.size=Math.max(e.size,i.horizontal?o.height:o.width),i.size=e.size/e.count,t[n]+=i.size}o.getPadding&&fs(a,o.getPadding());const r=Math.max(0,e.outerWidth-gs(a,t,"left","right")),h=Math.max(0,e.outerHeight-gs(a,t,"top","bottom")),l=r!==t.w,c=h!==t.h;return t.w=r,t.h=h,i.horizontal?{same:l,other:c}:{same:c,other:l}}function bs(t,e){const i=e.maxPadding;return function(t){const s={left:0,top:0,right:0,bottom:0};return t.forEach((t=>{s[t]=Math.max(e[t],i[t])})),s}(t?["left","right"]:["top","bottom"])}function xs(t,e,i,s){const n=[];let o,a,r,h,l,c;for(o=0,a=t.length,l=0;o<a;++o){r=t[o],h=r.box,h.update(r.width||e.w,r.height||e.h,bs(r.horizontal,e));const{same:a,other:d}=ms(e,i,r,s);l|=a&&n.length,c=c||d,h.fullSize||n.push(r)}return l&&xs(n,e,i,s)||c}function _s(t,e,i,s,n){t.top=i,t.left=e,t.right=e+s,t.bottom=i+n,t.width=s,t.height=n}function ys(t,e,i,s){const n=i.padding;let{x:o,y:a}=e;for(const r of t){const t=r.box,h=s[r.stack]||{count:1,placed:0,weight:1},l=r.stackWeight/h.weight||1;if(r.horizontal){const s=e.w*l,o=h.size||t.height;W(h.start)&&(a=h.start),t.fullSize?_s(t,n.left,a,i.outerWidth-n.right-n.left,o):_s(t,e.left+h.placed,a,s,o),h.start=a,h.placed+=s,a=t.bottom}else{const s=e.h*l,a=h.size||t.width;W(h.start)&&(o=h.start),t.fullSize?_s(t,o,n.top,a,i.outerHeight-n.bottom-n.top):_s(t,o,e.top+h.placed,a,s),h.start=o,h.placed+=s,o=t.right}}e.x=o,e.y=a}Qt.set("layout",{autoPadding:!0,padding:{top:0,right:0,bottom:0,left:0}});var vs={addBox(t,e){t.boxes||(t.boxes=[]),e.fullSize=e.fullSize||!1,e.position=e.position||"top",e.weight=e.weight||0,e._layers=e._layers||function(){return[{z:0,draw(t){e.draw(t)}}]},t.boxes.push(e)},removeBox(t,e){const i=t.boxes?t.boxes.indexOf(e):-1;-1!==i&&t.boxes.splice(i,1)},configure(t,e,i){e.fullSize=i.fullSize,e.position=i.position,e.weight=i.weight},update(t,e,i,s){if(!t)return;const n=_e(t.options.layout.padding),o=Math.max(e-n.width,0),a=Math.max(i-n.height,0),r=function(t){const e=function(t){const e=[];let i,s,n,o,a,r;for(i=0,s=(t||[]).length;i<s;++i)n=t[i],({position:o,options:{stack:a,stackWeight:r=1}}=n),e.push({index:i,box:n,pos:o,horizontal:n.isHorizontal(),weight:n.weight,stack:a&&o+a,stackWeight:r});return e}(t),i=ps(e.filter((t=>t.box.fullSize)),!0),s=ps(ds(e,"left"),!0),n=ps(ds(e,"right")),o=ps(ds(e,"top"),!0),a=ps(ds(e,"bottom")),r=us(e,"x"),h=us(e,"y");return{fullSize:i,leftAndTop:s.concat(o),rightAndBottom:n.concat(h).concat(a).concat(r),chartArea:ds(e,"chartArea"),vertical:s.concat(n).concat(h),horizontal:o.concat(a).concat(r)}}(t.boxes),h=r.vertical,l=r.horizontal;P(t.boxes,(t=>{"function"==typeof t.beforeLayout&&t.beforeLayout()}));const c=h.reduce(((t,e)=>e.box.options&&!1===e.box.options.display?t:t+1),0)||1,d=Object.freeze({outerWidth:e,outerHeight:i,padding:n,availableWidth:o,availableHeight:a,vBoxMaxWidth:o/2/c,hBoxMaxHeight:a/2}),u=Object.assign({},n);fs(u,_e(s));const p=Object.assign({maxPadding:u,w:o,h:a,x:n.left,y:n.top},n),g=function(t,e){const i=function(t){const e={};for(const i of t){const{stack:t,pos:s,stackWeight:n}=i;if(!t||!cs.includes(s))continue;const o=e[t]||(e[t]={count:0,placed:0,weight:0,size:0});o.count++,o.weight+=n}return e}(t),{vBoxMaxWidth:s,hBoxMaxHeight:n}=e;let o,a,r;for(o=0,a=t.length;o<a;++o){r=t[o];const{fullSize:a}=r.box,h=i[r.stack],l=h&&r.stackWeight/h.weight;r.horizontal?(r.width=l?l*s:a&&e.availableWidth,r.height=n):(r.width=s,r.height=l?l*n:a&&e.availableHeight)}return i}(h.concat(l),d);xs(r.fullSize,p,d,g),xs(h,p,d,g),xs(l,p,d,g)&&xs(h,p,d,g),function(t){const e=t.maxPadding;function i(i){const s=Math.max(e[i]-t[i],0);return t[i]+=s,s}t.y+=i("top"),t.x+=i("left"),i("right"),i("bottom")}(p),ys(r.leftAndTop,p,d,g),p.x+=p.w,p.y+=p.h,ys(r.rightAndBottom,p,d,g),t.chartArea={left:p.left,top:p.top,right:p.left+p.w,bottom:p.top+p.h,height:p.h,width:p.w},P(r.chartArea,(e=>{const i=e.box;Object.assign(i,t.chartArea),i.update(p.w,p.h,{left:0,top:0,right:0,bottom:0})}))}};class ws{acquireContext(t,e){}releaseContext(t){return!1}addEventListener(t,e,i){}removeEventListener(t,e,i){}getDevicePixelRatio(){return 1}getMaximumSize(t,e,i,s){return e=Math.max(0,e||t.width),i=i||t.height,{width:e,height:Math.max(0,s?Math.floor(e/s):i)}}isAttached(t){return!0}updateConfig(t){}}class Ms extends ws{acquireContext(t){return t&&t.getContext&&t.getContext("2d")||null}updateConfig(t){t.options.animation=!1}}const As={touchstart:"mousedown",touchmove:"mousemove",touchend:"mouseup",pointerenter:"mouseenter",pointerdown:"mousedown",pointermove:"mousemove",pointerup:"mouseup",pointerleave:"mouseout",pointerout:"mouseout"},ks=t=>null===t||""===t,Cs=!!si&&{passive:!0};function Ss(t,e,i){t.canvas.removeEventListener(e,i,Cs)}function Ds(t,e){for(const i of t)if(i===e||i.contains(e))return!0}function Ps(t,e,i){const s=t.canvas,n=new MutationObserver((t=>{let e=!1;for(const i of t)e=e||Ds(i.addedNodes,s),e=e&&!Ds(i.removedNodes,s);e&&i()}));return n.observe(document,{childList:!0,subtree:!0}),n}function Es(t,e,i){const s=t.canvas,n=new MutationObserver((t=>{let e=!1;for(const i of t)e=e||Ds(i.removedNodes,s),e=e&&!Ds(i.addedNodes,s);e&&i()}));return n.observe(document,{childList:!0,subtree:!0}),n}const Os=new Map;let Ts=0;function Ls(){const t=window.devicePixelRatio;t!==Ts&&(Ts=t,Os.forEach(((e,i)=>{i.currentDevicePixelRatio!==t&&e()})))}function Rs(t,e,i){const s=t.canvas,n=s&&Ke(s);if(!n)return;const o=m(((t,e)=>{const s=n.clientWidth;i(t,e),s<n.clientWidth&&i()}),window),a=new ResizeObserver((t=>{const e=t[0],i=e.contentRect.width,s=e.contentRect.height;0===i&&0===s||o(i,s)}));return a.observe(n),function(t,e){Os.size||window.addEventListener("resize",Ls),Os.set(t,e)}(t,o),a}function Is(t,e,i){i&&i.disconnect(),"resize"===e&&function(t){Os.delete(t),Os.size||window.removeEventListener("resize",Ls)}(t)}function Bs(t,e,i){const s=t.canvas,n=m((e=>{null!==t.ctx&&i(function(t,e){const i=As[t.type]||t.type,{x:s,y:n}=ti(t,e);return{type:i,chart:e,native:t,x:void 0!==s?s:null,y:void 0!==n?n:null}}(e,t))}),t,(t=>{const e=t[0];return[e,e.offsetX,e.offsetY]}));return function(t,e,i){t.addEventListener(e,i,Cs)}(s,e,n),n}class zs extends ws{acquireContext(t,e){const i=t&&t.getContext&&t.getContext("2d");return i&&i.canvas===t?(function(t,e){const i=t.style,s=t.getAttribute("height"),n=t.getAttribute("width");if(t.$chartjs={initial:{height:s,width:n,style:{display:i.display,height:i.height,width:i.width}}},i.display=i.display||"block",i.boxSizing=i.boxSizing||"border-box",ks(n)){const e=ni(t,"width");void 0!==e&&(t.width=e)}if(ks(s))if(""===t.style.height)t.height=t.width/(e||2);else{const e=ni(t,"height");void 0!==e&&(t.height=e)}}(t,e),i):null}releaseContext(t){const e=t.canvas;if(!e.$chartjs)return!1;const i=e.$chartjs.initial;["height","width"].forEach((t=>{const s=i[t];v(s)?e.removeAttribute(t):e.setAttribute(t,s)}));const s=i.style||{};return Object.keys(s).forEach((t=>{e.style[t]=s[t]})),e.width=e.width,delete e.$chartjs,!0}addEventListener(t,e,i){this.removeEventListener(t,e);const s=t.$proxies||(t.$proxies={}),n={attach:Ps,detach:Es,resize:Rs}[e]||Bs;s[e]=n(t,e,i)}removeEventListener(t,e){const i=t.$proxies||(t.$proxies={}),s=i[e];s&&(({attach:Is,detach:Is,resize:Is}[e]||Ss)(t,e,s),i[e]=void 0)}getDevicePixelRatio(){return window.devicePixelRatio}getMaximumSize(t,e,i,s){return function(t,e,i,s){const n=Ge(t),o=Qe(n,"margin"),a=Ze(n.maxWidth,t,"clientWidth")||U,r=Ze(n.maxHeight,t,"clientHeight")||U,h=function(t,e,i){let s,n;if(void 0===e||void 0===i){const o=Ke(t);if(o){const t=o.getBoundingClientRect(),a=Ge(o),r=Qe(a,"border","width"),h=Qe(a,"padding");e=t.width-h.width-r.width,i=t.height-h.height-r.height,s=Ze(a.maxWidth,o,"clientWidth"),n=Ze(a.maxHeight,o,"clientHeight")}else e=t.clientWidth,i=t.clientHeight}return{width:e,height:i,maxWidth:s||U,maxHeight:n||U}}(t,e,i);let{width:l,height:c}=h;if("content-box"===n.boxSizing){const t=Qe(n,"border","width"),e=Qe(n,"padding");l-=e.width+t.width,c-=e.height+t.height}return l=Math.max(0,l-o.width),c=Math.max(0,s?Math.floor(l/s):c-o.height),l=ei(Math.min(l,a,h.maxWidth)),c=ei(Math.min(c,r,h.maxHeight)),l&&!c&&(c=ei(l/2)),{width:l,height:c}}(t,e,i,s)}isAttached(t){const e=Ke(t);return!(!e||!e.isConnected)}}class Fs{constructor(){this.x=void 0,this.y=void 0,this.active=!1,this.options=void 0,this.$animations=void 0}tooltipPosition(t){const{x:e,y:i}=this.getProps(["x","y"],t);return{x:e,y:i}}hasValue(){return tt(this.x)&&tt(this.y)}getProps(t,e){const i=this.$animations;if(!e||!i)return this;const s={};return t.forEach((t=>{s[t]=i[t]&&i[t].active()?i[t]._to:this[t]})),s}}Fs.defaults={},Fs.defaultRoutes=void 0;const Vs={values:t=>w(t)?t:""+t,numeric(t,e,i){if(0===t)return"0";const s=this.chart.options.locale;let n,o=t;if(i.length>1){const e=Math.max(Math.abs(i[0].value),Math.abs(i[i.length-1].value));(e<1e-4||e>1e15)&&(n="scientific"),o=function(t,e){let i=e.length>3?e[2].value-e[1].value:e[1].value-e[0].value;return Math.abs(i)>=1&&t!==Math.floor(t)&&(i=t-Math.floor(t)),i}(t,i)}const a=G(Math.abs(o)),r=Math.max(Math.min(-1*Math.floor(a),20),0),h={notation:n,minimumFractionDigits:r,maximumFractionDigits:r};return Object.assign(h,this.options.ticks.format),li(t,s,h)},logarithmic(t,e,i){if(0===t)return"0";const s=t/Math.pow(10,Math.floor(G(t)));return 1===s||2===s||5===s?Vs.numeric.call(this,t,e,i):""}};var Ws={formatters:Vs};function js(t,e,i,s,n){const o=C(s,0),a=Math.min(C(n,t.length),t.length);let r,h,l,c=0;for(i=Math.ceil(i),n&&(r=n-s,i=r/Math.floor(r/i)),l=o;l<0;)c++,l=Math.round(o+c*i);for(h=Math.max(o,0);h<a;h++)h===l&&(e.push(t[h]),c++,l=Math.round(o+c*i))}Qt.set("scale",{display:!0,offset:!1,reverse:!1,beginAtZero:!1,bounds:"ticks",grace:0,grid:{display:!0,lineWidth:1,drawBorder:!0,drawOnChartArea:!0,drawTicks:!0,tickLength:8,tickWidth:(t,e)=>e.lineWidth,tickColor:(t,e)=>e.color,offset:!1,borderDash:[],borderDashOffset:0,borderWidth:1},title:{display:!1,text:"",padding:{top:4,bottom:4}},ticks:{minRotation:0,maxRotation:50,mirror:!1,textStrokeWidth:0,textStrokeColor:"",padding:3,display:!0,autoSkip:!0,autoSkipPadding:3,labelOffset:0,callback:Ws.formatters.values,minor:{},major:{},align:"center",crossAlign:"near",showLabelBackdrop:!1,backdropColor:"rgba(255, 255, 255, 0.75)",backdropPadding:2}}),Qt.route("scale.ticks","color","","color"),Qt.route("scale.grid","color","","borderColor"),Qt.route("scale.grid","borderColor","","borderColor"),Qt.route("scale.title","color","","color"),Qt.describe("scale",{_fallback:!1,_scriptable:t=>!t.startsWith("before")&&!t.startsWith("after")&&"callback"!==t&&"parser"!==t,_indexable:t=>"borderDash"!==t&&"tickBorderDash"!==t}),Qt.describe("scales",{_fallback:"scale"}),Qt.describe("scale.ticks",{_scriptable:t=>"backdropPadding"!==t&&"callback"!==t,_indexable:t=>"backdropPadding"!==t});const Ns=(t,e,i)=>"top"===e||"left"===e?t[e]+i:t[e]-i;function Hs(t,e){const i=[],s=t.length/e,n=t.length;let o=0;for(;o<n;o+=s)i.push(t[Math.floor(o)]);return i}function $s(t,e,i){const s=t.ticks.length,n=Math.min(e,s-1),o=t._startPixel,a=t._endPixel,r=1e-6;let h,l=t.getPixelForTick(n);if(!(i&&(h=1===s?Math.max(l-o,a-l):0===e?(t.getPixelForTick(1)-l)/2:(l-t.getPixelForTick(n-1))/2,l+=n<e?h:-h,l<o-r||l>a+r)))return l}function Ys(t){return t.drawTicks?t.tickLength:0}function Us(t,e){if(!t.display)return 0;const i=ye(t.font,e),s=_e(t.padding);return(w(t.text)?t.text.length:1)*i.lineHeight+s.height}function Xs(t,e,i){let s=b(t);return(i&&"right"!==e||!i&&"right"===e)&&(s=(t=>"left"===t?"right":"right"===t?"left":t)(s)),s}class qs extends Fs{constructor(t){super(),this.id=t.id,this.type=t.type,this.options=void 0,this.ctx=t.ctx,this.chart=t.chart,this.top=void 0,this.bottom=void 0,this.left=void 0,this.right=void 0,this.width=void 0,this.height=void 0,this._margins={left:0,right:0,top:0,bottom:0},this.maxWidth=void 0,this.maxHeight=void 0,this.paddingTop=void 0,this.paddingBottom=void 0,this.paddingLeft=void 0,this.paddingRight=void 0,this.axis=void 0,this.labelRotation=void 0,this.min=void 0,this.max=void 0,this._range=void 0,this.ticks=[],this._gridLineItems=null,this._labelItems=null,this._labelSizes=null,this._length=0,this._maxLength=0,this._longestTextCache={},this._startPixel=void 0,this._endPixel=void 0,this._reversePixels=!1,this._userMax=void 0,this._userMin=void 0,this._suggestedMax=void 0,this._suggestedMin=void 0,this._ticksLength=0,this._borderValue=0,this._cache={},this._dataLimitsCached=!1,this.$context=void 0}init(t){this.options=t.setContext(this.getContext()),this.axis=t.axis,this._userMin=this.parse(t.min),this._userMax=this.parse(t.max),this._suggestedMin=this.parse(t.suggestedMin),this._suggestedMax=this.parse(t.suggestedMax)}parse(t,e){return t}getUserBounds(){let{_userMin:t,_userMax:e,_suggestedMin:i,_suggestedMax:s}=this;return t=k(t,Number.POSITIVE_INFINITY),e=k(e,Number.NEGATIVE_INFINITY),i=k(i,Number.POSITIVE_INFINITY),s=k(s,Number.NEGATIVE_INFINITY),{min:k(t,i),max:k(e,s),minDefined:A(t),maxDefined:A(e)}}getMinMax(t){let e,{min:i,max:s,minDefined:n,maxDefined:o}=this.getUserBounds();if(n&&o)return{min:i,max:s};const a=this.getMatchingVisibleMetas();for(let r=0,h=a.length;r<h;++r)e=a[r].controller.getMinMax(this,t),n||(i=Math.min(i,e.min)),o||(s=Math.max(s,e.max));return i=o&&i>s?s:i,s=n&&i>s?i:s,{min:k(i,k(s,i)),max:k(s,k(i,s))}}getPadding(){return{left:this.paddingLeft||0,top:this.paddingTop||0,right:this.paddingRight||0,bottom:this.paddingBottom||0}}getTicks(){return this.ticks}getLabels(){const t=this.chart.data;return this.options.labels||(this.isHorizontal()?t.xLabels:t.yLabels)||t.labels||[]}beforeLayout(){this._cache={},this._dataLimitsCached=!1}beforeUpdate(){D(this.options.beforeUpdate,[this])}update(t,e,i){const{beginAtZero:s,grace:n,ticks:o}=this.options,a=o.sampleSize;this.beforeUpdate(),this.maxWidth=t,this.maxHeight=e,this._margins=i=Object.assign({left:0,right:0,top:0,bottom:0},i),this.ticks=null,this._labelSizes=null,this._gridLineItems=null,this._labelItems=null,this.beforeSetDimensions(),this.setDimensions(),this.afterSetDimensions(),this._maxLength=this.isHorizontal()?this.width+i.left+i.right:this.height+i.top+i.bottom,this._dataLimitsCached||(this.beforeDataLimits(),this.determineDataLimits(),this.afterDataLimits(),this._range=function(t,e,i){const{min:s,max:n}=t,o=S(e,(n-s)/2),a=(t,e)=>i&&0===t?0:t+e;return{min:a(s,-Math.abs(o)),max:a(n,o)}}(this,n,s),this._dataLimitsCached=!0),this.beforeBuildTicks(),this.ticks=this.buildTicks()||[],this.afterBuildTicks();const r=a<this.ticks.length;this._convertTicksToLabels(r?Hs(this.ticks,a):this.ticks),this.configure(),this.beforeCalculateLabelRotation(),this.calculateLabelRotation(),this.afterCalculateLabelRotation(),o.display&&(o.autoSkip||"auto"===o.source)&&(this.ticks=function(t,e){const i=t.options.ticks,s=i.maxTicksLimit||function(t){const e=t.options.offset,i=t._tickSize(),s=t._length/i+(e?0:1),n=t._maxLength/i;return Math.floor(Math.min(s,n))}(t),n=i.major.enabled?function(t){const e=[];let i,s;for(i=0,s=t.length;i<s;i++)t[i].major&&e.push(i);return e}(e):[],o=n.length,a=n[0],r=n[o-1],h=[];if(o>s)return function(t,e,i,s){let n,o=0,a=i[0];for(s=Math.ceil(s),n=0;n<t.length;n++)n===a&&(e.push(t[n]),o++,a=i[o*s])}(e,h,n,o/s),h;const l=function(t,e,i){const s=function(t){const e=t.length;let i,s;if(e<2)return!1;for(s=t[0],i=1;i<e;++i)if(t[i]-t[i-1]!==s)return!1;return s}(t),n=e.length/i;if(!s)return Math.max(n,1);const o=function(t){const e=[],i=Math.sqrt(t);let s;for(s=1;s<i;s++)t%s==0&&(e.push(s),e.push(t/s));return i===(0|i)&&e.push(i),e.sort(((t,e)=>t-e)).pop(),e}(s);for(let t=0,e=o.length-1;t<e;t++){const e=o[t];if(e>n)return e}return Math.max(n,1)}(n,e,s);if(o>0){let t,i;const s=o>1?Math.round((r-a)/(o-1)):null;for(js(e,h,l,v(s)?0:a-s,a),t=0,i=o-1;t<i;t++)js(e,h,l,n[t],n[t+1]);return js(e,h,l,r,v(s)?e.length:r+s),h}return js(e,h,l),h}(this,this.ticks),this._labelSizes=null),r&&this._convertTicksToLabels(this.ticks),this.beforeFit(),this.fit(),this.afterFit(),this.afterUpdate()}configure(){let t,e,i=this.options.reverse;this.isHorizontal()?(t=this.left,e=this.right):(t=this.top,e=this.bottom,i=!i),this._startPixel=t,this._endPixel=e,this._reversePixels=i,this._length=e-t,this._alignToPixels=this.options.alignToPixels}afterUpdate(){D(this.options.afterUpdate,[this])}beforeSetDimensions(){D(this.options.beforeSetDimensions,[this])}setDimensions(){this.isHorizontal()?(this.width=this.maxWidth,this.left=0,this.right=this.width):(this.height=this.maxHeight,this.top=0,this.bottom=this.height),this.paddingLeft=0,this.paddingTop=0,this.paddingRight=0,this.paddingBottom=0}afterSetDimensions(){D(this.options.afterSetDimensions,[this])}_callHooks(t){this.chart.notifyPlugins(t,this.getContext()),D(this.options[t],[this])}beforeDataLimits(){this._callHooks("beforeDataLimits")}determineDataLimits(){}afterDataLimits(){this._callHooks("afterDataLimits")}beforeBuildTicks(){this._callHooks("beforeBuildTicks")}buildTicks(){return[]}afterBuildTicks(){this._callHooks("afterBuildTicks")}beforeTickToLabelConversion(){D(this.options.beforeTickToLabelConversion,[this])}generateTickLabels(t){const e=this.options.ticks;let i,s,n;for(i=0,s=t.length;i<s;i++)n=t[i],n.label=D(e.callback,[n.value,i,t],this)}afterTickToLabelConversion(){D(this.options.afterTickToLabelConversion,[this])}beforeCalculateLabelRotation(){D(this.options.beforeCalculateLabelRotation,[this])}calculateLabelRotation(){const t=this.options,e=t.ticks,i=this.ticks.length,s=e.minRotation||0,n=e.maxRotation;let o,a,r,h=s;if(!this._isVisible()||!e.display||s>=n||i<=1||!this.isHorizontal())return void(this.labelRotation=s);const l=this._getLabelSizes(),c=l.widest.width,d=l.highest.height,u=dt(this.chart.width-c,0,this.maxWidth);o=t.offset?this.maxWidth/i:u/(i-1),c+6>o&&(o=u/(i-(t.offset?.5:1)),a=this.maxHeight-Ys(t.grid)-e.padding-Us(t.title,this.chart.options.font),r=Math.sqrt(c*c+d*d),h=nt(Math.min(Math.asin(dt((l.highest.height+6)/o,-1,1)),Math.asin(dt(a/r,-1,1))-Math.asin(dt(d/r,-1,1)))),h=Math.max(s,Math.min(n,h))),this.labelRotation=h}afterCalculateLabelRotation(){D(this.options.afterCalculateLabelRotation,[this])}beforeFit(){D(this.options.beforeFit,[this])}fit(){const t={width:0,height:0},{chart:e,options:{ticks:i,title:s,grid:n}}=this,o=this._isVisible(),a=this.isHorizontal();if(o){const o=Us(s,e.options.font);if(a?(t.width=this.maxWidth,t.height=Ys(n)+o):(t.height=this.maxHeight,t.width=Ys(n)+o),i.display&&this.ticks.length){const{first:e,last:s,widest:n,highest:o}=this._getLabelSizes(),r=2*i.padding,h=st(this.labelRotation),l=Math.cos(h),c=Math.sin(h);if(a){const e=i.mirror?0:c*n.width+l*o.height;t.height=Math.min(this.maxHeight,t.height+e+r)}else{const e=i.mirror?0:l*n.width+c*o.height;t.width=Math.min(this.maxWidth,t.width+e+r)}this._calculatePadding(e,s,c,l)}}this._handleMargins(),a?(this.width=this._length=e.width-this._margins.left-this._margins.right,this.height=t.height):(this.width=t.width,this.height=this._length=e.height-this._margins.top-this._margins.bottom)}_calculatePadding(t,e,i,s){const{ticks:{align:n,padding:o},position:a}=this.options,r=0!==this.labelRotation,h="top"!==a&&"x"===this.axis;if(this.isHorizontal()){const a=this.getPixelForTick(0)-this.left,l=this.right-this.getPixelForTick(this.ticks.length-1);let c=0,d=0;r?h?(c=s*t.width,d=i*e.height):(c=i*t.height,d=s*e.width):"start"===n?d=e.width:"end"===n?c=t.width:(c=t.width/2,d=e.width/2),this.paddingLeft=Math.max((c-a+o)*this.width/(this.width-a),0),this.paddingRight=Math.max((d-l+o)*this.width/(this.width-l),0)}else{let i=e.height/2,s=t.height/2;"start"===n?(i=0,s=t.height):"end"===n&&(i=e.height,s=0),this.paddingTop=i+o,this.paddingBottom=s+o}}_handleMargins(){this._margins&&(this._margins.left=Math.max(this.paddingLeft,this._margins.left),this._margins.top=Math.max(this.paddingTop,this._margins.top),this._margins.right=Math.max(this.paddingRight,this._margins.right),this._margins.bottom=Math.max(this.paddingBottom,this._margins.bottom))}afterFit(){D(this.options.afterFit,[this])}isHorizontal(){const{axis:t,position:e}=this.options;return"top"===e||"bottom"===e||"x"===t}isFullSize(){return this.options.fullSize}_convertTicksToLabels(t){let e,i;for(this.beforeTickToLabelConversion(),this.generateTickLabels(t),e=0,i=t.length;e<i;e++)v(t[e].label)&&(t.splice(e,1),i--,e--);this.afterTickToLabelConversion()}_getLabelSizes(){let t=this._labelSizes;if(!t){const e=this.options.ticks.sampleSize;let i=this.ticks;e<i.length&&(i=Hs(i,e)),this._labelSizes=t=this._computeLabelSizes(i,i.length)}return t}_computeLabelSizes(t,e){const{ctx:i,_longestTextCache:s}=this,n=[],o=[];let a,r,h,l,c,d,u,p,g,f,m,b=0,x=0;for(a=0;a<e;++a){if(l=t[a].label,c=this._resolveTickFontOptions(a),i.font=d=c.string,u=s[d]=s[d]||{data:{},gc:[]},p=c.lineHeight,g=f=0,v(l)||w(l)){if(w(l))for(r=0,h=l.length;r<h;++r)m=l[r],v(m)||w(m)||(g=te(i,u.data,u.gc,g,m),f+=p)}else g=te(i,u.data,u.gc,g,l),f=p;n.push(g),o.push(f),b=Math.max(g,b),x=Math.max(f,x)}!function(t,e){P(t,(t=>{const i=t.gc,s=i.length/2;let n;if(s>e){for(n=0;n<s;++n)delete t.data[i[n]];i.splice(0,s)}}))}(s,e);const _=n.indexOf(b),y=o.indexOf(x),M=t=>({width:n[t]||0,height:o[t]||0});return{first:M(0),last:M(e-1),widest:M(_),highest:M(y),widths:n,heights:o}}getLabelForValue(t){return t}getPixelForValue(t,e){return NaN}getValueForPixel(t){}getPixelForTick(t){const e=this.ticks;return t<0||t>e.length-1?null:this.getPixelForValue(e[t].value)}getPixelForDecimal(t){this._reversePixels&&(t=1-t);const e=this._startPixel+t*this._length;return dt(this._alignToPixels?ie(this.chart,e,0):e,-32768,32767)}getDecimalForPixel(t){const e=(t-this._startPixel)/this._length;return this._reversePixels?1-e:e}getBasePixel(){return this.getPixelForValue(this.getBaseValue())}getBaseValue(){const{min:t,max:e}=this;return t<0&&e<0?e:t>0&&e>0?t:0}getContext(t){const e=this.ticks||[];if(t>=0&&t<e.length){const i=e[t];return i.$context||(i.$context=function(t,e,i){return we(t,{tick:i,index:e,type:"tick"})}(this.getContext(),t,i))}return this.$context||(this.$context=we(this.chart.getContext(),{scale:this,type:"scale"}))}_tickSize(){const t=this.options.ticks,e=st(this.labelRotation),i=Math.abs(Math.cos(e)),s=Math.abs(Math.sin(e)),n=this._getLabelSizes(),o=t.autoSkipPadding||0,a=n?n.widest.width+o:0,r=n?n.highest.height+o:0;return this.isHorizontal()?r*i>a*s?a/i:r/s:r*s<a*i?r/i:a/s}_isVisible(){const t=this.options.display;return"auto"!==t?!!t:this.getMatchingVisibleMetas().length>0}_computeGridLineItems(t){const e=this.axis,i=this.chart,s=this.options,{grid:n,position:o}=s,a=n.offset,r=this.isHorizontal(),h=this.ticks.length+(a?1:0),l=Ys(n),c=[],d=n.setContext(this.getContext()),u=d.drawBorder?d.borderWidth:0,p=u/2,g=function(t){return ie(i,t,u)};let f,m,b,x,_,y,v,w,A,k,S,D;if("top"===o)f=g(this.bottom),y=this.bottom-l,w=f-p,k=g(t.top)+p,D=t.bottom;else if("bottom"===o)f=g(this.top),k=t.top,D=g(t.bottom)-p,y=f+p,w=this.top+l;else if("left"===o)f=g(this.right),_=this.right-l,v=f-p,A=g(t.left)+p,S=t.right;else if("right"===o)f=g(this.left),A=t.left,S=g(t.right)-p,_=f+p,v=this.left+l;else if("x"===e){if("center"===o)f=g((t.top+t.bottom)/2+.5);else if(M(o)){const t=Object.keys(o)[0],e=o[t];f=g(this.chart.scales[t].getPixelForValue(e))}k=t.top,D=t.bottom,y=f+p,w=y+l}else if("y"===e){if("center"===o)f=g((t.left+t.right)/2);else if(M(o)){const t=Object.keys(o)[0],e=o[t];f=g(this.chart.scales[t].getPixelForValue(e))}_=f-p,v=_-l,A=t.left,S=t.right}const P=C(s.ticks.maxTicksLimit,h),E=Math.max(1,Math.ceil(h/P));for(m=0;m<h;m+=E){const t=n.setContext(this.getContext(m)),e=t.lineWidth,s=t.color,o=n.borderDash||[],h=t.borderDashOffset,l=t.tickWidth,d=t.tickColor,u=t.tickBorderDash||[],p=t.tickBorderDashOffset;b=$s(this,m,a),void 0!==b&&(x=ie(i,b,e),r?_=v=A=S=x:y=w=k=D=x,c.push({tx1:_,ty1:y,tx2:v,ty2:w,x1:A,y1:k,x2:S,y2:D,width:e,color:s,borderDash:o,borderDashOffset:h,tickWidth:l,tickColor:d,tickBorderDash:u,tickBorderDashOffset:p}))}return this._ticksLength=h,this._borderValue=f,c}_computeLabelItems(t){const e=this.axis,i=this.options,{position:s,ticks:n}=i,o=this.isHorizontal(),a=this.ticks,{align:r,crossAlign:h,padding:l,mirror:c}=n,d=Ys(i.grid),u=d+l,p=c?-l:u,g=-st(this.labelRotation),f=[];let m,b,x,_,y,v,A,k,C,S,D,P,E="middle";if("top"===s)v=this.bottom-p,A=this._getXAxisLabelAlignment();else if("bottom"===s)v=this.top+p,A=this._getXAxisLabelAlignment();else if("left"===s){const t=this._getYAxisLabelAlignment(d);A=t.textAlign,y=t.x}else if("right"===s){const t=this._getYAxisLabelAlignment(d);A=t.textAlign,y=t.x}else if("x"===e){if("center"===s)v=(t.top+t.bottom)/2+u;else if(M(s)){const t=Object.keys(s)[0],e=s[t];v=this.chart.scales[t].getPixelForValue(e)+u}A=this._getXAxisLabelAlignment()}else if("y"===e){if("center"===s)y=(t.left+t.right)/2-u;else if(M(s)){const t=Object.keys(s)[0],e=s[t];y=this.chart.scales[t].getPixelForValue(e)}A=this._getYAxisLabelAlignment(d).textAlign}"y"===e&&("start"===r?E="top":"end"===r&&(E="bottom"));const O=this._getLabelSizes();for(m=0,b=a.length;m<b;++m){x=a[m],_=x.label;const t=n.setContext(this.getContext(m));k=this.getPixelForTick(m)+n.labelOffset,C=this._resolveTickFontOptions(m),S=C.lineHeight,D=w(_)?_.length:1;const e=D/2,i=t.color,r=t.textStrokeColor,l=t.textStrokeWidth;let d;if(o?(y=k,P="top"===s?"near"===h||0!==g?-D*S+S/2:"center"===h?-O.highest.height/2-e*S+S:-O.highest.height+S/2:"near"===h||0!==g?S/2:"center"===h?O.highest.height/2-e*S:O.highest.height-D*S,c&&(P*=-1)):(v=k,P=(1-D)*S/2),t.showLabelBackdrop){const e=_e(t.backdropPadding),i=O.heights[m],s=O.widths[m];let n=v+P-e.top,o=y-e.left;switch(E){case"middle":n-=i/2;break;case"bottom":n-=i}switch(A){case"center":o-=s/2;break;case"right":o-=s}d={left:o,top:n,width:s+e.width,height:i+e.height,color:t.backdropColor}}f.push({rotation:g,label:_,font:C,color:i,strokeColor:r,strokeWidth:l,textOffset:P,textAlign:A,textBaseline:E,translation:[y,v],backdrop:d})}return f}_getXAxisLabelAlignment(){const{position:t,ticks:e}=this.options;if(-st(this.labelRotation))return"top"===t?"left":"right";let i="center";return"start"===e.align?i="left":"end"===e.align&&(i="right"),i}_getYAxisLabelAlignment(t){const{position:e,ticks:{crossAlign:i,mirror:s,padding:n}}=this.options,o=t+n,a=this._getLabelSizes().widest.width;let r,h;return"left"===e?s?(h=this.right+n,"near"===i?r="left":"center"===i?(r="center",h+=a/2):(r="right",h+=a)):(h=this.right-o,"near"===i?r="right":"center"===i?(r="center",h-=a/2):(r="left",h=this.left)):"right"===e?s?(h=this.left+n,"near"===i?r="right":"center"===i?(r="center",h-=a/2):(r="left",h-=a)):(h=this.left+o,"near"===i?r="left":"center"===i?(r="center",h+=a/2):(r="right",h=this.right)):r="right",{textAlign:r,x:h}}_computeLabelArea(){if(this.options.ticks.mirror)return;const t=this.chart,e=this.options.position;return"left"===e||"right"===e?{top:0,left:this.left,bottom:t.height,right:this.right}:"top"===e||"bottom"===e?{top:this.top,left:0,bottom:this.bottom,right:t.width}:void 0}drawBackground(){const{ctx:t,options:{backgroundColor:e},left:i,top:s,width:n,height:o}=this;e&&(t.save(),t.fillStyle=e,t.fillRect(i,s,n,o),t.restore())}getLineWidthForValue(t){const e=this.options.grid;if(!this._isVisible()||!e.display)return 0;const i=this.ticks.findIndex((e=>e.value===t));return i>=0?e.setContext(this.getContext(i)).lineWidth:0}drawGrid(t){const e=this.options.grid,i=this.ctx,s=this._gridLineItems||(this._gridLineItems=this._computeGridLineItems(t));let n,o;const a=(t,e,s)=>{s.width&&s.color&&(i.save(),i.lineWidth=s.width,i.strokeStyle=s.color,i.setLineDash(s.borderDash||[]),i.lineDashOffset=s.borderDashOffset,i.beginPath(),i.moveTo(t.x,t.y),i.lineTo(e.x,e.y),i.stroke(),i.restore())};if(e.display)for(n=0,o=s.length;n<o;++n){const t=s[n];e.drawOnChartArea&&a({x:t.x1,y:t.y1},{x:t.x2,y:t.y2},t),e.drawTicks&&a({x:t.tx1,y:t.ty1},{x:t.tx2,y:t.ty2},{color:t.tickColor,width:t.tickWidth,borderDash:t.tickBorderDash,borderDashOffset:t.tickBorderDashOffset})}}drawBorder(){const{chart:t,ctx:e,options:{grid:i}}=this,s=i.setContext(this.getContext()),n=i.drawBorder?s.borderWidth:0;if(!n)return;const o=i.setContext(this.getContext(0)).lineWidth,a=this._borderValue;let r,h,l,c;this.isHorizontal()?(r=ie(t,this.left,n)-n/2,h=ie(t,this.right,o)+o/2,l=c=a):(l=ie(t,this.top,n)-n/2,c=ie(t,this.bottom,o)+o/2,r=h=a),e.save(),e.lineWidth=s.borderWidth,e.strokeStyle=s.borderColor,e.beginPath(),e.moveTo(r,l),e.lineTo(h,c),e.stroke(),e.restore()}drawLabels(t){if(!this.options.ticks.display)return;const e=this.ctx,i=this._computeLabelArea();i&&ae(e,i);const s=this._labelItems||(this._labelItems=this._computeLabelItems(t));let n,o;for(n=0,o=s.length;n<o;++n){const t=s[n],i=t.font,o=t.label;t.backdrop&&(e.fillStyle=t.backdrop.color,e.fillRect(t.backdrop.left,t.backdrop.top,t.backdrop.width,t.backdrop.height)),ce(e,o,0,t.textOffset,i,t)}i&&re(e)}drawTitle(){const{ctx:t,options:{position:e,title:i,reverse:s}}=this;if(!i.display)return;const n=ye(i.font),o=_e(i.padding),a=i.align;let r=n.lineHeight/2;"bottom"===e||"center"===e||M(e)?(r+=o.bottom,w(i.text)&&(r+=n.lineHeight*(i.text.length-1))):r+=o.top;const{titleX:h,titleY:l,maxWidth:c,rotation:d}=function(t,e,i,s){const{top:n,left:o,bottom:a,right:r,chart:h}=t,{chartArea:l,scales:c}=h;let d,u,p,g=0;const f=a-n,m=r-o;if(t.isHorizontal()){if(u=x(s,o,r),M(i)){const t=Object.keys(i)[0],s=i[t];p=c[t].getPixelForValue(s)+f-e}else p="center"===i?(l.bottom+l.top)/2+f-e:Ns(t,i,e);d=r-o}else{if(M(i)){const t=Object.keys(i)[0],s=i[t];u=c[t].getPixelForValue(s)-m+e}else u="center"===i?(l.left+l.right)/2-m+e:Ns(t,i,e);p=x(s,a,n),g="left"===i?-q:q}return{titleX:u,titleY:p,maxWidth:d,rotation:g}}(this,r,e,a);ce(t,i.text,0,0,n,{color:i.color,maxWidth:c,rotation:d,textAlign:Xs(a,e,s),textBaseline:"middle",translation:[h,l]})}draw(t){this._isVisible()&&(this.drawBackground(),this.drawGrid(t),this.drawBorder(),this.drawTitle(),this.drawLabels(t))}_layers(){const t=this.options,e=t.ticks&&t.ticks.z||0,i=C(t.grid&&t.grid.z,-1);return this._isVisible()&&this.draw===qs.prototype.draw?[{z:i,draw:t=>{this.drawBackground(),this.drawGrid(t),this.drawTitle()}},{z:i+1,draw:()=>{this.drawBorder()}},{z:e,draw:t=>{this.drawLabels(t)}}]:[{z:e,draw:t=>{this.draw(t)}}]}getMatchingVisibleMetas(t){const e=this.chart.getSortedVisibleDatasetMetas(),i=this.axis+"AxisID",s=[];let n,o;for(n=0,o=e.length;n<o;++n){const o=e[n];o[i]!==this.id||t&&o.type!==t||s.push(o)}return s}_resolveTickFontOptions(t){return ye(this.options.ticks.setContext(this.getContext(t)).font)}_maxDigits(){const t=this._resolveTickFontOptions(0).lineHeight;return(this.isHorizontal()?this.width:this.height)/t}}class Ks{constructor(t,e,i){this.type=t,this.scope=e,this.override=i,this.items=Object.create(null)}isForType(t){return Object.prototype.isPrototypeOf.call(this.type.prototype,t.prototype)}register(t){const e=Object.getPrototypeOf(t);let i;(function(t){return"id"in t&&"defaults"in t})(e)&&(i=this.register(e));const s=this.items,n=t.id,o=this.scope+"."+n;if(!n)throw new Error("class does not have id: "+t);return n in s||(s[n]=t,function(t,e,i){const s=R(Object.create(null),[i?Qt.get(i):{},Qt.get(e),t.defaults]);Qt.set(e,s),t.defaultRoutes&&function(t,e){Object.keys(e).forEach((i=>{const s=i.split("."),n=s.pop(),o=[t].concat(s).join("."),a=e[i].split("."),r=a.pop(),h=a.join(".");Qt.route(o,n,h,r)}))}(e,t.defaultRoutes),t.descriptors&&Qt.describe(e,t.descriptors)}(t,o,i),this.override&&Qt.override(t.id,t.overrides)),o}get(t){return this.items[t]}unregister(t){const e=this.items,i=t.id,s=this.scope;i in e&&delete e[i],s&&i in Qt[s]&&(delete Qt[s][i],this.override&&delete Kt[i])}}var Zs=new class{constructor(){this.controllers=new Ks(Bi,"datasets",!0),this.elements=new Ks(Fs,"elements"),this.plugins=new Ks(Object,"plugins"),this.scales=new Ks(qs,"scales"),this._typedRegistries=[this.controllers,this.scales,this.elements]}add(...t){this._each("register",t)}remove(...t){this._each("unregister",t)}addControllers(...t){this._each("register",t,this.controllers)}addElements(...t){this._each("register",t,this.elements)}addPlugins(...t){this._each("register",t,this.plugins)}addScales(...t){this._each("register",t,this.scales)}getController(t){return this._get(t,this.controllers,"controller")}getElement(t){return this._get(t,this.elements,"element")}getPlugin(t){return this._get(t,this.plugins,"plugin")}getScale(t){return this._get(t,this.scales,"scale")}removeControllers(...t){this._each("unregister",t,this.controllers)}removeElements(...t){this._each("unregister",t,this.elements)}removePlugins(...t){this._each("unregister",t,this.plugins)}removeScales(...t){this._each("unregister",t,this.scales)}_each(t,e,i){[...e].forEach((e=>{const s=i||this._getRegistryForType(e);i||s.isForType(e)||s===this.plugins&&e.id?this._exec(t,s,e):P(e,(e=>{const s=i||this._getRegistryForType(e);this._exec(t,s,e)}))}))}_exec(t,e,i){const s=V(t);D(i["before"+s],[],i),e[t](i),D(i["after"+s],[],i)}_getRegistryForType(t){for(let e=0;e<this._typedRegistries.length;e++){const i=this._typedRegistries[e];if(i.isForType(t))return i}return this.plugins}_get(t,e,i){const s=e.get(t);if(void 0===s)throw new Error('"'+t+'" is not a registered '+i+".");return s}};class Gs{constructor(){this._init=[]}notify(t,e,i,s){"beforeInit"===e&&(this._init=this._createDescriptors(t,!0),this._notify(this._init,t,"install"));const n=s?this._descriptors(t).filter(s):this._descriptors(t),o=this._notify(n,t,e,i);return"afterDestroy"===e&&(this._notify(n,t,"stop"),this._notify(this._init,t,"uninstall")),o}_notify(t,e,i,s){s=s||{};for(const n of t){const t=n.plugin;if(!1===D(t[i],[e,s,n.options],t)&&s.cancelable)return!1}return!0}invalidate(){v(this._cache)||(this._oldCache=this._cache,this._cache=void 0)}_descriptors(t){if(this._cache)return this._cache;const e=this._cache=this._createDescriptors(t);return this._notifyStateChanges(t),e}_createDescriptors(t,e){const i=t&&t.config,s=C(i.options&&i.options.plugins,{}),n=function(t){const e=[],i=Object.keys(Zs.plugins.items);for(let t=0;t<i.length;t++)e.push(Zs.getPlugin(i[t]));const s=t.plugins||[];for(let t=0;t<s.length;t++){const i=s[t];-1===e.indexOf(i)&&e.push(i)}return e}(i);return!1!==s||e?function(t,e,i,s){const n=[],o=t.getContext();for(let a=0;a<e.length;a++){const r=e[a],h=Js(i[r.id],s);null!==h&&n.push({plugin:r,options:Qs(t.config,r,h,o)})}return n}(t,n,s,e):[]}_notifyStateChanges(t){const e=this._oldCache||[],i=this._cache,s=(t,e)=>t.filter((t=>!e.some((e=>t.plugin.id===e.plugin.id))));this._notify(s(e,i),t,"stop"),this._notify(s(i,e),t,"start")}}function Js(t,e){return e||!1!==t?!0===t?{}:t:null}function Qs(t,e,i,s){const n=t.pluginScopeKeys(e),o=t.getOptionScopes(i,n);return t.createResolver(o,s,[""],{scriptable:!1,indexable:!1,allKeys:!0})}function tn(t,e){const i=Qt.datasets[t]||{};return((e.datasets||{})[t]||{}).indexAxis||e.indexAxis||i.indexAxis||"x"}function en(t,e){return"x"===t||"y"===t?t:e.axis||("top"===(i=e.position)||"bottom"===i?"x":"left"===i||"right"===i?"y":void 0)||t.charAt(0).toLowerCase();var i}function sn(t){const e=t.options||(t.options={});e.plugins=C(e.plugins,{}),e.scales=function(t,e){const i=Kt[t.type]||{scales:{}},s=e.scales||{},n=tn(t.type,e),o=Object.create(null),a=Object.create(null);return Object.keys(s).forEach((t=>{const e=s[t];if(!M(e))return console.error(`Invalid scale configuration for scale: ${t}`);if(e._proxy)return console.warn(`Ignoring resolver passed as options for scale: ${t}`);const r=en(t,e),h=function(t,e){return t===e?"_index_":"_value_"}(r,n),l=i.scales||{};o[r]=o[r]||t,a[t]=I(Object.create(null),[{axis:r},e,l[r],l[h]])})),t.data.datasets.forEach((i=>{const n=i.type||t.type,r=i.indexAxis||tn(n,e),h=(Kt[n]||{}).scales||{};Object.keys(h).forEach((t=>{const e=function(t,e){let i=t;return"_index_"===t?i=e:"_value_"===t&&(i="x"===e?"y":"x"),i}(t,r),n=i[e+"AxisID"]||o[e]||e;a[n]=a[n]||Object.create(null),I(a[n],[{axis:e},s[n],h[t]])}))})),Object.keys(a).forEach((t=>{const e=a[t];I(e,[Qt.scales[e.type],Qt.scale])})),a}(t,e)}function nn(t){return(t=t||{}).datasets=t.datasets||[],t.labels=t.labels||[],t}const on=new Map,an=new Set;function rn(t,e){let i=on.get(t);return i||(i=e(),on.set(t,i),an.add(i)),i}const hn=(t,e,i)=>{const s=F(e,i);void 0!==s&&t.add(s)};class ln{constructor(t){this._config=function(t){return(t=t||{}).data=nn(t.data),sn(t),t}(t),this._scopeCache=new Map,this._resolverCache=new Map}get platform(){return this._config.platform}get type(){return this._config.type}set type(t){this._config.type=t}get data(){return this._config.data}set data(t){this._config.data=nn(t)}get options(){return this._config.options}set options(t){this._config.options=t}get plugins(){return this._config.plugins}update(){const t=this._config;this.clearCache(),sn(t)}clearCache(){this._scopeCache.clear(),this._resolverCache.clear()}datasetScopeKeys(t){return rn(t,(()=>[[`datasets.${t}`,""]]))}datasetAnimationScopeKeys(t,e){return rn(`${t}.transition.${e}`,(()=>[[`datasets.${t}.transitions.${e}`,`transitions.${e}`],[`datasets.${t}`,""]]))}datasetElementScopeKeys(t,e){return rn(`${t}-${e}`,(()=>[[`datasets.${t}.elements.${e}`,`datasets.${t}`,`elements.${e}`,""]]))}pluginScopeKeys(t){const e=t.id;return rn(`${this.type}-plugin-${e}`,(()=>[[`plugins.${e}`,...t.additionalOptionScopes||[]]]))}_cachedScopes(t,e){const i=this._scopeCache;let s=i.get(t);return s&&!e||(s=new Map,i.set(t,s)),s}getOptionScopes(t,e,i){const{options:s,type:n}=this,o=this._cachedScopes(t,i),a=o.get(e);if(a)return a;const r=new Set;e.forEach((e=>{t&&(r.add(t),e.forEach((e=>hn(r,t,e)))),e.forEach((t=>hn(r,s,t))),e.forEach((t=>hn(r,Kt[n]||{},t))),e.forEach((t=>hn(r,Qt,t))),e.forEach((t=>hn(r,Zt,t)))}));const h=Array.from(r);return 0===h.length&&h.push(Object.create(null)),an.has(e)&&o.set(e,h),h}chartOptionScopes(){const{options:t,type:e}=this;return[t,Kt[e]||{},Qt.datasets[e]||{},{type:e},Qt,Zt]}resolveNamedOptions(t,e,i,s=[""]){const n={$shared:!0},{resolver:o,subPrefixes:a}=cn(this._resolverCache,t,s);let r=o;(function(t,e){const{isScriptable:i,isIndexable:s}=Oe(t);for(const n of e){const e=i(n),o=s(n),a=(o||e)&&t[n];if(e&&(j(a)||dn(a))||o&&w(a))return!0}return!1})(o,e)&&(n.$shared=!1,r=Ee(o,i=j(i)?i():i,this.createResolver(t,i,a)));for(const t of e)n[t]=r[t];return n}createResolver(t,e,i=[""],s){const{resolver:n}=cn(this._resolverCache,t,i);return M(e)?Ee(n,e,void 0,s):n}}function cn(t,e,i){let s=t.get(e);s||(s=new Map,t.set(e,s));const n=i.join();let o=s.get(n);return o||(o={resolver:Pe(e,i),subPrefixes:i.filter((t=>!t.toLowerCase().includes("hover")))},s.set(n,o)),o}const dn=t=>M(t)&&Object.getOwnPropertyNames(t).reduce(((e,i)=>e||j(t[i])),!1),un=["top","bottom","left","right","chartArea"];function pn(t,e){return"top"===t||"bottom"===t||-1===un.indexOf(t)&&"x"===e}function gn(t,e){return function(i,s){return i[t]===s[t]?i[e]-s[e]:i[t]-s[t]}}function fn(t){const e=t.chart,i=e.options.animation;e.notifyPlugins("afterRender"),D(i&&i.onComplete,[t],e)}function mn(t){const e=t.chart,i=e.options.animation;D(i&&i.onProgress,[t],e)}function bn(t){return qe()&&"string"==typeof t?t=document.getElementById(t):t&&t.length&&(t=t[0]),t&&t.canvas&&(t=t.canvas),t}const xn={},_n=t=>{const e=bn(t);return Object.values(xn).filter((t=>t.canvas===e)).pop()};function yn(t,e,i){const s=Object.keys(t);for(const n of s){const s=+n;if(s>=e){const o=t[n];delete t[n],(i>0||s>e)&&(t[s+i]=o)}}}class vn{constructor(t,e){const i=this.config=new ln(e),s=bn(t),n=_n(s);if(n)throw new Error("Canvas is already in use. Chart with ID '"+n.id+"' must be destroyed before the canvas can be reused.");const o=i.createResolver(i.chartOptionScopes(),this.getContext());this.platform=new(i.platform||function(t){return!qe()||"undefined"!=typeof OffscreenCanvas&&t instanceof OffscreenCanvas?Ms:zs}(s)),this.platform.updateConfig(i);const a=this.platform.acquireContext(s,o.aspectRatio),r=a&&a.canvas,h=r&&r.height,l=r&&r.width;this.id=y(),this.ctx=a,this.canvas=r,this.width=l,this.height=h,this._options=o,this._aspectRatio=this.aspectRatio,this._layers=[],this._metasets=[],this._stacks=void 0,this.boxes=[],this.currentDevicePixelRatio=void 0,this.chartArea=void 0,this._active=[],this._lastEvent=void 0,this._listeners={},this._responsiveListeners=void 0,this._sortedMetasets=[],this.scales={},this._plugins=new Gs,this.$proxies={},this._hiddenIndices={},this.attached=!1,this._animationsDisabled=void 0,this.$context=void 0,this._doResize=function(t,e){let i;return function(...s){return e?(clearTimeout(i),i=setTimeout(t,e,s)):t.apply(this,s),e}}((t=>this.update(t)),o.resizeDelay||0),this._dataChanges=[],xn[this.id]=this,a&&r?(_i.listen(this,"complete",fn),_i.listen(this,"progress",mn),this._initialize(),this.attached&&this.update()):console.error("Failed to create chart: can't acquire context from the given item")}get aspectRatio(){const{options:{aspectRatio:t,maintainAspectRatio:e},width:i,height:s,_aspectRatio:n}=this;return v(t)?e&&n?n:s?i/s:null:t}get data(){return this.config.data}set data(t){this.config.data=t}get options(){return this._options}set options(t){this.config.options=t}_initialize(){return this.notifyPlugins("beforeInit"),this.options.responsive?this.resize():ii(this,this.options.devicePixelRatio),this.bindEvents(),this.notifyPlugins("afterInit"),this}clear(){return se(this.canvas,this.ctx),this}stop(){return _i.stop(this),this}resize(t,e){_i.running(this)?this._resizeBeforeDraw={width:t,height:e}:this._resize(t,e)}_resize(t,e){const i=this.options,s=this.canvas,n=i.maintainAspectRatio&&this.aspectRatio,o=this.platform.getMaximumSize(s,t,e,n),a=i.devicePixelRatio||this.platform.getDevicePixelRatio(),r=this.width?"resize":"attach";this.width=o.width,this.height=o.height,this._aspectRatio=this.aspectRatio,ii(this,a,!0)&&(this.notifyPlugins("resize",{size:o}),D(i.onResize,[this,o],this),this.attached&&this._doResize(r)&&this.render())}ensureScalesHaveIDs(){P(this.options.scales||{},((t,e)=>{t.id=e}))}buildOrUpdateScales(){const t=this.options,e=t.scales,i=this.scales,s=Object.keys(i).reduce(((t,e)=>(t[e]=!1,t)),{});let n=[];e&&(n=n.concat(Object.keys(e).map((t=>{const i=e[t],s=en(t,i),n="r"===s,o="x"===s;return{options:i,dposition:n?"chartArea":o?"bottom":"left",dtype:n?"radialLinear":o?"category":"linear"}})))),P(n,(e=>{const n=e.options,o=n.id,a=en(o,n),r=C(n.type,e.dtype);void 0!==n.position&&pn(n.position,a)===pn(e.dposition)||(n.position=e.dposition),s[o]=!0;let h=null;o in i&&i[o].type===r?h=i[o]:(h=new(Zs.getScale(r))({id:o,type:r,ctx:this.ctx,chart:this}),i[h.id]=h),h.init(n,t)})),P(s,((t,e)=>{t||delete i[e]})),P(i,(t=>{vs.configure(this,t,t.options),vs.addBox(this,t)}))}_updateMetasets(){const t=this._metasets,e=this.data.datasets.length,i=t.length;if(t.sort(((t,e)=>t.index-e.index)),i>e){for(let t=e;t<i;++t)this._destroyDatasetMeta(t);t.splice(e,i-e)}this._sortedMetasets=t.slice(0).sort(gn("order","index"))}_removeUnreferencedMetasets(){const{_metasets:t,data:{datasets:e}}=this;t.length>e.length&&delete this._stacks,t.forEach(((t,i)=>{0===e.filter((e=>e===t._dataset)).length&&this._destroyDatasetMeta(i)}))}buildOrUpdateControllers(){const t=[],e=this.data.datasets;let i,s;for(this._removeUnreferencedMetasets(),i=0,s=e.length;i<s;i++){const s=e[i];let n=this.getDatasetMeta(i);const o=s.type||this.config.type;if(n.type&&n.type!==o&&(this._destroyDatasetMeta(i),n=this.getDatasetMeta(i)),n.type=o,n.indexAxis=s.indexAxis||tn(o,this.options),n.order=s.order||0,n.index=i,n.label=""+s.label,n.visible=this.isDatasetVisible(i),n.controller)n.controller.updateIndex(i),n.controller.linkScales();else{const e=Zs.getController(o),{datasetElementType:s,dataElementType:a}=Qt.datasets[o];Object.assign(e.prototype,{dataElementType:Zs.getElement(a),datasetElementType:s&&Zs.getElement(s)}),n.controller=new e(this,i),t.push(n.controller)}}return this._updateMetasets(),t}_resetElements(){P(this.data.datasets,((t,e)=>{this.getDatasetMeta(e).controller.reset()}),this)}reset(){this._resetElements(),this.notifyPlugins("reset")}update(t){const e=this.config;e.update();const i=this._options=e.createResolver(e.chartOptionScopes(),this.getContext()),s=this._animationsDisabled=!i.animation;if(this._updateScales(),this._checkEventBindings(),this._updateHiddenIndices(),this._plugins.invalidate(),!1===this.notifyPlugins("beforeUpdate",{mode:t,cancelable:!0}))return;const n=this.buildOrUpdateControllers();this.notifyPlugins("beforeElementsUpdate");let o=0;for(let t=0,e=this.data.datasets.length;t<e;t++){const{controller:e}=this.getDatasetMeta(t),i=!s&&-1===n.indexOf(e);e.buildOrUpdateElements(i),o=Math.max(+e.getMaxOverflow(),o)}o=this._minPadding=i.layout.autoPadding?o:0,this._updateLayout(o),s||P(n,(t=>{t.reset()})),this._updateDatasets(t),this.notifyPlugins("afterUpdate",{mode:t}),this._layers.sort(gn("z","_idx"));const{_active:a,_lastEvent:r}=this;r?this._eventHandler(r,!0):a.length&&this._updateHoverStyles(a,a,!0),this.render()}_updateScales(){P(this.scales,(t=>{vs.removeBox(this,t)})),this.ensureScalesHaveIDs(),this.buildOrUpdateScales()}_checkEventBindings(){const t=this.options,e=new Set(Object.keys(this._listeners)),i=new Set(t.events);N(e,i)&&!!this._responsiveListeners===t.responsive||(this.unbindEvents(),this.bindEvents())}_updateHiddenIndices(){const{_hiddenIndices:t}=this,e=this._getUniformDataChanges()||[];for(const{method:i,start:s,count:n}of e)yn(t,s,"_removeElements"===i?-n:n)}_getUniformDataChanges(){const t=this._dataChanges;if(!t||!t.length)return;this._dataChanges=[];const e=this.data.datasets.length,i=e=>new Set(t.filter((t=>t[0]===e)).map(((t,e)=>e+","+t.splice(1).join(",")))),s=i(0);for(let t=1;t<e;t++)if(!N(s,i(t)))return;return Array.from(s).map((t=>t.split(","))).map((t=>({method:t[1],start:+t[2],count:+t[3]})))}_updateLayout(t){if(!1===this.notifyPlugins("beforeLayout",{cancelable:!0}))return;vs.update(this,this.width,this.height,t);const e=this.chartArea,i=e.width<=0||e.height<=0;this._layers=[],P(this.boxes,(t=>{i&&"chartArea"===t.position||(t.configure&&t.configure(),this._layers.push(...t._layers()))}),this),this._layers.forEach(((t,e)=>{t._idx=e})),this.notifyPlugins("afterLayout")}_updateDatasets(t){if(!1!==this.notifyPlugins("beforeDatasetsUpdate",{mode:t,cancelable:!0})){for(let t=0,e=this.data.datasets.length;t<e;++t)this.getDatasetMeta(t).controller.configure();for(let e=0,i=this.data.datasets.length;e<i;++e)this._updateDataset(e,j(t)?t({datasetIndex:e}):t);this.notifyPlugins("afterDatasetsUpdate",{mode:t})}}_updateDataset(t,e){const i=this.getDatasetMeta(t),s={meta:i,index:t,mode:e,cancelable:!0};!1!==this.notifyPlugins("beforeDatasetUpdate",s)&&(i.controller._update(e),s.cancelable=!1,this.notifyPlugins("afterDatasetUpdate",s))}render(){!1!==this.notifyPlugins("beforeRender",{cancelable:!0})&&(_i.has(this)?this.attached&&!_i.running(this)&&_i.start(this):(this.draw(),fn({chart:this})))}draw(){let t;if(this._resizeBeforeDraw){const{width:t,height:e}=this._resizeBeforeDraw;this._resize(t,e),this._resizeBeforeDraw=null}if(this.clear(),this.width<=0||this.height<=0)return;if(!1===this.notifyPlugins("beforeDraw",{cancelable:!0}))return;const e=this._layers;for(t=0;t<e.length&&e[t].z<=0;++t)e[t].draw(this.chartArea);for(this._drawDatasets();t<e.length;++t)e[t].draw(this.chartArea);this.notifyPlugins("afterDraw")}_getSortedDatasetMetas(t){const e=this._sortedMetasets,i=[];let s,n;for(s=0,n=e.length;s<n;++s){const n=e[s];t&&!n.visible||i.push(n)}return i}getSortedVisibleDatasetMetas(){return this._getSortedDatasetMetas(!0)}_drawDatasets(){if(!1===this.notifyPlugins("beforeDatasetsDraw",{cancelable:!0}))return;const t=this.getSortedVisibleDatasetMetas();for(let e=t.length-1;e>=0;--e)this._drawDataset(t[e]);this.notifyPlugins("afterDatasetsDraw")}_drawDataset(t){const e=this.ctx,i=t._clip,s=!i.disabled,n=this.chartArea,o={meta:t,index:t.index,cancelable:!0};!1!==this.notifyPlugins("beforeDatasetDraw",o)&&(s&&ae(e,{left:!1===i.left?0:n.left-i.left,right:!1===i.right?this.width:n.right+i.right,top:!1===i.top?0:n.top-i.top,bottom:!1===i.bottom?this.height:n.bottom+i.bottom}),t.controller.draw(),s&&re(e),o.cancelable=!1,this.notifyPlugins("afterDatasetDraw",o))}getElementsAtEventForMode(t,e,i,s){const n=ls.modes[e];return"function"==typeof n?n(this,t,i,s):[]}getDatasetMeta(t){const e=this.data.datasets[t],i=this._metasets;let s=i.filter((t=>t&&t._dataset===e)).pop();return s||(s={type:null,data:[],dataset:null,controller:null,hidden:null,xAxisID:null,yAxisID:null,order:e&&e.order||0,index:t,_dataset:e,_parsed:[],_sorted:!1},i.push(s)),s}getContext(){return this.$context||(this.$context=we(null,{chart:this,type:"chart"}))}getVisibleDatasetCount(){return this.getSortedVisibleDatasetMetas().length}isDatasetVisible(t){const e=this.data.datasets[t];if(!e)return!1;const i=this.getDatasetMeta(t);return"boolean"==typeof i.hidden?!i.hidden:!e.hidden}setDatasetVisibility(t,e){this.getDatasetMeta(t).hidden=!e}toggleDataVisibility(t){this._hiddenIndices[t]=!this._hiddenIndices[t]}getDataVisibility(t){return!this._hiddenIndices[t]}_updateVisibility(t,e,i){const s=i?"show":"hide",n=this.getDatasetMeta(t),o=n.controller._resolveAnimations(void 0,s);W(e)?(n.data[e].hidden=!i,this.update()):(this.setDatasetVisibility(t,i),o.update(n,{visible:i}),this.update((e=>e.datasetIndex===t?s:void 0)))}hide(t,e){this._updateVisibility(t,e,!1)}show(t,e){this._updateVisibility(t,e,!0)}_destroyDatasetMeta(t){const e=this._metasets[t];e&&e.controller&&e.controller._destroy(),delete this._metasets[t]}_stop(){let t,e;for(this.stop(),_i.remove(this),t=0,e=this.data.datasets.length;t<e;++t)this._destroyDatasetMeta(t)}destroy(){this.notifyPlugins("beforeDestroy");const{canvas:t,ctx:e}=this;this._stop(),this.config.clearCache(),t&&(this.unbindEvents(),se(t,e),this.platform.releaseContext(e),this.canvas=null,this.ctx=null),this.notifyPlugins("destroy"),delete xn[this.id],this.notifyPlugins("afterDestroy")}toBase64Image(...t){return this.canvas.toDataURL(...t)}bindEvents(){this.bindUserEvents(),this.options.responsive?this.bindResponsiveEvents():this.attached=!0}bindUserEvents(){const t=this._listeners,e=this.platform,i=(i,s)=>{e.addEventListener(this,i,s),t[i]=s},s=(t,e,i)=>{t.offsetX=e,t.offsetY=i,this._eventHandler(t)};P(this.options.events,(t=>i(t,s)))}bindResponsiveEvents(){this._responsiveListeners||(this._responsiveListeners={});const t=this._responsiveListeners,e=this.platform,i=(i,s)=>{e.addEventListener(this,i,s),t[i]=s},s=(i,s)=>{t[i]&&(e.removeEventListener(this,i,s),delete t[i])},n=(t,e)=>{this.canvas&&this.resize(t,e)};let o;const a=()=>{s("attach",a),this.attached=!0,this.resize(),i("resize",n),i("detach",o)};o=()=>{this.attached=!1,s("resize",n),this._stop(),this._resize(0,0),i("attach",a)},e.isAttached(this.canvas)?a():o()}unbindEvents(){P(this._listeners,((t,e)=>{this.platform.removeEventListener(this,e,t)})),this._listeners={},P(this._responsiveListeners,((t,e)=>{this.platform.removeEventListener(this,e,t)})),this._responsiveListeners=void 0}updateHoverStyle(t,e,i){const s=i?"set":"remove";let n,o,a,r;for("dataset"===e&&(n=this.getDatasetMeta(t[0].datasetIndex),n.controller["_"+s+"DatasetHoverStyle"]()),a=0,r=t.length;a<r;++a){o=t[a];const e=o&&this.getDatasetMeta(o.datasetIndex).controller;e&&e[s+"HoverStyle"](o.element,o.datasetIndex,o.index)}}getActiveElements(){return this._active||[]}setActiveElements(t){const e=this._active||[],i=t.map((({datasetIndex:t,index:e})=>{const i=this.getDatasetMeta(t);if(!i)throw new Error("No dataset found at index "+t);return{datasetIndex:t,element:i.data[e],index:e}}));!E(i,e)&&(this._active=i,this._lastEvent=null,this._updateHoverStyles(i,e))}notifyPlugins(t,e,i){return this._plugins.notify(this,t,e,i)}_updateHoverStyles(t,e,i){const s=this.options.hover,n=(t,e)=>t.filter((t=>!e.some((e=>t.datasetIndex===e.datasetIndex&&t.index===e.index)))),o=n(e,t),a=i?t:n(t,e);o.length&&this.updateHoverStyle(o,s.mode,!1),a.length&&s.mode&&this.updateHoverStyle(a,s.mode,!0)}_eventHandler(t,e){const i={event:t,replay:e,cancelable:!0,inChartArea:oe(t,this.chartArea,this._minPadding)},s=e=>(e.options.events||this.options.events).includes(t.native.type);if(!1===this.notifyPlugins("beforeEvent",i,s))return;const n=this._handleEvent(t,e,i.inChartArea);return i.cancelable=!1,this.notifyPlugins("afterEvent",i,s),(n||i.changed)&&this.render(),this}_handleEvent(t,e,i){const{_active:s=[],options:n}=this,o=e,a=this._getActiveElements(t,s,i,o),r=function(t){return"mouseup"===t.type||"click"===t.type||"contextmenu"===t.type}(t),h=function(t,e,i,s){return i&&"mouseout"!==t.type?s?e:t:null}(t,this._lastEvent,i,r);i&&(this._lastEvent=null,D(n.onHover,[t,a,this],this),r&&D(n.onClick,[t,a,this],this));const l=!E(a,s);return(l||e)&&(this._active=a,this._updateHoverStyles(a,s,e)),this._lastEvent=h,l}_getActiveElements(t,e,i,s){if("mouseout"===t.type)return[];if(!i)return e;const n=this.options.hover;return this.getElementsAtEventForMode(t,n.mode,n,s)}}const wn=()=>P(vn.instances,(t=>t._plugins.invalidate())),Mn=!0;function An(t,e,i){const{startAngle:s,pixelMargin:n,x:o,y:a,outerRadius:r,innerRadius:h}=e;let l=n/r;t.beginPath(),t.arc(o,a,r,s-l,i+l),h>n?(l=n/h,t.arc(o,a,h,i+l,s-l,!0)):t.arc(o,a,n,i+q,s-q),t.closePath(),t.clip()}function kn(t,e,i,s){return{x:i+t*Math.cos(e),y:s+t*Math.sin(e)}}function Cn(t,e,i,s,n){const{x:o,y:a,startAngle:r,pixelMargin:h,innerRadius:l}=e,c=Math.max(e.outerRadius+s+i-h,0),d=l>0?l+s+i+h:0;let u=0;const p=n-r;if(s){const t=((l>0?l-s:0)+(c>0?c-s:0))/2;u=(p-(0!==t?p*t/(t+s):p))/2}const g=(p-Math.max(.001,p*c-i/H)/c)/2,f=r+g+u,m=n-g-u,{outerStart:b,outerEnd:x,innerStart:_,innerEnd:y}=function(t,e,i,s){const n=me(t.options.borderRadius,["outerStart","outerEnd","innerStart","innerEnd"]),o=(i-e)/2,a=Math.min(o,s*e/2),r=t=>{const e=(i-Math.min(o,t))*s/2;return dt(t,0,Math.min(o,e))};return{outerStart:r(n.outerStart),outerEnd:r(n.outerEnd),innerStart:dt(n.innerStart,0,a),innerEnd:dt(n.innerEnd,0,a)}}(e,d,c,m-f),v=c-b,w=c-x,M=f+b/v,A=m-x/w,k=d+_,C=d+y,S=f+_/k,D=m-y/C;if(t.beginPath(),t.arc(o,a,c,M,A),x>0){const e=kn(w,A,o,a);t.arc(e.x,e.y,x,A,m+q)}const P=kn(C,m,o,a);if(t.lineTo(P.x,P.y),y>0){const e=kn(C,D,o,a);t.arc(e.x,e.y,y,m+q,D+Math.PI)}if(t.arc(o,a,d,m-y/d,f+_/d,!0),_>0){const e=kn(k,S,o,a);t.arc(e.x,e.y,_,S+Math.PI,f-q)}const E=kn(v,f,o,a);if(t.lineTo(E.x,E.y),b>0){const e=kn(v,M,o,a);t.arc(e.x,e.y,b,f-q,M)}t.closePath()}Object.defineProperties(vn,{defaults:{enumerable:Mn,value:Qt},instances:{enumerable:Mn,value:xn},overrides:{enumerable:Mn,value:Kt},registry:{enumerable:Mn,value:Zs},version:{enumerable:Mn,value:"3.7.1"},getChart:{enumerable:Mn,value:_n},register:{enumerable:Mn,value:(...t)=>{Zs.add(...t),wn()}},unregister:{enumerable:Mn,value:(...t)=>{Zs.remove(...t),wn()}}});class Sn extends Fs{constructor(t){super(),this.options=void 0,this.circumference=void 0,this.startAngle=void 0,this.endAngle=void 0,this.innerRadius=void 0,this.outerRadius=void 0,this.pixelMargin=0,this.fullCircles=0,t&&Object.assign(this,t)}inRange(t,e,i){const s=this.getProps(["x","y"],i),{angle:n,distance:o}=at(s,{x:t,y:e}),{startAngle:a,endAngle:r,innerRadius:h,outerRadius:l,circumference:c}=this.getProps(["startAngle","endAngle","innerRadius","outerRadius","circumference"],i),d=this.options.spacing/2,u=C(c,r-a)>=$||ct(n,a,r),p=ut(o,h+d,l+d);return u&&p}getCenterPoint(t){const{x:e,y:i,startAngle:s,endAngle:n,innerRadius:o,outerRadius:a}=this.getProps(["x","y","startAngle","endAngle","innerRadius","outerRadius","circumference"],t),{offset:r,spacing:h}=this.options,l=(s+n)/2,c=(o+a+h+r)/2;return{x:e+Math.cos(l)*c,y:i+Math.sin(l)*c}}tooltipPosition(t){return this.getCenterPoint(t)}draw(t){const{options:e,circumference:i}=this,s=(e.offset||0)/2,n=(e.spacing||0)/2;if(this.pixelMargin="inner"===e.borderAlign?.33:0,this.fullCircles=i>$?Math.floor(i/$):0,0===i||this.innerRadius<0||this.outerRadius<0)return;t.save();let o=0;if(s){o=s/2;const e=(this.startAngle+this.endAngle)/2;t.translate(Math.cos(e)*o,Math.sin(e)*o),this.circumference>=H&&(o=s)}t.fillStyle=e.backgroundColor,t.strokeStyle=e.borderColor;const a=function(t,e,i,s){const{fullCircles:n,startAngle:o,circumference:a}=e;let r=e.endAngle;if(n){Cn(t,e,i,s,o+$);for(let e=0;e<n;++e)t.fill();isNaN(a)||(r=o+a%$,a%$==0&&(r+=$))}return Cn(t,e,i,s,r),t.fill(),r}(t,this,o,n);(function(t,e,i,s,n){const{options:o}=e,{borderWidth:a,borderJoinStyle:r}=o,h="inner"===o.borderAlign;a&&(h?(t.lineWidth=2*a,t.lineJoin=r||"round"):(t.lineWidth=a,t.lineJoin=r||"bevel"),e.fullCircles&&function(t,e,i){const{x:s,y:n,startAngle:o,pixelMargin:a,fullCircles:r}=e,h=Math.max(e.outerRadius-a,0),l=e.innerRadius+a;let c;for(i&&An(t,e,o+$),t.beginPath(),t.arc(s,n,l,o+$,o,!0),c=0;c<r;++c)t.stroke();for(t.beginPath(),t.arc(s,n,h,o,o+$),c=0;c<r;++c)t.stroke()}(t,e,h),h&&An(t,e,n),Cn(t,e,i,s,n),t.stroke())})(t,this,o,n,a),t.restore()}}function Dn(t,e,i=e){t.lineCap=C(i.borderCapStyle,e.borderCapStyle),t.setLineDash(C(i.borderDash,e.borderDash)),t.lineDashOffset=C(i.borderDashOffset,e.borderDashOffset),t.lineJoin=C(i.borderJoinStyle,e.borderJoinStyle),t.lineWidth=C(i.borderWidth,e.borderWidth),t.strokeStyle=C(i.borderColor,e.borderColor)}function Pn(t,e,i){t.lineTo(i.x,i.y)}function En(t,e,i={}){const s=t.length,{start:n=0,end:o=s-1}=i,{start:a,end:r}=e,h=Math.max(n,a),l=Math.min(o,r),c=n<a&&o<a||n>r&&o>r;return{count:s,start:h,loop:e.loop,ilen:l<h&&!c?s+l-h:l-h}}function On(t,e,i,s){const{points:n,options:o}=e,{count:a,start:r,loop:h,ilen:l}=En(n,i,s),c=function(t){return t.stepped?he:t.tension||"monotone"===t.cubicInterpolationMode?le:Pn}(o);let d,u,p,{move:g=!0,reverse:f}=s||{};for(d=0;d<=l;++d)u=n[(r+(f?l-d:d))%a],u.skip||(g?(t.moveTo(u.x,u.y),g=!1):c(t,p,u,f,o.stepped),p=u);return h&&(u=n[(r+(f?l:0))%a],c(t,p,u,f,o.stepped)),!!h}function Tn(t,e,i,s){const n=e.points,{count:o,start:a,ilen:r}=En(n,i,s),{move:h=!0,reverse:l}=s||{};let c,d,u,p,g,f,m=0,b=0;const x=t=>(a+(l?r-t:t))%o,_=()=>{p!==g&&(t.lineTo(m,g),t.lineTo(m,p),t.lineTo(m,f))};for(h&&(d=n[x(0)],t.moveTo(d.x,d.y)),c=0;c<=r;++c){if(d=n[x(c)],d.skip)continue;const e=d.x,i=d.y,s=0|e;s===u?(i<p?p=i:i>g&&(g=i),m=(b*m+e)/++b):(_(),t.lineTo(e,i),u=s,b=0,p=g=i),f=i}_()}function Ln(t){const e=t.options,i=e.borderDash&&e.borderDash.length;return t._decimated||t._loop||e.tension||"monotone"===e.cubicInterpolationMode||e.stepped||i?On:Tn}Sn.id="arc",Sn.defaults={borderAlign:"center",borderColor:"#fff",borderJoinStyle:void 0,borderRadius:0,borderWidth:2,offset:0,spacing:0,angle:void 0},Sn.defaultRoutes={backgroundColor:"backgroundColor"};const Rn="function"==typeof Path2D;class In extends Fs{constructor(t){super(),this.animated=!0,this.options=void 0,this._chart=void 0,this._loop=void 0,this._fullLoop=void 0,this._path=void 0,this._points=void 0,this._segments=void 0,this._decimated=!1,this._pointsUpdated=!1,this._datasetIndex=void 0,t&&Object.assign(this,t)}updateControlPoints(t,e){const i=this.options;if((i.tension||"monotone"===i.cubicInterpolationMode)&&!i.stepped&&!this._pointsUpdated){const s=i.spanGaps?this._loop:this._fullLoop;Xe(this._points,i,t,s,e),this._pointsUpdated=!0}}set points(t){this._points=t,delete this._segments,delete this._path,this._pointsUpdated=!1}get points(){return this._points}get segments(){return this._segments||(this._segments=function(t,e){const i=t.points,s=t.options.spanGaps,n=i.length;if(!n)return[];const o=!!t._loop,{start:a,end:r}=function(t,e,i,s){let n=0,o=e-1;if(i&&!s)for(;n<e&&!t[n].skip;)n++;for(;n<e&&t[n].skip;)n++;for(n%=e,i&&(o+=n);o>n&&t[o%e].skip;)o--;return o%=e,{start:n,end:o}}(i,n,o,s);return function(t,e,i,s){return s&&s.setContext&&i?function(t,e,i,s){const n=t._chart.getContext(),o=bi(t.options),{_datasetIndex:a,options:{spanGaps:r}}=t,h=i.length,l=[];let c=o,d=e[0].start,u=d;function p(t,e,s,n){const o=r?-1:1;if(t!==e){for(t+=h;i[t%h].skip;)t-=o;for(;i[e%h].skip;)e+=o;t%h!=e%h&&(l.push({start:t%h,end:e%h,loop:s,style:n}),c=n,d=e%h)}}for(const t of e){d=r?d:t.start;let e,o=i[d%h];for(u=d+1;u<=t.end;u++){const r=i[u%h];e=bi(s.setContext(we(n,{type:"segment",p0:o,p1:r,p0DataIndex:(u-1)%h,p1DataIndex:u%h,datasetIndex:a}))),xi(e,c)&&p(d,u-1,t.loop,c),o=r,c=e}d<u-1&&p(d,u-1,t.loop,c)}return l}(t,e,i,s):e}(t,!0===s?[{start:a,end:r,loop:o}]:function(t,e,i,s){const n=t.length,o=[];let a,r=e,h=t[e];for(a=e+1;a<=i;++a){const i=t[a%n];i.skip||i.stop?h.skip||(s=!1,o.push({start:e%n,end:(a-1)%n,loop:s}),e=r=i.stop?a:null):(r=a,h.skip&&(e=a)),h=i}return null!==r&&o.push({start:e%n,end:r%n,loop:s}),o}(i,a,r<a?r+n:r,!!t._fullLoop&&0===a&&r===n-1),i,e)}(this,this.options.segment))}first(){const t=this.segments,e=this.points;return t.length&&e[t[0].start]}last(){const t=this.segments,e=this.points,i=t.length;return i&&e[t[i-1].end]}interpolate(t,e){const i=this.options,s=t[e],n=this.points,o=mi(this,{property:e,start:s,end:s});if(!o.length)return;const a=[],r=function(t){return t.stepped?ai:t.tension||"monotone"===t.cubicInterpolationMode?ri:oi}(i);let h,l;for(h=0,l=o.length;h<l;++h){const{start:l,end:c}=o[h],d=n[l],u=n[c];if(d===u){a.push(d);continue}const p=r(d,u,Math.abs((s-d[e])/(u[e]-d[e])),i.stepped);p[e]=t[e],a.push(p)}return 1===a.length?a[0]:a}pathSegment(t,e,i){return Ln(this)(t,this,e,i)}path(t,e,i){const s=this.segments,n=Ln(this);let o=this._loop;e=e||0,i=i||this.points.length-e;for(const a of s)o&=n(t,this,a,{start:e,end:e+i-1});return!!o}draw(t,e,i,s){const n=this.options||{};(this.points||[]).length&&n.borderWidth&&(t.save(),function(t,e,i,s){Rn&&!e.options.segment?function(t,e,i,s){let n=e._path;n||(n=e._path=new Path2D,e.path(n,i,s)&&n.closePath()),Dn(t,e.options),t.stroke(n)}(t,e,i,s):function(t,e,i,s){const{segments:n,options:o}=e,a=Ln(e);for(const r of n)Dn(t,o,r.style),t.beginPath(),a(t,e,r,{start:i,end:i+s-1})&&t.closePath(),t.stroke()}(t,e,i,s)}(t,this,i,s),t.restore()),this.animated&&(this._pointsUpdated=!1,this._path=void 0)}}function Bn(t,e,i,s){const n=t.options,{[i]:o}=t.getProps([i],s);return Math.abs(e-o)<n.radius+n.hitRadius}In.id="line",In.defaults={borderCapStyle:"butt",borderDash:[],borderDashOffset:0,borderJoinStyle:"miter",borderWidth:3,capBezierPoints:!0,cubicInterpolationMode:"default",fill:!1,spanGaps:!1,stepped:!1,tension:0},In.defaultRoutes={backgroundColor:"backgroundColor",borderColor:"borderColor"},In.descriptors={_scriptable:!0,_indexable:t=>"borderDash"!==t&&"fill"!==t};class zn extends Fs{constructor(t){super(),this.options=void 0,this.parsed=void 0,this.skip=void 0,this.stop=void 0,t&&Object.assign(this,t)}inRange(t,e,i){const s=this.options,{x:n,y:o}=this.getProps(["x","y"],i);return Math.pow(t-n,2)+Math.pow(e-o,2)<Math.pow(s.hitRadius+s.radius,2)}inXRange(t,e){return Bn(this,t,"x",e)}inYRange(t,e){return Bn(this,t,"y",e)}getCenterPoint(t){const{x:e,y:i}=this.getProps(["x","y"],t);return{x:e,y:i}}size(t){let e=(t=t||this.options||{}).radius||0;return e=Math.max(e,e&&t.hoverRadius||0),2*(e+(e&&t.borderWidth||0))}draw(t,e){const i=this.options;this.skip||i.radius<.1||!oe(this,e,this.size(i)/2)||(t.strokeStyle=i.borderColor,t.lineWidth=i.borderWidth,t.fillStyle=i.backgroundColor,ne(t,i,this.x,this.y))}getRange(){const t=this.options||{};return t.radius+t.hitRadius}}function Fn(t,e){const{x:i,y:s,base:n,width:o,height:a}=t.getProps(["x","y","base","width","height"],e);let r,h,l,c,d;return t.horizontal?(d=a/2,r=Math.min(i,n),h=Math.max(i,n),l=s-d,c=s+d):(d=o/2,r=i-d,h=i+d,l=Math.min(s,n),c=Math.max(s,n)),{left:r,top:l,right:h,bottom:c}}function Vn(t,e,i,s){return t?0:dt(e,i,s)}function Wn(t,e,i,s){const n=null===e,o=null===i,a=t&&!(n&&o)&&Fn(t,s);return a&&(n||ut(e,a.left,a.right))&&(o||ut(i,a.top,a.bottom))}function jn(t,e){t.rect(e.x,e.y,e.w,e.h)}function Nn(t,e,i={}){const s=t.x!==i.x?-e:0,n=t.y!==i.y?-e:0,o=(t.x+t.w!==i.x+i.w?e:0)-s,a=(t.y+t.h!==i.y+i.h?e:0)-n;return{x:t.x+s,y:t.y+n,w:t.w+o,h:t.h+a,radius:t.radius}}zn.id="point",zn.defaults={borderWidth:1,hitRadius:1,hoverBorderWidth:1,hoverRadius:4,pointStyle:"circle",radius:3,rotation:0},zn.defaultRoutes={backgroundColor:"backgroundColor",borderColor:"borderColor"};class Hn extends Fs{constructor(t){super(),this.options=void 0,this.horizontal=void 0,this.base=void 0,this.width=void 0,this.height=void 0,this.inflateAmount=void 0,t&&Object.assign(this,t)}draw(t){const{inflateAmount:e,options:{borderColor:i,backgroundColor:s}}=this,{inner:n,outer:o}=function(t){const e=Fn(t),i=e.right-e.left,s=e.bottom-e.top,n=function(t,e,i){const s=t.options.borderWidth,n=t.borderSkipped,o=be(s);return{t:Vn(n.top,o.top,0,i),r:Vn(n.right,o.right,0,e),b:Vn(n.bottom,o.bottom,0,i),l:Vn(n.left,o.left,0,e)}}(t,i/2,s/2),o=function(t,e,i){const{enableBorderRadius:s}=t.getProps(["enableBorderRadius"]),n=t.options.borderRadius,o=xe(n),a=Math.min(e,i),r=t.borderSkipped,h=s||M(n);return{topLeft:Vn(!h||r.top||r.left,o.topLeft,0,a),topRight:Vn(!h||r.top||r.right,o.topRight,0,a),bottomLeft:Vn(!h||r.bottom||r.left,o.bottomLeft,0,a),bottomRight:Vn(!h||r.bottom||r.right,o.bottomRight,0,a)}}(t,i/2,s/2);return{outer:{x:e.left,y:e.top,w:i,h:s,radius:o},inner:{x:e.left+n.l,y:e.top+n.t,w:i-n.l-n.r,h:s-n.t-n.b,radius:{topLeft:Math.max(0,o.topLeft-Math.max(n.t,n.l)),topRight:Math.max(0,o.topRight-Math.max(n.t,n.r)),bottomLeft:Math.max(0,o.bottomLeft-Math.max(n.b,n.l)),bottomRight:Math.max(0,o.bottomRight-Math.max(n.b,n.r))}}}}(this),a=(r=o.radius).topLeft||r.topRight||r.bottomLeft||r.bottomRight?ue:jn;var r;t.save(),o.w===n.w&&o.h===n.h||(t.beginPath(),a(t,Nn(o,e,n)),t.clip(),a(t,Nn(n,-e,o)),t.fillStyle=i,t.fill("evenodd")),t.beginPath(),a(t,Nn(n,e)),t.fillStyle=s,t.fill(),t.restore()}inRange(t,e,i){return Wn(this,t,e,i)}inXRange(t,e){return Wn(this,t,null,e)}inYRange(t,e){return Wn(this,null,t,e)}getCenterPoint(t){const{x:e,y:i,base:s,horizontal:n}=this.getProps(["x","y","base","horizontal"],t);return{x:n?(e+s)/2:e,y:n?i:(i+s)/2}}getRange(t){return"x"===t?this.width/2:this.height/2}}Hn.id="bar",Hn.defaults={borderSkipped:"start",borderWidth:0,borderRadius:0,inflateAmount:"auto",pointStyle:void 0},Hn.defaultRoutes={backgroundColor:"backgroundColor",borderColor:"borderColor"};var $n=Object.freeze({__proto__:null,ArcElement:Sn,LineElement:In,PointElement:zn,BarElement:Hn});function Yn(t){if(t._decimated){const e=t._data;delete t._decimated,delete t._data,Object.defineProperty(t,"data",{value:e})}}function Un(t){t.data.datasets.forEach((t=>{Yn(t)}))}var Xn={id:"decimation",defaults:{algorithm:"min-max",enabled:!1},beforeElementsUpdate:(t,e,i)=>{if(!i.enabled)return void Un(t);const s=t.width;t.data.datasets.forEach(((e,n)=>{const{_data:o,indexAxis:a}=e,r=t.getDatasetMeta(n),h=o||e.data;if("y"===ve([a,t.options.indexAxis]))return;if("line"!==r.type)return;const l=t.scales[r.xAxisID];if("linear"!==l.type&&"time"!==l.type)return;if(t.options.parsing)return;let c,{start:d,count:u}=function(t,e){const i=e.length;let s,n=0;const{iScale:o}=t,{min:a,max:r,minDefined:h,maxDefined:l}=o.getUserBounds();return h&&(n=dt(Ae(e,o.axis,a).lo,0,i-1)),s=l?dt(Ae(e,o.axis,r).hi+1,n,i)-n:i-n,{start:n,count:s}}(r,h);if(u<=(i.threshold||4*s))Yn(e);else{switch(v(o)&&(e._data=h,delete e.data,Object.defineProperty(e,"data",{configurable:!0,enumerable:!0,get:function(){return this._decimated},set:function(t){this._data=t}})),i.algorithm){case"lttb":c=function(t,e,i,s,n){const o=n.samples||s;if(o>=i)return t.slice(e,e+i);const a=[],r=(i-2)/(o-2);let h=0;const l=e+i-1;let c,d,u,p,g,f=e;for(a[h++]=t[f],c=0;c<o-2;c++){let s,n=0,o=0;const l=Math.floor((c+1)*r)+1+e,m=Math.min(Math.floor((c+2)*r)+1,i)+e,b=m-l;for(s=l;s<m;s++)n+=t[s].x,o+=t[s].y;n/=b,o/=b;const x=Math.floor(c*r)+1+e,_=Math.min(Math.floor((c+1)*r)+1,i)+e,{x:y,y:v}=t[f];for(u=p=-1,s=x;s<_;s++)p=.5*Math.abs((y-n)*(t[s].y-v)-(y-t[s].x)*(o-v)),p>u&&(u=p,d=t[s],g=s);a[h++]=d,f=g}return a[h++]=t[l],a}(h,d,u,s,i);break;case"min-max":c=function(t,e,i,s){let n,o,a,r,h,l,c,d,u,p,g=0,f=0;const m=[],b=e+i-1,x=t[e].x,_=t[b].x-x;for(n=e;n<e+i;++n){o=t[n],a=(o.x-x)/_*s,r=o.y;const e=0|a;if(e===h)r<u?(u=r,l=n):r>p&&(p=r,c=n),g=(f*g+o.x)/++f;else{const i=n-1;if(!v(l)&&!v(c)){const e=Math.min(l,c),s=Math.max(l,c);e!==d&&e!==i&&m.push({...t[e],x:g}),s!==d&&s!==i&&m.push({...t[s],x:g})}n>0&&i!==d&&m.push(t[i]),m.push(o),h=e,f=0,u=p=r,l=c=d=n}}return m}(h,d,u,s);break;default:throw new Error(`Unsupported decimation algorithm '${i.algorithm}'`)}e._decimated=c}}))},destroy(t){Un(t)}};function qn(t,e,i){const s=function(t){const e=t.options,i=e.fill;let s=C(i&&i.target,i);return void 0===s&&(s=!!e.backgroundColor),!1!==s&&null!==s&&(!0===s?"origin":s)}(t);if(M(s))return!isNaN(s.value)&&s;let n=parseFloat(s);return A(n)&&Math.floor(n)===n?("-"!==s[0]&&"+"!==s[0]||(n=e+n),!(n===e||n<0||n>=i)&&n):["origin","start","end","stack","shape"].indexOf(s)>=0&&s}class Kn{constructor(t){this.x=t.x,this.y=t.y,this.radius=t.radius}pathSegment(t,e,i){const{x:s,y:n,radius:o}=this;return e=e||{start:0,end:$},t.arc(s,n,o,e.end,e.start,!0),!i.bounds}interpolate(t){const{x:e,y:i,radius:s}=this,n=t.angle;return{x:e+Math.cos(n)*s,y:i+Math.sin(n)*s,angle:n}}}function Zn(t,e,i){for(;e>t;e--){const t=i[e];if(!isNaN(t.x)&&!isNaN(t.y))break}return e}function Gn(t,e,i){const s=[];for(let n=0;n<i.length;n++){const o=i[n],{first:a,last:r,point:h}=Jn(o,e,"x");if(!(!h||a&&r))if(a)s.unshift(h);else if(t.push(h),!r)break}t.push(...s)}function Jn(t,e,i){const s=t.interpolate(e,i);if(!s)return{};const n=s[i],o=t.segments,a=t.points;let r=!1,h=!1;for(let t=0;t<o.length;t++){const e=o[t],s=a[e.start][i],l=a[e.end][i];if(ut(n,s,l)){r=n===s,h=n===l;break}}return{first:r,last:h,point:s}}function Qn(t){const{chart:e,fill:i,line:s}=t;if(A(i))return function(t,e){const i=t.getDatasetMeta(e);return i&&t.isDatasetVisible(e)?i.dataset:null}(e,i);if("stack"===i)return function(t){const{scale:e,index:i,line:s}=t,n=[],o=s.segments,a=s.points,r=function(t,e){const i=[],s=t.getMatchingVisibleMetas("line");for(let t=0;t<s.length;t++){const n=s[t];if(n.index===e)break;n.hidden||i.unshift(n.dataset)}return i}(e,i);r.push(to({x:null,y:e.bottom},s));for(let t=0;t<o.length;t++){const e=o[t];for(let t=e.start;t<=e.end;t++)Gn(n,a[t],r)}return new In({points:n,options:{}})}(t);if("shape"===i)return!0;const n=function(t){return(t.scale||{}).getPointPositionForValue?function(t){const{scale:e,fill:i}=t,s=e.options,n=e.getLabels().length,o=[],a=s.reverse?e.max:e.min,r=s.reverse?e.min:e.max;let h,l,c;if(c="start"===i?a:"end"===i?r:M(i)?i.value:e.getBaseValue(),s.grid.circular)return l=e.getPointPositionForValue(0,a),new Kn({x:l.x,y:l.y,radius:e.getDistanceFromCenterForValue(c)});for(h=0;h<n;++h)o.push(e.getPointPositionForValue(h,c));return o}(t):function(t){const{scale:e={},fill:i}=t;let s,n=null;return"start"===i?n=e.bottom:"end"===i?n=e.top:M(i)?n=e.getPixelForValue(i.value):e.getBasePixel&&(n=e.getBasePixel()),A(n)?(s=e.isHorizontal(),{x:s?n:null,y:s?null:n}):null}(t)}(t);return n instanceof Kn?n:to(n,s)}function to(t,e){let i=[],s=!1;return w(t)?(s=!0,i=t):i=function(t,e){const{x:i=null,y:s=null}=t||{},n=e.points,o=[];return e.segments.forEach((({start:t,end:e})=>{e=Zn(t,e,n);const a=n[t],r=n[e];null!==s?(o.push({x:a.x,y:s}),o.push({x:r.x,y:s})):null!==i&&(o.push({x:i,y:a.y}),o.push({x:i,y:r.y}))})),o}(t,e),i.length?new In({points:i,options:{tension:0},_loop:s,_fullLoop:s}):null}function eo(t,e,i){let s=t[e].fill;const n=[e];let o;if(!i)return s;for(;!1!==s&&-1===n.indexOf(s);){if(!A(s))return s;if(o=t[s],!o)return!1;if(o.visible)return s;n.push(s),s=o.fill}return!1}function io(t,e,i){const{segments:s,points:n}=e;let o=!0,a=!1;t.beginPath();for(const r of s){const{start:s,end:h}=r,l=n[s],c=n[Zn(s,h,n)];o?(t.moveTo(l.x,l.y),o=!1):(t.lineTo(l.x,i),t.lineTo(l.x,l.y)),a=!!e.pathSegment(t,r,{move:a}),a?t.closePath():t.lineTo(c.x,i)}t.lineTo(e.first().x,i),t.closePath(),t.clip()}function so(t,e,i,s){if(s)return;let n=e[t],o=i[t];return"angle"===t&&(n=lt(n),o=lt(o)),{property:t,start:n,end:o}}function no(t,e,i,s){return t&&e?s(t[i],e[i]):t?t[i]:e?e[i]:0}function oo(t,e,i){const{top:s,bottom:n}=e.chart.chartArea,{property:o,start:a,end:r}=i||{};"x"===o&&(t.beginPath(),t.rect(a,s,r-a,n-s),t.clip())}function ao(t,e,i,s){const n=e.interpolate(i,s);n&&t.lineTo(n.x,n.y)}function ro(t,e){const{line:i,target:s,property:n,color:o,scale:a}=e,r=function(t,e,i){const s=t.segments,n=t.points,o=e.points,a=[];for(const t of s){let{start:s,end:r}=t;r=Zn(s,r,n);const h=so(i,n[s],n[r],t.loop);if(!e.segments){a.push({source:t,target:h,start:n[s],end:n[r]});continue}const l=mi(e,h);for(const e of l){const s=so(i,o[e.start],o[e.end],e.loop),r=fi(t,n,s);for(const t of r)a.push({source:t,target:e,start:{[i]:no(h,s,"start",Math.max)},end:{[i]:no(h,s,"end",Math.min)}})}}return a}(i,s,n);for(const{source:e,target:h,start:l,end:c}of r){const{style:{backgroundColor:r=o}={}}=e,d=!0!==s;t.save(),t.fillStyle=r,oo(t,a,d&&so(n,l,c)),t.beginPath();const u=!!i.pathSegment(t,e);let p;if(d){u?t.closePath():ao(t,s,c,n);const e=!!s.pathSegment(t,h,{move:u,reverse:!0});p=u&&e,p||ao(t,s,l,n)}t.closePath(),t.fill(p?"evenodd":"nonzero"),t.restore()}}function ho(t,e,i){const s=Qn(e),{line:n,scale:o,axis:a}=e,r=n.options,h=r.fill,l=r.backgroundColor,{above:c=l,below:d=l}=h||{};s&&n.points.length&&(ae(t,i),function(t,e){const{line:i,target:s,above:n,below:o,area:a,scale:r}=e,h=i._loop?"angle":e.axis;t.save(),"x"===h&&o!==n&&(io(t,s,a.top),ro(t,{line:i,target:s,color:n,scale:r,property:h}),t.restore(),t.save(),io(t,s,a.bottom)),ro(t,{line:i,target:s,color:o,scale:r,property:h}),t.restore()}(t,{line:n,target:s,above:c,below:d,area:i,scale:o,axis:a}),re(t))}var lo={id:"filler",afterDatasetsUpdate(t,e,i){const s=(t.data.datasets||[]).length,n=[];let o,a,r,h;for(a=0;a<s;++a)o=t.getDatasetMeta(a),r=o.dataset,h=null,r&&r.options&&r instanceof In&&(h={visible:t.isDatasetVisible(a),index:a,fill:qn(r,a,s),chart:t,axis:o.controller.options.indexAxis,scale:o.vScale,line:r}),o.$filler=h,n.push(h);for(a=0;a<s;++a)h=n[a],h&&!1!==h.fill&&(h.fill=eo(n,a,i.propagate))},beforeDraw(t,e,i){const s="beforeDraw"===i.drawTime,n=t.getSortedVisibleDatasetMetas(),o=t.chartArea;for(let e=n.length-1;e>=0;--e){const i=n[e].$filler;i&&(i.line.updateControlPoints(o,i.axis),s&&ho(t.ctx,i,o))}},beforeDatasetsDraw(t,e,i){if("beforeDatasetsDraw"!==i.drawTime)return;const s=t.getSortedVisibleDatasetMetas();for(let e=s.length-1;e>=0;--e){const i=s[e].$filler;i&&ho(t.ctx,i,t.chartArea)}},beforeDatasetDraw(t,e,i){const s=e.meta.$filler;s&&!1!==s.fill&&"beforeDatasetDraw"===i.drawTime&&ho(t.ctx,s,t.chartArea)},defaults:{propagate:!0,drawTime:"beforeDatasetDraw"}};const co=(t,e)=>{let{boxHeight:i=e,boxWidth:s=e}=t;return t.usePointStyle&&(i=Math.min(i,e),s=Math.min(s,e)),{boxWidth:s,boxHeight:i,itemHeight:Math.max(e,i)}};class uo extends Fs{constructor(t){super(),this._added=!1,this.legendHitBoxes=[],this._hoveredItem=null,this.doughnutMode=!1,this.chart=t.chart,this.options=t.options,this.ctx=t.ctx,this.legendItems=void 0,this.columnSizes=void 0,this.lineWidths=void 0,this.maxHeight=void 0,this.maxWidth=void 0,this.top=void 0,this.bottom=void 0,this.left=void 0,this.right=void 0,this.height=void 0,this.width=void 0,this._margins=void 0,this.position=void 0,this.weight=void 0,this.fullSize=void 0}update(t,e,i){this.maxWidth=t,this.maxHeight=e,this._margins=i,this.setDimensions(),this.buildLabels(),this.fit()}setDimensions(){this.isHorizontal()?(this.width=this.maxWidth,this.left=this._margins.left,this.right=this.width):(this.height=this.maxHeight,this.top=this._margins.top,this.bottom=this.height)}buildLabels(){const t=this.options.labels||{};let e=D(t.generateLabels,[this.chart],this)||[];t.filter&&(e=e.filter((e=>t.filter(e,this.chart.data)))),t.sort&&(e=e.sort(((e,i)=>t.sort(e,i,this.chart.data)))),this.options.reverse&&e.reverse(),this.legendItems=e}fit(){const{options:t,ctx:e}=this;if(!t.display)return void(this.width=this.height=0);const i=t.labels,s=ye(i.font),n=s.size,o=this._computeTitleHeight(),{boxWidth:a,itemHeight:r}=co(i,n);let h,l;e.font=s.string,this.isHorizontal()?(h=this.maxWidth,l=this._fitRows(o,n,a,r)+10):(l=this.maxHeight,h=this._fitCols(o,n,a,r)+10),this.width=Math.min(h,t.maxWidth||this.maxWidth),this.height=Math.min(l,t.maxHeight||this.maxHeight)}_fitRows(t,e,i,s){const{ctx:n,maxWidth:o,options:{labels:{padding:a}}}=this,r=this.legendHitBoxes=[],h=this.lineWidths=[0],l=s+a;let c=t;n.textAlign="left",n.textBaseline="middle";let d=-1,u=-l;return this.legendItems.forEach(((t,p)=>{const g=i+e/2+n.measureText(t.text).width;(0===p||h[h.length-1]+g+2*a>o)&&(c+=l,h[h.length-(p>0?0:1)]=0,u+=l,d++),r[p]={left:0,top:u,row:d,width:g,height:s},h[h.length-1]+=g+a})),c}_fitCols(t,e,i,s){const{ctx:n,maxHeight:o,options:{labels:{padding:a}}}=this,r=this.legendHitBoxes=[],h=this.columnSizes=[],l=o-t;let c=a,d=0,u=0,p=0,g=0;return this.legendItems.forEach(((t,o)=>{const f=i+e/2+n.measureText(t.text).width;o>0&&u+s+2*a>l&&(c+=d+a,h.push({width:d,height:u}),p+=d+a,g++,d=u=0),r[o]={left:p,top:u,col:g,width:f,height:s},d=Math.max(d,f),u+=s+a})),c+=d,h.push({width:d,height:u}),c}adjustHitBoxes(){if(!this.options.display)return;const t=this._computeTitleHeight(),{legendHitBoxes:e,options:{align:i,labels:{padding:s},rtl:n}}=this,o=ci(n,this.left,this.width);if(this.isHorizontal()){let n=0,a=x(i,this.left+s,this.right-this.lineWidths[n]);for(const r of e)n!==r.row&&(n=r.row,a=x(i,this.left+s,this.right-this.lineWidths[n])),r.top+=this.top+t+s,r.left=o.leftForLtr(o.x(a),r.width),a+=r.width+s}else{let n=0,a=x(i,this.top+t+s,this.bottom-this.columnSizes[n].height);for(const r of e)r.col!==n&&(n=r.col,a=x(i,this.top+t+s,this.bottom-this.columnSizes[n].height)),r.top=a,r.left+=this.left+s,r.left=o.leftForLtr(o.x(r.left),r.width),a+=r.height+s}}isHorizontal(){return"top"===this.options.position||"bottom"===this.options.position}draw(){if(this.options.display){const t=this.ctx;ae(t,this),this._draw(),re(t)}}_draw(){const{options:t,columnSizes:e,lineWidths:i,ctx:s}=this,{align:n,labels:o}=t,a=Qt.color,r=ci(t.rtl,this.left,this.width),h=ye(o.font),{color:l,padding:c}=o,d=h.size,u=d/2;let p;this.drawTitle(),s.textAlign=r.textAlign("left"),s.textBaseline="middle",s.lineWidth=.5,s.font=h.string;const{boxWidth:g,boxHeight:f,itemHeight:m}=co(o,d),b=this.isHorizontal(),_=this._computeTitleHeight();p=b?{x:x(n,this.left+c,this.right-i[0]),y:this.top+c+_,line:0}:{x:this.left+c,y:x(n,this.top+_+c,this.bottom-e[0].height),line:0},di(this.ctx,t.textDirection);const y=m+c;this.legendItems.forEach(((v,w)=>{s.strokeStyle=v.fontColor||l,s.fillStyle=v.fontColor||l;const M=s.measureText(v.text).width,A=r.textAlign(v.textAlign||(v.textAlign=o.textAlign)),k=g+u+M;let S=p.x,D=p.y;r.setWidth(this.width),b?w>0&&S+k+c>this.right&&(D=p.y+=y,p.line++,S=p.x=x(n,this.left+c,this.right-i[p.line])):w>0&&D+y>this.bottom&&(S=p.x=S+e[p.line].width+c,p.line++,D=p.y=x(n,this.top+_+c,this.bottom-e[p.line].height)),function(t,e,i){if(isNaN(g)||g<=0||isNaN(f)||f<0)return;s.save();const n=C(i.lineWidth,1);if(s.fillStyle=C(i.fillStyle,a),s.lineCap=C(i.lineCap,"butt"),s.lineDashOffset=C(i.lineDashOffset,0),s.lineJoin=C(i.lineJoin,"miter"),s.lineWidth=n,s.strokeStyle=C(i.strokeStyle,a),s.setLineDash(C(i.lineDash,[])),o.usePointStyle){const o={radius:g*Math.SQRT2/2,pointStyle:i.pointStyle,rotation:i.rotation,borderWidth:n},a=r.xPlus(t,g/2);ne(s,o,a,e+u)}else{const o=e+Math.max((d-f)/2,0),a=r.leftForLtr(t,g),h=xe(i.borderRadius);s.beginPath(),Object.values(h).some((t=>0!==t))?ue(s,{x:a,y:o,w:g,h:f,radius:h}):s.rect(a,o,g,f),s.fill(),0!==n&&s.stroke()}s.restore()}(r.x(S),D,v),S=((t,e,i,s)=>t===(s?"left":"right")?i:"center"===t?(e+i)/2:e)(A,S+g+u,b?S+k:this.right,t.rtl),function(t,e,i){ce(s,i.text,t,e+m/2,h,{strikethrough:i.hidden,textAlign:r.textAlign(i.textAlign)})}(r.x(S),D,v),b?p.x+=k+c:p.y+=y})),ui(this.ctx,t.textDirection)}drawTitle(){const t=this.options,e=t.title,i=ye(e.font),s=_e(e.padding);if(!e.display)return;const n=ci(t.rtl,this.left,this.width),o=this.ctx,a=e.position,r=i.size/2,h=s.top+r;let l,c=this.left,d=this.width;if(this.isHorizontal())d=Math.max(...this.lineWidths),l=this.top+h,c=x(t.align,c,this.right-d);else{const e=this.columnSizes.reduce(((t,e)=>Math.max(t,e.height)),0);l=h+x(t.align,this.top,this.bottom-e-t.labels.padding-this._computeTitleHeight())}const u=x(a,c,c+d);o.textAlign=n.textAlign(b(a)),o.textBaseline="middle",o.strokeStyle=e.color,o.fillStyle=e.color,o.font=i.string,ce(o,e.text,u,l,i)}_computeTitleHeight(){const t=this.options.title,e=ye(t.font),i=_e(t.padding);return t.display?e.lineHeight+i.height:0}_getLegendItemAt(t,e){let i,s,n;if(ut(t,this.left,this.right)&&ut(e,this.top,this.bottom))for(n=this.legendHitBoxes,i=0;i<n.length;++i)if(s=n[i],ut(t,s.left,s.left+s.width)&&ut(e,s.top,s.top+s.height))return this.legendItems[i];return null}handleEvent(t){const e=this.options;if(!function(t,e){return!("mousemove"!==t||!e.onHover&&!e.onLeave)||!(!e.onClick||"click"!==t&&"mouseup"!==t)}(t.type,e))return;const i=this._getLegendItemAt(t.x,t.y);if("mousemove"===t.type){const o=this._hoveredItem,a=(n=i,null!==(s=o)&&null!==n&&s.datasetIndex===n.datasetIndex&&s.index===n.index);o&&!a&&D(e.onLeave,[t,o,this],this),this._hoveredItem=i,i&&!a&&D(e.onHover,[t,i,this],this)}else i&&D(e.onClick,[t,i,this],this);var s,n}}var po={id:"legend",_element:uo,start(t,e,i){const s=t.legend=new uo({ctx:t.ctx,options:i,chart:t});vs.configure(t,s,i),vs.addBox(t,s)},stop(t){vs.removeBox(t,t.legend),delete t.legend},beforeUpdate(t,e,i){const s=t.legend;vs.configure(t,s,i),s.options=i},afterUpdate(t){const e=t.legend;e.buildLabels(),e.adjustHitBoxes()},afterEvent(t,e){e.replay||t.legend.handleEvent(e.event)},defaults:{display:!0,position:"top",align:"center",fullSize:!0,reverse:!1,weight:1e3,onClick(t,e,i){const s=e.datasetIndex,n=i.chart;n.isDatasetVisible(s)?(n.hide(s),e.hidden=!0):(n.show(s),e.hidden=!1)},onHover:null,onLeave:null,labels:{color:t=>t.chart.options.color,boxWidth:40,padding:10,generateLabels(t){const e=t.data.datasets,{labels:{usePointStyle:i,pointStyle:s,textAlign:n,color:o}}=t.legend.options;return t._getSortedDatasetMetas().map((t=>{const a=t.controller.getStyle(i?0:void 0),r=_e(a.borderWidth);return{text:e[t.index].label,fillStyle:a.backgroundColor,fontColor:o,hidden:!t.visible,lineCap:a.borderCapStyle,lineDash:a.borderDash,lineDashOffset:a.borderDashOffset,lineJoin:a.borderJoinStyle,lineWidth:(r.width+r.height)/4,strokeStyle:a.borderColor,pointStyle:s||a.pointStyle,rotation:a.rotation,textAlign:n||a.textAlign,borderRadius:0,datasetIndex:t.index}}),this)}},title:{color:t=>t.chart.options.color,display:!1,position:"center",text:""}},descriptors:{_scriptable:t=>!t.startsWith("on"),labels:{_scriptable:t=>!["generateLabels","filter","sort"].includes(t)}}};class go extends Fs{constructor(t){super(),this.chart=t.chart,this.options=t.options,this.ctx=t.ctx,this._padding=void 0,this.top=void 0,this.bottom=void 0,this.left=void 0,this.right=void 0,this.width=void 0,this.height=void 0,this.position=void 0,this.weight=void 0,this.fullSize=void 0}update(t,e){const i=this.options;if(this.left=0,this.top=0,!i.display)return void(this.width=this.height=this.right=this.bottom=0);this.width=this.right=t,this.height=this.bottom=e;const s=w(i.text)?i.text.length:1;this._padding=_e(i.padding);const n=s*ye(i.font).lineHeight+this._padding.height;this.isHorizontal()?this.height=n:this.width=n}isHorizontal(){const t=this.options.position;return"top"===t||"bottom"===t}_drawArgs(t){const{top:e,left:i,bottom:s,right:n,options:o}=this,a=o.align;let r,h,l,c=0;return this.isHorizontal()?(h=x(a,i,n),l=e+t,r=n-i):("left"===o.position?(h=i+t,l=x(a,s,e),c=-.5*H):(h=n-t,l=x(a,e,s),c=.5*H),r=s-e),{titleX:h,titleY:l,maxWidth:r,rotation:c}}draw(){const t=this.ctx,e=this.options;if(!e.display)return;const i=ye(e.font),s=i.lineHeight/2+this._padding.top,{titleX:n,titleY:o,maxWidth:a,rotation:r}=this._drawArgs(s);ce(t,e.text,0,0,i,{color:e.color,maxWidth:a,rotation:r,textAlign:b(e.align),textBaseline:"middle",translation:[n,o]})}}var fo={id:"title",_element:go,start(t,e,i){!function(t,e){const i=new go({ctx:t.ctx,options:e,chart:t});vs.configure(t,i,e),vs.addBox(t,i),t.titleBlock=i}(t,i)},stop(t){const e=t.titleBlock;vs.removeBox(t,e),delete t.titleBlock},beforeUpdate(t,e,i){const s=t.titleBlock;vs.configure(t,s,i),s.options=i},defaults:{align:"center",display:!1,font:{weight:"bold"},fullSize:!0,padding:10,position:"top",text:"",weight:2e3},defaultRoutes:{color:"color"},descriptors:{_scriptable:!0,_indexable:!1}};const mo=new WeakMap;var bo={id:"subtitle",start(t,e,i){const s=new go({ctx:t.ctx,options:i,chart:t});vs.configure(t,s,i),vs.addBox(t,s),mo.set(t,s)},stop(t){vs.removeBox(t,mo.get(t)),mo.delete(t)},beforeUpdate(t,e,i){const s=mo.get(t);vs.configure(t,s,i),s.options=i},defaults:{align:"center",display:!1,font:{weight:"normal"},fullSize:!0,padding:0,position:"top",text:"",weight:1500},defaultRoutes:{color:"color"},descriptors:{_scriptable:!0,_indexable:!1}};const xo={average(t){if(!t.length)return!1;let e,i,s=0,n=0,o=0;for(e=0,i=t.length;e<i;++e){const i=t[e].element;if(i&&i.hasValue()){const t=i.tooltipPosition();s+=t.x,n+=t.y,++o}}return{x:s/o,y:n/o}},nearest(t,e){if(!t.length)return!1;let i,s,n,o=e.x,a=e.y,r=Number.POSITIVE_INFINITY;for(i=0,s=t.length;i<s;++i){const s=t[i].element;if(s&&s.hasValue()){const t=rt(e,s.getCenterPoint());t<r&&(r=t,n=s)}}if(n){const t=n.tooltipPosition();o=t.x,a=t.y}return{x:o,y:a}}};function _o(t,e){return e&&(w(e)?Array.prototype.push.apply(t,e):t.push(e)),t}function yo(t){return("string"==typeof t||t instanceof String)&&t.indexOf("\n")>-1?t.split("\n"):t}function vo(t,e){const{element:i,datasetIndex:s,index:n}=e,o=t.getDatasetMeta(s).controller,{label:a,value:r}=o.getLabelAndValue(n);return{chart:t,label:a,parsed:o.getParsed(n),raw:t.data.datasets[s].data[n],formattedValue:r,dataset:o.getDataset(),dataIndex:n,datasetIndex:s,element:i}}function wo(t,e){const i=t.chart.ctx,{body:s,footer:n,title:o}=t,{boxWidth:a,boxHeight:r}=e,h=ye(e.bodyFont),l=ye(e.titleFont),c=ye(e.footerFont),d=o.length,u=n.length,p=s.length,g=_e(e.padding);let f=g.height,m=0,b=s.reduce(((t,e)=>t+e.before.length+e.lines.length+e.after.length),0);b+=t.beforeBody.length+t.afterBody.length,d&&(f+=d*l.lineHeight+(d-1)*e.titleSpacing+e.titleMarginBottom),b&&(f+=p*(e.displayColors?Math.max(r,h.lineHeight):h.lineHeight)+(b-p)*h.lineHeight+(b-1)*e.bodySpacing),u&&(f+=e.footerMarginTop+u*c.lineHeight+(u-1)*e.footerSpacing);let x=0;const _=function(t){m=Math.max(m,i.measureText(t).width+x)};return i.save(),i.font=l.string,P(t.title,_),i.font=h.string,P(t.beforeBody.concat(t.afterBody),_),x=e.displayColors?a+2+e.boxPadding:0,P(s,(t=>{P(t.before,_),P(t.lines,_),P(t.after,_)})),x=0,i.font=c.string,P(t.footer,_),i.restore(),m+=g.width,{width:m,height:f}}function Mo(t,e,i,s){const{x:n,width:o}=i,{width:a,chartArea:{left:r,right:h}}=t;let l="center";return"center"===s?l=n<=(r+h)/2?"left":"right":n<=o/2?l="left":n>=a-o/2&&(l="right"),function(t,e,i,s){const{x:n,width:o}=s,a=i.caretSize+i.caretPadding;return"left"===t&&n+o+a>e.width||"right"===t&&n-o-a<0||void 0}(l,t,e,i)&&(l="center"),l}function Ao(t,e,i){const s=i.yAlign||e.yAlign||function(t,e){const{y:i,height:s}=e;return i<s/2?"top":i>t.height-s/2?"bottom":"center"}(t,i);return{xAlign:i.xAlign||e.xAlign||Mo(t,e,i,s),yAlign:s}}function ko(t,e,i,s){const{caretSize:n,caretPadding:o,cornerRadius:a}=t,{xAlign:r,yAlign:h}=i,l=n+o,{topLeft:c,topRight:d,bottomLeft:u,bottomRight:p}=xe(a);let g=function(t,e){let{x:i,width:s}=t;return"right"===e?i-=s:"center"===e&&(i-=s/2),i}(e,r);const f=function(t,e,i){let{y:s,height:n}=t;return"top"===e?s+=i:s-="bottom"===e?n+i:n/2,s}(e,h,l);return"center"===h?"left"===r?g+=l:"right"===r&&(g-=l):"left"===r?g-=Math.max(c,u)+n:"right"===r&&(g+=Math.max(d,p)+n),{x:dt(g,0,s.width-e.width),y:dt(f,0,s.height-e.height)}}function Co(t,e,i){const s=_e(i.padding);return"center"===e?t.x+t.width/2:"right"===e?t.x+t.width-s.right:t.x+s.left}function So(t){return _o([],yo(t))}function Do(t,e){const i=e&&e.dataset&&e.dataset.tooltip&&e.dataset.tooltip.callbacks;return i?t.override(i):t}class Po extends Fs{constructor(t){super(),this.opacity=0,this._active=[],this._eventPosition=void 0,this._size=void 0,this._cachedAnimations=void 0,this._tooltipItems=[],this.$animations=void 0,this.$context=void 0,this.chart=t.chart||t._chart,this._chart=this.chart,this.options=t.options,this.dataPoints=void 0,this.title=void 0,this.beforeBody=void 0,this.body=void 0,this.afterBody=void 0,this.footer=void 0,this.xAlign=void 0,this.yAlign=void 0,this.x=void 0,this.y=void 0,this.height=void 0,this.width=void 0,this.caretX=void 0,this.caretY=void 0,this.labelColors=void 0,this.labelPointStyles=void 0,this.labelTextColors=void 0}initialize(t){this.options=t,this._cachedAnimations=void 0,this.$context=void 0}_resolveAnimations(){const t=this._cachedAnimations;if(t)return t;const e=this.chart,i=this.options.setContext(this.getContext()),s=i.enabled&&e.options.animation&&i.animations,n=new Ai(this.chart,s);return s._cacheable&&(this._cachedAnimations=Object.freeze(n)),n}getContext(){return this.$context||(this.$context=(this,we(this.chart.getContext(),{tooltip:this,tooltipItems:this._tooltipItems,type:"tooltip"})))}getTitle(t,e){const{callbacks:i}=e,s=i.beforeTitle.apply(this,[t]),n=i.title.apply(this,[t]),o=i.afterTitle.apply(this,[t]);let a=[];return a=_o(a,yo(s)),a=_o(a,yo(n)),a=_o(a,yo(o)),a}getBeforeBody(t,e){return So(e.callbacks.beforeBody.apply(this,[t]))}getBody(t,e){const{callbacks:i}=e,s=[];return P(t,(t=>{const e={before:[],lines:[],after:[]},n=Do(i,t);_o(e.before,yo(n.beforeLabel.call(this,t))),_o(e.lines,n.label.call(this,t)),_o(e.after,yo(n.afterLabel.call(this,t))),s.push(e)})),s}getAfterBody(t,e){return So(e.callbacks.afterBody.apply(this,[t]))}getFooter(t,e){const{callbacks:i}=e,s=i.beforeFooter.apply(this,[t]),n=i.footer.apply(this,[t]),o=i.afterFooter.apply(this,[t]);let a=[];return a=_o(a,yo(s)),a=_o(a,yo(n)),a=_o(a,yo(o)),a}_createItems(t){const e=this._active,i=this.chart.data,s=[],n=[],o=[];let a,r,h=[];for(a=0,r=e.length;a<r;++a)h.push(vo(this.chart,e[a]));return t.filter&&(h=h.filter(((e,s,n)=>t.filter(e,s,n,i)))),t.itemSort&&(h=h.sort(((e,s)=>t.itemSort(e,s,i)))),P(h,(e=>{const i=Do(t.callbacks,e);s.push(i.labelColor.call(this,e)),n.push(i.labelPointStyle.call(this,e)),o.push(i.labelTextColor.call(this,e))})),this.labelColors=s,this.labelPointStyles=n,this.labelTextColors=o,this.dataPoints=h,h}update(t,e){const i=this.options.setContext(this.getContext()),s=this._active;let n,o=[];if(s.length){const t=xo[i.position].call(this,s,this._eventPosition);o=this._createItems(i),this.title=this.getTitle(o,i),this.beforeBody=this.getBeforeBody(o,i),this.body=this.getBody(o,i),this.afterBody=this.getAfterBody(o,i),this.footer=this.getFooter(o,i);const e=this._size=wo(this,i),a=Object.assign({},t,e),r=Ao(this.chart,i,a),h=ko(i,a,r,this.chart);this.xAlign=r.xAlign,this.yAlign=r.yAlign,n={opacity:1,x:h.x,y:h.y,width:e.width,height:e.height,caretX:t.x,caretY:t.y}}else 0!==this.opacity&&(n={opacity:0});this._tooltipItems=o,this.$context=void 0,n&&this._resolveAnimations().update(this,n),t&&i.external&&i.external.call(this,{chart:this.chart,tooltip:this,replay:e})}drawCaret(t,e,i,s){const n=this.getCaretPosition(t,i,s);e.lineTo(n.x1,n.y1),e.lineTo(n.x2,n.y2),e.lineTo(n.x3,n.y3)}getCaretPosition(t,e,i){const{xAlign:s,yAlign:n}=this,{caretSize:o,cornerRadius:a}=i,{topLeft:r,topRight:h,bottomLeft:l,bottomRight:c}=xe(a),{x:d,y:u}=t,{width:p,height:g}=e;let f,m,b,x,_,y;return"center"===n?(_=u+g/2,"left"===s?(f=d,m=f-o,x=_+o,y=_-o):(f=d+p,m=f+o,x=_-o,y=_+o),b=f):(m="left"===s?d+Math.max(r,l)+o:"right"===s?d+p-Math.max(h,c)-o:this.caretX,"top"===n?(x=u,_=x-o,f=m-o,b=m+o):(x=u+g,_=x+o,f=m+o,b=m-o),y=x),{x1:f,x2:m,x3:b,y1:x,y2:_,y3:y}}drawTitle(t,e,i){const s=this.title,n=s.length;let o,a,r;if(n){const h=ci(i.rtl,this.x,this.width);for(t.x=Co(this,i.titleAlign,i),e.textAlign=h.textAlign(i.titleAlign),e.textBaseline="middle",o=ye(i.titleFont),a=i.titleSpacing,e.fillStyle=i.titleColor,e.font=o.string,r=0;r<n;++r)e.fillText(s[r],h.x(t.x),t.y+o.lineHeight/2),t.y+=o.lineHeight+a,r+1===n&&(t.y+=i.titleMarginBottom-a)}}_drawColorBox(t,e,i,s,n){const o=this.labelColors[i],a=this.labelPointStyles[i],{boxHeight:r,boxWidth:h,boxPadding:l}=n,c=ye(n.bodyFont),d=Co(this,"left",n),u=s.x(d),p=r<c.lineHeight?(c.lineHeight-r)/2:0,g=e.y+p;if(n.usePointStyle){const e={radius:Math.min(h,r)/2,pointStyle:a.pointStyle,rotation:a.rotation,borderWidth:1},i=s.leftForLtr(u,h)+h/2,l=g+r/2;t.strokeStyle=n.multiKeyBackground,t.fillStyle=n.multiKeyBackground,ne(t,e,i,l),t.strokeStyle=o.borderColor,t.fillStyle=o.backgroundColor,ne(t,e,i,l)}else{t.lineWidth=o.borderWidth||1,t.strokeStyle=o.borderColor,t.setLineDash(o.borderDash||[]),t.lineDashOffset=o.borderDashOffset||0;const e=s.leftForLtr(u,h-l),i=s.leftForLtr(s.xPlus(u,1),h-l-2),a=xe(o.borderRadius);Object.values(a).some((t=>0!==t))?(t.beginPath(),t.fillStyle=n.multiKeyBackground,ue(t,{x:e,y:g,w:h,h:r,radius:a}),t.fill(),t.stroke(),t.fillStyle=o.backgroundColor,t.beginPath(),ue(t,{x:i,y:g+1,w:h-2,h:r-2,radius:a}),t.fill()):(t.fillStyle=n.multiKeyBackground,t.fillRect(e,g,h,r),t.strokeRect(e,g,h,r),t.fillStyle=o.backgroundColor,t.fillRect(i,g+1,h-2,r-2))}t.fillStyle=this.labelTextColors[i]}drawBody(t,e,i){const{body:s}=this,{bodySpacing:n,bodyAlign:o,displayColors:a,boxHeight:r,boxWidth:h,boxPadding:l}=i,c=ye(i.bodyFont);let d=c.lineHeight,u=0;const p=ci(i.rtl,this.x,this.width),g=function(i){e.fillText(i,p.x(t.x+u),t.y+d/2),t.y+=d+n},f=p.textAlign(o);let m,b,x,_,y,v,w;for(e.textAlign=o,e.textBaseline="middle",e.font=c.string,t.x=Co(this,f,i),e.fillStyle=i.bodyColor,P(this.beforeBody,g),u=a&&"right"!==f?"center"===o?h/2+l:h+2+l:0,_=0,v=s.length;_<v;++_){for(m=s[_],b=this.labelTextColors[_],e.fillStyle=b,P(m.before,g),x=m.lines,a&&x.length&&(this._drawColorBox(e,t,_,p,i),d=Math.max(c.lineHeight,r)),y=0,w=x.length;y<w;++y)g(x[y]),d=c.lineHeight;P(m.after,g)}u=0,d=c.lineHeight,P(this.afterBody,g),t.y-=n}drawFooter(t,e,i){const s=this.footer,n=s.length;let o,a;if(n){const r=ci(i.rtl,this.x,this.width);for(t.x=Co(this,i.footerAlign,i),t.y+=i.footerMarginTop,e.textAlign=r.textAlign(i.footerAlign),e.textBaseline="middle",o=ye(i.footerFont),e.fillStyle=i.footerColor,e.font=o.string,a=0;a<n;++a)e.fillText(s[a],r.x(t.x),t.y+o.lineHeight/2),t.y+=o.lineHeight+i.footerSpacing}}drawBackground(t,e,i,s){const{xAlign:n,yAlign:o}=this,{x:a,y:r}=t,{width:h,height:l}=i,{topLeft:c,topRight:d,bottomLeft:u,bottomRight:p}=xe(s.cornerRadius);e.fillStyle=s.backgroundColor,e.strokeStyle=s.borderColor,e.lineWidth=s.borderWidth,e.beginPath(),e.moveTo(a+c,r),"top"===o&&this.drawCaret(t,e,i,s),e.lineTo(a+h-d,r),e.quadraticCurveTo(a+h,r,a+h,r+d),"center"===o&&"right"===n&&this.drawCaret(t,e,i,s),e.lineTo(a+h,r+l-p),e.quadraticCurveTo(a+h,r+l,a+h-p,r+l),"bottom"===o&&this.drawCaret(t,e,i,s),e.lineTo(a+u,r+l),e.quadraticCurveTo(a,r+l,a,r+l-u),"center"===o&&"left"===n&&this.drawCaret(t,e,i,s),e.lineTo(a,r+c),e.quadraticCurveTo(a,r,a+c,r),e.closePath(),e.fill(),s.borderWidth>0&&e.stroke()}_updateAnimationTarget(t){const e=this.chart,i=this.$animations,s=i&&i.x,n=i&&i.y;if(s||n){const i=xo[t.position].call(this,this._active,this._eventPosition);if(!i)return;const o=this._size=wo(this,t),a=Object.assign({},i,this._size),r=Ao(e,t,a),h=ko(t,a,r,e);s._to===h.x&&n._to===h.y||(this.xAlign=r.xAlign,this.yAlign=r.yAlign,this.width=o.width,this.height=o.height,this.caretX=i.x,this.caretY=i.y,this._resolveAnimations().update(this,h))}}draw(t){const e=this.options.setContext(this.getContext());let i=this.opacity;if(!i)return;this._updateAnimationTarget(e);const s={width:this.width,height:this.height},n={x:this.x,y:this.y};i=Math.abs(i)<.001?0:i;const o=_e(e.padding),a=this.title.length||this.beforeBody.length||this.body.length||this.afterBody.length||this.footer.length;e.enabled&&a&&(t.save(),t.globalAlpha=i,this.drawBackground(n,t,s,e),di(t,e.textDirection),n.y+=o.top,this.drawTitle(n,t,e),this.drawBody(n,t,e),this.drawFooter(n,t,e),ui(t,e.textDirection),t.restore())}getActiveElements(){return this._active||[]}setActiveElements(t,e){const i=this._active,s=t.map((({datasetIndex:t,index:e})=>{const i=this.chart.getDatasetMeta(t);if(!i)throw new Error("Cannot find a dataset at index "+t);return{datasetIndex:t,element:i.data[e],index:e}})),n=!E(i,s),o=this._positionChanged(s,e);(n||o)&&(this._active=s,this._eventPosition=e,this._ignoreReplayEvents=!0,this.update(!0))}handleEvent(t,e,i=!0){if(e&&this._ignoreReplayEvents)return!1;this._ignoreReplayEvents=!1;const s=this.options,n=this._active||[],o=this._getActiveElements(t,n,e,i),a=this._positionChanged(o,t),r=e||!E(o,n)||a;return r&&(this._active=o,(s.enabled||s.external)&&(this._eventPosition={x:t.x,y:t.y},this.update(!0,e))),r}_getActiveElements(t,e,i,s){const n=this.options;if("mouseout"===t.type)return[];if(!s)return e;const o=this.chart.getElementsAtEventForMode(t,n.mode,n,i);return n.reverse&&o.reverse(),o}_positionChanged(t,e){const{caretX:i,caretY:s,options:n}=this,o=xo[n.position].call(this,t,e);return!1!==o&&(i!==o.x||s!==o.y)}}Po.positioners=xo;var Eo={id:"tooltip",_element:Po,positioners:xo,afterInit(t,e,i){i&&(t.tooltip=new Po({chart:t,options:i}))},beforeUpdate(t,e,i){t.tooltip&&t.tooltip.initialize(i)},reset(t,e,i){t.tooltip&&t.tooltip.initialize(i)},afterDraw(t){const e=t.tooltip,i={tooltip:e};!1!==t.notifyPlugins("beforeTooltipDraw",i)&&(e&&e.draw(t.ctx),t.notifyPlugins("afterTooltipDraw",i))},afterEvent(t,e){if(t.tooltip){const i=e.replay;t.tooltip.handleEvent(e.event,i,e.inChartArea)&&(e.changed=!0)}},defaults:{enabled:!0,external:null,position:"average",backgroundColor:"rgba(0,0,0,0.8)",titleColor:"#fff",titleFont:{weight:"bold"},titleSpacing:2,titleMarginBottom:6,titleAlign:"left",bodyColor:"#fff",bodySpacing:2,bodyFont:{},bodyAlign:"left",footerColor:"#fff",footerSpacing:2,footerMarginTop:6,footerFont:{weight:"bold"},footerAlign:"left",padding:6,caretPadding:2,caretSize:5,cornerRadius:6,boxHeight:(t,e)=>e.bodyFont.size,boxWidth:(t,e)=>e.bodyFont.size,multiKeyBackground:"#fff",displayColors:!0,boxPadding:0,borderColor:"rgba(0,0,0,0)",borderWidth:0,animation:{duration:400,easing:"easeOutQuart"},animations:{numbers:{type:"number",properties:["x","y","width","height","caretX","caretY"]},opacity:{easing:"linear",duration:200}},callbacks:{beforeTitle:_,title(t){if(t.length>0){const e=t[0],i=e.chart.data.labels,s=i?i.length:0;if(this&&this.options&&"dataset"===this.options.mode)return e.dataset.label||"";if(e.label)return e.label;if(s>0&&e.dataIndex<s)return i[e.dataIndex]}return""},afterTitle:_,beforeBody:_,beforeLabel:_,label(t){if(this&&this.options&&"dataset"===this.options.mode)return t.label+": "+t.formattedValue||t.formattedValue;let e=t.dataset.label||"";e&&(e+=": ");const i=t.formattedValue;return v(i)||(e+=i),e},labelColor(t){const e=t.chart.getDatasetMeta(t.datasetIndex).controller.getStyle(t.dataIndex);return{borderColor:e.borderColor,backgroundColor:e.backgroundColor,borderWidth:e.borderWidth,borderDash:e.borderDash,borderDashOffset:e.borderDashOffset,borderRadius:0}},labelTextColor(){return this.options.bodyColor},labelPointStyle(t){const e=t.chart.getDatasetMeta(t.datasetIndex).controller.getStyle(t.dataIndex);return{pointStyle:e.pointStyle,rotation:e.rotation}},afterLabel:_,afterBody:_,beforeFooter:_,footer:_,afterFooter:_}},defaultRoutes:{bodyFont:"font",footerFont:"font",titleFont:"font"},descriptors:{_scriptable:t=>"filter"!==t&&"itemSort"!==t&&"external"!==t,_indexable:!1,callbacks:{_scriptable:!1,_indexable:!1},animation:{_fallback:!1},animations:{_fallback:"animation"}},additionalOptionScopes:["interaction"]},Oo=Object.freeze({__proto__:null,Decimation:Xn,Filler:lo,Legend:po,SubTitle:bo,Title:fo,Tooltip:Eo});class To extends qs{constructor(t){super(t),this._startValue=void 0,this._valueRange=0,this._addedLabels=[]}init(t){const e=this._addedLabels;if(e.length){const t=this.getLabels();for(const{index:i,label:s}of e)t[i]===s&&t.splice(i,1);this._addedLabels=[]}super.init(t)}parse(t,e){if(v(t))return null;const i=this.getLabels();return((t,e)=>null===t?null:dt(Math.round(t),0,e))(e=isFinite(e)&&i[e]===t?e:function(t,e,i,s){const n=t.indexOf(e);return-1===n?((t,e,i,s)=>("string"==typeof e?(i=t.push(e)-1,s.unshift({index:i,label:e})):isNaN(e)&&(i=null),i))(t,e,i,s):n!==t.lastIndexOf(e)?i:n}(i,t,C(e,t),this._addedLabels),i.length-1)}determineDataLimits(){const{minDefined:t,maxDefined:e}=this.getUserBounds();let{min:i,max:s}=this.getMinMax(!0);"ticks"===this.options.bounds&&(t||(i=0),e||(s=this.getLabels().length-1)),this.min=i,this.max=s}buildTicks(){const t=this.min,e=this.max,i=this.options.offset,s=[];let n=this.getLabels();n=0===t&&e===n.length-1?n:n.slice(t,e+1),this._valueRange=Math.max(n.length-(i?0:1),1),this._startValue=this.min-(i?.5:0);for(let i=t;i<=e;i++)s.push({value:i});return s}getLabelForValue(t){const e=this.getLabels();return t>=0&&t<e.length?e[t]:t}configure(){super.configure(),this.isHorizontal()||(this._reversePixels=!this._reversePixels)}getPixelForValue(t){return"number"!=typeof t&&(t=this.parse(t)),null===t?NaN:this.getPixelForDecimal((t-this._startValue)/this._valueRange)}getPixelForTick(t){const e=this.ticks;return t<0||t>e.length-1?null:this.getPixelForValue(e[t].value)}getValueForPixel(t){return Math.round(this._startValue+this.getDecimalForPixel(t)*this._valueRange)}getBasePixel(){return this.bottom}}function Lo(t,e,{horizontal:i,minRotation:s}){const n=st(s),o=(i?Math.sin(n):Math.cos(n))||.001,a=.75*e*(""+t).length;return Math.min(e/o,a)}To.id="category",To.defaults={ticks:{callback:To.prototype.getLabelForValue}};class Ro extends qs{constructor(t){super(t),this.start=void 0,this.end=void 0,this._startValue=void 0,this._endValue=void 0,this._valueRange=0}parse(t,e){return v(t)||("number"==typeof t||t instanceof Number)&&!isFinite(+t)?null:+t}handleTickRangeOptions(){const{beginAtZero:t}=this.options,{minDefined:e,maxDefined:i}=this.getUserBounds();let{min:s,max:n}=this;const o=t=>s=e?s:t,a=t=>n=i?n:t;if(t){const t=J(s),e=J(n);t<0&&e<0?a(0):t>0&&e>0&&o(0)}if(s===n){let e=1;(n>=Number.MAX_SAFE_INTEGER||s<=Number.MIN_SAFE_INTEGER)&&(e=Math.abs(.05*n)),a(n+e),t||o(s-e)}this.min=s,this.max=n}getTickLimit(){const t=this.options.ticks;let e,{maxTicksLimit:i,stepSize:s}=t;return s?(e=Math.ceil(this.max/s)-Math.floor(this.min/s)+1,e>1e3&&(console.warn(`scales.${this.id}.ticks.stepSize: ${s} would result generating up to ${e} ticks. Limiting to 1000.`),e=1e3)):(e=this.computeTickLimit(),i=i||11),i&&(e=Math.min(i,e)),e}computeTickLimit(){return Number.POSITIVE_INFINITY}buildTicks(){const t=this.options,e=t.ticks;let i=this.getTickLimit();i=Math.max(2,i);const s=function(t,e){const i=[],{bounds:s,step:n,min:o,max:a,precision:r,count:h,maxTicks:l,maxDigits:c,includeBounds:d}=t,u=n||1,p=l-1,{min:g,max:f}=e,m=!v(o),b=!v(a),x=!v(h),_=(f-g)/(c+1);let y,w,M,A,k=Q((f-g)/p/u)*u;if(k<1e-14&&!m&&!b)return[{value:g},{value:f}];A=Math.ceil(f/k)-Math.floor(g/k),A>p&&(k=Q(A*k/p/u)*u),v(r)||(y=Math.pow(10,r),k=Math.ceil(k*y)/y),"ticks"===s?(w=Math.floor(g/k)*k,M=Math.ceil(f/k)*k):(w=g,M=f),m&&b&&n&&function(t,e){const i=Math.round(t);return i-e<=t&&i+e>=t}((a-o)/n,k/1e3)?(A=Math.round(Math.min((a-o)/k,l)),k=(a-o)/A,w=o,M=a):x?(w=m?o:w,M=b?a:M,A=h-1,k=(M-w)/A):(A=(M-w)/k,A=et(A,Math.round(A),k/1e3)?Math.round(A):Math.ceil(A));const C=Math.max(ot(k),ot(w));y=Math.pow(10,v(r)?C:r),w=Math.round(w*y)/y,M=Math.round(M*y)/y;let S=0;for(m&&(d&&w!==o?(i.push({value:o}),w<o&&S++,et(Math.round((w+S*k)*y)/y,o,Lo(o,_,t))&&S++):w<o&&S++);S<A;++S)i.push({value:Math.round((w+S*k)*y)/y});return b&&d&&M!==a?i.length&&et(i[i.length-1].value,a,Lo(a,_,t))?i[i.length-1].value=a:i.push({value:a}):b&&M!==a||i.push({value:M}),i}({maxTicks:i,bounds:t.bounds,min:t.min,max:t.max,precision:e.precision,step:e.stepSize,count:e.count,maxDigits:this._maxDigits(),horizontal:this.isHorizontal(),minRotation:e.minRotation||0,includeBounds:!1!==e.includeBounds},this._range||this);return"ticks"===t.bounds&&it(s,this,"value"),t.reverse?(s.reverse(),this.start=this.max,this.end=this.min):(this.start=this.min,this.end=this.max),s}configure(){const t=this.ticks;let e=this.min,i=this.max;if(super.configure(),this.options.offset&&t.length){const s=(i-e)/Math.max(t.length-1,1)/2;e-=s,i+=s}this._startValue=e,this._endValue=i,this._valueRange=i-e}getLabelForValue(t){return li(t,this.chart.options.locale,this.options.ticks.format)}}class Io extends Ro{determineDataLimits(){const{min:t,max:e}=this.getMinMax(!0);this.min=A(t)?t:0,this.max=A(e)?e:1,this.handleTickRangeOptions()}computeTickLimit(){const t=this.isHorizontal(),e=t?this.width:this.height,i=st(this.options.ticks.minRotation),s=(t?Math.sin(i):Math.cos(i))||.001,n=this._resolveTickFontOptions(0);return Math.ceil(e/Math.min(40,n.lineHeight/s))}getPixelForValue(t){return null===t?NaN:this.getPixelForDecimal((t-this._startValue)/this._valueRange)}getValueForPixel(t){return this._startValue+this.getDecimalForPixel(t)*this._valueRange}}function Bo(t){return 1==t/Math.pow(10,Math.floor(G(t)))}Io.id="linear",Io.defaults={ticks:{callback:Ws.formatters.numeric}};class zo extends qs{constructor(t){super(t),this.start=void 0,this.end=void 0,this._startValue=void 0,this._valueRange=0}parse(t,e){const i=Ro.prototype.parse.apply(this,[t,e]);if(0!==i)return A(i)&&i>0?i:null;this._zero=!0}determineDataLimits(){const{min:t,max:e}=this.getMinMax(!0);this.min=A(t)?Math.max(0,t):null,this.max=A(e)?Math.max(0,e):null,this.options.beginAtZero&&(this._zero=!0),this.handleTickRangeOptions()}handleTickRangeOptions(){const{minDefined:t,maxDefined:e}=this.getUserBounds();let i=this.min,s=this.max;const n=e=>i=t?i:e,o=t=>s=e?s:t,a=(t,e)=>Math.pow(10,Math.floor(G(t))+e);i===s&&(i<=0?(n(1),o(10)):(n(a(i,-1)),o(a(s,1)))),i<=0&&n(a(s,-1)),s<=0&&o(a(i,1)),this._zero&&this.min!==this._suggestedMin&&i===a(this.min,0)&&n(a(i,-1)),this.min=i,this.max=s}buildTicks(){const t=this.options,e=function(t,e){const i=Math.floor(G(e.max)),s=Math.ceil(e.max/Math.pow(10,i)),n=[];let o=k(t.min,Math.pow(10,Math.floor(G(e.min)))),a=Math.floor(G(o)),r=Math.floor(o/Math.pow(10,a)),h=a<0?Math.pow(10,Math.abs(a)):1;do{n.push({value:o,major:Bo(o)}),++r,10===r&&(r=1,++a,h=a>=0?1:h),o=Math.round(r*Math.pow(10,a)*h)/h}while(a<i||a===i&&r<s);const l=k(t.max,o);return n.push({value:l,major:Bo(o)}),n}({min:this._userMin,max:this._userMax},this);return"ticks"===t.bounds&&it(e,this,"value"),t.reverse?(e.reverse(),this.start=this.max,this.end=this.min):(this.start=this.min,this.end=this.max),e}getLabelForValue(t){return void 0===t?"0":li(t,this.chart.options.locale,this.options.ticks.format)}configure(){const t=this.min;super.configure(),this._startValue=G(t),this._valueRange=G(this.max)-G(t)}getPixelForValue(t){return void 0!==t&&0!==t||(t=this.min),null===t||isNaN(t)?NaN:this.getPixelForDecimal(t===this.min?0:(G(t)-this._startValue)/this._valueRange)}getValueForPixel(t){const e=this.getDecimalForPixel(t);return Math.pow(10,this._startValue+e*this._valueRange)}}function Fo(t){const e=t.ticks;if(e.display&&t.display){const t=_e(e.backdropPadding);return C(e.font&&e.font.size,Qt.font.size)+t.height}return 0}function Vo(t,e,i,s,n){return t===s||t===n?{start:e-i/2,end:e+i/2}:t<s||t>n?{start:e-i,end:e}:{start:e,end:e+i}}function Wo(t,e,i,s,n){const o=Math.abs(Math.sin(i)),a=Math.abs(Math.cos(i));let r=0,h=0;s.start<e.l?(r=(e.l-s.start)/o,t.l=Math.min(t.l,e.l-r)):s.end>e.r&&(r=(s.end-e.r)/o,t.r=Math.max(t.r,e.r+r)),n.start<e.t?(h=(e.t-n.start)/a,t.t=Math.min(t.t,e.t-h)):n.end>e.b&&(h=(n.end-e.b)/a,t.b=Math.max(t.b,e.b+h))}function jo(t){return 0===t||180===t?"center":t<180?"left":"right"}function No(t,e,i){return 90===i||270===i?t-=e/2:(i>270||i<90)&&(t-=e),t}function Ho(t,e,i,s){const{ctx:n}=t;if(i)n.arc(t.xCenter,t.yCenter,e,0,$);else{let i=t.getPointPosition(0,e);n.moveTo(i.x,i.y);for(let o=1;o<s;o++)i=t.getPointPosition(o,e),n.lineTo(i.x,i.y)}}zo.id="logarithmic",zo.defaults={ticks:{callback:Ws.formatters.logarithmic,major:{enabled:!0}}};class $o extends Ro{constructor(t){super(t),this.xCenter=void 0,this.yCenter=void 0,this.drawingArea=void 0,this._pointLabels=[],this._pointLabelItems=[]}setDimensions(){const t=this._padding=_e(Fo(this.options)/2),e=this.width=this.maxWidth-t.width,i=this.height=this.maxHeight-t.height;this.xCenter=Math.floor(this.left+e/2+t.left),this.yCenter=Math.floor(this.top+i/2+t.top),this.drawingArea=Math.floor(Math.min(e,i)/2)}determineDataLimits(){const{min:t,max:e}=this.getMinMax(!1);this.min=A(t)&&!isNaN(t)?t:0,this.max=A(e)&&!isNaN(e)?e:0,this.handleTickRangeOptions()}computeTickLimit(){return Math.ceil(this.drawingArea/Fo(this.options))}generateTickLabels(t){Ro.prototype.generateTickLabels.call(this,t),this._pointLabels=this.getLabels().map(((t,e)=>{const i=D(this.options.pointLabels.callback,[t,e],this);return i||0===i?i:""})).filter(((t,e)=>this.chart.getDataVisibility(e)))}fit(){const t=this.options;t.display&&t.pointLabels.display?function(t){const e={l:t.left+t._padding.left,r:t.right-t._padding.right,t:t.top+t._padding.top,b:t.bottom-t._padding.bottom},i=Object.assign({},e),s=[],n=[],o=t._pointLabels.length,a=t.options.pointLabels,r=a.centerPointLabels?H/o:0;for(let d=0;d<o;d++){const o=a.setContext(t.getPointLabelContext(d));n[d]=o.padding;const u=t.getPointPosition(d,t.drawingArea+n[d],r),p=ye(o.font),g=(h=t.ctx,l=p,c=w(c=t._pointLabels[d])?c:[c],{w:ee(h,l.string,c),h:c.length*l.lineHeight});s[d]=g;const f=lt(t.getIndexAngle(d)+r),m=Math.round(nt(f));Wo(i,e,f,Vo(m,u.x,g.w,0,180),Vo(m,u.y,g.h,90,270))}var h,l,c;t.setCenterPoint(e.l-i.l,i.r-e.r,e.t-i.t,i.b-e.b),t._pointLabelItems=function(t,e,i){const s=[],n=t._pointLabels.length,o=t.options,a=Fo(o)/2,r=t.drawingArea,h=o.pointLabels.centerPointLabels?H/n:0;for(let o=0;o<n;o++){const n=t.getPointPosition(o,r+a+i[o],h),u=Math.round(nt(lt(n.angle+q))),p=e[o],g=No(n.y,p.h,u),f=jo(u),m=(l=n.x,c=p.w,"right"===(d=f)?l-=c:"center"===d&&(l-=c/2),l);s.push({x:n.x,y:g,textAlign:f,left:m,top:g,right:m+p.w,bottom:g+p.h})}var l,c,d;return s}(t,s,n)}(this):this.setCenterPoint(0,0,0,0)}setCenterPoint(t,e,i,s){this.xCenter+=Math.floor((t-e)/2),this.yCenter+=Math.floor((i-s)/2),this.drawingArea-=Math.min(this.drawingArea/2,Math.max(t,e,i,s))}getIndexAngle(t){return lt(t*($/(this._pointLabels.length||1))+st(this.options.startAngle||0))}getDistanceFromCenterForValue(t){if(v(t))return NaN;const e=this.drawingArea/(this.max-this.min);return this.options.reverse?(this.max-t)*e:(t-this.min)*e}getValueForDistanceFromCenter(t){if(v(t))return NaN;const e=t/(this.drawingArea/(this.max-this.min));return this.options.reverse?this.max-e:this.min+e}getPointLabelContext(t){const e=this._pointLabels||[];if(t>=0&&t<e.length){const i=e[t];return function(t,e,i){return we(t,{label:i,index:e,type:"pointLabel"})}(this.getContext(),t,i)}}getPointPosition(t,e,i=0){const s=this.getIndexAngle(t)-q+i;return{x:Math.cos(s)*e+this.xCenter,y:Math.sin(s)*e+this.yCenter,angle:s}}getPointPositionForValue(t,e){return this.getPointPosition(t,this.getDistanceFromCenterForValue(e))}getBasePosition(t){return this.getPointPositionForValue(t||0,this.getBaseValue())}getPointLabelPosition(t){const{left:e,top:i,right:s,bottom:n}=this._pointLabelItems[t];return{left:e,top:i,right:s,bottom:n}}drawBackground(){const{backgroundColor:t,grid:{circular:e}}=this.options;if(t){const i=this.ctx;i.save(),i.beginPath(),Ho(this,this.getDistanceFromCenterForValue(this._endValue),e,this._pointLabels.length),i.closePath(),i.fillStyle=t,i.fill(),i.restore()}}drawGrid(){const t=this.ctx,e=this.options,{angleLines:i,grid:s}=e,n=this._pointLabels.length;let o,a,r;if(e.pointLabels.display&&function(t,e){const{ctx:i,options:{pointLabels:s}}=t;for(let n=e-1;n>=0;n--){const e=s.setContext(t.getPointLabelContext(n)),o=ye(e.font),{x:a,y:r,textAlign:h,left:l,top:c,right:d,bottom:u}=t._pointLabelItems[n],{backdropColor:p}=e;if(!v(p)){const t=_e(e.backdropPadding);i.fillStyle=p,i.fillRect(l-t.left,c-t.top,d-l+t.width,u-c+t.height)}ce(i,t._pointLabels[n],a,r+o.lineHeight/2,o,{color:e.color,textAlign:h,textBaseline:"middle"})}}(this,n),s.display&&this.ticks.forEach(((t,e)=>{0!==e&&(a=this.getDistanceFromCenterForValue(t.value),function(t,e,i,s){const n=t.ctx,o=e.circular,{color:a,lineWidth:r}=e;!o&&!s||!a||!r||i<0||(n.save(),n.strokeStyle=a,n.lineWidth=r,n.setLineDash(e.borderDash),n.lineDashOffset=e.borderDashOffset,n.beginPath(),Ho(t,i,o,s),n.closePath(),n.stroke(),n.restore())}(this,s.setContext(this.getContext(e-1)),a,n))})),i.display){for(t.save(),o=n-1;o>=0;o--){const s=i.setContext(this.getPointLabelContext(o)),{color:n,lineWidth:h}=s;h&&n&&(t.lineWidth=h,t.strokeStyle=n,t.setLineDash(s.borderDash),t.lineDashOffset=s.borderDashOffset,a=this.getDistanceFromCenterForValue(e.ticks.reverse?this.min:this.max),r=this.getPointPosition(o,a),t.beginPath(),t.moveTo(this.xCenter,this.yCenter),t.lineTo(r.x,r.y),t.stroke())}t.restore()}}drawBorder(){}drawLabels(){const t=this.ctx,e=this.options,i=e.ticks;if(!i.display)return;const s=this.getIndexAngle(0);let n,o;t.save(),t.translate(this.xCenter,this.yCenter),t.rotate(s),t.textAlign="center",t.textBaseline="middle",this.ticks.forEach(((s,a)=>{if(0===a&&!e.reverse)return;const r=i.setContext(this.getContext(a)),h=ye(r.font);if(n=this.getDistanceFromCenterForValue(this.ticks[a].value),r.showLabelBackdrop){t.font=h.string,o=t.measureText(s.label).width,t.fillStyle=r.backdropColor;const e=_e(r.backdropPadding);t.fillRect(-o/2-e.left,-n-h.size/2-e.top,o+e.width,h.size+e.height)}ce(t,s.label,0,-n,h,{color:r.color})})),t.restore()}drawTitle(){}}$o.id="radialLinear",$o.defaults={display:!0,animate:!0,position:"chartArea",angleLines:{display:!0,lineWidth:1,borderDash:[],borderDashOffset:0},grid:{circular:!1},startAngle:0,ticks:{showLabelBackdrop:!0,callback:Ws.formatters.numeric},pointLabels:{backdropColor:void 0,backdropPadding:2,display:!0,font:{size:10},callback:t=>t,padding:5,centerPointLabels:!1}},$o.defaultRoutes={"angleLines.color":"borderColor","pointLabels.color":"color","ticks.color":"color"},$o.descriptors={angleLines:{_fallback:"grid"}};const Yo={millisecond:{common:!0,size:1,steps:1e3},second:{common:!0,size:1e3,steps:60},minute:{common:!0,size:6e4,steps:60},hour:{common:!0,size:36e5,steps:24},day:{common:!0,size:864e5,steps:30},week:{common:!1,size:6048e5,steps:4},month:{common:!0,size:2628e6,steps:12},quarter:{common:!1,size:7884e6,steps:4},year:{common:!0,size:3154e7}},Uo=Object.keys(Yo);function Xo(t,e){return t-e}function qo(t,e){if(v(e))return null;const i=t._adapter,{parser:s,round:n,isoWeekday:o}=t._parseOpts;let a=e;return"function"==typeof s&&(a=s(a)),A(a)||(a="string"==typeof s?i.parse(a,s):i.parse(a)),null===a?null:(n&&(a="week"!==n||!tt(o)&&!0!==o?i.startOf(a,n):i.startOf(a,"isoWeek",o)),+a)}function Ko(t,e,i,s){const n=Uo.length;for(let o=Uo.indexOf(t);o<n-1;++o){const t=Yo[Uo[o]],n=t.steps?t.steps:Number.MAX_SAFE_INTEGER;if(t.common&&Math.ceil((i-e)/(n*t.size))<=s)return Uo[o]}return Uo[n-1]}function Zo(t,e,i){if(i){if(i.length){const{lo:s,hi:n}=Me(i,e);t[i[s]>=e?i[s]:i[n]]=!0}}else t[e]=!0}function Go(t,e,i){const s=[],n={},o=e.length;let a,r;for(a=0;a<o;++a)r=e[a],n[r]=a,s.push({value:r,major:!1});return 0!==o&&i?function(t,e,i,s){const n=t._adapter,o=+n.startOf(e[0].value,s),a=e[e.length-1].value;let r,h;for(r=o;r<=a;r=+n.add(r,1,s))h=i[r],h>=0&&(e[h].major=!0);return e}(t,s,n,i):s}class Jo extends qs{constructor(t){super(t),this._cache={data:[],labels:[],all:[]},this._unit="day",this._majorUnit=void 0,this._offsets={},this._normalized=!1,this._parseOpts=void 0}init(t,e){const i=t.time||(t.time={}),s=this._adapter=new is._date(t.adapters.date);I(i.displayFormats,s.formats()),this._parseOpts={parser:i.parser,round:i.round,isoWeekday:i.isoWeekday},super.init(t),this._normalized=e.normalized}parse(t,e){return void 0===t?null:qo(this,t)}beforeLayout(){super.beforeLayout(),this._cache={data:[],labels:[],all:[]}}determineDataLimits(){const t=this.options,e=this._adapter,i=t.time.unit||"day";let{min:s,max:n,minDefined:o,maxDefined:a}=this.getUserBounds();function r(t){o||isNaN(t.min)||(s=Math.min(s,t.min)),a||isNaN(t.max)||(n=Math.max(n,t.max))}o&&a||(r(this._getLabelBounds()),"ticks"===t.bounds&&"labels"===t.ticks.source||r(this.getMinMax(!1))),s=A(s)&&!isNaN(s)?s:+e.startOf(Date.now(),i),n=A(n)&&!isNaN(n)?n:+e.endOf(Date.now(),i)+1,this.min=Math.min(s,n-1),this.max=Math.max(s+1,n)}_getLabelBounds(){const t=this.getLabelTimestamps();let e=Number.POSITIVE_INFINITY,i=Number.NEGATIVE_INFINITY;return t.length&&(e=t[0],i=t[t.length-1]),{min:e,max:i}}buildTicks(){const t=this.options,e=t.time,i=t.ticks,s="labels"===i.source?this.getLabelTimestamps():this._generate();"ticks"===t.bounds&&s.length&&(this.min=this._userMin||s[0],this.max=this._userMax||s[s.length-1]);const n=this.min,o=function(t,e,i){let s=0,n=t.length;for(;s<n&&t[s]<e;)s++;for(;n>s&&t[n-1]>i;)n--;return s>0||n<t.length?t.slice(s,n):t}(s,n,this.max);return this._unit=e.unit||(i.autoSkip?Ko(e.minUnit,this.min,this.max,this._getLabelCapacity(n)):function(t,e,i,s,n){for(let o=Uo.length-1;o>=Uo.indexOf(i);o--){const i=Uo[o];if(Yo[i].common&&t._adapter.diff(n,s,i)>=e-1)return i}return Uo[i?Uo.indexOf(i):0]}(this,o.length,e.minUnit,this.min,this.max)),this._majorUnit=i.major.enabled&&"year"!==this._unit?function(t){for(let e=Uo.indexOf(t)+1,i=Uo.length;e<i;++e)if(Yo[Uo[e]].common)return Uo[e]}(this._unit):void 0,this.initOffsets(s),t.reverse&&o.reverse(),Go(this,o,this._majorUnit)}initOffsets(t){let e,i,s=0,n=0;this.options.offset&&t.length&&(e=this.getDecimalForValue(t[0]),s=1===t.length?1-e:(this.getDecimalForValue(t[1])-e)/2,i=this.getDecimalForValue(t[t.length-1]),n=1===t.length?i:(i-this.getDecimalForValue(t[t.length-2]))/2);const o=t.length<3?.5:.25;s=dt(s,0,o),n=dt(n,0,o),this._offsets={start:s,end:n,factor:1/(s+1+n)}}_generate(){const t=this._adapter,e=this.min,i=this.max,s=this.options,n=s.time,o=n.unit||Ko(n.minUnit,e,i,this._getLabelCapacity(e)),a=C(n.stepSize,1),r="week"===o&&n.isoWeekday,h=tt(r)||!0===r,l={};let c,d,u=e;if(h&&(u=+t.startOf(u,"isoWeek",r)),u=+t.startOf(u,h?"day":o),t.diff(i,e,o)>1e5*a)throw new Error(e+" and "+i+" are too far apart with stepSize of "+a+" "+o);const p="data"===s.ticks.source&&this.getDataTimestamps();for(c=u,d=0;c<i;c=+t.add(c,a,o),d++)Zo(l,c,p);return c!==i&&"ticks"!==s.bounds&&1!==d||Zo(l,c,p),Object.keys(l).sort(((t,e)=>t-e)).map((t=>+t))}getLabelForValue(t){const e=this._adapter,i=this.options.time;return i.tooltipFormat?e.format(t,i.tooltipFormat):e.format(t,i.displayFormats.datetime)}_tickFormatFunction(t,e,i,s){const n=this.options,o=n.time.displayFormats,a=this._unit,r=this._majorUnit,h=a&&o[a],l=r&&o[r],c=i[e],d=r&&l&&c&&c.major,u=this._adapter.format(t,s||(d?l:h)),p=n.ticks.callback;return p?D(p,[u,e,i],this):u}generateTickLabels(t){let e,i,s;for(e=0,i=t.length;e<i;++e)s=t[e],s.label=this._tickFormatFunction(s.value,e,t)}getDecimalForValue(t){return null===t?NaN:(t-this.min)/(this.max-this.min)}getPixelForValue(t){const e=this._offsets,i=this.getDecimalForValue(t);return this.getPixelForDecimal((e.start+i)*e.factor)}getValueForPixel(t){const e=this._offsets,i=this.getDecimalForPixel(t)/e.factor-e.end;return this.min+i*(this.max-this.min)}_getLabelSize(t){const e=this.options.ticks,i=this.ctx.measureText(t).width,s=st(this.isHorizontal()?e.maxRotation:e.minRotation),n=Math.cos(s),o=Math.sin(s),a=this._resolveTickFontOptions(0).size;return{w:i*n+a*o,h:i*o+a*n}}_getLabelCapacity(t){const e=this.options.time,i=e.displayFormats,s=i[e.unit]||i.millisecond,n=this._tickFormatFunction(t,0,Go(this,[t],this._majorUnit),s),o=this._getLabelSize(n),a=Math.floor(this.isHorizontal()?this.width/o.w:this.height/o.h)-1;return a>0?a:1}getDataTimestamps(){let t,e,i=this._cache.data||[];if(i.length)return i;const s=this.getMatchingVisibleMetas();if(this._normalized&&s.length)return this._cache.data=s[0].controller.getAllParsedValues(this);for(t=0,e=s.length;t<e;++t)i=i.concat(s[t].controller.getAllParsedValues(this));return this._cache.data=this.normalize(i)}getLabelTimestamps(){const t=this._cache.labels||[];let e,i;if(t.length)return t;const s=this.getLabels();for(e=0,i=s.length;e<i;++e)t.push(qo(this,s[e]));return this._cache.labels=this._normalized?t:this.normalize(t)}normalize(t){return De(t.sort(Xo))}}function Qo(t,e,i){let s,n,o,a,r=0,h=t.length-1;i?(e>=t[r].pos&&e<=t[h].pos&&({lo:r,hi:h}=Ae(t,"pos",e)),({pos:s,time:o}=t[r]),({pos:n,time:a}=t[h])):(e>=t[r].time&&e<=t[h].time&&({lo:r,hi:h}=Ae(t,"time",e)),({time:s,pos:o}=t[r]),({time:n,pos:a}=t[h]));const l=n-s;return l?o+(a-o)*(e-s)/l:o}Jo.id="time",Jo.defaults={bounds:"data",adapters:{},time:{parser:!1,unit:!1,round:!1,isoWeekday:!1,minUnit:"millisecond",displayFormats:{}},ticks:{source:"auto",major:{enabled:!1}}};class ta extends Jo{constructor(t){super(t),this._table=[],this._minPos=void 0,this._tableRange=void 0}initOffsets(){const t=this._getTimestampsForTable(),e=this._table=this.buildLookupTable(t);this._minPos=Qo(e,this.min),this._tableRange=Qo(e,this.max)-this._minPos,super.initOffsets(t)}buildLookupTable(t){const{min:e,max:i}=this,s=[],n=[];let o,a,r,h,l;for(o=0,a=t.length;o<a;++o)h=t[o],h>=e&&h<=i&&s.push(h);if(s.length<2)return[{time:e,pos:0},{time:i,pos:1}];for(o=0,a=s.length;o<a;++o)l=s[o+1],r=s[o-1],h=s[o],Math.round((l+r)/2)!==h&&n.push({time:h,pos:o/(a-1)});return n}_getTimestampsForTable(){let t=this._cache.all||[];if(t.length)return t;const e=this.getDataTimestamps(),i=this.getLabelTimestamps();return t=e.length&&i.length?this.normalize(e.concat(i)):e.length?e:i,t=this._cache.all=t,t}getDecimalForValue(t){return(Qo(this._table,t)-this._minPos)/this._tableRange}getValueForPixel(t){const e=this._offsets,i=this.getDecimalForPixel(t)/e.factor-e.end;return Qo(this._table,i*this._tableRange+this._minPos,!0)}}ta.id="timeseries",ta.defaults=Jo.defaults;const ea=[Qi,$n,Oo,Object.freeze({__proto__:null,CategoryScale:To,LinearScale:Io,LogarithmicScale:zo,RadialLinearScale:$o,TimeScale:Jo,TimeSeriesScale:ta})];vn.register(...ea);const ia=vn;var sa=i(3761),na=i(8287),oa=i(1454),aa=i(5077),ra=i(9155),ha=i(8203),la=i(8941),ca=i(1549),da=i(5783),ua=i(2757),pa=i(9195),ga=i(752),fa=i(1471),ma=i(7708),ba=i(965),xa=i(1936),_a=i(2804),ya=i(8912),va=i(3452),wa=i(7703),Ma=i(5594),Aa=i(8612),ka=i(8851),Ca=i(9014),Sa=i(1958),Da=i(590),Pa=i(6048),Ea=i(8092),Oa=i(7943),Ta=i(1422),La=i(7848),Ra=i(1910),Ia=i(2343),Ba=i(2268),za=i(4938),Fa=i(2790),Va=i(822),Wa=i(9208),ja=i(8533),Na=i(7151),Ha=i(5296),$a=i(134),Ya=i(6507),Ua=i(9065),Xa=i(5560),qa=i(9856),Ka=i(3317);const Za={clearsky_day:sa,clearsky_night:na,clearsky_polartwilight:oa,cloudy:aa,fair_day:ra,fair_night:ha,fair_polartwilight:la,fog:ca,heavyrain:da,heavyrainandthunder:ua,heavyrainshowersandthunder_day:pa,heavyrainshowersandthunder_night:ga,heavyrainshowersandthunder_polartwilight:fa,heavyrainshowers_day:ma,heavyrainshowers_night:ba,heavyrainshowers_polartwilight:xa,heavysleet:_a,heavysleetandthunder:ya,heavysleetshowersandthunder_day:va,heavysleetshowersandthunder_night:wa,heavysleetshowersandthunder_polartwilight:Ma,heavysleetshowers_day:Aa,heavysleetshowers_night:ka,heavysleetshowers_polartwilight:Ca,heavysnow:Sa,heavysnowandthunder:Da,heavysnowshowersandthunder_day:Pa,heavysnowshowersandthunder_night:Ea,heavysnowshowersandthunder_polartwilight:Oa,heavysnowshowers_day:Ta,heavysnowshowers_night:La,heavysnowshowers_polartwilight:Ra,lightrain:Ia,lightrainandthunder:Ba,lightrainshowersandthunder_day:za,lightrainshowersandthunder_night:Fa,lightrainshowersandthunder_polartwilight:Va,lightrainshowers_day:Wa,lightrainshowers_night:ja,lightrainshowers_polartwilight:Na,lightsleet:Ha,lightsleetandthunder:$a,lightsleetshowers_day:Ya,lightsleetshowers_night:Ua,lightsleetshowers_polartwilight:Xa,lightsnow:qa,lightsnowandthunder:Ka,lightsnowandthunder:Ka,lightsnowshowers_day:i(6001),lightsnowshowers_night:i(8282),lightsnowshowers_polartwilight:i(4659),ightssleetshowersandthunder_day:i(5518),lightssleetshowersandthunder_night:i(2049),lightssleetshowersandthunder_polartwilight:i(9322),lightssnowshowersandthunder_day:i(8587),lightssnowshowersandthunder_night:i(378),lightssnowshowersandthunder_polartwilight:i(2496),partlycloudy_day:i(8133),partlycloudy_night:i(1793),partlycloudy_polartwilight:i(2473),rain:i(1550),rainandthunder:i(8084),rainshowersandthunder_day:i(5),rainshowersandthunder_night:i(4863),rainshowersandthunder_polartwilight:i(1467),rainshowers_day:i(6679),rainshowers_night:i(8749),rainshowers_polartwilight:i(3148),sleet:i(6949),sleetandthunder:i(662),sleetshowersandthunder_day:i(8200),sleetshowersandthunder_night:i(3271),sleetshowersandthunder_polartwilight:i(8817),sleetshowers_day:i(5587),sleetshowers_night:i(3464),sleetshowers_polartwilight:i(2686),snow:i(4112),snowandthunder:i(8902),snowshowersandthunder_day:i(2957),snowshowersandthunder_night:i(3851),snowshowersandthunder_polartwilight:i(6508),snowshowers_day:i(2182),snowshowers_night:i(625),snowshowers_polartwilight:i(9292),icon_arrow:i(3446),base_map:i(5945),background_img:i(1815),radar_map:i(9345)};class Ga{constructor(t){this.buildChart(t)}buildChart(t){this.chart=new ia(t,{data:{datasets:this.getDatasets()},options:this.getOptions()})}updateData(t,e,i,s,n,o,a,r){this.chart.data.labels=t,this.chart.data.datasets[0].data=e,this.chart.data.datasets[0].pointStyle=o,this.chart.data.datasets[1].data=i,this.chart.data.datasets[2].data=s,this.chart.data.datasets[2].pointStyle=a,this.chart.data.datasets[2].pointRotation=r,this.chart.data.datasets[3].data=n,this.chart.update()}getDatasets(){return[{order:2,type:"line",pointRadius:.1,tension:.4,fill:!0,borderWidth:0,yAxisID:"y",segment:{backgroundColor:t=>t.p0.parsed.y>0?"rgba(360, 63, 73, 0.5)":"rgba(141, 166, 229, 0.5)"}},{order:1,type:"bar",backgroundColor:"rgba(54, 162, 235, 0.3)",borderWidth:0,yAxisID:"y2"},{order:3,type:"line",pointRadius:.1,tension:.4,yAxisID:"y",segment:{borderColor:"rgba(141, 229, 166, 0.5)"}},{order:4,type:"line",pointRadius:0,tension:.4,borderDash:[5,5],yAxisID:"y3",segment:{borderColor:"rgba(197, 201, 198, 0.9)"}}]}getOptions(){return{responsive:!0,maintainAspectRatio:!1,plugins:{legend:{display:!1}},scales:{y:{min:-15,max:35,type:"linear",position:"left",ticks:{color:"black",beginAtZero:!0}},y2:{min:0,max:16,type:"linear",position:"right",ticks:{color:"rgba(54, 162, 235, 0.8)"},grid:{drawOnChartArea:!1}},y3:{type:"linear",position:"right",ticks:{color:"rgba(197, 201, 198, 1)",stepSize:5},grid:{drawOnChartArea:!1}}}}}}class Ja{constructor(){this.radarImage=document.getElementById("radar-map")}getChartEl(){return document.getElementById("chart")}updateRadarImage(t,e){console.log(t),this.radarImage.src=e}}class Qa{async fetchJson(t){const e=await fetch(t,{mode:"cors"});return await e.json()}async getRadarImage(t){console.log(t);const e=t.lastFiles[0].formats[0].updated,i=await fetch(t.lastFiles[0].formats[0].link,{mode:"cors"}),s=await i.blob();return{timeStamp:e,objectURL:URL.createObjectURL(s)}}getData(t){const e=[],i=[],s=[],n=[],o=[],a=[],r=[],h=[];for(let l=0;l<12;l++)if(e.push(parseInt(t.properties.timeseries[l].time.slice(11,13))+1),i.push(t.properties.timeseries[l].data.instant.details.air_temperature),s.push(t.properties.timeseries[l].data.next_1_hours.details.precipitation_amount),n.push(t.properties.timeseries[l].data.instant.details.wind_speed),o.push(t.properties.timeseries[l].data.instant.details.air_pressure_at_sea_level),l%2==0){const e=new Image(35,35);e.src=Za[t.properties.timeseries[l].data.next_1_hours.summary.symbol_code],a.push(e),r.push(""),h.push("")}else{const e=new Image(20,20);a.push(""),e.src=Za.icon_arrow,r.push(e),h.push(t.properties.timeseries[l].data.instant.details.wind_from_direction)}return{hour:e,temp:i,precipitation:s,wind:n,airPressure:o,weatherImg:a,windArrow:r,windDirection:h}}}new class{constructor(){this.weatherData=new Qa,this.displayController=new Ja,this.chart=new Ga(this.displayController.getChartEl()),this.updateChart(),this.updateMap()}async updateMap(){const t=await this.weatherData.fetchJson("https://opendata-download-radar.smhi.se/api/version/latest/area/sweden/product/comp?format=png&timeZone=Europe/Stockholm"),e=await this.weatherData.getRadarImage(t);this.displayController.updateRadarImage(e.timeStamp,e.objectURL)}async updateChart(){const t=await this.weatherData.fetchJson("https://api.met.no/weatherapi/locationforecast/2.0/complete?lat=59.8586&lon=17.6389"),e=this.weatherData.getData(t);this.chart.updateData(e.hour,e.temp,e.precipitation,e.wind,e.airPressure,e.weatherImg,e.windArrow,e.windDirection)}}})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,