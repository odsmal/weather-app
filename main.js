/*! For license information please see main.js.LICENSE.txt */
(()=>{"use strict";var t={761:(t,e,i)=>{t.exports=i.p+"9b2d66a41eb245188264.svg"},8287:(t,e,i)=>{t.exports=i.p+"de8410b5be4ad70db196.svg"},1454:(t,e,i)=>{t.exports=i.p+"730bfe55beab95f8a099.svg"},5077:(t,e,i)=>{t.exports=i.p+"f4c494b8b1d37c5de359.svg"},9155:(t,e,i)=>{t.exports=i.p+"0f5e2e50940fd379710d.svg"},8203:(t,e,i)=>{t.exports=i.p+"a28f8ef702f1ff8fd0fe.svg"},8941:(t,e,i)=>{t.exports=i.p+"7b4918679ff5f6cc8f9e.svg"},1549:(t,e,i)=>{t.exports=i.p+"a1cb77cdf4a65b474104.svg"},5783:(t,e,i)=>{t.exports=i.p+"089c7c0ba45475701fe4.svg"},2757:(t,e,i)=>{t.exports=i.p+"b1bb9b2fe75a6642e3de.svg"},7708:(t,e,i)=>{t.exports=i.p+"2bd57e3e2da7ec86bbc4.svg"},965:(t,e,i)=>{t.exports=i.p+"df8ed63dd9e2501a3418.svg"},1936:(t,e,i)=>{t.exports=i.p+"d2b3d4c7708a4e8f5a19.svg"},9195:(t,e,i)=>{t.exports=i.p+"7c408c29d81bf405e206.svg"},752:(t,e,i)=>{t.exports=i.p+"ac72c13887fa3e805a68.svg"},1471:(t,e,i)=>{t.exports=i.p+"f20b436197fab1c3dad9.svg"},2804:(t,e,i)=>{t.exports=i.p+"7209b5f6a71a7ac0bc6e.svg"},8912:(t,e,i)=>{t.exports=i.p+"dfb7aa0dfca946cfcaec.svg"},8612:(t,e,i)=>{t.exports=i.p+"0e22c031e287f7a3f61c.svg"},8851:(t,e,i)=>{t.exports=i.p+"61c862d4e93b89c08591.svg"},9014:(t,e,i)=>{t.exports=i.p+"56b97cabb86f7972e5b9.svg"},3452:(t,e,i)=>{t.exports=i.p+"90f950cd12e7aa73b3d8.svg"},7703:(t,e,i)=>{t.exports=i.p+"dd93d2741761f6c04f53.svg"},5594:(t,e,i)=>{t.exports=i.p+"951e634e652fd1359771.svg"},1958:(t,e,i)=>{t.exports=i.p+"4fb7c021acfa8839ba29.svg"},590:(t,e,i)=>{t.exports=i.p+"c6deb376186155d44e94.svg"},1422:(t,e,i)=>{t.exports=i.p+"d6f14ea455742d118a69.svg"},7848:(t,e,i)=>{t.exports=i.p+"4d290f547c1900d8d239.svg"},1910:(t,e,i)=>{t.exports=i.p+"d20ad74f8ee3e036c8a9.svg"},6048:(t,e,i)=>{t.exports=i.p+"1d44b0d48dc062a43e5c.svg"},8092:(t,e,i)=>{t.exports=i.p+"4e70360f3902bb444a5b.svg"},7943:(t,e,i)=>{t.exports=i.p+"6f398bef6ff1e4659e23.svg"},2343:(t,e,i)=>{t.exports=i.p+"9da9c915654156d14db2.svg"},2268:(t,e,i)=>{t.exports=i.p+"c417bfb0d0b8a4692290.svg"},9208:(t,e,i)=>{t.exports=i.p+"8439c26aa5d3ad7b7e13.svg"},8533:(t,e,i)=>{t.exports=i.p+"57403d605e47b1ef777f.svg"},7151:(t,e,i)=>{t.exports=i.p+"9b476bf2b55a23fa6106.svg"},4938:(t,e,i)=>{t.exports=i.p+"5770a9811b26ef2395bd.svg"},2790:(t,e,i)=>{t.exports=i.p+"80742531c82e1a2fd41d.svg"},822:(t,e,i)=>{t.exports=i.p+"ca57bcd4bf2d51752d5f.svg"},5296:(t,e,i)=>{t.exports=i.p+"1c5c4ee53da79b4f3d7a.svg"},134:(t,e,i)=>{t.exports=i.p+"51b51cca0b6b1f3a7206.svg"},6507:(t,e,i)=>{t.exports=i.p+"442399228fd54713a676.svg"},9065:(t,e,i)=>{t.exports=i.p+"e097129c5ee95a6e86df.svg"},5560:(t,e,i)=>{t.exports=i.p+"9bb124ae9d4cf5fe1378.svg"},9856:(t,e,i)=>{t.exports=i.p+"d3f4d394a81d8a93f15d.svg"},3317:(t,e,i)=>{t.exports=i.p+"be72ca9ded55bb8cb829.svg"},6001:(t,e,i)=>{t.exports=i.p+"4b56431736751ce3f97c.svg"},8282:(t,e,i)=>{t.exports=i.p+"7d826487d89395a11567.svg"},4659:(t,e,i)=>{t.exports=i.p+"b6ac39b4c8987639ec9d.svg"},5518:(t,e,i)=>{t.exports=i.p+"0538c89c0490a67c813c.svg"},2049:(t,e,i)=>{t.exports=i.p+"7340b6568ca80f67eaf2.svg"},9322:(t,e,i)=>{t.exports=i.p+"02e56cdeb6097302ea14.svg"},8587:(t,e,i)=>{t.exports=i.p+"c097ab66c582e9d6fd78.svg"},378:(t,e,i)=>{t.exports=i.p+"5c19564c5b11623741bd.svg"},2496:(t,e,i)=>{t.exports=i.p+"ffb2c91891a03d0cef1b.svg"},8133:(t,e,i)=>{t.exports=i.p+"c5935776698662c6d162.svg"},1793:(t,e,i)=>{t.exports=i.p+"5877456a4768106fc590.svg"},2473:(t,e,i)=>{t.exports=i.p+"372a9293781c2e3e9ab6.svg"},1550:(t,e,i)=>{t.exports=i.p+"c346e04dee848d481274.svg"},8084:(t,e,i)=>{t.exports=i.p+"25c4db965c11a6942a70.svg"},6679:(t,e,i)=>{t.exports=i.p+"d33a32cada0e1d576519.svg"},8749:(t,e,i)=>{t.exports=i.p+"79c0ac54002c7a2737f8.svg"},3148:(t,e,i)=>{t.exports=i.p+"3416eddaf730529b2a9c.svg"},5:(t,e,i)=>{t.exports=i.p+"f00689879f1d7540600f.svg"},4863:(t,e,i)=>{t.exports=i.p+"5224ddc2d3a7642d4d4c.svg"},1467:(t,e,i)=>{t.exports=i.p+"dbf298b1d77cb8a4bac0.svg"},6949:(t,e,i)=>{t.exports=i.p+"19395b05a6c10cc3756f.svg"},662:(t,e,i)=>{t.exports=i.p+"66a8dec8e3ffd26d6922.svg"},5587:(t,e,i)=>{t.exports=i.p+"eeb55fba05b74b284ad9.svg"},3464:(t,e,i)=>{t.exports=i.p+"28f9b323c50dd61fcfd9.svg"},2686:(t,e,i)=>{t.exports=i.p+"e3d5e503b506535c9005.svg"},8200:(t,e,i)=>{t.exports=i.p+"8cb85a2a85c7f0cb99db.svg"},3271:(t,e,i)=>{t.exports=i.p+"fbd0855c9369b58adfce.svg"},8817:(t,e,i)=>{t.exports=i.p+"1bfc1d12c025d53d16b9.svg"},4112:(t,e,i)=>{t.exports=i.p+"c1a8f3d33111f3194d7f.svg"},8902:(t,e,i)=>{t.exports=i.p+"06e008b210b440c973db.svg"},2182:(t,e,i)=>{t.exports=i.p+"6077f3d1f1812a03493b.svg"},625:(t,e,i)=>{t.exports=i.p+"21cca350e5d5e6550d4d.svg"},9292:(t,e,i)=>{t.exports=i.p+"89c910647ebd5cd9f26d.svg"},2957:(t,e,i)=>{t.exports=i.p+"973f97b9180740f4b0dc.svg"},3851:(t,e,i)=>{t.exports=i.p+"2009070e651a249282da.svg"},6508:(t,e,i)=>{t.exports=i.p+"fab8ed37d2f1998742e1.svg"},218:t=>{t.exports=JSON.parse('{"type":"Feature","geometry":{"type":"Point","coordinates":[17.632,59.8471,31]},"properties":{"meta":{"updated_at":"2022-03-03T14:18:14Z","units":{"air_pressure_at_sea_level":"hPa","air_temperature":"celsius","air_temperature_max":"celsius","air_temperature_min":"celsius","air_temperature_percentile_10":"celsius","air_temperature_percentile_90":"celsius","cloud_area_fraction":"%","cloud_area_fraction_high":"%","cloud_area_fraction_low":"%","cloud_area_fraction_medium":"%","dew_point_temperature":"celsius","fog_area_fraction":"%","precipitation_amount":"mm","precipitation_amount_max":"mm","precipitation_amount_min":"mm","probability_of_precipitation":"%","probability_of_thunder":"%","relative_humidity":"%","ultraviolet_index_clear_sky":"1","wind_from_direction":"degrees","wind_speed":"m/s","wind_speed_of_gust":"m/s","wind_speed_percentile_10":"m/s","wind_speed_percentile_90":"m/s"}},"timeseries":[{"time":"2022-03-03T14:00:00Z","data":{"instant":{"details":{"air_pressure_at_sea_level":1024.5,"air_temperature":3.7,"air_temperature_percentile_10":3,"air_temperature_percentile_90":4.5,"cloud_area_fraction":20,"cloud_area_fraction_high":0,"cloud_area_fraction_low":20.1,"cloud_area_fraction_medium":0,"dew_point_temperature":-1.9,"fog_area_fraction":0,"relative_humidity":68,"ultraviolet_index_clear_sky":0.4,"wind_from_direction":1.5,"wind_speed":4.8,"wind_speed_of_gust":9.1,"wind_speed_percentile_10":4.6,"wind_speed_percentile_90":5.5}},"next_12_hours":{"summary":{"symbol_code":"clearsky_night","symbol_confidence":"certain"},"details":{"probability_of_precipitation":0}},"next_1_hours":{"summary":{"symbol_code":"fair_day"},"details":{"precipitation_amount":4,"precipitation_amount_max":0,"precipitation_amount_min":0,"probability_of_precipitation":0,"probability_of_thunder":0}},"next_6_hours":{"summary":{"symbol_code":"clearsky_night"},"details":{"air_temperature_max":3.2,"air_temperature_min":-0.5,"precipitation_amount":0,"precipitation_amount_max":0,"precipitation_amount_min":0,"probability_of_precipitation":0}}}},{"time":"2022-03-03T15:00:00Z","data":{"instant":{"details":{"air_pressure_at_sea_level":1024.4,"air_temperature":3.2,"air_temperature_percentile_10":2.4,"air_temperature_percentile_90":4,"cloud_area_fraction":0.3,"cloud_area_fraction_high":0,"cloud_area_fraction_low":0.3,"cloud_area_fraction_medium":0,"dew_point_temperature":-2.1,"fog_area_fraction":0,"relative_humidity":69.5,"ultraviolet_index_clear_sky":0.2,"wind_from_direction":357.4,"wind_speed":5.1,"wind_speed_of_gust":9.2,"wind_speed_percentile_10":4,"wind_speed_percentile_90":5.2}},"next_12_hours":{"summary":{"symbol_code":"clearsky_night","symbol_confidence":"certain"},"details":{"probability_of_precipitation":0}},"next_1_hours":{"summary":{"symbol_code":"clearsky_day"},"details":{"precipitation_amount":1,"precipitation_amount_max":0,"precipitation_amount_min":0,"probability_of_precipitation":0,"probability_of_thunder":0}},"next_6_hours":{"summary":{"symbol_code":"clearsky_night"},"details":{"air_temperature_max":2.3,"air_temperature_min":-0.8,"precipitation_amount":0,"precipitation_amount_max":0,"precipitation_amount_min":0,"probability_of_precipitation":0}}}},{"time":"2022-03-03T16:00:00Z","data":{"instant":{"details":{"air_pressure_at_sea_level":1024.5,"air_temperature":2.3,"air_temperature_percentile_10":1.4,"air_temperature_percentile_90":3.1,"cloud_area_fraction":0,"cloud_area_fraction_high":0,"cloud_area_fraction_low":0,"cloud_area_fraction_medium":0,"dew_point_temperature":-1.9,"fog_area_fraction":0,"relative_humidity":74.9,"ultraviolet_index_clear_sky":0,"wind_from_direction":359.3,"wind_speed":3.8,"wind_speed_of_gust":9.1,"wind_speed_percentile_10":3.1,"wind_speed_percentile_90":5}},"next_12_hours":{"summary":{"symbol_code":"clearsky_night","symbol_confidence":"certain"},"details":{"probability_of_precipitation":0}},"next_1_hours":{"summary":{"symbol_code":"clearsky_night"},"details":{"precipitation_amount":2,"precipitation_amount_max":0,"precipitation_amount_min":0,"probability_of_precipitation":0,"probability_of_thunder":0}},"next_6_hours":{"summary":{"symbol_code":"clearsky_night"},"details":{"air_temperature_max":1.3,"air_temperature_min":-1.1,"precipitation_amount":0,"precipitation_amount_max":0,"precipitation_amount_min":0,"probability_of_precipitation":0}}}},{"time":"2022-03-03T17:00:00Z","data":{"instant":{"details":{"air_pressure_at_sea_level":1024.9,"air_temperature":1.3,"air_temperature_percentile_10":0.4,"air_temperature_percentile_90":2,"cloud_area_fraction":0,"cloud_area_fraction_high":0,"cloud_area_fraction_low":0,"cloud_area_fraction_medium":0,"dew_point_temperature":-2.1,"fog_area_fraction":0,"relative_humidity":79.9,"ultraviolet_index_clear_sky":0,"wind_from_direction":354.9,"wind_speed":2.5,"wind_speed_of_gust":6.5,"wind_speed_percentile_10":2.1,"wind_speed_percentile_90":4.3}},"next_12_hours":{"summary":{"symbol_code":"clearsky_night","symbol_confidence":"certain"},"details":{"probability_of_precipitation":0}},"next_1_hours":{"summary":{"symbol_code":"clearsky_night"},"details":{"precipitation_amount":0,"precipitation_amount_max":0,"precipitation_amount_min":0,"probability_of_precipitation":0,"probability_of_thunder":0}},"next_6_hours":{"summary":{"symbol_code":"clearsky_night"},"details":{"air_temperature_max":0.3,"air_temperature_min":-1.3,"precipitation_amount":0,"precipitation_amount_max":0,"precipitation_amount_min":0,"probability_of_precipitation":0}}}},{"time":"2022-03-03T18:00:00Z","data":{"instant":{"details":{"air_pressure_at_sea_level":1025.3,"air_temperature":0.3,"air_temperature_percentile_10":-0.4,"air_temperature_percentile_90":1.1,"cloud_area_fraction":0.1,"cloud_area_fraction_high":0,"cloud_area_fraction_low":0,"cloud_area_fraction_medium":0,"dew_point_temperature":-2.2,"fog_area_fraction":0,"relative_humidity":85.1,"ultraviolet_index_clear_sky":0,"wind_from_direction":351.5,"wind_speed":2.6,"wind_speed_of_gust":4.2,"wind_speed_percentile_10":2.1,"wind_speed_percentile_90":3.8}},"next_12_hours":{"summary":{"symbol_code":"clearsky_night","symbol_confidence":"certain"},"details":{"probability_of_precipitation":0}},"next_1_hours":{"summary":{"symbol_code":"clearsky_night"},"details":{"precipitation_amount":0,"precipitation_amount_max":0,"precipitation_amount_min":0,"probability_of_precipitation":0,"probability_of_thunder":0}},"next_6_hours":{"summary":{"symbol_code":"clearsky_night"},"details":{"air_temperature_max":-0.2,"air_temperature_min":-1.6,"precipitation_amount":0,"precipitation_amount_max":0,"precipitation_amount_min":0,"probability_of_precipitation":0}}}},{"time":"2022-03-03T19:00:00Z","data":{"instant":{"details":{"air_pressure_at_sea_level":1025.6,"air_temperature":-0.2,"air_temperature_percentile_10":-1,"air_temperature_percentile_90":0.5,"cloud_area_fraction":0,"cloud_area_fraction_high":0,"cloud_area_fraction_low":0,"cloud_area_fraction_medium":0,"dew_point_temperature":-2.3,"fog_area_fraction":0,"relative_humidity":87.4,"ultraviolet_index_clear_sky":0,"wind_from_direction":354.2,"wind_speed":3,"wind_speed_of_gust":5.1,"wind_speed_percentile_10":2.2,"wind_speed_percentile_90":3.6}},"next_12_hours":{"summary":{"symbol_code":"clearsky_night","symbol_confidence":"certain"},"details":{"probability_of_precipitation":0}},"next_1_hours":{"summary":{"symbol_code":"clearsky_night"},"details":{"precipitation_amount":6,"precipitation_amount_max":0,"precipitation_amount_min":0,"probability_of_precipitation":0,"probability_of_thunder":0}},"next_6_hours":{"summary":{"symbol_code":"clearsky_night"},"details":{"air_temperature_max":-0.5,"air_temperature_min":-2,"precipitation_amount":0,"precipitation_amount_max":0,"precipitation_amount_min":0,"probability_of_precipitation":0}}}},{"time":"2022-03-03T20:00:00Z","data":{"instant":{"details":{"air_pressure_at_sea_level":1025.9,"air_temperature":-0.5,"air_temperature_percentile_10":-1.4,"air_temperature_percentile_90":0.1,"cloud_area_fraction":0,"cloud_area_fraction_high":0,"cloud_area_fraction_low":0.1,"cloud_area_fraction_medium":0,"dew_point_temperature":-2.1,"fog_area_fraction":0,"relative_humidity":90.6,"ultraviolet_index_clear_sky":0,"wind_from_direction":2.4,"wind_speed":3.1,"wind_speed_of_gust":5.3,"wind_speed_percentile_10":2.4,"wind_speed_percentile_90":3.4}},"next_12_hours":{"summary":{"symbol_code":"clearsky_night","symbol_confidence":"certain"},"details":{"probability_of_precipitation":0}},"next_1_hours":{"summary":{"symbol_code":"clearsky_night"},"details":{"precipitation_amount":0,"precipitation_amount_max":0,"precipitation_amount_min":0,"probability_of_precipitation":0,"probability_of_thunder":0}},"next_6_hours":{"summary":{"symbol_code":"clearsky_night"},"details":{"air_temperature_max":-0.8,"air_temperature_min":-2.5,"precipitation_amount":0,"precipitation_amount_max":0,"precipitation_amount_min":0,"probability_of_precipitation":0}}}},{"time":"2022-03-03T21:00:00Z","data":{"instant":{"details":{"air_pressure_at_sea_level":1026.2,"air_temperature":-0.8,"air_temperature_percentile_10":-1.7,"air_temperature_percentile_90":-0.2,"cloud_area_fraction":0.1,"cloud_area_fraction_high":0,"cloud_area_fraction_low":0,"cloud_area_fraction_medium":0,"dew_point_temperature":-2.1,"fog_area_fraction":0,"relative_humidity":92.8,"ultraviolet_index_clear_sky":0,"wind_from_direction":351.3,"wind_speed":3.1,"wind_speed_of_gust":5.4,"wind_speed_percentile_10":2.5,"wind_speed_percentile_90":3.2}},"next_12_hours":{"summary":{"symbol_code":"clearsky_day","symbol_confidence":"certain"},"details":{"probability_of_precipitation":0}},"next_1_hours":{"summary":{"symbol_code":"clearsky_night"},"details":{"precipitation_amount":0,"precipitation_amount_max":0,"precipitation_amount_min":0,"probability_of_precipitation":0,"probability_of_thunder":0}},"next_6_hours":{"summary":{"symbol_code":"clearsky_night"},"details":{"air_temperature_max":-1.1,"air_temperature_min":-3.1,"precipitation_amount":0,"precipitation_amount_max":0,"precipitation_amount_min":0,"probability_of_precipitation":0}}}},{"time":"2022-03-03T22:00:00Z","data":{"instant":{"details":{"air_pressure_at_sea_level":1026.7,"air_temperature":-1.1,"air_temperature_percentile_10":-1.9,"air_temperature_percentile_90":-0.4,"cloud_area_fraction":0.1,"cloud_area_fraction_high":0,"cloud_area_fraction_low":0.2,"cloud_area_fraction_medium":0,"dew_point_temperature":-2.1,"fog_area_fraction":0,"relative_humidity":94.2,"ultraviolet_index_clear_sky":0,"wind_from_direction":351.7,"wind_speed":2.9,"wind_speed_of_gust":5.4,"wind_speed_percentile_10":2.6,"wind_speed_percentile_90":3.1}},"next_12_hours":{"summary":{"symbol_code":"clearsky_day","symbol_confidence":"certain"},"details":{"probability_of_precipitation":0}},"next_1_hours":{"summary":{"symbol_code":"clearsky_night"},"details":{"precipitation_amount":0,"precipitation_amount_max":0,"precipitation_amount_min":0,"probability_of_precipitation":0,"probability_of_thunder":0}},"next_6_hours":{"summary":{"symbol_code":"clearsky_night"},"details":{"air_temperature_max":-1.3,"air_temperature_min":-3.8,"precipitation_amount":0,"precipitation_amount_max":0,"precipitation_amount_min":0,"probability_of_precipitation":0}}}},{"time":"2022-03-03T23:00:00Z","data":{"instant":{"details":{"air_pressure_at_sea_level":1026.9,"air_temperature":-1.3,"air_temperature_percentile_10":-2.2,"air_temperature_percentile_90":-0.6,"cloud_area_fraction":0.1,"cloud_area_fraction_high":0,"cloud_area_fraction_low":0.2,"cloud_area_fraction_medium":0,"dew_point_temperature":-2.3,"fog_area_fraction":0,"relative_humidity":94.5,"ultraviolet_index_clear_sky":0,"wind_from_direction":349.8,"wind_speed":2.9,"wind_speed_of_gust":4.9,"wind_speed_percentile_10":2.5,"wind_speed_percentile_90":3.2}},"next_12_hours":{"summary":{"symbol_code":"clearsky_day","symbol_confidence":"certain"},"details":{"probability_of_precipitation":0}},"next_1_hours":{"summary":{"symbol_code":"clearsky_night"},"details":{"precipitation_amount":0,"precipitation_amount_max":0,"precipitation_amount_min":0,"probability_of_precipitation":0,"probability_of_thunder":0}},"next_6_hours":{"summary":{"symbol_code":"clearsky_night"},"details":{"air_temperature_max":-1.6,"air_temperature_min":-4.4,"precipitation_amount":0,"precipitation_amount_max":0,"precipitation_amount_min":0,"probability_of_precipitation":0}}}},{"time":"2022-03-04T00:00:00Z","data":{"instant":{"details":{"air_pressure_at_sea_level":1027.3,"air_temperature":-1.6,"air_temperature_percentile_10":-2.5,"air_temperature_percentile_90":-1,"cloud_area_fraction":0,"cloud_area_fraction_high":0,"cloud_area_fraction_low":0.1,"cloud_area_fraction_medium":0,"dew_point_temperature":-2.6,"fog_area_fraction":0,"relative_humidity":94.6,"ultraviolet_index_clear_sky":0,"wind_from_direction":350.1,"wind_speed":2.6,"wind_speed_of_gust":4.9,"wind_speed_percentile_10":2.3,"wind_speed_percentile_90":2.8}},"next_12_hours":{"summary":{"symbol_code":"clearsky_day","symbol_confidence":"certain"},"details":{"probability_of_precipitation":0}},"next_1_hours":{"summary":{"symbol_code":"clearsky_night"},"details":{"precipitation_amount":0,"precipitation_amount_max":0,"precipitation_amount_min":0,"probability_of_precipitation":0,"probability_of_thunder":0}},"next_6_hours":{"summary":{"symbol_code":"clearsky_night"},"details":{"air_temperature_max":-2,"air_temperature_min":-4.6,"precipitation_amount":0,"precipitation_amount_max":0,"precipitation_amount_min":0,"probability_of_precipitation":0}}}},{"time":"2022-03-04T01:00:00Z","data":{"instant":{"details":{"air_pressure_at_sea_level":1027.7,"air_temperature":-2,"air_temperature_percentile_10":-3,"air_temperature_percentile_90":-1.4,"cloud_area_fraction":0.1,"cloud_area_fraction_high":0,"cloud_area_fraction_low":0.1,"cloud_area_fraction_medium":0,"dew_point_temperature":-3,"fog_area_fraction":0,"relative_humidity":95,"ultraviolet_index_clear_sky":0,"wind_from_direction":340.2,"wind_speed":2.6,"wind_speed_of_gust":4.4,"wind_speed_percentile_10":2,"wind_speed_percentile_90":2.6}},"next_12_hours":{"summary":{"symbol_code":"clearsky_day","symbol_confidence":"certain"},"details":{"probability_of_precipitation":0}},"next_1_hours":{"summary":{"symbol_code":"clearsky_night"},"details":{"precipitation_amount":0,"precipitation_amount_max":0,"precipitation_amount_min":0,"probability_of_precipitation":0,"probability_of_thunder":0}},"next_6_hours":{"summary":{"symbol_code":"clearsky_night"},"details":{"air_temperature_max":-2.5,"air_temperature_min":-4.6,"precipitation_amount":0,"precipitation_amount_max":0,"precipitation_amount_min":0,"probability_of_precipitation":0}}}},{"time":"2022-03-04T02:00:00Z","data":{"instant":{"details":{"air_pressure_at_sea_level":1028,"air_temperature":-2.5,"air_temperature_percentile_10":-3.6,"air_temperature_percentile_90":-1.9,"cloud_area_fraction":0,"cloud_area_fraction_high":0,"cloud_area_fraction_low":0.1,"cloud_area_fraction_medium":0,"dew_point_temperature":-3.6,"fog_area_fraction":0,"relative_humidity":94.6,"ultraviolet_index_clear_sky":0,"wind_from_direction":333.1,"wind_speed":2.3,"wind_speed_of_gust":4.3,"wind_speed_percentile_10":1.8,"wind_speed_percentile_90":2.5}},"next_12_hours":{"summary":{"symbol_code":"clearsky_day","symbol_confidence":"certain"},"details":{"probability_of_precipitation":0}},"next_1_hours":{"summary":{"symbol_code":"clearsky_night"},"details":{"precipitation_amount":0,"precipitation_amount_max":0,"precipitation_amount_min":0,"probability_of_precipitation":0,"probability_of_thunder":0}},"next_6_hours":{"summary":{"symbol_code":"clearsky_night"},"details":{"air_temperature_max":-1.3,"air_temperature_min":-4.6,"precipitation_amount":0,"precipitation_amount_max":0,"precipitation_amount_min":0,"probability_of_precipitation":0}}}},{"time":"2022-03-04T03:00:00Z","data":{"instant":{"details":{"air_pressure_at_sea_level":1028,"air_temperature":-3.1,"air_temperature_percentile_10":-4.3,"air_temperature_percentile_90":-2.4,"cloud_area_fraction":0,"cloud_area_fraction_high":0,"cloud_area_fraction_low":0,"cloud_area_fraction_medium":0,"dew_point_temperature":-4.3,"fog_area_fraction":0,"relative_humidity":94,"ultraviolet_index_clear_sky":0,"wind_from_direction":329.7,"wind_speed":2.1,"wind_speed_of_gust":3.8,"wind_speed_percentile_10":1.8,"wind_speed_percentile_90":2.3}},"next_12_hours":{"summary":{"symbol_code":"clearsky_day","symbol_confidence":"certain"},"details":{"probability_of_precipitation":0}},"next_1_hours":{"summary":{"symbol_code":"clearsky_night"},"details":{"precipitation_amount":0,"precipitation_amount_max":0,"precipitation_amount_min":0,"probability_of_precipitation":0,"probability_of_thunder":0}},"next_6_hours":{"summary":{"symbol_code":"clearsky_day"},"details":{"air_temperature_max":1.1,"air_temperature_min":-4.6,"precipitation_amount":0,"precipitation_amount_max":0,"precipitation_amount_min":0,"probability_of_precipitation":0}}}},{"time":"2022-03-04T04:00:00Z","data":{"instant":{"details":{"air_pressure_at_sea_level":1028.2,"air_temperature":-3.8,"air_temperature_percentile_10":-4.9,"air_temperature_percentile_90":-3,"cloud_area_fraction":0,"cloud_area_fraction_high":0,"cloud_area_fraction_low":0,"cloud_area_fraction_medium":0,"dew_point_temperature":-5.1,"fog_area_fraction":0,"relative_humidity":93.3,"ultraviolet_index_clear_sky":0,"wind_from_direction":326.8,"wind_speed":1.7,"wind_speed_of_gust":3.2,"wind_speed_percentile_10":1.4,"wind_speed_percentile_90":2.1}},"next_12_hours":{"summary":{"symbol_code":"clearsky_day","symbol_confidence":"certain"},"details":{"probability_of_precipitation":0}},"next_1_hours":{"summary":{"symbol_code":"clearsky_night"},"details":{"precipitation_amount":0,"precipitation_amount_max":0,"precipitation_amount_min":0,"probability_of_precipitation":0,"probability_of_thunder":0}},"next_6_hours":{"summary":{"symbol_code":"clearsky_day"},"details":{"air_temperature_max":2.7,"air_temperature_min":-4.6,"precipitation_amount":0,"precipitation_amount_max":0,"precipitation_amount_min":0,"probability_of_precipitation":0}}}},{"time":"2022-03-04T05:00:00Z","data":{"instant":{"details":{"air_pressure_at_sea_level":1028.5,"air_temperature":-4.4,"air_temperature_percentile_10":-5.5,"air_temperature_percentile_90":-3.6,"cloud_area_fraction":0,"cloud_area_fraction_high":0,"cloud_area_fraction_low":0,"cloud_area_fraction_medium":0,"dew_point_temperature":-5.8,"fog_area_fraction":0,"relative_humidity":93.1,"ultraviolet_index_clear_sky":0,"wind_from_direction":312.7,"wind_speed":1.3,"wind_speed_of_gust":2.6,"wind_speed_percentile_10":1,"wind_speed_percentile_90":1.6}},"next_12_hours":{"summary":{"symbol_code":"clearsky_day","symbol_confidence":"certain"},"details":{"probability_of_precipitation":0}},"next_1_hours":{"summary":{"symbol_code":"clearsky_night"},"details":{"precipitation_amount":0,"precipitation_amount_max":0,"precipitation_amount_min":0,"probability_of_precipitation":0,"probability_of_thunder":0}},"next_6_hours":{"summary":{"symbol_code":"clearsky_day"},"details":{"air_temperature_max":3.5,"air_temperature_min":-4.6,"precipitation_amount":0,"precipitation_amount_max":0,"precipitation_amount_min":0,"probability_of_precipitation":0}}}},{"time":"2022-03-04T06:00:00Z","data":{"instant":{"details":{"air_pressure_at_sea_level":1028.7,"air_temperature":-4.6,"air_temperature_percentile_10":-5.7,"air_temperature_percentile_90":-3.7,"cloud_area_fraction":0,"cloud_area_fraction_high":0,"cloud_area_fraction_low":0,"cloud_area_fraction_medium":0,"dew_point_temperature":-6.4,"fog_area_fraction":0,"relative_humidity":91.3,"ultraviolet_index_clear_sky":0,"wind_from_direction":293.5,"wind_speed":1.1,"wind_speed_of_gust":2,"wind_speed_percentile_10":1,"wind_speed_percentile_90":1.3}},"next_12_hours":{"summary":{"symbol_code":"clearsky_day","symbol_confidence":"certain"},"details":{"probability_of_precipitation":0}},"next_1_hours":{"summary":{"symbol_code":"clearsky_day"},"details":{"precipitation_amount":0,"precipitation_amount_max":0,"precipitation_amount_min":0,"probability_of_precipitation":0,"probability_of_thunder":0}},"next_6_hours":{"summary":{"symbol_code":"clearsky_day"},"details":{"air_temperature_max":3.9,"air_temperature_min":-3.8,"precipitation_amount":0,"precipitation_amount_max":0,"precipitation_amount_min":0,"probability_of_precipitation":0}}}},{"time":"2022-03-04T07:00:00Z","data":{"instant":{"details":{"air_pressure_at_sea_level":1029.1,"air_temperature":-3.8,"air_temperature_percentile_10":-4.8,"air_temperature_percentile_90":-2.9,"cloud_area_fraction":0,"cloud_area_fraction_high":0,"cloud_area_fraction_low":0,"cloud_area_fraction_medium":0,"dew_point_temperature":-6,"fog_area_fraction":0,"relative_humidity":87.9,"ultraviolet_index_clear_sky":0.2,"wind_from_direction":303.7,"wind_speed":1,"wind_speed_of_gust":1.9,"wind_speed_percentile_10":1,"wind_speed_percentile_90":1.5}},"next_12_hours":{"summary":{"symbol_code":"clearsky_day","symbol_confidence":"certain"},"details":{"probability_of_precipitation":0}},"next_1_hours":{"summary":{"symbol_code":"clearsky_day"},"details":{"precipitation_amount":0,"precipitation_amount_max":0,"precipitation_amount_min":0,"probability_of_precipitation":0,"probability_of_thunder":0}},"next_6_hours":{"summary":{"symbol_code":"clearsky_day"},"details":{"air_temperature_max":4.3,"air_temperature_min":-1.3,"precipitation_amount":0,"precipitation_amount_max":0,"precipitation_amount_min":0,"probability_of_precipitation":0}}}},{"time":"2022-03-04T08:00:00Z","data":{"instant":{"details":{"air_pressure_at_sea_level":1029.4,"air_temperature":-1.3,"air_temperature_percentile_10":-2.4,"air_temperature_percentile_90":-0.7,"cloud_area_fraction":0,"cloud_area_fraction_high":0,"cloud_area_fraction_low":0,"cloud_area_fraction_medium":0,"dew_point_temperature":-4.5,"fog_area_fraction":0,"relative_humidity":79.6,"ultraviolet_index_clear_sky":0.5,"wind_from_direction":335.6,"wind_speed":1.3,"wind_speed_of_gust":2.5,"wind_speed_percentile_10":1,"wind_speed_percentile_90":1.9}},"next_12_hours":{"summary":{"symbol_code":"clearsky_day","symbol_confidence":"certain"},"details":{"probability_of_precipitation":0}},"next_1_hours":{"summary":{"symbol_code":"clearsky_day"},"details":{"precipitation_amount":0,"precipitation_amount_max":0,"precipitation_amount_min":0,"probability_of_precipitation":0,"probability_of_thunder":0}},"next_6_hours":{"summary":{"symbol_code":"clearsky_day"},"details":{"air_temperature_max":4.4,"air_temperature_min":1.1,"precipitation_amount":0,"precipitation_amount_max":0,"precipitation_amount_min":0,"probability_of_precipitation":0}}}},{"time":"2022-03-04T09:00:00Z","data":{"instant":{"details":{"air_pressure_at_sea_level":1029.6,"air_temperature":1.1,"air_temperature_percentile_10":-0.4,"air_temperature_percentile_90":1.7,"cloud_area_fraction":0,"cloud_area_fraction_high":0,"cloud_area_fraction_low":0,"cloud_area_fraction_medium":0,"dew_point_temperature":-3.9,"fog_area_fraction":0,"relative_humidity":69.5,"ultraviolet_index_clear_sky":0.8,"wind_from_direction":344.5,"wind_speed":1.2,"wind_speed_of_gust":2.9,"wind_speed_percentile_10":0.7,"wind_speed_percentile_90":1.9}},"next_12_hours":{"summary":{"symbol_code":"clearsky_day","symbol_confidence":"certain"},"details":{"probability_of_precipitation":0}},"next_1_hours":{"summary":{"symbol_code":"clearsky_day"},"details":{"precipitation_amount":0,"precipitation_amount_max":0,"precipitation_amount_min":0,"probability_of_precipitation":0,"probability_of_thunder":0}},"next_6_hours":{"summary":{"symbol_code":"clearsky_day"},"details":{"air_temperature_max":4.4,"air_temperature_min":2.7,"precipitation_amount":0,"precipitation_amount_max":0,"precipitation_amount_min":0,"probability_of_precipitation":0}}}},{"time":"2022-03-04T10:00:00Z","data":{"instant":{"details":{"air_pressure_at_sea_level":1029.8,"air_temperature":2.7,"air_temperature_percentile_10":1.2,"air_temperature_percentile_90":3.3,"cloud_area_fraction":0.1,"cloud_area_fraction_high":0,"cloud_area_fraction_low":0,"cloud_area_fraction_medium":0,"dew_point_temperature":-4.1,"fog_area_fraction":0,"relative_humidity":60.1,"ultraviolet_index_clear_sky":1,"wind_from_direction":332.2,"wind_speed":1.1,"wind_speed_of_gust":3,"wind_speed_percentile_10":0.8,"wind_speed_percentile_90":1.7}},"next_12_hours":{"summary":{"symbol_code":"clearsky_day","symbol_confidence":"certain"},"details":{"probability_of_precipitation":0}},"next_1_hours":{"summary":{"symbol_code":"clearsky_day"},"details":{"precipitation_amount":0,"precipitation_amount_max":0,"precipitation_amount_min":0,"probability_of_precipitation":0,"probability_of_thunder":0}},"next_6_hours":{"summary":{"symbol_code":"clearsky_day"},"details":{"air_temperature_max":4.4,"air_temperature_min":2.9,"precipitation_amount":0,"precipitation_amount_max":0,"precipitation_amount_min":0,"probability_of_precipitation":0}}}},{"time":"2022-03-04T11:00:00Z","data":{"instant":{"details":{"air_pressure_at_sea_level":1029.8,"air_temperature":3.5,"air_temperature_percentile_10":2.1,"air_temperature_percentile_90":4.2,"cloud_area_fraction":0,"cloud_area_fraction_high":0,"cloud_area_fraction_low":0,"cloud_area_fraction_medium":0,"dew_point_temperature":-6.1,"fog_area_fraction":0,"relative_humidity":50.5,"ultraviolet_index_clear_sky":1.1,"wind_from_direction":312.3,"wind_speed":1.1,"wind_speed_of_gust":3.4,"wind_speed_percentile_10":0.9,"wind_speed_percentile_90":1.7}},"next_12_hours":{"summary":{"symbol_code":"clearsky_day","symbol_confidence":"certain"},"details":{"probability_of_precipitation":0}},"next_1_hours":{"summary":{"symbol_code":"clearsky_day"},"details":{"precipitation_amount":0,"precipitation_amount_max":0,"precipitation_amount_min":0,"probability_of_precipitation":0,"probability_of_thunder":0}},"next_6_hours":{"summary":{"symbol_code":"clearsky_day"},"details":{"air_temperature_max":4.4,"air_temperature_min":1.3,"precipitation_amount":0,"precipitation_amount_max":0,"precipitation_amount_min":0,"probability_of_precipitation":0}}}},{"time":"2022-03-04T12:00:00Z","data":{"instant":{"details":{"air_pressure_at_sea_level":1029.5,"air_temperature":3.9,"air_temperature_percentile_10":2.6,"air_temperature_percentile_90":4.9,"cloud_area_fraction":0.1,"cloud_area_fraction_high":0,"cloud_area_fraction_low":0,"cloud_area_fraction_medium":0,"dew_point_temperature":-6.7,"fog_area_fraction":0,"relative_humidity":47.5,"ultraviolet_index_clear_sky":1,"wind_from_direction":295.1,"wind_speed":1,"wind_speed_of_gust":3.4,"wind_speed_percentile_10":0.9,"wind_speed_percentile_90":1.9}},"next_12_hours":{"summary":{"symbol_code":"clearsky_day","symbol_confidence":"certain"},"details":{"probability_of_precipitation":0}},"next_1_hours":{"summary":{"symbol_code":"clearsky_day"},"details":{"precipitation_amount":0,"precipitation_amount_max":0,"precipitation_amount_min":0,"probability_of_precipitation":0,"probability_of_thunder":0}},"next_6_hours":{"summary":{"symbol_code":"clearsky_day"},"details":{"air_temperature_max":4.4,"air_temperature_min":0.4,"precipitation_amount":0,"precipitation_amount_max":0,"precipitation_amount_min":0,"probability_of_precipitation":0}}}},{"time":"2022-03-04T13:00:00Z","data":{"instant":{"details":{"air_pressure_at_sea_level":1029.3,"air_temperature":4.3,"air_temperature_percentile_10":3.1,"air_temperature_percentile_90":5.5,"cloud_area_fraction":0,"cloud_area_fraction_high":0,"cloud_area_fraction_low":0,"cloud_area_fraction_medium":0,"dew_point_temperature":-6.8,"fog_area_fraction":0,"relative_humidity":46.6,"ultraviolet_index_clear_sky":0.7,"wind_from_direction":251.2,"wind_speed":1,"wind_speed_of_gust":3.4,"wind_speed_percentile_10":1,"wind_speed_percentile_90":1.8}},"next_12_hours":{"summary":{"symbol_code":"clearsky_day","symbol_confidence":"certain"},"details":{"probability_of_precipitation":0}},"next_1_hours":{"summary":{"symbol_code":"clearsky_day"},"details":{"precipitation_amount":0,"precipitation_amount_max":0,"precipitation_amount_min":0,"probability_of_precipitation":0,"probability_of_thunder":0}},"next_6_hours":{"summary":{"symbol_code":"clearsky_day"},"details":{"air_temperature_max":4.4,"air_temperature_min":-0.3,"precipitation_amount":0,"precipitation_amount_max":0,"precipitation_amount_min":0,"probability_of_precipitation":0}}}},{"time":"2022-03-04T14:00:00Z","data":{"instant":{"details":{"air_pressure_at_sea_level":1029.1,"air_temperature":4.4,"air_temperature_percentile_10":3.2,"air_temperature_percentile_90":5.6,"cloud_area_fraction":0,"cloud_area_fraction_high":0,"cloud_area_fraction_low":0,"cloud_area_fraction_medium":0,"dew_point_temperature":-6.3,"fog_area_fraction":0,"relative_humidity":49.7,"ultraviolet_index_clear_sky":0.4,"wind_from_direction":232.8,"wind_speed":2.1,"wind_speed_of_gust":4.7,"wind_speed_percentile_10":0.8,"wind_speed_percentile_90":2.2}},"next_12_hours":{"summary":{"symbol_code":"clearsky_night","symbol_confidence":"certain"},"details":{"probability_of_precipitation":0}},"next_1_hours":{"summary":{"symbol_code":"clearsky_day"},"details":{"precipitation_amount":0,"precipitation_amount_max":0,"precipitation_amount_min":0,"probability_of_precipitation":0,"probability_of_thunder":0}},"next_6_hours":{"summary":{"symbol_code":"clearsky_night"},"details":{"air_temperature_max":4,"air_temperature_min":-0.9,"precipitation_amount":0,"precipitation_amount_max":0,"precipitation_amount_min":0,"probability_of_precipitation":0}}}},{"time":"2022-03-04T15:00:00Z","data":{"instant":{"details":{"air_pressure_at_sea_level":1029,"air_temperature":4,"air_temperature_percentile_10":3,"air_temperature_percentile_90":5.2,"cloud_area_fraction":0.2,"cloud_area_fraction_high":0,"cloud_area_fraction_low":0.1,"cloud_area_fraction_medium":0,"dew_point_temperature":-5.6,"fog_area_fraction":0,"relative_humidity":53.3,"ultraviolet_index_clear_sky":0.2,"wind_from_direction":226,"wind_speed":2.3,"wind_speed_of_gust":4.9,"wind_speed_percentile_10":1.4,"wind_speed_percentile_90":2.5}},"next_12_hours":{"summary":{"symbol_code":"clearsky_night","symbol_confidence":"certain"},"details":{"probability_of_precipitation":0}},"next_1_hours":{"summary":{"symbol_code":"clearsky_day"},"details":{"precipitation_amount":0,"precipitation_amount_max":0,"precipitation_amount_min":0,"probability_of_precipitation":0,"probability_of_thunder":0}},"next_6_hours":{"summary":{"symbol_code":"clearsky_night"},"details":{"air_temperature_max":2.9,"air_temperature_min":-1.2,"precipitation_amount":0,"precipitation_amount_max":0,"precipitation_amount_min":0,"probability_of_precipitation":0}}}},{"time":"2022-03-04T16:00:00Z","data":{"instant":{"details":{"air_pressure_at_sea_level":1028.8,"air_temperature":2.9,"air_temperature_percentile_10":1.8,"air_temperature_percentile_90":3.9,"cloud_area_fraction":0,"cloud_area_fraction_high":0,"cloud_area_fraction_low":0,"cloud_area_fraction_medium":0,"dew_point_temperature":-4.6,"fog_area_fraction":0,"relative_humidity":65.1,"ultraviolet_index_clear_sky":0,"wind_from_direction":227.8,"wind_speed":2.1,"wind_speed_of_gust":4.7,"wind_speed_percentile_10":0.8,"wind_speed_percentile_90":2.2}},"next_12_hours":{"summary":{"symbol_code":"clearsky_night","symbol_confidence":"certain"},"details":{"probability_of_precipitation":0}},"next_1_hours":{"summary":{"symbol_code":"clearsky_night"},"details":{"precipitation_amount":0,"precipitation_amount_max":0,"precipitation_amount_min":0,"probability_of_precipitation":0,"probability_of_thunder":0}},"next_6_hours":{"summary":{"symbol_code":"clearsky_night"},"details":{"air_temperature_max":1.3,"air_temperature_min":-1.6,"precipitation_amount":0,"precipitation_amount_max":0,"precipitation_amount_min":0,"probability_of_precipitation":0}}}},{"time":"2022-03-04T17:00:00Z","data":{"instant":{"details":{"air_pressure_at_sea_level":1028.8,"air_temperature":1.3,"air_temperature_percentile_10":0.3,"air_temperature_percentile_90":2.3,"cloud_area_fraction":0.1,"cloud_area_fraction_high":0.1,"cloud_area_fraction_low":0,"cloud_area_fraction_medium":0,"dew_point_temperature":-4.2,"fog_area_fraction":0,"relative_humidity":74.5,"ultraviolet_index_clear_sky":0,"wind_from_direction":221.5,"wind_speed":2.2,"wind_speed_of_gust":3.5,"wind_speed_percentile_10":1.1,"wind_speed_percentile_90":2.2}},"next_12_hours":{"summary":{"symbol_code":"clearsky_night","symbol_confidence":"certain"},"details":{"probability_of_precipitation":0}},"next_1_hours":{"summary":{"symbol_code":"clearsky_night"},"details":{"precipitation_amount":0,"precipitation_amount_max":0,"precipitation_amount_min":0,"probability_of_precipitation":0,"probability_of_thunder":0}},"next_6_hours":{"summary":{"symbol_code":"clearsky_night"},"details":{"air_temperature_max":0.4,"air_temperature_min":-1.9,"precipitation_amount":0,"precipitation_amount_max":0,"precipitation_amount_min":0,"probability_of_precipitation":0}}}},{"time":"2022-03-04T18:00:00Z","data":{"instant":{"details":{"air_pressure_at_sea_level":1028.7,"air_temperature":0.4,"air_temperature_percentile_10":-0.8,"air_temperature_percentile_90":1.1,"cloud_area_fraction":0,"cloud_area_fraction_high":0,"cloud_area_fraction_low":0,"cloud_area_fraction_medium":0,"dew_point_temperature":-4.2,"fog_area_fraction":0,"relative_humidity":77.8,"ultraviolet_index_clear_sky":0,"wind_from_direction":216.6,"wind_speed":2.2,"wind_speed_of_gust":3.8,"wind_speed_percentile_10":1.4,"wind_speed_percentile_90":2.4}},"next_12_hours":{"summary":{"symbol_code":"clearsky_night","symbol_confidence":"certain"},"details":{"probability_of_precipitation":0}},"next_1_hours":{"summary":{"symbol_code":"clearsky_night"},"details":{"precipitation_amount":0,"precipitation_amount_max":0,"precipitation_amount_min":0,"probability_of_precipitation":0,"probability_of_thunder":0}},"next_6_hours":{"summary":{"symbol_code":"clearsky_night"},"details":{"air_temperature_max":-0.3,"air_temperature_min":-2.2,"precipitation_amount":0,"precipitation_amount_max":0,"precipitation_amount_min":0,"probability_of_precipitation":0}}}},{"time":"2022-03-04T19:00:00Z","data":{"instant":{"details":{"air_pressure_at_sea_level":1028.6,"air_temperature":-0.3,"air_temperature_percentile_10":-1.3,"air_temperature_percentile_90":0.6,"cloud_area_fraction":0.4,"cloud_area_fraction_high":0.3,"cloud_area_fraction_low":0,"cloud_area_fraction_medium":0,"dew_point_temperature":-5.1,"fog_area_fraction":0,"relative_humidity":79.4,"ultraviolet_index_clear_sky":0,"wind_from_direction":212.3,"wind_speed":2,"wind_speed_of_gust":3.6,"wind_speed_percentile_10":1.5,"wind_speed_percentile_90":2.4}},"next_12_hours":{"summary":{"symbol_code":"clearsky_night","symbol_confidence":"certain"},"details":{"probability_of_precipitation":0}},"next_1_hours":{"summary":{"symbol_code":"clearsky_night"},"details":{"precipitation_amount":0,"precipitation_amount_max":0,"precipitation_amount_min":0,"probability_of_precipitation":0,"probability_of_thunder":0}},"next_6_hours":{"summary":{"symbol_code":"clearsky_night"},"details":{"air_temperature_max":-0.9,"air_temperature_min":-2.6,"precipitation_amount":0,"precipitation_amount_max":0,"precipitation_amount_min":0,"probability_of_precipitation":0}}}},{"time":"2022-03-04T20:00:00Z","data":{"instant":{"details":{"air_pressure_at_sea_level":1028.7,"air_temperature":-0.9,"air_temperature_percentile_10":-2,"air_temperature_percentile_90":0.2,"cloud_area_fraction":0,"cloud_area_fraction_high":0,"cloud_area_fraction_low":0,"cloud_area_fraction_medium":0,"dew_point_temperature":-5.5,"fog_area_fraction":0,"relative_humidity":79.4,"ultraviolet_index_clear_sky":0,"wind_from_direction":215.3,"wind_speed":2.2,"wind_speed_of_gust":3.6,"wind_speed_percentile_10":1.4,"wind_speed_percentile_90":2.5}},"next_12_hours":{"summary":{"symbol_code":"clearsky_night","symbol_confidence":"certain"},"details":{"probability_of_precipitation":0}},"next_1_hours":{"summary":{"symbol_code":"clearsky_night"},"details":{"precipitation_amount":0,"precipitation_amount_max":0,"precipitation_amount_min":0,"probability_of_precipitation":0,"probability_of_thunder":0}},"next_6_hours":{"summary":{"symbol_code":"clearsky_night"},"details":{"air_temperature_max":-1.2,"air_temperature_min":-2.9,"precipitation_amount":0,"precipitation_amount_max":0,"precipitation_amount_min":0,"probability_of_precipitation":0}}}},{"time":"2022-03-04T21:00:00Z","data":{"instant":{"details":{"air_pressure_at_sea_level":1028.6,"air_temperature":-1.2,"air_temperature_percentile_10":-2.5,"air_temperature_percentile_90":-0.2,"cloud_area_fraction":0,"cloud_area_fraction_high":0,"cloud_area_fraction_low":0,"cloud_area_fraction_medium":0,"dew_point_temperature":-5.4,"fog_area_fraction":0,"relative_humidity":80.2,"ultraviolet_index_clear_sky":0,"wind_from_direction":218.2,"wind_speed":2.3,"wind_speed_of_gust":3.8,"wind_speed_percentile_10":1.3,"wind_speed_percentile_90":2.4}},"next_12_hours":{"summary":{"symbol_code":"clearsky_day","symbol_confidence":"certain"},"details":{"probability_of_precipitation":0}},"next_1_hours":{"summary":{"symbol_code":"clearsky_night"},"details":{"precipitation_amount":0,"precipitation_amount_max":0,"precipitation_amount_min":0,"probability_of_precipitation":0,"probability_of_thunder":0}},"next_6_hours":{"summary":{"symbol_code":"clearsky_night"},"details":{"air_temperature_max":-1.6,"air_temperature_min":-3.2,"precipitation_amount":0,"precipitation_amount_max":0,"precipitation_amount_min":0,"probability_of_precipitation":0}}}},{"time":"2022-03-04T22:00:00Z","data":{"instant":{"details":{"air_pressure_at_sea_level":1028.5,"air_temperature":-1.6,"air_temperature_percentile_10":-2.7,"air_temperature_percentile_90":-0.6,"cloud_area_fraction":0,"cloud_area_fraction_high":0,"cloud_area_fraction_low":0,"cloud_area_fraction_medium":0,"dew_point_temperature":-5.2,"fog_area_fraction":0,"relative_humidity":83.9,"ultraviolet_index_clear_sky":0,"wind_from_direction":216.9,"wind_speed":2.2,"wind_speed_of_gust":3.7,"wind_speed_percentile_10":1.6,"wind_speed_percentile_90":2.3}},"next_12_hours":{"summary":{"symbol_code":"clearsky_day","symbol_confidence":"certain"},"details":{"probability_of_precipitation":0}},"next_1_hours":{"summary":{"symbol_code":"clearsky_night"},"details":{"precipitation_amount":0,"precipitation_amount_max":0,"precipitation_amount_min":0,"probability_of_precipitation":0,"probability_of_thunder":0}},"next_6_hours":{"summary":{"symbol_code":"clearsky_night"},"details":{"air_temperature_max":-1.9,"air_temperature_min":-3.5,"precipitation_amount":0,"precipitation_amount_max":0,"precipitation_amount_min":0,"probability_of_precipitation":0}}}},{"time":"2022-03-04T23:00:00Z","data":{"instant":{"details":{"air_pressure_at_sea_level":1028.4,"air_temperature":-1.9,"air_temperature_percentile_10":-3,"air_temperature_percentile_90":-0.9,"cloud_area_fraction":0.1,"cloud_area_fraction_high":0,"cloud_area_fraction_low":0,"cloud_area_fraction_medium":0,"dew_point_temperature":-5.2,"fog_area_fraction":0,"relative_humidity":85.8,"ultraviolet_index_clear_sky":0,"wind_from_direction":221.7,"wind_speed":2.3,"wind_speed_of_gust":3.8,"wind_speed_percentile_10":1.8,"wind_speed_percentile_90":2.6}},"next_12_hours":{"summary":{"symbol_code":"clearsky_day","symbol_confidence":"certain"},"details":{"probability_of_precipitation":0}},"next_1_hours":{"summary":{"symbol_code":"clearsky_night"},"details":{"precipitation_amount":0,"precipitation_amount_max":0,"precipitation_amount_min":0,"probability_of_precipitation":0,"probability_of_thunder":0}},"next_6_hours":{"summary":{"symbol_code":"clearsky_night"},"details":{"air_temperature_max":-2.2,"air_temperature_min":-3.7,"precipitation_amount":0,"precipitation_amount_max":0,"precipitation_amount_min":0,"probability_of_precipitation":0}}}},{"time":"2022-03-05T00:00:00Z","data":{"instant":{"details":{"air_pressure_at_sea_level":1028.2,"air_temperature":-2.2,"air_temperature_percentile_10":-3.4,"air_temperature_percentile_90":-1.3,"cloud_area_fraction":0,"cloud_area_fraction_high":0,"cloud_area_fraction_low":0,"cloud_area_fraction_medium":0,"dew_point_temperature":-5.2,"fog_area_fraction":0,"relative_humidity":86.7,"ultraviolet_index_clear_sky":0,"wind_from_direction":220.6,"wind_speed":2.5,"wind_speed_of_gust":4.2,"wind_speed_percentile_10":2.1,"wind_speed_percentile_90":2.7}},"next_12_hours":{"summary":{"symbol_code":"clearsky_day","symbol_confidence":"certain"},"details":{"probability_of_precipitation":0}},"next_1_hours":{"summary":{"symbol_code":"clearsky_night"},"details":{"precipitation_amount":0,"precipitation_amount_max":0,"precipitation_amount_min":0,"probability_of_precipitation":0,"probability_of_thunder":0}},"next_6_hours":{"summary":{"symbol_code":"clearsky_night"},"details":{"air_temperature_max":-2.6,"air_temperature_min":-3.8,"precipitation_amount":0,"precipitation_amount_max":0,"precipitation_amount_min":0,"probability_of_precipitation":0}}}},{"time":"2022-03-05T01:00:00Z","data":{"instant":{"details":{"air_pressure_at_sea_level":1028.1,"air_temperature":-2.6,"air_temperature_percentile_10":-3.6,"air_temperature_percentile_90":-1.5,"cloud_area_fraction":0,"cloud_area_fraction_high":0,"cloud_area_fraction_low":0,"cloud_area_fraction_medium":0,"dew_point_temperature":-5.1,"fog_area_fraction":0,"relative_humidity":88,"ultraviolet_index_clear_sky":0,"wind_from_direction":221.1,"wind_speed":2.6,"wind_speed_of_gust":4.4,"wind_speed_percentile_10":2.2,"wind_speed_percentile_90":3}},"next_12_hours":{"summary":{"symbol_code":"clearsky_day","symbol_confidence":"certain"},"details":{"probability_of_precipitation":0}},"next_1_hours":{"summary":{"symbol_code":"clearsky_night"},"details":{"precipitation_amount":0,"precipitation_amount_max":0,"precipitation_amount_min":0,"probability_of_precipitation":0,"probability_of_thunder":0}},"next_6_hours":{"summary":{"symbol_code":"clearsky_night"},"details":{"air_temperature_max":-2.9,"air_temperature_min":-3.8,"precipitation_amount":0,"precipitation_amount_max":0,"precipitation_amount_min":0,"probability_of_precipitation":0}}}},{"time":"2022-03-05T02:00:00Z","data":{"instant":{"details":{"air_pressure_at_sea_level":1027.9,"air_temperature":-2.9,"air_temperature_percentile_10":-3.8,"air_temperature_percentile_90":-1.8,"cloud_area_fraction":4.5,"cloud_area_fraction_high":4.5,"cloud_area_fraction_low":0,"cloud_area_fraction_medium":0,"dew_point_temperature":-5.3,"fog_area_fraction":0,"relative_humidity":88.3,"ultraviolet_index_clear_sky":0,"wind_from_direction":220,"wind_speed":2.9,"wind_speed_of_gust":4.9,"wind_speed_percentile_10":2.2,"wind_speed_percentile_90":3.1}},"next_12_hours":{"summary":{"symbol_code":"clearsky_day","symbol_confidence":"certain"},"details":{"probability_of_precipitation":0}},"next_1_hours":{"summary":{"symbol_code":"clearsky_night"},"details":{"precipitation_amount":0,"precipitation_amount_max":0,"precipitation_amount_min":0,"probability_of_precipitation":0,"probability_of_thunder":0}},"next_6_hours":{"summary":{"symbol_code":"clearsky_night"},"details":{"air_temperature_max":-1.4,"air_temperature_min":-3.8,"precipitation_amount":0,"precipitation_amount_max":0,"precipitation_amount_min":0,"probability_of_precipitation":0}}}},{"time":"2022-03-05T03:00:00Z","data":{"instant":{"details":{"air_pressure_at_sea_level":1027.7,"air_temperature":-3.2,"air_temperature_percentile_10":-4.2,"air_temperature_percentile_90":-2.1,"cloud_area_fraction":21,"cloud_area_fraction_high":21,"cloud_area_fraction_low":0,"cloud_area_fraction_medium":0,"dew_point_temperature":-5.4,"fog_area_fraction":0,"relative_humidity":88.5,"ultraviolet_index_clear_sky":0,"wind_from_direction":224.2,"wind_speed":2.9,"wind_speed_of_gust":5,"wind_speed_percentile_10":2.3,"wind_speed_percentile_90":3.2}},"next_12_hours":{"summary":{"symbol_code":"clearsky_day","symbol_confidence":"certain"},"details":{"probability_of_precipitation":0}},"next_1_hours":{"summary":{"symbol_code":"fair_night"},"details":{"precipitation_amount":0,"precipitation_amount_max":0,"precipitation_amount_min":0,"probability_of_precipitation":0,"probability_of_thunder":0}},"next_6_hours":{"summary":{"symbol_code":"clearsky_day"},"details":{"air_temperature_max":0.4,"air_temperature_min":-3.8,"precipitation_amount":0,"precipitation_amount_max":0,"precipitation_amount_min":0,"probability_of_precipitation":0}}}},{"time":"2022-03-05T04:00:00Z","data":{"instant":{"details":{"air_pressure_at_sea_level":1027.6,"air_temperature":-3.5,"air_temperature_percentile_10":-4.6,"air_temperature_percentile_90":-2.3,"cloud_area_fraction":8.2,"cloud_area_fraction_high":8.2,"cloud_area_fraction_low":0,"cloud_area_fraction_medium":0,"dew_point_temperature":-5.6,"fog_area_fraction":0,"relative_humidity":88.9,"ultraviolet_index_clear_sky":0,"wind_from_direction":225.8,"wind_speed":2.9,"wind_speed_of_gust":5,"wind_speed_percentile_10":2.5,"wind_speed_percentile_90":3.3}},"next_12_hours":{"summary":{"symbol_code":"clearsky_day","symbol_confidence":"certain"},"details":{"probability_of_precipitation":0}},"next_1_hours":{"summary":{"symbol_code":"clearsky_night"},"details":{"precipitation_amount":0,"precipitation_amount_max":0,"precipitation_amount_min":0,"probability_of_precipitation":0,"probability_of_thunder":0}},"next_6_hours":{"summary":{"symbol_code":"clearsky_day"},"details":{"air_temperature_max":1.9,"air_temperature_min":-3.8,"precipitation_amount":0,"precipitation_amount_max":0,"precipitation_amount_min":0,"probability_of_precipitation":0}}}},{"time":"2022-03-05T05:00:00Z","data":{"instant":{"details":{"air_pressure_at_sea_level":1027.3,"air_temperature":-3.7,"air_temperature_percentile_10":-5,"air_temperature_percentile_90":-2.5,"cloud_area_fraction":8.2,"cloud_area_fraction_high":8.2,"cloud_area_fraction_low":0,"cloud_area_fraction_medium":0,"dew_point_temperature":-5.9,"fog_area_fraction":0,"relative_humidity":88.2,"ultraviolet_index_clear_sky":0,"wind_from_direction":225.5,"wind_speed":3.2,"wind_speed_of_gust":5.5,"wind_speed_percentile_10":2.7,"wind_speed_percentile_90":3.6}},"next_12_hours":{"summary":{"symbol_code":"clearsky_day","symbol_confidence":"certain"},"details":{"probability_of_precipitation":0}},"next_1_hours":{"summary":{"symbol_code":"clearsky_night"},"details":{"precipitation_amount":0,"precipitation_amount_max":0,"precipitation_amount_min":0,"probability_of_precipitation":0,"probability_of_thunder":0}},"next_6_hours":{"summary":{"symbol_code":"clearsky_day"},"details":{"air_temperature_max":2.8,"air_temperature_min":-3.8,"precipitation_amount":0,"precipitation_amount_max":0,"precipitation_amount_min":0,"probability_of_precipitation":0}}}},{"time":"2022-03-05T06:00:00Z","data":{"instant":{"details":{"air_pressure_at_sea_level":1027.1,"air_temperature":-3.8,"air_temperature_percentile_10":-5,"air_temperature_percentile_90":-2.7,"cloud_area_fraction":5.3,"cloud_area_fraction_high":5.3,"cloud_area_fraction_low":0,"cloud_area_fraction_medium":0,"dew_point_temperature":-6.1,"fog_area_fraction":0,"relative_humidity":87.8,"ultraviolet_index_clear_sky":0,"wind_from_direction":224.6,"wind_speed":3.4,"wind_speed_of_gust":5.8,"wind_speed_percentile_10":2.9,"wind_speed_percentile_90":3.8}},"next_12_hours":{"summary":{"symbol_code":"clearsky_day","symbol_confidence":"certain"},"details":{"probability_of_precipitation":0}},"next_1_hours":{"summary":{"symbol_code":"clearsky_day"},"details":{"precipitation_amount":0,"precipitation_amount_max":0,"precipitation_amount_min":0,"probability_of_precipitation":0,"probability_of_thunder":0}},"next_6_hours":{"summary":{"symbol_code":"clearsky_day"},"details":{"air_temperature_max":3.6,"air_temperature_min":-3.1,"precipitation_amount":0,"precipitation_amount_max":0,"precipitation_amount_min":0,"probability_of_precipitation":0}}}},{"time":"2022-03-05T07:00:00Z","data":{"instant":{"details":{"air_pressure_at_sea_level":1027,"air_temperature":-3.1,"air_temperature_percentile_10":-4.1,"air_temperature_percentile_90":-2,"cloud_area_fraction":0.4,"cloud_area_fraction_high":0.4,"cloud_area_fraction_low":0,"cloud_area_fraction_medium":0,"dew_point_temperature":-5.8,"fog_area_fraction":0,"relative_humidity":85.5,"ultraviolet_index_clear_sky":0.2,"wind_from_direction":228.4,"wind_speed":3.4,"wind_speed_of_gust":6.3,"wind_speed_percentile_10":2.8,"wind_speed_percentile_90":3.8}},"next_1_hours":{"summary":{"symbol_code":"clearsky_day"},"details":{"precipitation_amount":0,"precipitation_amount_max":0,"precipitation_amount_min":0,"probability_of_precipitation":0,"probability_of_thunder":0}},"next_6_hours":{"summary":{"symbol_code":"clearsky_day"},"details":{"air_temperature_max":3.8,"air_temperature_min":-1.4,"precipitation_amount":0,"precipitation_amount_max":0,"precipitation_amount_min":0,"probability_of_precipitation":0}}}},{"time":"2022-03-05T08:00:00Z","data":{"instant":{"details":{"air_pressure_at_sea_level":1026.9,"air_temperature":-1.4,"air_temperature_percentile_10":-2.5,"air_temperature_percentile_90":-0.5,"cloud_area_fraction":0,"cloud_area_fraction_high":0,"cloud_area_fraction_low":0,"cloud_area_fraction_medium":0,"dew_point_temperature":-5.3,"fog_area_fraction":0,"relative_humidity":79.2,"ultraviolet_index_clear_sky":0.5,"wind_from_direction":230.7,"wind_speed":3.4,"wind_speed_of_gust":6.4,"wind_speed_percentile_10":3,"wind_speed_percentile_90":3.9}},"next_1_hours":{"summary":{"symbol_code":"clearsky_day"},"details":{"precipitation_amount":0,"precipitation_amount_max":0,"precipitation_amount_min":0,"probability_of_precipitation":0,"probability_of_thunder":0}},"next_6_hours":{"summary":{"symbol_code":"clearsky_day"},"details":{"air_temperature_max":3.9,"air_temperature_min":0.4,"precipitation_amount":0,"precipitation_amount_max":0,"precipitation_amount_min":0,"probability_of_precipitation":0}}}},{"time":"2022-03-05T09:00:00Z","data":{"instant":{"details":{"air_pressure_at_sea_level":1026.8,"air_temperature":0.4,"air_temperature_percentile_10":-0.5,"air_temperature_percentile_90":1.4,"cloud_area_fraction":0.1,"cloud_area_fraction_high":0.1,"cloud_area_fraction_low":0,"cloud_area_fraction_medium":0,"dew_point_temperature":-4.9,"fog_area_fraction":0,"relative_humidity":72.2,"ultraviolet_index_clear_sky":0.9,"wind_from_direction":234.4,"wind_speed":3.6,"wind_speed_of_gust":6.9,"wind_speed_percentile_10":3.2,"wind_speed_percentile_90":4.1}},"next_1_hours":{"summary":{"symbol_code":"clearsky_day"},"details":{"precipitation_amount":0,"precipitation_amount_max":0,"precipitation_amount_min":0,"probability_of_precipitation":0,"probability_of_thunder":0}},"next_6_hours":{"summary":{"symbol_code":"clearsky_day"},"details":{"air_temperature_max":3.9,"air_temperature_min":1.9,"precipitation_amount":0,"precipitation_amount_max":0,"precipitation_amount_min":0,"probability_of_precipitation":0}}}},{"time":"2022-03-05T10:00:00Z","data":{"instant":{"details":{"air_pressure_at_sea_level":1026.5,"air_temperature":1.9,"air_temperature_percentile_10":1.2,"air_temperature_percentile_90":3,"cloud_area_fraction":0.9,"cloud_area_fraction_high":0.9,"cloud_area_fraction_low":0,"cloud_area_fraction_medium":0,"dew_point_temperature":-4.3,"fog_area_fraction":0,"relative_humidity":68,"ultraviolet_index_clear_sky":1.1,"wind_from_direction":235.4,"wind_speed":4,"wind_speed_of_gust":7.6,"wind_speed_percentile_10":3.6,"wind_speed_percentile_90":4.6}},"next_1_hours":{"summary":{"symbol_code":"clearsky_day"},"details":{"precipitation_amount":0,"precipitation_amount_max":0,"precipitation_amount_min":0,"probability_of_precipitation":0,"probability_of_thunder":0}},"next_6_hours":{"summary":{"symbol_code":"clearsky_day"},"details":{"air_temperature_max":3.9,"air_temperature_min":2.8,"precipitation_amount":0,"precipitation_amount_max":0,"precipitation_amount_min":0,"probability_of_precipitation":0}}}},{"time":"2022-03-05T11:00:00Z","data":{"instant":{"details":{"air_pressure_at_sea_level":1025.9,"air_temperature":2.8,"air_temperature_percentile_10":2.2,"air_temperature_percentile_90":4,"cloud_area_fraction":22.9,"cloud_area_fraction_high":22.9,"cloud_area_fraction_low":0,"cloud_area_fraction_medium":0,"dew_point_temperature":-3.8,"fog_area_fraction":0,"relative_humidity":65.3,"ultraviolet_index_clear_sky":1.2,"wind_from_direction":233.9,"wind_speed":4.1,"wind_speed_of_gust":8,"wind_speed_percentile_10":3.9,"wind_speed_percentile_90":4.8}},"next_1_hours":{"summary":{"symbol_code":"fair_day"},"details":{"precipitation_amount":0,"precipitation_amount_max":0,"precipitation_amount_min":0,"probability_of_precipitation":0,"probability_of_thunder":0}},"next_6_hours":{"summary":{"symbol_code":"clearsky_day"},"details":{"air_temperature_max":3.9,"air_temperature_min":1.7,"precipitation_amount":0,"precipitation_amount_max":0,"precipitation_amount_min":0,"probability_of_precipitation":0}}}},{"time":"2022-03-05T12:00:00Z","data":{"instant":{"details":{"air_pressure_at_sea_level":1025.2,"air_temperature":3.6,"air_temperature_percentile_10":2.9,"air_temperature_percentile_90":5,"cloud_area_fraction":11.7,"cloud_area_fraction_high":11.7,"cloud_area_fraction_low":0.1,"cloud_area_fraction_medium":0,"dew_point_temperature":-3.6,"fog_area_fraction":0,"relative_humidity":63,"ultraviolet_index_clear_sky":1.1,"wind_from_direction":240.8,"wind_speed":4.4,"wind_speed_of_gust":8.6,"wind_speed_percentile_10":4.1,"wind_speed_percentile_90":4.9}},"next_12_hours":{"summary":{"symbol_code":"clearsky_day","symbol_confidence":"certain"},"details":{"probability_of_precipitation":5.9}},"next_1_hours":{"summary":{"symbol_code":"clearsky_day"},"details":{"precipitation_amount":0,"precipitation_amount_max":0,"precipitation_amount_min":0,"probability_of_precipitation":0,"probability_of_thunder":0}},"next_6_hours":{"summary":{"symbol_code":"fair_day"},"details":{"air_temperature_max":3.9,"air_temperature_min":0.9,"precipitation_amount":0,"precipitation_amount_max":0,"precipitation_amount_min":0,"probability_of_precipitation":0}}}},{"time":"2022-03-05T13:00:00Z","data":{"instant":{"details":{"air_pressure_at_sea_level":1024.6,"air_temperature":3.8,"air_temperature_percentile_10":3.2,"air_temperature_percentile_90":5.7,"cloud_area_fraction":0.2,"cloud_area_fraction_high":0.1,"cloud_area_fraction_low":0,"cloud_area_fraction_medium":0,"dew_point_temperature":-3.2,"fog_area_fraction":0,"relative_humidity":63.2,"ultraviolet_index_clear_sky":0.8,"wind_from_direction":242.5,"wind_speed":4.7,"wind_speed_of_gust":9,"wind_speed_percentile_10":3.9,"wind_speed_percentile_90":4.8}},"next_1_hours":{"summary":{"symbol_code":"clearsky_day"},"details":{"precipitation_amount":0,"precipitation_amount_max":0,"precipitation_amount_min":0,"probability_of_precipitation":0,"probability_of_thunder":0}}}},{"time":"2022-03-05T14:00:00Z","data":{"instant":{"details":{"air_pressure_at_sea_level":1024,"air_temperature":3.9,"air_temperature_percentile_10":3.3,"air_temperature_percentile_90":6.1,"cloud_area_fraction":0,"cloud_area_fraction_high":0,"cloud_area_fraction_low":0,"cloud_area_fraction_medium":0,"dew_point_temperature":-2.7,"fog_area_fraction":0,"relative_humidity":65.7,"ultraviolet_index_clear_sky":0.5,"wind_from_direction":238.9,"wind_speed":4.8,"wind_speed_of_gust":9.1,"wind_speed_percentile_10":3.3,"wind_speed_percentile_90":4.9}},"next_1_hours":{"summary":{"symbol_code":"clearsky_day"},"details":{"precipitation_amount":0,"precipitation_amount_max":0,"precipitation_amount_min":0,"probability_of_precipitation":0,"probability_of_thunder":0}}}},{"time":"2022-03-05T15:00:00Z","data":{"instant":{"details":{"air_pressure_at_sea_level":1023.4,"air_temperature":3.6,"air_temperature_percentile_10":2.9,"air_temperature_percentile_90":6,"cloud_area_fraction":0,"cloud_area_fraction_high":0,"cloud_area_fraction_low":0,"cloud_area_fraction_medium":0,"dew_point_temperature":-2,"fog_area_fraction":0,"relative_humidity":70.3,"ultraviolet_index_clear_sky":0.2,"wind_from_direction":237.7,"wind_speed":4.5,"wind_speed_of_gust":9,"wind_speed_percentile_10":2.7,"wind_speed_percentile_90":4.8}},"next_1_hours":{"summary":{"symbol_code":"clearsky_day"},"details":{"precipitation_amount":0,"precipitation_amount_max":0,"precipitation_amount_min":0,"probability_of_precipitation":0,"probability_of_thunder":0}}}},{"time":"2022-03-05T16:00:00Z","data":{"instant":{"details":{"air_pressure_at_sea_level":1023,"air_temperature":2.9,"air_temperature_percentile_10":2.2,"air_temperature_percentile_90":5.1,"cloud_area_fraction":1.2,"cloud_area_fraction_high":1.3,"cloud_area_fraction_low":0,"cloud_area_fraction_medium":0,"dew_point_temperature":-1.6,"fog_area_fraction":0,"relative_humidity":76,"ultraviolet_index_clear_sky":0,"wind_from_direction":237.6,"wind_speed":3.9,"wind_speed_of_gust":8.4,"wind_speed_percentile_10":2.3,"wind_speed_percentile_90":4.4}},"next_1_hours":{"summary":{"symbol_code":"clearsky_night"},"details":{"precipitation_amount":0,"precipitation_amount_max":0,"precipitation_amount_min":0,"probability_of_precipitation":0,"probability_of_thunder":0}}}},{"time":"2022-03-05T17:00:00Z","data":{"instant":{"details":{"air_pressure_at_sea_level":1022.7,"air_temperature":1.7,"air_temperature_percentile_10":1,"air_temperature_percentile_90":3.5,"cloud_area_fraction":56.1,"cloud_area_fraction_high":56.1,"cloud_area_fraction_low":0,"cloud_area_fraction_medium":0,"dew_point_temperature":-1.6,"fog_area_fraction":0,"relative_humidity":82.7,"ultraviolet_index_clear_sky":0,"wind_from_direction":231.4,"wind_speed":3.3,"wind_speed_of_gust":6.8,"wind_speed_percentile_10":2.3,"wind_speed_percentile_90":3.4}},"next_1_hours":{"summary":{"symbol_code":"partlycloudy_night"},"details":{"precipitation_amount":0,"precipitation_amount_max":0,"precipitation_amount_min":0,"probability_of_precipitation":0,"probability_of_thunder":0}}}},{"time":"2022-03-05T18:00:00Z","data":{"instant":{"details":{"air_pressure_at_sea_level":1022.5,"air_temperature":0.9,"air_temperature_percentile_10":0.2,"air_temperature_percentile_90":2.6,"cloud_area_fraction":42.1,"cloud_area_fraction_high":42.2,"cloud_area_fraction_low":0,"cloud_area_fraction_medium":0,"dew_point_temperature":-2,"fog_area_fraction":0,"relative_humidity":85.5,"ultraviolet_index_clear_sky":0,"wind_from_direction":238.1,"wind_speed":3.4,"wind_speed_of_gust":5.8,"wind_speed_percentile_10":2.6,"wind_speed_percentile_90":3.9}},"next_12_hours":{"summary":{"symbol_code":"clearsky_night","symbol_confidence":"certain"},"details":{"probability_of_precipitation":3.9}},"next_6_hours":{"summary":{"symbol_code":"clearsky_night"},"details":{"air_temperature_max":0.3,"air_temperature_min":-1,"precipitation_amount":0,"precipitation_amount_max":0,"precipitation_amount_min":0,"probability_of_precipitation":5.9}}}},{"time":"2022-03-06T00:00:00Z","data":{"instant":{"details":{"air_pressure_at_sea_level":1021.2,"air_temperature":-1,"air_temperature_percentile_10":-2,"air_temperature_percentile_90":-0.6,"cloud_area_fraction":0,"cloud_area_fraction_high":0,"cloud_area_fraction_low":0,"cloud_area_fraction_medium":0,"dew_point_temperature":-3.7,"relative_humidity":83.5,"wind_from_direction":294.1,"wind_speed":2.4,"wind_speed_percentile_10":1.7,"wind_speed_percentile_90":2.7}},"next_12_hours":{"summary":{"symbol_code":"fair_day","symbol_confidence":"somewhat certain"},"details":{"probability_of_precipitation":5.9}},"next_6_hours":{"summary":{"symbol_code":"clearsky_night"},"details":{"air_temperature_max":-0.8,"air_temperature_min":-1.8,"precipitation_amount":0,"precipitation_amount_max":0,"precipitation_amount_min":0,"probability_of_precipitation":3.9}}}},{"time":"2022-03-06T06:00:00Z","data":{"instant":{"details":{"air_pressure_at_sea_level":1019.3,"air_temperature":-1.4,"air_temperature_percentile_10":-2,"air_temperature_percentile_90":-0.2,"cloud_area_fraction":0,"cloud_area_fraction_high":0,"cloud_area_fraction_low":0,"cloud_area_fraction_medium":0,"dew_point_temperature":-5.2,"relative_humidity":77.7,"wind_from_direction":287.3,"wind_speed":3,"wind_speed_percentile_10":2.6,"wind_speed_percentile_90":3.7}},"next_12_hours":{"summary":{"symbol_code":"partlycloudy_day","symbol_confidence":"somewhat certain"},"details":{"probability_of_precipitation":19.6}},"next_6_hours":{"summary":{"symbol_code":"fair_day"},"details":{"air_temperature_max":6.4,"air_temperature_min":-2.1,"precipitation_amount":0,"precipitation_amount_max":0,"precipitation_amount_min":0,"probability_of_precipitation":5.9}}}},{"time":"2022-03-06T12:00:00Z","data":{"instant":{"details":{"air_pressure_at_sea_level":1015.4,"air_temperature":6.4,"air_temperature_percentile_10":5.9,"air_temperature_percentile_90":7,"cloud_area_fraction":18,"cloud_area_fraction_high":0,"cloud_area_fraction_low":0,"cloud_area_fraction_medium":16.4,"dew_point_temperature":-5.2,"relative_humidity":44.6,"wind_from_direction":311.5,"wind_speed":4.4,"wind_speed_percentile_10":3.3,"wind_speed_percentile_90":5.4}},"next_12_hours":{"summary":{"symbol_code":"partlycloudy_day","symbol_confidence":"somewhat certain"},"details":{"probability_of_precipitation":25.5}},"next_6_hours":{"summary":{"symbol_code":"partlycloudy_day"},"details":{"air_temperature_max":6.3,"air_temperature_min":2.5,"precipitation_amount":0,"precipitation_amount_max":0,"precipitation_amount_min":0,"probability_of_precipitation":23.5}}}},{"time":"2022-03-06T18:00:00Z","data":{"instant":{"details":{"air_pressure_at_sea_level":1014.2,"air_temperature":2.5,"air_temperature_percentile_10":1.3,"air_temperature_percentile_90":3.6,"cloud_area_fraction":74.2,"cloud_area_fraction_high":0,"cloud_area_fraction_low":19.1,"cloud_area_fraction_medium":53.9,"dew_point_temperature":-2.9,"relative_humidity":70.1,"wind_from_direction":301.7,"wind_speed":4,"wind_speed_percentile_10":3,"wind_speed_percentile_90":5.2}},"next_12_hours":{"summary":{"symbol_code":"cloudy","symbol_confidence":"somewhat certain"},"details":{"probability_of_precipitation":15.7}},"next_6_hours":{"summary":{"symbol_code":"partlycloudy_night"},"details":{"air_temperature_max":2.8,"air_temperature_min":1.3,"precipitation_amount":0,"precipitation_amount_max":0,"precipitation_amount_min":0,"probability_of_precipitation":17.6}}}},{"time":"2022-03-07T00:00:00Z","data":{"instant":{"details":{"air_pressure_at_sea_level":1017,"air_temperature":1.3,"air_temperature_percentile_10":0,"air_temperature_percentile_90":2.3,"cloud_area_fraction":53.1,"cloud_area_fraction_high":0,"cloud_area_fraction_low":46.1,"cloud_area_fraction_medium":0,"dew_point_temperature":-1.7,"relative_humidity":82.5,"wind_from_direction":348,"wind_speed":4,"wind_speed_percentile_10":3.1,"wind_speed_percentile_90":5.7}},"next_12_hours":{"summary":{"symbol_code":"cloudy","symbol_confidence":"certain"},"details":{"probability_of_precipitation":9.8}},"next_6_hours":{"summary":{"symbol_code":"cloudy"},"details":{"air_temperature_max":1.1,"air_temperature_min":-0.1,"precipitation_amount":0,"precipitation_amount_max":0,"precipitation_amount_min":0,"probability_of_precipitation":5.9}}}},{"time":"2022-03-07T06:00:00Z","data":{"instant":{"details":{"air_pressure_at_sea_level":1020.1,"air_temperature":0,"air_temperature_percentile_10":-0.9,"air_temperature_percentile_90":0.7,"cloud_area_fraction":96.1,"cloud_area_fraction_high":0,"cloud_area_fraction_low":56.6,"cloud_area_fraction_medium":0,"dew_point_temperature":-1.9,"relative_humidity":89,"wind_from_direction":339.3,"wind_speed":3.7,"wind_speed_percentile_10":2.7,"wind_speed_percentile_90":4.7}},"next_12_hours":{"summary":{"symbol_code":"cloudy","symbol_confidence":"somewhat certain"},"details":{"probability_of_precipitation":13.7}},"next_6_hours":{"summary":{"symbol_code":"cloudy"},"details":{"air_temperature_max":2.9,"air_temperature_min":-0.3,"precipitation_amount":0,"precipitation_amount_max":0,"precipitation_amount_min":0,"probability_of_precipitation":13.7}}}},{"time":"2022-03-07T12:00:00Z","data":{"instant":{"details":{"air_pressure_at_sea_level":1023,"air_temperature":2.7,"air_temperature_percentile_10":0,"air_temperature_percentile_90":5.5,"cloud_area_fraction":97.7,"cloud_area_fraction_high":0,"cloud_area_fraction_low":87.1,"cloud_area_fraction_medium":0,"dew_point_temperature":-3.9,"relative_humidity":63.5,"wind_from_direction":357.4,"wind_speed":4.5,"wind_speed_percentile_10":2.7,"wind_speed_percentile_90":6.4}},"next_12_hours":{"summary":{"symbol_code":"cloudy","symbol_confidence":"certain"},"details":{"probability_of_precipitation":7.8}},"next_6_hours":{"summary":{"symbol_code":"cloudy"},"details":{"air_temperature_max":2.8,"air_temperature_min":-0.6,"precipitation_amount":0,"precipitation_amount_max":0,"precipitation_amount_min":0,"probability_of_precipitation":9.8}}}},{"time":"2022-03-07T18:00:00Z","data":{"instant":{"details":{"air_pressure_at_sea_level":1025.7,"air_temperature":-0.6,"air_temperature_percentile_10":-2.2,"air_temperature_percentile_90":1.5,"cloud_area_fraction":98.4,"cloud_area_fraction_high":0,"cloud_area_fraction_low":85.9,"cloud_area_fraction_medium":0,"dew_point_temperature":-4.1,"relative_humidity":78.6,"wind_from_direction":31.5,"wind_speed":3.1,"wind_speed_percentile_10":1.3,"wind_speed_percentile_90":4.7}},"next_12_hours":{"summary":{"symbol_code":"cloudy","symbol_confidence":"somewhat certain"},"details":{"probability_of_precipitation":5.9}},"next_6_hours":{"summary":{"symbol_code":"cloudy"},"details":{"air_temperature_max":-0.4,"air_temperature_min":-1.5,"precipitation_amount":0,"precipitation_amount_max":0,"precipitation_amount_min":0,"probability_of_precipitation":7.8}}}},{"time":"2022-03-08T00:00:00Z","data":{"instant":{"details":{"air_pressure_at_sea_level":1027.4,"air_temperature":-1,"air_temperature_percentile_10":-4.8,"air_temperature_percentile_90":0.3,"cloud_area_fraction":98.4,"cloud_area_fraction_high":8.6,"cloud_area_fraction_low":93,"cloud_area_fraction_medium":0,"dew_point_temperature":-4.2,"relative_humidity":81.4,"wind_from_direction":264.6,"wind_speed":1.5,"wind_speed_percentile_10":0.7,"wind_speed_percentile_90":3}},"next_12_hours":{"summary":{"symbol_code":"partlycloudy_day","symbol_confidence":"somewhat certain"},"details":{"probability_of_precipitation":5.9}},"next_6_hours":{"summary":{"symbol_code":"cloudy"},"details":{"air_temperature_max":-0.7,"air_temperature_min":-2.2,"precipitation_amount":0,"precipitation_amount_max":0,"precipitation_amount_min":0,"probability_of_precipitation":3.9}}}},{"time":"2022-03-08T06:00:00Z","data":{"instant":{"details":{"air_pressure_at_sea_level":1028.9,"air_temperature":-1.7,"air_temperature_percentile_10":-6.2,"air_temperature_percentile_90":-0.2,"cloud_area_fraction":98,"cloud_area_fraction_high":15.2,"cloud_area_fraction_low":77,"cloud_area_fraction_medium":0,"dew_point_temperature":-4.5,"relative_humidity":82.8,"wind_from_direction":77.1,"wind_speed":1.9,"wind_speed_percentile_10":0.9,"wind_speed_percentile_90":2.9}},"next_12_hours":{"summary":{"symbol_code":"partlycloudy_day","symbol_confidence":"certain"},"details":{"probability_of_precipitation":7.8}},"next_6_hours":{"summary":{"symbol_code":"partlycloudy_day"},"details":{"air_temperature_max":1,"air_temperature_min":-2.9,"precipitation_amount":0,"precipitation_amount_max":0,"precipitation_amount_min":0,"probability_of_precipitation":5.9}}}},{"time":"2022-03-08T12:00:00Z","data":{"instant":{"details":{"air_pressure_at_sea_level":1030.3,"air_temperature":1,"air_temperature_percentile_10":-2.5,"air_temperature_percentile_90":6,"cloud_area_fraction":84.4,"cloud_area_fraction_high":7.8,"cloud_area_fraction_low":61.7,"cloud_area_fraction_medium":0,"dew_point_temperature":-7,"relative_humidity":56.8,"wind_from_direction":231.4,"wind_speed":2,"wind_speed_percentile_10":1,"wind_speed_percentile_90":3.5}},"next_12_hours":{"summary":{"symbol_code":"cloudy","symbol_confidence":"certain"},"details":{"probability_of_precipitation":7.8}},"next_6_hours":{"summary":{"symbol_code":"partlycloudy_day"},"details":{"air_temperature_max":1.2,"air_temperature_min":-1.9,"precipitation_amount":0,"precipitation_amount_max":0,"precipitation_amount_min":0,"probability_of_precipitation":7.8}}}},{"time":"2022-03-08T18:00:00Z","data":{"instant":{"details":{"air_pressure_at_sea_level":1031.1,"air_temperature":-1.9,"air_temperature_percentile_10":-5.7,"air_temperature_percentile_90":1,"cloud_area_fraction":66.8,"cloud_area_fraction_high":2,"cloud_area_fraction_low":23.4,"cloud_area_fraction_medium":0,"dew_point_temperature":-6.3,"relative_humidity":74.5,"wind_from_direction":128.3,"wind_speed":2.3,"wind_speed_percentile_10":1.8,"wind_speed_percentile_90":3.2}},"next_12_hours":{"summary":{"symbol_code":"cloudy","symbol_confidence":"uncertain"},"details":{"probability_of_precipitation":5.9}},"next_6_hours":{"summary":{"symbol_code":"cloudy"},"details":{"air_temperature_max":-1,"air_temperature_min":-2.6,"precipitation_amount":0,"precipitation_amount_max":0,"precipitation_amount_min":0,"probability_of_precipitation":7.8}}}},{"time":"2022-03-09T00:00:00Z","data":{"instant":{"details":{"air_pressure_at_sea_level":1032.5,"air_temperature":-2.2,"air_temperature_percentile_10":-6.4,"air_temperature_percentile_90":-0.1,"cloud_area_fraction":93.7,"cloud_area_fraction_high":0,"cloud_area_fraction_low":90.6,"cloud_area_fraction_medium":0,"dew_point_temperature":-5.6,"relative_humidity":80.1,"wind_from_direction":173.6,"wind_speed":1.6,"wind_speed_percentile_10":0.7,"wind_speed_percentile_90":2.6}},"next_12_hours":{"summary":{"symbol_code":"clearsky_day","symbol_confidence":"somewhat certain"},"details":{"probability_of_precipitation":5.9}},"next_6_hours":{"summary":{"symbol_code":"cloudy"},"details":{"air_temperature_max":-2.9,"air_temperature_min":-3.7,"precipitation_amount":0,"precipitation_amount_max":0,"precipitation_amount_min":0,"probability_of_precipitation":5.9}}}},{"time":"2022-03-09T06:00:00Z","data":{"instant":{"details":{"air_pressure_at_sea_level":1033.3,"air_temperature":-3.3,"air_temperature_percentile_10":-6.7,"air_temperature_percentile_90":-0.1,"cloud_area_fraction":93.7,"cloud_area_fraction_high":0,"cloud_area_fraction_low":83.6,"cloud_area_fraction_medium":0,"dew_point_temperature":-6.7,"relative_humidity":80,"wind_from_direction":173,"wind_speed":2,"wind_speed_percentile_10":0.8,"wind_speed_percentile_90":3}},"next_12_hours":{"summary":{"symbol_code":"clearsky_day","symbol_confidence":"somewhat certain"},"details":{"probability_of_precipitation":5.9}},"next_6_hours":{"summary":{"symbol_code":"clearsky_day"},"details":{"air_temperature_max":2,"air_temperature_min":-4.8,"precipitation_amount":0,"precipitation_amount_max":0,"precipitation_amount_min":0,"probability_of_precipitation":7.8}}}},{"time":"2022-03-09T12:00:00Z","data":{"instant":{"details":{"air_pressure_at_sea_level":1033.7,"air_temperature":2,"air_temperature_percentile_10":-1.8,"air_temperature_percentile_90":4.8,"cloud_area_fraction":7.4,"cloud_area_fraction_high":0,"cloud_area_fraction_low":1.2,"cloud_area_fraction_medium":0,"dew_point_temperature":-8.5,"relative_humidity":50.1,"wind_from_direction":181.3,"wind_speed":2.3,"wind_speed_percentile_10":1.5,"wind_speed_percentile_90":3.8}},"next_12_hours":{"summary":{"symbol_code":"clearsky_day","symbol_confidence":"uncertain"},"details":{"probability_of_precipitation":5.9}},"next_6_hours":{"summary":{"symbol_code":"clearsky_day"},"details":{"air_temperature_max":2,"air_temperature_min":-2.2,"precipitation_amount":0,"precipitation_amount_max":0,"precipitation_amount_min":0,"probability_of_precipitation":7.8}}}},{"time":"2022-03-09T18:00:00Z","data":{"instant":{"details":{"air_pressure_at_sea_level":1034,"air_temperature":-2.2,"air_temperature_percentile_10":-4.7,"air_temperature_percentile_90":1.3,"cloud_area_fraction":0,"cloud_area_fraction_high":0,"cloud_area_fraction_low":0,"cloud_area_fraction_medium":0,"dew_point_temperature":-6.7,"relative_humidity":73.4,"wind_from_direction":214.1,"wind_speed":2.5,"wind_speed_percentile_10":1.7,"wind_speed_percentile_90":3.4}},"next_12_hours":{"summary":{"symbol_code":"clearsky_night","symbol_confidence":"uncertain"},"details":{"probability_of_precipitation":3.9}},"next_6_hours":{"summary":{"symbol_code":"clearsky_night"},"details":{"air_temperature_max":-1.6,"air_temperature_min":-3.7,"precipitation_amount":0,"precipitation_amount_max":0,"precipitation_amount_min":0,"probability_of_precipitation":7.8}}}},{"time":"2022-03-10T00:00:00Z","data":{"instant":{"details":{"air_pressure_at_sea_level":1035.5,"air_temperature":-3.7,"air_temperature_percentile_10":-6.2,"air_temperature_percentile_90":-0.3,"cloud_area_fraction":0,"cloud_area_fraction_high":0,"cloud_area_fraction_low":0,"cloud_area_fraction_medium":0,"dew_point_temperature":-5.8,"relative_humidity":87.3,"wind_from_direction":152.3,"wind_speed":1.5,"wind_speed_percentile_10":1,"wind_speed_percentile_90":2.5}},"next_12_hours":{"summary":{"symbol_code":"clearsky_day","symbol_confidence":"uncertain"},"details":{"probability_of_precipitation":3.9}},"next_6_hours":{"summary":{"symbol_code":"clearsky_night"},"details":{"air_temperature_max":-3.5,"air_temperature_min":-4.6,"precipitation_amount":0,"precipitation_amount_max":0,"precipitation_amount_min":0,"probability_of_precipitation":3.9}}}},{"time":"2022-03-10T06:00:00Z","data":{"instant":{"details":{"air_pressure_at_sea_level":1035.1,"air_temperature":-4.2,"air_temperature_percentile_10":-5.9,"air_temperature_percentile_90":-0.6,"cloud_area_fraction":0,"cloud_area_fraction_high":0,"cloud_area_fraction_low":0,"cloud_area_fraction_medium":0,"dew_point_temperature":-6.3,"relative_humidity":87.6,"wind_from_direction":228.6,"wind_speed":2,"wind_speed_percentile_10":1.1,"wind_speed_percentile_90":3}},"next_12_hours":{"summary":{"symbol_code":"clearsky_day","symbol_confidence":"uncertain"},"details":{"probability_of_precipitation":7.8}},"next_6_hours":{"summary":{"symbol_code":"clearsky_day"},"details":{"air_temperature_max":2.9,"air_temperature_min":-5.1,"precipitation_amount":0,"precipitation_amount_max":0,"precipitation_amount_min":0,"probability_of_precipitation":5.9}}}},{"time":"2022-03-10T12:00:00Z","data":{"instant":{"details":{"air_pressure_at_sea_level":1035.1,"air_temperature":2.9,"air_temperature_percentile_10":-2.3,"air_temperature_percentile_90":6.9,"cloud_area_fraction":1.6,"cloud_area_fraction_high":0,"cloud_area_fraction_low":0,"cloud_area_fraction_medium":0,"dew_point_temperature":-8.8,"relative_humidity":44.1,"wind_from_direction":194.3,"wind_speed":2.1,"wind_speed_percentile_10":1.8,"wind_speed_percentile_90":4.2}},"next_12_hours":{"summary":{"symbol_code":"clearsky_day","symbol_confidence":"somewhat certain"},"details":{"probability_of_precipitation":9.8}},"next_6_hours":{"summary":{"symbol_code":"clearsky_day"},"details":{"air_temperature_max":3.2,"air_temperature_min":-1.8,"precipitation_amount":0,"precipitation_amount_max":0,"precipitation_amount_min":0,"probability_of_precipitation":7.8}}}},{"time":"2022-03-10T18:00:00Z","data":{"instant":{"details":{"air_pressure_at_sea_level":1033.8,"air_temperature":-1.8,"air_temperature_percentile_10":-4.8,"air_temperature_percentile_90":0.8,"cloud_area_fraction":0,"cloud_area_fraction_high":0,"cloud_area_fraction_low":0,"cloud_area_fraction_medium":0,"dew_point_temperature":-6.2,"relative_humidity":73.8,"wind_from_direction":221.7,"wind_speed":2.8,"wind_speed_percentile_10":2,"wind_speed_percentile_90":3.6}},"next_12_hours":{"summary":{"symbol_code":"clearsky_night","symbol_confidence":"somewhat certain"},"details":{"probability_of_precipitation":5.9}},"next_6_hours":{"summary":{"symbol_code":"clearsky_night"},"details":{"air_temperature_max":-1.5,"air_temperature_min":-3.2,"precipitation_amount":0,"precipitation_amount_max":0,"precipitation_amount_min":0,"probability_of_precipitation":7.8}}}},{"time":"2022-03-11T00:00:00Z","data":{"instant":{"details":{"air_pressure_at_sea_level":1033.9,"air_temperature":-3.1,"air_temperature_percentile_10":-5.3,"air_temperature_percentile_90":-0.9,"cloud_area_fraction":0,"cloud_area_fraction_high":0,"cloud_area_fraction_low":0,"cloud_area_fraction_medium":0,"dew_point_temperature":-5.6,"relative_humidity":85,"wind_from_direction":192.4,"wind_speed":1.8,"wind_speed_percentile_10":1.2,"wind_speed_percentile_90":3}},"next_12_hours":{"summary":{"symbol_code":"clearsky_day","symbol_confidence":"uncertain"},"details":{"probability_of_precipitation":3.9}},"next_6_hours":{"summary":{"symbol_code":"clearsky_night"},"details":{"air_temperature_max":-3,"air_temperature_min":-4.3,"precipitation_amount":0,"precipitation_amount_max":0,"precipitation_amount_min":0,"probability_of_precipitation":3.9}}}},{"time":"2022-03-11T06:00:00Z","data":{"instant":{"details":{"air_pressure_at_sea_level":1033.6,"air_temperature":-3.6,"air_temperature_percentile_10":-6.2,"air_temperature_percentile_90":-1.4,"cloud_area_fraction":0,"cloud_area_fraction_high":0,"cloud_area_fraction_low":0,"cloud_area_fraction_medium":0,"dew_point_temperature":-5.7,"relative_humidity":87.3,"wind_from_direction":242.7,"wind_speed":2.2,"wind_speed_percentile_10":1.7,"wind_speed_percentile_90":3.5}},"next_12_hours":{"summary":{"symbol_code":"clearsky_day","symbol_confidence":"uncertain"},"details":{"probability_of_precipitation":9.8}},"next_6_hours":{"summary":{"symbol_code":"clearsky_day"},"details":{"air_temperature_max":3.7,"air_temperature_min":-4.7,"precipitation_amount":0,"precipitation_amount_max":0,"precipitation_amount_min":0,"probability_of_precipitation":7.8}}}},{"time":"2022-03-11T12:00:00Z","data":{"instant":{"details":{"air_pressure_at_sea_level":1032.5,"air_temperature":3.7,"air_temperature_percentile_10":-1.9,"air_temperature_percentile_90":6.7,"cloud_area_fraction":0,"cloud_area_fraction_high":0,"cloud_area_fraction_low":0,"cloud_area_fraction_medium":0,"dew_point_temperature":-9,"relative_humidity":41.2,"wind_from_direction":215.7,"wind_speed":2.7,"wind_speed_percentile_10":1.6,"wind_speed_percentile_90":4.9}},"next_12_hours":{"summary":{"symbol_code":"clearsky_day","symbol_confidence":"somewhat certain"},"details":{"probability_of_precipitation":11.8}},"next_6_hours":{"summary":{"symbol_code":"clearsky_day"},"details":{"air_temperature_max":4.1,"air_temperature_min":-1.3,"precipitation_amount":0,"precipitation_amount_max":0,"precipitation_amount_min":0,"probability_of_precipitation":9.8}}}},{"time":"2022-03-11T18:00:00Z","data":{"instant":{"details":{"air_pressure_at_sea_level":1030.7,"air_temperature":-1.3,"air_temperature_percentile_10":-4.3,"air_temperature_percentile_90":0.7,"cloud_area_fraction":0,"cloud_area_fraction_high":0,"cloud_area_fraction_low":0,"cloud_area_fraction_medium":0,"dew_point_temperature":-5.7,"relative_humidity":74.5,"wind_from_direction":128.6,"wind_speed":2.5,"wind_speed_percentile_10":1.8,"wind_speed_percentile_90":4.1}},"next_12_hours":{"summary":{"symbol_code":"clearsky_night","symbol_confidence":"uncertain"},"details":{"probability_of_precipitation":11.8}},"next_6_hours":{"summary":{"symbol_code":"clearsky_night"},"details":{"air_temperature_max":-1.2,"air_temperature_min":-2.8,"precipitation_amount":0,"precipitation_amount_max":0,"precipitation_amount_min":0,"probability_of_precipitation":9.8}}}},{"time":"2022-03-12T00:00:00Z","data":{"instant":{"details":{"air_pressure_at_sea_level":1030.9,"air_temperature":-2.6,"air_temperature_percentile_10":-5,"air_temperature_percentile_90":-0.3,"cloud_area_fraction":0,"cloud_area_fraction_high":0,"cloud_area_fraction_low":0,"cloud_area_fraction_medium":0,"dew_point_temperature":-5.7,"relative_humidity":81.2,"wind_from_direction":261.8,"wind_speed":2,"wind_speed_percentile_10":0.6,"wind_speed_percentile_90":3.3}},"next_12_hours":{"summary":{"symbol_code":"clearsky_day","symbol_confidence":"uncertain"},"details":{"probability_of_precipitation":11.8}},"next_6_hours":{"summary":{"symbol_code":"clearsky_night"},"details":{"air_temperature_max":-2.8,"air_temperature_min":-4.1,"precipitation_amount":0,"precipitation_amount_max":0,"precipitation_amount_min":0,"probability_of_precipitation":9.8}}}},{"time":"2022-03-12T06:00:00Z","data":{"instant":{"details":{"air_pressure_at_sea_level":1029.8,"air_temperature":-3.7,"air_temperature_percentile_10":-5.9,"air_temperature_percentile_90":-0.3,"cloud_area_fraction":0,"cloud_area_fraction_high":0,"cloud_area_fraction_low":0,"cloud_area_fraction_medium":0,"dew_point_temperature":-6.8,"relative_humidity":82,"wind_from_direction":109.9,"wind_speed":2.3,"wind_speed_percentile_10":1.5,"wind_speed_percentile_90":3.7}},"next_12_hours":{"summary":{"symbol_code":"clearsky_day","symbol_confidence":"uncertain"},"details":{"probability_of_precipitation":11.8}},"next_6_hours":{"summary":{"symbol_code":"clearsky_day"},"details":{"air_temperature_max":4.3,"air_temperature_min":-4.7,"precipitation_amount":0,"precipitation_amount_max":0,"precipitation_amount_min":0,"probability_of_precipitation":11.8}}}},{"time":"2022-03-12T12:00:00Z","data":{"instant":{"details":{"air_pressure_at_sea_level":1029.4,"air_temperature":4.3,"air_temperature_percentile_10":-1.6,"air_temperature_percentile_90":6.7,"cloud_area_fraction":0,"cloud_area_fraction_high":0,"cloud_area_fraction_low":0,"cloud_area_fraction_medium":0,"dew_point_temperature":-7.9,"relative_humidity":42.6,"wind_from_direction":219.7,"wind_speed":2.7,"wind_speed_percentile_10":1.8,"wind_speed_percentile_90":4.6}},"next_6_hours":{"summary":{"symbol_code":"clearsky_day"},"details":{"air_temperature_max":4,"air_temperature_min":-1.5,"precipitation_amount":0,"precipitation_amount_max":0,"precipitation_amount_min":0,"probability_of_precipitation":11.8}}}},{"time":"2022-03-12T18:00:00Z","data":{"instant":{"details":{"air_pressure_at_sea_level":1029.3,"air_temperature":-1.5,"air_temperature_percentile_10":-3.9,"air_temperature_percentile_90":1.8,"cloud_area_fraction":0,"cloud_area_fraction_high":0,"cloud_area_fraction_low":0,"cloud_area_fraction_medium":0,"dew_point_temperature":-5.8,"relative_humidity":75.9,"wind_from_direction":141.2,"wind_speed":2.7,"wind_speed_percentile_10":2.3,"wind_speed_percentile_90":4.1}}}}]}}')}},e={};function i(a){var r=e[a];if(void 0!==r)return r.exports;var n=e[a]={exports:{}};return t[a](n,n.exports,i),n.exports}i.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),(()=>{var t;i.g.importScripts&&(t=i.g.location+"");var e=i.g.document;if(!t&&e&&(e.currentScript&&(t=e.currentScript.src),!t)){var a=e.getElementsByTagName("script");a.length&&(t=a[a.length-1].src)}if(!t)throw new Error("Automatic publicPath is not supported in this browser");t=t.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),i.p=t})(),(()=>{const t="undefined"==typeof window?function(t){return t()}:window.requestAnimationFrame;function e(e,i,a){const r=a||(t=>Array.prototype.slice.call(t));let n=!1,o=[];return function(...a){o=r(a),n||(n=!0,t.call(window,(()=>{n=!1,e.apply(i,o)})))}}const a=t=>"start"===t?"left":"end"===t?"right":"center",r=(t,e,i)=>"start"===t?e:"end"===t?i:(e+i)/2;function n(){}const o=function(){let t=0;return function(){return t++}}();function s(t){return null==t}function l(t){if(Array.isArray&&Array.isArray(t))return!0;const e=Object.prototype.toString.call(t);return"[object"===e.substr(0,7)&&"Array]"===e.substr(-6)}function _(t){return null!==t&&"[object Object]"===Object.prototype.toString.call(t)}const c=t=>("number"==typeof t||t instanceof Number)&&isFinite(+t);function d(t,e){return c(t)?t:e}function h(t,e){return void 0===t?e:t}const p=(t,e)=>"string"==typeof t&&t.endsWith("%")?parseFloat(t)/100*e:+t;function u(t,e,i){if(t&&"function"==typeof t.call)return t.apply(i,e)}function m(t,e,i,a){let r,n,o;if(l(t))if(n=t.length,a)for(r=n-1;r>=0;r--)e.call(i,t[r],r);else for(r=0;r<n;r++)e.call(i,t[r],r);else if(_(t))for(o=Object.keys(t),n=o.length,r=0;r<n;r++)e.call(i,t[o[r]],o[r])}function f(t,e){let i,a,r,n;if(!t||!e||t.length!==e.length)return!1;for(i=0,a=t.length;i<a;++i)if(r=t[i],n=e[i],r.datasetIndex!==n.datasetIndex||r.index!==n.index)return!1;return!0}function g(t){if(l(t))return t.map(g);if(_(t)){const e=Object.create(null),i=Object.keys(t),a=i.length;let r=0;for(;r<a;++r)e[i[r]]=g(t[i[r]]);return e}return t}function b(t){return-1===["__proto__","prototype","constructor"].indexOf(t)}function y(t,e,i,a){if(!b(t))return;const r=e[t],n=i[t];_(r)&&_(n)?x(r,n,a):e[t]=g(n)}function x(t,e,i){const a=l(e)?e:[e],r=a.length;if(!_(t))return t;const n=(i=i||{}).merger||y;for(let o=0;o<r;++o){if(!_(e=a[o]))continue;const r=Object.keys(e);for(let a=0,o=r.length;a<o;++a)n(r[a],t,e,i)}return t}function w(t,e){return x(t,e,{merger:v})}function v(t,e,i){if(!b(t))return;const a=e[t],r=i[t];_(a)&&_(r)?w(a,r):Object.prototype.hasOwnProperty.call(e,t)||(e[t]=g(r))}function k(t,e){const i=t.indexOf(".",e);return-1===i?t.length:i}function M(t,e){if(""===e)return t;let i=0,a=k(e,i);for(;t&&a>i;)t=t[e.substr(i,a-i)],i=a+1,a=k(e,i);return t}function S(t){return t.charAt(0).toUpperCase()+t.slice(1)}const P=t=>void 0!==t,D=t=>"function"==typeof t,T=(t,e)=>{if(t.size!==e.size)return!1;for(const i of t)if(!e.has(i))return!1;return!0},C=Math.PI,O=2*C,A=O+C,L=Number.POSITIVE_INFINITY,R=C/180,E=C/2,I=C/4,z=2*C/3,F=Math.log10,V=Math.sign;function B(t){const e=Math.round(t);t=N(t,e,t/1e3)?e:t;const i=Math.pow(10,Math.floor(F(t))),a=t/i;return(a<=1?1:a<=2?2:a<=5?5:10)*i}function W(t){return!isNaN(parseFloat(t))&&isFinite(t)}function N(t,e,i){return Math.abs(t-e)<i}function H(t,e,i){let a,r,n;for(a=0,r=t.length;a<r;a++)n=t[a][i],isNaN(n)||(e.min=Math.min(e.min,n),e.max=Math.max(e.max,n))}function j(t){return t*(C/180)}function $(t){return t*(180/C)}function Z(t){if(!c(t))return;let e=1,i=0;for(;Math.round(t*e)/e!==t;)e*=10,i++;return i}function Y(t,e){const i=e.x-t.x,a=e.y-t.y,r=Math.sqrt(i*i+a*a);let n=Math.atan2(a,i);return n<-.5*C&&(n+=O),{angle:n,distance:r}}function U(t,e){return Math.sqrt(Math.pow(e.x-t.x,2)+Math.pow(e.y-t.y,2))}function X(t,e){return(t-e+A)%O-C}function q(t){return(t%O+O)%O}function K(t,e,i,a){const r=q(t),n=q(e),o=q(i),s=q(n-r),l=q(o-r),_=q(r-n),c=q(r-o);return r===n||r===o||a&&n===o||s>l&&_<c}function G(t,e,i){return Math.max(e,Math.min(i,t))}function J(t,e,i,a=1e-6){return t>=Math.min(e,i)-a&&t<=Math.max(e,i)+a}const Q=t=>0===t||1===t,tt=(t,e,i)=>-Math.pow(2,10*(t-=1))*Math.sin((t-e)*O/i),et=(t,e,i)=>Math.pow(2,-10*t)*Math.sin((t-e)*O/i)+1,it={linear:t=>t,easeInQuad:t=>t*t,easeOutQuad:t=>-t*(t-2),easeInOutQuad:t=>(t/=.5)<1?.5*t*t:-.5*(--t*(t-2)-1),easeInCubic:t=>t*t*t,easeOutCubic:t=>(t-=1)*t*t+1,easeInOutCubic:t=>(t/=.5)<1?.5*t*t*t:.5*((t-=2)*t*t+2),easeInQuart:t=>t*t*t*t,easeOutQuart:t=>-((t-=1)*t*t*t-1),easeInOutQuart:t=>(t/=.5)<1?.5*t*t*t*t:-.5*((t-=2)*t*t*t-2),easeInQuint:t=>t*t*t*t*t,easeOutQuint:t=>(t-=1)*t*t*t*t+1,easeInOutQuint:t=>(t/=.5)<1?.5*t*t*t*t*t:.5*((t-=2)*t*t*t*t+2),easeInSine:t=>1-Math.cos(t*E),easeOutSine:t=>Math.sin(t*E),easeInOutSine:t=>-.5*(Math.cos(C*t)-1),easeInExpo:t=>0===t?0:Math.pow(2,10*(t-1)),easeOutExpo:t=>1===t?1:1-Math.pow(2,-10*t),easeInOutExpo:t=>Q(t)?t:t<.5?.5*Math.pow(2,10*(2*t-1)):.5*(2-Math.pow(2,-10*(2*t-1))),easeInCirc:t=>t>=1?t:-(Math.sqrt(1-t*t)-1),easeOutCirc:t=>Math.sqrt(1-(t-=1)*t),easeInOutCirc:t=>(t/=.5)<1?-.5*(Math.sqrt(1-t*t)-1):.5*(Math.sqrt(1-(t-=2)*t)+1),easeInElastic:t=>Q(t)?t:tt(t,.075,.3),easeOutElastic:t=>Q(t)?t:et(t,.075,.3),easeInOutElastic(t){const e=.1125;return Q(t)?t:t<.5?.5*tt(2*t,e,.45):.5+.5*et(2*t-1,e,.45)},easeInBack(t){const e=1.70158;return t*t*((e+1)*t-e)},easeOutBack(t){const e=1.70158;return(t-=1)*t*((e+1)*t+e)+1},easeInOutBack(t){let e=1.70158;return(t/=.5)<1?t*t*((1+(e*=1.525))*t-e)*.5:.5*((t-=2)*t*((1+(e*=1.525))*t+e)+2)},easeInBounce:t=>1-it.easeOutBounce(1-t),easeOutBounce(t){const e=7.5625,i=2.75;return t<1/i?e*t*t:t<2/i?e*(t-=1.5/i)*t+.75:t<2.5/i?e*(t-=2.25/i)*t+.9375:e*(t-=2.625/i)*t+.984375},easeInOutBounce:t=>t<.5?.5*it.easeInBounce(2*t):.5*it.easeOutBounce(2*t-1)+.5},at={0:0,1:1,2:2,3:3,4:4,5:5,6:6,7:7,8:8,9:9,A:10,B:11,C:12,D:13,E:14,F:15,a:10,b:11,c:12,d:13,e:14,f:15},rt="0123456789ABCDEF",nt=t=>rt[15&t],ot=t=>rt[(240&t)>>4]+rt[15&t],st=t=>(240&t)>>4==(15&t);function lt(t){return t+.5|0}const _t=(t,e,i)=>Math.max(Math.min(t,i),e);function ct(t){return _t(lt(2.55*t),0,255)}function dt(t){return _t(lt(255*t),0,255)}function ht(t){return _t(lt(t/2.55)/100,0,1)}function pt(t){return _t(lt(100*t),0,100)}const ut=/^rgba?\(\s*([-+.\d]+)(%)?[\s,]+([-+.e\d]+)(%)?[\s,]+([-+.e\d]+)(%)?(?:[\s,/]+([-+.e\d]+)(%)?)?\s*\)$/,mt=/^(hsla?|hwb|hsv)\(\s*([-+.e\d]+)(?:deg)?[\s,]+([-+.e\d]+)%[\s,]+([-+.e\d]+)%(?:[\s,]+([-+.e\d]+)(%)?)?\s*\)$/;function ft(t,e,i){const a=e*Math.min(i,1-i),r=(e,r=(e+t/30)%12)=>i-a*Math.max(Math.min(r-3,9-r,1),-1);return[r(0),r(8),r(4)]}function gt(t,e,i){const a=(a,r=(a+t/60)%6)=>i-i*e*Math.max(Math.min(r,4-r,1),0);return[a(5),a(3),a(1)]}function bt(t,e,i){const a=ft(t,1,.5);let r;for(e+i>1&&(r=1/(e+i),e*=r,i*=r),r=0;r<3;r++)a[r]*=1-e-i,a[r]+=e;return a}function yt(t){const e=t.r/255,i=t.g/255,a=t.b/255,r=Math.max(e,i,a),n=Math.min(e,i,a),o=(r+n)/2;let s,l,_;return r!==n&&(_=r-n,l=o>.5?_/(2-r-n):_/(r+n),s=r===e?(i-a)/_+(i<a?6:0):r===i?(a-e)/_+2:(e-i)/_+4,s=60*s+.5),[0|s,l||0,o]}function xt(t,e,i,a){return(Array.isArray(e)?t(e[0],e[1],e[2]):t(e,i,a)).map(dt)}function wt(t,e,i){return xt(ft,t,e,i)}function vt(t){return(t%360+360)%360}const kt={x:"dark",Z:"light",Y:"re",X:"blu",W:"gr",V:"medium",U:"slate",A:"ee",T:"ol",S:"or",B:"ra",C:"lateg",D:"ights",R:"in",Q:"turquois",E:"hi",P:"ro",O:"al",N:"le",M:"de",L:"yello",F:"en",K:"ch",G:"arks",H:"ea",I:"ightg",J:"wh"},Mt={OiceXe:"f0f8ff",antiquewEte:"faebd7",aqua:"ffff",aquamarRe:"7fffd4",azuY:"f0ffff",beige:"f5f5dc",bisque:"ffe4c4",black:"0",blanKedOmond:"ffebcd",Xe:"ff",XeviTet:"8a2be2",bPwn:"a52a2a",burlywood:"deb887",caMtXe:"5f9ea0",KartYuse:"7fff00",KocTate:"d2691e",cSO:"ff7f50",cSnflowerXe:"6495ed",cSnsilk:"fff8dc",crimson:"dc143c",cyan:"ffff",xXe:"8b",xcyan:"8b8b",xgTMnPd:"b8860b",xWay:"a9a9a9",xgYF:"6400",xgYy:"a9a9a9",xkhaki:"bdb76b",xmagFta:"8b008b",xTivegYF:"556b2f",xSange:"ff8c00",xScEd:"9932cc",xYd:"8b0000",xsOmon:"e9967a",xsHgYF:"8fbc8f",xUXe:"483d8b",xUWay:"2f4f4f",xUgYy:"2f4f4f",xQe:"ced1",xviTet:"9400d3",dAppRk:"ff1493",dApskyXe:"bfff",dimWay:"696969",dimgYy:"696969",dodgerXe:"1e90ff",fiYbrick:"b22222",flSOwEte:"fffaf0",foYstWAn:"228b22",fuKsia:"ff00ff",gaRsbSo:"dcdcdc",ghostwEte:"f8f8ff",gTd:"ffd700",gTMnPd:"daa520",Way:"808080",gYF:"8000",gYFLw:"adff2f",gYy:"808080",honeyMw:"f0fff0",hotpRk:"ff69b4",RdianYd:"cd5c5c",Rdigo:"4b0082",ivSy:"fffff0",khaki:"f0e68c",lavFMr:"e6e6fa",lavFMrXsh:"fff0f5",lawngYF:"7cfc00",NmoncEffon:"fffacd",ZXe:"add8e6",ZcSO:"f08080",Zcyan:"e0ffff",ZgTMnPdLw:"fafad2",ZWay:"d3d3d3",ZgYF:"90ee90",ZgYy:"d3d3d3",ZpRk:"ffb6c1",ZsOmon:"ffa07a",ZsHgYF:"20b2aa",ZskyXe:"87cefa",ZUWay:"778899",ZUgYy:"778899",ZstAlXe:"b0c4de",ZLw:"ffffe0",lime:"ff00",limegYF:"32cd32",lRF:"faf0e6",magFta:"ff00ff",maPon:"800000",VaquamarRe:"66cdaa",VXe:"cd",VScEd:"ba55d3",VpurpN:"9370db",VsHgYF:"3cb371",VUXe:"7b68ee",VsprRggYF:"fa9a",VQe:"48d1cc",VviTetYd:"c71585",midnightXe:"191970",mRtcYam:"f5fffa",mistyPse:"ffe4e1",moccasR:"ffe4b5",navajowEte:"ffdead",navy:"80",Tdlace:"fdf5e6",Tive:"808000",TivedBb:"6b8e23",Sange:"ffa500",SangeYd:"ff4500",ScEd:"da70d6",pOegTMnPd:"eee8aa",pOegYF:"98fb98",pOeQe:"afeeee",pOeviTetYd:"db7093",papayawEp:"ffefd5",pHKpuff:"ffdab9",peru:"cd853f",pRk:"ffc0cb",plum:"dda0dd",powMrXe:"b0e0e6",purpN:"800080",YbeccapurpN:"663399",Yd:"ff0000",Psybrown:"bc8f8f",PyOXe:"4169e1",saddNbPwn:"8b4513",sOmon:"fa8072",sandybPwn:"f4a460",sHgYF:"2e8b57",sHshell:"fff5ee",siFna:"a0522d",silver:"c0c0c0",skyXe:"87ceeb",UXe:"6a5acd",UWay:"708090",UgYy:"708090",snow:"fffafa",sprRggYF:"ff7f",stAlXe:"4682b4",tan:"d2b48c",teO:"8080",tEstN:"d8bfd8",tomato:"ff6347",Qe:"40e0d0",viTet:"ee82ee",JHt:"f5deb3",wEte:"ffffff",wEtesmoke:"f5f5f5",Lw:"ffff00",LwgYF:"9acd32"};let St;function Pt(t,e,i){if(t){let a=yt(t);a[e]=Math.max(0,Math.min(a[e]+a[e]*i,0===e?360:1)),a=wt(a),t.r=a[0],t.g=a[1],t.b=a[2]}}function Dt(t,e){return t?Object.assign(e||{},t):t}function Tt(t){var e={r:0,g:0,b:0,a:255};return Array.isArray(t)?t.length>=3&&(e={r:t[0],g:t[1],b:t[2],a:255},t.length>3&&(e.a=dt(t[3]))):(e=Dt(t,{r:0,g:0,b:0,a:1})).a=dt(e.a),e}function Ct(t){return"r"===t.charAt(0)?function(t){const e=ut.exec(t);let i,a,r,n=255;if(e){if(e[7]!==i){const t=+e[7];n=255&(e[8]?ct(t):255*t)}return i=+e[1],a=+e[3],r=+e[5],i=255&(e[2]?ct(i):i),a=255&(e[4]?ct(a):a),r=255&(e[6]?ct(r):r),{r:i,g:a,b:r,a:n}}}(t):function(t){const e=mt.exec(t);let i,a=255;if(!e)return;e[5]!==i&&(a=e[6]?ct(+e[5]):dt(+e[5]));const r=vt(+e[2]),n=+e[3]/100,o=+e[4]/100;return i="hwb"===e[1]?function(t,e,i){return xt(bt,t,e,i)}(r,n,o):"hsv"===e[1]?function(t,e,i){return xt(gt,t,e,i)}(r,n,o):wt(r,n,o),{r:i[0],g:i[1],b:i[2],a}}(t)}class Ot{constructor(t){if(t instanceof Ot)return t;const e=typeof t;let i;var a,r,n;"object"===e?i=Tt(t):"string"===e&&(n=(a=t).length,"#"===a[0]&&(4===n||5===n?r={r:255&17*at[a[1]],g:255&17*at[a[2]],b:255&17*at[a[3]],a:5===n?17*at[a[4]]:255}:7!==n&&9!==n||(r={r:at[a[1]]<<4|at[a[2]],g:at[a[3]]<<4|at[a[4]],b:at[a[5]]<<4|at[a[6]],a:9===n?at[a[7]]<<4|at[a[8]]:255})),i=r||function(t){St||(St=function(){const t={},e=Object.keys(Mt),i=Object.keys(kt);let a,r,n,o,s;for(a=0;a<e.length;a++){for(o=s=e[a],r=0;r<i.length;r++)n=i[r],s=s.replace(n,kt[n]);n=parseInt(Mt[o],16),t[s]=[n>>16&255,n>>8&255,255&n]}return t}(),St.transparent=[0,0,0,0]);const e=St[t.toLowerCase()];return e&&{r:e[0],g:e[1],b:e[2],a:4===e.length?e[3]:255}}(t)||Ct(t)),this._rgb=i,this._valid=!!i}get valid(){return this._valid}get rgb(){var t=Dt(this._rgb);return t&&(t.a=ht(t.a)),t}set rgb(t){this._rgb=Tt(t)}rgbString(){return this._valid?(t=this._rgb)&&(t.a<255?`rgba(${t.r}, ${t.g}, ${t.b}, ${ht(t.a)})`:`rgb(${t.r}, ${t.g}, ${t.b})`):this._rgb;var t}hexString(){return this._valid?(t=this._rgb,e=function(t){return st(t.r)&&st(t.g)&&st(t.b)&&st(t.a)}(t)?nt:ot,t?"#"+e(t.r)+e(t.g)+e(t.b)+(t.a<255?e(t.a):""):t):this._rgb;var t,e}hslString(){return this._valid?function(t){if(!t)return;const e=yt(t),i=e[0],a=pt(e[1]),r=pt(e[2]);return t.a<255?`hsla(${i}, ${a}%, ${r}%, ${ht(t.a)})`:`hsl(${i}, ${a}%, ${r}%)`}(this._rgb):this._rgb}mix(t,e){const i=this;if(t){const a=i.rgb,r=t.rgb;let n;const o=e===n?.5:e,s=2*o-1,l=a.a-r.a,_=((s*l==-1?s:(s+l)/(1+s*l))+1)/2;n=1-_,a.r=255&_*a.r+n*r.r+.5,a.g=255&_*a.g+n*r.g+.5,a.b=255&_*a.b+n*r.b+.5,a.a=o*a.a+(1-o)*r.a,i.rgb=a}return i}clone(){return new Ot(this.rgb)}alpha(t){return this._rgb.a=dt(t),this}clearer(t){return this._rgb.a*=1-t,this}greyscale(){const t=this._rgb,e=lt(.3*t.r+.59*t.g+.11*t.b);return t.r=t.g=t.b=e,this}opaquer(t){return this._rgb.a*=1+t,this}negate(){const t=this._rgb;return t.r=255-t.r,t.g=255-t.g,t.b=255-t.b,this}lighten(t){return Pt(this._rgb,2,t),this}darken(t){return Pt(this._rgb,2,-t),this}saturate(t){return Pt(this._rgb,1,t),this}desaturate(t){return Pt(this._rgb,1,-t),this}rotate(t){return function(t,e){var i=yt(t);i[0]=vt(i[0]+e),i=wt(i),t.r=i[0],t.g=i[1],t.b=i[2]}(this._rgb,t),this}}function At(t){return new Ot(t)}const Lt=t=>t instanceof CanvasGradient||t instanceof CanvasPattern;function Rt(t){return Lt(t)?t:At(t)}function Et(t){return Lt(t)?t:At(t).saturate(.5).darken(.1).hexString()}const It=Object.create(null),zt=Object.create(null);function Ft(t,e){if(!e)return t;const i=e.split(".");for(let e=0,a=i.length;e<a;++e){const a=i[e];t=t[a]||(t[a]=Object.create(null))}return t}function Vt(t,e,i){return"string"==typeof e?x(Ft(t,e),i):x(Ft(t,""),e)}var Bt=new class{constructor(t){this.animation=void 0,this.backgroundColor="rgba(0,0,0,0.1)",this.borderColor="rgba(0,0,0,0.1)",this.color="#666",this.datasets={},this.devicePixelRatio=t=>t.chart.platform.getDevicePixelRatio(),this.elements={},this.events=["mousemove","mouseout","click","touchstart","touchmove"],this.font={family:"'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",size:12,style:"normal",lineHeight:1.2,weight:null},this.hover={},this.hoverBackgroundColor=(t,e)=>Et(e.backgroundColor),this.hoverBorderColor=(t,e)=>Et(e.borderColor),this.hoverColor=(t,e)=>Et(e.color),this.indexAxis="x",this.interaction={mode:"nearest",intersect:!0},this.maintainAspectRatio=!0,this.onHover=null,this.onClick=null,this.parsing=!0,this.plugins={},this.responsive=!0,this.scale=void 0,this.scales={},this.showLine=!0,this.drawActiveElementsOnTop=!0,this.describe(t)}set(t,e){return Vt(this,t,e)}get(t){return Ft(this,t)}describe(t,e){return Vt(zt,t,e)}override(t,e){return Vt(It,t,e)}route(t,e,i,a){const r=Ft(this,t),n=Ft(this,i),o="_"+e;Object.defineProperties(r,{[o]:{value:r[e],writable:!0},[e]:{enumerable:!0,get(){const t=this[o],e=n[a];return _(t)?Object.assign({},e,t):h(t,e)},set(t){this[o]=t}}})}}({_scriptable:t=>!t.startsWith("on"),_indexable:t=>"events"!==t,hover:{_fallback:"interaction"},interaction:{_scriptable:!1,_indexable:!1}});function Wt(t,e,i,a,r){let n=e[r];return n||(n=e[r]=t.measureText(r).width,i.push(r)),n>a&&(a=n),a}function Nt(t,e,i,a){let r=(a=a||{}).data=a.data||{},n=a.garbageCollect=a.garbageCollect||[];a.font!==e&&(r=a.data={},n=a.garbageCollect=[],a.font=e),t.save(),t.font=e;let o=0;const s=i.length;let _,c,d,h,p;for(_=0;_<s;_++)if(h=i[_],null!=h&&!0!==l(h))o=Wt(t,r,n,o,h);else if(l(h))for(c=0,d=h.length;c<d;c++)p=h[c],null==p||l(p)||(o=Wt(t,r,n,o,p));t.restore();const u=n.length/2;if(u>i.length){for(_=0;_<u;_++)delete r[n[_]];n.splice(0,u)}return o}function Ht(t,e,i){const a=t.currentDevicePixelRatio,r=0!==i?Math.max(i/2,.5):0;return Math.round((e-r)*a)/a+r}function jt(t,e){(e=e||t.getContext("2d")).save(),e.resetTransform(),e.clearRect(0,0,t.width,t.height),e.restore()}function $t(t,e,i,a){let r,n,o,s,l;const _=e.pointStyle,c=e.rotation,d=e.radius;let h=(c||0)*R;if(_&&"object"==typeof _&&(r=_.toString(),"[object HTMLImageElement]"===r||"[object HTMLCanvasElement]"===r))return t.save(),t.translate(i,a),t.rotate(h),t.drawImage(_,-_.width/2,-_.height/2,_.width,_.height),void t.restore();if(!(isNaN(d)||d<=0)){switch(t.beginPath(),_){default:t.arc(i,a,d,0,O),t.closePath();break;case"triangle":t.moveTo(i+Math.sin(h)*d,a-Math.cos(h)*d),h+=z,t.lineTo(i+Math.sin(h)*d,a-Math.cos(h)*d),h+=z,t.lineTo(i+Math.sin(h)*d,a-Math.cos(h)*d),t.closePath();break;case"rectRounded":l=.516*d,s=d-l,n=Math.cos(h+I)*s,o=Math.sin(h+I)*s,t.arc(i-n,a-o,l,h-C,h-E),t.arc(i+o,a-n,l,h-E,h),t.arc(i+n,a+o,l,h,h+E),t.arc(i-o,a+n,l,h+E,h+C),t.closePath();break;case"rect":if(!c){s=Math.SQRT1_2*d,t.rect(i-s,a-s,2*s,2*s);break}h+=I;case"rectRot":n=Math.cos(h)*d,o=Math.sin(h)*d,t.moveTo(i-n,a-o),t.lineTo(i+o,a-n),t.lineTo(i+n,a+o),t.lineTo(i-o,a+n),t.closePath();break;case"crossRot":h+=I;case"cross":n=Math.cos(h)*d,o=Math.sin(h)*d,t.moveTo(i-n,a-o),t.lineTo(i+n,a+o),t.moveTo(i+o,a-n),t.lineTo(i-o,a+n);break;case"star":n=Math.cos(h)*d,o=Math.sin(h)*d,t.moveTo(i-n,a-o),t.lineTo(i+n,a+o),t.moveTo(i+o,a-n),t.lineTo(i-o,a+n),h+=I,n=Math.cos(h)*d,o=Math.sin(h)*d,t.moveTo(i-n,a-o),t.lineTo(i+n,a+o),t.moveTo(i+o,a-n),t.lineTo(i-o,a+n);break;case"line":n=Math.cos(h)*d,o=Math.sin(h)*d,t.moveTo(i-n,a-o),t.lineTo(i+n,a+o);break;case"dash":t.moveTo(i,a),t.lineTo(i+Math.cos(h)*d,a+Math.sin(h)*d)}t.fill(),e.borderWidth>0&&t.stroke()}}function Zt(t,e,i){return i=i||.5,!e||t&&t.x>e.left-i&&t.x<e.right+i&&t.y>e.top-i&&t.y<e.bottom+i}function Yt(t,e){t.save(),t.beginPath(),t.rect(e.left,e.top,e.right-e.left,e.bottom-e.top),t.clip()}function Ut(t){t.restore()}function Xt(t,e,i,a,r){if(!e)return t.lineTo(i.x,i.y);if("middle"===r){const a=(e.x+i.x)/2;t.lineTo(a,e.y),t.lineTo(a,i.y)}else"after"===r!=!!a?t.lineTo(e.x,i.y):t.lineTo(i.x,e.y);t.lineTo(i.x,i.y)}function qt(t,e,i,a){if(!e)return t.lineTo(i.x,i.y);t.bezierCurveTo(a?e.cp1x:e.cp2x,a?e.cp1y:e.cp2y,a?i.cp2x:i.cp1x,a?i.cp2y:i.cp1y,i.x,i.y)}function Kt(t,e,i,a,r,n={}){const o=l(e)?e:[e],_=n.strokeWidth>0&&""!==n.strokeColor;let c,d;for(t.save(),t.font=r.string,function(t,e){e.translation&&t.translate(e.translation[0],e.translation[1]),s(e.rotation)||t.rotate(e.rotation),e.color&&(t.fillStyle=e.color),e.textAlign&&(t.textAlign=e.textAlign),e.textBaseline&&(t.textBaseline=e.textBaseline)}(t,n),c=0;c<o.length;++c)d=o[c],_&&(n.strokeColor&&(t.strokeStyle=n.strokeColor),s(n.strokeWidth)||(t.lineWidth=n.strokeWidth),t.strokeText(d,i,a,n.maxWidth)),t.fillText(d,i,a,n.maxWidth),Gt(t,i,a,d,n),a+=r.lineHeight;t.restore()}function Gt(t,e,i,a,r){if(r.strikethrough||r.underline){const n=t.measureText(a),o=e-n.actualBoundingBoxLeft,s=e+n.actualBoundingBoxRight,l=i-n.actualBoundingBoxAscent,_=i+n.actualBoundingBoxDescent,c=r.strikethrough?(l+_)/2:_;t.strokeStyle=t.fillStyle,t.beginPath(),t.lineWidth=r.decorationWidth||2,t.moveTo(o,c),t.lineTo(s,c),t.stroke()}}function Jt(t,e){const{x:i,y:a,w:r,h:n,radius:o}=e;t.arc(i+o.topLeft,a+o.topLeft,o.topLeft,-E,C,!0),t.lineTo(i,a+n-o.bottomLeft),t.arc(i+o.bottomLeft,a+n-o.bottomLeft,o.bottomLeft,C,E,!0),t.lineTo(i+r-o.bottomRight,a+n),t.arc(i+r-o.bottomRight,a+n-o.bottomRight,o.bottomRight,E,0,!0),t.lineTo(i+r,a+o.topRight),t.arc(i+r-o.topRight,a+o.topRight,o.topRight,0,-E,!0),t.lineTo(i+o.topLeft,a)}const Qt=new RegExp(/^(normal|(\d+(?:\.\d+)?)(px|em|%)?)$/),te=new RegExp(/^(normal|italic|initial|inherit|unset|(oblique( -?[0-9]?[0-9]deg)?))$/);function ee(t,e){const i=(""+t).match(Qt);if(!i||"normal"===i[1])return 1.2*e;switch(t=+i[2],i[3]){case"px":return t;case"%":t/=100}return e*t}function ie(t,e){const i={},a=_(e),r=a?Object.keys(e):e,n=_(t)?a?i=>h(t[i],t[e[i]]):e=>t[e]:()=>t;for(const t of r)i[t]=+n(t)||0;return i}function ae(t){return ie(t,{top:"y",right:"x",bottom:"y",left:"x"})}function re(t){return ie(t,["topLeft","topRight","bottomLeft","bottomRight"])}function ne(t){const e=ae(t);return e.width=e.left+e.right,e.height=e.top+e.bottom,e}function oe(t,e){t=t||{},e=e||Bt.font;let i=h(t.size,e.size);"string"==typeof i&&(i=parseInt(i,10));let a=h(t.style,e.style);a&&!(""+a).match(te)&&(console.warn('Invalid font style specified: "'+a+'"'),a="");const r={family:h(t.family,e.family),lineHeight:ee(h(t.lineHeight,e.lineHeight),i),size:i,style:a,weight:h(t.weight,e.weight),string:""};return r.string=function(t){return!t||s(t.size)||s(t.family)?null:(t.style?t.style+" ":"")+(t.weight?t.weight+" ":"")+t.size+"px "+t.family}(r),r}function se(t,e,i,a){let r,n,o,s=!0;for(r=0,n=t.length;r<n;++r)if(o=t[r],void 0!==o&&(void 0!==e&&"function"==typeof o&&(o=o(e),s=!1),void 0!==i&&l(o)&&(o=o[i%o.length],s=!1),void 0!==o))return a&&!s&&(a.cacheable=!1),o}function le(t,e){return Object.assign(Object.create(t),e)}function _e(t,e,i){i=i||(i=>t[i]<e);let a,r=t.length-1,n=0;for(;r-n>1;)a=n+r>>1,i(a)?n=a:r=a;return{lo:n,hi:r}}const ce=(t,e,i)=>_e(t,i,(a=>t[a][e]<i)),de=(t,e,i)=>_e(t,i,(a=>t[a][e]>=i)),he=["push","pop","shift","splice","unshift"];function pe(t,e){const i=t._chartjs;if(!i)return;const a=i.listeners,r=a.indexOf(e);-1!==r&&a.splice(r,1),a.length>0||(he.forEach((e=>{delete t[e]})),delete t._chartjs)}function ue(t){const e=new Set;let i,a;for(i=0,a=t.length;i<a;++i)e.add(t[i]);return e.size===a?t:Array.from(e)}function me(t,e=[""],i=t,a,r=(()=>t[0])){P(a)||(a=Pe("_fallback",t));const n={[Symbol.toStringTag]:"Object",_cacheable:!0,_scopes:t,_rootScopes:i,_fallback:a,_getTarget:r,override:r=>me([r,...t],e,i,a)};return new Proxy(n,{deleteProperty:(e,i)=>(delete e[i],delete e._keys,delete t[0][i],!0),get:(i,a)=>xe(i,a,(()=>function(t,e,i,a){let r;for(const n of e)if(r=Pe(be(n,t),i),P(r))return ye(t,r)?Me(i,a,t,r):r}(a,e,t,i))),getOwnPropertyDescriptor:(t,e)=>Reflect.getOwnPropertyDescriptor(t._scopes[0],e),getPrototypeOf:()=>Reflect.getPrototypeOf(t[0]),has:(t,e)=>De(t).includes(e),ownKeys:t=>De(t),set(t,e,i){const a=t._storage||(t._storage=r());return t[e]=a[e]=i,delete t._keys,!0}})}function fe(t,e,i,a){const r={_cacheable:!1,_proxy:t,_context:e,_subProxy:i,_stack:new Set,_descriptors:ge(t,a),setContext:e=>fe(t,e,i,a),override:r=>fe(t.override(r),e,i,a)};return new Proxy(r,{deleteProperty:(e,i)=>(delete e[i],delete t[i],!0),get:(t,e,i)=>xe(t,e,(()=>function(t,e,i){const{_proxy:a,_context:r,_subProxy:n,_descriptors:o}=t;let s=a[e];return D(s)&&o.isScriptable(e)&&(s=function(t,e,i,a){const{_proxy:r,_context:n,_subProxy:o,_stack:s}=i;if(s.has(t))throw new Error("Recursion detected: "+Array.from(s).join("->")+"->"+t);return s.add(t),e=e(n,o||a),s.delete(t),ye(t,e)&&(e=Me(r._scopes,r,t,e)),e}(e,s,t,i)),l(s)&&s.length&&(s=function(t,e,i,a){const{_proxy:r,_context:n,_subProxy:o,_descriptors:s}=i;if(P(n.index)&&a(t))e=e[n.index%e.length];else if(_(e[0])){const i=e,a=r._scopes.filter((t=>t!==i));e=[];for(const l of i){const i=Me(a,r,t,l);e.push(fe(i,n,o&&o[t],s))}}return e}(e,s,t,o.isIndexable)),ye(e,s)&&(s=fe(s,r,n&&n[e],o)),s}(t,e,i))),getOwnPropertyDescriptor:(e,i)=>e._descriptors.allKeys?Reflect.has(t,i)?{enumerable:!0,configurable:!0}:void 0:Reflect.getOwnPropertyDescriptor(t,i),getPrototypeOf:()=>Reflect.getPrototypeOf(t),has:(e,i)=>Reflect.has(t,i),ownKeys:()=>Reflect.ownKeys(t),set:(e,i,a)=>(t[i]=a,delete e[i],!0)})}function ge(t,e={scriptable:!0,indexable:!0}){const{_scriptable:i=e.scriptable,_indexable:a=e.indexable,_allKeys:r=e.allKeys}=t;return{allKeys:r,scriptable:i,indexable:a,isScriptable:D(i)?i:()=>i,isIndexable:D(a)?a:()=>a}}const be=(t,e)=>t?t+S(e):e,ye=(t,e)=>_(e)&&"adapters"!==t&&(null===Object.getPrototypeOf(e)||e.constructor===Object);function xe(t,e,i){if(Object.prototype.hasOwnProperty.call(t,e))return t[e];const a=i();return t[e]=a,a}function we(t,e,i){return D(t)?t(e,i):t}const ve=(t,e)=>!0===t?e:"string"==typeof t?M(e,t):void 0;function ke(t,e,i,a,r){for(const n of e){const e=ve(i,n);if(e){t.add(e);const n=we(e._fallback,i,r);if(P(n)&&n!==i&&n!==a)return n}else if(!1===e&&P(a)&&i!==a)return null}return!1}function Me(t,e,i,a){const r=e._rootScopes,n=we(e._fallback,i,a),o=[...t,...r],s=new Set;s.add(a);let c=Se(s,o,i,n||i,a);return null!==c&&(!P(n)||n===i||(c=Se(s,o,n,c,a),null!==c))&&me(Array.from(s),[""],r,n,(()=>function(t,e,i){const a=t._getTarget();e in a||(a[e]={});const r=a[e];return l(r)&&_(i)?i:r}(e,i,a)))}function Se(t,e,i,a,r){for(;i;)i=ke(t,e,i,a,r);return i}function Pe(t,e){for(const i of e){if(!i)continue;const e=i[t];if(P(e))return e}}function De(t){let e=t._keys;return e||(e=t._keys=function(t){const e=new Set;for(const i of t)for(const t of Object.keys(i).filter((t=>!t.startsWith("_"))))e.add(t);return Array.from(e)}(t._scopes)),e}const Te=Number.EPSILON||1e-14,Ce=(t,e)=>e<t.length&&!t[e].skip&&t[e],Oe=t=>"x"===t?"y":"x";function Ae(t,e,i,a){const r=t.skip?e:t,n=e,o=i.skip?e:i,s=U(n,r),l=U(o,n);let _=s/(s+l),c=l/(s+l);_=isNaN(_)?0:_,c=isNaN(c)?0:c;const d=a*_,h=a*c;return{previous:{x:n.x-d*(o.x-r.x),y:n.y-d*(o.y-r.y)},next:{x:n.x+h*(o.x-r.x),y:n.y+h*(o.y-r.y)}}}function Le(t,e,i){return Math.max(Math.min(t,i),e)}function Re(t,e,i,a,r){let n,o,s,l;if(e.spanGaps&&(t=t.filter((t=>!t.skip))),"monotone"===e.cubicInterpolationMode)!function(t,e="x"){const i=Oe(e),a=t.length,r=Array(a).fill(0),n=Array(a);let o,s,l,_=Ce(t,0);for(o=0;o<a;++o)if(s=l,l=_,_=Ce(t,o+1),l){if(_){const t=_[e]-l[e];r[o]=0!==t?(_[i]-l[i])/t:0}n[o]=s?_?V(r[o-1])!==V(r[o])?0:(r[o-1]+r[o])/2:r[o-1]:r[o]}!function(t,e,i){const a=t.length;let r,n,o,s,l,_=Ce(t,0);for(let c=0;c<a-1;++c)l=_,_=Ce(t,c+1),l&&_&&(N(e[c],0,Te)?i[c]=i[c+1]=0:(r=i[c]/e[c],n=i[c+1]/e[c],s=Math.pow(r,2)+Math.pow(n,2),s<=9||(o=3/Math.sqrt(s),i[c]=r*o*e[c],i[c+1]=n*o*e[c])))}(t,r,n),function(t,e,i="x"){const a=Oe(i),r=t.length;let n,o,s,l=Ce(t,0);for(let _=0;_<r;++_){if(o=s,s=l,l=Ce(t,_+1),!s)continue;const r=s[i],c=s[a];o&&(n=(r-o[i])/3,s[`cp1${i}`]=r-n,s[`cp1${a}`]=c-n*e[_]),l&&(n=(l[i]-r)/3,s[`cp2${i}`]=r+n,s[`cp2${a}`]=c+n*e[_])}}(t,n,e)}(t,r);else{let i=a?t[t.length-1]:t[0];for(n=0,o=t.length;n<o;++n)s=t[n],l=Ae(i,s,t[Math.min(n+1,o-(a?0:1))%o],e.tension),s.cp1x=l.previous.x,s.cp1y=l.previous.y,s.cp2x=l.next.x,s.cp2y=l.next.y,i=s}e.capBezierPoints&&function(t,e){let i,a,r,n,o,s=Zt(t[0],e);for(i=0,a=t.length;i<a;++i)o=n,n=s,s=i<a-1&&Zt(t[i+1],e),n&&(r=t[i],o&&(r.cp1x=Le(r.cp1x,e.left,e.right),r.cp1y=Le(r.cp1y,e.top,e.bottom)),s&&(r.cp2x=Le(r.cp2x,e.left,e.right),r.cp2y=Le(r.cp2y,e.top,e.bottom)))}(t,i)}function Ee(){return"undefined"!=typeof window&&"undefined"!=typeof document}function Ie(t){let e=t.parentNode;return e&&"[object ShadowRoot]"===e.toString()&&(e=e.host),e}function ze(t,e,i){let a;return"string"==typeof t?(a=parseInt(t,10),-1!==t.indexOf("%")&&(a=a/100*e.parentNode[i])):a=t,a}const Fe=t=>window.getComputedStyle(t,null),Ve=["top","right","bottom","left"];function Be(t,e,i){const a={};i=i?"-"+i:"";for(let r=0;r<4;r++){const n=Ve[r];a[n]=parseFloat(t[e+"-"+n+i])||0}return a.width=a.left+a.right,a.height=a.top+a.bottom,a}function We(t,e){const{canvas:i,currentDevicePixelRatio:a}=e,r=Fe(i),n="border-box"===r.boxSizing,o=Be(r,"padding"),s=Be(r,"border","width"),{x:l,y:_,box:c}=function(t,e){const i=t.native||t,a=i.touches,r=a&&a.length?a[0]:i,{offsetX:n,offsetY:o}=r;let s,l,_=!1;if(((t,e,i)=>(t>0||e>0)&&(!i||!i.shadowRoot))(n,o,i.target))s=n,l=o;else{const t=e.getBoundingClientRect();s=r.clientX-t.left,l=r.clientY-t.top,_=!0}return{x:s,y:l,box:_}}(t,i),d=o.left+(c&&s.left),h=o.top+(c&&s.top);let{width:p,height:u}=e;return n&&(p-=o.width+s.width,u-=o.height+s.height),{x:Math.round((l-d)/p*i.width/a),y:Math.round((_-h)/u*i.height/a)}}const Ne=t=>Math.round(10*t)/10;function He(t,e,i){const a=e||1,r=Math.floor(t.height*a),n=Math.floor(t.width*a);t.height=r/a,t.width=n/a;const o=t.canvas;return o.style&&(i||!o.style.height&&!o.style.width)&&(o.style.height=`${t.height}px`,o.style.width=`${t.width}px`),(t.currentDevicePixelRatio!==a||o.height!==r||o.width!==n)&&(t.currentDevicePixelRatio=a,o.height=r,o.width=n,t.ctx.setTransform(a,0,0,a,0,0),!0)}const je=function(){let t=!1;try{const e={get passive(){return t=!0,!1}};window.addEventListener("test",null,e),window.removeEventListener("test",null,e)}catch(t){}return t}();function $e(t,e){const i=function(t,e){return Fe(t).getPropertyValue(e)}(t,e),a=i&&i.match(/^(\d+)(\.\d+)?px$/);return a?+a[1]:void 0}function Ze(t,e,i,a){return{x:t.x+i*(e.x-t.x),y:t.y+i*(e.y-t.y)}}function Ye(t,e,i,a){return{x:t.x+i*(e.x-t.x),y:"middle"===a?i<.5?t.y:e.y:"after"===a?i<1?t.y:e.y:i>0?e.y:t.y}}function Ue(t,e,i,a){const r={x:t.cp2x,y:t.cp2y},n={x:e.cp1x,y:e.cp1y},o=Ze(t,r,i),s=Ze(r,n,i),l=Ze(n,e,i),_=Ze(o,s,i),c=Ze(s,l,i);return Ze(_,c,i)}const Xe=new Map;function qe(t,e,i){return function(t,e){e=e||{};const i=t+JSON.stringify(e);let a=Xe.get(i);return a||(a=new Intl.NumberFormat(t,e),Xe.set(i,a)),a}(e,i).format(t)}function Ke(t,e,i){return t?function(t,e){return{x:i=>t+t+e-i,setWidth(t){e=t},textAlign:t=>"center"===t?t:"right"===t?"left":"right",xPlus:(t,e)=>t-e,leftForLtr:(t,e)=>t-e}}(e,i):{x:t=>t,setWidth(t){},textAlign:t=>t,xPlus:(t,e)=>t+e,leftForLtr:(t,e)=>t}}function Ge(t,e){let i,a;"ltr"!==e&&"rtl"!==e||(i=t.canvas.style,a=[i.getPropertyValue("direction"),i.getPropertyPriority("direction")],i.setProperty("direction",e,"important"),t.prevTextDirection=a)}function Je(t,e){void 0!==e&&(delete t.prevTextDirection,t.canvas.style.setProperty("direction",e[0],e[1]))}function Qe(t){return"angle"===t?{between:K,compare:X,normalize:q}:{between:J,compare:(t,e)=>t-e,normalize:t=>t}}function ti({start:t,end:e,count:i,loop:a,style:r}){return{start:t%i,end:e%i,loop:a&&(e-t+1)%i==0,style:r}}function ei(t,e,i){if(!i)return[t];const{property:a,start:r,end:n}=i,o=e.length,{compare:s,between:l,normalize:_}=Qe(a),{start:c,end:d,loop:h,style:p}=function(t,e,i){const{property:a,start:r,end:n}=i,{between:o,normalize:s}=Qe(a),l=e.length;let _,c,{start:d,end:h,loop:p}=t;if(p){for(d+=l,h+=l,_=0,c=l;_<c&&o(s(e[d%l][a]),r,n);++_)d--,h--;d%=l,h%=l}return h<d&&(h+=l),{start:d,end:h,loop:p,style:t.style}}(t,e,i),u=[];let m,f,g,b=!1,y=null;for(let t=c,i=c;t<=d;++t)f=e[t%o],f.skip||(m=_(f[a]),m!==g&&(b=l(m,r,n),null===y&&(b||l(r,g,m)&&0!==s(r,g))&&(y=0===s(m,r)?t:i),null!==y&&(!b||0===s(n,m)||l(n,g,m))&&(u.push(ti({start:y,end:t,loop:h,count:o,style:p})),y=null),i=t,g=m));return null!==y&&u.push(ti({start:y,end:d,loop:h,count:o,style:p})),u}function ii(t,e){const i=[],a=t.segments;for(let r=0;r<a.length;r++){const n=ei(a[r],t.points,e);n.length&&i.push(...n)}return i}function ai(t){return{backgroundColor:t.backgroundColor,borderCapStyle:t.borderCapStyle,borderDash:t.borderDash,borderDashOffset:t.borderDashOffset,borderJoinStyle:t.borderJoinStyle,borderWidth:t.borderWidth,borderColor:t.borderColor}}function ri(t,e){return e&&JSON.stringify(t)!==JSON.stringify(e)}var ni=new class{constructor(){this._request=null,this._charts=new Map,this._running=!1,this._lastDate=void 0}_notify(t,e,i,a){const r=e.listeners[a],n=e.duration;r.forEach((a=>a({chart:t,initial:e.initial,numSteps:n,currentStep:Math.min(i-e.start,n)})))}_refresh(){this._request||(this._running=!0,this._request=t.call(window,(()=>{this._update(),this._request=null,this._running&&this._refresh()})))}_update(t=Date.now()){let e=0;this._charts.forEach(((i,a)=>{if(!i.running||!i.items.length)return;const r=i.items;let n,o=r.length-1,s=!1;for(;o>=0;--o)n=r[o],n._active?(n._total>i.duration&&(i.duration=n._total),n.tick(t),s=!0):(r[o]=r[r.length-1],r.pop());s&&(a.draw(),this._notify(a,i,t,"progress")),r.length||(i.running=!1,this._notify(a,i,t,"complete"),i.initial=!1),e+=r.length})),this._lastDate=t,0===e&&(this._running=!1)}_getAnims(t){const e=this._charts;let i=e.get(t);return i||(i={running:!1,initial:!0,items:[],listeners:{complete:[],progress:[]}},e.set(t,i)),i}listen(t,e,i){this._getAnims(t).listeners[e].push(i)}add(t,e){e&&e.length&&this._getAnims(t).items.push(...e)}has(t){return this._getAnims(t).items.length>0}start(t){const e=this._charts.get(t);e&&(e.running=!0,e.start=Date.now(),e.duration=e.items.reduce(((t,e)=>Math.max(t,e._duration)),0),this._refresh())}running(t){if(!this._running)return!1;const e=this._charts.get(t);return!!(e&&e.running&&e.items.length)}stop(t){const e=this._charts.get(t);if(!e||!e.items.length)return;const i=e.items;let a=i.length-1;for(;a>=0;--a)i[a].cancel();e.items=[],this._notify(t,e,Date.now(),"complete")}remove(t){return this._charts.delete(t)}};const oi="transparent",si={boolean:(t,e,i)=>i>.5?e:t,color(t,e,i){const a=Rt(t||oi),r=a.valid&&Rt(e||oi);return r&&r.valid?r.mix(a,i).hexString():e},number:(t,e,i)=>t+(e-t)*i};class li{constructor(t,e,i,a){const r=e[i];a=se([t.to,a,r,t.from]);const n=se([t.from,r,a]);this._active=!0,this._fn=t.fn||si[t.type||typeof n],this._easing=it[t.easing]||it.linear,this._start=Math.floor(Date.now()+(t.delay||0)),this._duration=this._total=Math.floor(t.duration),this._loop=!!t.loop,this._target=e,this._prop=i,this._from=n,this._to=a,this._promises=void 0}active(){return this._active}update(t,e,i){if(this._active){this._notify(!1);const a=this._target[this._prop],r=i-this._start,n=this._duration-r;this._start=i,this._duration=Math.floor(Math.max(n,t.duration)),this._total+=r,this._loop=!!t.loop,this._to=se([t.to,e,a,t.from]),this._from=se([t.from,a,e])}}cancel(){this._active&&(this.tick(Date.now()),this._active=!1,this._notify(!1))}tick(t){const e=t-this._start,i=this._duration,a=this._prop,r=this._from,n=this._loop,o=this._to;let s;if(this._active=r!==o&&(n||e<i),!this._active)return this._target[a]=o,void this._notify(!0);e<0?this._target[a]=r:(s=e/i%2,s=n&&s>1?2-s:s,s=this._easing(Math.min(1,Math.max(0,s))),this._target[a]=this._fn(r,o,s))}wait(){const t=this._promises||(this._promises=[]);return new Promise(((e,i)=>{t.push({res:e,rej:i})}))}_notify(t){const e=t?"res":"rej",i=this._promises||[];for(let t=0;t<i.length;t++)i[t][e]()}}Bt.set("animation",{delay:void 0,duration:1e3,easing:"easeOutQuart",fn:void 0,from:void 0,loop:void 0,to:void 0,type:void 0});const _i=Object.keys(Bt.animation);Bt.describe("animation",{_fallback:!1,_indexable:!1,_scriptable:t=>"onProgress"!==t&&"onComplete"!==t&&"fn"!==t}),Bt.set("animations",{colors:{type:"color",properties:["color","borderColor","backgroundColor"]},numbers:{type:"number",properties:["x","y","borderWidth","radius","tension"]}}),Bt.describe("animations",{_fallback:"animation"}),Bt.set("transitions",{active:{animation:{duration:400}},resize:{animation:{duration:0}},show:{animations:{colors:{from:"transparent"},visible:{type:"boolean",duration:0}}},hide:{animations:{colors:{to:"transparent"},visible:{type:"boolean",easing:"linear",fn:t=>0|t}}}});class ci{constructor(t,e){this._chart=t,this._properties=new Map,this.configure(e)}configure(t){if(!_(t))return;const e=this._properties;Object.getOwnPropertyNames(t).forEach((i=>{const a=t[i];if(!_(a))return;const r={};for(const t of _i)r[t]=a[t];(l(a.properties)&&a.properties||[i]).forEach((t=>{t!==i&&e.has(t)||e.set(t,r)}))}))}_animateOptions(t,e){const i=e.options,a=function(t,e){if(!e)return;let i=t.options;if(i)return i.$shared&&(t.options=i=Object.assign({},i,{$shared:!1,$animations:{}})),i;t.options=e}(t,i);if(!a)return[];const r=this._createAnimations(a,i);return i.$shared&&function(t,e){const i=[],a=Object.keys(e);for(let e=0;e<a.length;e++){const r=t[a[e]];r&&r.active()&&i.push(r.wait())}return Promise.all(i)}(t.options.$animations,i).then((()=>{t.options=i}),(()=>{})),r}_createAnimations(t,e){const i=this._properties,a=[],r=t.$animations||(t.$animations={}),n=Object.keys(e),o=Date.now();let s;for(s=n.length-1;s>=0;--s){const l=n[s];if("$"===l.charAt(0))continue;if("options"===l){a.push(...this._animateOptions(t,e));continue}const _=e[l];let c=r[l];const d=i.get(l);if(c){if(d&&c.active()){c.update(d,_,o);continue}c.cancel()}d&&d.duration?(r[l]=c=new li(d,t,l,_),a.push(c)):t[l]=_}return a}update(t,e){if(0===this._properties.size)return void Object.assign(t,e);const i=this._createAnimations(t,e);return i.length?(ni.add(this._chart,i),!0):void 0}}function di(t,e){const i=t&&t.options||{},a=i.reverse,r=void 0===i.min?e:0,n=void 0===i.max?e:0;return{start:a?n:r,end:a?r:n}}function hi(t,e){const i=[],a=t._getSortedDatasetMetas(e);let r,n;for(r=0,n=a.length;r<n;++r)i.push(a[r].index);return i}function pi(t,e,i,a={}){const r=t.keys,n="single"===a.mode;let o,s,l,_;if(null!==e){for(o=0,s=r.length;o<s;++o){if(l=+r[o],l===i){if(a.all)continue;break}_=t.values[l],c(_)&&(n||0===e||V(e)===V(_))&&(e+=_)}return e}}function ui(t,e){const i=t&&t.options.stacked;return i||void 0===i&&void 0!==e.stack}function mi(t,e,i){const a=t[e]||(t[e]={});return a[i]||(a[i]={})}function fi(t,e,i,a){for(const r of e.getMatchingVisibleMetas(a).reverse()){const e=t[r.index];if(i&&e>0||!i&&e<0)return r.index}return null}function gi(t,e){const{chart:i,_cachedMeta:a}=t,r=i._stacks||(i._stacks={}),{iScale:n,vScale:o,index:s}=a,l=n.axis,_=o.axis,c=function(t,e,i){return`${t.id}.${e.id}.${i.stack||i.type}`}(n,o,a),d=e.length;let h;for(let t=0;t<d;++t){const i=e[t],{[l]:n,[_]:d}=i;h=(i._stacks||(i._stacks={}))[_]=mi(r,c,n),h[s]=d,h._top=fi(h,o,!0,a.type),h._bottom=fi(h,o,!1,a.type)}}function bi(t,e){const i=t.scales;return Object.keys(i).filter((t=>i[t].axis===e)).shift()}function yi(t,e){const i=t.controller.index,a=t.vScale&&t.vScale.axis;if(a){e=e||t._parsed;for(const t of e){const e=t._stacks;if(!e||void 0===e[a]||void 0===e[a][i])return;delete e[a][i]}}}const xi=t=>"reset"===t||"none"===t,wi=(t,e)=>e?t:Object.assign({},t);class vi{constructor(t,e){this.chart=t,this._ctx=t.ctx,this.index=e,this._cachedDataOpts={},this._cachedMeta=this.getMeta(),this._type=this._cachedMeta.type,this.options=void 0,this._parsing=!1,this._data=void 0,this._objectData=void 0,this._sharedOptions=void 0,this._drawStart=void 0,this._drawCount=void 0,this.enableOptionSharing=!1,this.$context=void 0,this._syncList=[],this.initialize()}initialize(){const t=this._cachedMeta;this.configure(),this.linkScales(),t._stacked=ui(t.vScale,t),this.addElements()}updateIndex(t){this.index!==t&&yi(this._cachedMeta),this.index=t}linkScales(){const t=this.chart,e=this._cachedMeta,i=this.getDataset(),a=(t,e,i,a)=>"x"===t?e:"r"===t?a:i,r=e.xAxisID=h(i.xAxisID,bi(t,"x")),n=e.yAxisID=h(i.yAxisID,bi(t,"y")),o=e.rAxisID=h(i.rAxisID,bi(t,"r")),s=e.indexAxis,l=e.iAxisID=a(s,r,n,o),_=e.vAxisID=a(s,n,r,o);e.xScale=this.getScaleForId(r),e.yScale=this.getScaleForId(n),e.rScale=this.getScaleForId(o),e.iScale=this.getScaleForId(l),e.vScale=this.getScaleForId(_)}getDataset(){return this.chart.data.datasets[this.index]}getMeta(){return this.chart.getDatasetMeta(this.index)}getScaleForId(t){return this.chart.scales[t]}_getOtherScale(t){const e=this._cachedMeta;return t===e.iScale?e.vScale:e.iScale}reset(){this._update("reset")}_destroy(){const t=this._cachedMeta;this._data&&pe(this._data,this),t._stacked&&yi(t)}_dataCheck(){const t=this.getDataset(),e=t.data||(t.data=[]),i=this._data;if(_(e))this._data=function(t){const e=Object.keys(t),i=new Array(e.length);let a,r,n;for(a=0,r=e.length;a<r;++a)n=e[a],i[a]={x:n,y:t[n]};return i}(e);else if(i!==e){if(i){pe(i,this);const t=this._cachedMeta;yi(t),t._parsed=[]}e&&Object.isExtensible(e)&&(this,(a=e)._chartjs?a._chartjs.listeners.push(this):(Object.defineProperty(a,"_chartjs",{configurable:!0,enumerable:!1,value:{listeners:[this]}}),he.forEach((t=>{const e="_onData"+S(t),i=a[t];Object.defineProperty(a,t,{configurable:!0,enumerable:!1,value(...t){const r=i.apply(this,t);return a._chartjs.listeners.forEach((i=>{"function"==typeof i[e]&&i[e](...t)})),r}})})))),this._syncList=[],this._data=e}var a}addElements(){const t=this._cachedMeta;this._dataCheck(),this.datasetElementType&&(t.dataset=new this.datasetElementType)}buildOrUpdateElements(t){const e=this._cachedMeta,i=this.getDataset();let a=!1;this._dataCheck();const r=e._stacked;e._stacked=ui(e.vScale,e),e.stack!==i.stack&&(a=!0,yi(e),e.stack=i.stack),this._resyncElements(t),(a||r!==e._stacked)&&gi(this,e._parsed)}configure(){const t=this.chart.config,e=t.datasetScopeKeys(this._type),i=t.getOptionScopes(this.getDataset(),e,!0);this.options=t.createResolver(i,this.getContext()),this._parsing=this.options.parsing,this._cachedDataOpts={}}parse(t,e){const{_cachedMeta:i,_data:a}=this,{iScale:r,_stacked:n}=i,o=r.axis;let s,c,d,h=0===t&&e===a.length||i._sorted,p=t>0&&i._parsed[t-1];if(!1===this._parsing)i._parsed=a,i._sorted=!0,d=a;else{d=l(a[t])?this.parseArrayData(i,a,t,e):_(a[t])?this.parseObjectData(i,a,t,e):this.parsePrimitiveData(i,a,t,e);const r=()=>null===c[o]||p&&c[o]<p[o];for(s=0;s<e;++s)i._parsed[s+t]=c=d[s],h&&(r()&&(h=!1),p=c);i._sorted=h}n&&gi(this,d)}parsePrimitiveData(t,e,i,a){const{iScale:r,vScale:n}=t,o=r.axis,s=n.axis,l=r.getLabels(),_=r===n,c=new Array(a);let d,h,p;for(d=0,h=a;d<h;++d)p=d+i,c[d]={[o]:_||r.parse(l[p],p),[s]:n.parse(e[p],p)};return c}parseArrayData(t,e,i,a){const{xScale:r,yScale:n}=t,o=new Array(a);let s,l,_,c;for(s=0,l=a;s<l;++s)_=s+i,c=e[_],o[s]={x:r.parse(c[0],_),y:n.parse(c[1],_)};return o}parseObjectData(t,e,i,a){const{xScale:r,yScale:n}=t,{xAxisKey:o="x",yAxisKey:s="y"}=this._parsing,l=new Array(a);let _,c,d,h;for(_=0,c=a;_<c;++_)d=_+i,h=e[d],l[_]={x:r.parse(M(h,o),d),y:n.parse(M(h,s),d)};return l}getParsed(t){return this._cachedMeta._parsed[t]}getDataElement(t){return this._cachedMeta.data[t]}applyStack(t,e,i){const a=this.chart,r=this._cachedMeta,n=e[t.axis];return pi({keys:hi(a,!0),values:e._stacks[t.axis]},n,r.index,{mode:i})}updateRangeFromParsed(t,e,i,a){const r=i[e.axis];let n=null===r?NaN:r;const o=a&&i._stacks[e.axis];a&&o&&(a.values=o,n=pi(a,r,this._cachedMeta.index)),t.min=Math.min(t.min,n),t.max=Math.max(t.max,n)}getMinMax(t,e){const i=this._cachedMeta,a=i._parsed,r=i._sorted&&t===i.iScale,n=a.length,o=this._getOtherScale(t),s=((t,e,i)=>t&&!e.hidden&&e._stacked&&{keys:hi(i,!0),values:null})(e,i,this.chart),l={min:Number.POSITIVE_INFINITY,max:Number.NEGATIVE_INFINITY},{min:_,max:d}=function(t){const{min:e,max:i,minDefined:a,maxDefined:r}=t.getUserBounds();return{min:a?e:Number.NEGATIVE_INFINITY,max:r?i:Number.POSITIVE_INFINITY}}(o);let h,p;function u(){p=a[h];const e=p[o.axis];return!c(p[t.axis])||_>e||d<e}for(h=0;h<n&&(u()||(this.updateRangeFromParsed(l,t,p,s),!r));++h);if(r)for(h=n-1;h>=0;--h)if(!u()){this.updateRangeFromParsed(l,t,p,s);break}return l}getAllParsedValues(t){const e=this._cachedMeta._parsed,i=[];let a,r,n;for(a=0,r=e.length;a<r;++a)n=e[a][t.axis],c(n)&&i.push(n);return i}getMaxOverflow(){return!1}getLabelAndValue(t){const e=this._cachedMeta,i=e.iScale,a=e.vScale,r=this.getParsed(t);return{label:i?""+i.getLabelForValue(r[i.axis]):"",value:a?""+a.getLabelForValue(r[a.axis]):""}}_update(t){const e=this._cachedMeta;this.update(t||"default"),e._clip=function(t){let e,i,a,r;return _(t)?(e=t.top,i=t.right,a=t.bottom,r=t.left):e=i=a=r=t,{top:e,right:i,bottom:a,left:r,disabled:!1===t}}(h(this.options.clip,function(t,e,i){if(!1===i)return!1;const a=di(t,i),r=di(e,i);return{top:r.end,right:a.end,bottom:r.start,left:a.start}}(e.xScale,e.yScale,this.getMaxOverflow())))}update(t){}draw(){const t=this._ctx,e=this.chart,i=this._cachedMeta,a=i.data||[],r=e.chartArea,n=[],o=this._drawStart||0,s=this._drawCount||a.length-o,l=this.options.drawActiveElementsOnTop;let _;for(i.dataset&&i.dataset.draw(t,r,o,s),_=o;_<o+s;++_){const e=a[_];e.hidden||(e.active&&l?n.push(e):e.draw(t,r))}for(_=0;_<n.length;++_)n[_].draw(t,r)}getStyle(t,e){const i=e?"active":"default";return void 0===t&&this._cachedMeta.dataset?this.resolveDatasetElementOptions(i):this.resolveDataElementOptions(t||0,i)}getContext(t,e,i){const a=this.getDataset();let r;if(t>=0&&t<this._cachedMeta.data.length){const e=this._cachedMeta.data[t];r=e.$context||(e.$context=function(t,e,i){return le(t,{active:!1,dataIndex:e,parsed:void 0,raw:void 0,element:i,index:e,mode:"default",type:"data"})}(this.getContext(),t,e)),r.parsed=this.getParsed(t),r.raw=a.data[t],r.index=r.dataIndex=t}else r=this.$context||(this.$context=function(t,e){return le(t,{active:!1,dataset:void 0,datasetIndex:e,index:e,mode:"default",type:"dataset"})}(this.chart.getContext(),this.index)),r.dataset=a,r.index=r.datasetIndex=this.index;return r.active=!!e,r.mode=i,r}resolveDatasetElementOptions(t){return this._resolveElementOptions(this.datasetElementType.id,t)}resolveDataElementOptions(t,e){return this._resolveElementOptions(this.dataElementType.id,e,t)}_resolveElementOptions(t,e="default",i){const a="active"===e,r=this._cachedDataOpts,n=t+"-"+e,o=r[n],s=this.enableOptionSharing&&P(i);if(o)return wi(o,s);const l=this.chart.config,_=l.datasetElementScopeKeys(this._type,t),c=a?[`${t}Hover`,"hover",t,""]:[t,""],d=l.getOptionScopes(this.getDataset(),_),h=Object.keys(Bt.elements[t]),p=l.resolveNamedOptions(d,h,(()=>this.getContext(i,a)),c);return p.$shared&&(p.$shared=s,r[n]=Object.freeze(wi(p,s))),p}_resolveAnimations(t,e,i){const a=this.chart,r=this._cachedDataOpts,n=`animation-${e}`,o=r[n];if(o)return o;let s;if(!1!==a.options.animation){const a=this.chart.config,r=a.datasetAnimationScopeKeys(this._type,e),n=a.getOptionScopes(this.getDataset(),r);s=a.createResolver(n,this.getContext(t,i,e))}const l=new ci(a,s&&s.animations);return s&&s._cacheable&&(r[n]=Object.freeze(l)),l}getSharedOptions(t){if(t.$shared)return this._sharedOptions||(this._sharedOptions=Object.assign({},t))}includeOptions(t,e){return!e||xi(t)||this.chart._animationsDisabled}updateElement(t,e,i,a){xi(a)?Object.assign(t,i):this._resolveAnimations(e,a).update(t,i)}updateSharedOptions(t,e,i){t&&!xi(e)&&this._resolveAnimations(void 0,e).update(t,i)}_setStyle(t,e,i,a){t.active=a;const r=this.getStyle(e,a);this._resolveAnimations(e,i,a).update(t,{options:!a&&this.getSharedOptions(r)||r})}removeHoverStyle(t,e,i){this._setStyle(t,i,"active",!1)}setHoverStyle(t,e,i){this._setStyle(t,i,"active",!0)}_removeDatasetHoverStyle(){const t=this._cachedMeta.dataset;t&&this._setStyle(t,void 0,"active",!1)}_setDatasetHoverStyle(){const t=this._cachedMeta.dataset;t&&this._setStyle(t,void 0,"active",!0)}_resyncElements(t){const e=this._data,i=this._cachedMeta.data;for(const[t,e,i]of this._syncList)this[t](e,i);this._syncList=[];const a=i.length,r=e.length,n=Math.min(r,a);n&&this.parse(0,n),r>a?this._insertElements(a,r-a,t):r<a&&this._removeElements(r,a-r)}_insertElements(t,e,i=!0){const a=this._cachedMeta,r=a.data,n=t+e;let o;const s=t=>{for(t.length+=e,o=t.length-1;o>=n;o--)t[o]=t[o-e]};for(s(r),o=t;o<n;++o)r[o]=new this.dataElementType;this._parsing&&s(a._parsed),this.parse(t,e),i&&this.updateElements(r,t,e,"reset")}updateElements(t,e,i,a){}_removeElements(t,e){const i=this._cachedMeta;if(this._parsing){const a=i._parsed.splice(t,e);i._stacked&&yi(i,a)}i.data.splice(t,e)}_sync(t){if(this._parsing)this._syncList.push(t);else{const[e,i,a]=t;this[e](i,a)}this.chart._dataChanges.push([this.index,...t])}_onDataPush(){const t=arguments.length;this._sync(["_insertElements",this.getDataset().data.length-t,t])}_onDataPop(){this._sync(["_removeElements",this._cachedMeta.data.length-1,1])}_onDataShift(){this._sync(["_removeElements",0,1])}_onDataSplice(t,e){e&&this._sync(["_removeElements",t,e]);const i=arguments.length-2;i&&this._sync(["_insertElements",t,i])}_onDataUnshift(){this._sync(["_insertElements",0,arguments.length])}}function ki(t){const e=t.iScale,i=function(t,e){if(!t._cache.$bar){const i=t.getMatchingVisibleMetas(e);let a=[];for(let e=0,r=i.length;e<r;e++)a=a.concat(i[e].controller.getAllParsedValues(t));t._cache.$bar=ue(a.sort(((t,e)=>t-e)))}return t._cache.$bar}(e,t.type);let a,r,n,o,s=e._length;const l=()=>{32767!==n&&-32768!==n&&(P(o)&&(s=Math.min(s,Math.abs(n-o)||s)),o=n)};for(a=0,r=i.length;a<r;++a)n=e.getPixelForValue(i[a]),l();for(o=void 0,a=0,r=e.ticks.length;a<r;++a)n=e.getPixelForTick(a),l();return s}function Mi(t,e,i,a){return l(t)?function(t,e,i,a){const r=i.parse(t[0],a),n=i.parse(t[1],a),o=Math.min(r,n),s=Math.max(r,n);let l=o,_=s;Math.abs(o)>Math.abs(s)&&(l=s,_=o),e[i.axis]=_,e._custom={barStart:l,barEnd:_,start:r,end:n,min:o,max:s}}(t,e,i,a):e[i.axis]=i.parse(t,a),e}function Si(t,e,i,a){const r=t.iScale,n=t.vScale,o=r.getLabels(),s=r===n,l=[];let _,c,d,h;for(_=i,c=i+a;_<c;++_)h=e[_],d={},d[r.axis]=s||r.parse(o[_],_),l.push(Mi(h,d,n,_));return l}function Pi(t){return t&&void 0!==t.barStart&&void 0!==t.barEnd}function Di(t,e,i,a){let r=e.borderSkipped;const n={};if(!r)return void(t.borderSkipped=n);const{start:o,end:s,reverse:l,top:_,bottom:c}=function(t){let e,i,a,r,n;return t.horizontal?(e=t.base>t.x,i="left",a="right"):(e=t.base<t.y,i="bottom",a="top"),e?(r="end",n="start"):(r="start",n="end"),{start:i,end:a,reverse:e,top:r,bottom:n}}(t);"middle"===r&&i&&(t.enableBorderRadius=!0,(i._top||0)===a?r=_:(i._bottom||0)===a?r=c:(n[Ti(c,o,s,l)]=!0,r=_)),n[Ti(r,o,s,l)]=!0,t.borderSkipped=n}function Ti(t,e,i,a){var r,n,o;return a?(o=i,t=Ci(t=(r=t)===(n=e)?o:r===o?n:r,i,e)):t=Ci(t,e,i),t}function Ci(t,e,i){return"start"===t?e:"end"===t?i:t}function Oi(t,{inflateAmount:e},i){t.inflateAmount="auto"===e?1===i?.33:0:e}vi.defaults={},vi.prototype.datasetElementType=null,vi.prototype.dataElementType=null;class Ai extends vi{parsePrimitiveData(t,e,i,a){return Si(t,e,i,a)}parseArrayData(t,e,i,a){return Si(t,e,i,a)}parseObjectData(t,e,i,a){const{iScale:r,vScale:n}=t,{xAxisKey:o="x",yAxisKey:s="y"}=this._parsing,l="x"===r.axis?o:s,_="x"===n.axis?o:s,c=[];let d,h,p,u;for(d=i,h=i+a;d<h;++d)u=e[d],p={},p[r.axis]=r.parse(M(u,l),d),c.push(Mi(M(u,_),p,n,d));return c}updateRangeFromParsed(t,e,i,a){super.updateRangeFromParsed(t,e,i,a);const r=i._custom;r&&e===this._cachedMeta.vScale&&(t.min=Math.min(t.min,r.min),t.max=Math.max(t.max,r.max))}getMaxOverflow(){return 0}getLabelAndValue(t){const e=this._cachedMeta,{iScale:i,vScale:a}=e,r=this.getParsed(t),n=r._custom,o=Pi(n)?"["+n.start+", "+n.end+"]":""+a.getLabelForValue(r[a.axis]);return{label:""+i.getLabelForValue(r[i.axis]),value:o}}initialize(){this.enableOptionSharing=!0,super.initialize(),this._cachedMeta.stack=this.getDataset().stack}update(t){const e=this._cachedMeta;this.updateElements(e.data,0,e.data.length,t)}updateElements(t,e,i,a){const r="reset"===a,{index:n,_cachedMeta:{vScale:o}}=this,l=o.getBasePixel(),_=o.isHorizontal(),c=this._getRuler(),d=this.resolveDataElementOptions(e,a),h=this.getSharedOptions(d),p=this.includeOptions(a,h);this.updateSharedOptions(h,a,d);for(let d=e;d<e+i;d++){const e=this.getParsed(d),i=r||s(e[o.axis])?{base:l,head:l}:this._calculateBarValuePixels(d),u=this._calculateBarIndexPixels(d,c),m=(e._stacks||{})[o.axis],f={horizontal:_,base:i.base,enableBorderRadius:!m||Pi(e._custom)||n===m._top||n===m._bottom,x:_?i.head:u.center,y:_?u.center:i.head,height:_?u.size:Math.abs(i.size),width:_?Math.abs(i.size):u.size};p&&(f.options=h||this.resolveDataElementOptions(d,t[d].active?"active":a));const g=f.options||t[d].options;Di(f,g,m,n),Oi(f,g,c.ratio),this.updateElement(t[d],d,f,a)}}_getStacks(t,e){const i=this._cachedMeta.iScale,a=i.getMatchingVisibleMetas(this._type),r=i.options.stacked,n=a.length,o=[];let l,_;for(l=0;l<n;++l)if(_=a[l],_.controller.options.grouped){if(void 0!==e){const t=_.controller.getParsed(e)[_.controller._cachedMeta.vScale.axis];if(s(t)||isNaN(t))continue}if((!1===r||-1===o.indexOf(_.stack)||void 0===r&&void 0===_.stack)&&o.push(_.stack),_.index===t)break}return o.length||o.push(void 0),o}_getStackCount(t){return this._getStacks(void 0,t).length}_getStackIndex(t,e,i){const a=this._getStacks(t,i),r=void 0!==e?a.indexOf(e):-1;return-1===r?a.length-1:r}_getRuler(){const t=this.options,e=this._cachedMeta,i=e.iScale,a=[];let r,n;for(r=0,n=e.data.length;r<n;++r)a.push(i.getPixelForValue(this.getParsed(r)[i.axis],r));const o=t.barThickness;return{min:o||ki(e),pixels:a,start:i._startPixel,end:i._endPixel,stackCount:this._getStackCount(),scale:i,grouped:t.grouped,ratio:o?1:t.categoryPercentage*t.barPercentage}}_calculateBarValuePixels(t){const{_cachedMeta:{vScale:e,_stacked:i},options:{base:a,minBarLength:r}}=this,n=a||0,o=this.getParsed(t),l=o._custom,_=Pi(l);let c,d,h=o[e.axis],p=0,u=i?this.applyStack(e,o,i):h;u!==h&&(p=u-h,u=h),_&&(h=l.barStart,u=l.barEnd-l.barStart,0!==h&&V(h)!==V(l.barEnd)&&(p=0),p+=h);const m=s(a)||_?p:a;let f=e.getPixelForValue(m);if(c=this.chart.getDataVisibility(t)?e.getPixelForValue(p+u):f,d=c-f,Math.abs(d)<r&&(d=function(t,e,i){return 0!==t?V(t):(e.isHorizontal()?1:-1)*(e.min>=i?1:-1)}(d,e,n)*r,h===n&&(f-=d/2),c=f+d),f===e.getPixelForValue(n)){const t=V(d)*e.getLineWidthForValue(n)/2;f+=t,d-=t}return{size:d,base:f,head:c,center:c+d/2}}_calculateBarIndexPixels(t,e){const i=e.scale,a=this.options,r=a.skipNull,n=h(a.maxBarThickness,1/0);let o,l;if(e.grouped){const i=r?this._getStackCount(t):e.stackCount,_="flex"===a.barThickness?function(t,e,i,a){const r=e.pixels,n=r[t];let o=t>0?r[t-1]:null,s=t<r.length-1?r[t+1]:null;const l=i.categoryPercentage;null===o&&(o=n-(null===s?e.end-e.start:s-n)),null===s&&(s=n+n-o);const _=n-(n-Math.min(o,s))/2*l;return{chunk:Math.abs(s-o)/2*l/a,ratio:i.barPercentage,start:_}}(t,e,a,i):function(t,e,i,a){const r=i.barThickness;let n,o;return s(r)?(n=e.min*i.categoryPercentage,o=i.barPercentage):(n=r*a,o=1),{chunk:n/a,ratio:o,start:e.pixels[t]-n/2}}(t,e,a,i),c=this._getStackIndex(this.index,this._cachedMeta.stack,r?t:void 0);o=_.start+_.chunk*c+_.chunk/2,l=Math.min(n,_.chunk*_.ratio)}else o=i.getPixelForValue(this.getParsed(t)[i.axis],t),l=Math.min(n,e.min*e.ratio);return{base:o-l/2,head:o+l/2,center:o,size:l}}draw(){const t=this._cachedMeta,e=t.vScale,i=t.data,a=i.length;let r=0;for(;r<a;++r)null!==this.getParsed(r)[e.axis]&&i[r].draw(this._ctx)}}Ai.id="bar",Ai.defaults={datasetElementType:!1,dataElementType:"bar",categoryPercentage:.8,barPercentage:.9,grouped:!0,animations:{numbers:{type:"number",properties:["x","y","base","width","height"]}}},Ai.overrides={scales:{_index_:{type:"category",offset:!0,grid:{offset:!0}},_value_:{type:"linear",beginAtZero:!0}}};class Li extends vi{initialize(){this.enableOptionSharing=!0,super.initialize()}parsePrimitiveData(t,e,i,a){const r=super.parsePrimitiveData(t,e,i,a);for(let t=0;t<r.length;t++)r[t]._custom=this.resolveDataElementOptions(t+i).radius;return r}parseArrayData(t,e,i,a){const r=super.parseArrayData(t,e,i,a);for(let t=0;t<r.length;t++){const a=e[i+t];r[t]._custom=h(a[2],this.resolveDataElementOptions(t+i).radius)}return r}parseObjectData(t,e,i,a){const r=super.parseObjectData(t,e,i,a);for(let t=0;t<r.length;t++){const a=e[i+t];r[t]._custom=h(a&&a.r&&+a.r,this.resolveDataElementOptions(t+i).radius)}return r}getMaxOverflow(){const t=this._cachedMeta.data;let e=0;for(let i=t.length-1;i>=0;--i)e=Math.max(e,t[i].size(this.resolveDataElementOptions(i))/2);return e>0&&e}getLabelAndValue(t){const e=this._cachedMeta,{xScale:i,yScale:a}=e,r=this.getParsed(t),n=i.getLabelForValue(r.x),o=a.getLabelForValue(r.y),s=r._custom;return{label:e.label,value:"("+n+", "+o+(s?", "+s:"")+")"}}update(t){const e=this._cachedMeta.data;this.updateElements(e,0,e.length,t)}updateElements(t,e,i,a){const r="reset"===a,{iScale:n,vScale:o}=this._cachedMeta,s=this.resolveDataElementOptions(e,a),l=this.getSharedOptions(s),_=this.includeOptions(a,l),c=n.axis,d=o.axis;for(let s=e;s<e+i;s++){const e=t[s],i=!r&&this.getParsed(s),l={},h=l[c]=r?n.getPixelForDecimal(.5):n.getPixelForValue(i[c]),p=l[d]=r?o.getBasePixel():o.getPixelForValue(i[d]);l.skip=isNaN(h)||isNaN(p),_&&(l.options=this.resolveDataElementOptions(s,e.active?"active":a),r&&(l.options.radius=0)),this.updateElement(e,s,l,a)}this.updateSharedOptions(l,a,s)}resolveDataElementOptions(t,e){const i=this.getParsed(t);let a=super.resolveDataElementOptions(t,e);a.$shared&&(a=Object.assign({},a,{$shared:!1}));const r=a.radius;return"active"!==e&&(a.radius=0),a.radius+=h(i&&i._custom,r),a}}Li.id="bubble",Li.defaults={datasetElementType:!1,dataElementType:"point",animations:{numbers:{type:"number",properties:["x","y","borderWidth","radius"]}}},Li.overrides={scales:{x:{type:"linear"},y:{type:"linear"}},plugins:{tooltip:{callbacks:{title:()=>""}}}};class Ri extends vi{constructor(t,e){super(t,e),this.enableOptionSharing=!0,this.innerRadius=void 0,this.outerRadius=void 0,this.offsetX=void 0,this.offsetY=void 0}linkScales(){}parse(t,e){const i=this.getDataset().data,a=this._cachedMeta;if(!1===this._parsing)a._parsed=i;else{let r,n,o=t=>+i[t];if(_(i[t])){const{key:t="value"}=this._parsing;o=e=>+M(i[e],t)}for(r=t,n=t+e;r<n;++r)a._parsed[r]=o(r)}}_getRotation(){return j(this.options.rotation-90)}_getCircumference(){return j(this.options.circumference)}_getRotationExtents(){let t=O,e=-O;for(let i=0;i<this.chart.data.datasets.length;++i)if(this.chart.isDatasetVisible(i)){const a=this.chart.getDatasetMeta(i).controller,r=a._getRotation(),n=a._getCircumference();t=Math.min(t,r),e=Math.max(e,r+n)}return{rotation:t,circumference:e-t}}update(t){const e=this.chart,{chartArea:i}=e,a=this._cachedMeta,r=a.data,n=this.getMaxBorderWidth()+this.getMaxOffset(r)+this.options.spacing,o=Math.max((Math.min(i.width,i.height)-n)/2,0),s=Math.min((_=o,"string"==typeof(l=this.options.cutout)&&l.endsWith("%")?parseFloat(l)/100:l/_),1);var l,_;const c=this._getRingWeight(this.index),{circumference:d,rotation:h}=this._getRotationExtents(),{ratioX:u,ratioY:m,offsetX:f,offsetY:g}=function(t,e,i){let a=1,r=1,n=0,o=0;if(e<O){const s=t,l=s+e,_=Math.cos(s),c=Math.sin(s),d=Math.cos(l),h=Math.sin(l),p=(t,e,a)=>K(t,s,l,!0)?1:Math.max(e,e*i,a,a*i),u=(t,e,a)=>K(t,s,l,!0)?-1:Math.min(e,e*i,a,a*i),m=p(0,_,d),f=p(E,c,h),g=u(C,_,d),b=u(C+E,c,h);a=(m-g)/2,r=(f-b)/2,n=-(m+g)/2,o=-(f+b)/2}return{ratioX:a,ratioY:r,offsetX:n,offsetY:o}}(h,d,s),b=(i.width-n)/u,y=(i.height-n)/m,x=Math.max(Math.min(b,y)/2,0),w=p(this.options.radius,x),v=(w-Math.max(w*s,0))/this._getVisibleDatasetWeightTotal();this.offsetX=f*w,this.offsetY=g*w,a.total=this.calculateTotal(),this.outerRadius=w-v*this._getRingWeightOffset(this.index),this.innerRadius=Math.max(this.outerRadius-v*c,0),this.updateElements(r,0,r.length,t)}_circumference(t,e){const i=this.options,a=this._cachedMeta,r=this._getCircumference();return e&&i.animation.animateRotate||!this.chart.getDataVisibility(t)||null===a._parsed[t]||a.data[t].hidden?0:this.calculateCircumference(a._parsed[t]*r/O)}updateElements(t,e,i,a){const r="reset"===a,n=this.chart,o=n.chartArea,s=n.options.animation,l=(o.left+o.right)/2,_=(o.top+o.bottom)/2,c=r&&s.animateScale,d=c?0:this.innerRadius,h=c?0:this.outerRadius,p=this.resolveDataElementOptions(e,a),u=this.getSharedOptions(p),m=this.includeOptions(a,u);let f,g=this._getRotation();for(f=0;f<e;++f)g+=this._circumference(f,r);for(f=e;f<e+i;++f){const e=this._circumference(f,r),i=t[f],n={x:l+this.offsetX,y:_+this.offsetY,startAngle:g,endAngle:g+e,circumference:e,outerRadius:h,innerRadius:d};m&&(n.options=u||this.resolveDataElementOptions(f,i.active?"active":a)),g+=e,this.updateElement(i,f,n,a)}this.updateSharedOptions(u,a,p)}calculateTotal(){const t=this._cachedMeta,e=t.data;let i,a=0;for(i=0;i<e.length;i++){const r=t._parsed[i];null===r||isNaN(r)||!this.chart.getDataVisibility(i)||e[i].hidden||(a+=Math.abs(r))}return a}calculateCircumference(t){const e=this._cachedMeta.total;return e>0&&!isNaN(t)?O*(Math.abs(t)/e):0}getLabelAndValue(t){const e=this._cachedMeta,i=this.chart,a=i.data.labels||[],r=qe(e._parsed[t],i.options.locale);return{label:a[t]||"",value:r}}getMaxBorderWidth(t){let e=0;const i=this.chart;let a,r,n,o,s;if(!t)for(a=0,r=i.data.datasets.length;a<r;++a)if(i.isDatasetVisible(a)){n=i.getDatasetMeta(a),t=n.data,o=n.controller;break}if(!t)return 0;for(a=0,r=t.length;a<r;++a)s=o.resolveDataElementOptions(a),"inner"!==s.borderAlign&&(e=Math.max(e,s.borderWidth||0,s.hoverBorderWidth||0));return e}getMaxOffset(t){let e=0;for(let i=0,a=t.length;i<a;++i){const t=this.resolveDataElementOptions(i);e=Math.max(e,t.offset||0,t.hoverOffset||0)}return e}_getRingWeightOffset(t){let e=0;for(let i=0;i<t;++i)this.chart.isDatasetVisible(i)&&(e+=this._getRingWeight(i));return e}_getRingWeight(t){return Math.max(h(this.chart.data.datasets[t].weight,1),0)}_getVisibleDatasetWeightTotal(){return this._getRingWeightOffset(this.chart.data.datasets.length)||1}}Ri.id="doughnut",Ri.defaults={datasetElementType:!1,dataElementType:"arc",animation:{animateRotate:!0,animateScale:!1},animations:{numbers:{type:"number",properties:["circumference","endAngle","innerRadius","outerRadius","startAngle","x","y","offset","borderWidth","spacing"]}},cutout:"50%",rotation:0,circumference:360,radius:"100%",spacing:0,indexAxis:"r"},Ri.descriptors={_scriptable:t=>"spacing"!==t,_indexable:t=>"spacing"!==t},Ri.overrides={aspectRatio:1,plugins:{legend:{labels:{generateLabels(t){const e=t.data;if(e.labels.length&&e.datasets.length){const{labels:{pointStyle:i}}=t.legend.options;return e.labels.map(((e,a)=>{const r=t.getDatasetMeta(0).controller.getStyle(a);return{text:e,fillStyle:r.backgroundColor,strokeStyle:r.borderColor,lineWidth:r.borderWidth,pointStyle:i,hidden:!t.getDataVisibility(a),index:a}}))}return[]}},onClick(t,e,i){i.chart.toggleDataVisibility(e.index),i.chart.update()}},tooltip:{callbacks:{title:()=>"",label(t){let e=t.label;const i=": "+t.formattedValue;return l(e)?(e=e.slice(),e[0]+=i):e+=i,e}}}}};class Ei extends vi{initialize(){this.enableOptionSharing=!0,super.initialize()}update(t){const e=this._cachedMeta,{dataset:i,data:a=[],_dataset:r}=e,n=this.chart._animationsDisabled;let{start:o,count:s}=function(t,e,i){const a=e.length;let r=0,n=a;if(t._sorted){const{iScale:o,_parsed:s}=t,l=o.axis,{min:_,max:c,minDefined:d,maxDefined:h}=o.getUserBounds();d&&(r=G(Math.min(ce(s,o.axis,_).lo,i?a:ce(e,l,o.getPixelForValue(_)).lo),0,a-1)),n=h?G(Math.max(ce(s,o.axis,c).hi+1,i?0:ce(e,l,o.getPixelForValue(c)).hi+1),r,a)-r:a-r}return{start:r,count:n}}(e,a,n);this._drawStart=o,this._drawCount=s,function(t){const{xScale:e,yScale:i,_scaleRanges:a}=t,r={xmin:e.min,xmax:e.max,ymin:i.min,ymax:i.max};if(!a)return t._scaleRanges=r,!0;const n=a.xmin!==e.min||a.xmax!==e.max||a.ymin!==i.min||a.ymax!==i.max;return Object.assign(a,r),n}(e)&&(o=0,s=a.length),i._chart=this.chart,i._datasetIndex=this.index,i._decimated=!!r._decimated,i.points=a;const l=this.resolveDatasetElementOptions(t);this.options.showLine||(l.borderWidth=0),l.segment=this.options.segment,this.updateElement(i,void 0,{animated:!n,options:l},t),this.updateElements(a,o,s,t)}updateElements(t,e,i,a){const r="reset"===a,{iScale:n,vScale:o,_stacked:l,_dataset:_}=this._cachedMeta,c=this.resolveDataElementOptions(e,a),d=this.getSharedOptions(c),h=this.includeOptions(a,d),p=n.axis,u=o.axis,{spanGaps:m,segment:f}=this.options,g=W(m)?m:Number.POSITIVE_INFINITY,b=this.chart._animationsDisabled||r||"none"===a;let y=e>0&&this.getParsed(e-1);for(let c=e;c<e+i;++c){const e=t[c],i=this.getParsed(c),m=b?e:{},x=s(i[u]),w=m[p]=n.getPixelForValue(i[p],c),v=m[u]=r||x?o.getBasePixel():o.getPixelForValue(l?this.applyStack(o,i,l):i[u],c);m.skip=isNaN(w)||isNaN(v)||x,m.stop=c>0&&i[p]-y[p]>g,f&&(m.parsed=i,m.raw=_.data[c]),h&&(m.options=d||this.resolveDataElementOptions(c,e.active?"active":a)),b||this.updateElement(e,c,m,a),y=i}this.updateSharedOptions(d,a,c)}getMaxOverflow(){const t=this._cachedMeta,e=t.dataset,i=e.options&&e.options.borderWidth||0,a=t.data||[];if(!a.length)return i;const r=a[0].size(this.resolveDataElementOptions(0)),n=a[a.length-1].size(this.resolveDataElementOptions(a.length-1));return Math.max(i,r,n)/2}draw(){const t=this._cachedMeta;t.dataset.updateControlPoints(this.chart.chartArea,t.iScale.axis),super.draw()}}Ei.id="line",Ei.defaults={datasetElementType:"line",dataElementType:"point",showLine:!0,spanGaps:!1},Ei.overrides={scales:{_index_:{type:"category"},_value_:{type:"linear"}}};class Ii extends vi{constructor(t,e){super(t,e),this.innerRadius=void 0,this.outerRadius=void 0}getLabelAndValue(t){const e=this._cachedMeta,i=this.chart,a=i.data.labels||[],r=qe(e._parsed[t].r,i.options.locale);return{label:a[t]||"",value:r}}update(t){const e=this._cachedMeta.data;this._updateRadius(),this.updateElements(e,0,e.length,t)}_updateRadius(){const t=this.chart,e=t.chartArea,i=t.options,a=Math.min(e.right-e.left,e.bottom-e.top),r=Math.max(a/2,0),n=(r-Math.max(i.cutoutPercentage?r/100*i.cutoutPercentage:1,0))/t.getVisibleDatasetCount();this.outerRadius=r-n*this.index,this.innerRadius=this.outerRadius-n}updateElements(t,e,i,a){const r="reset"===a,n=this.chart,o=this.getDataset(),s=n.options.animation,l=this._cachedMeta.rScale,_=l.xCenter,c=l.yCenter,d=l.getIndexAngle(0)-.5*C;let h,p=d;const u=360/this.countVisibleElements();for(h=0;h<e;++h)p+=this._computeAngle(h,a,u);for(h=e;h<e+i;h++){const e=t[h];let i=p,m=p+this._computeAngle(h,a,u),f=n.getDataVisibility(h)?l.getDistanceFromCenterForValue(o.data[h]):0;p=m,r&&(s.animateScale&&(f=0),s.animateRotate&&(i=m=d));const g={x:_,y:c,innerRadius:0,outerRadius:f,startAngle:i,endAngle:m,options:this.resolveDataElementOptions(h,e.active?"active":a)};this.updateElement(e,h,g,a)}}countVisibleElements(){const t=this.getDataset(),e=this._cachedMeta;let i=0;return e.data.forEach(((e,a)=>{!isNaN(t.data[a])&&this.chart.getDataVisibility(a)&&i++})),i}_computeAngle(t,e,i){return this.chart.getDataVisibility(t)?j(this.resolveDataElementOptions(t,e).angle||i):0}}Ii.id="polarArea",Ii.defaults={dataElementType:"arc",animation:{animateRotate:!0,animateScale:!0},animations:{numbers:{type:"number",properties:["x","y","startAngle","endAngle","innerRadius","outerRadius"]}},indexAxis:"r",startAngle:0},Ii.overrides={aspectRatio:1,plugins:{legend:{labels:{generateLabels(t){const e=t.data;if(e.labels.length&&e.datasets.length){const{labels:{pointStyle:i}}=t.legend.options;return e.labels.map(((e,a)=>{const r=t.getDatasetMeta(0).controller.getStyle(a);return{text:e,fillStyle:r.backgroundColor,strokeStyle:r.borderColor,lineWidth:r.borderWidth,pointStyle:i,hidden:!t.getDataVisibility(a),index:a}}))}return[]}},onClick(t,e,i){i.chart.toggleDataVisibility(e.index),i.chart.update()}},tooltip:{callbacks:{title:()=>"",label:t=>t.chart.data.labels[t.dataIndex]+": "+t.formattedValue}}},scales:{r:{type:"radialLinear",angleLines:{display:!1},beginAtZero:!0,grid:{circular:!0},pointLabels:{display:!1},startAngle:0}}};class zi extends Ri{}zi.id="pie",zi.defaults={cutout:0,rotation:0,circumference:360,radius:"100%"};class Fi extends vi{getLabelAndValue(t){const e=this._cachedMeta.vScale,i=this.getParsed(t);return{label:e.getLabels()[t],value:""+e.getLabelForValue(i[e.axis])}}update(t){const e=this._cachedMeta,i=e.dataset,a=e.data||[],r=e.iScale.getLabels();if(i.points=a,"resize"!==t){const e=this.resolveDatasetElementOptions(t);this.options.showLine||(e.borderWidth=0);const n={_loop:!0,_fullLoop:r.length===a.length,options:e};this.updateElement(i,void 0,n,t)}this.updateElements(a,0,a.length,t)}updateElements(t,e,i,a){const r=this.getDataset(),n=this._cachedMeta.rScale,o="reset"===a;for(let s=e;s<e+i;s++){const e=t[s],i=this.resolveDataElementOptions(s,e.active?"active":a),l=n.getPointPositionForValue(s,r.data[s]),_=o?n.xCenter:l.x,c=o?n.yCenter:l.y,d={x:_,y:c,angle:l.angle,skip:isNaN(_)||isNaN(c),options:i};this.updateElement(e,s,d,a)}}}Fi.id="radar",Fi.defaults={datasetElementType:"line",dataElementType:"point",indexAxis:"r",showLine:!0,elements:{line:{fill:"start"}}},Fi.overrides={aspectRatio:1,scales:{r:{type:"radialLinear"}}};class Vi extends Ei{}Vi.id="scatter",Vi.defaults={showLine:!1,fill:!1},Vi.overrides={interaction:{mode:"point"},plugins:{tooltip:{callbacks:{title:()=>"",label:t=>"("+t.label+", "+t.formattedValue+")"}}},scales:{x:{type:"linear"},y:{type:"linear"}}};var Bi=Object.freeze({__proto__:null,BarController:Ai,BubbleController:Li,DoughnutController:Ri,LineController:Ei,PolarAreaController:Ii,PieController:zi,RadarController:Fi,ScatterController:Vi});function Wi(){throw new Error("This method is not implemented: Check that a complete date adapter is provided.")}class Ni{constructor(t){this.options=t||{}}formats(){return Wi()}parse(t,e){return Wi()}format(t,e){return Wi()}add(t,e,i){return Wi()}diff(t,e,i){return Wi()}startOf(t,e,i){return Wi()}endOf(t,e){return Wi()}}Ni.override=function(t){Object.assign(Ni.prototype,t)};var Hi={_date:Ni};function ji(t,e){return"native"in t?{x:t.x,y:t.y}:We(t,e)}function $i(t,e,i,a){const{controller:r,data:n,_sorted:o}=t,s=r._cachedMeta.iScale;if(s&&e===s.axis&&"r"!==e&&o&&n.length){const t=s._reversePixels?de:ce;if(!a)return t(n,e,i);if(r._sharedOptions){const a=n[0],r="function"==typeof a.getRange&&a.getRange(e);if(r){const a=t(n,e,i-r),o=t(n,e,i+r);return{lo:a.lo,hi:o.hi}}}}return{lo:0,hi:n.length-1}}function Zi(t,e,i,a,r){const n=t.getSortedVisibleDatasetMetas(),o=i[e];for(let t=0,i=n.length;t<i;++t){const{index:i,data:s}=n[t],{lo:l,hi:_}=$i(n[t],e,o,r);for(let t=l;t<=_;++t){const e=s[t];e.skip||a(e,i,t)}}}function Yi(t,e,i,a){const r=[];return Zt(e,t.chartArea,t._minPadding)?(Zi(t,i,e,(function(t,i,n){t.inRange(e.x,e.y,a)&&r.push({element:t,datasetIndex:i,index:n})}),!0),r):r}function Ui(t,e,i,a,r){return Zt(e,t.chartArea,t._minPadding)?"r"!==i||a?function(t,e,i,a,r){let n=[];const o=function(t){const e=-1!==t.indexOf("x"),i=-1!==t.indexOf("y");return function(t,a){const r=e?Math.abs(t.x-a.x):0,n=i?Math.abs(t.y-a.y):0;return Math.sqrt(Math.pow(r,2)+Math.pow(n,2))}}(i);let s=Number.POSITIVE_INFINITY;return Zi(t,i,e,(function(i,l,_){const c=i.inRange(e.x,e.y,r);if(a&&!c)return;const d=i.getCenterPoint(r);if(!Zt(d,t.chartArea,t._minPadding)&&!c)return;const h=o(e,d);h<s?(n=[{element:i,datasetIndex:l,index:_}],s=h):h===s&&n.push({element:i,datasetIndex:l,index:_})})),n}(t,e,i,a,r):function(t,e,i,a){let r=[];return Zi(t,i,e,(function(t,i,n){const{startAngle:o,endAngle:s}=t.getProps(["startAngle","endAngle"],a),{angle:l}=Y(t,{x:e.x,y:e.y});K(l,o,s)&&r.push({element:t,datasetIndex:i,index:n})})),r}(t,e,i,r):[]}function Xi(t,e,i,a){const r=ji(e,t),n=[],o=i.axis,s="x"===o?"inXRange":"inYRange";let l=!1;return function(t,e){const i=t.getSortedVisibleDatasetMetas();let a,r,n;for(let t=0,o=i.length;t<o;++t){({index:a,data:r}=i[t]);for(let t=0,i=r.length;t<i;++t)n=r[t],n.skip||e(n,a,t)}}(t,((t,e,i)=>{t[s](r[o],a)&&n.push({element:t,datasetIndex:e,index:i}),t.inRange(r.x,r.y,a)&&(l=!0)})),i.intersect&&!l?[]:n}var qi={modes:{index(t,e,i,a){const r=ji(e,t),n=i.axis||"x",o=i.intersect?Yi(t,r,n,a):Ui(t,r,n,!1,a),s=[];return o.length?(t.getSortedVisibleDatasetMetas().forEach((t=>{const e=o[0].index,i=t.data[e];i&&!i.skip&&s.push({element:i,datasetIndex:t.index,index:e})})),s):[]},dataset(t,e,i,a){const r=ji(e,t),n=i.axis||"xy";let o=i.intersect?Yi(t,r,n,a):Ui(t,r,n,!1,a);if(o.length>0){const e=o[0].datasetIndex,i=t.getDatasetMeta(e).data;o=[];for(let t=0;t<i.length;++t)o.push({element:i[t],datasetIndex:e,index:t})}return o},point:(t,e,i,a)=>Yi(t,ji(e,t),i.axis||"xy",a),nearest:(t,e,i,a)=>Ui(t,ji(e,t),i.axis||"xy",i.intersect,a),x:(t,e,i,a)=>Xi(t,e,{axis:"x",intersect:i.intersect},a),y:(t,e,i,a)=>Xi(t,e,{axis:"y",intersect:i.intersect},a)}};const Ki=["left","top","right","bottom"];function Gi(t,e){return t.filter((t=>t.pos===e))}function Ji(t,e){return t.filter((t=>-1===Ki.indexOf(t.pos)&&t.box.axis===e))}function Qi(t,e){return t.sort(((t,i)=>{const a=e?i:t,r=e?t:i;return a.weight===r.weight?a.index-r.index:a.weight-r.weight}))}function ta(t,e,i,a){return Math.max(t[i],e[i])+Math.max(t[a],e[a])}function ea(t,e){t.top=Math.max(t.top,e.top),t.left=Math.max(t.left,e.left),t.bottom=Math.max(t.bottom,e.bottom),t.right=Math.max(t.right,e.right)}function ia(t,e,i,a){const{pos:r,box:n}=i,o=t.maxPadding;if(!_(r)){i.size&&(t[r]-=i.size);const e=a[i.stack]||{size:0,count:1};e.size=Math.max(e.size,i.horizontal?n.height:n.width),i.size=e.size/e.count,t[r]+=i.size}n.getPadding&&ea(o,n.getPadding());const s=Math.max(0,e.outerWidth-ta(o,t,"left","right")),l=Math.max(0,e.outerHeight-ta(o,t,"top","bottom")),c=s!==t.w,d=l!==t.h;return t.w=s,t.h=l,i.horizontal?{same:c,other:d}:{same:d,other:c}}function aa(t,e){const i=e.maxPadding;return function(t){const a={left:0,top:0,right:0,bottom:0};return t.forEach((t=>{a[t]=Math.max(e[t],i[t])})),a}(t?["left","right"]:["top","bottom"])}function ra(t,e,i,a){const r=[];let n,o,s,l,_,c;for(n=0,o=t.length,_=0;n<o;++n){s=t[n],l=s.box,l.update(s.width||e.w,s.height||e.h,aa(s.horizontal,e));const{same:o,other:d}=ia(e,i,s,a);_|=o&&r.length,c=c||d,l.fullSize||r.push(s)}return _&&ra(r,e,i,a)||c}function na(t,e,i,a,r){t.top=i,t.left=e,t.right=e+a,t.bottom=i+r,t.width=a,t.height=r}function oa(t,e,i,a){const r=i.padding;let{x:n,y:o}=e;for(const s of t){const t=s.box,l=a[s.stack]||{count:1,placed:0,weight:1},_=s.stackWeight/l.weight||1;if(s.horizontal){const a=e.w*_,n=l.size||t.height;P(l.start)&&(o=l.start),t.fullSize?na(t,r.left,o,i.outerWidth-r.right-r.left,n):na(t,e.left+l.placed,o,a,n),l.start=o,l.placed+=a,o=t.bottom}else{const a=e.h*_,o=l.size||t.width;P(l.start)&&(n=l.start),t.fullSize?na(t,n,r.top,o,i.outerHeight-r.bottom-r.top):na(t,n,e.top+l.placed,o,a),l.start=n,l.placed+=a,n=t.right}}e.x=n,e.y=o}Bt.set("layout",{autoPadding:!0,padding:{top:0,right:0,bottom:0,left:0}});var sa={addBox(t,e){t.boxes||(t.boxes=[]),e.fullSize=e.fullSize||!1,e.position=e.position||"top",e.weight=e.weight||0,e._layers=e._layers||function(){return[{z:0,draw(t){e.draw(t)}}]},t.boxes.push(e)},removeBox(t,e){const i=t.boxes?t.boxes.indexOf(e):-1;-1!==i&&t.boxes.splice(i,1)},configure(t,e,i){e.fullSize=i.fullSize,e.position=i.position,e.weight=i.weight},update(t,e,i,a){if(!t)return;const r=ne(t.options.layout.padding),n=Math.max(e-r.width,0),o=Math.max(i-r.height,0),s=function(t){const e=function(t){const e=[];let i,a,r,n,o,s;for(i=0,a=(t||[]).length;i<a;++i)r=t[i],({position:n,options:{stack:o,stackWeight:s=1}}=r),e.push({index:i,box:r,pos:n,horizontal:r.isHorizontal(),weight:r.weight,stack:o&&n+o,stackWeight:s});return e}(t),i=Qi(e.filter((t=>t.box.fullSize)),!0),a=Qi(Gi(e,"left"),!0),r=Qi(Gi(e,"right")),n=Qi(Gi(e,"top"),!0),o=Qi(Gi(e,"bottom")),s=Ji(e,"x"),l=Ji(e,"y");return{fullSize:i,leftAndTop:a.concat(n),rightAndBottom:r.concat(l).concat(o).concat(s),chartArea:Gi(e,"chartArea"),vertical:a.concat(r).concat(l),horizontal:n.concat(o).concat(s)}}(t.boxes),l=s.vertical,_=s.horizontal;m(t.boxes,(t=>{"function"==typeof t.beforeLayout&&t.beforeLayout()}));const c=l.reduce(((t,e)=>e.box.options&&!1===e.box.options.display?t:t+1),0)||1,d=Object.freeze({outerWidth:e,outerHeight:i,padding:r,availableWidth:n,availableHeight:o,vBoxMaxWidth:n/2/c,hBoxMaxHeight:o/2}),h=Object.assign({},r);ea(h,ne(a));const p=Object.assign({maxPadding:h,w:n,h:o,x:r.left,y:r.top},r),u=function(t,e){const i=function(t){const e={};for(const i of t){const{stack:t,pos:a,stackWeight:r}=i;if(!t||!Ki.includes(a))continue;const n=e[t]||(e[t]={count:0,placed:0,weight:0,size:0});n.count++,n.weight+=r}return e}(t),{vBoxMaxWidth:a,hBoxMaxHeight:r}=e;let n,o,s;for(n=0,o=t.length;n<o;++n){s=t[n];const{fullSize:o}=s.box,l=i[s.stack],_=l&&s.stackWeight/l.weight;s.horizontal?(s.width=_?_*a:o&&e.availableWidth,s.height=r):(s.width=a,s.height=_?_*r:o&&e.availableHeight)}return i}(l.concat(_),d);ra(s.fullSize,p,d,u),ra(l,p,d,u),ra(_,p,d,u)&&ra(l,p,d,u),function(t){const e=t.maxPadding;function i(i){const a=Math.max(e[i]-t[i],0);return t[i]+=a,a}t.y+=i("top"),t.x+=i("left"),i("right"),i("bottom")}(p),oa(s.leftAndTop,p,d,u),p.x+=p.w,p.y+=p.h,oa(s.rightAndBottom,p,d,u),t.chartArea={left:p.left,top:p.top,right:p.left+p.w,bottom:p.top+p.h,height:p.h,width:p.w},m(s.chartArea,(e=>{const i=e.box;Object.assign(i,t.chartArea),i.update(p.w,p.h,{left:0,top:0,right:0,bottom:0})}))}};class la{acquireContext(t,e){}releaseContext(t){return!1}addEventListener(t,e,i){}removeEventListener(t,e,i){}getDevicePixelRatio(){return 1}getMaximumSize(t,e,i,a){return e=Math.max(0,e||t.width),i=i||t.height,{width:e,height:Math.max(0,a?Math.floor(e/a):i)}}isAttached(t){return!0}updateConfig(t){}}class _a extends la{acquireContext(t){return t&&t.getContext&&t.getContext("2d")||null}updateConfig(t){t.options.animation=!1}}const ca={touchstart:"mousedown",touchmove:"mousemove",touchend:"mouseup",pointerenter:"mouseenter",pointerdown:"mousedown",pointermove:"mousemove",pointerup:"mouseup",pointerleave:"mouseout",pointerout:"mouseout"},da=t=>null===t||""===t,ha=!!je&&{passive:!0};function pa(t,e,i){t.canvas.removeEventListener(e,i,ha)}function ua(t,e){for(const i of t)if(i===e||i.contains(e))return!0}function ma(t,e,i){const a=t.canvas,r=new MutationObserver((t=>{let e=!1;for(const i of t)e=e||ua(i.addedNodes,a),e=e&&!ua(i.removedNodes,a);e&&i()}));return r.observe(document,{childList:!0,subtree:!0}),r}function fa(t,e,i){const a=t.canvas,r=new MutationObserver((t=>{let e=!1;for(const i of t)e=e||ua(i.removedNodes,a),e=e&&!ua(i.addedNodes,a);e&&i()}));return r.observe(document,{childList:!0,subtree:!0}),r}const ga=new Map;let ba=0;function ya(){const t=window.devicePixelRatio;t!==ba&&(ba=t,ga.forEach(((e,i)=>{i.currentDevicePixelRatio!==t&&e()})))}function xa(t,i,a){const r=t.canvas,n=r&&Ie(r);if(!n)return;const o=e(((t,e)=>{const i=n.clientWidth;a(t,e),i<n.clientWidth&&a()}),window),s=new ResizeObserver((t=>{const e=t[0],i=e.contentRect.width,a=e.contentRect.height;0===i&&0===a||o(i,a)}));return s.observe(n),function(t,e){ga.size||window.addEventListener("resize",ya),ga.set(t,e)}(t,o),s}function wa(t,e,i){i&&i.disconnect(),"resize"===e&&function(t){ga.delete(t),ga.size||window.removeEventListener("resize",ya)}(t)}function va(t,i,a){const r=t.canvas,n=e((e=>{null!==t.ctx&&a(function(t,e){const i=ca[t.type]||t.type,{x:a,y:r}=We(t,e);return{type:i,chart:e,native:t,x:void 0!==a?a:null,y:void 0!==r?r:null}}(e,t))}),t,(t=>{const e=t[0];return[e,e.offsetX,e.offsetY]}));return function(t,e,i){t.addEventListener(e,i,ha)}(r,i,n),n}class ka extends la{acquireContext(t,e){const i=t&&t.getContext&&t.getContext("2d");return i&&i.canvas===t?(function(t,e){const i=t.style,a=t.getAttribute("height"),r=t.getAttribute("width");if(t.$chartjs={initial:{height:a,width:r,style:{display:i.display,height:i.height,width:i.width}}},i.display=i.display||"block",i.boxSizing=i.boxSizing||"border-box",da(r)){const e=$e(t,"width");void 0!==e&&(t.width=e)}if(da(a))if(""===t.style.height)t.height=t.width/(e||2);else{const e=$e(t,"height");void 0!==e&&(t.height=e)}}(t,e),i):null}releaseContext(t){const e=t.canvas;if(!e.$chartjs)return!1;const i=e.$chartjs.initial;["height","width"].forEach((t=>{const a=i[t];s(a)?e.removeAttribute(t):e.setAttribute(t,a)}));const a=i.style||{};return Object.keys(a).forEach((t=>{e.style[t]=a[t]})),e.width=e.width,delete e.$chartjs,!0}addEventListener(t,e,i){this.removeEventListener(t,e);const a=t.$proxies||(t.$proxies={}),r={attach:ma,detach:fa,resize:xa}[e]||va;a[e]=r(t,e,i)}removeEventListener(t,e){const i=t.$proxies||(t.$proxies={}),a=i[e];a&&(({attach:wa,detach:wa,resize:wa}[e]||pa)(t,e,a),i[e]=void 0)}getDevicePixelRatio(){return window.devicePixelRatio}getMaximumSize(t,e,i,a){return function(t,e,i,a){const r=Fe(t),n=Be(r,"margin"),o=ze(r.maxWidth,t,"clientWidth")||L,s=ze(r.maxHeight,t,"clientHeight")||L,l=function(t,e,i){let a,r;if(void 0===e||void 0===i){const n=Ie(t);if(n){const t=n.getBoundingClientRect(),o=Fe(n),s=Be(o,"border","width"),l=Be(o,"padding");e=t.width-l.width-s.width,i=t.height-l.height-s.height,a=ze(o.maxWidth,n,"clientWidth"),r=ze(o.maxHeight,n,"clientHeight")}else e=t.clientWidth,i=t.clientHeight}return{width:e,height:i,maxWidth:a||L,maxHeight:r||L}}(t,e,i);let{width:_,height:c}=l;if("content-box"===r.boxSizing){const t=Be(r,"border","width"),e=Be(r,"padding");_-=e.width+t.width,c-=e.height+t.height}return _=Math.max(0,_-n.width),c=Math.max(0,a?Math.floor(_/a):c-n.height),_=Ne(Math.min(_,o,l.maxWidth)),c=Ne(Math.min(c,s,l.maxHeight)),_&&!c&&(c=Ne(_/2)),{width:_,height:c}}(t,e,i,a)}isAttached(t){const e=Ie(t);return!(!e||!e.isConnected)}}class Ma{constructor(){this.x=void 0,this.y=void 0,this.active=!1,this.options=void 0,this.$animations=void 0}tooltipPosition(t){const{x:e,y:i}=this.getProps(["x","y"],t);return{x:e,y:i}}hasValue(){return W(this.x)&&W(this.y)}getProps(t,e){const i=this.$animations;if(!e||!i)return this;const a={};return t.forEach((t=>{a[t]=i[t]&&i[t].active()?i[t]._to:this[t]})),a}}Ma.defaults={},Ma.defaultRoutes=void 0;const Sa={values:t=>l(t)?t:""+t,numeric(t,e,i){if(0===t)return"0";const a=this.chart.options.locale;let r,n=t;if(i.length>1){const e=Math.max(Math.abs(i[0].value),Math.abs(i[i.length-1].value));(e<1e-4||e>1e15)&&(r="scientific"),n=function(t,e){let i=e.length>3?e[2].value-e[1].value:e[1].value-e[0].value;return Math.abs(i)>=1&&t!==Math.floor(t)&&(i=t-Math.floor(t)),i}(t,i)}const o=F(Math.abs(n)),s=Math.max(Math.min(-1*Math.floor(o),20),0),l={notation:r,minimumFractionDigits:s,maximumFractionDigits:s};return Object.assign(l,this.options.ticks.format),qe(t,a,l)},logarithmic(t,e,i){if(0===t)return"0";const a=t/Math.pow(10,Math.floor(F(t)));return 1===a||2===a||5===a?Sa.numeric.call(this,t,e,i):""}};var Pa={formatters:Sa};function Da(t,e,i,a,r){const n=h(a,0),o=Math.min(h(r,t.length),t.length);let s,l,_,c=0;for(i=Math.ceil(i),r&&(s=r-a,i=s/Math.floor(s/i)),_=n;_<0;)c++,_=Math.round(n+c*i);for(l=Math.max(n,0);l<o;l++)l===_&&(e.push(t[l]),c++,_=Math.round(n+c*i))}Bt.set("scale",{display:!0,offset:!1,reverse:!1,beginAtZero:!1,bounds:"ticks",grace:0,grid:{display:!0,lineWidth:1,drawBorder:!0,drawOnChartArea:!0,drawTicks:!0,tickLength:8,tickWidth:(t,e)=>e.lineWidth,tickColor:(t,e)=>e.color,offset:!1,borderDash:[],borderDashOffset:0,borderWidth:1},title:{display:!1,text:"",padding:{top:4,bottom:4}},ticks:{minRotation:0,maxRotation:50,mirror:!1,textStrokeWidth:0,textStrokeColor:"",padding:3,display:!0,autoSkip:!0,autoSkipPadding:3,labelOffset:0,callback:Pa.formatters.values,minor:{},major:{},align:"center",crossAlign:"near",showLabelBackdrop:!1,backdropColor:"rgba(255, 255, 255, 0.75)",backdropPadding:2}}),Bt.route("scale.ticks","color","","color"),Bt.route("scale.grid","color","","borderColor"),Bt.route("scale.grid","borderColor","","borderColor"),Bt.route("scale.title","color","","color"),Bt.describe("scale",{_fallback:!1,_scriptable:t=>!t.startsWith("before")&&!t.startsWith("after")&&"callback"!==t&&"parser"!==t,_indexable:t=>"borderDash"!==t&&"tickBorderDash"!==t}),Bt.describe("scales",{_fallback:"scale"}),Bt.describe("scale.ticks",{_scriptable:t=>"backdropPadding"!==t&&"callback"!==t,_indexable:t=>"backdropPadding"!==t});const Ta=(t,e,i)=>"top"===e||"left"===e?t[e]+i:t[e]-i;function Ca(t,e){const i=[],a=t.length/e,r=t.length;let n=0;for(;n<r;n+=a)i.push(t[Math.floor(n)]);return i}function Oa(t,e,i){const a=t.ticks.length,r=Math.min(e,a-1),n=t._startPixel,o=t._endPixel,s=1e-6;let l,_=t.getPixelForTick(r);if(!(i&&(l=1===a?Math.max(_-n,o-_):0===e?(t.getPixelForTick(1)-_)/2:(_-t.getPixelForTick(r-1))/2,_+=r<e?l:-l,_<n-s||_>o+s)))return _}function Aa(t){return t.drawTicks?t.tickLength:0}function La(t,e){if(!t.display)return 0;const i=oe(t.font,e),a=ne(t.padding);return(l(t.text)?t.text.length:1)*i.lineHeight+a.height}function Ra(t,e,i){let r=a(t);return(i&&"right"!==e||!i&&"right"===e)&&(r=(t=>"left"===t?"right":"right"===t?"left":t)(r)),r}class Ea extends Ma{constructor(t){super(),this.id=t.id,this.type=t.type,this.options=void 0,this.ctx=t.ctx,this.chart=t.chart,this.top=void 0,this.bottom=void 0,this.left=void 0,this.right=void 0,this.width=void 0,this.height=void 0,this._margins={left:0,right:0,top:0,bottom:0},this.maxWidth=void 0,this.maxHeight=void 0,this.paddingTop=void 0,this.paddingBottom=void 0,this.paddingLeft=void 0,this.paddingRight=void 0,this.axis=void 0,this.labelRotation=void 0,this.min=void 0,this.max=void 0,this._range=void 0,this.ticks=[],this._gridLineItems=null,this._labelItems=null,this._labelSizes=null,this._length=0,this._maxLength=0,this._longestTextCache={},this._startPixel=void 0,this._endPixel=void 0,this._reversePixels=!1,this._userMax=void 0,this._userMin=void 0,this._suggestedMax=void 0,this._suggestedMin=void 0,this._ticksLength=0,this._borderValue=0,this._cache={},this._dataLimitsCached=!1,this.$context=void 0}init(t){this.options=t.setContext(this.getContext()),this.axis=t.axis,this._userMin=this.parse(t.min),this._userMax=this.parse(t.max),this._suggestedMin=this.parse(t.suggestedMin),this._suggestedMax=this.parse(t.suggestedMax)}parse(t,e){return t}getUserBounds(){let{_userMin:t,_userMax:e,_suggestedMin:i,_suggestedMax:a}=this;return t=d(t,Number.POSITIVE_INFINITY),e=d(e,Number.NEGATIVE_INFINITY),i=d(i,Number.POSITIVE_INFINITY),a=d(a,Number.NEGATIVE_INFINITY),{min:d(t,i),max:d(e,a),minDefined:c(t),maxDefined:c(e)}}getMinMax(t){let e,{min:i,max:a,minDefined:r,maxDefined:n}=this.getUserBounds();if(r&&n)return{min:i,max:a};const o=this.getMatchingVisibleMetas();for(let s=0,l=o.length;s<l;++s)e=o[s].controller.getMinMax(this,t),r||(i=Math.min(i,e.min)),n||(a=Math.max(a,e.max));return i=n&&i>a?a:i,a=r&&i>a?i:a,{min:d(i,d(a,i)),max:d(a,d(i,a))}}getPadding(){return{left:this.paddingLeft||0,top:this.paddingTop||0,right:this.paddingRight||0,bottom:this.paddingBottom||0}}getTicks(){return this.ticks}getLabels(){const t=this.chart.data;return this.options.labels||(this.isHorizontal()?t.xLabels:t.yLabels)||t.labels||[]}beforeLayout(){this._cache={},this._dataLimitsCached=!1}beforeUpdate(){u(this.options.beforeUpdate,[this])}update(t,e,i){const{beginAtZero:a,grace:r,ticks:n}=this.options,o=n.sampleSize;this.beforeUpdate(),this.maxWidth=t,this.maxHeight=e,this._margins=i=Object.assign({left:0,right:0,top:0,bottom:0},i),this.ticks=null,this._labelSizes=null,this._gridLineItems=null,this._labelItems=null,this.beforeSetDimensions(),this.setDimensions(),this.afterSetDimensions(),this._maxLength=this.isHorizontal()?this.width+i.left+i.right:this.height+i.top+i.bottom,this._dataLimitsCached||(this.beforeDataLimits(),this.determineDataLimits(),this.afterDataLimits(),this._range=function(t,e,i){const{min:a,max:r}=t,n=p(e,(r-a)/2),o=(t,e)=>i&&0===t?0:t+e;return{min:o(a,-Math.abs(n)),max:o(r,n)}}(this,r,a),this._dataLimitsCached=!0),this.beforeBuildTicks(),this.ticks=this.buildTicks()||[],this.afterBuildTicks();const l=o<this.ticks.length;this._convertTicksToLabels(l?Ca(this.ticks,o):this.ticks),this.configure(),this.beforeCalculateLabelRotation(),this.calculateLabelRotation(),this.afterCalculateLabelRotation(),n.display&&(n.autoSkip||"auto"===n.source)&&(this.ticks=function(t,e){const i=t.options.ticks,a=i.maxTicksLimit||function(t){const e=t.options.offset,i=t._tickSize(),a=t._length/i+(e?0:1),r=t._maxLength/i;return Math.floor(Math.min(a,r))}(t),r=i.major.enabled?function(t){const e=[];let i,a;for(i=0,a=t.length;i<a;i++)t[i].major&&e.push(i);return e}(e):[],n=r.length,o=r[0],l=r[n-1],_=[];if(n>a)return function(t,e,i,a){let r,n=0,o=i[0];for(a=Math.ceil(a),r=0;r<t.length;r++)r===o&&(e.push(t[r]),n++,o=i[n*a])}(e,_,r,n/a),_;const c=function(t,e,i){const a=function(t){const e=t.length;let i,a;if(e<2)return!1;for(a=t[0],i=1;i<e;++i)if(t[i]-t[i-1]!==a)return!1;return a}(t),r=e.length/i;if(!a)return Math.max(r,1);const n=function(t){const e=[],i=Math.sqrt(t);let a;for(a=1;a<i;a++)t%a==0&&(e.push(a),e.push(t/a));return i===(0|i)&&e.push(i),e.sort(((t,e)=>t-e)).pop(),e}(a);for(let t=0,e=n.length-1;t<e;t++){const e=n[t];if(e>r)return e}return Math.max(r,1)}(r,e,a);if(n>0){let t,i;const a=n>1?Math.round((l-o)/(n-1)):null;for(Da(e,_,c,s(a)?0:o-a,o),t=0,i=n-1;t<i;t++)Da(e,_,c,r[t],r[t+1]);return Da(e,_,c,l,s(a)?e.length:l+a),_}return Da(e,_,c),_}(this,this.ticks),this._labelSizes=null),l&&this._convertTicksToLabels(this.ticks),this.beforeFit(),this.fit(),this.afterFit(),this.afterUpdate()}configure(){let t,e,i=this.options.reverse;this.isHorizontal()?(t=this.left,e=this.right):(t=this.top,e=this.bottom,i=!i),this._startPixel=t,this._endPixel=e,this._reversePixels=i,this._length=e-t,this._alignToPixels=this.options.alignToPixels}afterUpdate(){u(this.options.afterUpdate,[this])}beforeSetDimensions(){u(this.options.beforeSetDimensions,[this])}setDimensions(){this.isHorizontal()?(this.width=this.maxWidth,this.left=0,this.right=this.width):(this.height=this.maxHeight,this.top=0,this.bottom=this.height),this.paddingLeft=0,this.paddingTop=0,this.paddingRight=0,this.paddingBottom=0}afterSetDimensions(){u(this.options.afterSetDimensions,[this])}_callHooks(t){this.chart.notifyPlugins(t,this.getContext()),u(this.options[t],[this])}beforeDataLimits(){this._callHooks("beforeDataLimits")}determineDataLimits(){}afterDataLimits(){this._callHooks("afterDataLimits")}beforeBuildTicks(){this._callHooks("beforeBuildTicks")}buildTicks(){return[]}afterBuildTicks(){this._callHooks("afterBuildTicks")}beforeTickToLabelConversion(){u(this.options.beforeTickToLabelConversion,[this])}generateTickLabels(t){const e=this.options.ticks;let i,a,r;for(i=0,a=t.length;i<a;i++)r=t[i],r.label=u(e.callback,[r.value,i,t],this)}afterTickToLabelConversion(){u(this.options.afterTickToLabelConversion,[this])}beforeCalculateLabelRotation(){u(this.options.beforeCalculateLabelRotation,[this])}calculateLabelRotation(){const t=this.options,e=t.ticks,i=this.ticks.length,a=e.minRotation||0,r=e.maxRotation;let n,o,s,l=a;if(!this._isVisible()||!e.display||a>=r||i<=1||!this.isHorizontal())return void(this.labelRotation=a);const _=this._getLabelSizes(),c=_.widest.width,d=_.highest.height,h=G(this.chart.width-c,0,this.maxWidth);n=t.offset?this.maxWidth/i:h/(i-1),c+6>n&&(n=h/(i-(t.offset?.5:1)),o=this.maxHeight-Aa(t.grid)-e.padding-La(t.title,this.chart.options.font),s=Math.sqrt(c*c+d*d),l=$(Math.min(Math.asin(G((_.highest.height+6)/n,-1,1)),Math.asin(G(o/s,-1,1))-Math.asin(G(d/s,-1,1)))),l=Math.max(a,Math.min(r,l))),this.labelRotation=l}afterCalculateLabelRotation(){u(this.options.afterCalculateLabelRotation,[this])}beforeFit(){u(this.options.beforeFit,[this])}fit(){const t={width:0,height:0},{chart:e,options:{ticks:i,title:a,grid:r}}=this,n=this._isVisible(),o=this.isHorizontal();if(n){const n=La(a,e.options.font);if(o?(t.width=this.maxWidth,t.height=Aa(r)+n):(t.height=this.maxHeight,t.width=Aa(r)+n),i.display&&this.ticks.length){const{first:e,last:a,widest:r,highest:n}=this._getLabelSizes(),s=2*i.padding,l=j(this.labelRotation),_=Math.cos(l),c=Math.sin(l);if(o){const e=i.mirror?0:c*r.width+_*n.height;t.height=Math.min(this.maxHeight,t.height+e+s)}else{const e=i.mirror?0:_*r.width+c*n.height;t.width=Math.min(this.maxWidth,t.width+e+s)}this._calculatePadding(e,a,c,_)}}this._handleMargins(),o?(this.width=this._length=e.width-this._margins.left-this._margins.right,this.height=t.height):(this.width=t.width,this.height=this._length=e.height-this._margins.top-this._margins.bottom)}_calculatePadding(t,e,i,a){const{ticks:{align:r,padding:n},position:o}=this.options,s=0!==this.labelRotation,l="top"!==o&&"x"===this.axis;if(this.isHorizontal()){const o=this.getPixelForTick(0)-this.left,_=this.right-this.getPixelForTick(this.ticks.length-1);let c=0,d=0;s?l?(c=a*t.width,d=i*e.height):(c=i*t.height,d=a*e.width):"start"===r?d=e.width:"end"===r?c=t.width:(c=t.width/2,d=e.width/2),this.paddingLeft=Math.max((c-o+n)*this.width/(this.width-o),0),this.paddingRight=Math.max((d-_+n)*this.width/(this.width-_),0)}else{let i=e.height/2,a=t.height/2;"start"===r?(i=0,a=t.height):"end"===r&&(i=e.height,a=0),this.paddingTop=i+n,this.paddingBottom=a+n}}_handleMargins(){this._margins&&(this._margins.left=Math.max(this.paddingLeft,this._margins.left),this._margins.top=Math.max(this.paddingTop,this._margins.top),this._margins.right=Math.max(this.paddingRight,this._margins.right),this._margins.bottom=Math.max(this.paddingBottom,this._margins.bottom))}afterFit(){u(this.options.afterFit,[this])}isHorizontal(){const{axis:t,position:e}=this.options;return"top"===e||"bottom"===e||"x"===t}isFullSize(){return this.options.fullSize}_convertTicksToLabels(t){let e,i;for(this.beforeTickToLabelConversion(),this.generateTickLabels(t),e=0,i=t.length;e<i;e++)s(t[e].label)&&(t.splice(e,1),i--,e--);this.afterTickToLabelConversion()}_getLabelSizes(){let t=this._labelSizes;if(!t){const e=this.options.ticks.sampleSize;let i=this.ticks;e<i.length&&(i=Ca(i,e)),this._labelSizes=t=this._computeLabelSizes(i,i.length)}return t}_computeLabelSizes(t,e){const{ctx:i,_longestTextCache:a}=this,r=[],n=[];let o,_,c,d,h,p,u,f,g,b,y,x=0,w=0;for(o=0;o<e;++o){if(d=t[o].label,h=this._resolveTickFontOptions(o),i.font=p=h.string,u=a[p]=a[p]||{data:{},gc:[]},f=h.lineHeight,g=b=0,s(d)||l(d)){if(l(d))for(_=0,c=d.length;_<c;++_)y=d[_],s(y)||l(y)||(g=Wt(i,u.data,u.gc,g,y),b+=f)}else g=Wt(i,u.data,u.gc,g,d),b=f;r.push(g),n.push(b),x=Math.max(g,x),w=Math.max(b,w)}!function(t,e){m(t,(t=>{const i=t.gc,a=i.length/2;let r;if(a>e){for(r=0;r<a;++r)delete t.data[i[r]];i.splice(0,a)}}))}(a,e);const v=r.indexOf(x),k=n.indexOf(w),M=t=>({width:r[t]||0,height:n[t]||0});return{first:M(0),last:M(e-1),widest:M(v),highest:M(k),widths:r,heights:n}}getLabelForValue(t){return t}getPixelForValue(t,e){return NaN}getValueForPixel(t){}getPixelForTick(t){const e=this.ticks;return t<0||t>e.length-1?null:this.getPixelForValue(e[t].value)}getPixelForDecimal(t){this._reversePixels&&(t=1-t);const e=this._startPixel+t*this._length;return G(this._alignToPixels?Ht(this.chart,e,0):e,-32768,32767)}getDecimalForPixel(t){const e=(t-this._startPixel)/this._length;return this._reversePixels?1-e:e}getBasePixel(){return this.getPixelForValue(this.getBaseValue())}getBaseValue(){const{min:t,max:e}=this;return t<0&&e<0?e:t>0&&e>0?t:0}getContext(t){const e=this.ticks||[];if(t>=0&&t<e.length){const i=e[t];return i.$context||(i.$context=function(t,e,i){return le(t,{tick:i,index:e,type:"tick"})}(this.getContext(),t,i))}return this.$context||(this.$context=le(this.chart.getContext(),{scale:this,type:"scale"}))}_tickSize(){const t=this.options.ticks,e=j(this.labelRotation),i=Math.abs(Math.cos(e)),a=Math.abs(Math.sin(e)),r=this._getLabelSizes(),n=t.autoSkipPadding||0,o=r?r.widest.width+n:0,s=r?r.highest.height+n:0;return this.isHorizontal()?s*i>o*a?o/i:s/a:s*a<o*i?s/i:o/a}_isVisible(){const t=this.options.display;return"auto"!==t?!!t:this.getMatchingVisibleMetas().length>0}_computeGridLineItems(t){const e=this.axis,i=this.chart,a=this.options,{grid:r,position:n}=a,o=r.offset,s=this.isHorizontal(),l=this.ticks.length+(o?1:0),c=Aa(r),d=[],p=r.setContext(this.getContext()),u=p.drawBorder?p.borderWidth:0,m=u/2,f=function(t){return Ht(i,t,u)};let g,b,y,x,w,v,k,M,S,P,D,T;if("top"===n)g=f(this.bottom),v=this.bottom-c,M=g-m,P=f(t.top)+m,T=t.bottom;else if("bottom"===n)g=f(this.top),P=t.top,T=f(t.bottom)-m,v=g+m,M=this.top+c;else if("left"===n)g=f(this.right),w=this.right-c,k=g-m,S=f(t.left)+m,D=t.right;else if("right"===n)g=f(this.left),S=t.left,D=f(t.right)-m,w=g+m,k=this.left+c;else if("x"===e){if("center"===n)g=f((t.top+t.bottom)/2+.5);else if(_(n)){const t=Object.keys(n)[0],e=n[t];g=f(this.chart.scales[t].getPixelForValue(e))}P=t.top,T=t.bottom,v=g+m,M=v+c}else if("y"===e){if("center"===n)g=f((t.left+t.right)/2);else if(_(n)){const t=Object.keys(n)[0],e=n[t];g=f(this.chart.scales[t].getPixelForValue(e))}w=g-m,k=w-c,S=t.left,D=t.right}const C=h(a.ticks.maxTicksLimit,l),O=Math.max(1,Math.ceil(l/C));for(b=0;b<l;b+=O){const t=r.setContext(this.getContext(b)),e=t.lineWidth,a=t.color,n=r.borderDash||[],l=t.borderDashOffset,_=t.tickWidth,c=t.tickColor,h=t.tickBorderDash||[],p=t.tickBorderDashOffset;y=Oa(this,b,o),void 0!==y&&(x=Ht(i,y,e),s?w=k=S=D=x:v=M=P=T=x,d.push({tx1:w,ty1:v,tx2:k,ty2:M,x1:S,y1:P,x2:D,y2:T,width:e,color:a,borderDash:n,borderDashOffset:l,tickWidth:_,tickColor:c,tickBorderDash:h,tickBorderDashOffset:p}))}return this._ticksLength=l,this._borderValue=g,d}_computeLabelItems(t){const e=this.axis,i=this.options,{position:a,ticks:r}=i,n=this.isHorizontal(),o=this.ticks,{align:s,crossAlign:c,padding:d,mirror:h}=r,p=Aa(i.grid),u=p+d,m=h?-d:u,f=-j(this.labelRotation),g=[];let b,y,x,w,v,k,M,S,P,D,T,C,O="middle";if("top"===a)k=this.bottom-m,M=this._getXAxisLabelAlignment();else if("bottom"===a)k=this.top+m,M=this._getXAxisLabelAlignment();else if("left"===a){const t=this._getYAxisLabelAlignment(p);M=t.textAlign,v=t.x}else if("right"===a){const t=this._getYAxisLabelAlignment(p);M=t.textAlign,v=t.x}else if("x"===e){if("center"===a)k=(t.top+t.bottom)/2+u;else if(_(a)){const t=Object.keys(a)[0],e=a[t];k=this.chart.scales[t].getPixelForValue(e)+u}M=this._getXAxisLabelAlignment()}else if("y"===e){if("center"===a)v=(t.left+t.right)/2-u;else if(_(a)){const t=Object.keys(a)[0],e=a[t];v=this.chart.scales[t].getPixelForValue(e)}M=this._getYAxisLabelAlignment(p).textAlign}"y"===e&&("start"===s?O="top":"end"===s&&(O="bottom"));const A=this._getLabelSizes();for(b=0,y=o.length;b<y;++b){x=o[b],w=x.label;const t=r.setContext(this.getContext(b));S=this.getPixelForTick(b)+r.labelOffset,P=this._resolveTickFontOptions(b),D=P.lineHeight,T=l(w)?w.length:1;const e=T/2,i=t.color,s=t.textStrokeColor,_=t.textStrokeWidth;let d;if(n?(v=S,C="top"===a?"near"===c||0!==f?-T*D+D/2:"center"===c?-A.highest.height/2-e*D+D:-A.highest.height+D/2:"near"===c||0!==f?D/2:"center"===c?A.highest.height/2-e*D:A.highest.height-T*D,h&&(C*=-1)):(k=S,C=(1-T)*D/2),t.showLabelBackdrop){const e=ne(t.backdropPadding),i=A.heights[b],a=A.widths[b];let r=k+C-e.top,n=v-e.left;switch(O){case"middle":r-=i/2;break;case"bottom":r-=i}switch(M){case"center":n-=a/2;break;case"right":n-=a}d={left:n,top:r,width:a+e.width,height:i+e.height,color:t.backdropColor}}g.push({rotation:f,label:w,font:P,color:i,strokeColor:s,strokeWidth:_,textOffset:C,textAlign:M,textBaseline:O,translation:[v,k],backdrop:d})}return g}_getXAxisLabelAlignment(){const{position:t,ticks:e}=this.options;if(-j(this.labelRotation))return"top"===t?"left":"right";let i="center";return"start"===e.align?i="left":"end"===e.align&&(i="right"),i}_getYAxisLabelAlignment(t){const{position:e,ticks:{crossAlign:i,mirror:a,padding:r}}=this.options,n=t+r,o=this._getLabelSizes().widest.width;let s,l;return"left"===e?a?(l=this.right+r,"near"===i?s="left":"center"===i?(s="center",l+=o/2):(s="right",l+=o)):(l=this.right-n,"near"===i?s="right":"center"===i?(s="center",l-=o/2):(s="left",l=this.left)):"right"===e?a?(l=this.left+r,"near"===i?s="right":"center"===i?(s="center",l-=o/2):(s="left",l-=o)):(l=this.left+n,"near"===i?s="left":"center"===i?(s="center",l+=o/2):(s="right",l=this.right)):s="right",{textAlign:s,x:l}}_computeLabelArea(){if(this.options.ticks.mirror)return;const t=this.chart,e=this.options.position;return"left"===e||"right"===e?{top:0,left:this.left,bottom:t.height,right:this.right}:"top"===e||"bottom"===e?{top:this.top,left:0,bottom:this.bottom,right:t.width}:void 0}drawBackground(){const{ctx:t,options:{backgroundColor:e},left:i,top:a,width:r,height:n}=this;e&&(t.save(),t.fillStyle=e,t.fillRect(i,a,r,n),t.restore())}getLineWidthForValue(t){const e=this.options.grid;if(!this._isVisible()||!e.display)return 0;const i=this.ticks.findIndex((e=>e.value===t));return i>=0?e.setContext(this.getContext(i)).lineWidth:0}drawGrid(t){const e=this.options.grid,i=this.ctx,a=this._gridLineItems||(this._gridLineItems=this._computeGridLineItems(t));let r,n;const o=(t,e,a)=>{a.width&&a.color&&(i.save(),i.lineWidth=a.width,i.strokeStyle=a.color,i.setLineDash(a.borderDash||[]),i.lineDashOffset=a.borderDashOffset,i.beginPath(),i.moveTo(t.x,t.y),i.lineTo(e.x,e.y),i.stroke(),i.restore())};if(e.display)for(r=0,n=a.length;r<n;++r){const t=a[r];e.drawOnChartArea&&o({x:t.x1,y:t.y1},{x:t.x2,y:t.y2},t),e.drawTicks&&o({x:t.tx1,y:t.ty1},{x:t.tx2,y:t.ty2},{color:t.tickColor,width:t.tickWidth,borderDash:t.tickBorderDash,borderDashOffset:t.tickBorderDashOffset})}}drawBorder(){const{chart:t,ctx:e,options:{grid:i}}=this,a=i.setContext(this.getContext()),r=i.drawBorder?a.borderWidth:0;if(!r)return;const n=i.setContext(this.getContext(0)).lineWidth,o=this._borderValue;let s,l,_,c;this.isHorizontal()?(s=Ht(t,this.left,r)-r/2,l=Ht(t,this.right,n)+n/2,_=c=o):(_=Ht(t,this.top,r)-r/2,c=Ht(t,this.bottom,n)+n/2,s=l=o),e.save(),e.lineWidth=a.borderWidth,e.strokeStyle=a.borderColor,e.beginPath(),e.moveTo(s,_),e.lineTo(l,c),e.stroke(),e.restore()}drawLabels(t){if(!this.options.ticks.display)return;const e=this.ctx,i=this._computeLabelArea();i&&Yt(e,i);const a=this._labelItems||(this._labelItems=this._computeLabelItems(t));let r,n;for(r=0,n=a.length;r<n;++r){const t=a[r],i=t.font,n=t.label;t.backdrop&&(e.fillStyle=t.backdrop.color,e.fillRect(t.backdrop.left,t.backdrop.top,t.backdrop.width,t.backdrop.height)),Kt(e,n,0,t.textOffset,i,t)}i&&Ut(e)}drawTitle(){const{ctx:t,options:{position:e,title:i,reverse:a}}=this;if(!i.display)return;const n=oe(i.font),o=ne(i.padding),s=i.align;let c=n.lineHeight/2;"bottom"===e||"center"===e||_(e)?(c+=o.bottom,l(i.text)&&(c+=n.lineHeight*(i.text.length-1))):c+=o.top;const{titleX:d,titleY:h,maxWidth:p,rotation:u}=function(t,e,i,a){const{top:n,left:o,bottom:s,right:l,chart:c}=t,{chartArea:d,scales:h}=c;let p,u,m,f=0;const g=s-n,b=l-o;if(t.isHorizontal()){if(u=r(a,o,l),_(i)){const t=Object.keys(i)[0],a=i[t];m=h[t].getPixelForValue(a)+g-e}else m="center"===i?(d.bottom+d.top)/2+g-e:Ta(t,i,e);p=l-o}else{if(_(i)){const t=Object.keys(i)[0],a=i[t];u=h[t].getPixelForValue(a)-b+e}else u="center"===i?(d.left+d.right)/2-b+e:Ta(t,i,e);m=r(a,s,n),f="left"===i?-E:E}return{titleX:u,titleY:m,maxWidth:p,rotation:f}}(this,c,e,s);Kt(t,i.text,0,0,n,{color:i.color,maxWidth:p,rotation:u,textAlign:Ra(s,e,a),textBaseline:"middle",translation:[d,h]})}draw(t){this._isVisible()&&(this.drawBackground(),this.drawGrid(t),this.drawBorder(),this.drawTitle(),this.drawLabels(t))}_layers(){const t=this.options,e=t.ticks&&t.ticks.z||0,i=h(t.grid&&t.grid.z,-1);return this._isVisible()&&this.draw===Ea.prototype.draw?[{z:i,draw:t=>{this.drawBackground(),this.drawGrid(t),this.drawTitle()}},{z:i+1,draw:()=>{this.drawBorder()}},{z:e,draw:t=>{this.drawLabels(t)}}]:[{z:e,draw:t=>{this.draw(t)}}]}getMatchingVisibleMetas(t){const e=this.chart.getSortedVisibleDatasetMetas(),i=this.axis+"AxisID",a=[];let r,n;for(r=0,n=e.length;r<n;++r){const n=e[r];n[i]!==this.id||t&&n.type!==t||a.push(n)}return a}_resolveTickFontOptions(t){return oe(this.options.ticks.setContext(this.getContext(t)).font)}_maxDigits(){const t=this._resolveTickFontOptions(0).lineHeight;return(this.isHorizontal()?this.width:this.height)/t}}class Ia{constructor(t,e,i){this.type=t,this.scope=e,this.override=i,this.items=Object.create(null)}isForType(t){return Object.prototype.isPrototypeOf.call(this.type.prototype,t.prototype)}register(t){const e=Object.getPrototypeOf(t);let i;(function(t){return"id"in t&&"defaults"in t})(e)&&(i=this.register(e));const a=this.items,r=t.id,n=this.scope+"."+r;if(!r)throw new Error("class does not have id: "+t);return r in a||(a[r]=t,function(t,e,i){const a=x(Object.create(null),[i?Bt.get(i):{},Bt.get(e),t.defaults]);Bt.set(e,a),t.defaultRoutes&&function(t,e){Object.keys(e).forEach((i=>{const a=i.split("."),r=a.pop(),n=[t].concat(a).join("."),o=e[i].split("."),s=o.pop(),l=o.join(".");Bt.route(n,r,l,s)}))}(e,t.defaultRoutes),t.descriptors&&Bt.describe(e,t.descriptors)}(t,n,i),this.override&&Bt.override(t.id,t.overrides)),n}get(t){return this.items[t]}unregister(t){const e=this.items,i=t.id,a=this.scope;i in e&&delete e[i],a&&i in Bt[a]&&(delete Bt[a][i],this.override&&delete It[i])}}var za=new class{constructor(){this.controllers=new Ia(vi,"datasets",!0),this.elements=new Ia(Ma,"elements"),this.plugins=new Ia(Object,"plugins"),this.scales=new Ia(Ea,"scales"),this._typedRegistries=[this.controllers,this.scales,this.elements]}add(...t){this._each("register",t)}remove(...t){this._each("unregister",t)}addControllers(...t){this._each("register",t,this.controllers)}addElements(...t){this._each("register",t,this.elements)}addPlugins(...t){this._each("register",t,this.plugins)}addScales(...t){this._each("register",t,this.scales)}getController(t){return this._get(t,this.controllers,"controller")}getElement(t){return this._get(t,this.elements,"element")}getPlugin(t){return this._get(t,this.plugins,"plugin")}getScale(t){return this._get(t,this.scales,"scale")}removeControllers(...t){this._each("unregister",t,this.controllers)}removeElements(...t){this._each("unregister",t,this.elements)}removePlugins(...t){this._each("unregister",t,this.plugins)}removeScales(...t){this._each("unregister",t,this.scales)}_each(t,e,i){[...e].forEach((e=>{const a=i||this._getRegistryForType(e);i||a.isForType(e)||a===this.plugins&&e.id?this._exec(t,a,e):m(e,(e=>{const a=i||this._getRegistryForType(e);this._exec(t,a,e)}))}))}_exec(t,e,i){const a=S(t);u(i["before"+a],[],i),e[t](i),u(i["after"+a],[],i)}_getRegistryForType(t){for(let e=0;e<this._typedRegistries.length;e++){const i=this._typedRegistries[e];if(i.isForType(t))return i}return this.plugins}_get(t,e,i){const a=e.get(t);if(void 0===a)throw new Error('"'+t+'" is not a registered '+i+".");return a}};class Fa{constructor(){this._init=[]}notify(t,e,i,a){"beforeInit"===e&&(this._init=this._createDescriptors(t,!0),this._notify(this._init,t,"install"));const r=a?this._descriptors(t).filter(a):this._descriptors(t),n=this._notify(r,t,e,i);return"afterDestroy"===e&&(this._notify(r,t,"stop"),this._notify(this._init,t,"uninstall")),n}_notify(t,e,i,a){a=a||{};for(const r of t){const t=r.plugin;if(!1===u(t[i],[e,a,r.options],t)&&a.cancelable)return!1}return!0}invalidate(){s(this._cache)||(this._oldCache=this._cache,this._cache=void 0)}_descriptors(t){if(this._cache)return this._cache;const e=this._cache=this._createDescriptors(t);return this._notifyStateChanges(t),e}_createDescriptors(t,e){const i=t&&t.config,a=h(i.options&&i.options.plugins,{}),r=function(t){const e=[],i=Object.keys(za.plugins.items);for(let t=0;t<i.length;t++)e.push(za.getPlugin(i[t]));const a=t.plugins||[];for(let t=0;t<a.length;t++){const i=a[t];-1===e.indexOf(i)&&e.push(i)}return e}(i);return!1!==a||e?function(t,e,i,a){const r=[],n=t.getContext();for(let o=0;o<e.length;o++){const s=e[o],l=Va(i[s.id],a);null!==l&&r.push({plugin:s,options:Ba(t.config,s,l,n)})}return r}(t,r,a,e):[]}_notifyStateChanges(t){const e=this._oldCache||[],i=this._cache,a=(t,e)=>t.filter((t=>!e.some((e=>t.plugin.id===e.plugin.id))));this._notify(a(e,i),t,"stop"),this._notify(a(i,e),t,"start")}}function Va(t,e){return e||!1!==t?!0===t?{}:t:null}function Ba(t,e,i,a){const r=t.pluginScopeKeys(e),n=t.getOptionScopes(i,r);return t.createResolver(n,a,[""],{scriptable:!1,indexable:!1,allKeys:!0})}function Wa(t,e){const i=Bt.datasets[t]||{};return((e.datasets||{})[t]||{}).indexAxis||e.indexAxis||i.indexAxis||"x"}function Na(t,e){return"x"===t||"y"===t?t:e.axis||("top"===(i=e.position)||"bottom"===i?"x":"left"===i||"right"===i?"y":void 0)||t.charAt(0).toLowerCase();var i}function Ha(t){const e=t.options||(t.options={});e.plugins=h(e.plugins,{}),e.scales=function(t,e){const i=It[t.type]||{scales:{}},a=e.scales||{},r=Wa(t.type,e),n=Object.create(null),o=Object.create(null);return Object.keys(a).forEach((t=>{const e=a[t];if(!_(e))return console.error(`Invalid scale configuration for scale: ${t}`);if(e._proxy)return console.warn(`Ignoring resolver passed as options for scale: ${t}`);const s=Na(t,e),l=function(t,e){return t===e?"_index_":"_value_"}(s,r),c=i.scales||{};n[s]=n[s]||t,o[t]=w(Object.create(null),[{axis:s},e,c[s],c[l]])})),t.data.datasets.forEach((i=>{const r=i.type||t.type,s=i.indexAxis||Wa(r,e),l=(It[r]||{}).scales||{};Object.keys(l).forEach((t=>{const e=function(t,e){let i=t;return"_index_"===t?i=e:"_value_"===t&&(i="x"===e?"y":"x"),i}(t,s),r=i[e+"AxisID"]||n[e]||e;o[r]=o[r]||Object.create(null),w(o[r],[{axis:e},a[r],l[t]])}))})),Object.keys(o).forEach((t=>{const e=o[t];w(e,[Bt.scales[e.type],Bt.scale])})),o}(t,e)}function ja(t){return(t=t||{}).datasets=t.datasets||[],t.labels=t.labels||[],t}const $a=new Map,Za=new Set;function Ya(t,e){let i=$a.get(t);return i||(i=e(),$a.set(t,i),Za.add(i)),i}const Ua=(t,e,i)=>{const a=M(e,i);void 0!==a&&t.add(a)};class Xa{constructor(t){this._config=function(t){return(t=t||{}).data=ja(t.data),Ha(t),t}(t),this._scopeCache=new Map,this._resolverCache=new Map}get platform(){return this._config.platform}get type(){return this._config.type}set type(t){this._config.type=t}get data(){return this._config.data}set data(t){this._config.data=ja(t)}get options(){return this._config.options}set options(t){this._config.options=t}get plugins(){return this._config.plugins}update(){const t=this._config;this.clearCache(),Ha(t)}clearCache(){this._scopeCache.clear(),this._resolverCache.clear()}datasetScopeKeys(t){return Ya(t,(()=>[[`datasets.${t}`,""]]))}datasetAnimationScopeKeys(t,e){return Ya(`${t}.transition.${e}`,(()=>[[`datasets.${t}.transitions.${e}`,`transitions.${e}`],[`datasets.${t}`,""]]))}datasetElementScopeKeys(t,e){return Ya(`${t}-${e}`,(()=>[[`datasets.${t}.elements.${e}`,`datasets.${t}`,`elements.${e}`,""]]))}pluginScopeKeys(t){const e=t.id;return Ya(`${this.type}-plugin-${e}`,(()=>[[`plugins.${e}`,...t.additionalOptionScopes||[]]]))}_cachedScopes(t,e){const i=this._scopeCache;let a=i.get(t);return a&&!e||(a=new Map,i.set(t,a)),a}getOptionScopes(t,e,i){const{options:a,type:r}=this,n=this._cachedScopes(t,i),o=n.get(e);if(o)return o;const s=new Set;e.forEach((e=>{t&&(s.add(t),e.forEach((e=>Ua(s,t,e)))),e.forEach((t=>Ua(s,a,t))),e.forEach((t=>Ua(s,It[r]||{},t))),e.forEach((t=>Ua(s,Bt,t))),e.forEach((t=>Ua(s,zt,t)))}));const l=Array.from(s);return 0===l.length&&l.push(Object.create(null)),Za.has(e)&&n.set(e,l),l}chartOptionScopes(){const{options:t,type:e}=this;return[t,It[e]||{},Bt.datasets[e]||{},{type:e},Bt,zt]}resolveNamedOptions(t,e,i,a=[""]){const r={$shared:!0},{resolver:n,subPrefixes:o}=qa(this._resolverCache,t,a);let s=n;(function(t,e){const{isScriptable:i,isIndexable:a}=ge(t);for(const r of e){const e=i(r),n=a(r),o=(n||e)&&t[r];if(e&&(D(o)||Ka(o))||n&&l(o))return!0}return!1})(n,e)&&(r.$shared=!1,s=fe(n,i=D(i)?i():i,this.createResolver(t,i,o)));for(const t of e)r[t]=s[t];return r}createResolver(t,e,i=[""],a){const{resolver:r}=qa(this._resolverCache,t,i);return _(e)?fe(r,e,void 0,a):r}}function qa(t,e,i){let a=t.get(e);a||(a=new Map,t.set(e,a));const r=i.join();let n=a.get(r);return n||(n={resolver:me(e,i),subPrefixes:i.filter((t=>!t.toLowerCase().includes("hover")))},a.set(r,n)),n}const Ka=t=>_(t)&&Object.getOwnPropertyNames(t).reduce(((e,i)=>e||D(t[i])),!1),Ga=["top","bottom","left","right","chartArea"];function Ja(t,e){return"top"===t||"bottom"===t||-1===Ga.indexOf(t)&&"x"===e}function Qa(t,e){return function(i,a){return i[t]===a[t]?i[e]-a[e]:i[t]-a[t]}}function tr(t){const e=t.chart,i=e.options.animation;e.notifyPlugins("afterRender"),u(i&&i.onComplete,[t],e)}function er(t){const e=t.chart,i=e.options.animation;u(i&&i.onProgress,[t],e)}function ir(t){return Ee()&&"string"==typeof t?t=document.getElementById(t):t&&t.length&&(t=t[0]),t&&t.canvas&&(t=t.canvas),t}const ar={},rr=t=>{const e=ir(t);return Object.values(ar).filter((t=>t.canvas===e)).pop()};function nr(t,e,i){const a=Object.keys(t);for(const r of a){const a=+r;if(a>=e){const n=t[r];delete t[r],(i>0||a>e)&&(t[a+i]=n)}}}class or{constructor(t,e){const i=this.config=new Xa(e),a=ir(t),r=rr(a);if(r)throw new Error("Canvas is already in use. Chart with ID '"+r.id+"' must be destroyed before the canvas can be reused.");const n=i.createResolver(i.chartOptionScopes(),this.getContext());this.platform=new(i.platform||function(t){return!Ee()||"undefined"!=typeof OffscreenCanvas&&t instanceof OffscreenCanvas?_a:ka}(a)),this.platform.updateConfig(i);const s=this.platform.acquireContext(a,n.aspectRatio),l=s&&s.canvas,_=l&&l.height,c=l&&l.width;this.id=o(),this.ctx=s,this.canvas=l,this.width=c,this.height=_,this._options=n,this._aspectRatio=this.aspectRatio,this._layers=[],this._metasets=[],this._stacks=void 0,this.boxes=[],this.currentDevicePixelRatio=void 0,this.chartArea=void 0,this._active=[],this._lastEvent=void 0,this._listeners={},this._responsiveListeners=void 0,this._sortedMetasets=[],this.scales={},this._plugins=new Fa,this.$proxies={},this._hiddenIndices={},this.attached=!1,this._animationsDisabled=void 0,this.$context=void 0,this._doResize=function(t,e){let i;return function(...a){return e?(clearTimeout(i),i=setTimeout(t,e,a)):t.apply(this,a),e}}((t=>this.update(t)),n.resizeDelay||0),this._dataChanges=[],ar[this.id]=this,s&&l?(ni.listen(this,"complete",tr),ni.listen(this,"progress",er),this._initialize(),this.attached&&this.update()):console.error("Failed to create chart: can't acquire context from the given item")}get aspectRatio(){const{options:{aspectRatio:t,maintainAspectRatio:e},width:i,height:a,_aspectRatio:r}=this;return s(t)?e&&r?r:a?i/a:null:t}get data(){return this.config.data}set data(t){this.config.data=t}get options(){return this._options}set options(t){this.config.options=t}_initialize(){return this.notifyPlugins("beforeInit"),this.options.responsive?this.resize():He(this,this.options.devicePixelRatio),this.bindEvents(),this.notifyPlugins("afterInit"),this}clear(){return jt(this.canvas,this.ctx),this}stop(){return ni.stop(this),this}resize(t,e){ni.running(this)?this._resizeBeforeDraw={width:t,height:e}:this._resize(t,e)}_resize(t,e){const i=this.options,a=this.canvas,r=i.maintainAspectRatio&&this.aspectRatio,n=this.platform.getMaximumSize(a,t,e,r),o=i.devicePixelRatio||this.platform.getDevicePixelRatio(),s=this.width?"resize":"attach";this.width=n.width,this.height=n.height,this._aspectRatio=this.aspectRatio,He(this,o,!0)&&(this.notifyPlugins("resize",{size:n}),u(i.onResize,[this,n],this),this.attached&&this._doResize(s)&&this.render())}ensureScalesHaveIDs(){m(this.options.scales||{},((t,e)=>{t.id=e}))}buildOrUpdateScales(){const t=this.options,e=t.scales,i=this.scales,a=Object.keys(i).reduce(((t,e)=>(t[e]=!1,t)),{});let r=[];e&&(r=r.concat(Object.keys(e).map((t=>{const i=e[t],a=Na(t,i),r="r"===a,n="x"===a;return{options:i,dposition:r?"chartArea":n?"bottom":"left",dtype:r?"radialLinear":n?"category":"linear"}})))),m(r,(e=>{const r=e.options,n=r.id,o=Na(n,r),s=h(r.type,e.dtype);void 0!==r.position&&Ja(r.position,o)===Ja(e.dposition)||(r.position=e.dposition),a[n]=!0;let l=null;n in i&&i[n].type===s?l=i[n]:(l=new(za.getScale(s))({id:n,type:s,ctx:this.ctx,chart:this}),i[l.id]=l),l.init(r,t)})),m(a,((t,e)=>{t||delete i[e]})),m(i,(t=>{sa.configure(this,t,t.options),sa.addBox(this,t)}))}_updateMetasets(){const t=this._metasets,e=this.data.datasets.length,i=t.length;if(t.sort(((t,e)=>t.index-e.index)),i>e){for(let t=e;t<i;++t)this._destroyDatasetMeta(t);t.splice(e,i-e)}this._sortedMetasets=t.slice(0).sort(Qa("order","index"))}_removeUnreferencedMetasets(){const{_metasets:t,data:{datasets:e}}=this;t.length>e.length&&delete this._stacks,t.forEach(((t,i)=>{0===e.filter((e=>e===t._dataset)).length&&this._destroyDatasetMeta(i)}))}buildOrUpdateControllers(){const t=[],e=this.data.datasets;let i,a;for(this._removeUnreferencedMetasets(),i=0,a=e.length;i<a;i++){const a=e[i];let r=this.getDatasetMeta(i);const n=a.type||this.config.type;if(r.type&&r.type!==n&&(this._destroyDatasetMeta(i),r=this.getDatasetMeta(i)),r.type=n,r.indexAxis=a.indexAxis||Wa(n,this.options),r.order=a.order||0,r.index=i,r.label=""+a.label,r.visible=this.isDatasetVisible(i),r.controller)r.controller.updateIndex(i),r.controller.linkScales();else{const e=za.getController(n),{datasetElementType:a,dataElementType:o}=Bt.datasets[n];Object.assign(e.prototype,{dataElementType:za.getElement(o),datasetElementType:a&&za.getElement(a)}),r.controller=new e(this,i),t.push(r.controller)}}return this._updateMetasets(),t}_resetElements(){m(this.data.datasets,((t,e)=>{this.getDatasetMeta(e).controller.reset()}),this)}reset(){this._resetElements(),this.notifyPlugins("reset")}update(t){const e=this.config;e.update();const i=this._options=e.createResolver(e.chartOptionScopes(),this.getContext()),a=this._animationsDisabled=!i.animation;if(this._updateScales(),this._checkEventBindings(),this._updateHiddenIndices(),this._plugins.invalidate(),!1===this.notifyPlugins("beforeUpdate",{mode:t,cancelable:!0}))return;const r=this.buildOrUpdateControllers();this.notifyPlugins("beforeElementsUpdate");let n=0;for(let t=0,e=this.data.datasets.length;t<e;t++){const{controller:e}=this.getDatasetMeta(t),i=!a&&-1===r.indexOf(e);e.buildOrUpdateElements(i),n=Math.max(+e.getMaxOverflow(),n)}n=this._minPadding=i.layout.autoPadding?n:0,this._updateLayout(n),a||m(r,(t=>{t.reset()})),this._updateDatasets(t),this.notifyPlugins("afterUpdate",{mode:t}),this._layers.sort(Qa("z","_idx"));const{_active:o,_lastEvent:s}=this;s?this._eventHandler(s,!0):o.length&&this._updateHoverStyles(o,o,!0),this.render()}_updateScales(){m(this.scales,(t=>{sa.removeBox(this,t)})),this.ensureScalesHaveIDs(),this.buildOrUpdateScales()}_checkEventBindings(){const t=this.options,e=new Set(Object.keys(this._listeners)),i=new Set(t.events);T(e,i)&&!!this._responsiveListeners===t.responsive||(this.unbindEvents(),this.bindEvents())}_updateHiddenIndices(){const{_hiddenIndices:t}=this,e=this._getUniformDataChanges()||[];for(const{method:i,start:a,count:r}of e)nr(t,a,"_removeElements"===i?-r:r)}_getUniformDataChanges(){const t=this._dataChanges;if(!t||!t.length)return;this._dataChanges=[];const e=this.data.datasets.length,i=e=>new Set(t.filter((t=>t[0]===e)).map(((t,e)=>e+","+t.splice(1).join(",")))),a=i(0);for(let t=1;t<e;t++)if(!T(a,i(t)))return;return Array.from(a).map((t=>t.split(","))).map((t=>({method:t[1],start:+t[2],count:+t[3]})))}_updateLayout(t){if(!1===this.notifyPlugins("beforeLayout",{cancelable:!0}))return;sa.update(this,this.width,this.height,t);const e=this.chartArea,i=e.width<=0||e.height<=0;this._layers=[],m(this.boxes,(t=>{i&&"chartArea"===t.position||(t.configure&&t.configure(),this._layers.push(...t._layers()))}),this),this._layers.forEach(((t,e)=>{t._idx=e})),this.notifyPlugins("afterLayout")}_updateDatasets(t){if(!1!==this.notifyPlugins("beforeDatasetsUpdate",{mode:t,cancelable:!0})){for(let t=0,e=this.data.datasets.length;t<e;++t)this.getDatasetMeta(t).controller.configure();for(let e=0,i=this.data.datasets.length;e<i;++e)this._updateDataset(e,D(t)?t({datasetIndex:e}):t);this.notifyPlugins("afterDatasetsUpdate",{mode:t})}}_updateDataset(t,e){const i=this.getDatasetMeta(t),a={meta:i,index:t,mode:e,cancelable:!0};!1!==this.notifyPlugins("beforeDatasetUpdate",a)&&(i.controller._update(e),a.cancelable=!1,this.notifyPlugins("afterDatasetUpdate",a))}render(){!1!==this.notifyPlugins("beforeRender",{cancelable:!0})&&(ni.has(this)?this.attached&&!ni.running(this)&&ni.start(this):(this.draw(),tr({chart:this})))}draw(){let t;if(this._resizeBeforeDraw){const{width:t,height:e}=this._resizeBeforeDraw;this._resize(t,e),this._resizeBeforeDraw=null}if(this.clear(),this.width<=0||this.height<=0)return;if(!1===this.notifyPlugins("beforeDraw",{cancelable:!0}))return;const e=this._layers;for(t=0;t<e.length&&e[t].z<=0;++t)e[t].draw(this.chartArea);for(this._drawDatasets();t<e.length;++t)e[t].draw(this.chartArea);this.notifyPlugins("afterDraw")}_getSortedDatasetMetas(t){const e=this._sortedMetasets,i=[];let a,r;for(a=0,r=e.length;a<r;++a){const r=e[a];t&&!r.visible||i.push(r)}return i}getSortedVisibleDatasetMetas(){return this._getSortedDatasetMetas(!0)}_drawDatasets(){if(!1===this.notifyPlugins("beforeDatasetsDraw",{cancelable:!0}))return;const t=this.getSortedVisibleDatasetMetas();for(let e=t.length-1;e>=0;--e)this._drawDataset(t[e]);this.notifyPlugins("afterDatasetsDraw")}_drawDataset(t){const e=this.ctx,i=t._clip,a=!i.disabled,r=this.chartArea,n={meta:t,index:t.index,cancelable:!0};!1!==this.notifyPlugins("beforeDatasetDraw",n)&&(a&&Yt(e,{left:!1===i.left?0:r.left-i.left,right:!1===i.right?this.width:r.right+i.right,top:!1===i.top?0:r.top-i.top,bottom:!1===i.bottom?this.height:r.bottom+i.bottom}),t.controller.draw(),a&&Ut(e),n.cancelable=!1,this.notifyPlugins("afterDatasetDraw",n))}getElementsAtEventForMode(t,e,i,a){const r=qi.modes[e];return"function"==typeof r?r(this,t,i,a):[]}getDatasetMeta(t){const e=this.data.datasets[t],i=this._metasets;let a=i.filter((t=>t&&t._dataset===e)).pop();return a||(a={type:null,data:[],dataset:null,controller:null,hidden:null,xAxisID:null,yAxisID:null,order:e&&e.order||0,index:t,_dataset:e,_parsed:[],_sorted:!1},i.push(a)),a}getContext(){return this.$context||(this.$context=le(null,{chart:this,type:"chart"}))}getVisibleDatasetCount(){return this.getSortedVisibleDatasetMetas().length}isDatasetVisible(t){const e=this.data.datasets[t];if(!e)return!1;const i=this.getDatasetMeta(t);return"boolean"==typeof i.hidden?!i.hidden:!e.hidden}setDatasetVisibility(t,e){this.getDatasetMeta(t).hidden=!e}toggleDataVisibility(t){this._hiddenIndices[t]=!this._hiddenIndices[t]}getDataVisibility(t){return!this._hiddenIndices[t]}_updateVisibility(t,e,i){const a=i?"show":"hide",r=this.getDatasetMeta(t),n=r.controller._resolveAnimations(void 0,a);P(e)?(r.data[e].hidden=!i,this.update()):(this.setDatasetVisibility(t,i),n.update(r,{visible:i}),this.update((e=>e.datasetIndex===t?a:void 0)))}hide(t,e){this._updateVisibility(t,e,!1)}show(t,e){this._updateVisibility(t,e,!0)}_destroyDatasetMeta(t){const e=this._metasets[t];e&&e.controller&&e.controller._destroy(),delete this._metasets[t]}_stop(){let t,e;for(this.stop(),ni.remove(this),t=0,e=this.data.datasets.length;t<e;++t)this._destroyDatasetMeta(t)}destroy(){this.notifyPlugins("beforeDestroy");const{canvas:t,ctx:e}=this;this._stop(),this.config.clearCache(),t&&(this.unbindEvents(),jt(t,e),this.platform.releaseContext(e),this.canvas=null,this.ctx=null),this.notifyPlugins("destroy"),delete ar[this.id],this.notifyPlugins("afterDestroy")}toBase64Image(...t){return this.canvas.toDataURL(...t)}bindEvents(){this.bindUserEvents(),this.options.responsive?this.bindResponsiveEvents():this.attached=!0}bindUserEvents(){const t=this._listeners,e=this.platform,i=(i,a)=>{e.addEventListener(this,i,a),t[i]=a},a=(t,e,i)=>{t.offsetX=e,t.offsetY=i,this._eventHandler(t)};m(this.options.events,(t=>i(t,a)))}bindResponsiveEvents(){this._responsiveListeners||(this._responsiveListeners={});const t=this._responsiveListeners,e=this.platform,i=(i,a)=>{e.addEventListener(this,i,a),t[i]=a},a=(i,a)=>{t[i]&&(e.removeEventListener(this,i,a),delete t[i])},r=(t,e)=>{this.canvas&&this.resize(t,e)};let n;const o=()=>{a("attach",o),this.attached=!0,this.resize(),i("resize",r),i("detach",n)};n=()=>{this.attached=!1,a("resize",r),this._stop(),this._resize(0,0),i("attach",o)},e.isAttached(this.canvas)?o():n()}unbindEvents(){m(this._listeners,((t,e)=>{this.platform.removeEventListener(this,e,t)})),this._listeners={},m(this._responsiveListeners,((t,e)=>{this.platform.removeEventListener(this,e,t)})),this._responsiveListeners=void 0}updateHoverStyle(t,e,i){const a=i?"set":"remove";let r,n,o,s;for("dataset"===e&&(r=this.getDatasetMeta(t[0].datasetIndex),r.controller["_"+a+"DatasetHoverStyle"]()),o=0,s=t.length;o<s;++o){n=t[o];const e=n&&this.getDatasetMeta(n.datasetIndex).controller;e&&e[a+"HoverStyle"](n.element,n.datasetIndex,n.index)}}getActiveElements(){return this._active||[]}setActiveElements(t){const e=this._active||[],i=t.map((({datasetIndex:t,index:e})=>{const i=this.getDatasetMeta(t);if(!i)throw new Error("No dataset found at index "+t);return{datasetIndex:t,element:i.data[e],index:e}}));!f(i,e)&&(this._active=i,this._lastEvent=null,this._updateHoverStyles(i,e))}notifyPlugins(t,e,i){return this._plugins.notify(this,t,e,i)}_updateHoverStyles(t,e,i){const a=this.options.hover,r=(t,e)=>t.filter((t=>!e.some((e=>t.datasetIndex===e.datasetIndex&&t.index===e.index)))),n=r(e,t),o=i?t:r(t,e);n.length&&this.updateHoverStyle(n,a.mode,!1),o.length&&a.mode&&this.updateHoverStyle(o,a.mode,!0)}_eventHandler(t,e){const i={event:t,replay:e,cancelable:!0,inChartArea:Zt(t,this.chartArea,this._minPadding)},a=e=>(e.options.events||this.options.events).includes(t.native.type);if(!1===this.notifyPlugins("beforeEvent",i,a))return;const r=this._handleEvent(t,e,i.inChartArea);return i.cancelable=!1,this.notifyPlugins("afterEvent",i,a),(r||i.changed)&&this.render(),this}_handleEvent(t,e,i){const{_active:a=[],options:r}=this,n=e,o=this._getActiveElements(t,a,i,n),s=function(t){return"mouseup"===t.type||"click"===t.type||"contextmenu"===t.type}(t),l=function(t,e,i,a){return i&&"mouseout"!==t.type?a?e:t:null}(t,this._lastEvent,i,s);i&&(this._lastEvent=null,u(r.onHover,[t,o,this],this),s&&u(r.onClick,[t,o,this],this));const _=!f(o,a);return(_||e)&&(this._active=o,this._updateHoverStyles(o,a,e)),this._lastEvent=l,_}_getActiveElements(t,e,i,a){if("mouseout"===t.type)return[];if(!i)return e;const r=this.options.hover;return this.getElementsAtEventForMode(t,r.mode,r,a)}}const sr=()=>m(or.instances,(t=>t._plugins.invalidate())),lr=!0;function _r(t,e,i){const{startAngle:a,pixelMargin:r,x:n,y:o,outerRadius:s,innerRadius:l}=e;let _=r/s;t.beginPath(),t.arc(n,o,s,a-_,i+_),l>r?(_=r/l,t.arc(n,o,l,i+_,a-_,!0)):t.arc(n,o,r,i+E,a-E),t.closePath(),t.clip()}function cr(t,e,i,a){return{x:i+t*Math.cos(e),y:a+t*Math.sin(e)}}function dr(t,e,i,a,r){const{x:n,y:o,startAngle:s,pixelMargin:l,innerRadius:_}=e,c=Math.max(e.outerRadius+a+i-l,0),d=_>0?_+a+i+l:0;let h=0;const p=r-s;if(a){const t=((_>0?_-a:0)+(c>0?c-a:0))/2;h=(p-(0!==t?p*t/(t+a):p))/2}const u=(p-Math.max(.001,p*c-i/C)/c)/2,m=s+u+h,f=r-u-h,{outerStart:g,outerEnd:b,innerStart:y,innerEnd:x}=function(t,e,i,a){const r=ie(t.options.borderRadius,["outerStart","outerEnd","innerStart","innerEnd"]),n=(i-e)/2,o=Math.min(n,a*e/2),s=t=>{const e=(i-Math.min(n,t))*a/2;return G(t,0,Math.min(n,e))};return{outerStart:s(r.outerStart),outerEnd:s(r.outerEnd),innerStart:G(r.innerStart,0,o),innerEnd:G(r.innerEnd,0,o)}}(e,d,c,f-m),w=c-g,v=c-b,k=m+g/w,M=f-b/v,S=d+y,P=d+x,D=m+y/S,T=f-x/P;if(t.beginPath(),t.arc(n,o,c,k,M),b>0){const e=cr(v,M,n,o);t.arc(e.x,e.y,b,M,f+E)}const O=cr(P,f,n,o);if(t.lineTo(O.x,O.y),x>0){const e=cr(P,T,n,o);t.arc(e.x,e.y,x,f+E,T+Math.PI)}if(t.arc(n,o,d,f-x/d,m+y/d,!0),y>0){const e=cr(S,D,n,o);t.arc(e.x,e.y,y,D+Math.PI,m-E)}const A=cr(w,m,n,o);if(t.lineTo(A.x,A.y),g>0){const e=cr(w,k,n,o);t.arc(e.x,e.y,g,m-E,k)}t.closePath()}Object.defineProperties(or,{defaults:{enumerable:lr,value:Bt},instances:{enumerable:lr,value:ar},overrides:{enumerable:lr,value:It},registry:{enumerable:lr,value:za},version:{enumerable:lr,value:"3.7.1"},getChart:{enumerable:lr,value:rr},register:{enumerable:lr,value:(...t)=>{za.add(...t),sr()}},unregister:{enumerable:lr,value:(...t)=>{za.remove(...t),sr()}}});class hr extends Ma{constructor(t){super(),this.options=void 0,this.circumference=void 0,this.startAngle=void 0,this.endAngle=void 0,this.innerRadius=void 0,this.outerRadius=void 0,this.pixelMargin=0,this.fullCircles=0,t&&Object.assign(this,t)}inRange(t,e,i){const a=this.getProps(["x","y"],i),{angle:r,distance:n}=Y(a,{x:t,y:e}),{startAngle:o,endAngle:s,innerRadius:l,outerRadius:_,circumference:c}=this.getProps(["startAngle","endAngle","innerRadius","outerRadius","circumference"],i),d=this.options.spacing/2,p=h(c,s-o)>=O||K(r,o,s),u=J(n,l+d,_+d);return p&&u}getCenterPoint(t){const{x:e,y:i,startAngle:a,endAngle:r,innerRadius:n,outerRadius:o}=this.getProps(["x","y","startAngle","endAngle","innerRadius","outerRadius","circumference"],t),{offset:s,spacing:l}=this.options,_=(a+r)/2,c=(n+o+l+s)/2;return{x:e+Math.cos(_)*c,y:i+Math.sin(_)*c}}tooltipPosition(t){return this.getCenterPoint(t)}draw(t){const{options:e,circumference:i}=this,a=(e.offset||0)/2,r=(e.spacing||0)/2;if(this.pixelMargin="inner"===e.borderAlign?.33:0,this.fullCircles=i>O?Math.floor(i/O):0,0===i||this.innerRadius<0||this.outerRadius<0)return;t.save();let n=0;if(a){n=a/2;const e=(this.startAngle+this.endAngle)/2;t.translate(Math.cos(e)*n,Math.sin(e)*n),this.circumference>=C&&(n=a)}t.fillStyle=e.backgroundColor,t.strokeStyle=e.borderColor;const o=function(t,e,i,a){const{fullCircles:r,startAngle:n,circumference:o}=e;let s=e.endAngle;if(r){dr(t,e,i,a,n+O);for(let e=0;e<r;++e)t.fill();isNaN(o)||(s=n+o%O,o%O==0&&(s+=O))}return dr(t,e,i,a,s),t.fill(),s}(t,this,n,r);(function(t,e,i,a,r){const{options:n}=e,{borderWidth:o,borderJoinStyle:s}=n,l="inner"===n.borderAlign;o&&(l?(t.lineWidth=2*o,t.lineJoin=s||"round"):(t.lineWidth=o,t.lineJoin=s||"bevel"),e.fullCircles&&function(t,e,i){const{x:a,y:r,startAngle:n,pixelMargin:o,fullCircles:s}=e,l=Math.max(e.outerRadius-o,0),_=e.innerRadius+o;let c;for(i&&_r(t,e,n+O),t.beginPath(),t.arc(a,r,_,n+O,n,!0),c=0;c<s;++c)t.stroke();for(t.beginPath(),t.arc(a,r,l,n,n+O),c=0;c<s;++c)t.stroke()}(t,e,l),l&&_r(t,e,r),dr(t,e,i,a,r),t.stroke())})(t,this,n,r,o),t.restore()}}function pr(t,e,i=e){t.lineCap=h(i.borderCapStyle,e.borderCapStyle),t.setLineDash(h(i.borderDash,e.borderDash)),t.lineDashOffset=h(i.borderDashOffset,e.borderDashOffset),t.lineJoin=h(i.borderJoinStyle,e.borderJoinStyle),t.lineWidth=h(i.borderWidth,e.borderWidth),t.strokeStyle=h(i.borderColor,e.borderColor)}function ur(t,e,i){t.lineTo(i.x,i.y)}function mr(t,e,i={}){const a=t.length,{start:r=0,end:n=a-1}=i,{start:o,end:s}=e,l=Math.max(r,o),_=Math.min(n,s),c=r<o&&n<o||r>s&&n>s;return{count:a,start:l,loop:e.loop,ilen:_<l&&!c?a+_-l:_-l}}function fr(t,e,i,a){const{points:r,options:n}=e,{count:o,start:s,loop:l,ilen:_}=mr(r,i,a),c=function(t){return t.stepped?Xt:t.tension||"monotone"===t.cubicInterpolationMode?qt:ur}(n);let d,h,p,{move:u=!0,reverse:m}=a||{};for(d=0;d<=_;++d)h=r[(s+(m?_-d:d))%o],h.skip||(u?(t.moveTo(h.x,h.y),u=!1):c(t,p,h,m,n.stepped),p=h);return l&&(h=r[(s+(m?_:0))%o],c(t,p,h,m,n.stepped)),!!l}function gr(t,e,i,a){const r=e.points,{count:n,start:o,ilen:s}=mr(r,i,a),{move:l=!0,reverse:_}=a||{};let c,d,h,p,u,m,f=0,g=0;const b=t=>(o+(_?s-t:t))%n,y=()=>{p!==u&&(t.lineTo(f,u),t.lineTo(f,p),t.lineTo(f,m))};for(l&&(d=r[b(0)],t.moveTo(d.x,d.y)),c=0;c<=s;++c){if(d=r[b(c)],d.skip)continue;const e=d.x,i=d.y,a=0|e;a===h?(i<p?p=i:i>u&&(u=i),f=(g*f+e)/++g):(y(),t.lineTo(e,i),h=a,g=0,p=u=i),m=i}y()}function br(t){const e=t.options,i=e.borderDash&&e.borderDash.length;return t._decimated||t._loop||e.tension||"monotone"===e.cubicInterpolationMode||e.stepped||i?fr:gr}hr.id="arc",hr.defaults={borderAlign:"center",borderColor:"#fff",borderJoinStyle:void 0,borderRadius:0,borderWidth:2,offset:0,spacing:0,angle:void 0},hr.defaultRoutes={backgroundColor:"backgroundColor"};const yr="function"==typeof Path2D;class xr extends Ma{constructor(t){super(),this.animated=!0,this.options=void 0,this._chart=void 0,this._loop=void 0,this._fullLoop=void 0,this._path=void 0,this._points=void 0,this._segments=void 0,this._decimated=!1,this._pointsUpdated=!1,this._datasetIndex=void 0,t&&Object.assign(this,t)}updateControlPoints(t,e){const i=this.options;if((i.tension||"monotone"===i.cubicInterpolationMode)&&!i.stepped&&!this._pointsUpdated){const a=i.spanGaps?this._loop:this._fullLoop;Re(this._points,i,t,a,e),this._pointsUpdated=!0}}set points(t){this._points=t,delete this._segments,delete this._path,this._pointsUpdated=!1}get points(){return this._points}get segments(){return this._segments||(this._segments=function(t,e){const i=t.points,a=t.options.spanGaps,r=i.length;if(!r)return[];const n=!!t._loop,{start:o,end:s}=function(t,e,i,a){let r=0,n=e-1;if(i&&!a)for(;r<e&&!t[r].skip;)r++;for(;r<e&&t[r].skip;)r++;for(r%=e,i&&(n+=r);n>r&&t[n%e].skip;)n--;return n%=e,{start:r,end:n}}(i,r,n,a);return function(t,e,i,a){return a&&a.setContext&&i?function(t,e,i,a){const r=t._chart.getContext(),n=ai(t.options),{_datasetIndex:o,options:{spanGaps:s}}=t,l=i.length,_=[];let c=n,d=e[0].start,h=d;function p(t,e,a,r){const n=s?-1:1;if(t!==e){for(t+=l;i[t%l].skip;)t-=n;for(;i[e%l].skip;)e+=n;t%l!=e%l&&(_.push({start:t%l,end:e%l,loop:a,style:r}),c=r,d=e%l)}}for(const t of e){d=s?d:t.start;let e,n=i[d%l];for(h=d+1;h<=t.end;h++){const s=i[h%l];e=ai(a.setContext(le(r,{type:"segment",p0:n,p1:s,p0DataIndex:(h-1)%l,p1DataIndex:h%l,datasetIndex:o}))),ri(e,c)&&p(d,h-1,t.loop,c),n=s,c=e}d<h-1&&p(d,h-1,t.loop,c)}return _}(t,e,i,a):e}(t,!0===a?[{start:o,end:s,loop:n}]:function(t,e,i,a){const r=t.length,n=[];let o,s=e,l=t[e];for(o=e+1;o<=i;++o){const i=t[o%r];i.skip||i.stop?l.skip||(a=!1,n.push({start:e%r,end:(o-1)%r,loop:a}),e=s=i.stop?o:null):(s=o,l.skip&&(e=o)),l=i}return null!==s&&n.push({start:e%r,end:s%r,loop:a}),n}(i,o,s<o?s+r:s,!!t._fullLoop&&0===o&&s===r-1),i,e)}(this,this.options.segment))}first(){const t=this.segments,e=this.points;return t.length&&e[t[0].start]}last(){const t=this.segments,e=this.points,i=t.length;return i&&e[t[i-1].end]}interpolate(t,e){const i=this.options,a=t[e],r=this.points,n=ii(this,{property:e,start:a,end:a});if(!n.length)return;const o=[],s=function(t){return t.stepped?Ye:t.tension||"monotone"===t.cubicInterpolationMode?Ue:Ze}(i);let l,_;for(l=0,_=n.length;l<_;++l){const{start:_,end:c}=n[l],d=r[_],h=r[c];if(d===h){o.push(d);continue}const p=s(d,h,Math.abs((a-d[e])/(h[e]-d[e])),i.stepped);p[e]=t[e],o.push(p)}return 1===o.length?o[0]:o}pathSegment(t,e,i){return br(this)(t,this,e,i)}path(t,e,i){const a=this.segments,r=br(this);let n=this._loop;e=e||0,i=i||this.points.length-e;for(const o of a)n&=r(t,this,o,{start:e,end:e+i-1});return!!n}draw(t,e,i,a){const r=this.options||{};(this.points||[]).length&&r.borderWidth&&(t.save(),function(t,e,i,a){yr&&!e.options.segment?function(t,e,i,a){let r=e._path;r||(r=e._path=new Path2D,e.path(r,i,a)&&r.closePath()),pr(t,e.options),t.stroke(r)}(t,e,i,a):function(t,e,i,a){const{segments:r,options:n}=e,o=br(e);for(const s of r)pr(t,n,s.style),t.beginPath(),o(t,e,s,{start:i,end:i+a-1})&&t.closePath(),t.stroke()}(t,e,i,a)}(t,this,i,a),t.restore()),this.animated&&(this._pointsUpdated=!1,this._path=void 0)}}function wr(t,e,i,a){const r=t.options,{[i]:n}=t.getProps([i],a);return Math.abs(e-n)<r.radius+r.hitRadius}xr.id="line",xr.defaults={borderCapStyle:"butt",borderDash:[],borderDashOffset:0,borderJoinStyle:"miter",borderWidth:3,capBezierPoints:!0,cubicInterpolationMode:"default",fill:!1,spanGaps:!1,stepped:!1,tension:0},xr.defaultRoutes={backgroundColor:"backgroundColor",borderColor:"borderColor"},xr.descriptors={_scriptable:!0,_indexable:t=>"borderDash"!==t&&"fill"!==t};class vr extends Ma{constructor(t){super(),this.options=void 0,this.parsed=void 0,this.skip=void 0,this.stop=void 0,t&&Object.assign(this,t)}inRange(t,e,i){const a=this.options,{x:r,y:n}=this.getProps(["x","y"],i);return Math.pow(t-r,2)+Math.pow(e-n,2)<Math.pow(a.hitRadius+a.radius,2)}inXRange(t,e){return wr(this,t,"x",e)}inYRange(t,e){return wr(this,t,"y",e)}getCenterPoint(t){const{x:e,y:i}=this.getProps(["x","y"],t);return{x:e,y:i}}size(t){let e=(t=t||this.options||{}).radius||0;return e=Math.max(e,e&&t.hoverRadius||0),2*(e+(e&&t.borderWidth||0))}draw(t,e){const i=this.options;this.skip||i.radius<.1||!Zt(this,e,this.size(i)/2)||(t.strokeStyle=i.borderColor,t.lineWidth=i.borderWidth,t.fillStyle=i.backgroundColor,$t(t,i,this.x,this.y))}getRange(){const t=this.options||{};return t.radius+t.hitRadius}}function kr(t,e){const{x:i,y:a,base:r,width:n,height:o}=t.getProps(["x","y","base","width","height"],e);let s,l,_,c,d;return t.horizontal?(d=o/2,s=Math.min(i,r),l=Math.max(i,r),_=a-d,c=a+d):(d=n/2,s=i-d,l=i+d,_=Math.min(a,r),c=Math.max(a,r)),{left:s,top:_,right:l,bottom:c}}function Mr(t,e,i,a){return t?0:G(e,i,a)}function Sr(t,e,i,a){const r=null===e,n=null===i,o=t&&!(r&&n)&&kr(t,a);return o&&(r||J(e,o.left,o.right))&&(n||J(i,o.top,o.bottom))}function Pr(t,e){t.rect(e.x,e.y,e.w,e.h)}function Dr(t,e,i={}){const a=t.x!==i.x?-e:0,r=t.y!==i.y?-e:0,n=(t.x+t.w!==i.x+i.w?e:0)-a,o=(t.y+t.h!==i.y+i.h?e:0)-r;return{x:t.x+a,y:t.y+r,w:t.w+n,h:t.h+o,radius:t.radius}}vr.id="point",vr.defaults={borderWidth:1,hitRadius:1,hoverBorderWidth:1,hoverRadius:4,pointStyle:"circle",radius:3,rotation:0},vr.defaultRoutes={backgroundColor:"backgroundColor",borderColor:"borderColor"};class Tr extends Ma{constructor(t){super(),this.options=void 0,this.horizontal=void 0,this.base=void 0,this.width=void 0,this.height=void 0,this.inflateAmount=void 0,t&&Object.assign(this,t)}draw(t){const{inflateAmount:e,options:{borderColor:i,backgroundColor:a}}=this,{inner:r,outer:n}=function(t){const e=kr(t),i=e.right-e.left,a=e.bottom-e.top,r=function(t,e,i){const a=t.options.borderWidth,r=t.borderSkipped,n=ae(a);return{t:Mr(r.top,n.top,0,i),r:Mr(r.right,n.right,0,e),b:Mr(r.bottom,n.bottom,0,i),l:Mr(r.left,n.left,0,e)}}(t,i/2,a/2),n=function(t,e,i){const{enableBorderRadius:a}=t.getProps(["enableBorderRadius"]),r=t.options.borderRadius,n=re(r),o=Math.min(e,i),s=t.borderSkipped,l=a||_(r);return{topLeft:Mr(!l||s.top||s.left,n.topLeft,0,o),topRight:Mr(!l||s.top||s.right,n.topRight,0,o),bottomLeft:Mr(!l||s.bottom||s.left,n.bottomLeft,0,o),bottomRight:Mr(!l||s.bottom||s.right,n.bottomRight,0,o)}}(t,i/2,a/2);return{outer:{x:e.left,y:e.top,w:i,h:a,radius:n},inner:{x:e.left+r.l,y:e.top+r.t,w:i-r.l-r.r,h:a-r.t-r.b,radius:{topLeft:Math.max(0,n.topLeft-Math.max(r.t,r.l)),topRight:Math.max(0,n.topRight-Math.max(r.t,r.r)),bottomLeft:Math.max(0,n.bottomLeft-Math.max(r.b,r.l)),bottomRight:Math.max(0,n.bottomRight-Math.max(r.b,r.r))}}}}(this),o=(s=n.radius).topLeft||s.topRight||s.bottomLeft||s.bottomRight?Jt:Pr;var s;t.save(),n.w===r.w&&n.h===r.h||(t.beginPath(),o(t,Dr(n,e,r)),t.clip(),o(t,Dr(r,-e,n)),t.fillStyle=i,t.fill("evenodd")),t.beginPath(),o(t,Dr(r,e)),t.fillStyle=a,t.fill(),t.restore()}inRange(t,e,i){return Sr(this,t,e,i)}inXRange(t,e){return Sr(this,t,null,e)}inYRange(t,e){return Sr(this,null,t,e)}getCenterPoint(t){const{x:e,y:i,base:a,horizontal:r}=this.getProps(["x","y","base","horizontal"],t);return{x:r?(e+a)/2:e,y:r?i:(i+a)/2}}getRange(t){return"x"===t?this.width/2:this.height/2}}Tr.id="bar",Tr.defaults={borderSkipped:"start",borderWidth:0,borderRadius:0,inflateAmount:"auto",pointStyle:void 0},Tr.defaultRoutes={backgroundColor:"backgroundColor",borderColor:"borderColor"};var Cr=Object.freeze({__proto__:null,ArcElement:hr,LineElement:xr,PointElement:vr,BarElement:Tr});function Or(t){if(t._decimated){const e=t._data;delete t._decimated,delete t._data,Object.defineProperty(t,"data",{value:e})}}function Ar(t){t.data.datasets.forEach((t=>{Or(t)}))}var Lr={id:"decimation",defaults:{algorithm:"min-max",enabled:!1},beforeElementsUpdate:(t,e,i)=>{if(!i.enabled)return void Ar(t);const a=t.width;t.data.datasets.forEach(((e,r)=>{const{_data:n,indexAxis:o}=e,l=t.getDatasetMeta(r),_=n||e.data;if("y"===se([o,t.options.indexAxis]))return;if("line"!==l.type)return;const c=t.scales[l.xAxisID];if("linear"!==c.type&&"time"!==c.type)return;if(t.options.parsing)return;let d,{start:h,count:p}=function(t,e){const i=e.length;let a,r=0;const{iScale:n}=t,{min:o,max:s,minDefined:l,maxDefined:_}=n.getUserBounds();return l&&(r=G(ce(e,n.axis,o).lo,0,i-1)),a=_?G(ce(e,n.axis,s).hi+1,r,i)-r:i-r,{start:r,count:a}}(l,_);if(p<=(i.threshold||4*a))Or(e);else{switch(s(n)&&(e._data=_,delete e.data,Object.defineProperty(e,"data",{configurable:!0,enumerable:!0,get:function(){return this._decimated},set:function(t){this._data=t}})),i.algorithm){case"lttb":d=function(t,e,i,a,r){const n=r.samples||a;if(n>=i)return t.slice(e,e+i);const o=[],s=(i-2)/(n-2);let l=0;const _=e+i-1;let c,d,h,p,u,m=e;for(o[l++]=t[m],c=0;c<n-2;c++){let a,r=0,n=0;const _=Math.floor((c+1)*s)+1+e,f=Math.min(Math.floor((c+2)*s)+1,i)+e,g=f-_;for(a=_;a<f;a++)r+=t[a].x,n+=t[a].y;r/=g,n/=g;const b=Math.floor(c*s)+1+e,y=Math.min(Math.floor((c+1)*s)+1,i)+e,{x,y:w}=t[m];for(h=p=-1,a=b;a<y;a++)p=.5*Math.abs((x-r)*(t[a].y-w)-(x-t[a].x)*(n-w)),p>h&&(h=p,d=t[a],u=a);o[l++]=d,m=u}return o[l++]=t[_],o}(_,h,p,a,i);break;case"min-max":d=function(t,e,i,a){let r,n,o,l,_,c,d,h,p,u,m=0,f=0;const g=[],b=e+i-1,y=t[e].x,x=t[b].x-y;for(r=e;r<e+i;++r){n=t[r],o=(n.x-y)/x*a,l=n.y;const e=0|o;if(e===_)l<p?(p=l,c=r):l>u&&(u=l,d=r),m=(f*m+n.x)/++f;else{const i=r-1;if(!s(c)&&!s(d)){const e=Math.min(c,d),a=Math.max(c,d);e!==h&&e!==i&&g.push({...t[e],x:m}),a!==h&&a!==i&&g.push({...t[a],x:m})}r>0&&i!==h&&g.push(t[i]),g.push(n),_=e,f=0,p=u=l,c=d=h=r}}return g}(_,h,p,a);break;default:throw new Error(`Unsupported decimation algorithm '${i.algorithm}'`)}e._decimated=d}}))},destroy(t){Ar(t)}};function Rr(t,e,i){const a=function(t){const e=t.options,i=e.fill;let a=h(i&&i.target,i);return void 0===a&&(a=!!e.backgroundColor),!1!==a&&null!==a&&(!0===a?"origin":a)}(t);if(_(a))return!isNaN(a.value)&&a;let r=parseFloat(a);return c(r)&&Math.floor(r)===r?("-"!==a[0]&&"+"!==a[0]||(r=e+r),!(r===e||r<0||r>=i)&&r):["origin","start","end","stack","shape"].indexOf(a)>=0&&a}class Er{constructor(t){this.x=t.x,this.y=t.y,this.radius=t.radius}pathSegment(t,e,i){const{x:a,y:r,radius:n}=this;return e=e||{start:0,end:O},t.arc(a,r,n,e.end,e.start,!0),!i.bounds}interpolate(t){const{x:e,y:i,radius:a}=this,r=t.angle;return{x:e+Math.cos(r)*a,y:i+Math.sin(r)*a,angle:r}}}function Ir(t,e,i){for(;e>t;e--){const t=i[e];if(!isNaN(t.x)&&!isNaN(t.y))break}return e}function zr(t,e,i){const a=[];for(let r=0;r<i.length;r++){const n=i[r],{first:o,last:s,point:l}=Fr(n,e,"x");if(!(!l||o&&s))if(o)a.unshift(l);else if(t.push(l),!s)break}t.push(...a)}function Fr(t,e,i){const a=t.interpolate(e,i);if(!a)return{};const r=a[i],n=t.segments,o=t.points;let s=!1,l=!1;for(let t=0;t<n.length;t++){const e=n[t],a=o[e.start][i],_=o[e.end][i];if(J(r,a,_)){s=r===a,l=r===_;break}}return{first:s,last:l,point:a}}function Vr(t){const{chart:e,fill:i,line:a}=t;if(c(i))return function(t,e){const i=t.getDatasetMeta(e);return i&&t.isDatasetVisible(e)?i.dataset:null}(e,i);if("stack"===i)return function(t){const{scale:e,index:i,line:a}=t,r=[],n=a.segments,o=a.points,s=function(t,e){const i=[],a=t.getMatchingVisibleMetas("line");for(let t=0;t<a.length;t++){const r=a[t];if(r.index===e)break;r.hidden||i.unshift(r.dataset)}return i}(e,i);s.push(Br({x:null,y:e.bottom},a));for(let t=0;t<n.length;t++){const e=n[t];for(let t=e.start;t<=e.end;t++)zr(r,o[t],s)}return new xr({points:r,options:{}})}(t);if("shape"===i)return!0;const r=function(t){return(t.scale||{}).getPointPositionForValue?function(t){const{scale:e,fill:i}=t,a=e.options,r=e.getLabels().length,n=[],o=a.reverse?e.max:e.min,s=a.reverse?e.min:e.max;let l,c,d;if(d="start"===i?o:"end"===i?s:_(i)?i.value:e.getBaseValue(),a.grid.circular)return c=e.getPointPositionForValue(0,o),new Er({x:c.x,y:c.y,radius:e.getDistanceFromCenterForValue(d)});for(l=0;l<r;++l)n.push(e.getPointPositionForValue(l,d));return n}(t):function(t){const{scale:e={},fill:i}=t;let a,r=null;return"start"===i?r=e.bottom:"end"===i?r=e.top:_(i)?r=e.getPixelForValue(i.value):e.getBasePixel&&(r=e.getBasePixel()),c(r)?(a=e.isHorizontal(),{x:a?r:null,y:a?null:r}):null}(t)}(t);return r instanceof Er?r:Br(r,a)}function Br(t,e){let i=[],a=!1;return l(t)?(a=!0,i=t):i=function(t,e){const{x:i=null,y:a=null}=t||{},r=e.points,n=[];return e.segments.forEach((({start:t,end:e})=>{e=Ir(t,e,r);const o=r[t],s=r[e];null!==a?(n.push({x:o.x,y:a}),n.push({x:s.x,y:a})):null!==i&&(n.push({x:i,y:o.y}),n.push({x:i,y:s.y}))})),n}(t,e),i.length?new xr({points:i,options:{tension:0},_loop:a,_fullLoop:a}):null}function Wr(t,e,i){let a=t[e].fill;const r=[e];let n;if(!i)return a;for(;!1!==a&&-1===r.indexOf(a);){if(!c(a))return a;if(n=t[a],!n)return!1;if(n.visible)return a;r.push(a),a=n.fill}return!1}function Nr(t,e,i){const{segments:a,points:r}=e;let n=!0,o=!1;t.beginPath();for(const s of a){const{start:a,end:l}=s,_=r[a],c=r[Ir(a,l,r)];n?(t.moveTo(_.x,_.y),n=!1):(t.lineTo(_.x,i),t.lineTo(_.x,_.y)),o=!!e.pathSegment(t,s,{move:o}),o?t.closePath():t.lineTo(c.x,i)}t.lineTo(e.first().x,i),t.closePath(),t.clip()}function Hr(t,e,i,a){if(a)return;let r=e[t],n=i[t];return"angle"===t&&(r=q(r),n=q(n)),{property:t,start:r,end:n}}function jr(t,e,i,a){return t&&e?a(t[i],e[i]):t?t[i]:e?e[i]:0}function $r(t,e,i){const{top:a,bottom:r}=e.chart.chartArea,{property:n,start:o,end:s}=i||{};"x"===n&&(t.beginPath(),t.rect(o,a,s-o,r-a),t.clip())}function Zr(t,e,i,a){const r=e.interpolate(i,a);r&&t.lineTo(r.x,r.y)}function Yr(t,e){const{line:i,target:a,property:r,color:n,scale:o}=e,s=function(t,e,i){const a=t.segments,r=t.points,n=e.points,o=[];for(const t of a){let{start:a,end:s}=t;s=Ir(a,s,r);const l=Hr(i,r[a],r[s],t.loop);if(!e.segments){o.push({source:t,target:l,start:r[a],end:r[s]});continue}const _=ii(e,l);for(const e of _){const a=Hr(i,n[e.start],n[e.end],e.loop),s=ei(t,r,a);for(const t of s)o.push({source:t,target:e,start:{[i]:jr(l,a,"start",Math.max)},end:{[i]:jr(l,a,"end",Math.min)}})}}return o}(i,a,r);for(const{source:e,target:l,start:_,end:c}of s){const{style:{backgroundColor:s=n}={}}=e,d=!0!==a;t.save(),t.fillStyle=s,$r(t,o,d&&Hr(r,_,c)),t.beginPath();const h=!!i.pathSegment(t,e);let p;if(d){h?t.closePath():Zr(t,a,c,r);const e=!!a.pathSegment(t,l,{move:h,reverse:!0});p=h&&e,p||Zr(t,a,_,r)}t.closePath(),t.fill(p?"evenodd":"nonzero"),t.restore()}}function Ur(t,e,i){const a=Vr(e),{line:r,scale:n,axis:o}=e,s=r.options,l=s.fill,_=s.backgroundColor,{above:c=_,below:d=_}=l||{};a&&r.points.length&&(Yt(t,i),function(t,e){const{line:i,target:a,above:r,below:n,area:o,scale:s}=e,l=i._loop?"angle":e.axis;t.save(),"x"===l&&n!==r&&(Nr(t,a,o.top),Yr(t,{line:i,target:a,color:r,scale:s,property:l}),t.restore(),t.save(),Nr(t,a,o.bottom)),Yr(t,{line:i,target:a,color:n,scale:s,property:l}),t.restore()}(t,{line:r,target:a,above:c,below:d,area:i,scale:n,axis:o}),Ut(t))}var Xr={id:"filler",afterDatasetsUpdate(t,e,i){const a=(t.data.datasets||[]).length,r=[];let n,o,s,l;for(o=0;o<a;++o)n=t.getDatasetMeta(o),s=n.dataset,l=null,s&&s.options&&s instanceof xr&&(l={visible:t.isDatasetVisible(o),index:o,fill:Rr(s,o,a),chart:t,axis:n.controller.options.indexAxis,scale:n.vScale,line:s}),n.$filler=l,r.push(l);for(o=0;o<a;++o)l=r[o],l&&!1!==l.fill&&(l.fill=Wr(r,o,i.propagate))},beforeDraw(t,e,i){const a="beforeDraw"===i.drawTime,r=t.getSortedVisibleDatasetMetas(),n=t.chartArea;for(let e=r.length-1;e>=0;--e){const i=r[e].$filler;i&&(i.line.updateControlPoints(n,i.axis),a&&Ur(t.ctx,i,n))}},beforeDatasetsDraw(t,e,i){if("beforeDatasetsDraw"!==i.drawTime)return;const a=t.getSortedVisibleDatasetMetas();for(let e=a.length-1;e>=0;--e){const i=a[e].$filler;i&&Ur(t.ctx,i,t.chartArea)}},beforeDatasetDraw(t,e,i){const a=e.meta.$filler;a&&!1!==a.fill&&"beforeDatasetDraw"===i.drawTime&&Ur(t.ctx,a,t.chartArea)},defaults:{propagate:!0,drawTime:"beforeDatasetDraw"}};const qr=(t,e)=>{let{boxHeight:i=e,boxWidth:a=e}=t;return t.usePointStyle&&(i=Math.min(i,e),a=Math.min(a,e)),{boxWidth:a,boxHeight:i,itemHeight:Math.max(e,i)}};class Kr extends Ma{constructor(t){super(),this._added=!1,this.legendHitBoxes=[],this._hoveredItem=null,this.doughnutMode=!1,this.chart=t.chart,this.options=t.options,this.ctx=t.ctx,this.legendItems=void 0,this.columnSizes=void 0,this.lineWidths=void 0,this.maxHeight=void 0,this.maxWidth=void 0,this.top=void 0,this.bottom=void 0,this.left=void 0,this.right=void 0,this.height=void 0,this.width=void 0,this._margins=void 0,this.position=void 0,this.weight=void 0,this.fullSize=void 0}update(t,e,i){this.maxWidth=t,this.maxHeight=e,this._margins=i,this.setDimensions(),this.buildLabels(),this.fit()}setDimensions(){this.isHorizontal()?(this.width=this.maxWidth,this.left=this._margins.left,this.right=this.width):(this.height=this.maxHeight,this.top=this._margins.top,this.bottom=this.height)}buildLabels(){const t=this.options.labels||{};let e=u(t.generateLabels,[this.chart],this)||[];t.filter&&(e=e.filter((e=>t.filter(e,this.chart.data)))),t.sort&&(e=e.sort(((e,i)=>t.sort(e,i,this.chart.data)))),this.options.reverse&&e.reverse(),this.legendItems=e}fit(){const{options:t,ctx:e}=this;if(!t.display)return void(this.width=this.height=0);const i=t.labels,a=oe(i.font),r=a.size,n=this._computeTitleHeight(),{boxWidth:o,itemHeight:s}=qr(i,r);let l,_;e.font=a.string,this.isHorizontal()?(l=this.maxWidth,_=this._fitRows(n,r,o,s)+10):(_=this.maxHeight,l=this._fitCols(n,r,o,s)+10),this.width=Math.min(l,t.maxWidth||this.maxWidth),this.height=Math.min(_,t.maxHeight||this.maxHeight)}_fitRows(t,e,i,a){const{ctx:r,maxWidth:n,options:{labels:{padding:o}}}=this,s=this.legendHitBoxes=[],l=this.lineWidths=[0],_=a+o;let c=t;r.textAlign="left",r.textBaseline="middle";let d=-1,h=-_;return this.legendItems.forEach(((t,p)=>{const u=i+e/2+r.measureText(t.text).width;(0===p||l[l.length-1]+u+2*o>n)&&(c+=_,l[l.length-(p>0?0:1)]=0,h+=_,d++),s[p]={left:0,top:h,row:d,width:u,height:a},l[l.length-1]+=u+o})),c}_fitCols(t,e,i,a){const{ctx:r,maxHeight:n,options:{labels:{padding:o}}}=this,s=this.legendHitBoxes=[],l=this.columnSizes=[],_=n-t;let c=o,d=0,h=0,p=0,u=0;return this.legendItems.forEach(((t,n)=>{const m=i+e/2+r.measureText(t.text).width;n>0&&h+a+2*o>_&&(c+=d+o,l.push({width:d,height:h}),p+=d+o,u++,d=h=0),s[n]={left:p,top:h,col:u,width:m,height:a},d=Math.max(d,m),h+=a+o})),c+=d,l.push({width:d,height:h}),c}adjustHitBoxes(){if(!this.options.display)return;const t=this._computeTitleHeight(),{legendHitBoxes:e,options:{align:i,labels:{padding:a},rtl:n}}=this,o=Ke(n,this.left,this.width);if(this.isHorizontal()){let n=0,s=r(i,this.left+a,this.right-this.lineWidths[n]);for(const l of e)n!==l.row&&(n=l.row,s=r(i,this.left+a,this.right-this.lineWidths[n])),l.top+=this.top+t+a,l.left=o.leftForLtr(o.x(s),l.width),s+=l.width+a}else{let n=0,s=r(i,this.top+t+a,this.bottom-this.columnSizes[n].height);for(const l of e)l.col!==n&&(n=l.col,s=r(i,this.top+t+a,this.bottom-this.columnSizes[n].height)),l.top=s,l.left+=this.left+a,l.left=o.leftForLtr(o.x(l.left),l.width),s+=l.height+a}}isHorizontal(){return"top"===this.options.position||"bottom"===this.options.position}draw(){if(this.options.display){const t=this.ctx;Yt(t,this),this._draw(),Ut(t)}}_draw(){const{options:t,columnSizes:e,lineWidths:i,ctx:a}=this,{align:n,labels:o}=t,s=Bt.color,l=Ke(t.rtl,this.left,this.width),_=oe(o.font),{color:c,padding:d}=o,p=_.size,u=p/2;let m;this.drawTitle(),a.textAlign=l.textAlign("left"),a.textBaseline="middle",a.lineWidth=.5,a.font=_.string;const{boxWidth:f,boxHeight:g,itemHeight:b}=qr(o,p),y=this.isHorizontal(),x=this._computeTitleHeight();m=y?{x:r(n,this.left+d,this.right-i[0]),y:this.top+d+x,line:0}:{x:this.left+d,y:r(n,this.top+x+d,this.bottom-e[0].height),line:0},Ge(this.ctx,t.textDirection);const w=b+d;this.legendItems.forEach(((v,k)=>{a.strokeStyle=v.fontColor||c,a.fillStyle=v.fontColor||c;const M=a.measureText(v.text).width,S=l.textAlign(v.textAlign||(v.textAlign=o.textAlign)),P=f+u+M;let D=m.x,T=m.y;l.setWidth(this.width),y?k>0&&D+P+d>this.right&&(T=m.y+=w,m.line++,D=m.x=r(n,this.left+d,this.right-i[m.line])):k>0&&T+w>this.bottom&&(D=m.x=D+e[m.line].width+d,m.line++,T=m.y=r(n,this.top+x+d,this.bottom-e[m.line].height)),function(t,e,i){if(isNaN(f)||f<=0||isNaN(g)||g<0)return;a.save();const r=h(i.lineWidth,1);if(a.fillStyle=h(i.fillStyle,s),a.lineCap=h(i.lineCap,"butt"),a.lineDashOffset=h(i.lineDashOffset,0),a.lineJoin=h(i.lineJoin,"miter"),a.lineWidth=r,a.strokeStyle=h(i.strokeStyle,s),a.setLineDash(h(i.lineDash,[])),o.usePointStyle){const n={radius:f*Math.SQRT2/2,pointStyle:i.pointStyle,rotation:i.rotation,borderWidth:r},o=l.xPlus(t,f/2);$t(a,n,o,e+u)}else{const n=e+Math.max((p-g)/2,0),o=l.leftForLtr(t,f),s=re(i.borderRadius);a.beginPath(),Object.values(s).some((t=>0!==t))?Jt(a,{x:o,y:n,w:f,h:g,radius:s}):a.rect(o,n,f,g),a.fill(),0!==r&&a.stroke()}a.restore()}(l.x(D),T,v),D=((t,e,i,a)=>t===(a?"left":"right")?i:"center"===t?(e+i)/2:e)(S,D+f+u,y?D+P:this.right,t.rtl),function(t,e,i){Kt(a,i.text,t,e+b/2,_,{strikethrough:i.hidden,textAlign:l.textAlign(i.textAlign)})}(l.x(D),T,v),y?m.x+=P+d:m.y+=w})),Je(this.ctx,t.textDirection)}drawTitle(){const t=this.options,e=t.title,i=oe(e.font),n=ne(e.padding);if(!e.display)return;const o=Ke(t.rtl,this.left,this.width),s=this.ctx,l=e.position,_=i.size/2,c=n.top+_;let d,h=this.left,p=this.width;if(this.isHorizontal())p=Math.max(...this.lineWidths),d=this.top+c,h=r(t.align,h,this.right-p);else{const e=this.columnSizes.reduce(((t,e)=>Math.max(t,e.height)),0);d=c+r(t.align,this.top,this.bottom-e-t.labels.padding-this._computeTitleHeight())}const u=r(l,h,h+p);s.textAlign=o.textAlign(a(l)),s.textBaseline="middle",s.strokeStyle=e.color,s.fillStyle=e.color,s.font=i.string,Kt(s,e.text,u,d,i)}_computeTitleHeight(){const t=this.options.title,e=oe(t.font),i=ne(t.padding);return t.display?e.lineHeight+i.height:0}_getLegendItemAt(t,e){let i,a,r;if(J(t,this.left,this.right)&&J(e,this.top,this.bottom))for(r=this.legendHitBoxes,i=0;i<r.length;++i)if(a=r[i],J(t,a.left,a.left+a.width)&&J(e,a.top,a.top+a.height))return this.legendItems[i];return null}handleEvent(t){const e=this.options;if(!function(t,e){return!("mousemove"!==t||!e.onHover&&!e.onLeave)||!(!e.onClick||"click"!==t&&"mouseup"!==t)}(t.type,e))return;const i=this._getLegendItemAt(t.x,t.y);if("mousemove"===t.type){const n=this._hoveredItem,o=(r=i,null!==(a=n)&&null!==r&&a.datasetIndex===r.datasetIndex&&a.index===r.index);n&&!o&&u(e.onLeave,[t,n,this],this),this._hoveredItem=i,i&&!o&&u(e.onHover,[t,i,this],this)}else i&&u(e.onClick,[t,i,this],this);var a,r}}var Gr={id:"legend",_element:Kr,start(t,e,i){const a=t.legend=new Kr({ctx:t.ctx,options:i,chart:t});sa.configure(t,a,i),sa.addBox(t,a)},stop(t){sa.removeBox(t,t.legend),delete t.legend},beforeUpdate(t,e,i){const a=t.legend;sa.configure(t,a,i),a.options=i},afterUpdate(t){const e=t.legend;e.buildLabels(),e.adjustHitBoxes()},afterEvent(t,e){e.replay||t.legend.handleEvent(e.event)},defaults:{display:!0,position:"top",align:"center",fullSize:!0,reverse:!1,weight:1e3,onClick(t,e,i){const a=e.datasetIndex,r=i.chart;r.isDatasetVisible(a)?(r.hide(a),e.hidden=!0):(r.show(a),e.hidden=!1)},onHover:null,onLeave:null,labels:{color:t=>t.chart.options.color,boxWidth:40,padding:10,generateLabels(t){const e=t.data.datasets,{labels:{usePointStyle:i,pointStyle:a,textAlign:r,color:n}}=t.legend.options;return t._getSortedDatasetMetas().map((t=>{const o=t.controller.getStyle(i?0:void 0),s=ne(o.borderWidth);return{text:e[t.index].label,fillStyle:o.backgroundColor,fontColor:n,hidden:!t.visible,lineCap:o.borderCapStyle,lineDash:o.borderDash,lineDashOffset:o.borderDashOffset,lineJoin:o.borderJoinStyle,lineWidth:(s.width+s.height)/4,strokeStyle:o.borderColor,pointStyle:a||o.pointStyle,rotation:o.rotation,textAlign:r||o.textAlign,borderRadius:0,datasetIndex:t.index}}),this)}},title:{color:t=>t.chart.options.color,display:!1,position:"center",text:""}},descriptors:{_scriptable:t=>!t.startsWith("on"),labels:{_scriptable:t=>!["generateLabels","filter","sort"].includes(t)}}};class Jr extends Ma{constructor(t){super(),this.chart=t.chart,this.options=t.options,this.ctx=t.ctx,this._padding=void 0,this.top=void 0,this.bottom=void 0,this.left=void 0,this.right=void 0,this.width=void 0,this.height=void 0,this.position=void 0,this.weight=void 0,this.fullSize=void 0}update(t,e){const i=this.options;if(this.left=0,this.top=0,!i.display)return void(this.width=this.height=this.right=this.bottom=0);this.width=this.right=t,this.height=this.bottom=e;const a=l(i.text)?i.text.length:1;this._padding=ne(i.padding);const r=a*oe(i.font).lineHeight+this._padding.height;this.isHorizontal()?this.height=r:this.width=r}isHorizontal(){const t=this.options.position;return"top"===t||"bottom"===t}_drawArgs(t){const{top:e,left:i,bottom:a,right:n,options:o}=this,s=o.align;let l,_,c,d=0;return this.isHorizontal()?(_=r(s,i,n),c=e+t,l=n-i):("left"===o.position?(_=i+t,c=r(s,a,e),d=-.5*C):(_=n-t,c=r(s,e,a),d=.5*C),l=a-e),{titleX:_,titleY:c,maxWidth:l,rotation:d}}draw(){const t=this.ctx,e=this.options;if(!e.display)return;const i=oe(e.font),r=i.lineHeight/2+this._padding.top,{titleX:n,titleY:o,maxWidth:s,rotation:l}=this._drawArgs(r);Kt(t,e.text,0,0,i,{color:e.color,maxWidth:s,rotation:l,textAlign:a(e.align),textBaseline:"middle",translation:[n,o]})}}var Qr={id:"title",_element:Jr,start(t,e,i){!function(t,e){const i=new Jr({ctx:t.ctx,options:e,chart:t});sa.configure(t,i,e),sa.addBox(t,i),t.titleBlock=i}(t,i)},stop(t){const e=t.titleBlock;sa.removeBox(t,e),delete t.titleBlock},beforeUpdate(t,e,i){const a=t.titleBlock;sa.configure(t,a,i),a.options=i},defaults:{align:"center",display:!1,font:{weight:"bold"},fullSize:!0,padding:10,position:"top",text:"",weight:2e3},defaultRoutes:{color:"color"},descriptors:{_scriptable:!0,_indexable:!1}};const tn=new WeakMap;var en={id:"subtitle",start(t,e,i){const a=new Jr({ctx:t.ctx,options:i,chart:t});sa.configure(t,a,i),sa.addBox(t,a),tn.set(t,a)},stop(t){sa.removeBox(t,tn.get(t)),tn.delete(t)},beforeUpdate(t,e,i){const a=tn.get(t);sa.configure(t,a,i),a.options=i},defaults:{align:"center",display:!1,font:{weight:"normal"},fullSize:!0,padding:0,position:"top",text:"",weight:1500},defaultRoutes:{color:"color"},descriptors:{_scriptable:!0,_indexable:!1}};const an={average(t){if(!t.length)return!1;let e,i,a=0,r=0,n=0;for(e=0,i=t.length;e<i;++e){const i=t[e].element;if(i&&i.hasValue()){const t=i.tooltipPosition();a+=t.x,r+=t.y,++n}}return{x:a/n,y:r/n}},nearest(t,e){if(!t.length)return!1;let i,a,r,n=e.x,o=e.y,s=Number.POSITIVE_INFINITY;for(i=0,a=t.length;i<a;++i){const a=t[i].element;if(a&&a.hasValue()){const t=U(e,a.getCenterPoint());t<s&&(s=t,r=a)}}if(r){const t=r.tooltipPosition();n=t.x,o=t.y}return{x:n,y:o}}};function rn(t,e){return e&&(l(e)?Array.prototype.push.apply(t,e):t.push(e)),t}function nn(t){return("string"==typeof t||t instanceof String)&&t.indexOf("\n")>-1?t.split("\n"):t}function on(t,e){const{element:i,datasetIndex:a,index:r}=e,n=t.getDatasetMeta(a).controller,{label:o,value:s}=n.getLabelAndValue(r);return{chart:t,label:o,parsed:n.getParsed(r),raw:t.data.datasets[a].data[r],formattedValue:s,dataset:n.getDataset(),dataIndex:r,datasetIndex:a,element:i}}function sn(t,e){const i=t.chart.ctx,{body:a,footer:r,title:n}=t,{boxWidth:o,boxHeight:s}=e,l=oe(e.bodyFont),_=oe(e.titleFont),c=oe(e.footerFont),d=n.length,h=r.length,p=a.length,u=ne(e.padding);let f=u.height,g=0,b=a.reduce(((t,e)=>t+e.before.length+e.lines.length+e.after.length),0);b+=t.beforeBody.length+t.afterBody.length,d&&(f+=d*_.lineHeight+(d-1)*e.titleSpacing+e.titleMarginBottom),b&&(f+=p*(e.displayColors?Math.max(s,l.lineHeight):l.lineHeight)+(b-p)*l.lineHeight+(b-1)*e.bodySpacing),h&&(f+=e.footerMarginTop+h*c.lineHeight+(h-1)*e.footerSpacing);let y=0;const x=function(t){g=Math.max(g,i.measureText(t).width+y)};return i.save(),i.font=_.string,m(t.title,x),i.font=l.string,m(t.beforeBody.concat(t.afterBody),x),y=e.displayColors?o+2+e.boxPadding:0,m(a,(t=>{m(t.before,x),m(t.lines,x),m(t.after,x)})),y=0,i.font=c.string,m(t.footer,x),i.restore(),g+=u.width,{width:g,height:f}}function ln(t,e,i,a){const{x:r,width:n}=i,{width:o,chartArea:{left:s,right:l}}=t;let _="center";return"center"===a?_=r<=(s+l)/2?"left":"right":r<=n/2?_="left":r>=o-n/2&&(_="right"),function(t,e,i,a){const{x:r,width:n}=a,o=i.caretSize+i.caretPadding;return"left"===t&&r+n+o>e.width||"right"===t&&r-n-o<0||void 0}(_,t,e,i)&&(_="center"),_}function _n(t,e,i){const a=i.yAlign||e.yAlign||function(t,e){const{y:i,height:a}=e;return i<a/2?"top":i>t.height-a/2?"bottom":"center"}(t,i);return{xAlign:i.xAlign||e.xAlign||ln(t,e,i,a),yAlign:a}}function cn(t,e,i,a){const{caretSize:r,caretPadding:n,cornerRadius:o}=t,{xAlign:s,yAlign:l}=i,_=r+n,{topLeft:c,topRight:d,bottomLeft:h,bottomRight:p}=re(o);let u=function(t,e){let{x:i,width:a}=t;return"right"===e?i-=a:"center"===e&&(i-=a/2),i}(e,s);const m=function(t,e,i){let{y:a,height:r}=t;return"top"===e?a+=i:a-="bottom"===e?r+i:r/2,a}(e,l,_);return"center"===l?"left"===s?u+=_:"right"===s&&(u-=_):"left"===s?u-=Math.max(c,h)+r:"right"===s&&(u+=Math.max(d,p)+r),{x:G(u,0,a.width-e.width),y:G(m,0,a.height-e.height)}}function dn(t,e,i){const a=ne(i.padding);return"center"===e?t.x+t.width/2:"right"===e?t.x+t.width-a.right:t.x+a.left}function hn(t){return rn([],nn(t))}function pn(t,e){const i=e&&e.dataset&&e.dataset.tooltip&&e.dataset.tooltip.callbacks;return i?t.override(i):t}class un extends Ma{constructor(t){super(),this.opacity=0,this._active=[],this._eventPosition=void 0,this._size=void 0,this._cachedAnimations=void 0,this._tooltipItems=[],this.$animations=void 0,this.$context=void 0,this.chart=t.chart||t._chart,this._chart=this.chart,this.options=t.options,this.dataPoints=void 0,this.title=void 0,this.beforeBody=void 0,this.body=void 0,this.afterBody=void 0,this.footer=void 0,this.xAlign=void 0,this.yAlign=void 0,this.x=void 0,this.y=void 0,this.height=void 0,this.width=void 0,this.caretX=void 0,this.caretY=void 0,this.labelColors=void 0,this.labelPointStyles=void 0,this.labelTextColors=void 0}initialize(t){this.options=t,this._cachedAnimations=void 0,this.$context=void 0}_resolveAnimations(){const t=this._cachedAnimations;if(t)return t;const e=this.chart,i=this.options.setContext(this.getContext()),a=i.enabled&&e.options.animation&&i.animations,r=new ci(this.chart,a);return a._cacheable&&(this._cachedAnimations=Object.freeze(r)),r}getContext(){return this.$context||(this.$context=(this,le(this.chart.getContext(),{tooltip:this,tooltipItems:this._tooltipItems,type:"tooltip"})))}getTitle(t,e){const{callbacks:i}=e,a=i.beforeTitle.apply(this,[t]),r=i.title.apply(this,[t]),n=i.afterTitle.apply(this,[t]);let o=[];return o=rn(o,nn(a)),o=rn(o,nn(r)),o=rn(o,nn(n)),o}getBeforeBody(t,e){return hn(e.callbacks.beforeBody.apply(this,[t]))}getBody(t,e){const{callbacks:i}=e,a=[];return m(t,(t=>{const e={before:[],lines:[],after:[]},r=pn(i,t);rn(e.before,nn(r.beforeLabel.call(this,t))),rn(e.lines,r.label.call(this,t)),rn(e.after,nn(r.afterLabel.call(this,t))),a.push(e)})),a}getAfterBody(t,e){return hn(e.callbacks.afterBody.apply(this,[t]))}getFooter(t,e){const{callbacks:i}=e,a=i.beforeFooter.apply(this,[t]),r=i.footer.apply(this,[t]),n=i.afterFooter.apply(this,[t]);let o=[];return o=rn(o,nn(a)),o=rn(o,nn(r)),o=rn(o,nn(n)),o}_createItems(t){const e=this._active,i=this.chart.data,a=[],r=[],n=[];let o,s,l=[];for(o=0,s=e.length;o<s;++o)l.push(on(this.chart,e[o]));return t.filter&&(l=l.filter(((e,a,r)=>t.filter(e,a,r,i)))),t.itemSort&&(l=l.sort(((e,a)=>t.itemSort(e,a,i)))),m(l,(e=>{const i=pn(t.callbacks,e);a.push(i.labelColor.call(this,e)),r.push(i.labelPointStyle.call(this,e)),n.push(i.labelTextColor.call(this,e))})),this.labelColors=a,this.labelPointStyles=r,this.labelTextColors=n,this.dataPoints=l,l}update(t,e){const i=this.options.setContext(this.getContext()),a=this._active;let r,n=[];if(a.length){const t=an[i.position].call(this,a,this._eventPosition);n=this._createItems(i),this.title=this.getTitle(n,i),this.beforeBody=this.getBeforeBody(n,i),this.body=this.getBody(n,i),this.afterBody=this.getAfterBody(n,i),this.footer=this.getFooter(n,i);const e=this._size=sn(this,i),o=Object.assign({},t,e),s=_n(this.chart,i,o),l=cn(i,o,s,this.chart);this.xAlign=s.xAlign,this.yAlign=s.yAlign,r={opacity:1,x:l.x,y:l.y,width:e.width,height:e.height,caretX:t.x,caretY:t.y}}else 0!==this.opacity&&(r={opacity:0});this._tooltipItems=n,this.$context=void 0,r&&this._resolveAnimations().update(this,r),t&&i.external&&i.external.call(this,{chart:this.chart,tooltip:this,replay:e})}drawCaret(t,e,i,a){const r=this.getCaretPosition(t,i,a);e.lineTo(r.x1,r.y1),e.lineTo(r.x2,r.y2),e.lineTo(r.x3,r.y3)}getCaretPosition(t,e,i){const{xAlign:a,yAlign:r}=this,{caretSize:n,cornerRadius:o}=i,{topLeft:s,topRight:l,bottomLeft:_,bottomRight:c}=re(o),{x:d,y:h}=t,{width:p,height:u}=e;let m,f,g,b,y,x;return"center"===r?(y=h+u/2,"left"===a?(m=d,f=m-n,b=y+n,x=y-n):(m=d+p,f=m+n,b=y-n,x=y+n),g=m):(f="left"===a?d+Math.max(s,_)+n:"right"===a?d+p-Math.max(l,c)-n:this.caretX,"top"===r?(b=h,y=b-n,m=f-n,g=f+n):(b=h+u,y=b+n,m=f+n,g=f-n),x=b),{x1:m,x2:f,x3:g,y1:b,y2:y,y3:x}}drawTitle(t,e,i){const a=this.title,r=a.length;let n,o,s;if(r){const l=Ke(i.rtl,this.x,this.width);for(t.x=dn(this,i.titleAlign,i),e.textAlign=l.textAlign(i.titleAlign),e.textBaseline="middle",n=oe(i.titleFont),o=i.titleSpacing,e.fillStyle=i.titleColor,e.font=n.string,s=0;s<r;++s)e.fillText(a[s],l.x(t.x),t.y+n.lineHeight/2),t.y+=n.lineHeight+o,s+1===r&&(t.y+=i.titleMarginBottom-o)}}_drawColorBox(t,e,i,a,r){const n=this.labelColors[i],o=this.labelPointStyles[i],{boxHeight:s,boxWidth:l,boxPadding:_}=r,c=oe(r.bodyFont),d=dn(this,"left",r),h=a.x(d),p=s<c.lineHeight?(c.lineHeight-s)/2:0,u=e.y+p;if(r.usePointStyle){const e={radius:Math.min(l,s)/2,pointStyle:o.pointStyle,rotation:o.rotation,borderWidth:1},i=a.leftForLtr(h,l)+l/2,_=u+s/2;t.strokeStyle=r.multiKeyBackground,t.fillStyle=r.multiKeyBackground,$t(t,e,i,_),t.strokeStyle=n.borderColor,t.fillStyle=n.backgroundColor,$t(t,e,i,_)}else{t.lineWidth=n.borderWidth||1,t.strokeStyle=n.borderColor,t.setLineDash(n.borderDash||[]),t.lineDashOffset=n.borderDashOffset||0;const e=a.leftForLtr(h,l-_),i=a.leftForLtr(a.xPlus(h,1),l-_-2),o=re(n.borderRadius);Object.values(o).some((t=>0!==t))?(t.beginPath(),t.fillStyle=r.multiKeyBackground,Jt(t,{x:e,y:u,w:l,h:s,radius:o}),t.fill(),t.stroke(),t.fillStyle=n.backgroundColor,t.beginPath(),Jt(t,{x:i,y:u+1,w:l-2,h:s-2,radius:o}),t.fill()):(t.fillStyle=r.multiKeyBackground,t.fillRect(e,u,l,s),t.strokeRect(e,u,l,s),t.fillStyle=n.backgroundColor,t.fillRect(i,u+1,l-2,s-2))}t.fillStyle=this.labelTextColors[i]}drawBody(t,e,i){const{body:a}=this,{bodySpacing:r,bodyAlign:n,displayColors:o,boxHeight:s,boxWidth:l,boxPadding:_}=i,c=oe(i.bodyFont);let d=c.lineHeight,h=0;const p=Ke(i.rtl,this.x,this.width),u=function(i){e.fillText(i,p.x(t.x+h),t.y+d/2),t.y+=d+r},f=p.textAlign(n);let g,b,y,x,w,v,k;for(e.textAlign=n,e.textBaseline="middle",e.font=c.string,t.x=dn(this,f,i),e.fillStyle=i.bodyColor,m(this.beforeBody,u),h=o&&"right"!==f?"center"===n?l/2+_:l+2+_:0,x=0,v=a.length;x<v;++x){for(g=a[x],b=this.labelTextColors[x],e.fillStyle=b,m(g.before,u),y=g.lines,o&&y.length&&(this._drawColorBox(e,t,x,p,i),d=Math.max(c.lineHeight,s)),w=0,k=y.length;w<k;++w)u(y[w]),d=c.lineHeight;m(g.after,u)}h=0,d=c.lineHeight,m(this.afterBody,u),t.y-=r}drawFooter(t,e,i){const a=this.footer,r=a.length;let n,o;if(r){const s=Ke(i.rtl,this.x,this.width);for(t.x=dn(this,i.footerAlign,i),t.y+=i.footerMarginTop,e.textAlign=s.textAlign(i.footerAlign),e.textBaseline="middle",n=oe(i.footerFont),e.fillStyle=i.footerColor,e.font=n.string,o=0;o<r;++o)e.fillText(a[o],s.x(t.x),t.y+n.lineHeight/2),t.y+=n.lineHeight+i.footerSpacing}}drawBackground(t,e,i,a){const{xAlign:r,yAlign:n}=this,{x:o,y:s}=t,{width:l,height:_}=i,{topLeft:c,topRight:d,bottomLeft:h,bottomRight:p}=re(a.cornerRadius);e.fillStyle=a.backgroundColor,e.strokeStyle=a.borderColor,e.lineWidth=a.borderWidth,e.beginPath(),e.moveTo(o+c,s),"top"===n&&this.drawCaret(t,e,i,a),e.lineTo(o+l-d,s),e.quadraticCurveTo(o+l,s,o+l,s+d),"center"===n&&"right"===r&&this.drawCaret(t,e,i,a),e.lineTo(o+l,s+_-p),e.quadraticCurveTo(o+l,s+_,o+l-p,s+_),"bottom"===n&&this.drawCaret(t,e,i,a),e.lineTo(o+h,s+_),e.quadraticCurveTo(o,s+_,o,s+_-h),"center"===n&&"left"===r&&this.drawCaret(t,e,i,a),e.lineTo(o,s+c),e.quadraticCurveTo(o,s,o+c,s),e.closePath(),e.fill(),a.borderWidth>0&&e.stroke()}_updateAnimationTarget(t){const e=this.chart,i=this.$animations,a=i&&i.x,r=i&&i.y;if(a||r){const i=an[t.position].call(this,this._active,this._eventPosition);if(!i)return;const n=this._size=sn(this,t),o=Object.assign({},i,this._size),s=_n(e,t,o),l=cn(t,o,s,e);a._to===l.x&&r._to===l.y||(this.xAlign=s.xAlign,this.yAlign=s.yAlign,this.width=n.width,this.height=n.height,this.caretX=i.x,this.caretY=i.y,this._resolveAnimations().update(this,l))}}draw(t){const e=this.options.setContext(this.getContext());let i=this.opacity;if(!i)return;this._updateAnimationTarget(e);const a={width:this.width,height:this.height},r={x:this.x,y:this.y};i=Math.abs(i)<.001?0:i;const n=ne(e.padding),o=this.title.length||this.beforeBody.length||this.body.length||this.afterBody.length||this.footer.length;e.enabled&&o&&(t.save(),t.globalAlpha=i,this.drawBackground(r,t,a,e),Ge(t,e.textDirection),r.y+=n.top,this.drawTitle(r,t,e),this.drawBody(r,t,e),this.drawFooter(r,t,e),Je(t,e.textDirection),t.restore())}getActiveElements(){return this._active||[]}setActiveElements(t,e){const i=this._active,a=t.map((({datasetIndex:t,index:e})=>{const i=this.chart.getDatasetMeta(t);if(!i)throw new Error("Cannot find a dataset at index "+t);return{datasetIndex:t,element:i.data[e],index:e}})),r=!f(i,a),n=this._positionChanged(a,e);(r||n)&&(this._active=a,this._eventPosition=e,this._ignoreReplayEvents=!0,this.update(!0))}handleEvent(t,e,i=!0){if(e&&this._ignoreReplayEvents)return!1;this._ignoreReplayEvents=!1;const a=this.options,r=this._active||[],n=this._getActiveElements(t,r,e,i),o=this._positionChanged(n,t),s=e||!f(n,r)||o;return s&&(this._active=n,(a.enabled||a.external)&&(this._eventPosition={x:t.x,y:t.y},this.update(!0,e))),s}_getActiveElements(t,e,i,a){const r=this.options;if("mouseout"===t.type)return[];if(!a)return e;const n=this.chart.getElementsAtEventForMode(t,r.mode,r,i);return r.reverse&&n.reverse(),n}_positionChanged(t,e){const{caretX:i,caretY:a,options:r}=this,n=an[r.position].call(this,t,e);return!1!==n&&(i!==n.x||a!==n.y)}}un.positioners=an;var mn={id:"tooltip",_element:un,positioners:an,afterInit(t,e,i){i&&(t.tooltip=new un({chart:t,options:i}))},beforeUpdate(t,e,i){t.tooltip&&t.tooltip.initialize(i)},reset(t,e,i){t.tooltip&&t.tooltip.initialize(i)},afterDraw(t){const e=t.tooltip,i={tooltip:e};!1!==t.notifyPlugins("beforeTooltipDraw",i)&&(e&&e.draw(t.ctx),t.notifyPlugins("afterTooltipDraw",i))},afterEvent(t,e){if(t.tooltip){const i=e.replay;t.tooltip.handleEvent(e.event,i,e.inChartArea)&&(e.changed=!0)}},defaults:{enabled:!0,external:null,position:"average",backgroundColor:"rgba(0,0,0,0.8)",titleColor:"#fff",titleFont:{weight:"bold"},titleSpacing:2,titleMarginBottom:6,titleAlign:"left",bodyColor:"#fff",bodySpacing:2,bodyFont:{},bodyAlign:"left",footerColor:"#fff",footerSpacing:2,footerMarginTop:6,footerFont:{weight:"bold"},footerAlign:"left",padding:6,caretPadding:2,caretSize:5,cornerRadius:6,boxHeight:(t,e)=>e.bodyFont.size,boxWidth:(t,e)=>e.bodyFont.size,multiKeyBackground:"#fff",displayColors:!0,boxPadding:0,borderColor:"rgba(0,0,0,0)",borderWidth:0,animation:{duration:400,easing:"easeOutQuart"},animations:{numbers:{type:"number",properties:["x","y","width","height","caretX","caretY"]},opacity:{easing:"linear",duration:200}},callbacks:{beforeTitle:n,title(t){if(t.length>0){const e=t[0],i=e.chart.data.labels,a=i?i.length:0;if(this&&this.options&&"dataset"===this.options.mode)return e.dataset.label||"";if(e.label)return e.label;if(a>0&&e.dataIndex<a)return i[e.dataIndex]}return""},afterTitle:n,beforeBody:n,beforeLabel:n,label(t){if(this&&this.options&&"dataset"===this.options.mode)return t.label+": "+t.formattedValue||t.formattedValue;let e=t.dataset.label||"";e&&(e+=": ");const i=t.formattedValue;return s(i)||(e+=i),e},labelColor(t){const e=t.chart.getDatasetMeta(t.datasetIndex).controller.getStyle(t.dataIndex);return{borderColor:e.borderColor,backgroundColor:e.backgroundColor,borderWidth:e.borderWidth,borderDash:e.borderDash,borderDashOffset:e.borderDashOffset,borderRadius:0}},labelTextColor(){return this.options.bodyColor},labelPointStyle(t){const e=t.chart.getDatasetMeta(t.datasetIndex).controller.getStyle(t.dataIndex);return{pointStyle:e.pointStyle,rotation:e.rotation}},afterLabel:n,afterBody:n,beforeFooter:n,footer:n,afterFooter:n}},defaultRoutes:{bodyFont:"font",footerFont:"font",titleFont:"font"},descriptors:{_scriptable:t=>"filter"!==t&&"itemSort"!==t&&"external"!==t,_indexable:!1,callbacks:{_scriptable:!1,_indexable:!1},animation:{_fallback:!1},animations:{_fallback:"animation"}},additionalOptionScopes:["interaction"]},fn=Object.freeze({__proto__:null,Decimation:Lr,Filler:Xr,Legend:Gr,SubTitle:en,Title:Qr,Tooltip:mn});class gn extends Ea{constructor(t){super(t),this._startValue=void 0,this._valueRange=0,this._addedLabels=[]}init(t){const e=this._addedLabels;if(e.length){const t=this.getLabels();for(const{index:i,label:a}of e)t[i]===a&&t.splice(i,1);this._addedLabels=[]}super.init(t)}parse(t,e){if(s(t))return null;const i=this.getLabels();return((t,e)=>null===t?null:G(Math.round(t),0,e))(e=isFinite(e)&&i[e]===t?e:function(t,e,i,a){const r=t.indexOf(e);return-1===r?((t,e,i,a)=>("string"==typeof e?(i=t.push(e)-1,a.unshift({index:i,label:e})):isNaN(e)&&(i=null),i))(t,e,i,a):r!==t.lastIndexOf(e)?i:r}(i,t,h(e,t),this._addedLabels),i.length-1)}determineDataLimits(){const{minDefined:t,maxDefined:e}=this.getUserBounds();let{min:i,max:a}=this.getMinMax(!0);"ticks"===this.options.bounds&&(t||(i=0),e||(a=this.getLabels().length-1)),this.min=i,this.max=a}buildTicks(){const t=this.min,e=this.max,i=this.options.offset,a=[];let r=this.getLabels();r=0===t&&e===r.length-1?r:r.slice(t,e+1),this._valueRange=Math.max(r.length-(i?0:1),1),this._startValue=this.min-(i?.5:0);for(let i=t;i<=e;i++)a.push({value:i});return a}getLabelForValue(t){const e=this.getLabels();return t>=0&&t<e.length?e[t]:t}configure(){super.configure(),this.isHorizontal()||(this._reversePixels=!this._reversePixels)}getPixelForValue(t){return"number"!=typeof t&&(t=this.parse(t)),null===t?NaN:this.getPixelForDecimal((t-this._startValue)/this._valueRange)}getPixelForTick(t){const e=this.ticks;return t<0||t>e.length-1?null:this.getPixelForValue(e[t].value)}getValueForPixel(t){return Math.round(this._startValue+this.getDecimalForPixel(t)*this._valueRange)}getBasePixel(){return this.bottom}}function bn(t,e,{horizontal:i,minRotation:a}){const r=j(a),n=(i?Math.sin(r):Math.cos(r))||.001,o=.75*e*(""+t).length;return Math.min(e/n,o)}gn.id="category",gn.defaults={ticks:{callback:gn.prototype.getLabelForValue}};class yn extends Ea{constructor(t){super(t),this.start=void 0,this.end=void 0,this._startValue=void 0,this._endValue=void 0,this._valueRange=0}parse(t,e){return s(t)||("number"==typeof t||t instanceof Number)&&!isFinite(+t)?null:+t}handleTickRangeOptions(){const{beginAtZero:t}=this.options,{minDefined:e,maxDefined:i}=this.getUserBounds();let{min:a,max:r}=this;const n=t=>a=e?a:t,o=t=>r=i?r:t;if(t){const t=V(a),e=V(r);t<0&&e<0?o(0):t>0&&e>0&&n(0)}if(a===r){let e=1;(r>=Number.MAX_SAFE_INTEGER||a<=Number.MIN_SAFE_INTEGER)&&(e=Math.abs(.05*r)),o(r+e),t||n(a-e)}this.min=a,this.max=r}getTickLimit(){const t=this.options.ticks;let e,{maxTicksLimit:i,stepSize:a}=t;return a?(e=Math.ceil(this.max/a)-Math.floor(this.min/a)+1,e>1e3&&(console.warn(`scales.${this.id}.ticks.stepSize: ${a} would result generating up to ${e} ticks. Limiting to 1000.`),e=1e3)):(e=this.computeTickLimit(),i=i||11),i&&(e=Math.min(i,e)),e}computeTickLimit(){return Number.POSITIVE_INFINITY}buildTicks(){const t=this.options,e=t.ticks;let i=this.getTickLimit();i=Math.max(2,i);const a=function(t,e){const i=[],{bounds:a,step:r,min:n,max:o,precision:l,count:_,maxTicks:c,maxDigits:d,includeBounds:h}=t,p=r||1,u=c-1,{min:m,max:f}=e,g=!s(n),b=!s(o),y=!s(_),x=(f-m)/(d+1);let w,v,k,M,S=B((f-m)/u/p)*p;if(S<1e-14&&!g&&!b)return[{value:m},{value:f}];M=Math.ceil(f/S)-Math.floor(m/S),M>u&&(S=B(M*S/u/p)*p),s(l)||(w=Math.pow(10,l),S=Math.ceil(S*w)/w),"ticks"===a?(v=Math.floor(m/S)*S,k=Math.ceil(f/S)*S):(v=m,k=f),g&&b&&r&&function(t,e){const i=Math.round(t);return i-e<=t&&i+e>=t}((o-n)/r,S/1e3)?(M=Math.round(Math.min((o-n)/S,c)),S=(o-n)/M,v=n,k=o):y?(v=g?n:v,k=b?o:k,M=_-1,S=(k-v)/M):(M=(k-v)/S,M=N(M,Math.round(M),S/1e3)?Math.round(M):Math.ceil(M));const P=Math.max(Z(S),Z(v));w=Math.pow(10,s(l)?P:l),v=Math.round(v*w)/w,k=Math.round(k*w)/w;let D=0;for(g&&(h&&v!==n?(i.push({value:n}),v<n&&D++,N(Math.round((v+D*S)*w)/w,n,bn(n,x,t))&&D++):v<n&&D++);D<M;++D)i.push({value:Math.round((v+D*S)*w)/w});return b&&h&&k!==o?i.length&&N(i[i.length-1].value,o,bn(o,x,t))?i[i.length-1].value=o:i.push({value:o}):b&&k!==o||i.push({value:k}),i}({maxTicks:i,bounds:t.bounds,min:t.min,max:t.max,precision:e.precision,step:e.stepSize,count:e.count,maxDigits:this._maxDigits(),horizontal:this.isHorizontal(),minRotation:e.minRotation||0,includeBounds:!1!==e.includeBounds},this._range||this);return"ticks"===t.bounds&&H(a,this,"value"),t.reverse?(a.reverse(),this.start=this.max,this.end=this.min):(this.start=this.min,this.end=this.max),a}configure(){const t=this.ticks;let e=this.min,i=this.max;if(super.configure(),this.options.offset&&t.length){const a=(i-e)/Math.max(t.length-1,1)/2;e-=a,i+=a}this._startValue=e,this._endValue=i,this._valueRange=i-e}getLabelForValue(t){return qe(t,this.chart.options.locale,this.options.ticks.format)}}class xn extends yn{determineDataLimits(){const{min:t,max:e}=this.getMinMax(!0);this.min=c(t)?t:0,this.max=c(e)?e:1,this.handleTickRangeOptions()}computeTickLimit(){const t=this.isHorizontal(),e=t?this.width:this.height,i=j(this.options.ticks.minRotation),a=(t?Math.sin(i):Math.cos(i))||.001,r=this._resolveTickFontOptions(0);return Math.ceil(e/Math.min(40,r.lineHeight/a))}getPixelForValue(t){return null===t?NaN:this.getPixelForDecimal((t-this._startValue)/this._valueRange)}getValueForPixel(t){return this._startValue+this.getDecimalForPixel(t)*this._valueRange}}function wn(t){return 1==t/Math.pow(10,Math.floor(F(t)))}xn.id="linear",xn.defaults={ticks:{callback:Pa.formatters.numeric}};class vn extends Ea{constructor(t){super(t),this.start=void 0,this.end=void 0,this._startValue=void 0,this._valueRange=0}parse(t,e){const i=yn.prototype.parse.apply(this,[t,e]);if(0!==i)return c(i)&&i>0?i:null;this._zero=!0}determineDataLimits(){const{min:t,max:e}=this.getMinMax(!0);this.min=c(t)?Math.max(0,t):null,this.max=c(e)?Math.max(0,e):null,this.options.beginAtZero&&(this._zero=!0),this.handleTickRangeOptions()}handleTickRangeOptions(){const{minDefined:t,maxDefined:e}=this.getUserBounds();let i=this.min,a=this.max;const r=e=>i=t?i:e,n=t=>a=e?a:t,o=(t,e)=>Math.pow(10,Math.floor(F(t))+e);i===a&&(i<=0?(r(1),n(10)):(r(o(i,-1)),n(o(a,1)))),i<=0&&r(o(a,-1)),a<=0&&n(o(i,1)),this._zero&&this.min!==this._suggestedMin&&i===o(this.min,0)&&r(o(i,-1)),this.min=i,this.max=a}buildTicks(){const t=this.options,e=function(t,e){const i=Math.floor(F(e.max)),a=Math.ceil(e.max/Math.pow(10,i)),r=[];let n=d(t.min,Math.pow(10,Math.floor(F(e.min)))),o=Math.floor(F(n)),s=Math.floor(n/Math.pow(10,o)),l=o<0?Math.pow(10,Math.abs(o)):1;do{r.push({value:n,major:wn(n)}),++s,10===s&&(s=1,++o,l=o>=0?1:l),n=Math.round(s*Math.pow(10,o)*l)/l}while(o<i||o===i&&s<a);const _=d(t.max,n);return r.push({value:_,major:wn(n)}),r}({min:this._userMin,max:this._userMax},this);return"ticks"===t.bounds&&H(e,this,"value"),t.reverse?(e.reverse(),this.start=this.max,this.end=this.min):(this.start=this.min,this.end=this.max),e}getLabelForValue(t){return void 0===t?"0":qe(t,this.chart.options.locale,this.options.ticks.format)}configure(){const t=this.min;super.configure(),this._startValue=F(t),this._valueRange=F(this.max)-F(t)}getPixelForValue(t){return void 0!==t&&0!==t||(t=this.min),null===t||isNaN(t)?NaN:this.getPixelForDecimal(t===this.min?0:(F(t)-this._startValue)/this._valueRange)}getValueForPixel(t){const e=this.getDecimalForPixel(t);return Math.pow(10,this._startValue+e*this._valueRange)}}function kn(t){const e=t.ticks;if(e.display&&t.display){const t=ne(e.backdropPadding);return h(e.font&&e.font.size,Bt.font.size)+t.height}return 0}function Mn(t,e,i,a,r){return t===a||t===r?{start:e-i/2,end:e+i/2}:t<a||t>r?{start:e-i,end:e}:{start:e,end:e+i}}function Sn(t,e,i,a,r){const n=Math.abs(Math.sin(i)),o=Math.abs(Math.cos(i));let s=0,l=0;a.start<e.l?(s=(e.l-a.start)/n,t.l=Math.min(t.l,e.l-s)):a.end>e.r&&(s=(a.end-e.r)/n,t.r=Math.max(t.r,e.r+s)),r.start<e.t?(l=(e.t-r.start)/o,t.t=Math.min(t.t,e.t-l)):r.end>e.b&&(l=(r.end-e.b)/o,t.b=Math.max(t.b,e.b+l))}function Pn(t){return 0===t||180===t?"center":t<180?"left":"right"}function Dn(t,e,i){return 90===i||270===i?t-=e/2:(i>270||i<90)&&(t-=e),t}function Tn(t,e,i,a){const{ctx:r}=t;if(i)r.arc(t.xCenter,t.yCenter,e,0,O);else{let i=t.getPointPosition(0,e);r.moveTo(i.x,i.y);for(let n=1;n<a;n++)i=t.getPointPosition(n,e),r.lineTo(i.x,i.y)}}vn.id="logarithmic",vn.defaults={ticks:{callback:Pa.formatters.logarithmic,major:{enabled:!0}}};class Cn extends yn{constructor(t){super(t),this.xCenter=void 0,this.yCenter=void 0,this.drawingArea=void 0,this._pointLabels=[],this._pointLabelItems=[]}setDimensions(){const t=this._padding=ne(kn(this.options)/2),e=this.width=this.maxWidth-t.width,i=this.height=this.maxHeight-t.height;this.xCenter=Math.floor(this.left+e/2+t.left),this.yCenter=Math.floor(this.top+i/2+t.top),this.drawingArea=Math.floor(Math.min(e,i)/2)}determineDataLimits(){const{min:t,max:e}=this.getMinMax(!1);this.min=c(t)&&!isNaN(t)?t:0,this.max=c(e)&&!isNaN(e)?e:0,this.handleTickRangeOptions()}computeTickLimit(){return Math.ceil(this.drawingArea/kn(this.options))}generateTickLabels(t){yn.prototype.generateTickLabels.call(this,t),this._pointLabels=this.getLabels().map(((t,e)=>{const i=u(this.options.pointLabels.callback,[t,e],this);return i||0===i?i:""})).filter(((t,e)=>this.chart.getDataVisibility(e)))}fit(){const t=this.options;t.display&&t.pointLabels.display?function(t){const e={l:t.left+t._padding.left,r:t.right-t._padding.right,t:t.top+t._padding.top,b:t.bottom-t._padding.bottom},i=Object.assign({},e),a=[],r=[],n=t._pointLabels.length,o=t.options.pointLabels,s=o.centerPointLabels?C/n:0;for(let h=0;h<n;h++){const n=o.setContext(t.getPointLabelContext(h));r[h]=n.padding;const p=t.getPointPosition(h,t.drawingArea+r[h],s),u=oe(n.font),m=(_=t.ctx,c=u,d=l(d=t._pointLabels[h])?d:[d],{w:Nt(_,c.string,d),h:d.length*c.lineHeight});a[h]=m;const f=q(t.getIndexAngle(h)+s),g=Math.round($(f));Sn(i,e,f,Mn(g,p.x,m.w,0,180),Mn(g,p.y,m.h,90,270))}var _,c,d;t.setCenterPoint(e.l-i.l,i.r-e.r,e.t-i.t,i.b-e.b),t._pointLabelItems=function(t,e,i){const a=[],r=t._pointLabels.length,n=t.options,o=kn(n)/2,s=t.drawingArea,l=n.pointLabels.centerPointLabels?C/r:0;for(let n=0;n<r;n++){const r=t.getPointPosition(n,s+o+i[n],l),h=Math.round($(q(r.angle+E))),p=e[n],u=Dn(r.y,p.h,h),m=Pn(h),f=(_=r.x,c=p.w,"right"===(d=m)?_-=c:"center"===d&&(_-=c/2),_);a.push({x:r.x,y:u,textAlign:m,left:f,top:u,right:f+p.w,bottom:u+p.h})}var _,c,d;return a}(t,a,r)}(this):this.setCenterPoint(0,0,0,0)}setCenterPoint(t,e,i,a){this.xCenter+=Math.floor((t-e)/2),this.yCenter+=Math.floor((i-a)/2),this.drawingArea-=Math.min(this.drawingArea/2,Math.max(t,e,i,a))}getIndexAngle(t){return q(t*(O/(this._pointLabels.length||1))+j(this.options.startAngle||0))}getDistanceFromCenterForValue(t){if(s(t))return NaN;const e=this.drawingArea/(this.max-this.min);return this.options.reverse?(this.max-t)*e:(t-this.min)*e}getValueForDistanceFromCenter(t){if(s(t))return NaN;const e=t/(this.drawingArea/(this.max-this.min));return this.options.reverse?this.max-e:this.min+e}getPointLabelContext(t){const e=this._pointLabels||[];if(t>=0&&t<e.length){const i=e[t];return function(t,e,i){return le(t,{label:i,index:e,type:"pointLabel"})}(this.getContext(),t,i)}}getPointPosition(t,e,i=0){const a=this.getIndexAngle(t)-E+i;return{x:Math.cos(a)*e+this.xCenter,y:Math.sin(a)*e+this.yCenter,angle:a}}getPointPositionForValue(t,e){return this.getPointPosition(t,this.getDistanceFromCenterForValue(e))}getBasePosition(t){return this.getPointPositionForValue(t||0,this.getBaseValue())}getPointLabelPosition(t){const{left:e,top:i,right:a,bottom:r}=this._pointLabelItems[t];return{left:e,top:i,right:a,bottom:r}}drawBackground(){const{backgroundColor:t,grid:{circular:e}}=this.options;if(t){const i=this.ctx;i.save(),i.beginPath(),Tn(this,this.getDistanceFromCenterForValue(this._endValue),e,this._pointLabels.length),i.closePath(),i.fillStyle=t,i.fill(),i.restore()}}drawGrid(){const t=this.ctx,e=this.options,{angleLines:i,grid:a}=e,r=this._pointLabels.length;let n,o,l;if(e.pointLabels.display&&function(t,e){const{ctx:i,options:{pointLabels:a}}=t;for(let r=e-1;r>=0;r--){const e=a.setContext(t.getPointLabelContext(r)),n=oe(e.font),{x:o,y:l,textAlign:_,left:c,top:d,right:h,bottom:p}=t._pointLabelItems[r],{backdropColor:u}=e;if(!s(u)){const t=ne(e.backdropPadding);i.fillStyle=u,i.fillRect(c-t.left,d-t.top,h-c+t.width,p-d+t.height)}Kt(i,t._pointLabels[r],o,l+n.lineHeight/2,n,{color:e.color,textAlign:_,textBaseline:"middle"})}}(this,r),a.display&&this.ticks.forEach(((t,e)=>{0!==e&&(o=this.getDistanceFromCenterForValue(t.value),function(t,e,i,a){const r=t.ctx,n=e.circular,{color:o,lineWidth:s}=e;!n&&!a||!o||!s||i<0||(r.save(),r.strokeStyle=o,r.lineWidth=s,r.setLineDash(e.borderDash),r.lineDashOffset=e.borderDashOffset,r.beginPath(),Tn(t,i,n,a),r.closePath(),r.stroke(),r.restore())}(this,a.setContext(this.getContext(e-1)),o,r))})),i.display){for(t.save(),n=r-1;n>=0;n--){const a=i.setContext(this.getPointLabelContext(n)),{color:r,lineWidth:s}=a;s&&r&&(t.lineWidth=s,t.strokeStyle=r,t.setLineDash(a.borderDash),t.lineDashOffset=a.borderDashOffset,o=this.getDistanceFromCenterForValue(e.ticks.reverse?this.min:this.max),l=this.getPointPosition(n,o),t.beginPath(),t.moveTo(this.xCenter,this.yCenter),t.lineTo(l.x,l.y),t.stroke())}t.restore()}}drawBorder(){}drawLabels(){const t=this.ctx,e=this.options,i=e.ticks;if(!i.display)return;const a=this.getIndexAngle(0);let r,n;t.save(),t.translate(this.xCenter,this.yCenter),t.rotate(a),t.textAlign="center",t.textBaseline="middle",this.ticks.forEach(((a,o)=>{if(0===o&&!e.reverse)return;const s=i.setContext(this.getContext(o)),l=oe(s.font);if(r=this.getDistanceFromCenterForValue(this.ticks[o].value),s.showLabelBackdrop){t.font=l.string,n=t.measureText(a.label).width,t.fillStyle=s.backdropColor;const e=ne(s.backdropPadding);t.fillRect(-n/2-e.left,-r-l.size/2-e.top,n+e.width,l.size+e.height)}Kt(t,a.label,0,-r,l,{color:s.color})})),t.restore()}drawTitle(){}}Cn.id="radialLinear",Cn.defaults={display:!0,animate:!0,position:"chartArea",angleLines:{display:!0,lineWidth:1,borderDash:[],borderDashOffset:0},grid:{circular:!1},startAngle:0,ticks:{showLabelBackdrop:!0,callback:Pa.formatters.numeric},pointLabels:{backdropColor:void 0,backdropPadding:2,display:!0,font:{size:10},callback:t=>t,padding:5,centerPointLabels:!1}},Cn.defaultRoutes={"angleLines.color":"borderColor","pointLabels.color":"color","ticks.color":"color"},Cn.descriptors={angleLines:{_fallback:"grid"}};const On={millisecond:{common:!0,size:1,steps:1e3},second:{common:!0,size:1e3,steps:60},minute:{common:!0,size:6e4,steps:60},hour:{common:!0,size:36e5,steps:24},day:{common:!0,size:864e5,steps:30},week:{common:!1,size:6048e5,steps:4},month:{common:!0,size:2628e6,steps:12},quarter:{common:!1,size:7884e6,steps:4},year:{common:!0,size:3154e7}},An=Object.keys(On);function Ln(t,e){return t-e}function Rn(t,e){if(s(e))return null;const i=t._adapter,{parser:a,round:r,isoWeekday:n}=t._parseOpts;let o=e;return"function"==typeof a&&(o=a(o)),c(o)||(o="string"==typeof a?i.parse(o,a):i.parse(o)),null===o?null:(r&&(o="week"!==r||!W(n)&&!0!==n?i.startOf(o,r):i.startOf(o,"isoWeek",n)),+o)}function En(t,e,i,a){const r=An.length;for(let n=An.indexOf(t);n<r-1;++n){const t=On[An[n]],r=t.steps?t.steps:Number.MAX_SAFE_INTEGER;if(t.common&&Math.ceil((i-e)/(r*t.size))<=a)return An[n]}return An[r-1]}function In(t,e,i){if(i){if(i.length){const{lo:a,hi:r}=_e(i,e);t[i[a]>=e?i[a]:i[r]]=!0}}else t[e]=!0}function zn(t,e,i){const a=[],r={},n=e.length;let o,s;for(o=0;o<n;++o)s=e[o],r[s]=o,a.push({value:s,major:!1});return 0!==n&&i?function(t,e,i,a){const r=t._adapter,n=+r.startOf(e[0].value,a),o=e[e.length-1].value;let s,l;for(s=n;s<=o;s=+r.add(s,1,a))l=i[s],l>=0&&(e[l].major=!0);return e}(t,a,r,i):a}class Fn extends Ea{constructor(t){super(t),this._cache={data:[],labels:[],all:[]},this._unit="day",this._majorUnit=void 0,this._offsets={},this._normalized=!1,this._parseOpts=void 0}init(t,e){const i=t.time||(t.time={}),a=this._adapter=new Hi._date(t.adapters.date);w(i.displayFormats,a.formats()),this._parseOpts={parser:i.parser,round:i.round,isoWeekday:i.isoWeekday},super.init(t),this._normalized=e.normalized}parse(t,e){return void 0===t?null:Rn(this,t)}beforeLayout(){super.beforeLayout(),this._cache={data:[],labels:[],all:[]}}determineDataLimits(){const t=this.options,e=this._adapter,i=t.time.unit||"day";let{min:a,max:r,minDefined:n,maxDefined:o}=this.getUserBounds();function s(t){n||isNaN(t.min)||(a=Math.min(a,t.min)),o||isNaN(t.max)||(r=Math.max(r,t.max))}n&&o||(s(this._getLabelBounds()),"ticks"===t.bounds&&"labels"===t.ticks.source||s(this.getMinMax(!1))),a=c(a)&&!isNaN(a)?a:+e.startOf(Date.now(),i),r=c(r)&&!isNaN(r)?r:+e.endOf(Date.now(),i)+1,this.min=Math.min(a,r-1),this.max=Math.max(a+1,r)}_getLabelBounds(){const t=this.getLabelTimestamps();let e=Number.POSITIVE_INFINITY,i=Number.NEGATIVE_INFINITY;return t.length&&(e=t[0],i=t[t.length-1]),{min:e,max:i}}buildTicks(){const t=this.options,e=t.time,i=t.ticks,a="labels"===i.source?this.getLabelTimestamps():this._generate();"ticks"===t.bounds&&a.length&&(this.min=this._userMin||a[0],this.max=this._userMax||a[a.length-1]);const r=this.min,n=function(t,e,i){let a=0,r=t.length;for(;a<r&&t[a]<e;)a++;for(;r>a&&t[r-1]>i;)r--;return a>0||r<t.length?t.slice(a,r):t}(a,r,this.max);return this._unit=e.unit||(i.autoSkip?En(e.minUnit,this.min,this.max,this._getLabelCapacity(r)):function(t,e,i,a,r){for(let n=An.length-1;n>=An.indexOf(i);n--){const i=An[n];if(On[i].common&&t._adapter.diff(r,a,i)>=e-1)return i}return An[i?An.indexOf(i):0]}(this,n.length,e.minUnit,this.min,this.max)),this._majorUnit=i.major.enabled&&"year"!==this._unit?function(t){for(let e=An.indexOf(t)+1,i=An.length;e<i;++e)if(On[An[e]].common)return An[e]}(this._unit):void 0,this.initOffsets(a),t.reverse&&n.reverse(),zn(this,n,this._majorUnit)}initOffsets(t){let e,i,a=0,r=0;this.options.offset&&t.length&&(e=this.getDecimalForValue(t[0]),a=1===t.length?1-e:(this.getDecimalForValue(t[1])-e)/2,i=this.getDecimalForValue(t[t.length-1]),r=1===t.length?i:(i-this.getDecimalForValue(t[t.length-2]))/2);const n=t.length<3?.5:.25;a=G(a,0,n),r=G(r,0,n),this._offsets={start:a,end:r,factor:1/(a+1+r)}}_generate(){const t=this._adapter,e=this.min,i=this.max,a=this.options,r=a.time,n=r.unit||En(r.minUnit,e,i,this._getLabelCapacity(e)),o=h(r.stepSize,1),s="week"===n&&r.isoWeekday,l=W(s)||!0===s,_={};let c,d,p=e;if(l&&(p=+t.startOf(p,"isoWeek",s)),p=+t.startOf(p,l?"day":n),t.diff(i,e,n)>1e5*o)throw new Error(e+" and "+i+" are too far apart with stepSize of "+o+" "+n);const u="data"===a.ticks.source&&this.getDataTimestamps();for(c=p,d=0;c<i;c=+t.add(c,o,n),d++)In(_,c,u);return c!==i&&"ticks"!==a.bounds&&1!==d||In(_,c,u),Object.keys(_).sort(((t,e)=>t-e)).map((t=>+t))}getLabelForValue(t){const e=this._adapter,i=this.options.time;return i.tooltipFormat?e.format(t,i.tooltipFormat):e.format(t,i.displayFormats.datetime)}_tickFormatFunction(t,e,i,a){const r=this.options,n=r.time.displayFormats,o=this._unit,s=this._majorUnit,l=o&&n[o],_=s&&n[s],c=i[e],d=s&&_&&c&&c.major,h=this._adapter.format(t,a||(d?_:l)),p=r.ticks.callback;return p?u(p,[h,e,i],this):h}generateTickLabels(t){let e,i,a;for(e=0,i=t.length;e<i;++e)a=t[e],a.label=this._tickFormatFunction(a.value,e,t)}getDecimalForValue(t){return null===t?NaN:(t-this.min)/(this.max-this.min)}getPixelForValue(t){const e=this._offsets,i=this.getDecimalForValue(t);return this.getPixelForDecimal((e.start+i)*e.factor)}getValueForPixel(t){const e=this._offsets,i=this.getDecimalForPixel(t)/e.factor-e.end;return this.min+i*(this.max-this.min)}_getLabelSize(t){const e=this.options.ticks,i=this.ctx.measureText(t).width,a=j(this.isHorizontal()?e.maxRotation:e.minRotation),r=Math.cos(a),n=Math.sin(a),o=this._resolveTickFontOptions(0).size;return{w:i*r+o*n,h:i*n+o*r}}_getLabelCapacity(t){const e=this.options.time,i=e.displayFormats,a=i[e.unit]||i.millisecond,r=this._tickFormatFunction(t,0,zn(this,[t],this._majorUnit),a),n=this._getLabelSize(r),o=Math.floor(this.isHorizontal()?this.width/n.w:this.height/n.h)-1;return o>0?o:1}getDataTimestamps(){let t,e,i=this._cache.data||[];if(i.length)return i;const a=this.getMatchingVisibleMetas();if(this._normalized&&a.length)return this._cache.data=a[0].controller.getAllParsedValues(this);for(t=0,e=a.length;t<e;++t)i=i.concat(a[t].controller.getAllParsedValues(this));return this._cache.data=this.normalize(i)}getLabelTimestamps(){const t=this._cache.labels||[];let e,i;if(t.length)return t;const a=this.getLabels();for(e=0,i=a.length;e<i;++e)t.push(Rn(this,a[e]));return this._cache.labels=this._normalized?t:this.normalize(t)}normalize(t){return ue(t.sort(Ln))}}function Vn(t,e,i){let a,r,n,o,s=0,l=t.length-1;i?(e>=t[s].pos&&e<=t[l].pos&&({lo:s,hi:l}=ce(t,"pos",e)),({pos:a,time:n}=t[s]),({pos:r,time:o}=t[l])):(e>=t[s].time&&e<=t[l].time&&({lo:s,hi:l}=ce(t,"time",e)),({time:a,pos:n}=t[s]),({time:r,pos:o}=t[l]));const _=r-a;return _?n+(o-n)*(e-a)/_:n}Fn.id="time",Fn.defaults={bounds:"data",adapters:{},time:{parser:!1,unit:!1,round:!1,isoWeekday:!1,minUnit:"millisecond",displayFormats:{}},ticks:{source:"auto",major:{enabled:!1}}};class Bn extends Fn{constructor(t){super(t),this._table=[],this._minPos=void 0,this._tableRange=void 0}initOffsets(){const t=this._getTimestampsForTable(),e=this._table=this.buildLookupTable(t);this._minPos=Vn(e,this.min),this._tableRange=Vn(e,this.max)-this._minPos,super.initOffsets(t)}buildLookupTable(t){const{min:e,max:i}=this,a=[],r=[];let n,o,s,l,_;for(n=0,o=t.length;n<o;++n)l=t[n],l>=e&&l<=i&&a.push(l);if(a.length<2)return[{time:e,pos:0},{time:i,pos:1}];for(n=0,o=a.length;n<o;++n)_=a[n+1],s=a[n-1],l=a[n],Math.round((_+s)/2)!==l&&r.push({time:l,pos:n/(o-1)});return r}_getTimestampsForTable(){let t=this._cache.all||[];if(t.length)return t;const e=this.getDataTimestamps(),i=this.getLabelTimestamps();return t=e.length&&i.length?this.normalize(e.concat(i)):e.length?e:i,t=this._cache.all=t,t}getDecimalForValue(t){return(Vn(this._table,t)-this._minPos)/this._tableRange}getValueForPixel(t){const e=this._offsets,i=this.getDecimalForPixel(t)/e.factor-e.end;return Vn(this._table,i*this._tableRange+this._minPos,!0)}}Bn.id="timeseries",Bn.defaults=Fn.defaults;const Wn=[Bi,Cr,fn,Object.freeze({__proto__:null,CategoryScale:gn,LinearScale:xn,LogarithmicScale:vn,RadialLinearScale:Cn,TimeScale:Fn,TimeSeriesScale:Bn})];or.register(...Wn);const Nn=or;var Hn=i(761),jn=i(8287),$n=i(1454),Zn=i(5077),Yn=i(9155),Un=i(8203),Xn=i(8941),qn=i(1549),Kn=i(5783),Gn=i(2757),Jn=i(9195),Qn=i(752),to=i(1471),eo=i(7708),io=i(965),ao=i(1936),ro=i(2804),no=i(8912),oo=i(3452),so=i(7703),lo=i(5594),_o=i(8612),co=i(8851),ho=i(9014),po=i(1958),uo=i(590),mo=i(6048),fo=i(8092),go=i(7943),bo=i(1422),yo=i(7848),xo=i(1910),wo=i(2343),vo=i(2268),ko=i(4938),Mo=i(2790),So=i(822),Po=i(9208),Do=i(8533),To=i(7151),Co=i(5296),Oo=i(134),Ao=i(6507),Lo=i(9065),Ro=i(5560),Eo=i(9856),Io=i(3317);const zo={clearsky_day:Hn,clearsky_night:jn,clearsky_polartwilight:$n,cloudy:Zn,fair_day:Yn,fair_night:Un,fair_polartwilight:Xn,fog:qn,heavyrain:Kn,heavyrainandthunder:Gn,heavyrainshowersandthunder_day:Jn,heavyrainshowersandthunder_night:Qn,heavyrainshowersandthunder_polartwilight:to,heavyrainshowers_day:eo,heavyrainshowers_night:io,heavyrainshowers_polartwilight:ao,heavysleet:ro,heavysleetandthunder:no,heavysleetshowersandthunder_day:oo,heavysleetshowersandthunder_night:so,heavysleetshowersandthunder_polartwilight:lo,heavysleetshowers_day:_o,heavysleetshowers_night:co,heavysleetshowers_polartwilight:ho,heavysnow:po,heavysnowandthunder:uo,heavysnowshowersandthunder_day:mo,heavysnowshowersandthunder_night:fo,heavysnowshowersandthunder_polartwilight:go,heavysnowshowers_day:bo,heavysnowshowers_night:yo,heavysnowshowers_polartwilight:xo,lightrain:wo,lightrainandthunder:vo,lightrainshowersandthunder_day:ko,lightrainshowersandthunder_night:Mo,lightrainshowersandthunder_polartwilight:So,lightrainshowers_day:Po,lightrainshowers_night:Do,lightrainshowers_polartwilight:To,lightsleet:Co,lightsleetandthunder:Oo,lightsleetshowers_day:Ao,lightsleetshowers_night:Lo,lightsleetshowers_polartwilight:Ro,lightsnow:Eo,lightsnowandthunder:Io,lightsnowandthunder:Io,lightsnowshowers_day:i(6001),lightsnowshowers_night:i(8282),lightsnowshowers_polartwilight:i(4659),ightssleetshowersandthunder_day:i(5518),lightssleetshowersandthunder_night:i(2049),lightssleetshowersandthunder_polartwilight:i(9322),lightssnowshowersandthunder_day:i(8587),lightssnowshowersandthunder_night:i(378),lightssnowshowersandthunder_polartwilight:i(2496),partlycloudy_day:i(8133),partlycloudy_night:i(1793),partlycloudy_polartwilight:i(2473),rain:i(1550),rainandthunder:i(8084),rainshowersandthunder_day:i(5),rainshowersandthunder_night:i(4863),rainshowersandthunder_polartwilight:i(1467),rainshowers_day:i(6679),rainshowers_night:i(8749),rainshowers_polartwilight:i(3148),sleet:i(6949),sleetandthunder:i(662),sleetshowersandthunder_day:i(8200),sleetshowersandthunder_night:i(3271),sleetshowersandthunder_polartwilight:i(8817),sleetshowers_day:i(5587),sleetshowers_night:i(3464),sleetshowers_polartwilight:i(2686),snow:i(4112),snowandthunder:i(8902),snowshowersandthunder_day:i(2957),snowshowersandthunder_night:i(3851),snowshowersandthunder_polartwilight:i(6508),snowshowers_day:i(2182),snowshowers_night:i(625),snowshowers_polartwilight:i(9292)},Fo=new Image(35,35);console.log(zo),Fo.src=zo.clearsky_day;class Vo{constructor(t){this.buildChart(t)}buildChart(t){this.chart=new Nn(t,{data:{datasets:this.getDatasets()},options:this.getOptions()})}updateData(t,e,i,a,r){this.chart.data.labels=t,this.chart.data.datasets[0].data=e,this.chart.data.datasets[0].pointStyle=[Fo,""],this.chart.data.datasets[1].data=i,this.chart.data.datasets[2].data=a,this.chart.data.datasets[3].data=r,this.chart.update()}getDatasets(){return[{order:2,type:"line",tension:.4,fill:!0,borderWidth:0,yAxisID:"y",segment:{backgroundColor:t=>t.p0.parsed.y>0?"rgba(360, 63, 73, 0.5)":"rgba(141, 166, 229, 0.5)"}},{order:1,type:"bar",backgroundColor:"rgba(54, 162, 235, 0.3)",borderWidth:0,yAxisID:"y2"},{order:3,type:"line",pointRadius:0,tension:.4,yAxisID:"y",segment:{borderColor:"rgba(141, 229, 166, 0.5)"}},{order:4,type:"line",pointRadius:0,tension:.4,borderDash:[5,5],yAxisID:"y3",segment:{borderColor:"rgba(197, 201, 198, 0.9)"}}]}getOptions(){return{responsive:!0,plugins:{legend:{display:!1}},scales:{y:{min:-15,max:35,type:"linear",position:"left",ticks:{color:"black",beginAtZero:!0}},y2:{min:0,max:16,type:"linear",position:"right",ticks:{color:"rgba(54, 162, 235, 0.8)"},grid:{drawOnChartArea:!1}},y3:{type:"linear",position:"right",ticks:{color:"rgba(197, 201, 198, 1)",stepSize:5},grid:{drawOnChartArea:!1}}}}}}class Bo{getChartEl(){return document.getElementById("chart")}}class Wo{async fetchJson(t){return i(218)}getData(t){const e=[],i=[],a=[],r=[],n=[];for(let o=0;o<12;o++)e.push(parseInt(t.properties.timeseries[o].time.slice(11,13))+1),i.push(t.properties.timeseries[o].data.instant.details.air_temperature),a.push(t.properties.timeseries[o].data.next_1_hours.details.precipitation_amount),r.push(t.properties.timeseries[o].data.instant.details.wind_speed),n.push(t.properties.timeseries[o].data.instant.details.air_pressure_at_sea_level);return{hour:e,temp:i,precipitation:a,wind:r,airPressure:n}}}new class{constructor(){this.weatherData=new Wo,this.displayController=new Bo,this.chart=new Vo(this.displayController.getChartEl()),this.updateChart()}async updateChart(){const t=await this.weatherData.fetchJson(),e=this.weatherData.getData(t);this.chart.updateData(e.hour,e.temp,e.precipitation,e.wind,e.airPressure),setTimeout(this.updateChart.bind(this),5e3)}}})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,