/*! For license information please see main.js.LICENSE.txt */
(()=>{"use strict";var t={28:(t,e,i)=>{i.d(e,{Z:()=>u});var s=i(7537),n=i.n(s),o=i(3645),a=i.n(o),r=i(1667),h=i.n(r),l=new URL(i(1815),i.b),c=a()(n());c.push([t.id,"@import url(http://fonts.googleapis.com/css?family=Roboto:400,100,100italic,300,300ita‌​lic,400italic,500,500italic,700,700italic,900italic,900);"]);var d=h()(l);c.push([t.id,"*,\r\n*::before,\r\n*::after {\r\n  box-sizing: border-box;\r\n  padding: 0;\r\n  margin: 0;\r\n  font-size: 10px;\r\n  font-family: 'Roboto', sans-serif;\r\n}\r\nbody {\r\n  background-color: grey;\r\n  color: hsla(0, 0%, 38%, 1);\r\n}\r\n\r\n.temp-container {\r\n  grid-area: temp;\r\n}\r\n.empty-container {\r\n  grid-area: empty;\r\n}\r\n.time-container {\r\n  grid-area: time;\r\n}\r\n.chart-container {\r\n  grid-area: chart;\r\n}\r\n.map-container {\r\n  grid-area: map;\r\n}\r\n\r\n.grid-container {\r\n  background-image: url("+d+");\r\n  height: 720px;\r\n  width: 1280px;\r\n  display: grid;\r\n  grid-template-areas:\r\n    'temp empty time map'\r\n    'chart chart chart map';\r\n  gap: 26px;\r\n  /* overflow: hidden; */\r\n  justify-content: right;\r\n  align-items: right;\r\n}\r\n\r\n.temp-container,\r\n.time-container {\r\n  font-size: 9.6rem;\r\n  justify-self: right;\r\n  border-radius: 10px 10px 10px 10px;\r\n  background-color: hsla(0, 0%, 100%, 0.95);\r\n  height: 165px;\r\n  width: 355px;\r\n  display: flex;\r\n  align-self: flex-end;\r\n  justify-content: center;\r\n  align-items: center;\r\n}\r\n.empty-container {\r\n  justify-self: right;\r\n  align-self: flex-end;\r\n  height: 165px;\r\n  width: 80px;\r\n}\r\n.chart-container {\r\n  border-radius: 10px 10px 10px 10px;\r\n  background-color: hsla(0, 0%, 100%, 0.95);\r\n  padding: 20px;\r\n  height: 467px;\r\n  width: 845px;\r\n}\r\n.map-container {\r\n  height: 720px;\r\n  width: 382px;\r\n  filter: drop-shadow(0px 4px 8px #4e87b1);\r\n  display: grid;\r\n  grid-template-columns: [first-col];\r\n  grid-template-rows: [first-row];\r\n}\r\n.map-container img {\r\n  border-radius: 10px 0px 0px 10px;\r\n  max-width: 100%;\r\n  max-height: 100%;\r\n}\r\n\r\n#base-map {\r\n  grid-column-start: first-col;\r\n  grid-row-start: first-row;\r\n}\r\n#radar-map {\r\n  grid-column-start: first-col;\r\n  grid-row-start: first-row;\r\n\r\n  /* clip-path: ellipse(700px 745px at 100% 100%); */\r\n}\r\n","",{version:3,sources:["webpack://./src/styles.css"],names:[],mappings:"AAEA;;;EAGE,sBAAsB;EACtB,UAAU;EACV,SAAS;EACT,eAAe;EACf,iCAAiC;AACnC;AACA;EACE,sBAAsB;EACtB,0BAA0B;AAC5B;;AAEA;EACE,eAAe;AACjB;AACA;EACE,gBAAgB;AAClB;AACA;EACE,eAAe;AACjB;AACA;EACE,gBAAgB;AAClB;AACA;EACE,cAAc;AAChB;;AAEA;EACE,yDAAgD;EAChD,aAAa;EACb,aAAa;EACb,aAAa;EACb;;2BAEyB;EACzB,SAAS;EACT,sBAAsB;EACtB,sBAAsB;EACtB,kBAAkB;AACpB;;AAEA;;EAEE,iBAAiB;EACjB,mBAAmB;EACnB,kCAAkC;EAClC,yCAAyC;EACzC,aAAa;EACb,YAAY;EACZ,aAAa;EACb,oBAAoB;EACpB,uBAAuB;EACvB,mBAAmB;AACrB;AACA;EACE,mBAAmB;EACnB,oBAAoB;EACpB,aAAa;EACb,WAAW;AACb;AACA;EACE,kCAAkC;EAClC,yCAAyC;EACzC,aAAa;EACb,aAAa;EACb,YAAY;AACd;AACA;EACE,aAAa;EACb,YAAY;EACZ,wCAAwC;EACxC,aAAa;EACb,kCAAkC;EAClC,+BAA+B;AACjC;AACA;EACE,gCAAgC;EAChC,eAAe;EACf,gBAAgB;AAClB;;AAEA;EACE,4BAA4B;EAC5B,yBAAyB;AAC3B;AACA;EACE,4BAA4B;EAC5B,yBAAyB;;EAEzB,kDAAkD;AACpD",sourcesContent:["@import url(http://fonts.googleapis.com/css?family=Roboto:400,100,100italic,300,300ita‌​lic,400italic,500,500italic,700,700italic,900italic,900);\r\n\r\n*,\r\n*::before,\r\n*::after {\r\n  box-sizing: border-box;\r\n  padding: 0;\r\n  margin: 0;\r\n  font-size: 10px;\r\n  font-family: 'Roboto', sans-serif;\r\n}\r\nbody {\r\n  background-color: grey;\r\n  color: hsla(0, 0%, 38%, 1);\r\n}\r\n\r\n.temp-container {\r\n  grid-area: temp;\r\n}\r\n.empty-container {\r\n  grid-area: empty;\r\n}\r\n.time-container {\r\n  grid-area: time;\r\n}\r\n.chart-container {\r\n  grid-area: chart;\r\n}\r\n.map-container {\r\n  grid-area: map;\r\n}\r\n\r\n.grid-container {\r\n  background-image: url(images/background_img.png);\r\n  height: 720px;\r\n  width: 1280px;\r\n  display: grid;\r\n  grid-template-areas:\r\n    'temp empty time map'\r\n    'chart chart chart map';\r\n  gap: 26px;\r\n  /* overflow: hidden; */\r\n  justify-content: right;\r\n  align-items: right;\r\n}\r\n\r\n.temp-container,\r\n.time-container {\r\n  font-size: 9.6rem;\r\n  justify-self: right;\r\n  border-radius: 10px 10px 10px 10px;\r\n  background-color: hsla(0, 0%, 100%, 0.95);\r\n  height: 165px;\r\n  width: 355px;\r\n  display: flex;\r\n  align-self: flex-end;\r\n  justify-content: center;\r\n  align-items: center;\r\n}\r\n.empty-container {\r\n  justify-self: right;\r\n  align-self: flex-end;\r\n  height: 165px;\r\n  width: 80px;\r\n}\r\n.chart-container {\r\n  border-radius: 10px 10px 10px 10px;\r\n  background-color: hsla(0, 0%, 100%, 0.95);\r\n  padding: 20px;\r\n  height: 467px;\r\n  width: 845px;\r\n}\r\n.map-container {\r\n  height: 720px;\r\n  width: 382px;\r\n  filter: drop-shadow(0px 4px 8px #4e87b1);\r\n  display: grid;\r\n  grid-template-columns: [first-col];\r\n  grid-template-rows: [first-row];\r\n}\r\n.map-container img {\r\n  border-radius: 10px 0px 0px 10px;\r\n  max-width: 100%;\r\n  max-height: 100%;\r\n}\r\n\r\n#base-map {\r\n  grid-column-start: first-col;\r\n  grid-row-start: first-row;\r\n}\r\n#radar-map {\r\n  grid-column-start: first-col;\r\n  grid-row-start: first-row;\r\n\r\n  /* clip-path: ellipse(700px 745px at 100% 100%); */\r\n}\r\n"],sourceRoot:""}]);const u=c},3645:t=>{t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var i="",s=void 0!==e[5];return e[4]&&(i+="@supports (".concat(e[4],") {")),e[2]&&(i+="@media ".concat(e[2]," {")),s&&(i+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),i+=t(e),s&&(i+="}"),e[2]&&(i+="}"),e[4]&&(i+="}"),i})).join("")},e.i=function(t,i,s,n,o){"string"==typeof t&&(t=[[null,t,void 0]]);var a={};if(s)for(var r=0;r<this.length;r++){var h=this[r][0];null!=h&&(a[h]=!0)}for(var l=0;l<t.length;l++){var c=[].concat(t[l]);s&&a[c[0]]||(void 0!==o&&(void 0===c[5]||(c[1]="@layer".concat(c[5].length>0?" ".concat(c[5]):""," {").concat(c[1],"}")),c[5]=o),i&&(c[2]?(c[1]="@media ".concat(c[2]," {").concat(c[1],"}"),c[2]=i):c[2]=i),n&&(c[4]?(c[1]="@supports (".concat(c[4],") {").concat(c[1],"}"),c[4]=n):c[4]="".concat(n)),e.push(c))}},e}},1667:t=>{t.exports=function(t,e){return e||(e={}),t?(t=String(t.__esModule?t.default:t),/^['"].*['"]$/.test(t)&&(t=t.slice(1,-1)),e.hash&&(t+=e.hash),/["'() \t\n]|(%20)/.test(t)||e.needQuotes?'"'.concat(t.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):t):t}},7537:t=>{t.exports=function(t){var e=t[1],i=t[3];if(!i)return e;if("function"==typeof btoa){var s=btoa(unescape(encodeURIComponent(JSON.stringify(i)))),n="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(s),o="/*# ".concat(n," */"),a=i.sources.map((function(t){return"/*# sourceURL=".concat(i.sourceRoot||"").concat(t," */")}));return[e].concat(a).concat([o]).join("\n")}return[e].join("\n")}},3379:t=>{var e=[];function i(t){for(var i=-1,s=0;s<e.length;s++)if(e[s].identifier===t){i=s;break}return i}function s(t,s){for(var o={},a=[],r=0;r<t.length;r++){var h=t[r],l=s.base?h[0]+s.base:h[0],c=o[l]||0,d="".concat(l," ").concat(c);o[l]=c+1;var u=i(d),p={css:h[1],media:h[2],sourceMap:h[3],supports:h[4],layer:h[5]};if(-1!==u)e[u].references++,e[u].updater(p);else{var g=n(p,s);s.byIndex=r,e.splice(r,0,{identifier:d,updater:g,references:1})}a.push(d)}return a}function n(t,e){var i=e.domAPI(e);return i.update(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap&&e.supports===t.supports&&e.layer===t.layer)return;i.update(t=e)}else i.remove()}}t.exports=function(t,n){var o=s(t=t||[],n=n||{});return function(t){t=t||[];for(var a=0;a<o.length;a++){var r=i(o[a]);e[r].references--}for(var h=s(t,n),l=0;l<o.length;l++){var c=i(o[l]);0===e[c].references&&(e[c].updater(),e.splice(c,1))}o=h}}},569:t=>{var e={};t.exports=function(t,i){var s=function(t){if(void 0===e[t]){var i=document.querySelector(t);if(window.HTMLIFrameElement&&i instanceof window.HTMLIFrameElement)try{i=i.contentDocument.head}catch(t){i=null}e[t]=i}return e[t]}(t);if(!s)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");s.appendChild(i)}},9216:t=>{t.exports=function(t){var e=document.createElement("style");return t.setAttributes(e,t.attributes),t.insert(e,t.options),e}},3565:(t,e,i)=>{t.exports=function(t){var e=i.nc;e&&t.setAttribute("nonce",e)}},7795:t=>{t.exports=function(t){var e=t.insertStyleElement(t);return{update:function(i){!function(t,e,i){var s="";i.supports&&(s+="@supports (".concat(i.supports,") {")),i.media&&(s+="@media ".concat(i.media," {"));var n=void 0!==i.layer;n&&(s+="@layer".concat(i.layer.length>0?" ".concat(i.layer):""," {")),s+=i.css,n&&(s+="}"),i.media&&(s+="}"),i.supports&&(s+="}");var o=i.sourceMap;o&&"undefined"!=typeof btoa&&(s+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),e.styleTagTransform(s,t,e.options)}(e,t,i)},remove:function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(e)}}}},4589:t=>{t.exports=function(t,e){if(e.styleSheet)e.styleSheet.cssText=t;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(t))}}},1815:(t,e,i)=>{t.exports=i.p+"6aa9d6a03c5fe663fa23.png"},5945:(t,e,i)=>{t.exports=i.p+"10569e3e08cc76ebc19b.png"},3761:(t,e,i)=>{t.exports=i.p+"9b2d66a41eb245188264.svg"},8287:(t,e,i)=>{t.exports=i.p+"de8410b5be4ad70db196.svg"},1454:(t,e,i)=>{t.exports=i.p+"730bfe55beab95f8a099.svg"},5077:(t,e,i)=>{t.exports=i.p+"f4c494b8b1d37c5de359.svg"},9155:(t,e,i)=>{t.exports=i.p+"0f5e2e50940fd379710d.svg"},8203:(t,e,i)=>{t.exports=i.p+"a28f8ef702f1ff8fd0fe.svg"},8941:(t,e,i)=>{t.exports=i.p+"7b4918679ff5f6cc8f9e.svg"},1549:(t,e,i)=>{t.exports=i.p+"a1cb77cdf4a65b474104.svg"},5783:(t,e,i)=>{t.exports=i.p+"089c7c0ba45475701fe4.svg"},2757:(t,e,i)=>{t.exports=i.p+"b1bb9b2fe75a6642e3de.svg"},7708:(t,e,i)=>{t.exports=i.p+"2bd57e3e2da7ec86bbc4.svg"},965:(t,e,i)=>{t.exports=i.p+"df8ed63dd9e2501a3418.svg"},1936:(t,e,i)=>{t.exports=i.p+"d2b3d4c7708a4e8f5a19.svg"},9195:(t,e,i)=>{t.exports=i.p+"7c408c29d81bf405e206.svg"},752:(t,e,i)=>{t.exports=i.p+"ac72c13887fa3e805a68.svg"},1471:(t,e,i)=>{t.exports=i.p+"f20b436197fab1c3dad9.svg"},2804:(t,e,i)=>{t.exports=i.p+"7209b5f6a71a7ac0bc6e.svg"},8912:(t,e,i)=>{t.exports=i.p+"dfb7aa0dfca946cfcaec.svg"},8612:(t,e,i)=>{t.exports=i.p+"0e22c031e287f7a3f61c.svg"},8851:(t,e,i)=>{t.exports=i.p+"61c862d4e93b89c08591.svg"},9014:(t,e,i)=>{t.exports=i.p+"56b97cabb86f7972e5b9.svg"},3452:(t,e,i)=>{t.exports=i.p+"90f950cd12e7aa73b3d8.svg"},7703:(t,e,i)=>{t.exports=i.p+"dd93d2741761f6c04f53.svg"},5594:(t,e,i)=>{t.exports=i.p+"951e634e652fd1359771.svg"},1958:(t,e,i)=>{t.exports=i.p+"4fb7c021acfa8839ba29.svg"},590:(t,e,i)=>{t.exports=i.p+"c6deb376186155d44e94.svg"},1422:(t,e,i)=>{t.exports=i.p+"d6f14ea455742d118a69.svg"},7848:(t,e,i)=>{t.exports=i.p+"4d290f547c1900d8d239.svg"},1910:(t,e,i)=>{t.exports=i.p+"d20ad74f8ee3e036c8a9.svg"},6048:(t,e,i)=>{t.exports=i.p+"1d44b0d48dc062a43e5c.svg"},8092:(t,e,i)=>{t.exports=i.p+"4e70360f3902bb444a5b.svg"},7943:(t,e,i)=>{t.exports=i.p+"6f398bef6ff1e4659e23.svg"},3446:(t,e,i)=>{t.exports=i.p+"d9073d0940b4044b1cc6.svg"},2343:(t,e,i)=>{t.exports=i.p+"9da9c915654156d14db2.svg"},2268:(t,e,i)=>{t.exports=i.p+"c417bfb0d0b8a4692290.svg"},9208:(t,e,i)=>{t.exports=i.p+"8439c26aa5d3ad7b7e13.svg"},8533:(t,e,i)=>{t.exports=i.p+"57403d605e47b1ef777f.svg"},7151:(t,e,i)=>{t.exports=i.p+"9b476bf2b55a23fa6106.svg"},4938:(t,e,i)=>{t.exports=i.p+"5770a9811b26ef2395bd.svg"},2790:(t,e,i)=>{t.exports=i.p+"80742531c82e1a2fd41d.svg"},822:(t,e,i)=>{t.exports=i.p+"ca57bcd4bf2d51752d5f.svg"},5296:(t,e,i)=>{t.exports=i.p+"1c5c4ee53da79b4f3d7a.svg"},134:(t,e,i)=>{t.exports=i.p+"51b51cca0b6b1f3a7206.svg"},6507:(t,e,i)=>{t.exports=i.p+"442399228fd54713a676.svg"},9065:(t,e,i)=>{t.exports=i.p+"e097129c5ee95a6e86df.svg"},5560:(t,e,i)=>{t.exports=i.p+"9bb124ae9d4cf5fe1378.svg"},9856:(t,e,i)=>{t.exports=i.p+"d3f4d394a81d8a93f15d.svg"},3317:(t,e,i)=>{t.exports=i.p+"be72ca9ded55bb8cb829.svg"},6001:(t,e,i)=>{t.exports=i.p+"4b56431736751ce3f97c.svg"},8282:(t,e,i)=>{t.exports=i.p+"7d826487d89395a11567.svg"},4659:(t,e,i)=>{t.exports=i.p+"b6ac39b4c8987639ec9d.svg"},5518:(t,e,i)=>{t.exports=i.p+"0538c89c0490a67c813c.svg"},2049:(t,e,i)=>{t.exports=i.p+"7340b6568ca80f67eaf2.svg"},9322:(t,e,i)=>{t.exports=i.p+"02e56cdeb6097302ea14.svg"},8587:(t,e,i)=>{t.exports=i.p+"c097ab66c582e9d6fd78.svg"},378:(t,e,i)=>{t.exports=i.p+"5c19564c5b11623741bd.svg"},2496:(t,e,i)=>{t.exports=i.p+"ffb2c91891a03d0cef1b.svg"},8133:(t,e,i)=>{t.exports=i.p+"c5935776698662c6d162.svg"},1793:(t,e,i)=>{t.exports=i.p+"5877456a4768106fc590.svg"},2473:(t,e,i)=>{t.exports=i.p+"372a9293781c2e3e9ab6.svg"},9345:(t,e,i)=>{t.exports=i.p+"acceb14a3066ddcf2533.png"},1550:(t,e,i)=>{t.exports=i.p+"c346e04dee848d481274.svg"},8084:(t,e,i)=>{t.exports=i.p+"25c4db965c11a6942a70.svg"},6679:(t,e,i)=>{t.exports=i.p+"d33a32cada0e1d576519.svg"},8749:(t,e,i)=>{t.exports=i.p+"79c0ac54002c7a2737f8.svg"},3148:(t,e,i)=>{t.exports=i.p+"3416eddaf730529b2a9c.svg"},5:(t,e,i)=>{t.exports=i.p+"f00689879f1d7540600f.svg"},4863:(t,e,i)=>{t.exports=i.p+"5224ddc2d3a7642d4d4c.svg"},1467:(t,e,i)=>{t.exports=i.p+"dbf298b1d77cb8a4bac0.svg"},6949:(t,e,i)=>{t.exports=i.p+"19395b05a6c10cc3756f.svg"},662:(t,e,i)=>{t.exports=i.p+"66a8dec8e3ffd26d6922.svg"},5587:(t,e,i)=>{t.exports=i.p+"eeb55fba05b74b284ad9.svg"},3464:(t,e,i)=>{t.exports=i.p+"28f9b323c50dd61fcfd9.svg"},2686:(t,e,i)=>{t.exports=i.p+"e3d5e503b506535c9005.svg"},8200:(t,e,i)=>{t.exports=i.p+"8cb85a2a85c7f0cb99db.svg"},3271:(t,e,i)=>{t.exports=i.p+"fbd0855c9369b58adfce.svg"},8817:(t,e,i)=>{t.exports=i.p+"1bfc1d12c025d53d16b9.svg"},4112:(t,e,i)=>{t.exports=i.p+"c1a8f3d33111f3194d7f.svg"},8902:(t,e,i)=>{t.exports=i.p+"06e008b210b440c973db.svg"},2182:(t,e,i)=>{t.exports=i.p+"6077f3d1f1812a03493b.svg"},625:(t,e,i)=>{t.exports=i.p+"21cca350e5d5e6550d4d.svg"},9292:(t,e,i)=>{t.exports=i.p+"89c910647ebd5cd9f26d.svg"},2957:(t,e,i)=>{t.exports=i.p+"973f97b9180740f4b0dc.svg"},3851:(t,e,i)=>{t.exports=i.p+"2009070e651a249282da.svg"},6508:(t,e,i)=>{t.exports=i.p+"fab8ed37d2f1998742e1.svg"}},e={};function i(s){var n=e[s];if(void 0!==n)return n.exports;var o=e[s]={id:s,exports:{}};return t[s](o,o.exports,i),o.exports}i.m=t,i.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return i.d(e,{a:e}),e},i.d=(t,e)=>{for(var s in e)i.o(e,s)&&!i.o(t,s)&&Object.defineProperty(t,s,{enumerable:!0,get:e[s]})},i.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),i.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),(()=>{var t;i.g.importScripts&&(t=i.g.location+"");var e=i.g.document;if(!t&&e&&(e.currentScript&&(t=e.currentScript.src),!t)){var s=e.getElementsByTagName("script");s.length&&(t=s[s.length-1].src)}if(!t)throw new Error("Automatic publicPath is not supported in this browser");t=t.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),i.p=t})(),i.b=document.baseURI||self.location.href,(()=>{var t=i(3379),e=i.n(t),s=i(7795),n=i.n(s),o=i(569),a=i.n(o),r=i(3565),h=i.n(r),l=i(9216),c=i.n(l),d=i(4589),u=i.n(d),p=i(28),g={};g.styleTagTransform=u(),g.setAttributes=h(),g.insert=a().bind(null,"head"),g.domAPI=n(),g.insertStyleElement=c(),e()(p.Z,g),p.Z&&p.Z.locals&&p.Z.locals;const f="undefined"==typeof window?function(t){return t()}:window.requestAnimationFrame;function m(t,e,i){const s=i||(t=>Array.prototype.slice.call(t));let n=!1,o=[];return function(...i){o=s(i),n||(n=!0,f.call(window,(()=>{n=!1,t.apply(e,o)})))}}const b=t=>"start"===t?"left":"end"===t?"right":"center",x=(t,e,i)=>"start"===t?e:"end"===t?i:(e+i)/2;function _(){}const y=function(){let t=0;return function(){return t++}}();function v(t){return null==t}function w(t){if(Array.isArray&&Array.isArray(t))return!0;const e=Object.prototype.toString.call(t);return"[object"===e.substr(0,7)&&"Array]"===e.substr(-6)}function M(t){return null!==t&&"[object Object]"===Object.prototype.toString.call(t)}const A=t=>("number"==typeof t||t instanceof Number)&&isFinite(+t);function k(t,e){return A(t)?t:e}function C(t,e){return void 0===t?e:t}const S=(t,e)=>"string"==typeof t&&t.endsWith("%")?parseFloat(t)/100*e:+t;function D(t,e,i){if(t&&"function"==typeof t.call)return t.apply(i,e)}function P(t,e,i,s){let n,o,a;if(w(t))if(o=t.length,s)for(n=o-1;n>=0;n--)e.call(i,t[n],n);else for(n=0;n<o;n++)e.call(i,t[n],n);else if(M(t))for(a=Object.keys(t),o=a.length,n=0;n<o;n++)e.call(i,t[a[n]],a[n])}function E(t,e){let i,s,n,o;if(!t||!e||t.length!==e.length)return!1;for(i=0,s=t.length;i<s;++i)if(n=t[i],o=e[i],n.datasetIndex!==o.datasetIndex||n.index!==o.index)return!1;return!0}function O(t){if(w(t))return t.map(O);if(M(t)){const e=Object.create(null),i=Object.keys(t),s=i.length;let n=0;for(;n<s;++n)e[i[n]]=O(t[i[n]]);return e}return t}function T(t){return-1===["__proto__","prototype","constructor"].indexOf(t)}function L(t,e,i,s){if(!T(t))return;const n=e[t],o=i[t];M(n)&&M(o)?R(n,o,s):e[t]=O(o)}function R(t,e,i){const s=w(e)?e:[e],n=s.length;if(!M(t))return t;const o=(i=i||{}).merger||L;for(let a=0;a<n;++a){if(!M(e=s[a]))continue;const n=Object.keys(e);for(let s=0,a=n.length;s<a;++s)o(n[s],t,e,i)}return t}function I(t,e){return R(t,e,{merger:B})}function B(t,e,i){if(!T(t))return;const s=e[t],n=i[t];M(s)&&M(n)?I(s,n):Object.prototype.hasOwnProperty.call(e,t)||(e[t]=O(n))}function z(t,e){const i=t.indexOf(".",e);return-1===i?t.length:i}function F(t,e){if(""===e)return t;let i=0,s=z(e,i);for(;t&&s>i;)t=t[e.substr(i,s-i)],i=s+1,s=z(e,i);return t}function V(t){return t.charAt(0).toUpperCase()+t.slice(1)}const W=t=>void 0!==t,j=t=>"function"==typeof t,N=(t,e)=>{if(t.size!==e.size)return!1;for(const i of t)if(!e.has(i))return!1;return!0},H=Math.PI,$=2*H,Y=$+H,U=Number.POSITIVE_INFINITY,X=H/180,q=H/2,K=H/4,Z=2*H/3,G=Math.log10,J=Math.sign;function Q(t){const e=Math.round(t);t=et(t,e,t/1e3)?e:t;const i=Math.pow(10,Math.floor(G(t))),s=t/i;return(s<=1?1:s<=2?2:s<=5?5:10)*i}function tt(t){return!isNaN(parseFloat(t))&&isFinite(t)}function et(t,e,i){return Math.abs(t-e)<i}function it(t,e,i){let s,n,o;for(s=0,n=t.length;s<n;s++)o=t[s][i],isNaN(o)||(e.min=Math.min(e.min,o),e.max=Math.max(e.max,o))}function st(t){return t*(H/180)}function nt(t){return t*(180/H)}function ot(t){if(!A(t))return;let e=1,i=0;for(;Math.round(t*e)/e!==t;)e*=10,i++;return i}function at(t,e){const i=e.x-t.x,s=e.y-t.y,n=Math.sqrt(i*i+s*s);let o=Math.atan2(s,i);return o<-.5*H&&(o+=$),{angle:o,distance:n}}function rt(t,e){return Math.sqrt(Math.pow(e.x-t.x,2)+Math.pow(e.y-t.y,2))}function ht(t,e){return(t-e+Y)%$-H}function lt(t){return(t%$+$)%$}function ct(t,e,i,s){const n=lt(t),o=lt(e),a=lt(i),r=lt(o-n),h=lt(a-n),l=lt(n-o),c=lt(n-a);return n===o||n===a||s&&o===a||r>h&&l<c}function dt(t,e,i){return Math.max(e,Math.min(i,t))}function ut(t,e,i,s=1e-6){return t>=Math.min(e,i)-s&&t<=Math.max(e,i)+s}const pt=t=>0===t||1===t,gt=(t,e,i)=>-Math.pow(2,10*(t-=1))*Math.sin((t-e)*$/i),ft=(t,e,i)=>Math.pow(2,-10*t)*Math.sin((t-e)*$/i)+1,mt={linear:t=>t,easeInQuad:t=>t*t,easeOutQuad:t=>-t*(t-2),easeInOutQuad:t=>(t/=.5)<1?.5*t*t:-.5*(--t*(t-2)-1),easeInCubic:t=>t*t*t,easeOutCubic:t=>(t-=1)*t*t+1,easeInOutCubic:t=>(t/=.5)<1?.5*t*t*t:.5*((t-=2)*t*t+2),easeInQuart:t=>t*t*t*t,easeOutQuart:t=>-((t-=1)*t*t*t-1),easeInOutQuart:t=>(t/=.5)<1?.5*t*t*t*t:-.5*((t-=2)*t*t*t-2),easeInQuint:t=>t*t*t*t*t,easeOutQuint:t=>(t-=1)*t*t*t*t+1,easeInOutQuint:t=>(t/=.5)<1?.5*t*t*t*t*t:.5*((t-=2)*t*t*t*t+2),easeInSine:t=>1-Math.cos(t*q),easeOutSine:t=>Math.sin(t*q),easeInOutSine:t=>-.5*(Math.cos(H*t)-1),easeInExpo:t=>0===t?0:Math.pow(2,10*(t-1)),easeOutExpo:t=>1===t?1:1-Math.pow(2,-10*t),easeInOutExpo:t=>pt(t)?t:t<.5?.5*Math.pow(2,10*(2*t-1)):.5*(2-Math.pow(2,-10*(2*t-1))),easeInCirc:t=>t>=1?t:-(Math.sqrt(1-t*t)-1),easeOutCirc:t=>Math.sqrt(1-(t-=1)*t),easeInOutCirc:t=>(t/=.5)<1?-.5*(Math.sqrt(1-t*t)-1):.5*(Math.sqrt(1-(t-=2)*t)+1),easeInElastic:t=>pt(t)?t:gt(t,.075,.3),easeOutElastic:t=>pt(t)?t:ft(t,.075,.3),easeInOutElastic(t){const e=.1125;return pt(t)?t:t<.5?.5*gt(2*t,e,.45):.5+.5*ft(2*t-1,e,.45)},easeInBack(t){const e=1.70158;return t*t*((e+1)*t-e)},easeOutBack(t){const e=1.70158;return(t-=1)*t*((e+1)*t+e)+1},easeInOutBack(t){let e=1.70158;return(t/=.5)<1?t*t*((1+(e*=1.525))*t-e)*.5:.5*((t-=2)*t*((1+(e*=1.525))*t+e)+2)},easeInBounce:t=>1-mt.easeOutBounce(1-t),easeOutBounce(t){const e=7.5625,i=2.75;return t<1/i?e*t*t:t<2/i?e*(t-=1.5/i)*t+.75:t<2.5/i?e*(t-=2.25/i)*t+.9375:e*(t-=2.625/i)*t+.984375},easeInOutBounce:t=>t<.5?.5*mt.easeInBounce(2*t):.5*mt.easeOutBounce(2*t-1)+.5},bt={0:0,1:1,2:2,3:3,4:4,5:5,6:6,7:7,8:8,9:9,A:10,B:11,C:12,D:13,E:14,F:15,a:10,b:11,c:12,d:13,e:14,f:15},xt="0123456789ABCDEF",_t=t=>xt[15&t],yt=t=>xt[(240&t)>>4]+xt[15&t],vt=t=>(240&t)>>4==(15&t);function wt(t){return t+.5|0}const Mt=(t,e,i)=>Math.max(Math.min(t,i),e);function At(t){return Mt(wt(2.55*t),0,255)}function kt(t){return Mt(wt(255*t),0,255)}function Ct(t){return Mt(wt(t/2.55)/100,0,1)}function St(t){return Mt(wt(100*t),0,100)}const Dt=/^rgba?\(\s*([-+.\d]+)(%)?[\s,]+([-+.e\d]+)(%)?[\s,]+([-+.e\d]+)(%)?(?:[\s,/]+([-+.e\d]+)(%)?)?\s*\)$/,Pt=/^(hsla?|hwb|hsv)\(\s*([-+.e\d]+)(?:deg)?[\s,]+([-+.e\d]+)%[\s,]+([-+.e\d]+)%(?:[\s,]+([-+.e\d]+)(%)?)?\s*\)$/;function Et(t,e,i){const s=e*Math.min(i,1-i),n=(e,n=(e+t/30)%12)=>i-s*Math.max(Math.min(n-3,9-n,1),-1);return[n(0),n(8),n(4)]}function Ot(t,e,i){const s=(s,n=(s+t/60)%6)=>i-i*e*Math.max(Math.min(n,4-n,1),0);return[s(5),s(3),s(1)]}function Tt(t,e,i){const s=Et(t,1,.5);let n;for(e+i>1&&(n=1/(e+i),e*=n,i*=n),n=0;n<3;n++)s[n]*=1-e-i,s[n]+=e;return s}function Lt(t){const e=t.r/255,i=t.g/255,s=t.b/255,n=Math.max(e,i,s),o=Math.min(e,i,s),a=(n+o)/2;let r,h,l;return n!==o&&(l=n-o,h=a>.5?l/(2-n-o):l/(n+o),r=n===e?(i-s)/l+(i<s?6:0):n===i?(s-e)/l+2:(e-i)/l+4,r=60*r+.5),[0|r,h||0,a]}function Rt(t,e,i,s){return(Array.isArray(e)?t(e[0],e[1],e[2]):t(e,i,s)).map(kt)}function It(t,e,i){return Rt(Et,t,e,i)}function Bt(t){return(t%360+360)%360}const zt={x:"dark",Z:"light",Y:"re",X:"blu",W:"gr",V:"medium",U:"slate",A:"ee",T:"ol",S:"or",B:"ra",C:"lateg",D:"ights",R:"in",Q:"turquois",E:"hi",P:"ro",O:"al",N:"le",M:"de",L:"yello",F:"en",K:"ch",G:"arks",H:"ea",I:"ightg",J:"wh"},Ft={OiceXe:"f0f8ff",antiquewEte:"faebd7",aqua:"ffff",aquamarRe:"7fffd4",azuY:"f0ffff",beige:"f5f5dc",bisque:"ffe4c4",black:"0",blanKedOmond:"ffebcd",Xe:"ff",XeviTet:"8a2be2",bPwn:"a52a2a",burlywood:"deb887",caMtXe:"5f9ea0",KartYuse:"7fff00",KocTate:"d2691e",cSO:"ff7f50",cSnflowerXe:"6495ed",cSnsilk:"fff8dc",crimson:"dc143c",cyan:"ffff",xXe:"8b",xcyan:"8b8b",xgTMnPd:"b8860b",xWay:"a9a9a9",xgYF:"6400",xgYy:"a9a9a9",xkhaki:"bdb76b",xmagFta:"8b008b",xTivegYF:"556b2f",xSange:"ff8c00",xScEd:"9932cc",xYd:"8b0000",xsOmon:"e9967a",xsHgYF:"8fbc8f",xUXe:"483d8b",xUWay:"2f4f4f",xUgYy:"2f4f4f",xQe:"ced1",xviTet:"9400d3",dAppRk:"ff1493",dApskyXe:"bfff",dimWay:"696969",dimgYy:"696969",dodgerXe:"1e90ff",fiYbrick:"b22222",flSOwEte:"fffaf0",foYstWAn:"228b22",fuKsia:"ff00ff",gaRsbSo:"dcdcdc",ghostwEte:"f8f8ff",gTd:"ffd700",gTMnPd:"daa520",Way:"808080",gYF:"8000",gYFLw:"adff2f",gYy:"808080",honeyMw:"f0fff0",hotpRk:"ff69b4",RdianYd:"cd5c5c",Rdigo:"4b0082",ivSy:"fffff0",khaki:"f0e68c",lavFMr:"e6e6fa",lavFMrXsh:"fff0f5",lawngYF:"7cfc00",NmoncEffon:"fffacd",ZXe:"add8e6",ZcSO:"f08080",Zcyan:"e0ffff",ZgTMnPdLw:"fafad2",ZWay:"d3d3d3",ZgYF:"90ee90",ZgYy:"d3d3d3",ZpRk:"ffb6c1",ZsOmon:"ffa07a",ZsHgYF:"20b2aa",ZskyXe:"87cefa",ZUWay:"778899",ZUgYy:"778899",ZstAlXe:"b0c4de",ZLw:"ffffe0",lime:"ff00",limegYF:"32cd32",lRF:"faf0e6",magFta:"ff00ff",maPon:"800000",VaquamarRe:"66cdaa",VXe:"cd",VScEd:"ba55d3",VpurpN:"9370db",VsHgYF:"3cb371",VUXe:"7b68ee",VsprRggYF:"fa9a",VQe:"48d1cc",VviTetYd:"c71585",midnightXe:"191970",mRtcYam:"f5fffa",mistyPse:"ffe4e1",moccasR:"ffe4b5",navajowEte:"ffdead",navy:"80",Tdlace:"fdf5e6",Tive:"808000",TivedBb:"6b8e23",Sange:"ffa500",SangeYd:"ff4500",ScEd:"da70d6",pOegTMnPd:"eee8aa",pOegYF:"98fb98",pOeQe:"afeeee",pOeviTetYd:"db7093",papayawEp:"ffefd5",pHKpuff:"ffdab9",peru:"cd853f",pRk:"ffc0cb",plum:"dda0dd",powMrXe:"b0e0e6",purpN:"800080",YbeccapurpN:"663399",Yd:"ff0000",Psybrown:"bc8f8f",PyOXe:"4169e1",saddNbPwn:"8b4513",sOmon:"fa8072",sandybPwn:"f4a460",sHgYF:"2e8b57",sHshell:"fff5ee",siFna:"a0522d",silver:"c0c0c0",skyXe:"87ceeb",UXe:"6a5acd",UWay:"708090",UgYy:"708090",snow:"fffafa",sprRggYF:"ff7f",stAlXe:"4682b4",tan:"d2b48c",teO:"8080",tEstN:"d8bfd8",tomato:"ff6347",Qe:"40e0d0",viTet:"ee82ee",JHt:"f5deb3",wEte:"ffffff",wEtesmoke:"f5f5f5",Lw:"ffff00",LwgYF:"9acd32"};let Vt;function Wt(t,e,i){if(t){let s=Lt(t);s[e]=Math.max(0,Math.min(s[e]+s[e]*i,0===e?360:1)),s=It(s),t.r=s[0],t.g=s[1],t.b=s[2]}}function jt(t,e){return t?Object.assign(e||{},t):t}function Nt(t){var e={r:0,g:0,b:0,a:255};return Array.isArray(t)?t.length>=3&&(e={r:t[0],g:t[1],b:t[2],a:255},t.length>3&&(e.a=kt(t[3]))):(e=jt(t,{r:0,g:0,b:0,a:1})).a=kt(e.a),e}function Ht(t){return"r"===t.charAt(0)?function(t){const e=Dt.exec(t);let i,s,n,o=255;if(e){if(e[7]!==i){const t=+e[7];o=255&(e[8]?At(t):255*t)}return i=+e[1],s=+e[3],n=+e[5],i=255&(e[2]?At(i):i),s=255&(e[4]?At(s):s),n=255&(e[6]?At(n):n),{r:i,g:s,b:n,a:o}}}(t):function(t){const e=Pt.exec(t);let i,s=255;if(!e)return;e[5]!==i&&(s=e[6]?At(+e[5]):kt(+e[5]));const n=Bt(+e[2]),o=+e[3]/100,a=+e[4]/100;return i="hwb"===e[1]?function(t,e,i){return Rt(Tt,t,e,i)}(n,o,a):"hsv"===e[1]?function(t,e,i){return Rt(Ot,t,e,i)}(n,o,a):It(n,o,a),{r:i[0],g:i[1],b:i[2],a:s}}(t)}class $t{constructor(t){if(t instanceof $t)return t;const e=typeof t;let i;var s,n,o;"object"===e?i=Nt(t):"string"===e&&(o=(s=t).length,"#"===s[0]&&(4===o||5===o?n={r:255&17*bt[s[1]],g:255&17*bt[s[2]],b:255&17*bt[s[3]],a:5===o?17*bt[s[4]]:255}:7!==o&&9!==o||(n={r:bt[s[1]]<<4|bt[s[2]],g:bt[s[3]]<<4|bt[s[4]],b:bt[s[5]]<<4|bt[s[6]],a:9===o?bt[s[7]]<<4|bt[s[8]]:255})),i=n||function(t){Vt||(Vt=function(){const t={},e=Object.keys(Ft),i=Object.keys(zt);let s,n,o,a,r;for(s=0;s<e.length;s++){for(a=r=e[s],n=0;n<i.length;n++)o=i[n],r=r.replace(o,zt[o]);o=parseInt(Ft[a],16),t[r]=[o>>16&255,o>>8&255,255&o]}return t}(),Vt.transparent=[0,0,0,0]);const e=Vt[t.toLowerCase()];return e&&{r:e[0],g:e[1],b:e[2],a:4===e.length?e[3]:255}}(t)||Ht(t)),this._rgb=i,this._valid=!!i}get valid(){return this._valid}get rgb(){var t=jt(this._rgb);return t&&(t.a=Ct(t.a)),t}set rgb(t){this._rgb=Nt(t)}rgbString(){return this._valid?(t=this._rgb)&&(t.a<255?`rgba(${t.r}, ${t.g}, ${t.b}, ${Ct(t.a)})`:`rgb(${t.r}, ${t.g}, ${t.b})`):this._rgb;var t}hexString(){return this._valid?(t=this._rgb,e=function(t){return vt(t.r)&&vt(t.g)&&vt(t.b)&&vt(t.a)}(t)?_t:yt,t?"#"+e(t.r)+e(t.g)+e(t.b)+(t.a<255?e(t.a):""):t):this._rgb;var t,e}hslString(){return this._valid?function(t){if(!t)return;const e=Lt(t),i=e[0],s=St(e[1]),n=St(e[2]);return t.a<255?`hsla(${i}, ${s}%, ${n}%, ${Ct(t.a)})`:`hsl(${i}, ${s}%, ${n}%)`}(this._rgb):this._rgb}mix(t,e){const i=this;if(t){const s=i.rgb,n=t.rgb;let o;const a=e===o?.5:e,r=2*a-1,h=s.a-n.a,l=((r*h==-1?r:(r+h)/(1+r*h))+1)/2;o=1-l,s.r=255&l*s.r+o*n.r+.5,s.g=255&l*s.g+o*n.g+.5,s.b=255&l*s.b+o*n.b+.5,s.a=a*s.a+(1-a)*n.a,i.rgb=s}return i}clone(){return new $t(this.rgb)}alpha(t){return this._rgb.a=kt(t),this}clearer(t){return this._rgb.a*=1-t,this}greyscale(){const t=this._rgb,e=wt(.3*t.r+.59*t.g+.11*t.b);return t.r=t.g=t.b=e,this}opaquer(t){return this._rgb.a*=1+t,this}negate(){const t=this._rgb;return t.r=255-t.r,t.g=255-t.g,t.b=255-t.b,this}lighten(t){return Wt(this._rgb,2,t),this}darken(t){return Wt(this._rgb,2,-t),this}saturate(t){return Wt(this._rgb,1,t),this}desaturate(t){return Wt(this._rgb,1,-t),this}rotate(t){return function(t,e){var i=Lt(t);i[0]=Bt(i[0]+e),i=It(i),t.r=i[0],t.g=i[1],t.b=i[2]}(this._rgb,t),this}}function Yt(t){return new $t(t)}const Ut=t=>t instanceof CanvasGradient||t instanceof CanvasPattern;function Xt(t){return Ut(t)?t:Yt(t)}function qt(t){return Ut(t)?t:Yt(t).saturate(.5).darken(.1).hexString()}const Kt=Object.create(null),Zt=Object.create(null);function Gt(t,e){if(!e)return t;const i=e.split(".");for(let e=0,s=i.length;e<s;++e){const s=i[e];t=t[s]||(t[s]=Object.create(null))}return t}function Jt(t,e,i){return"string"==typeof e?R(Gt(t,e),i):R(Gt(t,""),e)}var Qt=new class{constructor(t){this.animation=void 0,this.backgroundColor="rgba(0,0,0,0.1)",this.borderColor="rgba(0,0,0,0.1)",this.color="#666",this.datasets={},this.devicePixelRatio=t=>t.chart.platform.getDevicePixelRatio(),this.elements={},this.events=["mousemove","mouseout","click","touchstart","touchmove"],this.font={family:"'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",size:12,style:"normal",lineHeight:1.2,weight:null},this.hover={},this.hoverBackgroundColor=(t,e)=>qt(e.backgroundColor),this.hoverBorderColor=(t,e)=>qt(e.borderColor),this.hoverColor=(t,e)=>qt(e.color),this.indexAxis="x",this.interaction={mode:"nearest",intersect:!0},this.maintainAspectRatio=!0,this.onHover=null,this.onClick=null,this.parsing=!0,this.plugins={},this.responsive=!0,this.scale=void 0,this.scales={},this.showLine=!0,this.drawActiveElementsOnTop=!0,this.describe(t)}set(t,e){return Jt(this,t,e)}get(t){return Gt(this,t)}describe(t,e){return Jt(Zt,t,e)}override(t,e){return Jt(Kt,t,e)}route(t,e,i,s){const n=Gt(this,t),o=Gt(this,i),a="_"+e;Object.defineProperties(n,{[a]:{value:n[e],writable:!0},[e]:{enumerable:!0,get(){const t=this[a],e=o[s];return M(t)?Object.assign({},e,t):C(t,e)},set(t){this[a]=t}}})}}({_scriptable:t=>!t.startsWith("on"),_indexable:t=>"events"!==t,hover:{_fallback:"interaction"},interaction:{_scriptable:!1,_indexable:!1}});function te(t,e,i,s,n){let o=e[n];return o||(o=e[n]=t.measureText(n).width,i.push(n)),o>s&&(s=o),s}function ee(t,e,i,s){let n=(s=s||{}).data=s.data||{},o=s.garbageCollect=s.garbageCollect||[];s.font!==e&&(n=s.data={},o=s.garbageCollect=[],s.font=e),t.save(),t.font=e;let a=0;const r=i.length;let h,l,c,d,u;for(h=0;h<r;h++)if(d=i[h],null!=d&&!0!==w(d))a=te(t,n,o,a,d);else if(w(d))for(l=0,c=d.length;l<c;l++)u=d[l],null==u||w(u)||(a=te(t,n,o,a,u));t.restore();const p=o.length/2;if(p>i.length){for(h=0;h<p;h++)delete n[o[h]];o.splice(0,p)}return a}function ie(t,e,i){const s=t.currentDevicePixelRatio,n=0!==i?Math.max(i/2,.5):0;return Math.round((e-n)*s)/s+n}function se(t,e){(e=e||t.getContext("2d")).save(),e.resetTransform(),e.clearRect(0,0,t.width,t.height),e.restore()}function ne(t,e,i,s){let n,o,a,r,h;const l=e.pointStyle,c=e.rotation,d=e.radius;let u=(c||0)*X;if(l&&"object"==typeof l&&(n=l.toString(),"[object HTMLImageElement]"===n||"[object HTMLCanvasElement]"===n))return t.save(),t.translate(i,s),t.rotate(u),t.drawImage(l,-l.width/2,-l.height/2,l.width,l.height),void t.restore();if(!(isNaN(d)||d<=0)){switch(t.beginPath(),l){default:t.arc(i,s,d,0,$),t.closePath();break;case"triangle":t.moveTo(i+Math.sin(u)*d,s-Math.cos(u)*d),u+=Z,t.lineTo(i+Math.sin(u)*d,s-Math.cos(u)*d),u+=Z,t.lineTo(i+Math.sin(u)*d,s-Math.cos(u)*d),t.closePath();break;case"rectRounded":h=.516*d,r=d-h,o=Math.cos(u+K)*r,a=Math.sin(u+K)*r,t.arc(i-o,s-a,h,u-H,u-q),t.arc(i+a,s-o,h,u-q,u),t.arc(i+o,s+a,h,u,u+q),t.arc(i-a,s+o,h,u+q,u+H),t.closePath();break;case"rect":if(!c){r=Math.SQRT1_2*d,t.rect(i-r,s-r,2*r,2*r);break}u+=K;case"rectRot":o=Math.cos(u)*d,a=Math.sin(u)*d,t.moveTo(i-o,s-a),t.lineTo(i+a,s-o),t.lineTo(i+o,s+a),t.lineTo(i-a,s+o),t.closePath();break;case"crossRot":u+=K;case"cross":o=Math.cos(u)*d,a=Math.sin(u)*d,t.moveTo(i-o,s-a),t.lineTo(i+o,s+a),t.moveTo(i+a,s-o),t.lineTo(i-a,s+o);break;case"star":o=Math.cos(u)*d,a=Math.sin(u)*d,t.moveTo(i-o,s-a),t.lineTo(i+o,s+a),t.moveTo(i+a,s-o),t.lineTo(i-a,s+o),u+=K,o=Math.cos(u)*d,a=Math.sin(u)*d,t.moveTo(i-o,s-a),t.lineTo(i+o,s+a),t.moveTo(i+a,s-o),t.lineTo(i-a,s+o);break;case"line":o=Math.cos(u)*d,a=Math.sin(u)*d,t.moveTo(i-o,s-a),t.lineTo(i+o,s+a);break;case"dash":t.moveTo(i,s),t.lineTo(i+Math.cos(u)*d,s+Math.sin(u)*d)}t.fill(),e.borderWidth>0&&t.stroke()}}function oe(t,e,i){return i=i||.5,!e||t&&t.x>e.left-i&&t.x<e.right+i&&t.y>e.top-i&&t.y<e.bottom+i}function ae(t,e){t.save(),t.beginPath(),t.rect(e.left,e.top,e.right-e.left,e.bottom-e.top),t.clip()}function re(t){t.restore()}function he(t,e,i,s,n){if(!e)return t.lineTo(i.x,i.y);if("middle"===n){const s=(e.x+i.x)/2;t.lineTo(s,e.y),t.lineTo(s,i.y)}else"after"===n!=!!s?t.lineTo(e.x,i.y):t.lineTo(i.x,e.y);t.lineTo(i.x,i.y)}function le(t,e,i,s){if(!e)return t.lineTo(i.x,i.y);t.bezierCurveTo(s?e.cp1x:e.cp2x,s?e.cp1y:e.cp2y,s?i.cp2x:i.cp1x,s?i.cp2y:i.cp1y,i.x,i.y)}function ce(t,e,i,s,n,o={}){const a=w(e)?e:[e],r=o.strokeWidth>0&&""!==o.strokeColor;let h,l;for(t.save(),t.font=n.string,function(t,e){e.translation&&t.translate(e.translation[0],e.translation[1]),v(e.rotation)||t.rotate(e.rotation),e.color&&(t.fillStyle=e.color),e.textAlign&&(t.textAlign=e.textAlign),e.textBaseline&&(t.textBaseline=e.textBaseline)}(t,o),h=0;h<a.length;++h)l=a[h],r&&(o.strokeColor&&(t.strokeStyle=o.strokeColor),v(o.strokeWidth)||(t.lineWidth=o.strokeWidth),t.strokeText(l,i,s,o.maxWidth)),t.fillText(l,i,s,o.maxWidth),de(t,i,s,l,o),s+=n.lineHeight;t.restore()}function de(t,e,i,s,n){if(n.strikethrough||n.underline){const o=t.measureText(s),a=e-o.actualBoundingBoxLeft,r=e+o.actualBoundingBoxRight,h=i-o.actualBoundingBoxAscent,l=i+o.actualBoundingBoxDescent,c=n.strikethrough?(h+l)/2:l;t.strokeStyle=t.fillStyle,t.beginPath(),t.lineWidth=n.decorationWidth||2,t.moveTo(a,c),t.lineTo(r,c),t.stroke()}}function ue(t,e){const{x:i,y:s,w:n,h:o,radius:a}=e;t.arc(i+a.topLeft,s+a.topLeft,a.topLeft,-q,H,!0),t.lineTo(i,s+o-a.bottomLeft),t.arc(i+a.bottomLeft,s+o-a.bottomLeft,a.bottomLeft,H,q,!0),t.lineTo(i+n-a.bottomRight,s+o),t.arc(i+n-a.bottomRight,s+o-a.bottomRight,a.bottomRight,q,0,!0),t.lineTo(i+n,s+a.topRight),t.arc(i+n-a.topRight,s+a.topRight,a.topRight,0,-q,!0),t.lineTo(i+a.topLeft,s)}const pe=new RegExp(/^(normal|(\d+(?:\.\d+)?)(px|em|%)?)$/),ge=new RegExp(/^(normal|italic|initial|inherit|unset|(oblique( -?[0-9]?[0-9]deg)?))$/);function fe(t,e){const i=(""+t).match(pe);if(!i||"normal"===i[1])return 1.2*e;switch(t=+i[2],i[3]){case"px":return t;case"%":t/=100}return e*t}function me(t,e){const i={},s=M(e),n=s?Object.keys(e):e,o=M(t)?s?i=>C(t[i],t[e[i]]):e=>t[e]:()=>t;for(const t of n)i[t]=+o(t)||0;return i}function be(t){return me(t,{top:"y",right:"x",bottom:"y",left:"x"})}function xe(t){return me(t,["topLeft","topRight","bottomLeft","bottomRight"])}function _e(t){const e=be(t);return e.width=e.left+e.right,e.height=e.top+e.bottom,e}function ye(t,e){t=t||{},e=e||Qt.font;let i=C(t.size,e.size);"string"==typeof i&&(i=parseInt(i,10));let s=C(t.style,e.style);s&&!(""+s).match(ge)&&(console.warn('Invalid font style specified: "'+s+'"'),s="");const n={family:C(t.family,e.family),lineHeight:fe(C(t.lineHeight,e.lineHeight),i),size:i,style:s,weight:C(t.weight,e.weight),string:""};return n.string=function(t){return!t||v(t.size)||v(t.family)?null:(t.style?t.style+" ":"")+(t.weight?t.weight+" ":"")+t.size+"px "+t.family}(n),n}function ve(t,e,i,s){let n,o,a,r=!0;for(n=0,o=t.length;n<o;++n)if(a=t[n],void 0!==a&&(void 0!==e&&"function"==typeof a&&(a=a(e),r=!1),void 0!==i&&w(a)&&(a=a[i%a.length],r=!1),void 0!==a))return s&&!r&&(s.cacheable=!1),a}function we(t,e){return Object.assign(Object.create(t),e)}function Me(t,e,i){i=i||(i=>t[i]<e);let s,n=t.length-1,o=0;for(;n-o>1;)s=o+n>>1,i(s)?o=s:n=s;return{lo:o,hi:n}}const Ae=(t,e,i)=>Me(t,i,(s=>t[s][e]<i)),ke=(t,e,i)=>Me(t,i,(s=>t[s][e]>=i)),Ce=["push","pop","shift","splice","unshift"];function Se(t,e){const i=t._chartjs;if(!i)return;const s=i.listeners,n=s.indexOf(e);-1!==n&&s.splice(n,1),s.length>0||(Ce.forEach((e=>{delete t[e]})),delete t._chartjs)}function De(t){const e=new Set;let i,s;for(i=0,s=t.length;i<s;++i)e.add(t[i]);return e.size===s?t:Array.from(e)}function Pe(t,e=[""],i=t,s,n=(()=>t[0])){W(s)||(s=We("_fallback",t));const o={[Symbol.toStringTag]:"Object",_cacheable:!0,_scopes:t,_rootScopes:i,_fallback:s,_getTarget:n,override:n=>Pe([n,...t],e,i,s)};return new Proxy(o,{deleteProperty:(e,i)=>(delete e[i],delete e._keys,delete t[0][i],!0),get:(i,s)=>Re(i,s,(()=>function(t,e,i,s){let n;for(const o of e)if(n=We(Te(o,t),i),W(n))return Le(t,n)?Fe(i,s,t,n):n}(s,e,t,i))),getOwnPropertyDescriptor:(t,e)=>Reflect.getOwnPropertyDescriptor(t._scopes[0],e),getPrototypeOf:()=>Reflect.getPrototypeOf(t[0]),has:(t,e)=>je(t).includes(e),ownKeys:t=>je(t),set(t,e,i){const s=t._storage||(t._storage=n());return t[e]=s[e]=i,delete t._keys,!0}})}function Ee(t,e,i,s){const n={_cacheable:!1,_proxy:t,_context:e,_subProxy:i,_stack:new Set,_descriptors:Oe(t,s),setContext:e=>Ee(t,e,i,s),override:n=>Ee(t.override(n),e,i,s)};return new Proxy(n,{deleteProperty:(e,i)=>(delete e[i],delete t[i],!0),get:(t,e,i)=>Re(t,e,(()=>function(t,e,i){const{_proxy:s,_context:n,_subProxy:o,_descriptors:a}=t;let r=s[e];return j(r)&&a.isScriptable(e)&&(r=function(t,e,i,s){const{_proxy:n,_context:o,_subProxy:a,_stack:r}=i;if(r.has(t))throw new Error("Recursion detected: "+Array.from(r).join("->")+"->"+t);return r.add(t),e=e(o,a||s),r.delete(t),Le(t,e)&&(e=Fe(n._scopes,n,t,e)),e}(e,r,t,i)),w(r)&&r.length&&(r=function(t,e,i,s){const{_proxy:n,_context:o,_subProxy:a,_descriptors:r}=i;if(W(o.index)&&s(t))e=e[o.index%e.length];else if(M(e[0])){const i=e,s=n._scopes.filter((t=>t!==i));e=[];for(const h of i){const i=Fe(s,n,t,h);e.push(Ee(i,o,a&&a[t],r))}}return e}(e,r,t,a.isIndexable)),Le(e,r)&&(r=Ee(r,n,o&&o[e],a)),r}(t,e,i))),getOwnPropertyDescriptor:(e,i)=>e._descriptors.allKeys?Reflect.has(t,i)?{enumerable:!0,configurable:!0}:void 0:Reflect.getOwnPropertyDescriptor(t,i),getPrototypeOf:()=>Reflect.getPrototypeOf(t),has:(e,i)=>Reflect.has(t,i),ownKeys:()=>Reflect.ownKeys(t),set:(e,i,s)=>(t[i]=s,delete e[i],!0)})}function Oe(t,e={scriptable:!0,indexable:!0}){const{_scriptable:i=e.scriptable,_indexable:s=e.indexable,_allKeys:n=e.allKeys}=t;return{allKeys:n,scriptable:i,indexable:s,isScriptable:j(i)?i:()=>i,isIndexable:j(s)?s:()=>s}}const Te=(t,e)=>t?t+V(e):e,Le=(t,e)=>M(e)&&"adapters"!==t&&(null===Object.getPrototypeOf(e)||e.constructor===Object);function Re(t,e,i){if(Object.prototype.hasOwnProperty.call(t,e))return t[e];const s=i();return t[e]=s,s}function Ie(t,e,i){return j(t)?t(e,i):t}const Be=(t,e)=>!0===t?e:"string"==typeof t?F(e,t):void 0;function ze(t,e,i,s,n){for(const o of e){const e=Be(i,o);if(e){t.add(e);const o=Ie(e._fallback,i,n);if(W(o)&&o!==i&&o!==s)return o}else if(!1===e&&W(s)&&i!==s)return null}return!1}function Fe(t,e,i,s){const n=e._rootScopes,o=Ie(e._fallback,i,s),a=[...t,...n],r=new Set;r.add(s);let h=Ve(r,a,i,o||i,s);return null!==h&&(!W(o)||o===i||(h=Ve(r,a,o,h,s),null!==h))&&Pe(Array.from(r),[""],n,o,(()=>function(t,e,i){const s=t._getTarget();e in s||(s[e]={});const n=s[e];return w(n)&&M(i)?i:n}(e,i,s)))}function Ve(t,e,i,s,n){for(;i;)i=ze(t,e,i,s,n);return i}function We(t,e){for(const i of e){if(!i)continue;const e=i[t];if(W(e))return e}}function je(t){let e=t._keys;return e||(e=t._keys=function(t){const e=new Set;for(const i of t)for(const t of Object.keys(i).filter((t=>!t.startsWith("_"))))e.add(t);return Array.from(e)}(t._scopes)),e}const Ne=Number.EPSILON||1e-14,He=(t,e)=>e<t.length&&!t[e].skip&&t[e],$e=t=>"x"===t?"y":"x";function Ye(t,e,i,s){const n=t.skip?e:t,o=e,a=i.skip?e:i,r=rt(o,n),h=rt(a,o);let l=r/(r+h),c=h/(r+h);l=isNaN(l)?0:l,c=isNaN(c)?0:c;const d=s*l,u=s*c;return{previous:{x:o.x-d*(a.x-n.x),y:o.y-d*(a.y-n.y)},next:{x:o.x+u*(a.x-n.x),y:o.y+u*(a.y-n.y)}}}function Ue(t,e,i){return Math.max(Math.min(t,i),e)}function Xe(t,e,i,s,n){let o,a,r,h;if(e.spanGaps&&(t=t.filter((t=>!t.skip))),"monotone"===e.cubicInterpolationMode)!function(t,e="x"){const i=$e(e),s=t.length,n=Array(s).fill(0),o=Array(s);let a,r,h,l=He(t,0);for(a=0;a<s;++a)if(r=h,h=l,l=He(t,a+1),h){if(l){const t=l[e]-h[e];n[a]=0!==t?(l[i]-h[i])/t:0}o[a]=r?l?J(n[a-1])!==J(n[a])?0:(n[a-1]+n[a])/2:n[a-1]:n[a]}!function(t,e,i){const s=t.length;let n,o,a,r,h,l=He(t,0);for(let c=0;c<s-1;++c)h=l,l=He(t,c+1),h&&l&&(et(e[c],0,Ne)?i[c]=i[c+1]=0:(n=i[c]/e[c],o=i[c+1]/e[c],r=Math.pow(n,2)+Math.pow(o,2),r<=9||(a=3/Math.sqrt(r),i[c]=n*a*e[c],i[c+1]=o*a*e[c])))}(t,n,o),function(t,e,i="x"){const s=$e(i),n=t.length;let o,a,r,h=He(t,0);for(let l=0;l<n;++l){if(a=r,r=h,h=He(t,l+1),!r)continue;const n=r[i],c=r[s];a&&(o=(n-a[i])/3,r[`cp1${i}`]=n-o,r[`cp1${s}`]=c-o*e[l]),h&&(o=(h[i]-n)/3,r[`cp2${i}`]=n+o,r[`cp2${s}`]=c+o*e[l])}}(t,o,e)}(t,n);else{let i=s?t[t.length-1]:t[0];for(o=0,a=t.length;o<a;++o)r=t[o],h=Ye(i,r,t[Math.min(o+1,a-(s?0:1))%a],e.tension),r.cp1x=h.previous.x,r.cp1y=h.previous.y,r.cp2x=h.next.x,r.cp2y=h.next.y,i=r}e.capBezierPoints&&function(t,e){let i,s,n,o,a,r=oe(t[0],e);for(i=0,s=t.length;i<s;++i)a=o,o=r,r=i<s-1&&oe(t[i+1],e),o&&(n=t[i],a&&(n.cp1x=Ue(n.cp1x,e.left,e.right),n.cp1y=Ue(n.cp1y,e.top,e.bottom)),r&&(n.cp2x=Ue(n.cp2x,e.left,e.right),n.cp2y=Ue(n.cp2y,e.top,e.bottom)))}(t,i)}function qe(){return"undefined"!=typeof window&&"undefined"!=typeof document}function Ke(t){let e=t.parentNode;return e&&"[object ShadowRoot]"===e.toString()&&(e=e.host),e}function Ze(t,e,i){let s;return"string"==typeof t?(s=parseInt(t,10),-1!==t.indexOf("%")&&(s=s/100*e.parentNode[i])):s=t,s}const Ge=t=>window.getComputedStyle(t,null),Je=["top","right","bottom","left"];function Qe(t,e,i){const s={};i=i?"-"+i:"";for(let n=0;n<4;n++){const o=Je[n];s[o]=parseFloat(t[e+"-"+o+i])||0}return s.width=s.left+s.right,s.height=s.top+s.bottom,s}function ti(t,e){const{canvas:i,currentDevicePixelRatio:s}=e,n=Ge(i),o="border-box"===n.boxSizing,a=Qe(n,"padding"),r=Qe(n,"border","width"),{x:h,y:l,box:c}=function(t,e){const i=t.native||t,s=i.touches,n=s&&s.length?s[0]:i,{offsetX:o,offsetY:a}=n;let r,h,l=!1;if(((t,e,i)=>(t>0||e>0)&&(!i||!i.shadowRoot))(o,a,i.target))r=o,h=a;else{const t=e.getBoundingClientRect();r=n.clientX-t.left,h=n.clientY-t.top,l=!0}return{x:r,y:h,box:l}}(t,i),d=a.left+(c&&r.left),u=a.top+(c&&r.top);let{width:p,height:g}=e;return o&&(p-=a.width+r.width,g-=a.height+r.height),{x:Math.round((h-d)/p*i.width/s),y:Math.round((l-u)/g*i.height/s)}}const ei=t=>Math.round(10*t)/10;function ii(t,e,i){const s=e||1,n=Math.floor(t.height*s),o=Math.floor(t.width*s);t.height=n/s,t.width=o/s;const a=t.canvas;return a.style&&(i||!a.style.height&&!a.style.width)&&(a.style.height=`${t.height}px`,a.style.width=`${t.width}px`),(t.currentDevicePixelRatio!==s||a.height!==n||a.width!==o)&&(t.currentDevicePixelRatio=s,a.height=n,a.width=o,t.ctx.setTransform(s,0,0,s,0,0),!0)}const si=function(){let t=!1;try{const e={get passive(){return t=!0,!1}};window.addEventListener("test",null,e),window.removeEventListener("test",null,e)}catch(t){}return t}();function ni(t,e){const i=function(t,e){return Ge(t).getPropertyValue(e)}(t,e),s=i&&i.match(/^(\d+)(\.\d+)?px$/);return s?+s[1]:void 0}function oi(t,e,i,s){return{x:t.x+i*(e.x-t.x),y:t.y+i*(e.y-t.y)}}function ai(t,e,i,s){return{x:t.x+i*(e.x-t.x),y:"middle"===s?i<.5?t.y:e.y:"after"===s?i<1?t.y:e.y:i>0?e.y:t.y}}function ri(t,e,i,s){const n={x:t.cp2x,y:t.cp2y},o={x:e.cp1x,y:e.cp1y},a=oi(t,n,i),r=oi(n,o,i),h=oi(o,e,i),l=oi(a,r,i),c=oi(r,h,i);return oi(l,c,i)}const hi=new Map;function li(t,e,i){return function(t,e){e=e||{};const i=t+JSON.stringify(e);let s=hi.get(i);return s||(s=new Intl.NumberFormat(t,e),hi.set(i,s)),s}(e,i).format(t)}function ci(t,e,i){return t?function(t,e){return{x:i=>t+t+e-i,setWidth(t){e=t},textAlign:t=>"center"===t?t:"right"===t?"left":"right",xPlus:(t,e)=>t-e,leftForLtr:(t,e)=>t-e}}(e,i):{x:t=>t,setWidth(t){},textAlign:t=>t,xPlus:(t,e)=>t+e,leftForLtr:(t,e)=>t}}function di(t,e){let i,s;"ltr"!==e&&"rtl"!==e||(i=t.canvas.style,s=[i.getPropertyValue("direction"),i.getPropertyPriority("direction")],i.setProperty("direction",e,"important"),t.prevTextDirection=s)}function ui(t,e){void 0!==e&&(delete t.prevTextDirection,t.canvas.style.setProperty("direction",e[0],e[1]))}function pi(t){return"angle"===t?{between:ct,compare:ht,normalize:lt}:{between:ut,compare:(t,e)=>t-e,normalize:t=>t}}function gi({start:t,end:e,count:i,loop:s,style:n}){return{start:t%i,end:e%i,loop:s&&(e-t+1)%i==0,style:n}}function fi(t,e,i){if(!i)return[t];const{property:s,start:n,end:o}=i,a=e.length,{compare:r,between:h,normalize:l}=pi(s),{start:c,end:d,loop:u,style:p}=function(t,e,i){const{property:s,start:n,end:o}=i,{between:a,normalize:r}=pi(s),h=e.length;let l,c,{start:d,end:u,loop:p}=t;if(p){for(d+=h,u+=h,l=0,c=h;l<c&&a(r(e[d%h][s]),n,o);++l)d--,u--;d%=h,u%=h}return u<d&&(u+=h),{start:d,end:u,loop:p,style:t.style}}(t,e,i),g=[];let f,m,b,x=!1,_=null;for(let t=c,i=c;t<=d;++t)m=e[t%a],m.skip||(f=l(m[s]),f!==b&&(x=h(f,n,o),null===_&&(x||h(n,b,f)&&0!==r(n,b))&&(_=0===r(f,n)?t:i),null!==_&&(!x||0===r(o,f)||h(o,b,f))&&(g.push(gi({start:_,end:t,loop:u,count:a,style:p})),_=null),i=t,b=f));return null!==_&&g.push(gi({start:_,end:d,loop:u,count:a,style:p})),g}function mi(t,e){const i=[],s=t.segments;for(let n=0;n<s.length;n++){const o=fi(s[n],t.points,e);o.length&&i.push(...o)}return i}function bi(t){return{backgroundColor:t.backgroundColor,borderCapStyle:t.borderCapStyle,borderDash:t.borderDash,borderDashOffset:t.borderDashOffset,borderJoinStyle:t.borderJoinStyle,borderWidth:t.borderWidth,borderColor:t.borderColor}}function xi(t,e){return e&&JSON.stringify(t)!==JSON.stringify(e)}var _i=new class{constructor(){this._request=null,this._charts=new Map,this._running=!1,this._lastDate=void 0}_notify(t,e,i,s){const n=e.listeners[s],o=e.duration;n.forEach((s=>s({chart:t,initial:e.initial,numSteps:o,currentStep:Math.min(i-e.start,o)})))}_refresh(){this._request||(this._running=!0,this._request=f.call(window,(()=>{this._update(),this._request=null,this._running&&this._refresh()})))}_update(t=Date.now()){let e=0;this._charts.forEach(((i,s)=>{if(!i.running||!i.items.length)return;const n=i.items;let o,a=n.length-1,r=!1;for(;a>=0;--a)o=n[a],o._active?(o._total>i.duration&&(i.duration=o._total),o.tick(t),r=!0):(n[a]=n[n.length-1],n.pop());r&&(s.draw(),this._notify(s,i,t,"progress")),n.length||(i.running=!1,this._notify(s,i,t,"complete"),i.initial=!1),e+=n.length})),this._lastDate=t,0===e&&(this._running=!1)}_getAnims(t){const e=this._charts;let i=e.get(t);return i||(i={running:!1,initial:!0,items:[],listeners:{complete:[],progress:[]}},e.set(t,i)),i}listen(t,e,i){this._getAnims(t).listeners[e].push(i)}add(t,e){e&&e.length&&this._getAnims(t).items.push(...e)}has(t){return this._getAnims(t).items.length>0}start(t){const e=this._charts.get(t);e&&(e.running=!0,e.start=Date.now(),e.duration=e.items.reduce(((t,e)=>Math.max(t,e._duration)),0),this._refresh())}running(t){if(!this._running)return!1;const e=this._charts.get(t);return!!(e&&e.running&&e.items.length)}stop(t){const e=this._charts.get(t);if(!e||!e.items.length)return;const i=e.items;let s=i.length-1;for(;s>=0;--s)i[s].cancel();e.items=[],this._notify(t,e,Date.now(),"complete")}remove(t){return this._charts.delete(t)}};const yi="transparent",vi={boolean:(t,e,i)=>i>.5?e:t,color(t,e,i){const s=Xt(t||yi),n=s.valid&&Xt(e||yi);return n&&n.valid?n.mix(s,i).hexString():e},number:(t,e,i)=>t+(e-t)*i};class wi{constructor(t,e,i,s){const n=e[i];s=ve([t.to,s,n,t.from]);const o=ve([t.from,n,s]);this._active=!0,this._fn=t.fn||vi[t.type||typeof o],this._easing=mt[t.easing]||mt.linear,this._start=Math.floor(Date.now()+(t.delay||0)),this._duration=this._total=Math.floor(t.duration),this._loop=!!t.loop,this._target=e,this._prop=i,this._from=o,this._to=s,this._promises=void 0}active(){return this._active}update(t,e,i){if(this._active){this._notify(!1);const s=this._target[this._prop],n=i-this._start,o=this._duration-n;this._start=i,this._duration=Math.floor(Math.max(o,t.duration)),this._total+=n,this._loop=!!t.loop,this._to=ve([t.to,e,s,t.from]),this._from=ve([t.from,s,e])}}cancel(){this._active&&(this.tick(Date.now()),this._active=!1,this._notify(!1))}tick(t){const e=t-this._start,i=this._duration,s=this._prop,n=this._from,o=this._loop,a=this._to;let r;if(this._active=n!==a&&(o||e<i),!this._active)return this._target[s]=a,void this._notify(!0);e<0?this._target[s]=n:(r=e/i%2,r=o&&r>1?2-r:r,r=this._easing(Math.min(1,Math.max(0,r))),this._target[s]=this._fn(n,a,r))}wait(){const t=this._promises||(this._promises=[]);return new Promise(((e,i)=>{t.push({res:e,rej:i})}))}_notify(t){const e=t?"res":"rej",i=this._promises||[];for(let t=0;t<i.length;t++)i[t][e]()}}Qt.set("animation",{delay:void 0,duration:1e3,easing:"easeOutQuart",fn:void 0,from:void 0,loop:void 0,to:void 0,type:void 0});const Mi=Object.keys(Qt.animation);Qt.describe("animation",{_fallback:!1,_indexable:!1,_scriptable:t=>"onProgress"!==t&&"onComplete"!==t&&"fn"!==t}),Qt.set("animations",{colors:{type:"color",properties:["color","borderColor","backgroundColor"]},numbers:{type:"number",properties:["x","y","borderWidth","radius","tension"]}}),Qt.describe("animations",{_fallback:"animation"}),Qt.set("transitions",{active:{animation:{duration:400}},resize:{animation:{duration:0}},show:{animations:{colors:{from:"transparent"},visible:{type:"boolean",duration:0}}},hide:{animations:{colors:{to:"transparent"},visible:{type:"boolean",easing:"linear",fn:t=>0|t}}}});class Ai{constructor(t,e){this._chart=t,this._properties=new Map,this.configure(e)}configure(t){if(!M(t))return;const e=this._properties;Object.getOwnPropertyNames(t).forEach((i=>{const s=t[i];if(!M(s))return;const n={};for(const t of Mi)n[t]=s[t];(w(s.properties)&&s.properties||[i]).forEach((t=>{t!==i&&e.has(t)||e.set(t,n)}))}))}_animateOptions(t,e){const i=e.options,s=function(t,e){if(!e)return;let i=t.options;if(i)return i.$shared&&(t.options=i=Object.assign({},i,{$shared:!1,$animations:{}})),i;t.options=e}(t,i);if(!s)return[];const n=this._createAnimations(s,i);return i.$shared&&function(t,e){const i=[],s=Object.keys(e);for(let e=0;e<s.length;e++){const n=t[s[e]];n&&n.active()&&i.push(n.wait())}return Promise.all(i)}(t.options.$animations,i).then((()=>{t.options=i}),(()=>{})),n}_createAnimations(t,e){const i=this._properties,s=[],n=t.$animations||(t.$animations={}),o=Object.keys(e),a=Date.now();let r;for(r=o.length-1;r>=0;--r){const h=o[r];if("$"===h.charAt(0))continue;if("options"===h){s.push(...this._animateOptions(t,e));continue}const l=e[h];let c=n[h];const d=i.get(h);if(c){if(d&&c.active()){c.update(d,l,a);continue}c.cancel()}d&&d.duration?(n[h]=c=new wi(d,t,h,l),s.push(c)):t[h]=l}return s}update(t,e){if(0===this._properties.size)return void Object.assign(t,e);const i=this._createAnimations(t,e);return i.length?(_i.add(this._chart,i),!0):void 0}}function ki(t,e){const i=t&&t.options||{},s=i.reverse,n=void 0===i.min?e:0,o=void 0===i.max?e:0;return{start:s?o:n,end:s?n:o}}function Ci(t,e){const i=[],s=t._getSortedDatasetMetas(e);let n,o;for(n=0,o=s.length;n<o;++n)i.push(s[n].index);return i}function Si(t,e,i,s={}){const n=t.keys,o="single"===s.mode;let a,r,h,l;if(null!==e){for(a=0,r=n.length;a<r;++a){if(h=+n[a],h===i){if(s.all)continue;break}l=t.values[h],A(l)&&(o||0===e||J(e)===J(l))&&(e+=l)}return e}}function Di(t,e){const i=t&&t.options.stacked;return i||void 0===i&&void 0!==e.stack}function Pi(t,e,i){const s=t[e]||(t[e]={});return s[i]||(s[i]={})}function Ei(t,e,i,s){for(const n of e.getMatchingVisibleMetas(s).reverse()){const e=t[n.index];if(i&&e>0||!i&&e<0)return n.index}return null}function Oi(t,e){const{chart:i,_cachedMeta:s}=t,n=i._stacks||(i._stacks={}),{iScale:o,vScale:a,index:r}=s,h=o.axis,l=a.axis,c=function(t,e,i){return`${t.id}.${e.id}.${i.stack||i.type}`}(o,a,s),d=e.length;let u;for(let t=0;t<d;++t){const i=e[t],{[h]:o,[l]:d}=i;u=(i._stacks||(i._stacks={}))[l]=Pi(n,c,o),u[r]=d,u._top=Ei(u,a,!0,s.type),u._bottom=Ei(u,a,!1,s.type)}}function Ti(t,e){const i=t.scales;return Object.keys(i).filter((t=>i[t].axis===e)).shift()}function Li(t,e){const i=t.controller.index,s=t.vScale&&t.vScale.axis;if(s){e=e||t._parsed;for(const t of e){const e=t._stacks;if(!e||void 0===e[s]||void 0===e[s][i])return;delete e[s][i]}}}const Ri=t=>"reset"===t||"none"===t,Ii=(t,e)=>e?t:Object.assign({},t);class Bi{constructor(t,e){this.chart=t,this._ctx=t.ctx,this.index=e,this._cachedDataOpts={},this._cachedMeta=this.getMeta(),this._type=this._cachedMeta.type,this.options=void 0,this._parsing=!1,this._data=void 0,this._objectData=void 0,this._sharedOptions=void 0,this._drawStart=void 0,this._drawCount=void 0,this.enableOptionSharing=!1,this.$context=void 0,this._syncList=[],this.initialize()}initialize(){const t=this._cachedMeta;this.configure(),this.linkScales(),t._stacked=Di(t.vScale,t),this.addElements()}updateIndex(t){this.index!==t&&Li(this._cachedMeta),this.index=t}linkScales(){const t=this.chart,e=this._cachedMeta,i=this.getDataset(),s=(t,e,i,s)=>"x"===t?e:"r"===t?s:i,n=e.xAxisID=C(i.xAxisID,Ti(t,"x")),o=e.yAxisID=C(i.yAxisID,Ti(t,"y")),a=e.rAxisID=C(i.rAxisID,Ti(t,"r")),r=e.indexAxis,h=e.iAxisID=s(r,n,o,a),l=e.vAxisID=s(r,o,n,a);e.xScale=this.getScaleForId(n),e.yScale=this.getScaleForId(o),e.rScale=this.getScaleForId(a),e.iScale=this.getScaleForId(h),e.vScale=this.getScaleForId(l)}getDataset(){return this.chart.data.datasets[this.index]}getMeta(){return this.chart.getDatasetMeta(this.index)}getScaleForId(t){return this.chart.scales[t]}_getOtherScale(t){const e=this._cachedMeta;return t===e.iScale?e.vScale:e.iScale}reset(){this._update("reset")}_destroy(){const t=this._cachedMeta;this._data&&Se(this._data,this),t._stacked&&Li(t)}_dataCheck(){const t=this.getDataset(),e=t.data||(t.data=[]),i=this._data;if(M(e))this._data=function(t){const e=Object.keys(t),i=new Array(e.length);let s,n,o;for(s=0,n=e.length;s<n;++s)o=e[s],i[s]={x:o,y:t[o]};return i}(e);else if(i!==e){if(i){Se(i,this);const t=this._cachedMeta;Li(t),t._parsed=[]}e&&Object.isExtensible(e)&&(this,(s=e)._chartjs?s._chartjs.listeners.push(this):(Object.defineProperty(s,"_chartjs",{configurable:!0,enumerable:!1,value:{listeners:[this]}}),Ce.forEach((t=>{const e="_onData"+V(t),i=s[t];Object.defineProperty(s,t,{configurable:!0,enumerable:!1,value(...t){const n=i.apply(this,t);return s._chartjs.listeners.forEach((i=>{"function"==typeof i[e]&&i[e](...t)})),n}})})))),this._syncList=[],this._data=e}var s}addElements(){const t=this._cachedMeta;this._dataCheck(),this.datasetElementType&&(t.dataset=new this.datasetElementType)}buildOrUpdateElements(t){const e=this._cachedMeta,i=this.getDataset();let s=!1;this._dataCheck();const n=e._stacked;e._stacked=Di(e.vScale,e),e.stack!==i.stack&&(s=!0,Li(e),e.stack=i.stack),this._resyncElements(t),(s||n!==e._stacked)&&Oi(this,e._parsed)}configure(){const t=this.chart.config,e=t.datasetScopeKeys(this._type),i=t.getOptionScopes(this.getDataset(),e,!0);this.options=t.createResolver(i,this.getContext()),this._parsing=this.options.parsing,this._cachedDataOpts={}}parse(t,e){const{_cachedMeta:i,_data:s}=this,{iScale:n,_stacked:o}=i,a=n.axis;let r,h,l,c=0===t&&e===s.length||i._sorted,d=t>0&&i._parsed[t-1];if(!1===this._parsing)i._parsed=s,i._sorted=!0,l=s;else{l=w(s[t])?this.parseArrayData(i,s,t,e):M(s[t])?this.parseObjectData(i,s,t,e):this.parsePrimitiveData(i,s,t,e);const n=()=>null===h[a]||d&&h[a]<d[a];for(r=0;r<e;++r)i._parsed[r+t]=h=l[r],c&&(n()&&(c=!1),d=h);i._sorted=c}o&&Oi(this,l)}parsePrimitiveData(t,e,i,s){const{iScale:n,vScale:o}=t,a=n.axis,r=o.axis,h=n.getLabels(),l=n===o,c=new Array(s);let d,u,p;for(d=0,u=s;d<u;++d)p=d+i,c[d]={[a]:l||n.parse(h[p],p),[r]:o.parse(e[p],p)};return c}parseArrayData(t,e,i,s){const{xScale:n,yScale:o}=t,a=new Array(s);let r,h,l,c;for(r=0,h=s;r<h;++r)l=r+i,c=e[l],a[r]={x:n.parse(c[0],l),y:o.parse(c[1],l)};return a}parseObjectData(t,e,i,s){const{xScale:n,yScale:o}=t,{xAxisKey:a="x",yAxisKey:r="y"}=this._parsing,h=new Array(s);let l,c,d,u;for(l=0,c=s;l<c;++l)d=l+i,u=e[d],h[l]={x:n.parse(F(u,a),d),y:o.parse(F(u,r),d)};return h}getParsed(t){return this._cachedMeta._parsed[t]}getDataElement(t){return this._cachedMeta.data[t]}applyStack(t,e,i){const s=this.chart,n=this._cachedMeta,o=e[t.axis];return Si({keys:Ci(s,!0),values:e._stacks[t.axis]},o,n.index,{mode:i})}updateRangeFromParsed(t,e,i,s){const n=i[e.axis];let o=null===n?NaN:n;const a=s&&i._stacks[e.axis];s&&a&&(s.values=a,o=Si(s,n,this._cachedMeta.index)),t.min=Math.min(t.min,o),t.max=Math.max(t.max,o)}getMinMax(t,e){const i=this._cachedMeta,s=i._parsed,n=i._sorted&&t===i.iScale,o=s.length,a=this._getOtherScale(t),r=((t,e,i)=>t&&!e.hidden&&e._stacked&&{keys:Ci(i,!0),values:null})(e,i,this.chart),h={min:Number.POSITIVE_INFINITY,max:Number.NEGATIVE_INFINITY},{min:l,max:c}=function(t){const{min:e,max:i,minDefined:s,maxDefined:n}=t.getUserBounds();return{min:s?e:Number.NEGATIVE_INFINITY,max:n?i:Number.POSITIVE_INFINITY}}(a);let d,u;function p(){u=s[d];const e=u[a.axis];return!A(u[t.axis])||l>e||c<e}for(d=0;d<o&&(p()||(this.updateRangeFromParsed(h,t,u,r),!n));++d);if(n)for(d=o-1;d>=0;--d)if(!p()){this.updateRangeFromParsed(h,t,u,r);break}return h}getAllParsedValues(t){const e=this._cachedMeta._parsed,i=[];let s,n,o;for(s=0,n=e.length;s<n;++s)o=e[s][t.axis],A(o)&&i.push(o);return i}getMaxOverflow(){return!1}getLabelAndValue(t){const e=this._cachedMeta,i=e.iScale,s=e.vScale,n=this.getParsed(t);return{label:i?""+i.getLabelForValue(n[i.axis]):"",value:s?""+s.getLabelForValue(n[s.axis]):""}}_update(t){const e=this._cachedMeta;this.update(t||"default"),e._clip=function(t){let e,i,s,n;return M(t)?(e=t.top,i=t.right,s=t.bottom,n=t.left):e=i=s=n=t,{top:e,right:i,bottom:s,left:n,disabled:!1===t}}(C(this.options.clip,function(t,e,i){if(!1===i)return!1;const s=ki(t,i),n=ki(e,i);return{top:n.end,right:s.end,bottom:n.start,left:s.start}}(e.xScale,e.yScale,this.getMaxOverflow())))}update(t){}draw(){const t=this._ctx,e=this.chart,i=this._cachedMeta,s=i.data||[],n=e.chartArea,o=[],a=this._drawStart||0,r=this._drawCount||s.length-a,h=this.options.drawActiveElementsOnTop;let l;for(i.dataset&&i.dataset.draw(t,n,a,r),l=a;l<a+r;++l){const e=s[l];e.hidden||(e.active&&h?o.push(e):e.draw(t,n))}for(l=0;l<o.length;++l)o[l].draw(t,n)}getStyle(t,e){const i=e?"active":"default";return void 0===t&&this._cachedMeta.dataset?this.resolveDatasetElementOptions(i):this.resolveDataElementOptions(t||0,i)}getContext(t,e,i){const s=this.getDataset();let n;if(t>=0&&t<this._cachedMeta.data.length){const e=this._cachedMeta.data[t];n=e.$context||(e.$context=function(t,e,i){return we(t,{active:!1,dataIndex:e,parsed:void 0,raw:void 0,element:i,index:e,mode:"default",type:"data"})}(this.getContext(),t,e)),n.parsed=this.getParsed(t),n.raw=s.data[t],n.index=n.dataIndex=t}else n=this.$context||(this.$context=function(t,e){return we(t,{active:!1,dataset:void 0,datasetIndex:e,index:e,mode:"default",type:"dataset"})}(this.chart.getContext(),this.index)),n.dataset=s,n.index=n.datasetIndex=this.index;return n.active=!!e,n.mode=i,n}resolveDatasetElementOptions(t){return this._resolveElementOptions(this.datasetElementType.id,t)}resolveDataElementOptions(t,e){return this._resolveElementOptions(this.dataElementType.id,e,t)}_resolveElementOptions(t,e="default",i){const s="active"===e,n=this._cachedDataOpts,o=t+"-"+e,a=n[o],r=this.enableOptionSharing&&W(i);if(a)return Ii(a,r);const h=this.chart.config,l=h.datasetElementScopeKeys(this._type,t),c=s?[`${t}Hover`,"hover",t,""]:[t,""],d=h.getOptionScopes(this.getDataset(),l),u=Object.keys(Qt.elements[t]),p=h.resolveNamedOptions(d,u,(()=>this.getContext(i,s)),c);return p.$shared&&(p.$shared=r,n[o]=Object.freeze(Ii(p,r))),p}_resolveAnimations(t,e,i){const s=this.chart,n=this._cachedDataOpts,o=`animation-${e}`,a=n[o];if(a)return a;let r;if(!1!==s.options.animation){const s=this.chart.config,n=s.datasetAnimationScopeKeys(this._type,e),o=s.getOptionScopes(this.getDataset(),n);r=s.createResolver(o,this.getContext(t,i,e))}const h=new Ai(s,r&&r.animations);return r&&r._cacheable&&(n[o]=Object.freeze(h)),h}getSharedOptions(t){if(t.$shared)return this._sharedOptions||(this._sharedOptions=Object.assign({},t))}includeOptions(t,e){return!e||Ri(t)||this.chart._animationsDisabled}updateElement(t,e,i,s){Ri(s)?Object.assign(t,i):this._resolveAnimations(e,s).update(t,i)}updateSharedOptions(t,e,i){t&&!Ri(e)&&this._resolveAnimations(void 0,e).update(t,i)}_setStyle(t,e,i,s){t.active=s;const n=this.getStyle(e,s);this._resolveAnimations(e,i,s).update(t,{options:!s&&this.getSharedOptions(n)||n})}removeHoverStyle(t,e,i){this._setStyle(t,i,"active",!1)}setHoverStyle(t,e,i){this._setStyle(t,i,"active",!0)}_removeDatasetHoverStyle(){const t=this._cachedMeta.dataset;t&&this._setStyle(t,void 0,"active",!1)}_setDatasetHoverStyle(){const t=this._cachedMeta.dataset;t&&this._setStyle(t,void 0,"active",!0)}_resyncElements(t){const e=this._data,i=this._cachedMeta.data;for(const[t,e,i]of this._syncList)this[t](e,i);this._syncList=[];const s=i.length,n=e.length,o=Math.min(n,s);o&&this.parse(0,o),n>s?this._insertElements(s,n-s,t):n<s&&this._removeElements(n,s-n)}_insertElements(t,e,i=!0){const s=this._cachedMeta,n=s.data,o=t+e;let a;const r=t=>{for(t.length+=e,a=t.length-1;a>=o;a--)t[a]=t[a-e]};for(r(n),a=t;a<o;++a)n[a]=new this.dataElementType;this._parsing&&r(s._parsed),this.parse(t,e),i&&this.updateElements(n,t,e,"reset")}updateElements(t,e,i,s){}_removeElements(t,e){const i=this._cachedMeta;if(this._parsing){const s=i._parsed.splice(t,e);i._stacked&&Li(i,s)}i.data.splice(t,e)}_sync(t){if(this._parsing)this._syncList.push(t);else{const[e,i,s]=t;this[e](i,s)}this.chart._dataChanges.push([this.index,...t])}_onDataPush(){const t=arguments.length;this._sync(["_insertElements",this.getDataset().data.length-t,t])}_onDataPop(){this._sync(["_removeElements",this._cachedMeta.data.length-1,1])}_onDataShift(){this._sync(["_removeElements",0,1])}_onDataSplice(t,e){e&&this._sync(["_removeElements",t,e]);const i=arguments.length-2;i&&this._sync(["_insertElements",t,i])}_onDataUnshift(){this._sync(["_insertElements",0,arguments.length])}}function zi(t){const e=t.iScale,i=function(t,e){if(!t._cache.$bar){const i=t.getMatchingVisibleMetas(e);let s=[];for(let e=0,n=i.length;e<n;e++)s=s.concat(i[e].controller.getAllParsedValues(t));t._cache.$bar=De(s.sort(((t,e)=>t-e)))}return t._cache.$bar}(e,t.type);let s,n,o,a,r=e._length;const h=()=>{32767!==o&&-32768!==o&&(W(a)&&(r=Math.min(r,Math.abs(o-a)||r)),a=o)};for(s=0,n=i.length;s<n;++s)o=e.getPixelForValue(i[s]),h();for(a=void 0,s=0,n=e.ticks.length;s<n;++s)o=e.getPixelForTick(s),h();return r}function Fi(t,e,i,s){return w(t)?function(t,e,i,s){const n=i.parse(t[0],s),o=i.parse(t[1],s),a=Math.min(n,o),r=Math.max(n,o);let h=a,l=r;Math.abs(a)>Math.abs(r)&&(h=r,l=a),e[i.axis]=l,e._custom={barStart:h,barEnd:l,start:n,end:o,min:a,max:r}}(t,e,i,s):e[i.axis]=i.parse(t,s),e}function Vi(t,e,i,s){const n=t.iScale,o=t.vScale,a=n.getLabels(),r=n===o,h=[];let l,c,d,u;for(l=i,c=i+s;l<c;++l)u=e[l],d={},d[n.axis]=r||n.parse(a[l],l),h.push(Fi(u,d,o,l));return h}function Wi(t){return t&&void 0!==t.barStart&&void 0!==t.barEnd}function ji(t,e,i,s){let n=e.borderSkipped;const o={};if(!n)return void(t.borderSkipped=o);const{start:a,end:r,reverse:h,top:l,bottom:c}=function(t){let e,i,s,n,o;return t.horizontal?(e=t.base>t.x,i="left",s="right"):(e=t.base<t.y,i="bottom",s="top"),e?(n="end",o="start"):(n="start",o="end"),{start:i,end:s,reverse:e,top:n,bottom:o}}(t);"middle"===n&&i&&(t.enableBorderRadius=!0,(i._top||0)===s?n=l:(i._bottom||0)===s?n=c:(o[Ni(c,a,r,h)]=!0,n=l)),o[Ni(n,a,r,h)]=!0,t.borderSkipped=o}function Ni(t,e,i,s){var n,o,a;return s?(a=i,t=Hi(t=(n=t)===(o=e)?a:n===a?o:n,i,e)):t=Hi(t,e,i),t}function Hi(t,e,i){return"start"===t?e:"end"===t?i:t}function $i(t,{inflateAmount:e},i){t.inflateAmount="auto"===e?1===i?.33:0:e}Bi.defaults={},Bi.prototype.datasetElementType=null,Bi.prototype.dataElementType=null;class Yi extends Bi{parsePrimitiveData(t,e,i,s){return Vi(t,e,i,s)}parseArrayData(t,e,i,s){return Vi(t,e,i,s)}parseObjectData(t,e,i,s){const{iScale:n,vScale:o}=t,{xAxisKey:a="x",yAxisKey:r="y"}=this._parsing,h="x"===n.axis?a:r,l="x"===o.axis?a:r,c=[];let d,u,p,g;for(d=i,u=i+s;d<u;++d)g=e[d],p={},p[n.axis]=n.parse(F(g,h),d),c.push(Fi(F(g,l),p,o,d));return c}updateRangeFromParsed(t,e,i,s){super.updateRangeFromParsed(t,e,i,s);const n=i._custom;n&&e===this._cachedMeta.vScale&&(t.min=Math.min(t.min,n.min),t.max=Math.max(t.max,n.max))}getMaxOverflow(){return 0}getLabelAndValue(t){const e=this._cachedMeta,{iScale:i,vScale:s}=e,n=this.getParsed(t),o=n._custom,a=Wi(o)?"["+o.start+", "+o.end+"]":""+s.getLabelForValue(n[s.axis]);return{label:""+i.getLabelForValue(n[i.axis]),value:a}}initialize(){this.enableOptionSharing=!0,super.initialize(),this._cachedMeta.stack=this.getDataset().stack}update(t){const e=this._cachedMeta;this.updateElements(e.data,0,e.data.length,t)}updateElements(t,e,i,s){const n="reset"===s,{index:o,_cachedMeta:{vScale:a}}=this,r=a.getBasePixel(),h=a.isHorizontal(),l=this._getRuler(),c=this.resolveDataElementOptions(e,s),d=this.getSharedOptions(c),u=this.includeOptions(s,d);this.updateSharedOptions(d,s,c);for(let c=e;c<e+i;c++){const e=this.getParsed(c),i=n||v(e[a.axis])?{base:r,head:r}:this._calculateBarValuePixels(c),p=this._calculateBarIndexPixels(c,l),g=(e._stacks||{})[a.axis],f={horizontal:h,base:i.base,enableBorderRadius:!g||Wi(e._custom)||o===g._top||o===g._bottom,x:h?i.head:p.center,y:h?p.center:i.head,height:h?p.size:Math.abs(i.size),width:h?Math.abs(i.size):p.size};u&&(f.options=d||this.resolveDataElementOptions(c,t[c].active?"active":s));const m=f.options||t[c].options;ji(f,m,g,o),$i(f,m,l.ratio),this.updateElement(t[c],c,f,s)}}_getStacks(t,e){const i=this._cachedMeta.iScale,s=i.getMatchingVisibleMetas(this._type),n=i.options.stacked,o=s.length,a=[];let r,h;for(r=0;r<o;++r)if(h=s[r],h.controller.options.grouped){if(void 0!==e){const t=h.controller.getParsed(e)[h.controller._cachedMeta.vScale.axis];if(v(t)||isNaN(t))continue}if((!1===n||-1===a.indexOf(h.stack)||void 0===n&&void 0===h.stack)&&a.push(h.stack),h.index===t)break}return a.length||a.push(void 0),a}_getStackCount(t){return this._getStacks(void 0,t).length}_getStackIndex(t,e,i){const s=this._getStacks(t,i),n=void 0!==e?s.indexOf(e):-1;return-1===n?s.length-1:n}_getRuler(){const t=this.options,e=this._cachedMeta,i=e.iScale,s=[];let n,o;for(n=0,o=e.data.length;n<o;++n)s.push(i.getPixelForValue(this.getParsed(n)[i.axis],n));const a=t.barThickness;return{min:a||zi(e),pixels:s,start:i._startPixel,end:i._endPixel,stackCount:this._getStackCount(),scale:i,grouped:t.grouped,ratio:a?1:t.categoryPercentage*t.barPercentage}}_calculateBarValuePixels(t){const{_cachedMeta:{vScale:e,_stacked:i},options:{base:s,minBarLength:n}}=this,o=s||0,a=this.getParsed(t),r=a._custom,h=Wi(r);let l,c,d=a[e.axis],u=0,p=i?this.applyStack(e,a,i):d;p!==d&&(u=p-d,p=d),h&&(d=r.barStart,p=r.barEnd-r.barStart,0!==d&&J(d)!==J(r.barEnd)&&(u=0),u+=d);const g=v(s)||h?u:s;let f=e.getPixelForValue(g);if(l=this.chart.getDataVisibility(t)?e.getPixelForValue(u+p):f,c=l-f,Math.abs(c)<n&&(c=function(t,e,i){return 0!==t?J(t):(e.isHorizontal()?1:-1)*(e.min>=i?1:-1)}(c,e,o)*n,d===o&&(f-=c/2),l=f+c),f===e.getPixelForValue(o)){const t=J(c)*e.getLineWidthForValue(o)/2;f+=t,c-=t}return{size:c,base:f,head:l,center:l+c/2}}_calculateBarIndexPixels(t,e){const i=e.scale,s=this.options,n=s.skipNull,o=C(s.maxBarThickness,1/0);let a,r;if(e.grouped){const i=n?this._getStackCount(t):e.stackCount,h="flex"===s.barThickness?function(t,e,i,s){const n=e.pixels,o=n[t];let a=t>0?n[t-1]:null,r=t<n.length-1?n[t+1]:null;const h=i.categoryPercentage;null===a&&(a=o-(null===r?e.end-e.start:r-o)),null===r&&(r=o+o-a);const l=o-(o-Math.min(a,r))/2*h;return{chunk:Math.abs(r-a)/2*h/s,ratio:i.barPercentage,start:l}}(t,e,s,i):function(t,e,i,s){const n=i.barThickness;let o,a;return v(n)?(o=e.min*i.categoryPercentage,a=i.barPercentage):(o=n*s,a=1),{chunk:o/s,ratio:a,start:e.pixels[t]-o/2}}(t,e,s,i),l=this._getStackIndex(this.index,this._cachedMeta.stack,n?t:void 0);a=h.start+h.chunk*l+h.chunk/2,r=Math.min(o,h.chunk*h.ratio)}else a=i.getPixelForValue(this.getParsed(t)[i.axis],t),r=Math.min(o,e.min*e.ratio);return{base:a-r/2,head:a+r/2,center:a,size:r}}draw(){const t=this._cachedMeta,e=t.vScale,i=t.data,s=i.length;let n=0;for(;n<s;++n)null!==this.getParsed(n)[e.axis]&&i[n].draw(this._ctx)}}Yi.id="bar",Yi.defaults={datasetElementType:!1,dataElementType:"bar",categoryPercentage:.8,barPercentage:.9,grouped:!0,animations:{numbers:{type:"number",properties:["x","y","base","width","height"]}}},Yi.overrides={scales:{_index_:{type:"category",offset:!0,grid:{offset:!0}},_value_:{type:"linear",beginAtZero:!0}}};class Ui extends Bi{initialize(){this.enableOptionSharing=!0,super.initialize()}parsePrimitiveData(t,e,i,s){const n=super.parsePrimitiveData(t,e,i,s);for(let t=0;t<n.length;t++)n[t]._custom=this.resolveDataElementOptions(t+i).radius;return n}parseArrayData(t,e,i,s){const n=super.parseArrayData(t,e,i,s);for(let t=0;t<n.length;t++){const s=e[i+t];n[t]._custom=C(s[2],this.resolveDataElementOptions(t+i).radius)}return n}parseObjectData(t,e,i,s){const n=super.parseObjectData(t,e,i,s);for(let t=0;t<n.length;t++){const s=e[i+t];n[t]._custom=C(s&&s.r&&+s.r,this.resolveDataElementOptions(t+i).radius)}return n}getMaxOverflow(){const t=this._cachedMeta.data;let e=0;for(let i=t.length-1;i>=0;--i)e=Math.max(e,t[i].size(this.resolveDataElementOptions(i))/2);return e>0&&e}getLabelAndValue(t){const e=this._cachedMeta,{xScale:i,yScale:s}=e,n=this.getParsed(t),o=i.getLabelForValue(n.x),a=s.getLabelForValue(n.y),r=n._custom;return{label:e.label,value:"("+o+", "+a+(r?", "+r:"")+")"}}update(t){const e=this._cachedMeta.data;this.updateElements(e,0,e.length,t)}updateElements(t,e,i,s){const n="reset"===s,{iScale:o,vScale:a}=this._cachedMeta,r=this.resolveDataElementOptions(e,s),h=this.getSharedOptions(r),l=this.includeOptions(s,h),c=o.axis,d=a.axis;for(let r=e;r<e+i;r++){const e=t[r],i=!n&&this.getParsed(r),h={},u=h[c]=n?o.getPixelForDecimal(.5):o.getPixelForValue(i[c]),p=h[d]=n?a.getBasePixel():a.getPixelForValue(i[d]);h.skip=isNaN(u)||isNaN(p),l&&(h.options=this.resolveDataElementOptions(r,e.active?"active":s),n&&(h.options.radius=0)),this.updateElement(e,r,h,s)}this.updateSharedOptions(h,s,r)}resolveDataElementOptions(t,e){const i=this.getParsed(t);let s=super.resolveDataElementOptions(t,e);s.$shared&&(s=Object.assign({},s,{$shared:!1}));const n=s.radius;return"active"!==e&&(s.radius=0),s.radius+=C(i&&i._custom,n),s}}Ui.id="bubble",Ui.defaults={datasetElementType:!1,dataElementType:"point",animations:{numbers:{type:"number",properties:["x","y","borderWidth","radius"]}}},Ui.overrides={scales:{x:{type:"linear"},y:{type:"linear"}},plugins:{tooltip:{callbacks:{title:()=>""}}}};class Xi extends Bi{constructor(t,e){super(t,e),this.enableOptionSharing=!0,this.innerRadius=void 0,this.outerRadius=void 0,this.offsetX=void 0,this.offsetY=void 0}linkScales(){}parse(t,e){const i=this.getDataset().data,s=this._cachedMeta;if(!1===this._parsing)s._parsed=i;else{let n,o,a=t=>+i[t];if(M(i[t])){const{key:t="value"}=this._parsing;a=e=>+F(i[e],t)}for(n=t,o=t+e;n<o;++n)s._parsed[n]=a(n)}}_getRotation(){return st(this.options.rotation-90)}_getCircumference(){return st(this.options.circumference)}_getRotationExtents(){let t=$,e=-$;for(let i=0;i<this.chart.data.datasets.length;++i)if(this.chart.isDatasetVisible(i)){const s=this.chart.getDatasetMeta(i).controller,n=s._getRotation(),o=s._getCircumference();t=Math.min(t,n),e=Math.max(e,n+o)}return{rotation:t,circumference:e-t}}update(t){const e=this.chart,{chartArea:i}=e,s=this._cachedMeta,n=s.data,o=this.getMaxBorderWidth()+this.getMaxOffset(n)+this.options.spacing,a=Math.max((Math.min(i.width,i.height)-o)/2,0),r=Math.min((l=a,"string"==typeof(h=this.options.cutout)&&h.endsWith("%")?parseFloat(h)/100:h/l),1);var h,l;const c=this._getRingWeight(this.index),{circumference:d,rotation:u}=this._getRotationExtents(),{ratioX:p,ratioY:g,offsetX:f,offsetY:m}=function(t,e,i){let s=1,n=1,o=0,a=0;if(e<$){const r=t,h=r+e,l=Math.cos(r),c=Math.sin(r),d=Math.cos(h),u=Math.sin(h),p=(t,e,s)=>ct(t,r,h,!0)?1:Math.max(e,e*i,s,s*i),g=(t,e,s)=>ct(t,r,h,!0)?-1:Math.min(e,e*i,s,s*i),f=p(0,l,d),m=p(q,c,u),b=g(H,l,d),x=g(H+q,c,u);s=(f-b)/2,n=(m-x)/2,o=-(f+b)/2,a=-(m+x)/2}return{ratioX:s,ratioY:n,offsetX:o,offsetY:a}}(u,d,r),b=(i.width-o)/p,x=(i.height-o)/g,_=Math.max(Math.min(b,x)/2,0),y=S(this.options.radius,_),v=(y-Math.max(y*r,0))/this._getVisibleDatasetWeightTotal();this.offsetX=f*y,this.offsetY=m*y,s.total=this.calculateTotal(),this.outerRadius=y-v*this._getRingWeightOffset(this.index),this.innerRadius=Math.max(this.outerRadius-v*c,0),this.updateElements(n,0,n.length,t)}_circumference(t,e){const i=this.options,s=this._cachedMeta,n=this._getCircumference();return e&&i.animation.animateRotate||!this.chart.getDataVisibility(t)||null===s._parsed[t]||s.data[t].hidden?0:this.calculateCircumference(s._parsed[t]*n/$)}updateElements(t,e,i,s){const n="reset"===s,o=this.chart,a=o.chartArea,r=o.options.animation,h=(a.left+a.right)/2,l=(a.top+a.bottom)/2,c=n&&r.animateScale,d=c?0:this.innerRadius,u=c?0:this.outerRadius,p=this.resolveDataElementOptions(e,s),g=this.getSharedOptions(p),f=this.includeOptions(s,g);let m,b=this._getRotation();for(m=0;m<e;++m)b+=this._circumference(m,n);for(m=e;m<e+i;++m){const e=this._circumference(m,n),i=t[m],o={x:h+this.offsetX,y:l+this.offsetY,startAngle:b,endAngle:b+e,circumference:e,outerRadius:u,innerRadius:d};f&&(o.options=g||this.resolveDataElementOptions(m,i.active?"active":s)),b+=e,this.updateElement(i,m,o,s)}this.updateSharedOptions(g,s,p)}calculateTotal(){const t=this._cachedMeta,e=t.data;let i,s=0;for(i=0;i<e.length;i++){const n=t._parsed[i];null===n||isNaN(n)||!this.chart.getDataVisibility(i)||e[i].hidden||(s+=Math.abs(n))}return s}calculateCircumference(t){const e=this._cachedMeta.total;return e>0&&!isNaN(t)?$*(Math.abs(t)/e):0}getLabelAndValue(t){const e=this._cachedMeta,i=this.chart,s=i.data.labels||[],n=li(e._parsed[t],i.options.locale);return{label:s[t]||"",value:n}}getMaxBorderWidth(t){let e=0;const i=this.chart;let s,n,o,a,r;if(!t)for(s=0,n=i.data.datasets.length;s<n;++s)if(i.isDatasetVisible(s)){o=i.getDatasetMeta(s),t=o.data,a=o.controller;break}if(!t)return 0;for(s=0,n=t.length;s<n;++s)r=a.resolveDataElementOptions(s),"inner"!==r.borderAlign&&(e=Math.max(e,r.borderWidth||0,r.hoverBorderWidth||0));return e}getMaxOffset(t){let e=0;for(let i=0,s=t.length;i<s;++i){const t=this.resolveDataElementOptions(i);e=Math.max(e,t.offset||0,t.hoverOffset||0)}return e}_getRingWeightOffset(t){let e=0;for(let i=0;i<t;++i)this.chart.isDatasetVisible(i)&&(e+=this._getRingWeight(i));return e}_getRingWeight(t){return Math.max(C(this.chart.data.datasets[t].weight,1),0)}_getVisibleDatasetWeightTotal(){return this._getRingWeightOffset(this.chart.data.datasets.length)||1}}Xi.id="doughnut",Xi.defaults={datasetElementType:!1,dataElementType:"arc",animation:{animateRotate:!0,animateScale:!1},animations:{numbers:{type:"number",properties:["circumference","endAngle","innerRadius","outerRadius","startAngle","x","y","offset","borderWidth","spacing"]}},cutout:"50%",rotation:0,circumference:360,radius:"100%",spacing:0,indexAxis:"r"},Xi.descriptors={_scriptable:t=>"spacing"!==t,_indexable:t=>"spacing"!==t},Xi.overrides={aspectRatio:1,plugins:{legend:{labels:{generateLabels(t){const e=t.data;if(e.labels.length&&e.datasets.length){const{labels:{pointStyle:i}}=t.legend.options;return e.labels.map(((e,s)=>{const n=t.getDatasetMeta(0).controller.getStyle(s);return{text:e,fillStyle:n.backgroundColor,strokeStyle:n.borderColor,lineWidth:n.borderWidth,pointStyle:i,hidden:!t.getDataVisibility(s),index:s}}))}return[]}},onClick(t,e,i){i.chart.toggleDataVisibility(e.index),i.chart.update()}},tooltip:{callbacks:{title:()=>"",label(t){let e=t.label;const i=": "+t.formattedValue;return w(e)?(e=e.slice(),e[0]+=i):e+=i,e}}}}};class qi extends Bi{initialize(){this.enableOptionSharing=!0,super.initialize()}update(t){const e=this._cachedMeta,{dataset:i,data:s=[],_dataset:n}=e,o=this.chart._animationsDisabled;let{start:a,count:r}=function(t,e,i){const s=e.length;let n=0,o=s;if(t._sorted){const{iScale:a,_parsed:r}=t,h=a.axis,{min:l,max:c,minDefined:d,maxDefined:u}=a.getUserBounds();d&&(n=dt(Math.min(Ae(r,a.axis,l).lo,i?s:Ae(e,h,a.getPixelForValue(l)).lo),0,s-1)),o=u?dt(Math.max(Ae(r,a.axis,c).hi+1,i?0:Ae(e,h,a.getPixelForValue(c)).hi+1),n,s)-n:s-n}return{start:n,count:o}}(e,s,o);this._drawStart=a,this._drawCount=r,function(t){const{xScale:e,yScale:i,_scaleRanges:s}=t,n={xmin:e.min,xmax:e.max,ymin:i.min,ymax:i.max};if(!s)return t._scaleRanges=n,!0;const o=s.xmin!==e.min||s.xmax!==e.max||s.ymin!==i.min||s.ymax!==i.max;return Object.assign(s,n),o}(e)&&(a=0,r=s.length),i._chart=this.chart,i._datasetIndex=this.index,i._decimated=!!n._decimated,i.points=s;const h=this.resolveDatasetElementOptions(t);this.options.showLine||(h.borderWidth=0),h.segment=this.options.segment,this.updateElement(i,void 0,{animated:!o,options:h},t),this.updateElements(s,a,r,t)}updateElements(t,e,i,s){const n="reset"===s,{iScale:o,vScale:a,_stacked:r,_dataset:h}=this._cachedMeta,l=this.resolveDataElementOptions(e,s),c=this.getSharedOptions(l),d=this.includeOptions(s,c),u=o.axis,p=a.axis,{spanGaps:g,segment:f}=this.options,m=tt(g)?g:Number.POSITIVE_INFINITY,b=this.chart._animationsDisabled||n||"none"===s;let x=e>0&&this.getParsed(e-1);for(let l=e;l<e+i;++l){const e=t[l],i=this.getParsed(l),g=b?e:{},_=v(i[p]),y=g[u]=o.getPixelForValue(i[u],l),w=g[p]=n||_?a.getBasePixel():a.getPixelForValue(r?this.applyStack(a,i,r):i[p],l);g.skip=isNaN(y)||isNaN(w)||_,g.stop=l>0&&i[u]-x[u]>m,f&&(g.parsed=i,g.raw=h.data[l]),d&&(g.options=c||this.resolveDataElementOptions(l,e.active?"active":s)),b||this.updateElement(e,l,g,s),x=i}this.updateSharedOptions(c,s,l)}getMaxOverflow(){const t=this._cachedMeta,e=t.dataset,i=e.options&&e.options.borderWidth||0,s=t.data||[];if(!s.length)return i;const n=s[0].size(this.resolveDataElementOptions(0)),o=s[s.length-1].size(this.resolveDataElementOptions(s.length-1));return Math.max(i,n,o)/2}draw(){const t=this._cachedMeta;t.dataset.updateControlPoints(this.chart.chartArea,t.iScale.axis),super.draw()}}qi.id="line",qi.defaults={datasetElementType:"line",dataElementType:"point",showLine:!0,spanGaps:!1},qi.overrides={scales:{_index_:{type:"category"},_value_:{type:"linear"}}};class Ki extends Bi{constructor(t,e){super(t,e),this.innerRadius=void 0,this.outerRadius=void 0}getLabelAndValue(t){const e=this._cachedMeta,i=this.chart,s=i.data.labels||[],n=li(e._parsed[t].r,i.options.locale);return{label:s[t]||"",value:n}}update(t){const e=this._cachedMeta.data;this._updateRadius(),this.updateElements(e,0,e.length,t)}_updateRadius(){const t=this.chart,e=t.chartArea,i=t.options,s=Math.min(e.right-e.left,e.bottom-e.top),n=Math.max(s/2,0),o=(n-Math.max(i.cutoutPercentage?n/100*i.cutoutPercentage:1,0))/t.getVisibleDatasetCount();this.outerRadius=n-o*this.index,this.innerRadius=this.outerRadius-o}updateElements(t,e,i,s){const n="reset"===s,o=this.chart,a=this.getDataset(),r=o.options.animation,h=this._cachedMeta.rScale,l=h.xCenter,c=h.yCenter,d=h.getIndexAngle(0)-.5*H;let u,p=d;const g=360/this.countVisibleElements();for(u=0;u<e;++u)p+=this._computeAngle(u,s,g);for(u=e;u<e+i;u++){const e=t[u];let i=p,f=p+this._computeAngle(u,s,g),m=o.getDataVisibility(u)?h.getDistanceFromCenterForValue(a.data[u]):0;p=f,n&&(r.animateScale&&(m=0),r.animateRotate&&(i=f=d));const b={x:l,y:c,innerRadius:0,outerRadius:m,startAngle:i,endAngle:f,options:this.resolveDataElementOptions(u,e.active?"active":s)};this.updateElement(e,u,b,s)}}countVisibleElements(){const t=this.getDataset(),e=this._cachedMeta;let i=0;return e.data.forEach(((e,s)=>{!isNaN(t.data[s])&&this.chart.getDataVisibility(s)&&i++})),i}_computeAngle(t,e,i){return this.chart.getDataVisibility(t)?st(this.resolveDataElementOptions(t,e).angle||i):0}}Ki.id="polarArea",Ki.defaults={dataElementType:"arc",animation:{animateRotate:!0,animateScale:!0},animations:{numbers:{type:"number",properties:["x","y","startAngle","endAngle","innerRadius","outerRadius"]}},indexAxis:"r",startAngle:0},Ki.overrides={aspectRatio:1,plugins:{legend:{labels:{generateLabels(t){const e=t.data;if(e.labels.length&&e.datasets.length){const{labels:{pointStyle:i}}=t.legend.options;return e.labels.map(((e,s)=>{const n=t.getDatasetMeta(0).controller.getStyle(s);return{text:e,fillStyle:n.backgroundColor,strokeStyle:n.borderColor,lineWidth:n.borderWidth,pointStyle:i,hidden:!t.getDataVisibility(s),index:s}}))}return[]}},onClick(t,e,i){i.chart.toggleDataVisibility(e.index),i.chart.update()}},tooltip:{callbacks:{title:()=>"",label:t=>t.chart.data.labels[t.dataIndex]+": "+t.formattedValue}}},scales:{r:{type:"radialLinear",angleLines:{display:!1},beginAtZero:!0,grid:{circular:!0},pointLabels:{display:!1},startAngle:0}}};class Zi extends Xi{}Zi.id="pie",Zi.defaults={cutout:0,rotation:0,circumference:360,radius:"100%"};class Gi extends Bi{getLabelAndValue(t){const e=this._cachedMeta.vScale,i=this.getParsed(t);return{label:e.getLabels()[t],value:""+e.getLabelForValue(i[e.axis])}}update(t){const e=this._cachedMeta,i=e.dataset,s=e.data||[],n=e.iScale.getLabels();if(i.points=s,"resize"!==t){const e=this.resolveDatasetElementOptions(t);this.options.showLine||(e.borderWidth=0);const o={_loop:!0,_fullLoop:n.length===s.length,options:e};this.updateElement(i,void 0,o,t)}this.updateElements(s,0,s.length,t)}updateElements(t,e,i,s){const n=this.getDataset(),o=this._cachedMeta.rScale,a="reset"===s;for(let r=e;r<e+i;r++){const e=t[r],i=this.resolveDataElementOptions(r,e.active?"active":s),h=o.getPointPositionForValue(r,n.data[r]),l=a?o.xCenter:h.x,c=a?o.yCenter:h.y,d={x:l,y:c,angle:h.angle,skip:isNaN(l)||isNaN(c),options:i};this.updateElement(e,r,d,s)}}}Gi.id="radar",Gi.defaults={datasetElementType:"line",dataElementType:"point",indexAxis:"r",showLine:!0,elements:{line:{fill:"start"}}},Gi.overrides={aspectRatio:1,scales:{r:{type:"radialLinear"}}};class Ji extends qi{}Ji.id="scatter",Ji.defaults={showLine:!1,fill:!1},Ji.overrides={interaction:{mode:"point"},plugins:{tooltip:{callbacks:{title:()=>"",label:t=>"("+t.label+", "+t.formattedValue+")"}}},scales:{x:{type:"linear"},y:{type:"linear"}}};var Qi=Object.freeze({__proto__:null,BarController:Yi,BubbleController:Ui,DoughnutController:Xi,LineController:qi,PolarAreaController:Ki,PieController:Zi,RadarController:Gi,ScatterController:Ji});function ts(){throw new Error("This method is not implemented: Check that a complete date adapter is provided.")}class es{constructor(t){this.options=t||{}}formats(){return ts()}parse(t,e){return ts()}format(t,e){return ts()}add(t,e,i){return ts()}diff(t,e,i){return ts()}startOf(t,e,i){return ts()}endOf(t,e){return ts()}}es.override=function(t){Object.assign(es.prototype,t)};var is={_date:es};function ss(t,e){return"native"in t?{x:t.x,y:t.y}:ti(t,e)}function ns(t,e,i,s){const{controller:n,data:o,_sorted:a}=t,r=n._cachedMeta.iScale;if(r&&e===r.axis&&"r"!==e&&a&&o.length){const t=r._reversePixels?ke:Ae;if(!s)return t(o,e,i);if(n._sharedOptions){const s=o[0],n="function"==typeof s.getRange&&s.getRange(e);if(n){const s=t(o,e,i-n),a=t(o,e,i+n);return{lo:s.lo,hi:a.hi}}}}return{lo:0,hi:o.length-1}}function os(t,e,i,s,n){const o=t.getSortedVisibleDatasetMetas(),a=i[e];for(let t=0,i=o.length;t<i;++t){const{index:i,data:r}=o[t],{lo:h,hi:l}=ns(o[t],e,a,n);for(let t=h;t<=l;++t){const e=r[t];e.skip||s(e,i,t)}}}function as(t,e,i,s){const n=[];return oe(e,t.chartArea,t._minPadding)?(os(t,i,e,(function(t,i,o){t.inRange(e.x,e.y,s)&&n.push({element:t,datasetIndex:i,index:o})}),!0),n):n}function rs(t,e,i,s,n){return oe(e,t.chartArea,t._minPadding)?"r"!==i||s?function(t,e,i,s,n){let o=[];const a=function(t){const e=-1!==t.indexOf("x"),i=-1!==t.indexOf("y");return function(t,s){const n=e?Math.abs(t.x-s.x):0,o=i?Math.abs(t.y-s.y):0;return Math.sqrt(Math.pow(n,2)+Math.pow(o,2))}}(i);let r=Number.POSITIVE_INFINITY;return os(t,i,e,(function(i,h,l){const c=i.inRange(e.x,e.y,n);if(s&&!c)return;const d=i.getCenterPoint(n);if(!oe(d,t.chartArea,t._minPadding)&&!c)return;const u=a(e,d);u<r?(o=[{element:i,datasetIndex:h,index:l}],r=u):u===r&&o.push({element:i,datasetIndex:h,index:l})})),o}(t,e,i,s,n):function(t,e,i,s){let n=[];return os(t,i,e,(function(t,i,o){const{startAngle:a,endAngle:r}=t.getProps(["startAngle","endAngle"],s),{angle:h}=at(t,{x:e.x,y:e.y});ct(h,a,r)&&n.push({element:t,datasetIndex:i,index:o})})),n}(t,e,i,n):[]}function hs(t,e,i,s){const n=ss(e,t),o=[],a=i.axis,r="x"===a?"inXRange":"inYRange";let h=!1;return function(t,e){const i=t.getSortedVisibleDatasetMetas();let s,n,o;for(let t=0,a=i.length;t<a;++t){({index:s,data:n}=i[t]);for(let t=0,i=n.length;t<i;++t)o=n[t],o.skip||e(o,s,t)}}(t,((t,e,i)=>{t[r](n[a],s)&&o.push({element:t,datasetIndex:e,index:i}),t.inRange(n.x,n.y,s)&&(h=!0)})),i.intersect&&!h?[]:o}var ls={modes:{index(t,e,i,s){const n=ss(e,t),o=i.axis||"x",a=i.intersect?as(t,n,o,s):rs(t,n,o,!1,s),r=[];return a.length?(t.getSortedVisibleDatasetMetas().forEach((t=>{const e=a[0].index,i=t.data[e];i&&!i.skip&&r.push({element:i,datasetIndex:t.index,index:e})})),r):[]},dataset(t,e,i,s){const n=ss(e,t),o=i.axis||"xy";let a=i.intersect?as(t,n,o,s):rs(t,n,o,!1,s);if(a.length>0){const e=a[0].datasetIndex,i=t.getDatasetMeta(e).data;a=[];for(let t=0;t<i.length;++t)a.push({element:i[t],datasetIndex:e,index:t})}return a},point:(t,e,i,s)=>as(t,ss(e,t),i.axis||"xy",s),nearest:(t,e,i,s)=>rs(t,ss(e,t),i.axis||"xy",i.intersect,s),x:(t,e,i,s)=>hs(t,e,{axis:"x",intersect:i.intersect},s),y:(t,e,i,s)=>hs(t,e,{axis:"y",intersect:i.intersect},s)}};const cs=["left","top","right","bottom"];function ds(t,e){return t.filter((t=>t.pos===e))}function us(t,e){return t.filter((t=>-1===cs.indexOf(t.pos)&&t.box.axis===e))}function ps(t,e){return t.sort(((t,i)=>{const s=e?i:t,n=e?t:i;return s.weight===n.weight?s.index-n.index:s.weight-n.weight}))}function gs(t,e,i,s){return Math.max(t[i],e[i])+Math.max(t[s],e[s])}function fs(t,e){t.top=Math.max(t.top,e.top),t.left=Math.max(t.left,e.left),t.bottom=Math.max(t.bottom,e.bottom),t.right=Math.max(t.right,e.right)}function ms(t,e,i,s){const{pos:n,box:o}=i,a=t.maxPadding;if(!M(n)){i.size&&(t[n]-=i.size);const e=s[i.stack]||{size:0,count:1};e.size=Math.max(e.size,i.horizontal?o.height:o.width),i.size=e.size/e.count,t[n]+=i.size}o.getPadding&&fs(a,o.getPadding());const r=Math.max(0,e.outerWidth-gs(a,t,"left","right")),h=Math.max(0,e.outerHeight-gs(a,t,"top","bottom")),l=r!==t.w,c=h!==t.h;return t.w=r,t.h=h,i.horizontal?{same:l,other:c}:{same:c,other:l}}function bs(t,e){const i=e.maxPadding;return function(t){const s={left:0,top:0,right:0,bottom:0};return t.forEach((t=>{s[t]=Math.max(e[t],i[t])})),s}(t?["left","right"]:["top","bottom"])}function xs(t,e,i,s){const n=[];let o,a,r,h,l,c;for(o=0,a=t.length,l=0;o<a;++o){r=t[o],h=r.box,h.update(r.width||e.w,r.height||e.h,bs(r.horizontal,e));const{same:a,other:d}=ms(e,i,r,s);l|=a&&n.length,c=c||d,h.fullSize||n.push(r)}return l&&xs(n,e,i,s)||c}function _s(t,e,i,s,n){t.top=i,t.left=e,t.right=e+s,t.bottom=i+n,t.width=s,t.height=n}function ys(t,e,i,s){const n=i.padding;let{x:o,y:a}=e;for(const r of t){const t=r.box,h=s[r.stack]||{count:1,placed:0,weight:1},l=r.stackWeight/h.weight||1;if(r.horizontal){const s=e.w*l,o=h.size||t.height;W(h.start)&&(a=h.start),t.fullSize?_s(t,n.left,a,i.outerWidth-n.right-n.left,o):_s(t,e.left+h.placed,a,s,o),h.start=a,h.placed+=s,a=t.bottom}else{const s=e.h*l,a=h.size||t.width;W(h.start)&&(o=h.start),t.fullSize?_s(t,o,n.top,a,i.outerHeight-n.bottom-n.top):_s(t,o,e.top+h.placed,a,s),h.start=o,h.placed+=s,o=t.right}}e.x=o,e.y=a}Qt.set("layout",{autoPadding:!0,padding:{top:0,right:0,bottom:0,left:0}});var vs={addBox(t,e){t.boxes||(t.boxes=[]),e.fullSize=e.fullSize||!1,e.position=e.position||"top",e.weight=e.weight||0,e._layers=e._layers||function(){return[{z:0,draw(t){e.draw(t)}}]},t.boxes.push(e)},removeBox(t,e){const i=t.boxes?t.boxes.indexOf(e):-1;-1!==i&&t.boxes.splice(i,1)},configure(t,e,i){e.fullSize=i.fullSize,e.position=i.position,e.weight=i.weight},update(t,e,i,s){if(!t)return;const n=_e(t.options.layout.padding),o=Math.max(e-n.width,0),a=Math.max(i-n.height,0),r=function(t){const e=function(t){const e=[];let i,s,n,o,a,r;for(i=0,s=(t||[]).length;i<s;++i)n=t[i],({position:o,options:{stack:a,stackWeight:r=1}}=n),e.push({index:i,box:n,pos:o,horizontal:n.isHorizontal(),weight:n.weight,stack:a&&o+a,stackWeight:r});return e}(t),i=ps(e.filter((t=>t.box.fullSize)),!0),s=ps(ds(e,"left"),!0),n=ps(ds(e,"right")),o=ps(ds(e,"top"),!0),a=ps(ds(e,"bottom")),r=us(e,"x"),h=us(e,"y");return{fullSize:i,leftAndTop:s.concat(o),rightAndBottom:n.concat(h).concat(a).concat(r),chartArea:ds(e,"chartArea"),vertical:s.concat(n).concat(h),horizontal:o.concat(a).concat(r)}}(t.boxes),h=r.vertical,l=r.horizontal;P(t.boxes,(t=>{"function"==typeof t.beforeLayout&&t.beforeLayout()}));const c=h.reduce(((t,e)=>e.box.options&&!1===e.box.options.display?t:t+1),0)||1,d=Object.freeze({outerWidth:e,outerHeight:i,padding:n,availableWidth:o,availableHeight:a,vBoxMaxWidth:o/2/c,hBoxMaxHeight:a/2}),u=Object.assign({},n);fs(u,_e(s));const p=Object.assign({maxPadding:u,w:o,h:a,x:n.left,y:n.top},n),g=function(t,e){const i=function(t){const e={};for(const i of t){const{stack:t,pos:s,stackWeight:n}=i;if(!t||!cs.includes(s))continue;const o=e[t]||(e[t]={count:0,placed:0,weight:0,size:0});o.count++,o.weight+=n}return e}(t),{vBoxMaxWidth:s,hBoxMaxHeight:n}=e;let o,a,r;for(o=0,a=t.length;o<a;++o){r=t[o];const{fullSize:a}=r.box,h=i[r.stack],l=h&&r.stackWeight/h.weight;r.horizontal?(r.width=l?l*s:a&&e.availableWidth,r.height=n):(r.width=s,r.height=l?l*n:a&&e.availableHeight)}return i}(h.concat(l),d);xs(r.fullSize,p,d,g),xs(h,p,d,g),xs(l,p,d,g)&&xs(h,p,d,g),function(t){const e=t.maxPadding;function i(i){const s=Math.max(e[i]-t[i],0);return t[i]+=s,s}t.y+=i("top"),t.x+=i("left"),i("right"),i("bottom")}(p),ys(r.leftAndTop,p,d,g),p.x+=p.w,p.y+=p.h,ys(r.rightAndBottom,p,d,g),t.chartArea={left:p.left,top:p.top,right:p.left+p.w,bottom:p.top+p.h,height:p.h,width:p.w},P(r.chartArea,(e=>{const i=e.box;Object.assign(i,t.chartArea),i.update(p.w,p.h,{left:0,top:0,right:0,bottom:0})}))}};class ws{acquireContext(t,e){}releaseContext(t){return!1}addEventListener(t,e,i){}removeEventListener(t,e,i){}getDevicePixelRatio(){return 1}getMaximumSize(t,e,i,s){return e=Math.max(0,e||t.width),i=i||t.height,{width:e,height:Math.max(0,s?Math.floor(e/s):i)}}isAttached(t){return!0}updateConfig(t){}}class Ms extends ws{acquireContext(t){return t&&t.getContext&&t.getContext("2d")||null}updateConfig(t){t.options.animation=!1}}const As={touchstart:"mousedown",touchmove:"mousemove",touchend:"mouseup",pointerenter:"mouseenter",pointerdown:"mousedown",pointermove:"mousemove",pointerup:"mouseup",pointerleave:"mouseout",pointerout:"mouseout"},ks=t=>null===t||""===t,Cs=!!si&&{passive:!0};function Ss(t,e,i){t.canvas.removeEventListener(e,i,Cs)}function Ds(t,e){for(const i of t)if(i===e||i.contains(e))return!0}function Ps(t,e,i){const s=t.canvas,n=new MutationObserver((t=>{let e=!1;for(const i of t)e=e||Ds(i.addedNodes,s),e=e&&!Ds(i.removedNodes,s);e&&i()}));return n.observe(document,{childList:!0,subtree:!0}),n}function Es(t,e,i){const s=t.canvas,n=new MutationObserver((t=>{let e=!1;for(const i of t)e=e||Ds(i.removedNodes,s),e=e&&!Ds(i.addedNodes,s);e&&i()}));return n.observe(document,{childList:!0,subtree:!0}),n}const Os=new Map;let Ts=0;function Ls(){const t=window.devicePixelRatio;t!==Ts&&(Ts=t,Os.forEach(((e,i)=>{i.currentDevicePixelRatio!==t&&e()})))}function Rs(t,e,i){const s=t.canvas,n=s&&Ke(s);if(!n)return;const o=m(((t,e)=>{const s=n.clientWidth;i(t,e),s<n.clientWidth&&i()}),window),a=new ResizeObserver((t=>{const e=t[0],i=e.contentRect.width,s=e.contentRect.height;0===i&&0===s||o(i,s)}));return a.observe(n),function(t,e){Os.size||window.addEventListener("resize",Ls),Os.set(t,e)}(t,o),a}function Is(t,e,i){i&&i.disconnect(),"resize"===e&&function(t){Os.delete(t),Os.size||window.removeEventListener("resize",Ls)}(t)}function Bs(t,e,i){const s=t.canvas,n=m((e=>{null!==t.ctx&&i(function(t,e){const i=As[t.type]||t.type,{x:s,y:n}=ti(t,e);return{type:i,chart:e,native:t,x:void 0!==s?s:null,y:void 0!==n?n:null}}(e,t))}),t,(t=>{const e=t[0];return[e,e.offsetX,e.offsetY]}));return function(t,e,i){t.addEventListener(e,i,Cs)}(s,e,n),n}class zs extends ws{acquireContext(t,e){const i=t&&t.getContext&&t.getContext("2d");return i&&i.canvas===t?(function(t,e){const i=t.style,s=t.getAttribute("height"),n=t.getAttribute("width");if(t.$chartjs={initial:{height:s,width:n,style:{display:i.display,height:i.height,width:i.width}}},i.display=i.display||"block",i.boxSizing=i.boxSizing||"border-box",ks(n)){const e=ni(t,"width");void 0!==e&&(t.width=e)}if(ks(s))if(""===t.style.height)t.height=t.width/(e||2);else{const e=ni(t,"height");void 0!==e&&(t.height=e)}}(t,e),i):null}releaseContext(t){const e=t.canvas;if(!e.$chartjs)return!1;const i=e.$chartjs.initial;["height","width"].forEach((t=>{const s=i[t];v(s)?e.removeAttribute(t):e.setAttribute(t,s)}));const s=i.style||{};return Object.keys(s).forEach((t=>{e.style[t]=s[t]})),e.width=e.width,delete e.$chartjs,!0}addEventListener(t,e,i){this.removeEventListener(t,e);const s=t.$proxies||(t.$proxies={}),n={attach:Ps,detach:Es,resize:Rs}[e]||Bs;s[e]=n(t,e,i)}removeEventListener(t,e){const i=t.$proxies||(t.$proxies={}),s=i[e];s&&(({attach:Is,detach:Is,resize:Is}[e]||Ss)(t,e,s),i[e]=void 0)}getDevicePixelRatio(){return window.devicePixelRatio}getMaximumSize(t,e,i,s){return function(t,e,i,s){const n=Ge(t),o=Qe(n,"margin"),a=Ze(n.maxWidth,t,"clientWidth")||U,r=Ze(n.maxHeight,t,"clientHeight")||U,h=function(t,e,i){let s,n;if(void 0===e||void 0===i){const o=Ke(t);if(o){const t=o.getBoundingClientRect(),a=Ge(o),r=Qe(a,"border","width"),h=Qe(a,"padding");e=t.width-h.width-r.width,i=t.height-h.height-r.height,s=Ze(a.maxWidth,o,"clientWidth"),n=Ze(a.maxHeight,o,"clientHeight")}else e=t.clientWidth,i=t.clientHeight}return{width:e,height:i,maxWidth:s||U,maxHeight:n||U}}(t,e,i);let{width:l,height:c}=h;if("content-box"===n.boxSizing){const t=Qe(n,"border","width"),e=Qe(n,"padding");l-=e.width+t.width,c-=e.height+t.height}return l=Math.max(0,l-o.width),c=Math.max(0,s?Math.floor(l/s):c-o.height),l=ei(Math.min(l,a,h.maxWidth)),c=ei(Math.min(c,r,h.maxHeight)),l&&!c&&(c=ei(l/2)),{width:l,height:c}}(t,e,i,s)}isAttached(t){const e=Ke(t);return!(!e||!e.isConnected)}}class Fs{constructor(){this.x=void 0,this.y=void 0,this.active=!1,this.options=void 0,this.$animations=void 0}tooltipPosition(t){const{x:e,y:i}=this.getProps(["x","y"],t);return{x:e,y:i}}hasValue(){return tt(this.x)&&tt(this.y)}getProps(t,e){const i=this.$animations;if(!e||!i)return this;const s={};return t.forEach((t=>{s[t]=i[t]&&i[t].active()?i[t]._to:this[t]})),s}}Fs.defaults={},Fs.defaultRoutes=void 0;const Vs={values:t=>w(t)?t:""+t,numeric(t,e,i){if(0===t)return"0";const s=this.chart.options.locale;let n,o=t;if(i.length>1){const e=Math.max(Math.abs(i[0].value),Math.abs(i[i.length-1].value));(e<1e-4||e>1e15)&&(n="scientific"),o=function(t,e){let i=e.length>3?e[2].value-e[1].value:e[1].value-e[0].value;return Math.abs(i)>=1&&t!==Math.floor(t)&&(i=t-Math.floor(t)),i}(t,i)}const a=G(Math.abs(o)),r=Math.max(Math.min(-1*Math.floor(a),20),0),h={notation:n,minimumFractionDigits:r,maximumFractionDigits:r};return Object.assign(h,this.options.ticks.format),li(t,s,h)},logarithmic(t,e,i){if(0===t)return"0";const s=t/Math.pow(10,Math.floor(G(t)));return 1===s||2===s||5===s?Vs.numeric.call(this,t,e,i):""}};var Ws={formatters:Vs};function js(t,e,i,s,n){const o=C(s,0),a=Math.min(C(n,t.length),t.length);let r,h,l,c=0;for(i=Math.ceil(i),n&&(r=n-s,i=r/Math.floor(r/i)),l=o;l<0;)c++,l=Math.round(o+c*i);for(h=Math.max(o,0);h<a;h++)h===l&&(e.push(t[h]),c++,l=Math.round(o+c*i))}Qt.set("scale",{display:!0,offset:!1,reverse:!1,beginAtZero:!1,bounds:"ticks",grace:0,grid:{display:!0,lineWidth:1,drawBorder:!0,drawOnChartArea:!0,drawTicks:!0,tickLength:8,tickWidth:(t,e)=>e.lineWidth,tickColor:(t,e)=>e.color,offset:!1,borderDash:[],borderDashOffset:0,borderWidth:1},title:{display:!1,text:"",padding:{top:4,bottom:4}},ticks:{minRotation:0,maxRotation:50,mirror:!1,textStrokeWidth:0,textStrokeColor:"",padding:3,display:!0,autoSkip:!0,autoSkipPadding:3,labelOffset:0,callback:Ws.formatters.values,minor:{},major:{},align:"center",crossAlign:"near",showLabelBackdrop:!1,backdropColor:"rgba(255, 255, 255, 0.75)",backdropPadding:2}}),Qt.route("scale.ticks","color","","color"),Qt.route("scale.grid","color","","borderColor"),Qt.route("scale.grid","borderColor","","borderColor"),Qt.route("scale.title","color","","color"),Qt.describe("scale",{_fallback:!1,_scriptable:t=>!t.startsWith("before")&&!t.startsWith("after")&&"callback"!==t&&"parser"!==t,_indexable:t=>"borderDash"!==t&&"tickBorderDash"!==t}),Qt.describe("scales",{_fallback:"scale"}),Qt.describe("scale.ticks",{_scriptable:t=>"backdropPadding"!==t&&"callback"!==t,_indexable:t=>"backdropPadding"!==t});const Ns=(t,e,i)=>"top"===e||"left"===e?t[e]+i:t[e]-i;function Hs(t,e){const i=[],s=t.length/e,n=t.length;let o=0;for(;o<n;o+=s)i.push(t[Math.floor(o)]);return i}function $s(t,e,i){const s=t.ticks.length,n=Math.min(e,s-1),o=t._startPixel,a=t._endPixel,r=1e-6;let h,l=t.getPixelForTick(n);if(!(i&&(h=1===s?Math.max(l-o,a-l):0===e?(t.getPixelForTick(1)-l)/2:(l-t.getPixelForTick(n-1))/2,l+=n<e?h:-h,l<o-r||l>a+r)))return l}function Ys(t){return t.drawTicks?t.tickLength:0}function Us(t,e){if(!t.display)return 0;const i=ye(t.font,e),s=_e(t.padding);return(w(t.text)?t.text.length:1)*i.lineHeight+s.height}function Xs(t,e,i){let s=b(t);return(i&&"right"!==e||!i&&"right"===e)&&(s=(t=>"left"===t?"right":"right"===t?"left":t)(s)),s}class qs extends Fs{constructor(t){super(),this.id=t.id,this.type=t.type,this.options=void 0,this.ctx=t.ctx,this.chart=t.chart,this.top=void 0,this.bottom=void 0,this.left=void 0,this.right=void 0,this.width=void 0,this.height=void 0,this._margins={left:0,right:0,top:0,bottom:0},this.maxWidth=void 0,this.maxHeight=void 0,this.paddingTop=void 0,this.paddingBottom=void 0,this.paddingLeft=void 0,this.paddingRight=void 0,this.axis=void 0,this.labelRotation=void 0,this.min=void 0,this.max=void 0,this._range=void 0,this.ticks=[],this._gridLineItems=null,this._labelItems=null,this._labelSizes=null,this._length=0,this._maxLength=0,this._longestTextCache={},this._startPixel=void 0,this._endPixel=void 0,this._reversePixels=!1,this._userMax=void 0,this._userMin=void 0,this._suggestedMax=void 0,this._suggestedMin=void 0,this._ticksLength=0,this._borderValue=0,this._cache={},this._dataLimitsCached=!1,this.$context=void 0}init(t){this.options=t.setContext(this.getContext()),this.axis=t.axis,this._userMin=this.parse(t.min),this._userMax=this.parse(t.max),this._suggestedMin=this.parse(t.suggestedMin),this._suggestedMax=this.parse(t.suggestedMax)}parse(t,e){return t}getUserBounds(){let{_userMin:t,_userMax:e,_suggestedMin:i,_suggestedMax:s}=this;return t=k(t,Number.POSITIVE_INFINITY),e=k(e,Number.NEGATIVE_INFINITY),i=k(i,Number.POSITIVE_INFINITY),s=k(s,Number.NEGATIVE_INFINITY),{min:k(t,i),max:k(e,s),minDefined:A(t),maxDefined:A(e)}}getMinMax(t){let e,{min:i,max:s,minDefined:n,maxDefined:o}=this.getUserBounds();if(n&&o)return{min:i,max:s};const a=this.getMatchingVisibleMetas();for(let r=0,h=a.length;r<h;++r)e=a[r].controller.getMinMax(this,t),n||(i=Math.min(i,e.min)),o||(s=Math.max(s,e.max));return i=o&&i>s?s:i,s=n&&i>s?i:s,{min:k(i,k(s,i)),max:k(s,k(i,s))}}getPadding(){return{left:this.paddingLeft||0,top:this.paddingTop||0,right:this.paddingRight||0,bottom:this.paddingBottom||0}}getTicks(){return this.ticks}getLabels(){const t=this.chart.data;return this.options.labels||(this.isHorizontal()?t.xLabels:t.yLabels)||t.labels||[]}beforeLayout(){this._cache={},this._dataLimitsCached=!1}beforeUpdate(){D(this.options.beforeUpdate,[this])}update(t,e,i){const{beginAtZero:s,grace:n,ticks:o}=this.options,a=o.sampleSize;this.beforeUpdate(),this.maxWidth=t,this.maxHeight=e,this._margins=i=Object.assign({left:0,right:0,top:0,bottom:0},i),this.ticks=null,this._labelSizes=null,this._gridLineItems=null,this._labelItems=null,this.beforeSetDimensions(),this.setDimensions(),this.afterSetDimensions(),this._maxLength=this.isHorizontal()?this.width+i.left+i.right:this.height+i.top+i.bottom,this._dataLimitsCached||(this.beforeDataLimits(),this.determineDataLimits(),this.afterDataLimits(),this._range=function(t,e,i){const{min:s,max:n}=t,o=S(e,(n-s)/2),a=(t,e)=>i&&0===t?0:t+e;return{min:a(s,-Math.abs(o)),max:a(n,o)}}(this,n,s),this._dataLimitsCached=!0),this.beforeBuildTicks(),this.ticks=this.buildTicks()||[],this.afterBuildTicks();const r=a<this.ticks.length;this._convertTicksToLabels(r?Hs(this.ticks,a):this.ticks),this.configure(),this.beforeCalculateLabelRotation(),this.calculateLabelRotation(),this.afterCalculateLabelRotation(),o.display&&(o.autoSkip||"auto"===o.source)&&(this.ticks=function(t,e){const i=t.options.ticks,s=i.maxTicksLimit||function(t){const e=t.options.offset,i=t._tickSize(),s=t._length/i+(e?0:1),n=t._maxLength/i;return Math.floor(Math.min(s,n))}(t),n=i.major.enabled?function(t){const e=[];let i,s;for(i=0,s=t.length;i<s;i++)t[i].major&&e.push(i);return e}(e):[],o=n.length,a=n[0],r=n[o-1],h=[];if(o>s)return function(t,e,i,s){let n,o=0,a=i[0];for(s=Math.ceil(s),n=0;n<t.length;n++)n===a&&(e.push(t[n]),o++,a=i[o*s])}(e,h,n,o/s),h;const l=function(t,e,i){const s=function(t){const e=t.length;let i,s;if(e<2)return!1;for(s=t[0],i=1;i<e;++i)if(t[i]-t[i-1]!==s)return!1;return s}(t),n=e.length/i;if(!s)return Math.max(n,1);const o=function(t){const e=[],i=Math.sqrt(t);let s;for(s=1;s<i;s++)t%s==0&&(e.push(s),e.push(t/s));return i===(0|i)&&e.push(i),e.sort(((t,e)=>t-e)).pop(),e}(s);for(let t=0,e=o.length-1;t<e;t++){const e=o[t];if(e>n)return e}return Math.max(n,1)}(n,e,s);if(o>0){let t,i;const s=o>1?Math.round((r-a)/(o-1)):null;for(js(e,h,l,v(s)?0:a-s,a),t=0,i=o-1;t<i;t++)js(e,h,l,n[t],n[t+1]);return js(e,h,l,r,v(s)?e.length:r+s),h}return js(e,h,l),h}(this,this.ticks),this._labelSizes=null),r&&this._convertTicksToLabels(this.ticks),this.beforeFit(),this.fit(),this.afterFit(),this.afterUpdate()}configure(){let t,e,i=this.options.reverse;this.isHorizontal()?(t=this.left,e=this.right):(t=this.top,e=this.bottom,i=!i),this._startPixel=t,this._endPixel=e,this._reversePixels=i,this._length=e-t,this._alignToPixels=this.options.alignToPixels}afterUpdate(){D(this.options.afterUpdate,[this])}beforeSetDimensions(){D(this.options.beforeSetDimensions,[this])}setDimensions(){this.isHorizontal()?(this.width=this.maxWidth,this.left=0,this.right=this.width):(this.height=this.maxHeight,this.top=0,this.bottom=this.height),this.paddingLeft=0,this.paddingTop=0,this.paddingRight=0,this.paddingBottom=0}afterSetDimensions(){D(this.options.afterSetDimensions,[this])}_callHooks(t){this.chart.notifyPlugins(t,this.getContext()),D(this.options[t],[this])}beforeDataLimits(){this._callHooks("beforeDataLimits")}determineDataLimits(){}afterDataLimits(){this._callHooks("afterDataLimits")}beforeBuildTicks(){this._callHooks("beforeBuildTicks")}buildTicks(){return[]}afterBuildTicks(){this._callHooks("afterBuildTicks")}beforeTickToLabelConversion(){D(this.options.beforeTickToLabelConversion,[this])}generateTickLabels(t){const e=this.options.ticks;let i,s,n;for(i=0,s=t.length;i<s;i++)n=t[i],n.label=D(e.callback,[n.value,i,t],this)}afterTickToLabelConversion(){D(this.options.afterTickToLabelConversion,[this])}beforeCalculateLabelRotation(){D(this.options.beforeCalculateLabelRotation,[this])}calculateLabelRotation(){const t=this.options,e=t.ticks,i=this.ticks.length,s=e.minRotation||0,n=e.maxRotation;let o,a,r,h=s;if(!this._isVisible()||!e.display||s>=n||i<=1||!this.isHorizontal())return void(this.labelRotation=s);const l=this._getLabelSizes(),c=l.widest.width,d=l.highest.height,u=dt(this.chart.width-c,0,this.maxWidth);o=t.offset?this.maxWidth/i:u/(i-1),c+6>o&&(o=u/(i-(t.offset?.5:1)),a=this.maxHeight-Ys(t.grid)-e.padding-Us(t.title,this.chart.options.font),r=Math.sqrt(c*c+d*d),h=nt(Math.min(Math.asin(dt((l.highest.height+6)/o,-1,1)),Math.asin(dt(a/r,-1,1))-Math.asin(dt(d/r,-1,1)))),h=Math.max(s,Math.min(n,h))),this.labelRotation=h}afterCalculateLabelRotation(){D(this.options.afterCalculateLabelRotation,[this])}beforeFit(){D(this.options.beforeFit,[this])}fit(){const t={width:0,height:0},{chart:e,options:{ticks:i,title:s,grid:n}}=this,o=this._isVisible(),a=this.isHorizontal();if(o){const o=Us(s,e.options.font);if(a?(t.width=this.maxWidth,t.height=Ys(n)+o):(t.height=this.maxHeight,t.width=Ys(n)+o),i.display&&this.ticks.length){const{first:e,last:s,widest:n,highest:o}=this._getLabelSizes(),r=2*i.padding,h=st(this.labelRotation),l=Math.cos(h),c=Math.sin(h);if(a){const e=i.mirror?0:c*n.width+l*o.height;t.height=Math.min(this.maxHeight,t.height+e+r)}else{const e=i.mirror?0:l*n.width+c*o.height;t.width=Math.min(this.maxWidth,t.width+e+r)}this._calculatePadding(e,s,c,l)}}this._handleMargins(),a?(this.width=this._length=e.width-this._margins.left-this._margins.right,this.height=t.height):(this.width=t.width,this.height=this._length=e.height-this._margins.top-this._margins.bottom)}_calculatePadding(t,e,i,s){const{ticks:{align:n,padding:o},position:a}=this.options,r=0!==this.labelRotation,h="top"!==a&&"x"===this.axis;if(this.isHorizontal()){const a=this.getPixelForTick(0)-this.left,l=this.right-this.getPixelForTick(this.ticks.length-1);let c=0,d=0;r?h?(c=s*t.width,d=i*e.height):(c=i*t.height,d=s*e.width):"start"===n?d=e.width:"end"===n?c=t.width:(c=t.width/2,d=e.width/2),this.paddingLeft=Math.max((c-a+o)*this.width/(this.width-a),0),this.paddingRight=Math.max((d-l+o)*this.width/(this.width-l),0)}else{let i=e.height/2,s=t.height/2;"start"===n?(i=0,s=t.height):"end"===n&&(i=e.height,s=0),this.paddingTop=i+o,this.paddingBottom=s+o}}_handleMargins(){this._margins&&(this._margins.left=Math.max(this.paddingLeft,this._margins.left),this._margins.top=Math.max(this.paddingTop,this._margins.top),this._margins.right=Math.max(this.paddingRight,this._margins.right),this._margins.bottom=Math.max(this.paddingBottom,this._margins.bottom))}afterFit(){D(this.options.afterFit,[this])}isHorizontal(){const{axis:t,position:e}=this.options;return"top"===e||"bottom"===e||"x"===t}isFullSize(){return this.options.fullSize}_convertTicksToLabels(t){let e,i;for(this.beforeTickToLabelConversion(),this.generateTickLabels(t),e=0,i=t.length;e<i;e++)v(t[e].label)&&(t.splice(e,1),i--,e--);this.afterTickToLabelConversion()}_getLabelSizes(){let t=this._labelSizes;if(!t){const e=this.options.ticks.sampleSize;let i=this.ticks;e<i.length&&(i=Hs(i,e)),this._labelSizes=t=this._computeLabelSizes(i,i.length)}return t}_computeLabelSizes(t,e){const{ctx:i,_longestTextCache:s}=this,n=[],o=[];let a,r,h,l,c,d,u,p,g,f,m,b=0,x=0;for(a=0;a<e;++a){if(l=t[a].label,c=this._resolveTickFontOptions(a),i.font=d=c.string,u=s[d]=s[d]||{data:{},gc:[]},p=c.lineHeight,g=f=0,v(l)||w(l)){if(w(l))for(r=0,h=l.length;r<h;++r)m=l[r],v(m)||w(m)||(g=te(i,u.data,u.gc,g,m),f+=p)}else g=te(i,u.data,u.gc,g,l),f=p;n.push(g),o.push(f),b=Math.max(g,b),x=Math.max(f,x)}!function(t,e){P(t,(t=>{const i=t.gc,s=i.length/2;let n;if(s>e){for(n=0;n<s;++n)delete t.data[i[n]];i.splice(0,s)}}))}(s,e);const _=n.indexOf(b),y=o.indexOf(x),M=t=>({width:n[t]||0,height:o[t]||0});return{first:M(0),last:M(e-1),widest:M(_),highest:M(y),widths:n,heights:o}}getLabelForValue(t){return t}getPixelForValue(t,e){return NaN}getValueForPixel(t){}getPixelForTick(t){const e=this.ticks;return t<0||t>e.length-1?null:this.getPixelForValue(e[t].value)}getPixelForDecimal(t){this._reversePixels&&(t=1-t);const e=this._startPixel+t*this._length;return dt(this._alignToPixels?ie(this.chart,e,0):e,-32768,32767)}getDecimalForPixel(t){const e=(t-this._startPixel)/this._length;return this._reversePixels?1-e:e}getBasePixel(){return this.getPixelForValue(this.getBaseValue())}getBaseValue(){const{min:t,max:e}=this;return t<0&&e<0?e:t>0&&e>0?t:0}getContext(t){const e=this.ticks||[];if(t>=0&&t<e.length){const i=e[t];return i.$context||(i.$context=function(t,e,i){return we(t,{tick:i,index:e,type:"tick"})}(this.getContext(),t,i))}return this.$context||(this.$context=we(this.chart.getContext(),{scale:this,type:"scale"}))}_tickSize(){const t=this.options.ticks,e=st(this.labelRotation),i=Math.abs(Math.cos(e)),s=Math.abs(Math.sin(e)),n=this._getLabelSizes(),o=t.autoSkipPadding||0,a=n?n.widest.width+o:0,r=n?n.highest.height+o:0;return this.isHorizontal()?r*i>a*s?a/i:r/s:r*s<a*i?r/i:a/s}_isVisible(){const t=this.options.display;return"auto"!==t?!!t:this.getMatchingVisibleMetas().length>0}_computeGridLineItems(t){const e=this.axis,i=this.chart,s=this.options,{grid:n,position:o}=s,a=n.offset,r=this.isHorizontal(),h=this.ticks.length+(a?1:0),l=Ys(n),c=[],d=n.setContext(this.getContext()),u=d.drawBorder?d.borderWidth:0,p=u/2,g=function(t){return ie(i,t,u)};let f,m,b,x,_,y,v,w,A,k,S,D;if("top"===o)f=g(this.bottom),y=this.bottom-l,w=f-p,k=g(t.top)+p,D=t.bottom;else if("bottom"===o)f=g(this.top),k=t.top,D=g(t.bottom)-p,y=f+p,w=this.top+l;else if("left"===o)f=g(this.right),_=this.right-l,v=f-p,A=g(t.left)+p,S=t.right;else if("right"===o)f=g(this.left),A=t.left,S=g(t.right)-p,_=f+p,v=this.left+l;else if("x"===e){if("center"===o)f=g((t.top+t.bottom)/2+.5);else if(M(o)){const t=Object.keys(o)[0],e=o[t];f=g(this.chart.scales[t].getPixelForValue(e))}k=t.top,D=t.bottom,y=f+p,w=y+l}else if("y"===e){if("center"===o)f=g((t.left+t.right)/2);else if(M(o)){const t=Object.keys(o)[0],e=o[t];f=g(this.chart.scales[t].getPixelForValue(e))}_=f-p,v=_-l,A=t.left,S=t.right}const P=C(s.ticks.maxTicksLimit,h),E=Math.max(1,Math.ceil(h/P));for(m=0;m<h;m+=E){const t=n.setContext(this.getContext(m)),e=t.lineWidth,s=t.color,o=n.borderDash||[],h=t.borderDashOffset,l=t.tickWidth,d=t.tickColor,u=t.tickBorderDash||[],p=t.tickBorderDashOffset;b=$s(this,m,a),void 0!==b&&(x=ie(i,b,e),r?_=v=A=S=x:y=w=k=D=x,c.push({tx1:_,ty1:y,tx2:v,ty2:w,x1:A,y1:k,x2:S,y2:D,width:e,color:s,borderDash:o,borderDashOffset:h,tickWidth:l,tickColor:d,tickBorderDash:u,tickBorderDashOffset:p}))}return this._ticksLength=h,this._borderValue=f,c}_computeLabelItems(t){const e=this.axis,i=this.options,{position:s,ticks:n}=i,o=this.isHorizontal(),a=this.ticks,{align:r,crossAlign:h,padding:l,mirror:c}=n,d=Ys(i.grid),u=d+l,p=c?-l:u,g=-st(this.labelRotation),f=[];let m,b,x,_,y,v,A,k,C,S,D,P,E="middle";if("top"===s)v=this.bottom-p,A=this._getXAxisLabelAlignment();else if("bottom"===s)v=this.top+p,A=this._getXAxisLabelAlignment();else if("left"===s){const t=this._getYAxisLabelAlignment(d);A=t.textAlign,y=t.x}else if("right"===s){const t=this._getYAxisLabelAlignment(d);A=t.textAlign,y=t.x}else if("x"===e){if("center"===s)v=(t.top+t.bottom)/2+u;else if(M(s)){const t=Object.keys(s)[0],e=s[t];v=this.chart.scales[t].getPixelForValue(e)+u}A=this._getXAxisLabelAlignment()}else if("y"===e){if("center"===s)y=(t.left+t.right)/2-u;else if(M(s)){const t=Object.keys(s)[0],e=s[t];y=this.chart.scales[t].getPixelForValue(e)}A=this._getYAxisLabelAlignment(d).textAlign}"y"===e&&("start"===r?E="top":"end"===r&&(E="bottom"));const O=this._getLabelSizes();for(m=0,b=a.length;m<b;++m){x=a[m],_=x.label;const t=n.setContext(this.getContext(m));k=this.getPixelForTick(m)+n.labelOffset,C=this._resolveTickFontOptions(m),S=C.lineHeight,D=w(_)?_.length:1;const e=D/2,i=t.color,r=t.textStrokeColor,l=t.textStrokeWidth;let d;if(o?(y=k,P="top"===s?"near"===h||0!==g?-D*S+S/2:"center"===h?-O.highest.height/2-e*S+S:-O.highest.height+S/2:"near"===h||0!==g?S/2:"center"===h?O.highest.height/2-e*S:O.highest.height-D*S,c&&(P*=-1)):(v=k,P=(1-D)*S/2),t.showLabelBackdrop){const e=_e(t.backdropPadding),i=O.heights[m],s=O.widths[m];let n=v+P-e.top,o=y-e.left;switch(E){case"middle":n-=i/2;break;case"bottom":n-=i}switch(A){case"center":o-=s/2;break;case"right":o-=s}d={left:o,top:n,width:s+e.width,height:i+e.height,color:t.backdropColor}}f.push({rotation:g,label:_,font:C,color:i,strokeColor:r,strokeWidth:l,textOffset:P,textAlign:A,textBaseline:E,translation:[y,v],backdrop:d})}return f}_getXAxisLabelAlignment(){const{position:t,ticks:e}=this.options;if(-st(this.labelRotation))return"top"===t?"left":"right";let i="center";return"start"===e.align?i="left":"end"===e.align&&(i="right"),i}_getYAxisLabelAlignment(t){const{position:e,ticks:{crossAlign:i,mirror:s,padding:n}}=this.options,o=t+n,a=this._getLabelSizes().widest.width;let r,h;return"left"===e?s?(h=this.right+n,"near"===i?r="left":"center"===i?(r="center",h+=a/2):(r="right",h+=a)):(h=this.right-o,"near"===i?r="right":"center"===i?(r="center",h-=a/2):(r="left",h=this.left)):"right"===e?s?(h=this.left+n,"near"===i?r="right":"center"===i?(r="center",h-=a/2):(r="left",h-=a)):(h=this.left+o,"near"===i?r="left":"center"===i?(r="center",h+=a/2):(r="right",h=this.right)):r="right",{textAlign:r,x:h}}_computeLabelArea(){if(this.options.ticks.mirror)return;const t=this.chart,e=this.options.position;return"left"===e||"right"===e?{top:0,left:this.left,bottom:t.height,right:this.right}:"top"===e||"bottom"===e?{top:this.top,left:0,bottom:this.bottom,right:t.width}:void 0}drawBackground(){const{ctx:t,options:{backgroundColor:e},left:i,top:s,width:n,height:o}=this;e&&(t.save(),t.fillStyle=e,t.fillRect(i,s,n,o),t.restore())}getLineWidthForValue(t){const e=this.options.grid;if(!this._isVisible()||!e.display)return 0;const i=this.ticks.findIndex((e=>e.value===t));return i>=0?e.setContext(this.getContext(i)).lineWidth:0}drawGrid(t){const e=this.options.grid,i=this.ctx,s=this._gridLineItems||(this._gridLineItems=this._computeGridLineItems(t));let n,o;const a=(t,e,s)=>{s.width&&s.color&&(i.save(),i.lineWidth=s.width,i.strokeStyle=s.color,i.setLineDash(s.borderDash||[]),i.lineDashOffset=s.borderDashOffset,i.beginPath(),i.moveTo(t.x,t.y),i.lineTo(e.x,e.y),i.stroke(),i.restore())};if(e.display)for(n=0,o=s.length;n<o;++n){const t=s[n];e.drawOnChartArea&&a({x:t.x1,y:t.y1},{x:t.x2,y:t.y2},t),e.drawTicks&&a({x:t.tx1,y:t.ty1},{x:t.tx2,y:t.ty2},{color:t.tickColor,width:t.tickWidth,borderDash:t.tickBorderDash,borderDashOffset:t.tickBorderDashOffset})}}drawBorder(){const{chart:t,ctx:e,options:{grid:i}}=this,s=i.setContext(this.getContext()),n=i.drawBorder?s.borderWidth:0;if(!n)return;const o=i.setContext(this.getContext(0)).lineWidth,a=this._borderValue;let r,h,l,c;this.isHorizontal()?(r=ie(t,this.left,n)-n/2,h=ie(t,this.right,o)+o/2,l=c=a):(l=ie(t,this.top,n)-n/2,c=ie(t,this.bottom,o)+o/2,r=h=a),e.save(),e.lineWidth=s.borderWidth,e.strokeStyle=s.borderColor,e.beginPath(),e.moveTo(r,l),e.lineTo(h,c),e.stroke(),e.restore()}drawLabels(t){if(!this.options.ticks.display)return;const e=this.ctx,i=this._computeLabelArea();i&&ae(e,i);const s=this._labelItems||(this._labelItems=this._computeLabelItems(t));let n,o;for(n=0,o=s.length;n<o;++n){const t=s[n],i=t.font,o=t.label;t.backdrop&&(e.fillStyle=t.backdrop.color,e.fillRect(t.backdrop.left,t.backdrop.top,t.backdrop.width,t.backdrop.height)),ce(e,o,0,t.textOffset,i,t)}i&&re(e)}drawTitle(){const{ctx:t,options:{position:e,title:i,reverse:s}}=this;if(!i.display)return;const n=ye(i.font),o=_e(i.padding),a=i.align;let r=n.lineHeight/2;"bottom"===e||"center"===e||M(e)?(r+=o.bottom,w(i.text)&&(r+=n.lineHeight*(i.text.length-1))):r+=o.top;const{titleX:h,titleY:l,maxWidth:c,rotation:d}=function(t,e,i,s){const{top:n,left:o,bottom:a,right:r,chart:h}=t,{chartArea:l,scales:c}=h;let d,u,p,g=0;const f=a-n,m=r-o;if(t.isHorizontal()){if(u=x(s,o,r),M(i)){const t=Object.keys(i)[0],s=i[t];p=c[t].getPixelForValue(s)+f-e}else p="center"===i?(l.bottom+l.top)/2+f-e:Ns(t,i,e);d=r-o}else{if(M(i)){const t=Object.keys(i)[0],s=i[t];u=c[t].getPixelForValue(s)-m+e}else u="center"===i?(l.left+l.right)/2-m+e:Ns(t,i,e);p=x(s,a,n),g="left"===i?-q:q}return{titleX:u,titleY:p,maxWidth:d,rotation:g}}(this,r,e,a);ce(t,i.text,0,0,n,{color:i.color,maxWidth:c,rotation:d,textAlign:Xs(a,e,s),textBaseline:"middle",translation:[h,l]})}draw(t){this._isVisible()&&(this.drawBackground(),this.drawGrid(t),this.drawBorder(),this.drawTitle(),this.drawLabels(t))}_layers(){const t=this.options,e=t.ticks&&t.ticks.z||0,i=C(t.grid&&t.grid.z,-1);return this._isVisible()&&this.draw===qs.prototype.draw?[{z:i,draw:t=>{this.drawBackground(),this.drawGrid(t),this.drawTitle()}},{z:i+1,draw:()=>{this.drawBorder()}},{z:e,draw:t=>{this.drawLabels(t)}}]:[{z:e,draw:t=>{this.draw(t)}}]}getMatchingVisibleMetas(t){const e=this.chart.getSortedVisibleDatasetMetas(),i=this.axis+"AxisID",s=[];let n,o;for(n=0,o=e.length;n<o;++n){const o=e[n];o[i]!==this.id||t&&o.type!==t||s.push(o)}return s}_resolveTickFontOptions(t){return ye(this.options.ticks.setContext(this.getContext(t)).font)}_maxDigits(){const t=this._resolveTickFontOptions(0).lineHeight;return(this.isHorizontal()?this.width:this.height)/t}}class Ks{constructor(t,e,i){this.type=t,this.scope=e,this.override=i,this.items=Object.create(null)}isForType(t){return Object.prototype.isPrototypeOf.call(this.type.prototype,t.prototype)}register(t){const e=Object.getPrototypeOf(t);let i;(function(t){return"id"in t&&"defaults"in t})(e)&&(i=this.register(e));const s=this.items,n=t.id,o=this.scope+"."+n;if(!n)throw new Error("class does not have id: "+t);return n in s||(s[n]=t,function(t,e,i){const s=R(Object.create(null),[i?Qt.get(i):{},Qt.get(e),t.defaults]);Qt.set(e,s),t.defaultRoutes&&function(t,e){Object.keys(e).forEach((i=>{const s=i.split("."),n=s.pop(),o=[t].concat(s).join("."),a=e[i].split("."),r=a.pop(),h=a.join(".");Qt.route(o,n,h,r)}))}(e,t.defaultRoutes),t.descriptors&&Qt.describe(e,t.descriptors)}(t,o,i),this.override&&Qt.override(t.id,t.overrides)),o}get(t){return this.items[t]}unregister(t){const e=this.items,i=t.id,s=this.scope;i in e&&delete e[i],s&&i in Qt[s]&&(delete Qt[s][i],this.override&&delete Kt[i])}}var Zs=new class{constructor(){this.controllers=new Ks(Bi,"datasets",!0),this.elements=new Ks(Fs,"elements"),this.plugins=new Ks(Object,"plugins"),this.scales=new Ks(qs,"scales"),this._typedRegistries=[this.controllers,this.scales,this.elements]}add(...t){this._each("register",t)}remove(...t){this._each("unregister",t)}addControllers(...t){this._each("register",t,this.controllers)}addElements(...t){this._each("register",t,this.elements)}addPlugins(...t){this._each("register",t,this.plugins)}addScales(...t){this._each("register",t,this.scales)}getController(t){return this._get(t,this.controllers,"controller")}getElement(t){return this._get(t,this.elements,"element")}getPlugin(t){return this._get(t,this.plugins,"plugin")}getScale(t){return this._get(t,this.scales,"scale")}removeControllers(...t){this._each("unregister",t,this.controllers)}removeElements(...t){this._each("unregister",t,this.elements)}removePlugins(...t){this._each("unregister",t,this.plugins)}removeScales(...t){this._each("unregister",t,this.scales)}_each(t,e,i){[...e].forEach((e=>{const s=i||this._getRegistryForType(e);i||s.isForType(e)||s===this.plugins&&e.id?this._exec(t,s,e):P(e,(e=>{const s=i||this._getRegistryForType(e);this._exec(t,s,e)}))}))}_exec(t,e,i){const s=V(t);D(i["before"+s],[],i),e[t](i),D(i["after"+s],[],i)}_getRegistryForType(t){for(let e=0;e<this._typedRegistries.length;e++){const i=this._typedRegistries[e];if(i.isForType(t))return i}return this.plugins}_get(t,e,i){const s=e.get(t);if(void 0===s)throw new Error('"'+t+'" is not a registered '+i+".");return s}};class Gs{constructor(){this._init=[]}notify(t,e,i,s){"beforeInit"===e&&(this._init=this._createDescriptors(t,!0),this._notify(this._init,t,"install"));const n=s?this._descriptors(t).filter(s):this._descriptors(t),o=this._notify(n,t,e,i);return"afterDestroy"===e&&(this._notify(n,t,"stop"),this._notify(this._init,t,"uninstall")),o}_notify(t,e,i,s){s=s||{};for(const n of t){const t=n.plugin;if(!1===D(t[i],[e,s,n.options],t)&&s.cancelable)return!1}return!0}invalidate(){v(this._cache)||(this._oldCache=this._cache,this._cache=void 0)}_descriptors(t){if(this._cache)return this._cache;const e=this._cache=this._createDescriptors(t);return this._notifyStateChanges(t),e}_createDescriptors(t,e){const i=t&&t.config,s=C(i.options&&i.options.plugins,{}),n=function(t){const e=[],i=Object.keys(Zs.plugins.items);for(let t=0;t<i.length;t++)e.push(Zs.getPlugin(i[t]));const s=t.plugins||[];for(let t=0;t<s.length;t++){const i=s[t];-1===e.indexOf(i)&&e.push(i)}return e}(i);return!1!==s||e?function(t,e,i,s){const n=[],o=t.getContext();for(let a=0;a<e.length;a++){const r=e[a],h=Js(i[r.id],s);null!==h&&n.push({plugin:r,options:Qs(t.config,r,h,o)})}return n}(t,n,s,e):[]}_notifyStateChanges(t){const e=this._oldCache||[],i=this._cache,s=(t,e)=>t.filter((t=>!e.some((e=>t.plugin.id===e.plugin.id))));this._notify(s(e,i),t,"stop"),this._notify(s(i,e),t,"start")}}function Js(t,e){return e||!1!==t?!0===t?{}:t:null}function Qs(t,e,i,s){const n=t.pluginScopeKeys(e),o=t.getOptionScopes(i,n);return t.createResolver(o,s,[""],{scriptable:!1,indexable:!1,allKeys:!0})}function tn(t,e){const i=Qt.datasets[t]||{};return((e.datasets||{})[t]||{}).indexAxis||e.indexAxis||i.indexAxis||"x"}function en(t,e){return"x"===t||"y"===t?t:e.axis||("top"===(i=e.position)||"bottom"===i?"x":"left"===i||"right"===i?"y":void 0)||t.charAt(0).toLowerCase();var i}function sn(t){const e=t.options||(t.options={});e.plugins=C(e.plugins,{}),e.scales=function(t,e){const i=Kt[t.type]||{scales:{}},s=e.scales||{},n=tn(t.type,e),o=Object.create(null),a=Object.create(null);return Object.keys(s).forEach((t=>{const e=s[t];if(!M(e))return console.error(`Invalid scale configuration for scale: ${t}`);if(e._proxy)return console.warn(`Ignoring resolver passed as options for scale: ${t}`);const r=en(t,e),h=function(t,e){return t===e?"_index_":"_value_"}(r,n),l=i.scales||{};o[r]=o[r]||t,a[t]=I(Object.create(null),[{axis:r},e,l[r],l[h]])})),t.data.datasets.forEach((i=>{const n=i.type||t.type,r=i.indexAxis||tn(n,e),h=(Kt[n]||{}).scales||{};Object.keys(h).forEach((t=>{const e=function(t,e){let i=t;return"_index_"===t?i=e:"_value_"===t&&(i="x"===e?"y":"x"),i}(t,r),n=i[e+"AxisID"]||o[e]||e;a[n]=a[n]||Object.create(null),I(a[n],[{axis:e},s[n],h[t]])}))})),Object.keys(a).forEach((t=>{const e=a[t];I(e,[Qt.scales[e.type],Qt.scale])})),a}(t,e)}function nn(t){return(t=t||{}).datasets=t.datasets||[],t.labels=t.labels||[],t}const on=new Map,an=new Set;function rn(t,e){let i=on.get(t);return i||(i=e(),on.set(t,i),an.add(i)),i}const hn=(t,e,i)=>{const s=F(e,i);void 0!==s&&t.add(s)};class ln{constructor(t){this._config=function(t){return(t=t||{}).data=nn(t.data),sn(t),t}(t),this._scopeCache=new Map,this._resolverCache=new Map}get platform(){return this._config.platform}get type(){return this._config.type}set type(t){this._config.type=t}get data(){return this._config.data}set data(t){this._config.data=nn(t)}get options(){return this._config.options}set options(t){this._config.options=t}get plugins(){return this._config.plugins}update(){const t=this._config;this.clearCache(),sn(t)}clearCache(){this._scopeCache.clear(),this._resolverCache.clear()}datasetScopeKeys(t){return rn(t,(()=>[[`datasets.${t}`,""]]))}datasetAnimationScopeKeys(t,e){return rn(`${t}.transition.${e}`,(()=>[[`datasets.${t}.transitions.${e}`,`transitions.${e}`],[`datasets.${t}`,""]]))}datasetElementScopeKeys(t,e){return rn(`${t}-${e}`,(()=>[[`datasets.${t}.elements.${e}`,`datasets.${t}`,`elements.${e}`,""]]))}pluginScopeKeys(t){const e=t.id;return rn(`${this.type}-plugin-${e}`,(()=>[[`plugins.${e}`,...t.additionalOptionScopes||[]]]))}_cachedScopes(t,e){const i=this._scopeCache;let s=i.get(t);return s&&!e||(s=new Map,i.set(t,s)),s}getOptionScopes(t,e,i){const{options:s,type:n}=this,o=this._cachedScopes(t,i),a=o.get(e);if(a)return a;const r=new Set;e.forEach((e=>{t&&(r.add(t),e.forEach((e=>hn(r,t,e)))),e.forEach((t=>hn(r,s,t))),e.forEach((t=>hn(r,Kt[n]||{},t))),e.forEach((t=>hn(r,Qt,t))),e.forEach((t=>hn(r,Zt,t)))}));const h=Array.from(r);return 0===h.length&&h.push(Object.create(null)),an.has(e)&&o.set(e,h),h}chartOptionScopes(){const{options:t,type:e}=this;return[t,Kt[e]||{},Qt.datasets[e]||{},{type:e},Qt,Zt]}resolveNamedOptions(t,e,i,s=[""]){const n={$shared:!0},{resolver:o,subPrefixes:a}=cn(this._resolverCache,t,s);let r=o;(function(t,e){const{isScriptable:i,isIndexable:s}=Oe(t);for(const n of e){const e=i(n),o=s(n),a=(o||e)&&t[n];if(e&&(j(a)||dn(a))||o&&w(a))return!0}return!1})(o,e)&&(n.$shared=!1,r=Ee(o,i=j(i)?i():i,this.createResolver(t,i,a)));for(const t of e)n[t]=r[t];return n}createResolver(t,e,i=[""],s){const{resolver:n}=cn(this._resolverCache,t,i);return M(e)?Ee(n,e,void 0,s):n}}function cn(t,e,i){let s=t.get(e);s||(s=new Map,t.set(e,s));const n=i.join();let o=s.get(n);return o||(o={resolver:Pe(e,i),subPrefixes:i.filter((t=>!t.toLowerCase().includes("hover")))},s.set(n,o)),o}const dn=t=>M(t)&&Object.getOwnPropertyNames(t).reduce(((e,i)=>e||j(t[i])),!1),un=["top","bottom","left","right","chartArea"];function pn(t,e){return"top"===t||"bottom"===t||-1===un.indexOf(t)&&"x"===e}function gn(t,e){return function(i,s){return i[t]===s[t]?i[e]-s[e]:i[t]-s[t]}}function fn(t){const e=t.chart,i=e.options.animation;e.notifyPlugins("afterRender"),D(i&&i.onComplete,[t],e)}function mn(t){const e=t.chart,i=e.options.animation;D(i&&i.onProgress,[t],e)}function bn(t){return qe()&&"string"==typeof t?t=document.getElementById(t):t&&t.length&&(t=t[0]),t&&t.canvas&&(t=t.canvas),t}const xn={},_n=t=>{const e=bn(t);return Object.values(xn).filter((t=>t.canvas===e)).pop()};function yn(t,e,i){const s=Object.keys(t);for(const n of s){const s=+n;if(s>=e){const o=t[n];delete t[n],(i>0||s>e)&&(t[s+i]=o)}}}class vn{constructor(t,e){const i=this.config=new ln(e),s=bn(t),n=_n(s);if(n)throw new Error("Canvas is already in use. Chart with ID '"+n.id+"' must be destroyed before the canvas can be reused.");const o=i.createResolver(i.chartOptionScopes(),this.getContext());this.platform=new(i.platform||function(t){return!qe()||"undefined"!=typeof OffscreenCanvas&&t instanceof OffscreenCanvas?Ms:zs}(s)),this.platform.updateConfig(i);const a=this.platform.acquireContext(s,o.aspectRatio),r=a&&a.canvas,h=r&&r.height,l=r&&r.width;this.id=y(),this.ctx=a,this.canvas=r,this.width=l,this.height=h,this._options=o,this._aspectRatio=this.aspectRatio,this._layers=[],this._metasets=[],this._stacks=void 0,this.boxes=[],this.currentDevicePixelRatio=void 0,this.chartArea=void 0,this._active=[],this._lastEvent=void 0,this._listeners={},this._responsiveListeners=void 0,this._sortedMetasets=[],this.scales={},this._plugins=new Gs,this.$proxies={},this._hiddenIndices={},this.attached=!1,this._animationsDisabled=void 0,this.$context=void 0,this._doResize=function(t,e){let i;return function(...s){return e?(clearTimeout(i),i=setTimeout(t,e,s)):t.apply(this,s),e}}((t=>this.update(t)),o.resizeDelay||0),this._dataChanges=[],xn[this.id]=this,a&&r?(_i.listen(this,"complete",fn),_i.listen(this,"progress",mn),this._initialize(),this.attached&&this.update()):console.error("Failed to create chart: can't acquire context from the given item")}get aspectRatio(){const{options:{aspectRatio:t,maintainAspectRatio:e},width:i,height:s,_aspectRatio:n}=this;return v(t)?e&&n?n:s?i/s:null:t}get data(){return this.config.data}set data(t){this.config.data=t}get options(){return this._options}set options(t){this.config.options=t}_initialize(){return this.notifyPlugins("beforeInit"),this.options.responsive?this.resize():ii(this,this.options.devicePixelRatio),this.bindEvents(),this.notifyPlugins("afterInit"),this}clear(){return se(this.canvas,this.ctx),this}stop(){return _i.stop(this),this}resize(t,e){_i.running(this)?this._resizeBeforeDraw={width:t,height:e}:this._resize(t,e)}_resize(t,e){const i=this.options,s=this.canvas,n=i.maintainAspectRatio&&this.aspectRatio,o=this.platform.getMaximumSize(s,t,e,n),a=i.devicePixelRatio||this.platform.getDevicePixelRatio(),r=this.width?"resize":"attach";this.width=o.width,this.height=o.height,this._aspectRatio=this.aspectRatio,ii(this,a,!0)&&(this.notifyPlugins("resize",{size:o}),D(i.onResize,[this,o],this),this.attached&&this._doResize(r)&&this.render())}ensureScalesHaveIDs(){P(this.options.scales||{},((t,e)=>{t.id=e}))}buildOrUpdateScales(){const t=this.options,e=t.scales,i=this.scales,s=Object.keys(i).reduce(((t,e)=>(t[e]=!1,t)),{});let n=[];e&&(n=n.concat(Object.keys(e).map((t=>{const i=e[t],s=en(t,i),n="r"===s,o="x"===s;return{options:i,dposition:n?"chartArea":o?"bottom":"left",dtype:n?"radialLinear":o?"category":"linear"}})))),P(n,(e=>{const n=e.options,o=n.id,a=en(o,n),r=C(n.type,e.dtype);void 0!==n.position&&pn(n.position,a)===pn(e.dposition)||(n.position=e.dposition),s[o]=!0;let h=null;o in i&&i[o].type===r?h=i[o]:(h=new(Zs.getScale(r))({id:o,type:r,ctx:this.ctx,chart:this}),i[h.id]=h),h.init(n,t)})),P(s,((t,e)=>{t||delete i[e]})),P(i,(t=>{vs.configure(this,t,t.options),vs.addBox(this,t)}))}_updateMetasets(){const t=this._metasets,e=this.data.datasets.length,i=t.length;if(t.sort(((t,e)=>t.index-e.index)),i>e){for(let t=e;t<i;++t)this._destroyDatasetMeta(t);t.splice(e,i-e)}this._sortedMetasets=t.slice(0).sort(gn("order","index"))}_removeUnreferencedMetasets(){const{_metasets:t,data:{datasets:e}}=this;t.length>e.length&&delete this._stacks,t.forEach(((t,i)=>{0===e.filter((e=>e===t._dataset)).length&&this._destroyDatasetMeta(i)}))}buildOrUpdateControllers(){const t=[],e=this.data.datasets;let i,s;for(this._removeUnreferencedMetasets(),i=0,s=e.length;i<s;i++){const s=e[i];let n=this.getDatasetMeta(i);const o=s.type||this.config.type;if(n.type&&n.type!==o&&(this._destroyDatasetMeta(i),n=this.getDatasetMeta(i)),n.type=o,n.indexAxis=s.indexAxis||tn(o,this.options),n.order=s.order||0,n.index=i,n.label=""+s.label,n.visible=this.isDatasetVisible(i),n.controller)n.controller.updateIndex(i),n.controller.linkScales();else{const e=Zs.getController(o),{datasetElementType:s,dataElementType:a}=Qt.datasets[o];Object.assign(e.prototype,{dataElementType:Zs.getElement(a),datasetElementType:s&&Zs.getElement(s)}),n.controller=new e(this,i),t.push(n.controller)}}return this._updateMetasets(),t}_resetElements(){P(this.data.datasets,((t,e)=>{this.getDatasetMeta(e).controller.reset()}),this)}reset(){this._resetElements(),this.notifyPlugins("reset")}update(t){const e=this.config;e.update();const i=this._options=e.createResolver(e.chartOptionScopes(),this.getContext()),s=this._animationsDisabled=!i.animation;if(this._updateScales(),this._checkEventBindings(),this._updateHiddenIndices(),this._plugins.invalidate(),!1===this.notifyPlugins("beforeUpdate",{mode:t,cancelable:!0}))return;const n=this.buildOrUpdateControllers();this.notifyPlugins("beforeElementsUpdate");let o=0;for(let t=0,e=this.data.datasets.length;t<e;t++){const{controller:e}=this.getDatasetMeta(t),i=!s&&-1===n.indexOf(e);e.buildOrUpdateElements(i),o=Math.max(+e.getMaxOverflow(),o)}o=this._minPadding=i.layout.autoPadding?o:0,this._updateLayout(o),s||P(n,(t=>{t.reset()})),this._updateDatasets(t),this.notifyPlugins("afterUpdate",{mode:t}),this._layers.sort(gn("z","_idx"));const{_active:a,_lastEvent:r}=this;r?this._eventHandler(r,!0):a.length&&this._updateHoverStyles(a,a,!0),this.render()}_updateScales(){P(this.scales,(t=>{vs.removeBox(this,t)})),this.ensureScalesHaveIDs(),this.buildOrUpdateScales()}_checkEventBindings(){const t=this.options,e=new Set(Object.keys(this._listeners)),i=new Set(t.events);N(e,i)&&!!this._responsiveListeners===t.responsive||(this.unbindEvents(),this.bindEvents())}_updateHiddenIndices(){const{_hiddenIndices:t}=this,e=this._getUniformDataChanges()||[];for(const{method:i,start:s,count:n}of e)yn(t,s,"_removeElements"===i?-n:n)}_getUniformDataChanges(){const t=this._dataChanges;if(!t||!t.length)return;this._dataChanges=[];const e=this.data.datasets.length,i=e=>new Set(t.filter((t=>t[0]===e)).map(((t,e)=>e+","+t.splice(1).join(",")))),s=i(0);for(let t=1;t<e;t++)if(!N(s,i(t)))return;return Array.from(s).map((t=>t.split(","))).map((t=>({method:t[1],start:+t[2],count:+t[3]})))}_updateLayout(t){if(!1===this.notifyPlugins("beforeLayout",{cancelable:!0}))return;vs.update(this,this.width,this.height,t);const e=this.chartArea,i=e.width<=0||e.height<=0;this._layers=[],P(this.boxes,(t=>{i&&"chartArea"===t.position||(t.configure&&t.configure(),this._layers.push(...t._layers()))}),this),this._layers.forEach(((t,e)=>{t._idx=e})),this.notifyPlugins("afterLayout")}_updateDatasets(t){if(!1!==this.notifyPlugins("beforeDatasetsUpdate",{mode:t,cancelable:!0})){for(let t=0,e=this.data.datasets.length;t<e;++t)this.getDatasetMeta(t).controller.configure();for(let e=0,i=this.data.datasets.length;e<i;++e)this._updateDataset(e,j(t)?t({datasetIndex:e}):t);this.notifyPlugins("afterDatasetsUpdate",{mode:t})}}_updateDataset(t,e){const i=this.getDatasetMeta(t),s={meta:i,index:t,mode:e,cancelable:!0};!1!==this.notifyPlugins("beforeDatasetUpdate",s)&&(i.controller._update(e),s.cancelable=!1,this.notifyPlugins("afterDatasetUpdate",s))}render(){!1!==this.notifyPlugins("beforeRender",{cancelable:!0})&&(_i.has(this)?this.attached&&!_i.running(this)&&_i.start(this):(this.draw(),fn({chart:this})))}draw(){let t;if(this._resizeBeforeDraw){const{width:t,height:e}=this._resizeBeforeDraw;this._resize(t,e),this._resizeBeforeDraw=null}if(this.clear(),this.width<=0||this.height<=0)return;if(!1===this.notifyPlugins("beforeDraw",{cancelable:!0}))return;const e=this._layers;for(t=0;t<e.length&&e[t].z<=0;++t)e[t].draw(this.chartArea);for(this._drawDatasets();t<e.length;++t)e[t].draw(this.chartArea);this.notifyPlugins("afterDraw")}_getSortedDatasetMetas(t){const e=this._sortedMetasets,i=[];let s,n;for(s=0,n=e.length;s<n;++s){const n=e[s];t&&!n.visible||i.push(n)}return i}getSortedVisibleDatasetMetas(){return this._getSortedDatasetMetas(!0)}_drawDatasets(){if(!1===this.notifyPlugins("beforeDatasetsDraw",{cancelable:!0}))return;const t=this.getSortedVisibleDatasetMetas();for(let e=t.length-1;e>=0;--e)this._drawDataset(t[e]);this.notifyPlugins("afterDatasetsDraw")}_drawDataset(t){const e=this.ctx,i=t._clip,s=!i.disabled,n=this.chartArea,o={meta:t,index:t.index,cancelable:!0};!1!==this.notifyPlugins("beforeDatasetDraw",o)&&(s&&ae(e,{left:!1===i.left?0:n.left-i.left,right:!1===i.right?this.width:n.right+i.right,top:!1===i.top?0:n.top-i.top,bottom:!1===i.bottom?this.height:n.bottom+i.bottom}),t.controller.draw(),s&&re(e),o.cancelable=!1,this.notifyPlugins("afterDatasetDraw",o))}getElementsAtEventForMode(t,e,i,s){const n=ls.modes[e];return"function"==typeof n?n(this,t,i,s):[]}getDatasetMeta(t){const e=this.data.datasets[t],i=this._metasets;let s=i.filter((t=>t&&t._dataset===e)).pop();return s||(s={type:null,data:[],dataset:null,controller:null,hidden:null,xAxisID:null,yAxisID:null,order:e&&e.order||0,index:t,_dataset:e,_parsed:[],_sorted:!1},i.push(s)),s}getContext(){return this.$context||(this.$context=we(null,{chart:this,type:"chart"}))}getVisibleDatasetCount(){return this.getSortedVisibleDatasetMetas().length}isDatasetVisible(t){const e=this.data.datasets[t];if(!e)return!1;const i=this.getDatasetMeta(t);return"boolean"==typeof i.hidden?!i.hidden:!e.hidden}setDatasetVisibility(t,e){this.getDatasetMeta(t).hidden=!e}toggleDataVisibility(t){this._hiddenIndices[t]=!this._hiddenIndices[t]}getDataVisibility(t){return!this._hiddenIndices[t]}_updateVisibility(t,e,i){const s=i?"show":"hide",n=this.getDatasetMeta(t),o=n.controller._resolveAnimations(void 0,s);W(e)?(n.data[e].hidden=!i,this.update()):(this.setDatasetVisibility(t,i),o.update(n,{visible:i}),this.update((e=>e.datasetIndex===t?s:void 0)))}hide(t,e){this._updateVisibility(t,e,!1)}show(t,e){this._updateVisibility(t,e,!0)}_destroyDatasetMeta(t){const e=this._metasets[t];e&&e.controller&&e.controller._destroy(),delete this._metasets[t]}_stop(){let t,e;for(this.stop(),_i.remove(this),t=0,e=this.data.datasets.length;t<e;++t)this._destroyDatasetMeta(t)}destroy(){this.notifyPlugins("beforeDestroy");const{canvas:t,ctx:e}=this;this._stop(),this.config.clearCache(),t&&(this.unbindEvents(),se(t,e),this.platform.releaseContext(e),this.canvas=null,this.ctx=null),this.notifyPlugins("destroy"),delete xn[this.id],this.notifyPlugins("afterDestroy")}toBase64Image(...t){return this.canvas.toDataURL(...t)}bindEvents(){this.bindUserEvents(),this.options.responsive?this.bindResponsiveEvents():this.attached=!0}bindUserEvents(){const t=this._listeners,e=this.platform,i=(i,s)=>{e.addEventListener(this,i,s),t[i]=s},s=(t,e,i)=>{t.offsetX=e,t.offsetY=i,this._eventHandler(t)};P(this.options.events,(t=>i(t,s)))}bindResponsiveEvents(){this._responsiveListeners||(this._responsiveListeners={});const t=this._responsiveListeners,e=this.platform,i=(i,s)=>{e.addEventListener(this,i,s),t[i]=s},s=(i,s)=>{t[i]&&(e.removeEventListener(this,i,s),delete t[i])},n=(t,e)=>{this.canvas&&this.resize(t,e)};let o;const a=()=>{s("attach",a),this.attached=!0,this.resize(),i("resize",n),i("detach",o)};o=()=>{this.attached=!1,s("resize",n),this._stop(),this._resize(0,0),i("attach",a)},e.isAttached(this.canvas)?a():o()}unbindEvents(){P(this._listeners,((t,e)=>{this.platform.removeEventListener(this,e,t)})),this._listeners={},P(this._responsiveListeners,((t,e)=>{this.platform.removeEventListener(this,e,t)})),this._responsiveListeners=void 0}updateHoverStyle(t,e,i){const s=i?"set":"remove";let n,o,a,r;for("dataset"===e&&(n=this.getDatasetMeta(t[0].datasetIndex),n.controller["_"+s+"DatasetHoverStyle"]()),a=0,r=t.length;a<r;++a){o=t[a];const e=o&&this.getDatasetMeta(o.datasetIndex).controller;e&&e[s+"HoverStyle"](o.element,o.datasetIndex,o.index)}}getActiveElements(){return this._active||[]}setActiveElements(t){const e=this._active||[],i=t.map((({datasetIndex:t,index:e})=>{const i=this.getDatasetMeta(t);if(!i)throw new Error("No dataset found at index "+t);return{datasetIndex:t,element:i.data[e],index:e}}));!E(i,e)&&(this._active=i,this._lastEvent=null,this._updateHoverStyles(i,e))}notifyPlugins(t,e,i){return this._plugins.notify(this,t,e,i)}_updateHoverStyles(t,e,i){const s=this.options.hover,n=(t,e)=>t.filter((t=>!e.some((e=>t.datasetIndex===e.datasetIndex&&t.index===e.index)))),o=n(e,t),a=i?t:n(t,e);o.length&&this.updateHoverStyle(o,s.mode,!1),a.length&&s.mode&&this.updateHoverStyle(a,s.mode,!0)}_eventHandler(t,e){const i={event:t,replay:e,cancelable:!0,inChartArea:oe(t,this.chartArea,this._minPadding)},s=e=>(e.options.events||this.options.events).includes(t.native.type);if(!1===this.notifyPlugins("beforeEvent",i,s))return;const n=this._handleEvent(t,e,i.inChartArea);return i.cancelable=!1,this.notifyPlugins("afterEvent",i,s),(n||i.changed)&&this.render(),this}_handleEvent(t,e,i){const{_active:s=[],options:n}=this,o=e,a=this._getActiveElements(t,s,i,o),r=function(t){return"mouseup"===t.type||"click"===t.type||"contextmenu"===t.type}(t),h=function(t,e,i,s){return i&&"mouseout"!==t.type?s?e:t:null}(t,this._lastEvent,i,r);i&&(this._lastEvent=null,D(n.onHover,[t,a,this],this),r&&D(n.onClick,[t,a,this],this));const l=!E(a,s);return(l||e)&&(this._active=a,this._updateHoverStyles(a,s,e)),this._lastEvent=h,l}_getActiveElements(t,e,i,s){if("mouseout"===t.type)return[];if(!i)return e;const n=this.options.hover;return this.getElementsAtEventForMode(t,n.mode,n,s)}}const wn=()=>P(vn.instances,(t=>t._plugins.invalidate())),Mn=!0;function An(t,e,i){const{startAngle:s,pixelMargin:n,x:o,y:a,outerRadius:r,innerRadius:h}=e;let l=n/r;t.beginPath(),t.arc(o,a,r,s-l,i+l),h>n?(l=n/h,t.arc(o,a,h,i+l,s-l,!0)):t.arc(o,a,n,i+q,s-q),t.closePath(),t.clip()}function kn(t,e,i,s){return{x:i+t*Math.cos(e),y:s+t*Math.sin(e)}}function Cn(t,e,i,s,n){const{x:o,y:a,startAngle:r,pixelMargin:h,innerRadius:l}=e,c=Math.max(e.outerRadius+s+i-h,0),d=l>0?l+s+i+h:0;let u=0;const p=n-r;if(s){const t=((l>0?l-s:0)+(c>0?c-s:0))/2;u=(p-(0!==t?p*t/(t+s):p))/2}const g=(p-Math.max(.001,p*c-i/H)/c)/2,f=r+g+u,m=n-g-u,{outerStart:b,outerEnd:x,innerStart:_,innerEnd:y}=function(t,e,i,s){const n=me(t.options.borderRadius,["outerStart","outerEnd","innerStart","innerEnd"]),o=(i-e)/2,a=Math.min(o,s*e/2),r=t=>{const e=(i-Math.min(o,t))*s/2;return dt(t,0,Math.min(o,e))};return{outerStart:r(n.outerStart),outerEnd:r(n.outerEnd),innerStart:dt(n.innerStart,0,a),innerEnd:dt(n.innerEnd,0,a)}}(e,d,c,m-f),v=c-b,w=c-x,M=f+b/v,A=m-x/w,k=d+_,C=d+y,S=f+_/k,D=m-y/C;if(t.beginPath(),t.arc(o,a,c,M,A),x>0){const e=kn(w,A,o,a);t.arc(e.x,e.y,x,A,m+q)}const P=kn(C,m,o,a);if(t.lineTo(P.x,P.y),y>0){const e=kn(C,D,o,a);t.arc(e.x,e.y,y,m+q,D+Math.PI)}if(t.arc(o,a,d,m-y/d,f+_/d,!0),_>0){const e=kn(k,S,o,a);t.arc(e.x,e.y,_,S+Math.PI,f-q)}const E=kn(v,f,o,a);if(t.lineTo(E.x,E.y),b>0){const e=kn(v,M,o,a);t.arc(e.x,e.y,b,f-q,M)}t.closePath()}Object.defineProperties(vn,{defaults:{enumerable:Mn,value:Qt},instances:{enumerable:Mn,value:xn},overrides:{enumerable:Mn,value:Kt},registry:{enumerable:Mn,value:Zs},version:{enumerable:Mn,value:"3.7.1"},getChart:{enumerable:Mn,value:_n},register:{enumerable:Mn,value:(...t)=>{Zs.add(...t),wn()}},unregister:{enumerable:Mn,value:(...t)=>{Zs.remove(...t),wn()}}});class Sn extends Fs{constructor(t){super(),this.options=void 0,this.circumference=void 0,this.startAngle=void 0,this.endAngle=void 0,this.innerRadius=void 0,this.outerRadius=void 0,this.pixelMargin=0,this.fullCircles=0,t&&Object.assign(this,t)}inRange(t,e,i){const s=this.getProps(["x","y"],i),{angle:n,distance:o}=at(s,{x:t,y:e}),{startAngle:a,endAngle:r,innerRadius:h,outerRadius:l,circumference:c}=this.getProps(["startAngle","endAngle","innerRadius","outerRadius","circumference"],i),d=this.options.spacing/2,u=C(c,r-a)>=$||ct(n,a,r),p=ut(o,h+d,l+d);return u&&p}getCenterPoint(t){const{x:e,y:i,startAngle:s,endAngle:n,innerRadius:o,outerRadius:a}=this.getProps(["x","y","startAngle","endAngle","innerRadius","outerRadius","circumference"],t),{offset:r,spacing:h}=this.options,l=(s+n)/2,c=(o+a+h+r)/2;return{x:e+Math.cos(l)*c,y:i+Math.sin(l)*c}}tooltipPosition(t){return this.getCenterPoint(t)}draw(t){const{options:e,circumference:i}=this,s=(e.offset||0)/2,n=(e.spacing||0)/2;if(this.pixelMargin="inner"===e.borderAlign?.33:0,this.fullCircles=i>$?Math.floor(i/$):0,0===i||this.innerRadius<0||this.outerRadius<0)return;t.save();let o=0;if(s){o=s/2;const e=(this.startAngle+this.endAngle)/2;t.translate(Math.cos(e)*o,Math.sin(e)*o),this.circumference>=H&&(o=s)}t.fillStyle=e.backgroundColor,t.strokeStyle=e.borderColor;const a=function(t,e,i,s){const{fullCircles:n,startAngle:o,circumference:a}=e;let r=e.endAngle;if(n){Cn(t,e,i,s,o+$);for(let e=0;e<n;++e)t.fill();isNaN(a)||(r=o+a%$,a%$==0&&(r+=$))}return Cn(t,e,i,s,r),t.fill(),r}(t,this,o,n);(function(t,e,i,s,n){const{options:o}=e,{borderWidth:a,borderJoinStyle:r}=o,h="inner"===o.borderAlign;a&&(h?(t.lineWidth=2*a,t.lineJoin=r||"round"):(t.lineWidth=a,t.lineJoin=r||"bevel"),e.fullCircles&&function(t,e,i){const{x:s,y:n,startAngle:o,pixelMargin:a,fullCircles:r}=e,h=Math.max(e.outerRadius-a,0),l=e.innerRadius+a;let c;for(i&&An(t,e,o+$),t.beginPath(),t.arc(s,n,l,o+$,o,!0),c=0;c<r;++c)t.stroke();for(t.beginPath(),t.arc(s,n,h,o,o+$),c=0;c<r;++c)t.stroke()}(t,e,h),h&&An(t,e,n),Cn(t,e,i,s,n),t.stroke())})(t,this,o,n,a),t.restore()}}function Dn(t,e,i=e){t.lineCap=C(i.borderCapStyle,e.borderCapStyle),t.setLineDash(C(i.borderDash,e.borderDash)),t.lineDashOffset=C(i.borderDashOffset,e.borderDashOffset),t.lineJoin=C(i.borderJoinStyle,e.borderJoinStyle),t.lineWidth=C(i.borderWidth,e.borderWidth),t.strokeStyle=C(i.borderColor,e.borderColor)}function Pn(t,e,i){t.lineTo(i.x,i.y)}function En(t,e,i={}){const s=t.length,{start:n=0,end:o=s-1}=i,{start:a,end:r}=e,h=Math.max(n,a),l=Math.min(o,r),c=n<a&&o<a||n>r&&o>r;return{count:s,start:h,loop:e.loop,ilen:l<h&&!c?s+l-h:l-h}}function On(t,e,i,s){const{points:n,options:o}=e,{count:a,start:r,loop:h,ilen:l}=En(n,i,s),c=function(t){return t.stepped?he:t.tension||"monotone"===t.cubicInterpolationMode?le:Pn}(o);let d,u,p,{move:g=!0,reverse:f}=s||{};for(d=0;d<=l;++d)u=n[(r+(f?l-d:d))%a],u.skip||(g?(t.moveTo(u.x,u.y),g=!1):c(t,p,u,f,o.stepped),p=u);return h&&(u=n[(r+(f?l:0))%a],c(t,p,u,f,o.stepped)),!!h}function Tn(t,e,i,s){const n=e.points,{count:o,start:a,ilen:r}=En(n,i,s),{move:h=!0,reverse:l}=s||{};let c,d,u,p,g,f,m=0,b=0;const x=t=>(a+(l?r-t:t))%o,_=()=>{p!==g&&(t.lineTo(m,g),t.lineTo(m,p),t.lineTo(m,f))};for(h&&(d=n[x(0)],t.moveTo(d.x,d.y)),c=0;c<=r;++c){if(d=n[x(c)],d.skip)continue;const e=d.x,i=d.y,s=0|e;s===u?(i<p?p=i:i>g&&(g=i),m=(b*m+e)/++b):(_(),t.lineTo(e,i),u=s,b=0,p=g=i),f=i}_()}function Ln(t){const e=t.options,i=e.borderDash&&e.borderDash.length;return t._decimated||t._loop||e.tension||"monotone"===e.cubicInterpolationMode||e.stepped||i?On:Tn}Sn.id="arc",Sn.defaults={borderAlign:"center",borderColor:"#fff",borderJoinStyle:void 0,borderRadius:0,borderWidth:2,offset:0,spacing:0,angle:void 0},Sn.defaultRoutes={backgroundColor:"backgroundColor"};const Rn="function"==typeof Path2D;class In extends Fs{constructor(t){super(),this.animated=!0,this.options=void 0,this._chart=void 0,this._loop=void 0,this._fullLoop=void 0,this._path=void 0,this._points=void 0,this._segments=void 0,this._decimated=!1,this._pointsUpdated=!1,this._datasetIndex=void 0,t&&Object.assign(this,t)}updateControlPoints(t,e){const i=this.options;if((i.tension||"monotone"===i.cubicInterpolationMode)&&!i.stepped&&!this._pointsUpdated){const s=i.spanGaps?this._loop:this._fullLoop;Xe(this._points,i,t,s,e),this._pointsUpdated=!0}}set points(t){this._points=t,delete this._segments,delete this._path,this._pointsUpdated=!1}get points(){return this._points}get segments(){return this._segments||(this._segments=function(t,e){const i=t.points,s=t.options.spanGaps,n=i.length;if(!n)return[];const o=!!t._loop,{start:a,end:r}=function(t,e,i,s){let n=0,o=e-1;if(i&&!s)for(;n<e&&!t[n].skip;)n++;for(;n<e&&t[n].skip;)n++;for(n%=e,i&&(o+=n);o>n&&t[o%e].skip;)o--;return o%=e,{start:n,end:o}}(i,n,o,s);return function(t,e,i,s){return s&&s.setContext&&i?function(t,e,i,s){const n=t._chart.getContext(),o=bi(t.options),{_datasetIndex:a,options:{spanGaps:r}}=t,h=i.length,l=[];let c=o,d=e[0].start,u=d;function p(t,e,s,n){const o=r?-1:1;if(t!==e){for(t+=h;i[t%h].skip;)t-=o;for(;i[e%h].skip;)e+=o;t%h!=e%h&&(l.push({start:t%h,end:e%h,loop:s,style:n}),c=n,d=e%h)}}for(const t of e){d=r?d:t.start;let e,o=i[d%h];for(u=d+1;u<=t.end;u++){const r=i[u%h];e=bi(s.setContext(we(n,{type:"segment",p0:o,p1:r,p0DataIndex:(u-1)%h,p1DataIndex:u%h,datasetIndex:a}))),xi(e,c)&&p(d,u-1,t.loop,c),o=r,c=e}d<u-1&&p(d,u-1,t.loop,c)}return l}(t,e,i,s):e}(t,!0===s?[{start:a,end:r,loop:o}]:function(t,e,i,s){const n=t.length,o=[];let a,r=e,h=t[e];for(a=e+1;a<=i;++a){const i=t[a%n];i.skip||i.stop?h.skip||(s=!1,o.push({start:e%n,end:(a-1)%n,loop:s}),e=r=i.stop?a:null):(r=a,h.skip&&(e=a)),h=i}return null!==r&&o.push({start:e%n,end:r%n,loop:s}),o}(i,a,r<a?r+n:r,!!t._fullLoop&&0===a&&r===n-1),i,e)}(this,this.options.segment))}first(){const t=this.segments,e=this.points;return t.length&&e[t[0].start]}last(){const t=this.segments,e=this.points,i=t.length;return i&&e[t[i-1].end]}interpolate(t,e){const i=this.options,s=t[e],n=this.points,o=mi(this,{property:e,start:s,end:s});if(!o.length)return;const a=[],r=function(t){return t.stepped?ai:t.tension||"monotone"===t.cubicInterpolationMode?ri:oi}(i);let h,l;for(h=0,l=o.length;h<l;++h){const{start:l,end:c}=o[h],d=n[l],u=n[c];if(d===u){a.push(d);continue}const p=r(d,u,Math.abs((s-d[e])/(u[e]-d[e])),i.stepped);p[e]=t[e],a.push(p)}return 1===a.length?a[0]:a}pathSegment(t,e,i){return Ln(this)(t,this,e,i)}path(t,e,i){const s=this.segments,n=Ln(this);let o=this._loop;e=e||0,i=i||this.points.length-e;for(const a of s)o&=n(t,this,a,{start:e,end:e+i-1});return!!o}draw(t,e,i,s){const n=this.options||{};(this.points||[]).length&&n.borderWidth&&(t.save(),function(t,e,i,s){Rn&&!e.options.segment?function(t,e,i,s){let n=e._path;n||(n=e._path=new Path2D,e.path(n,i,s)&&n.closePath()),Dn(t,e.options),t.stroke(n)}(t,e,i,s):function(t,e,i,s){const{segments:n,options:o}=e,a=Ln(e);for(const r of n)Dn(t,o,r.style),t.beginPath(),a(t,e,r,{start:i,end:i+s-1})&&t.closePath(),t.stroke()}(t,e,i,s)}(t,this,i,s),t.restore()),this.animated&&(this._pointsUpdated=!1,this._path=void 0)}}function Bn(t,e,i,s){const n=t.options,{[i]:o}=t.getProps([i],s);return Math.abs(e-o)<n.radius+n.hitRadius}In.id="line",In.defaults={borderCapStyle:"butt",borderDash:[],borderDashOffset:0,borderJoinStyle:"miter",borderWidth:3,capBezierPoints:!0,cubicInterpolationMode:"default",fill:!1,spanGaps:!1,stepped:!1,tension:0},In.defaultRoutes={backgroundColor:"backgroundColor",borderColor:"borderColor"},In.descriptors={_scriptable:!0,_indexable:t=>"borderDash"!==t&&"fill"!==t};class zn extends Fs{constructor(t){super(),this.options=void 0,this.parsed=void 0,this.skip=void 0,this.stop=void 0,t&&Object.assign(this,t)}inRange(t,e,i){const s=this.options,{x:n,y:o}=this.getProps(["x","y"],i);return Math.pow(t-n,2)+Math.pow(e-o,2)<Math.pow(s.hitRadius+s.radius,2)}inXRange(t,e){return Bn(this,t,"x",e)}inYRange(t,e){return Bn(this,t,"y",e)}getCenterPoint(t){const{x:e,y:i}=this.getProps(["x","y"],t);return{x:e,y:i}}size(t){let e=(t=t||this.options||{}).radius||0;return e=Math.max(e,e&&t.hoverRadius||0),2*(e+(e&&t.borderWidth||0))}draw(t,e){const i=this.options;this.skip||i.radius<.1||!oe(this,e,this.size(i)/2)||(t.strokeStyle=i.borderColor,t.lineWidth=i.borderWidth,t.fillStyle=i.backgroundColor,ne(t,i,this.x,this.y))}getRange(){const t=this.options||{};return t.radius+t.hitRadius}}function Fn(t,e){const{x:i,y:s,base:n,width:o,height:a}=t.getProps(["x","y","base","width","height"],e);let r,h,l,c,d;return t.horizontal?(d=a/2,r=Math.min(i,n),h=Math.max(i,n),l=s-d,c=s+d):(d=o/2,r=i-d,h=i+d,l=Math.min(s,n),c=Math.max(s,n)),{left:r,top:l,right:h,bottom:c}}function Vn(t,e,i,s){return t?0:dt(e,i,s)}function Wn(t,e,i,s){const n=null===e,o=null===i,a=t&&!(n&&o)&&Fn(t,s);return a&&(n||ut(e,a.left,a.right))&&(o||ut(i,a.top,a.bottom))}function jn(t,e){t.rect(e.x,e.y,e.w,e.h)}function Nn(t,e,i={}){const s=t.x!==i.x?-e:0,n=t.y!==i.y?-e:0,o=(t.x+t.w!==i.x+i.w?e:0)-s,a=(t.y+t.h!==i.y+i.h?e:0)-n;return{x:t.x+s,y:t.y+n,w:t.w+o,h:t.h+a,radius:t.radius}}zn.id="point",zn.defaults={borderWidth:1,hitRadius:1,hoverBorderWidth:1,hoverRadius:4,pointStyle:"circle",radius:3,rotation:0},zn.defaultRoutes={backgroundColor:"backgroundColor",borderColor:"borderColor"};class Hn extends Fs{constructor(t){super(),this.options=void 0,this.horizontal=void 0,this.base=void 0,this.width=void 0,this.height=void 0,this.inflateAmount=void 0,t&&Object.assign(this,t)}draw(t){const{inflateAmount:e,options:{borderColor:i,backgroundColor:s}}=this,{inner:n,outer:o}=function(t){const e=Fn(t),i=e.right-e.left,s=e.bottom-e.top,n=function(t,e,i){const s=t.options.borderWidth,n=t.borderSkipped,o=be(s);return{t:Vn(n.top,o.top,0,i),r:Vn(n.right,o.right,0,e),b:Vn(n.bottom,o.bottom,0,i),l:Vn(n.left,o.left,0,e)}}(t,i/2,s/2),o=function(t,e,i){const{enableBorderRadius:s}=t.getProps(["enableBorderRadius"]),n=t.options.borderRadius,o=xe(n),a=Math.min(e,i),r=t.borderSkipped,h=s||M(n);return{topLeft:Vn(!h||r.top||r.left,o.topLeft,0,a),topRight:Vn(!h||r.top||r.right,o.topRight,0,a),bottomLeft:Vn(!h||r.bottom||r.left,o.bottomLeft,0,a),bottomRight:Vn(!h||r.bottom||r.right,o.bottomRight,0,a)}}(t,i/2,s/2);return{outer:{x:e.left,y:e.top,w:i,h:s,radius:o},inner:{x:e.left+n.l,y:e.top+n.t,w:i-n.l-n.r,h:s-n.t-n.b,radius:{topLeft:Math.max(0,o.topLeft-Math.max(n.t,n.l)),topRight:Math.max(0,o.topRight-Math.max(n.t,n.r)),bottomLeft:Math.max(0,o.bottomLeft-Math.max(n.b,n.l)),bottomRight:Math.max(0,o.bottomRight-Math.max(n.b,n.r))}}}}(this),a=(r=o.radius).topLeft||r.topRight||r.bottomLeft||r.bottomRight?ue:jn;var r;t.save(),o.w===n.w&&o.h===n.h||(t.beginPath(),a(t,Nn(o,e,n)),t.clip(),a(t,Nn(n,-e,o)),t.fillStyle=i,t.fill("evenodd")),t.beginPath(),a(t,Nn(n,e)),t.fillStyle=s,t.fill(),t.restore()}inRange(t,e,i){return Wn(this,t,e,i)}inXRange(t,e){return Wn(this,t,null,e)}inYRange(t,e){return Wn(this,null,t,e)}getCenterPoint(t){const{x:e,y:i,base:s,horizontal:n}=this.getProps(["x","y","base","horizontal"],t);return{x:n?(e+s)/2:e,y:n?i:(i+s)/2}}getRange(t){return"x"===t?this.width/2:this.height/2}}Hn.id="bar",Hn.defaults={borderSkipped:"start",borderWidth:0,borderRadius:0,inflateAmount:"auto",pointStyle:void 0},Hn.defaultRoutes={backgroundColor:"backgroundColor",borderColor:"borderColor"};var $n=Object.freeze({__proto__:null,ArcElement:Sn,LineElement:In,PointElement:zn,BarElement:Hn});function Yn(t){if(t._decimated){const e=t._data;delete t._decimated,delete t._data,Object.defineProperty(t,"data",{value:e})}}function Un(t){t.data.datasets.forEach((t=>{Yn(t)}))}var Xn={id:"decimation",defaults:{algorithm:"min-max",enabled:!1},beforeElementsUpdate:(t,e,i)=>{if(!i.enabled)return void Un(t);const s=t.width;t.data.datasets.forEach(((e,n)=>{const{_data:o,indexAxis:a}=e,r=t.getDatasetMeta(n),h=o||e.data;if("y"===ve([a,t.options.indexAxis]))return;if("line"!==r.type)return;const l=t.scales[r.xAxisID];if("linear"!==l.type&&"time"!==l.type)return;if(t.options.parsing)return;let c,{start:d,count:u}=function(t,e){const i=e.length;let s,n=0;const{iScale:o}=t,{min:a,max:r,minDefined:h,maxDefined:l}=o.getUserBounds();return h&&(n=dt(Ae(e,o.axis,a).lo,0,i-1)),s=l?dt(Ae(e,o.axis,r).hi+1,n,i)-n:i-n,{start:n,count:s}}(r,h);if(u<=(i.threshold||4*s))Yn(e);else{switch(v(o)&&(e._data=h,delete e.data,Object.defineProperty(e,"data",{configurable:!0,enumerable:!0,get:function(){return this._decimated},set:function(t){this._data=t}})),i.algorithm){case"lttb":c=function(t,e,i,s,n){const o=n.samples||s;if(o>=i)return t.slice(e,e+i);const a=[],r=(i-2)/(o-2);let h=0;const l=e+i-1;let c,d,u,p,g,f=e;for(a[h++]=t[f],c=0;c<o-2;c++){let s,n=0,o=0;const l=Math.floor((c+1)*r)+1+e,m=Math.min(Math.floor((c+2)*r)+1,i)+e,b=m-l;for(s=l;s<m;s++)n+=t[s].x,o+=t[s].y;n/=b,o/=b;const x=Math.floor(c*r)+1+e,_=Math.min(Math.floor((c+1)*r)+1,i)+e,{x:y,y:v}=t[f];for(u=p=-1,s=x;s<_;s++)p=.5*Math.abs((y-n)*(t[s].y-v)-(y-t[s].x)*(o-v)),p>u&&(u=p,d=t[s],g=s);a[h++]=d,f=g}return a[h++]=t[l],a}(h,d,u,s,i);break;case"min-max":c=function(t,e,i,s){let n,o,a,r,h,l,c,d,u,p,g=0,f=0;const m=[],b=e+i-1,x=t[e].x,_=t[b].x-x;for(n=e;n<e+i;++n){o=t[n],a=(o.x-x)/_*s,r=o.y;const e=0|a;if(e===h)r<u?(u=r,l=n):r>p&&(p=r,c=n),g=(f*g+o.x)/++f;else{const i=n-1;if(!v(l)&&!v(c)){const e=Math.min(l,c),s=Math.max(l,c);e!==d&&e!==i&&m.push({...t[e],x:g}),s!==d&&s!==i&&m.push({...t[s],x:g})}n>0&&i!==d&&m.push(t[i]),m.push(o),h=e,f=0,u=p=r,l=c=d=n}}return m}(h,d,u,s);break;default:throw new Error(`Unsupported decimation algorithm '${i.algorithm}'`)}e._decimated=c}}))},destroy(t){Un(t)}};function qn(t,e,i){const s=function(t){const e=t.options,i=e.fill;let s=C(i&&i.target,i);return void 0===s&&(s=!!e.backgroundColor),!1!==s&&null!==s&&(!0===s?"origin":s)}(t);if(M(s))return!isNaN(s.value)&&s;let n=parseFloat(s);return A(n)&&Math.floor(n)===n?("-"!==s[0]&&"+"!==s[0]||(n=e+n),!(n===e||n<0||n>=i)&&n):["origin","start","end","stack","shape"].indexOf(s)>=0&&s}class Kn{constructor(t){this.x=t.x,this.y=t.y,this.radius=t.radius}pathSegment(t,e,i){const{x:s,y:n,radius:o}=this;return e=e||{start:0,end:$},t.arc(s,n,o,e.end,e.start,!0),!i.bounds}interpolate(t){const{x:e,y:i,radius:s}=this,n=t.angle;return{x:e+Math.cos(n)*s,y:i+Math.sin(n)*s,angle:n}}}function Zn(t,e,i){for(;e>t;e--){const t=i[e];if(!isNaN(t.x)&&!isNaN(t.y))break}return e}function Gn(t,e,i){const s=[];for(let n=0;n<i.length;n++){const o=i[n],{first:a,last:r,point:h}=Jn(o,e,"x");if(!(!h||a&&r))if(a)s.unshift(h);else if(t.push(h),!r)break}t.push(...s)}function Jn(t,e,i){const s=t.interpolate(e,i);if(!s)return{};const n=s[i],o=t.segments,a=t.points;let r=!1,h=!1;for(let t=0;t<o.length;t++){const e=o[t],s=a[e.start][i],l=a[e.end][i];if(ut(n,s,l)){r=n===s,h=n===l;break}}return{first:r,last:h,point:s}}function Qn(t){const{chart:e,fill:i,line:s}=t;if(A(i))return function(t,e){const i=t.getDatasetMeta(e);return i&&t.isDatasetVisible(e)?i.dataset:null}(e,i);if("stack"===i)return function(t){const{scale:e,index:i,line:s}=t,n=[],o=s.segments,a=s.points,r=function(t,e){const i=[],s=t.getMatchingVisibleMetas("line");for(let t=0;t<s.length;t++){const n=s[t];if(n.index===e)break;n.hidden||i.unshift(n.dataset)}return i}(e,i);r.push(to({x:null,y:e.bottom},s));for(let t=0;t<o.length;t++){const e=o[t];for(let t=e.start;t<=e.end;t++)Gn(n,a[t],r)}return new In({points:n,options:{}})}(t);if("shape"===i)return!0;const n=function(t){return(t.scale||{}).getPointPositionForValue?function(t){const{scale:e,fill:i}=t,s=e.options,n=e.getLabels().length,o=[],a=s.reverse?e.max:e.min,r=s.reverse?e.min:e.max;let h,l,c;if(c="start"===i?a:"end"===i?r:M(i)?i.value:e.getBaseValue(),s.grid.circular)return l=e.getPointPositionForValue(0,a),new Kn({x:l.x,y:l.y,radius:e.getDistanceFromCenterForValue(c)});for(h=0;h<n;++h)o.push(e.getPointPositionForValue(h,c));return o}(t):function(t){const{scale:e={},fill:i}=t;let s,n=null;return"start"===i?n=e.bottom:"end"===i?n=e.top:M(i)?n=e.getPixelForValue(i.value):e.getBasePixel&&(n=e.getBasePixel()),A(n)?(s=e.isHorizontal(),{x:s?n:null,y:s?null:n}):null}(t)}(t);return n instanceof Kn?n:to(n,s)}function to(t,e){let i=[],s=!1;return w(t)?(s=!0,i=t):i=function(t,e){const{x:i=null,y:s=null}=t||{},n=e.points,o=[];return e.segments.forEach((({start:t,end:e})=>{e=Zn(t,e,n);const a=n[t],r=n[e];null!==s?(o.push({x:a.x,y:s}),o.push({x:r.x,y:s})):null!==i&&(o.push({x:i,y:a.y}),o.push({x:i,y:r.y}))})),o}(t,e),i.length?new In({points:i,options:{tension:0},_loop:s,_fullLoop:s}):null}function eo(t,e,i){let s=t[e].fill;const n=[e];let o;if(!i)return s;for(;!1!==s&&-1===n.indexOf(s);){if(!A(s))return s;if(o=t[s],!o)return!1;if(o.visible)return s;n.push(s),s=o.fill}return!1}function io(t,e,i){const{segments:s,points:n}=e;let o=!0,a=!1;t.beginPath();for(const r of s){const{start:s,end:h}=r,l=n[s],c=n[Zn(s,h,n)];o?(t.moveTo(l.x,l.y),o=!1):(t.lineTo(l.x,i),t.lineTo(l.x,l.y)),a=!!e.pathSegment(t,r,{move:a}),a?t.closePath():t.lineTo(c.x,i)}t.lineTo(e.first().x,i),t.closePath(),t.clip()}function so(t,e,i,s){if(s)return;let n=e[t],o=i[t];return"angle"===t&&(n=lt(n),o=lt(o)),{property:t,start:n,end:o}}function no(t,e,i,s){return t&&e?s(t[i],e[i]):t?t[i]:e?e[i]:0}function oo(t,e,i){const{top:s,bottom:n}=e.chart.chartArea,{property:o,start:a,end:r}=i||{};"x"===o&&(t.beginPath(),t.rect(a,s,r-a,n-s),t.clip())}function ao(t,e,i,s){const n=e.interpolate(i,s);n&&t.lineTo(n.x,n.y)}function ro(t,e){const{line:i,target:s,property:n,color:o,scale:a}=e,r=function(t,e,i){const s=t.segments,n=t.points,o=e.points,a=[];for(const t of s){let{start:s,end:r}=t;r=Zn(s,r,n);const h=so(i,n[s],n[r],t.loop);if(!e.segments){a.push({source:t,target:h,start:n[s],end:n[r]});continue}const l=mi(e,h);for(const e of l){const s=so(i,o[e.start],o[e.end],e.loop),r=fi(t,n,s);for(const t of r)a.push({source:t,target:e,start:{[i]:no(h,s,"start",Math.max)},end:{[i]:no(h,s,"end",Math.min)}})}}return a}(i,s,n);for(const{source:e,target:h,start:l,end:c}of r){const{style:{backgroundColor:r=o}={}}=e,d=!0!==s;t.save(),t.fillStyle=r,oo(t,a,d&&so(n,l,c)),t.beginPath();const u=!!i.pathSegment(t,e);let p;if(d){u?t.closePath():ao(t,s,c,n);const e=!!s.pathSegment(t,h,{move:u,reverse:!0});p=u&&e,p||ao(t,s,l,n)}t.closePath(),t.fill(p?"evenodd":"nonzero"),t.restore()}}function ho(t,e,i){const s=Qn(e),{line:n,scale:o,axis:a}=e,r=n.options,h=r.fill,l=r.backgroundColor,{above:c=l,below:d=l}=h||{};s&&n.points.length&&(ae(t,i),function(t,e){const{line:i,target:s,above:n,below:o,area:a,scale:r}=e,h=i._loop?"angle":e.axis;t.save(),"x"===h&&o!==n&&(io(t,s,a.top),ro(t,{line:i,target:s,color:n,scale:r,property:h}),t.restore(),t.save(),io(t,s,a.bottom)),ro(t,{line:i,target:s,color:o,scale:r,property:h}),t.restore()}(t,{line:n,target:s,above:c,below:d,area:i,scale:o,axis:a}),re(t))}var lo={id:"filler",afterDatasetsUpdate(t,e,i){const s=(t.data.datasets||[]).length,n=[];let o,a,r,h;for(a=0;a<s;++a)o=t.getDatasetMeta(a),r=o.dataset,h=null,r&&r.options&&r instanceof In&&(h={visible:t.isDatasetVisible(a),index:a,fill:qn(r,a,s),chart:t,axis:o.controller.options.indexAxis,scale:o.vScale,line:r}),o.$filler=h,n.push(h);for(a=0;a<s;++a)h=n[a],h&&!1!==h.fill&&(h.fill=eo(n,a,i.propagate))},beforeDraw(t,e,i){const s="beforeDraw"===i.drawTime,n=t.getSortedVisibleDatasetMetas(),o=t.chartArea;for(let e=n.length-1;e>=0;--e){const i=n[e].$filler;i&&(i.line.updateControlPoints(o,i.axis),s&&ho(t.ctx,i,o))}},beforeDatasetsDraw(t,e,i){if("beforeDatasetsDraw"!==i.drawTime)return;const s=t.getSortedVisibleDatasetMetas();for(let e=s.length-1;e>=0;--e){const i=s[e].$filler;i&&ho(t.ctx,i,t.chartArea)}},beforeDatasetDraw(t,e,i){const s=e.meta.$filler;s&&!1!==s.fill&&"beforeDatasetDraw"===i.drawTime&&ho(t.ctx,s,t.chartArea)},defaults:{propagate:!0,drawTime:"beforeDatasetDraw"}};const co=(t,e)=>{let{boxHeight:i=e,boxWidth:s=e}=t;return t.usePointStyle&&(i=Math.min(i,e),s=Math.min(s,e)),{boxWidth:s,boxHeight:i,itemHeight:Math.max(e,i)}};class uo extends Fs{constructor(t){super(),this._added=!1,this.legendHitBoxes=[],this._hoveredItem=null,this.doughnutMode=!1,this.chart=t.chart,this.options=t.options,this.ctx=t.ctx,this.legendItems=void 0,this.columnSizes=void 0,this.lineWidths=void 0,this.maxHeight=void 0,this.maxWidth=void 0,this.top=void 0,this.bottom=void 0,this.left=void 0,this.right=void 0,this.height=void 0,this.width=void 0,this._margins=void 0,this.position=void 0,this.weight=void 0,this.fullSize=void 0}update(t,e,i){this.maxWidth=t,this.maxHeight=e,this._margins=i,this.setDimensions(),this.buildLabels(),this.fit()}setDimensions(){this.isHorizontal()?(this.width=this.maxWidth,this.left=this._margins.left,this.right=this.width):(this.height=this.maxHeight,this.top=this._margins.top,this.bottom=this.height)}buildLabels(){const t=this.options.labels||{};let e=D(t.generateLabels,[this.chart],this)||[];t.filter&&(e=e.filter((e=>t.filter(e,this.chart.data)))),t.sort&&(e=e.sort(((e,i)=>t.sort(e,i,this.chart.data)))),this.options.reverse&&e.reverse(),this.legendItems=e}fit(){const{options:t,ctx:e}=this;if(!t.display)return void(this.width=this.height=0);const i=t.labels,s=ye(i.font),n=s.size,o=this._computeTitleHeight(),{boxWidth:a,itemHeight:r}=co(i,n);let h,l;e.font=s.string,this.isHorizontal()?(h=this.maxWidth,l=this._fitRows(o,n,a,r)+10):(l=this.maxHeight,h=this._fitCols(o,n,a,r)+10),this.width=Math.min(h,t.maxWidth||this.maxWidth),this.height=Math.min(l,t.maxHeight||this.maxHeight)}_fitRows(t,e,i,s){const{ctx:n,maxWidth:o,options:{labels:{padding:a}}}=this,r=this.legendHitBoxes=[],h=this.lineWidths=[0],l=s+a;let c=t;n.textAlign="left",n.textBaseline="middle";let d=-1,u=-l;return this.legendItems.forEach(((t,p)=>{const g=i+e/2+n.measureText(t.text).width;(0===p||h[h.length-1]+g+2*a>o)&&(c+=l,h[h.length-(p>0?0:1)]=0,u+=l,d++),r[p]={left:0,top:u,row:d,width:g,height:s},h[h.length-1]+=g+a})),c}_fitCols(t,e,i,s){const{ctx:n,maxHeight:o,options:{labels:{padding:a}}}=this,r=this.legendHitBoxes=[],h=this.columnSizes=[],l=o-t;let c=a,d=0,u=0,p=0,g=0;return this.legendItems.forEach(((t,o)=>{const f=i+e/2+n.measureText(t.text).width;o>0&&u+s+2*a>l&&(c+=d+a,h.push({width:d,height:u}),p+=d+a,g++,d=u=0),r[o]={left:p,top:u,col:g,width:f,height:s},d=Math.max(d,f),u+=s+a})),c+=d,h.push({width:d,height:u}),c}adjustHitBoxes(){if(!this.options.display)return;const t=this._computeTitleHeight(),{legendHitBoxes:e,options:{align:i,labels:{padding:s},rtl:n}}=this,o=ci(n,this.left,this.width);if(this.isHorizontal()){let n=0,a=x(i,this.left+s,this.right-this.lineWidths[n]);for(const r of e)n!==r.row&&(n=r.row,a=x(i,this.left+s,this.right-this.lineWidths[n])),r.top+=this.top+t+s,r.left=o.leftForLtr(o.x(a),r.width),a+=r.width+s}else{let n=0,a=x(i,this.top+t+s,this.bottom-this.columnSizes[n].height);for(const r of e)r.col!==n&&(n=r.col,a=x(i,this.top+t+s,this.bottom-this.columnSizes[n].height)),r.top=a,r.left+=this.left+s,r.left=o.leftForLtr(o.x(r.left),r.width),a+=r.height+s}}isHorizontal(){return"top"===this.options.position||"bottom"===this.options.position}draw(){if(this.options.display){const t=this.ctx;ae(t,this),this._draw(),re(t)}}_draw(){const{options:t,columnSizes:e,lineWidths:i,ctx:s}=this,{align:n,labels:o}=t,a=Qt.color,r=ci(t.rtl,this.left,this.width),h=ye(o.font),{color:l,padding:c}=o,d=h.size,u=d/2;let p;this.drawTitle(),s.textAlign=r.textAlign("left"),s.textBaseline="middle",s.lineWidth=.5,s.font=h.string;const{boxWidth:g,boxHeight:f,itemHeight:m}=co(o,d),b=this.isHorizontal(),_=this._computeTitleHeight();p=b?{x:x(n,this.left+c,this.right-i[0]),y:this.top+c+_,line:0}:{x:this.left+c,y:x(n,this.top+_+c,this.bottom-e[0].height),line:0},di(this.ctx,t.textDirection);const y=m+c;this.legendItems.forEach(((v,w)=>{s.strokeStyle=v.fontColor||l,s.fillStyle=v.fontColor||l;const M=s.measureText(v.text).width,A=r.textAlign(v.textAlign||(v.textAlign=o.textAlign)),k=g+u+M;let S=p.x,D=p.y;r.setWidth(this.width),b?w>0&&S+k+c>this.right&&(D=p.y+=y,p.line++,S=p.x=x(n,this.left+c,this.right-i[p.line])):w>0&&D+y>this.bottom&&(S=p.x=S+e[p.line].width+c,p.line++,D=p.y=x(n,this.top+_+c,this.bottom-e[p.line].height)),function(t,e,i){if(isNaN(g)||g<=0||isNaN(f)||f<0)return;s.save();const n=C(i.lineWidth,1);if(s.fillStyle=C(i.fillStyle,a),s.lineCap=C(i.lineCap,"butt"),s.lineDashOffset=C(i.lineDashOffset,0),s.lineJoin=C(i.lineJoin,"miter"),s.lineWidth=n,s.strokeStyle=C(i.strokeStyle,a),s.setLineDash(C(i.lineDash,[])),o.usePointStyle){const o={radius:g*Math.SQRT2/2,pointStyle:i.pointStyle,rotation:i.rotation,borderWidth:n},a=r.xPlus(t,g/2);ne(s,o,a,e+u)}else{const o=e+Math.max((d-f)/2,0),a=r.leftForLtr(t,g),h=xe(i.borderRadius);s.beginPath(),Object.values(h).some((t=>0!==t))?ue(s,{x:a,y:o,w:g,h:f,radius:h}):s.rect(a,o,g,f),s.fill(),0!==n&&s.stroke()}s.restore()}(r.x(S),D,v),S=((t,e,i,s)=>t===(s?"left":"right")?i:"center"===t?(e+i)/2:e)(A,S+g+u,b?S+k:this.right,t.rtl),function(t,e,i){ce(s,i.text,t,e+m/2,h,{strikethrough:i.hidden,textAlign:r.textAlign(i.textAlign)})}(r.x(S),D,v),b?p.x+=k+c:p.y+=y})),ui(this.ctx,t.textDirection)}drawTitle(){const t=this.options,e=t.title,i=ye(e.font),s=_e(e.padding);if(!e.display)return;const n=ci(t.rtl,this.left,this.width),o=this.ctx,a=e.position,r=i.size/2,h=s.top+r;let l,c=this.left,d=this.width;if(this.isHorizontal())d=Math.max(...this.lineWidths),l=this.top+h,c=x(t.align,c,this.right-d);else{const e=this.columnSizes.reduce(((t,e)=>Math.max(t,e.height)),0);l=h+x(t.align,this.top,this.bottom-e-t.labels.padding-this._computeTitleHeight())}const u=x(a,c,c+d);o.textAlign=n.textAlign(b(a)),o.textBaseline="middle",o.strokeStyle=e.color,o.fillStyle=e.color,o.font=i.string,ce(o,e.text,u,l,i)}_computeTitleHeight(){const t=this.options.title,e=ye(t.font),i=_e(t.padding);return t.display?e.lineHeight+i.height:0}_getLegendItemAt(t,e){let i,s,n;if(ut(t,this.left,this.right)&&ut(e,this.top,this.bottom))for(n=this.legendHitBoxes,i=0;i<n.length;++i)if(s=n[i],ut(t,s.left,s.left+s.width)&&ut(e,s.top,s.top+s.height))return this.legendItems[i];return null}handleEvent(t){const e=this.options;if(!function(t,e){return!("mousemove"!==t||!e.onHover&&!e.onLeave)||!(!e.onClick||"click"!==t&&"mouseup"!==t)}(t.type,e))return;const i=this._getLegendItemAt(t.x,t.y);if("mousemove"===t.type){const o=this._hoveredItem,a=(n=i,null!==(s=o)&&null!==n&&s.datasetIndex===n.datasetIndex&&s.index===n.index);o&&!a&&D(e.onLeave,[t,o,this],this),this._hoveredItem=i,i&&!a&&D(e.onHover,[t,i,this],this)}else i&&D(e.onClick,[t,i,this],this);var s,n}}var po={id:"legend",_element:uo,start(t,e,i){const s=t.legend=new uo({ctx:t.ctx,options:i,chart:t});vs.configure(t,s,i),vs.addBox(t,s)},stop(t){vs.removeBox(t,t.legend),delete t.legend},beforeUpdate(t,e,i){const s=t.legend;vs.configure(t,s,i),s.options=i},afterUpdate(t){const e=t.legend;e.buildLabels(),e.adjustHitBoxes()},afterEvent(t,e){e.replay||t.legend.handleEvent(e.event)},defaults:{display:!0,position:"top",align:"center",fullSize:!0,reverse:!1,weight:1e3,onClick(t,e,i){const s=e.datasetIndex,n=i.chart;n.isDatasetVisible(s)?(n.hide(s),e.hidden=!0):(n.show(s),e.hidden=!1)},onHover:null,onLeave:null,labels:{color:t=>t.chart.options.color,boxWidth:40,padding:10,generateLabels(t){const e=t.data.datasets,{labels:{usePointStyle:i,pointStyle:s,textAlign:n,color:o}}=t.legend.options;return t._getSortedDatasetMetas().map((t=>{const a=t.controller.getStyle(i?0:void 0),r=_e(a.borderWidth);return{text:e[t.index].label,fillStyle:a.backgroundColor,fontColor:o,hidden:!t.visible,lineCap:a.borderCapStyle,lineDash:a.borderDash,lineDashOffset:a.borderDashOffset,lineJoin:a.borderJoinStyle,lineWidth:(r.width+r.height)/4,strokeStyle:a.borderColor,pointStyle:s||a.pointStyle,rotation:a.rotation,textAlign:n||a.textAlign,borderRadius:0,datasetIndex:t.index}}),this)}},title:{color:t=>t.chart.options.color,display:!1,position:"center",text:""}},descriptors:{_scriptable:t=>!t.startsWith("on"),labels:{_scriptable:t=>!["generateLabels","filter","sort"].includes(t)}}};class go extends Fs{constructor(t){super(),this.chart=t.chart,this.options=t.options,this.ctx=t.ctx,this._padding=void 0,this.top=void 0,this.bottom=void 0,this.left=void 0,this.right=void 0,this.width=void 0,this.height=void 0,this.position=void 0,this.weight=void 0,this.fullSize=void 0}update(t,e){const i=this.options;if(this.left=0,this.top=0,!i.display)return void(this.width=this.height=this.right=this.bottom=0);this.width=this.right=t,this.height=this.bottom=e;const s=w(i.text)?i.text.length:1;this._padding=_e(i.padding);const n=s*ye(i.font).lineHeight+this._padding.height;this.isHorizontal()?this.height=n:this.width=n}isHorizontal(){const t=this.options.position;return"top"===t||"bottom"===t}_drawArgs(t){const{top:e,left:i,bottom:s,right:n,options:o}=this,a=o.align;let r,h,l,c=0;return this.isHorizontal()?(h=x(a,i,n),l=e+t,r=n-i):("left"===o.position?(h=i+t,l=x(a,s,e),c=-.5*H):(h=n-t,l=x(a,e,s),c=.5*H),r=s-e),{titleX:h,titleY:l,maxWidth:r,rotation:c}}draw(){const t=this.ctx,e=this.options;if(!e.display)return;const i=ye(e.font),s=i.lineHeight/2+this._padding.top,{titleX:n,titleY:o,maxWidth:a,rotation:r}=this._drawArgs(s);ce(t,e.text,0,0,i,{color:e.color,maxWidth:a,rotation:r,textAlign:b(e.align),textBaseline:"middle",translation:[n,o]})}}var fo={id:"title",_element:go,start(t,e,i){!function(t,e){const i=new go({ctx:t.ctx,options:e,chart:t});vs.configure(t,i,e),vs.addBox(t,i),t.titleBlock=i}(t,i)},stop(t){const e=t.titleBlock;vs.removeBox(t,e),delete t.titleBlock},beforeUpdate(t,e,i){const s=t.titleBlock;vs.configure(t,s,i),s.options=i},defaults:{align:"center",display:!1,font:{weight:"bold"},fullSize:!0,padding:10,position:"top",text:"",weight:2e3},defaultRoutes:{color:"color"},descriptors:{_scriptable:!0,_indexable:!1}};const mo=new WeakMap;var bo={id:"subtitle",start(t,e,i){const s=new go({ctx:t.ctx,options:i,chart:t});vs.configure(t,s,i),vs.addBox(t,s),mo.set(t,s)},stop(t){vs.removeBox(t,mo.get(t)),mo.delete(t)},beforeUpdate(t,e,i){const s=mo.get(t);vs.configure(t,s,i),s.options=i},defaults:{align:"center",display:!1,font:{weight:"normal"},fullSize:!0,padding:0,position:"top",text:"",weight:1500},defaultRoutes:{color:"color"},descriptors:{_scriptable:!0,_indexable:!1}};const xo={average(t){if(!t.length)return!1;let e,i,s=0,n=0,o=0;for(e=0,i=t.length;e<i;++e){const i=t[e].element;if(i&&i.hasValue()){const t=i.tooltipPosition();s+=t.x,n+=t.y,++o}}return{x:s/o,y:n/o}},nearest(t,e){if(!t.length)return!1;let i,s,n,o=e.x,a=e.y,r=Number.POSITIVE_INFINITY;for(i=0,s=t.length;i<s;++i){const s=t[i].element;if(s&&s.hasValue()){const t=rt(e,s.getCenterPoint());t<r&&(r=t,n=s)}}if(n){const t=n.tooltipPosition();o=t.x,a=t.y}return{x:o,y:a}}};function _o(t,e){return e&&(w(e)?Array.prototype.push.apply(t,e):t.push(e)),t}function yo(t){return("string"==typeof t||t instanceof String)&&t.indexOf("\n")>-1?t.split("\n"):t}function vo(t,e){const{element:i,datasetIndex:s,index:n}=e,o=t.getDatasetMeta(s).controller,{label:a,value:r}=o.getLabelAndValue(n);return{chart:t,label:a,parsed:o.getParsed(n),raw:t.data.datasets[s].data[n],formattedValue:r,dataset:o.getDataset(),dataIndex:n,datasetIndex:s,element:i}}function wo(t,e){const i=t.chart.ctx,{body:s,footer:n,title:o}=t,{boxWidth:a,boxHeight:r}=e,h=ye(e.bodyFont),l=ye(e.titleFont),c=ye(e.footerFont),d=o.length,u=n.length,p=s.length,g=_e(e.padding);let f=g.height,m=0,b=s.reduce(((t,e)=>t+e.before.length+e.lines.length+e.after.length),0);b+=t.beforeBody.length+t.afterBody.length,d&&(f+=d*l.lineHeight+(d-1)*e.titleSpacing+e.titleMarginBottom),b&&(f+=p*(e.displayColors?Math.max(r,h.lineHeight):h.lineHeight)+(b-p)*h.lineHeight+(b-1)*e.bodySpacing),u&&(f+=e.footerMarginTop+u*c.lineHeight+(u-1)*e.footerSpacing);let x=0;const _=function(t){m=Math.max(m,i.measureText(t).width+x)};return i.save(),i.font=l.string,P(t.title,_),i.font=h.string,P(t.beforeBody.concat(t.afterBody),_),x=e.displayColors?a+2+e.boxPadding:0,P(s,(t=>{P(t.before,_),P(t.lines,_),P(t.after,_)})),x=0,i.font=c.string,P(t.footer,_),i.restore(),m+=g.width,{width:m,height:f}}function Mo(t,e,i,s){const{x:n,width:o}=i,{width:a,chartArea:{left:r,right:h}}=t;let l="center";return"center"===s?l=n<=(r+h)/2?"left":"right":n<=o/2?l="left":n>=a-o/2&&(l="right"),function(t,e,i,s){const{x:n,width:o}=s,a=i.caretSize+i.caretPadding;return"left"===t&&n+o+a>e.width||"right"===t&&n-o-a<0||void 0}(l,t,e,i)&&(l="center"),l}function Ao(t,e,i){const s=i.yAlign||e.yAlign||function(t,e){const{y:i,height:s}=e;return i<s/2?"top":i>t.height-s/2?"bottom":"center"}(t,i);return{xAlign:i.xAlign||e.xAlign||Mo(t,e,i,s),yAlign:s}}function ko(t,e,i,s){const{caretSize:n,caretPadding:o,cornerRadius:a}=t,{xAlign:r,yAlign:h}=i,l=n+o,{topLeft:c,topRight:d,bottomLeft:u,bottomRight:p}=xe(a);let g=function(t,e){let{x:i,width:s}=t;return"right"===e?i-=s:"center"===e&&(i-=s/2),i}(e,r);const f=function(t,e,i){let{y:s,height:n}=t;return"top"===e?s+=i:s-="bottom"===e?n+i:n/2,s}(e,h,l);return"center"===h?"left"===r?g+=l:"right"===r&&(g-=l):"left"===r?g-=Math.max(c,u)+n:"right"===r&&(g+=Math.max(d,p)+n),{x:dt(g,0,s.width-e.width),y:dt(f,0,s.height-e.height)}}function Co(t,e,i){const s=_e(i.padding);return"center"===e?t.x+t.width/2:"right"===e?t.x+t.width-s.right:t.x+s.left}function So(t){return _o([],yo(t))}function Do(t,e){const i=e&&e.dataset&&e.dataset.tooltip&&e.dataset.tooltip.callbacks;return i?t.override(i):t}class Po extends Fs{constructor(t){super(),this.opacity=0,this._active=[],this._eventPosition=void 0,this._size=void 0,this._cachedAnimations=void 0,this._tooltipItems=[],this.$animations=void 0,this.$context=void 0,this.chart=t.chart||t._chart,this._chart=this.chart,this.options=t.options,this.dataPoints=void 0,this.title=void 0,this.beforeBody=void 0,this.body=void 0,this.afterBody=void 0,this.footer=void 0,this.xAlign=void 0,this.yAlign=void 0,this.x=void 0,this.y=void 0,this.height=void 0,this.width=void 0,this.caretX=void 0,this.caretY=void 0,this.labelColors=void 0,this.labelPointStyles=void 0,this.labelTextColors=void 0}initialize(t){this.options=t,this._cachedAnimations=void 0,this.$context=void 0}_resolveAnimations(){const t=this._cachedAnimations;if(t)return t;const e=this.chart,i=this.options.setContext(this.getContext()),s=i.enabled&&e.options.animation&&i.animations,n=new Ai(this.chart,s);return s._cacheable&&(this._cachedAnimations=Object.freeze(n)),n}getContext(){return this.$context||(this.$context=(this,we(this.chart.getContext(),{tooltip:this,tooltipItems:this._tooltipItems,type:"tooltip"})))}getTitle(t,e){const{callbacks:i}=e,s=i.beforeTitle.apply(this,[t]),n=i.title.apply(this,[t]),o=i.afterTitle.apply(this,[t]);let a=[];return a=_o(a,yo(s)),a=_o(a,yo(n)),a=_o(a,yo(o)),a}getBeforeBody(t,e){return So(e.callbacks.beforeBody.apply(this,[t]))}getBody(t,e){const{callbacks:i}=e,s=[];return P(t,(t=>{const e={before:[],lines:[],after:[]},n=Do(i,t);_o(e.before,yo(n.beforeLabel.call(this,t))),_o(e.lines,n.label.call(this,t)),_o(e.after,yo(n.afterLabel.call(this,t))),s.push(e)})),s}getAfterBody(t,e){return So(e.callbacks.afterBody.apply(this,[t]))}getFooter(t,e){const{callbacks:i}=e,s=i.beforeFooter.apply(this,[t]),n=i.footer.apply(this,[t]),o=i.afterFooter.apply(this,[t]);let a=[];return a=_o(a,yo(s)),a=_o(a,yo(n)),a=_o(a,yo(o)),a}_createItems(t){const e=this._active,i=this.chart.data,s=[],n=[],o=[];let a,r,h=[];for(a=0,r=e.length;a<r;++a)h.push(vo(this.chart,e[a]));return t.filter&&(h=h.filter(((e,s,n)=>t.filter(e,s,n,i)))),t.itemSort&&(h=h.sort(((e,s)=>t.itemSort(e,s,i)))),P(h,(e=>{const i=Do(t.callbacks,e);s.push(i.labelColor.call(this,e)),n.push(i.labelPointStyle.call(this,e)),o.push(i.labelTextColor.call(this,e))})),this.labelColors=s,this.labelPointStyles=n,this.labelTextColors=o,this.dataPoints=h,h}update(t,e){const i=this.options.setContext(this.getContext()),s=this._active;let n,o=[];if(s.length){const t=xo[i.position].call(this,s,this._eventPosition);o=this._createItems(i),this.title=this.getTitle(o,i),this.beforeBody=this.getBeforeBody(o,i),this.body=this.getBody(o,i),this.afterBody=this.getAfterBody(o,i),this.footer=this.getFooter(o,i);const e=this._size=wo(this,i),a=Object.assign({},t,e),r=Ao(this.chart,i,a),h=ko(i,a,r,this.chart);this.xAlign=r.xAlign,this.yAlign=r.yAlign,n={opacity:1,x:h.x,y:h.y,width:e.width,height:e.height,caretX:t.x,caretY:t.y}}else 0!==this.opacity&&(n={opacity:0});this._tooltipItems=o,this.$context=void 0,n&&this._resolveAnimations().update(this,n),t&&i.external&&i.external.call(this,{chart:this.chart,tooltip:this,replay:e})}drawCaret(t,e,i,s){const n=this.getCaretPosition(t,i,s);e.lineTo(n.x1,n.y1),e.lineTo(n.x2,n.y2),e.lineTo(n.x3,n.y3)}getCaretPosition(t,e,i){const{xAlign:s,yAlign:n}=this,{caretSize:o,cornerRadius:a}=i,{topLeft:r,topRight:h,bottomLeft:l,bottomRight:c}=xe(a),{x:d,y:u}=t,{width:p,height:g}=e;let f,m,b,x,_,y;return"center"===n?(_=u+g/2,"left"===s?(f=d,m=f-o,x=_+o,y=_-o):(f=d+p,m=f+o,x=_-o,y=_+o),b=f):(m="left"===s?d+Math.max(r,l)+o:"right"===s?d+p-Math.max(h,c)-o:this.caretX,"top"===n?(x=u,_=x-o,f=m-o,b=m+o):(x=u+g,_=x+o,f=m+o,b=m-o),y=x),{x1:f,x2:m,x3:b,y1:x,y2:_,y3:y}}drawTitle(t,e,i){const s=this.title,n=s.length;let o,a,r;if(n){const h=ci(i.rtl,this.x,this.width);for(t.x=Co(this,i.titleAlign,i),e.textAlign=h.textAlign(i.titleAlign),e.textBaseline="middle",o=ye(i.titleFont),a=i.titleSpacing,e.fillStyle=i.titleColor,e.font=o.string,r=0;r<n;++r)e.fillText(s[r],h.x(t.x),t.y+o.lineHeight/2),t.y+=o.lineHeight+a,r+1===n&&(t.y+=i.titleMarginBottom-a)}}_drawColorBox(t,e,i,s,n){const o=this.labelColors[i],a=this.labelPointStyles[i],{boxHeight:r,boxWidth:h,boxPadding:l}=n,c=ye(n.bodyFont),d=Co(this,"left",n),u=s.x(d),p=r<c.lineHeight?(c.lineHeight-r)/2:0,g=e.y+p;if(n.usePointStyle){const e={radius:Math.min(h,r)/2,pointStyle:a.pointStyle,rotation:a.rotation,borderWidth:1},i=s.leftForLtr(u,h)+h/2,l=g+r/2;t.strokeStyle=n.multiKeyBackground,t.fillStyle=n.multiKeyBackground,ne(t,e,i,l),t.strokeStyle=o.borderColor,t.fillStyle=o.backgroundColor,ne(t,e,i,l)}else{t.lineWidth=o.borderWidth||1,t.strokeStyle=o.borderColor,t.setLineDash(o.borderDash||[]),t.lineDashOffset=o.borderDashOffset||0;const e=s.leftForLtr(u,h-l),i=s.leftForLtr(s.xPlus(u,1),h-l-2),a=xe(o.borderRadius);Object.values(a).some((t=>0!==t))?(t.beginPath(),t.fillStyle=n.multiKeyBackground,ue(t,{x:e,y:g,w:h,h:r,radius:a}),t.fill(),t.stroke(),t.fillStyle=o.backgroundColor,t.beginPath(),ue(t,{x:i,y:g+1,w:h-2,h:r-2,radius:a}),t.fill()):(t.fillStyle=n.multiKeyBackground,t.fillRect(e,g,h,r),t.strokeRect(e,g,h,r),t.fillStyle=o.backgroundColor,t.fillRect(i,g+1,h-2,r-2))}t.fillStyle=this.labelTextColors[i]}drawBody(t,e,i){const{body:s}=this,{bodySpacing:n,bodyAlign:o,displayColors:a,boxHeight:r,boxWidth:h,boxPadding:l}=i,c=ye(i.bodyFont);let d=c.lineHeight,u=0;const p=ci(i.rtl,this.x,this.width),g=function(i){e.fillText(i,p.x(t.x+u),t.y+d/2),t.y+=d+n},f=p.textAlign(o);let m,b,x,_,y,v,w;for(e.textAlign=o,e.textBaseline="middle",e.font=c.string,t.x=Co(this,f,i),e.fillStyle=i.bodyColor,P(this.beforeBody,g),u=a&&"right"!==f?"center"===o?h/2+l:h+2+l:0,_=0,v=s.length;_<v;++_){for(m=s[_],b=this.labelTextColors[_],e.fillStyle=b,P(m.before,g),x=m.lines,a&&x.length&&(this._drawColorBox(e,t,_,p,i),d=Math.max(c.lineHeight,r)),y=0,w=x.length;y<w;++y)g(x[y]),d=c.lineHeight;P(m.after,g)}u=0,d=c.lineHeight,P(this.afterBody,g),t.y-=n}drawFooter(t,e,i){const s=this.footer,n=s.length;let o,a;if(n){const r=ci(i.rtl,this.x,this.width);for(t.x=Co(this,i.footerAlign,i),t.y+=i.footerMarginTop,e.textAlign=r.textAlign(i.footerAlign),e.textBaseline="middle",o=ye(i.footerFont),e.fillStyle=i.footerColor,e.font=o.string,a=0;a<n;++a)e.fillText(s[a],r.x(t.x),t.y+o.lineHeight/2),t.y+=o.lineHeight+i.footerSpacing}}drawBackground(t,e,i,s){const{xAlign:n,yAlign:o}=this,{x:a,y:r}=t,{width:h,height:l}=i,{topLeft:c,topRight:d,bottomLeft:u,bottomRight:p}=xe(s.cornerRadius);e.fillStyle=s.backgroundColor,e.strokeStyle=s.borderColor,e.lineWidth=s.borderWidth,e.beginPath(),e.moveTo(a+c,r),"top"===o&&this.drawCaret(t,e,i,s),e.lineTo(a+h-d,r),e.quadraticCurveTo(a+h,r,a+h,r+d),"center"===o&&"right"===n&&this.drawCaret(t,e,i,s),e.lineTo(a+h,r+l-p),e.quadraticCurveTo(a+h,r+l,a+h-p,r+l),"bottom"===o&&this.drawCaret(t,e,i,s),e.lineTo(a+u,r+l),e.quadraticCurveTo(a,r+l,a,r+l-u),"center"===o&&"left"===n&&this.drawCaret(t,e,i,s),e.lineTo(a,r+c),e.quadraticCurveTo(a,r,a+c,r),e.closePath(),e.fill(),s.borderWidth>0&&e.stroke()}_updateAnimationTarget(t){const e=this.chart,i=this.$animations,s=i&&i.x,n=i&&i.y;if(s||n){const i=xo[t.position].call(this,this._active,this._eventPosition);if(!i)return;const o=this._size=wo(this,t),a=Object.assign({},i,this._size),r=Ao(e,t,a),h=ko(t,a,r,e);s._to===h.x&&n._to===h.y||(this.xAlign=r.xAlign,this.yAlign=r.yAlign,this.width=o.width,this.height=o.height,this.caretX=i.x,this.caretY=i.y,this._resolveAnimations().update(this,h))}}draw(t){const e=this.options.setContext(this.getContext());let i=this.opacity;if(!i)return;this._updateAnimationTarget(e);const s={width:this.width,height:this.height},n={x:this.x,y:this.y};i=Math.abs(i)<.001?0:i;const o=_e(e.padding),a=this.title.length||this.beforeBody.length||this.body.length||this.afterBody.length||this.footer.length;e.enabled&&a&&(t.save(),t.globalAlpha=i,this.drawBackground(n,t,s,e),di(t,e.textDirection),n.y+=o.top,this.drawTitle(n,t,e),this.drawBody(n,t,e),this.drawFooter(n,t,e),ui(t,e.textDirection),t.restore())}getActiveElements(){return this._active||[]}setActiveElements(t,e){const i=this._active,s=t.map((({datasetIndex:t,index:e})=>{const i=this.chart.getDatasetMeta(t);if(!i)throw new Error("Cannot find a dataset at index "+t);return{datasetIndex:t,element:i.data[e],index:e}})),n=!E(i,s),o=this._positionChanged(s,e);(n||o)&&(this._active=s,this._eventPosition=e,this._ignoreReplayEvents=!0,this.update(!0))}handleEvent(t,e,i=!0){if(e&&this._ignoreReplayEvents)return!1;this._ignoreReplayEvents=!1;const s=this.options,n=this._active||[],o=this._getActiveElements(t,n,e,i),a=this._positionChanged(o,t),r=e||!E(o,n)||a;return r&&(this._active=o,(s.enabled||s.external)&&(this._eventPosition={x:t.x,y:t.y},this.update(!0,e))),r}_getActiveElements(t,e,i,s){const n=this.options;if("mouseout"===t.type)return[];if(!s)return e;const o=this.chart.getElementsAtEventForMode(t,n.mode,n,i);return n.reverse&&o.reverse(),o}_positionChanged(t,e){const{caretX:i,caretY:s,options:n}=this,o=xo[n.position].call(this,t,e);return!1!==o&&(i!==o.x||s!==o.y)}}Po.positioners=xo;var Eo={id:"tooltip",_element:Po,positioners:xo,afterInit(t,e,i){i&&(t.tooltip=new Po({chart:t,options:i}))},beforeUpdate(t,e,i){t.tooltip&&t.tooltip.initialize(i)},reset(t,e,i){t.tooltip&&t.tooltip.initialize(i)},afterDraw(t){const e=t.tooltip,i={tooltip:e};!1!==t.notifyPlugins("beforeTooltipDraw",i)&&(e&&e.draw(t.ctx),t.notifyPlugins("afterTooltipDraw",i))},afterEvent(t,e){if(t.tooltip){const i=e.replay;t.tooltip.handleEvent(e.event,i,e.inChartArea)&&(e.changed=!0)}},defaults:{enabled:!0,external:null,position:"average",backgroundColor:"rgba(0,0,0,0.8)",titleColor:"#fff",titleFont:{weight:"bold"},titleSpacing:2,titleMarginBottom:6,titleAlign:"left",bodyColor:"#fff",bodySpacing:2,bodyFont:{},bodyAlign:"left",footerColor:"#fff",footerSpacing:2,footerMarginTop:6,footerFont:{weight:"bold"},footerAlign:"left",padding:6,caretPadding:2,caretSize:5,cornerRadius:6,boxHeight:(t,e)=>e.bodyFont.size,boxWidth:(t,e)=>e.bodyFont.size,multiKeyBackground:"#fff",displayColors:!0,boxPadding:0,borderColor:"rgba(0,0,0,0)",borderWidth:0,animation:{duration:400,easing:"easeOutQuart"},animations:{numbers:{type:"number",properties:["x","y","width","height","caretX","caretY"]},opacity:{easing:"linear",duration:200}},callbacks:{beforeTitle:_,title(t){if(t.length>0){const e=t[0],i=e.chart.data.labels,s=i?i.length:0;if(this&&this.options&&"dataset"===this.options.mode)return e.dataset.label||"";if(e.label)return e.label;if(s>0&&e.dataIndex<s)return i[e.dataIndex]}return""},afterTitle:_,beforeBody:_,beforeLabel:_,label(t){if(this&&this.options&&"dataset"===this.options.mode)return t.label+": "+t.formattedValue||t.formattedValue;let e=t.dataset.label||"";e&&(e+=": ");const i=t.formattedValue;return v(i)||(e+=i),e},labelColor(t){const e=t.chart.getDatasetMeta(t.datasetIndex).controller.getStyle(t.dataIndex);return{borderColor:e.borderColor,backgroundColor:e.backgroundColor,borderWidth:e.borderWidth,borderDash:e.borderDash,borderDashOffset:e.borderDashOffset,borderRadius:0}},labelTextColor(){return this.options.bodyColor},labelPointStyle(t){const e=t.chart.getDatasetMeta(t.datasetIndex).controller.getStyle(t.dataIndex);return{pointStyle:e.pointStyle,rotation:e.rotation}},afterLabel:_,afterBody:_,beforeFooter:_,footer:_,afterFooter:_}},defaultRoutes:{bodyFont:"font",footerFont:"font",titleFont:"font"},descriptors:{_scriptable:t=>"filter"!==t&&"itemSort"!==t&&"external"!==t,_indexable:!1,callbacks:{_scriptable:!1,_indexable:!1},animation:{_fallback:!1},animations:{_fallback:"animation"}},additionalOptionScopes:["interaction"]},Oo=Object.freeze({__proto__:null,Decimation:Xn,Filler:lo,Legend:po,SubTitle:bo,Title:fo,Tooltip:Eo});class To extends qs{constructor(t){super(t),this._startValue=void 0,this._valueRange=0,this._addedLabels=[]}init(t){const e=this._addedLabels;if(e.length){const t=this.getLabels();for(const{index:i,label:s}of e)t[i]===s&&t.splice(i,1);this._addedLabels=[]}super.init(t)}parse(t,e){if(v(t))return null;const i=this.getLabels();return((t,e)=>null===t?null:dt(Math.round(t),0,e))(e=isFinite(e)&&i[e]===t?e:function(t,e,i,s){const n=t.indexOf(e);return-1===n?((t,e,i,s)=>("string"==typeof e?(i=t.push(e)-1,s.unshift({index:i,label:e})):isNaN(e)&&(i=null),i))(t,e,i,s):n!==t.lastIndexOf(e)?i:n}(i,t,C(e,t),this._addedLabels),i.length-1)}determineDataLimits(){const{minDefined:t,maxDefined:e}=this.getUserBounds();let{min:i,max:s}=this.getMinMax(!0);"ticks"===this.options.bounds&&(t||(i=0),e||(s=this.getLabels().length-1)),this.min=i,this.max=s}buildTicks(){const t=this.min,e=this.max,i=this.options.offset,s=[];let n=this.getLabels();n=0===t&&e===n.length-1?n:n.slice(t,e+1),this._valueRange=Math.max(n.length-(i?0:1),1),this._startValue=this.min-(i?.5:0);for(let i=t;i<=e;i++)s.push({value:i});return s}getLabelForValue(t){const e=this.getLabels();return t>=0&&t<e.length?e[t]:t}configure(){super.configure(),this.isHorizontal()||(this._reversePixels=!this._reversePixels)}getPixelForValue(t){return"number"!=typeof t&&(t=this.parse(t)),null===t?NaN:this.getPixelForDecimal((t-this._startValue)/this._valueRange)}getPixelForTick(t){const e=this.ticks;return t<0||t>e.length-1?null:this.getPixelForValue(e[t].value)}getValueForPixel(t){return Math.round(this._startValue+this.getDecimalForPixel(t)*this._valueRange)}getBasePixel(){return this.bottom}}function Lo(t,e,{horizontal:i,minRotation:s}){const n=st(s),o=(i?Math.sin(n):Math.cos(n))||.001,a=.75*e*(""+t).length;return Math.min(e/o,a)}To.id="category",To.defaults={ticks:{callback:To.prototype.getLabelForValue}};class Ro extends qs{constructor(t){super(t),this.start=void 0,this.end=void 0,this._startValue=void 0,this._endValue=void 0,this._valueRange=0}parse(t,e){return v(t)||("number"==typeof t||t instanceof Number)&&!isFinite(+t)?null:+t}handleTickRangeOptions(){const{beginAtZero:t}=this.options,{minDefined:e,maxDefined:i}=this.getUserBounds();let{min:s,max:n}=this;const o=t=>s=e?s:t,a=t=>n=i?n:t;if(t){const t=J(s),e=J(n);t<0&&e<0?a(0):t>0&&e>0&&o(0)}if(s===n){let e=1;(n>=Number.MAX_SAFE_INTEGER||s<=Number.MIN_SAFE_INTEGER)&&(e=Math.abs(.05*n)),a(n+e),t||o(s-e)}this.min=s,this.max=n}getTickLimit(){const t=this.options.ticks;let e,{maxTicksLimit:i,stepSize:s}=t;return s?(e=Math.ceil(this.max/s)-Math.floor(this.min/s)+1,e>1e3&&(console.warn(`scales.${this.id}.ticks.stepSize: ${s} would result generating up to ${e} ticks. Limiting to 1000.`),e=1e3)):(e=this.computeTickLimit(),i=i||11),i&&(e=Math.min(i,e)),e}computeTickLimit(){return Number.POSITIVE_INFINITY}buildTicks(){const t=this.options,e=t.ticks;let i=this.getTickLimit();i=Math.max(2,i);const s=function(t,e){const i=[],{bounds:s,step:n,min:o,max:a,precision:r,count:h,maxTicks:l,maxDigits:c,includeBounds:d}=t,u=n||1,p=l-1,{min:g,max:f}=e,m=!v(o),b=!v(a),x=!v(h),_=(f-g)/(c+1);let y,w,M,A,k=Q((f-g)/p/u)*u;if(k<1e-14&&!m&&!b)return[{value:g},{value:f}];A=Math.ceil(f/k)-Math.floor(g/k),A>p&&(k=Q(A*k/p/u)*u),v(r)||(y=Math.pow(10,r),k=Math.ceil(k*y)/y),"ticks"===s?(w=Math.floor(g/k)*k,M=Math.ceil(f/k)*k):(w=g,M=f),m&&b&&n&&function(t,e){const i=Math.round(t);return i-e<=t&&i+e>=t}((a-o)/n,k/1e3)?(A=Math.round(Math.min((a-o)/k,l)),k=(a-o)/A,w=o,M=a):x?(w=m?o:w,M=b?a:M,A=h-1,k=(M-w)/A):(A=(M-w)/k,A=et(A,Math.round(A),k/1e3)?Math.round(A):Math.ceil(A));const C=Math.max(ot(k),ot(w));y=Math.pow(10,v(r)?C:r),w=Math.round(w*y)/y,M=Math.round(M*y)/y;let S=0;for(m&&(d&&w!==o?(i.push({value:o}),w<o&&S++,et(Math.round((w+S*k)*y)/y,o,Lo(o,_,t))&&S++):w<o&&S++);S<A;++S)i.push({value:Math.round((w+S*k)*y)/y});return b&&d&&M!==a?i.length&&et(i[i.length-1].value,a,Lo(a,_,t))?i[i.length-1].value=a:i.push({value:a}):b&&M!==a||i.push({value:M}),i}({maxTicks:i,bounds:t.bounds,min:t.min,max:t.max,precision:e.precision,step:e.stepSize,count:e.count,maxDigits:this._maxDigits(),horizontal:this.isHorizontal(),minRotation:e.minRotation||0,includeBounds:!1!==e.includeBounds},this._range||this);return"ticks"===t.bounds&&it(s,this,"value"),t.reverse?(s.reverse(),this.start=this.max,this.end=this.min):(this.start=this.min,this.end=this.max),s}configure(){const t=this.ticks;let e=this.min,i=this.max;if(super.configure(),this.options.offset&&t.length){const s=(i-e)/Math.max(t.length-1,1)/2;e-=s,i+=s}this._startValue=e,this._endValue=i,this._valueRange=i-e}getLabelForValue(t){return li(t,this.chart.options.locale,this.options.ticks.format)}}class Io extends Ro{determineDataLimits(){const{min:t,max:e}=this.getMinMax(!0);this.min=A(t)?t:0,this.max=A(e)?e:1,this.handleTickRangeOptions()}computeTickLimit(){const t=this.isHorizontal(),e=t?this.width:this.height,i=st(this.options.ticks.minRotation),s=(t?Math.sin(i):Math.cos(i))||.001,n=this._resolveTickFontOptions(0);return Math.ceil(e/Math.min(40,n.lineHeight/s))}getPixelForValue(t){return null===t?NaN:this.getPixelForDecimal((t-this._startValue)/this._valueRange)}getValueForPixel(t){return this._startValue+this.getDecimalForPixel(t)*this._valueRange}}function Bo(t){return 1==t/Math.pow(10,Math.floor(G(t)))}Io.id="linear",Io.defaults={ticks:{callback:Ws.formatters.numeric}};class zo extends qs{constructor(t){super(t),this.start=void 0,this.end=void 0,this._startValue=void 0,this._valueRange=0}parse(t,e){const i=Ro.prototype.parse.apply(this,[t,e]);if(0!==i)return A(i)&&i>0?i:null;this._zero=!0}determineDataLimits(){const{min:t,max:e}=this.getMinMax(!0);this.min=A(t)?Math.max(0,t):null,this.max=A(e)?Math.max(0,e):null,this.options.beginAtZero&&(this._zero=!0),this.handleTickRangeOptions()}handleTickRangeOptions(){const{minDefined:t,maxDefined:e}=this.getUserBounds();let i=this.min,s=this.max;const n=e=>i=t?i:e,o=t=>s=e?s:t,a=(t,e)=>Math.pow(10,Math.floor(G(t))+e);i===s&&(i<=0?(n(1),o(10)):(n(a(i,-1)),o(a(s,1)))),i<=0&&n(a(s,-1)),s<=0&&o(a(i,1)),this._zero&&this.min!==this._suggestedMin&&i===a(this.min,0)&&n(a(i,-1)),this.min=i,this.max=s}buildTicks(){const t=this.options,e=function(t,e){const i=Math.floor(G(e.max)),s=Math.ceil(e.max/Math.pow(10,i)),n=[];let o=k(t.min,Math.pow(10,Math.floor(G(e.min)))),a=Math.floor(G(o)),r=Math.floor(o/Math.pow(10,a)),h=a<0?Math.pow(10,Math.abs(a)):1;do{n.push({value:o,major:Bo(o)}),++r,10===r&&(r=1,++a,h=a>=0?1:h),o=Math.round(r*Math.pow(10,a)*h)/h}while(a<i||a===i&&r<s);const l=k(t.max,o);return n.push({value:l,major:Bo(o)}),n}({min:this._userMin,max:this._userMax},this);return"ticks"===t.bounds&&it(e,this,"value"),t.reverse?(e.reverse(),this.start=this.max,this.end=this.min):(this.start=this.min,this.end=this.max),e}getLabelForValue(t){return void 0===t?"0":li(t,this.chart.options.locale,this.options.ticks.format)}configure(){const t=this.min;super.configure(),this._startValue=G(t),this._valueRange=G(this.max)-G(t)}getPixelForValue(t){return void 0!==t&&0!==t||(t=this.min),null===t||isNaN(t)?NaN:this.getPixelForDecimal(t===this.min?0:(G(t)-this._startValue)/this._valueRange)}getValueForPixel(t){const e=this.getDecimalForPixel(t);return Math.pow(10,this._startValue+e*this._valueRange)}}function Fo(t){const e=t.ticks;if(e.display&&t.display){const t=_e(e.backdropPadding);return C(e.font&&e.font.size,Qt.font.size)+t.height}return 0}function Vo(t,e,i,s,n){return t===s||t===n?{start:e-i/2,end:e+i/2}:t<s||t>n?{start:e-i,end:e}:{start:e,end:e+i}}function Wo(t,e,i,s,n){const o=Math.abs(Math.sin(i)),a=Math.abs(Math.cos(i));let r=0,h=0;s.start<e.l?(r=(e.l-s.start)/o,t.l=Math.min(t.l,e.l-r)):s.end>e.r&&(r=(s.end-e.r)/o,t.r=Math.max(t.r,e.r+r)),n.start<e.t?(h=(e.t-n.start)/a,t.t=Math.min(t.t,e.t-h)):n.end>e.b&&(h=(n.end-e.b)/a,t.b=Math.max(t.b,e.b+h))}function jo(t){return 0===t||180===t?"center":t<180?"left":"right"}function No(t,e,i){return 90===i||270===i?t-=e/2:(i>270||i<90)&&(t-=e),t}function Ho(t,e,i,s){const{ctx:n}=t;if(i)n.arc(t.xCenter,t.yCenter,e,0,$);else{let i=t.getPointPosition(0,e);n.moveTo(i.x,i.y);for(let o=1;o<s;o++)i=t.getPointPosition(o,e),n.lineTo(i.x,i.y)}}zo.id="logarithmic",zo.defaults={ticks:{callback:Ws.formatters.logarithmic,major:{enabled:!0}}};class $o extends Ro{constructor(t){super(t),this.xCenter=void 0,this.yCenter=void 0,this.drawingArea=void 0,this._pointLabels=[],this._pointLabelItems=[]}setDimensions(){const t=this._padding=_e(Fo(this.options)/2),e=this.width=this.maxWidth-t.width,i=this.height=this.maxHeight-t.height;this.xCenter=Math.floor(this.left+e/2+t.left),this.yCenter=Math.floor(this.top+i/2+t.top),this.drawingArea=Math.floor(Math.min(e,i)/2)}determineDataLimits(){const{min:t,max:e}=this.getMinMax(!1);this.min=A(t)&&!isNaN(t)?t:0,this.max=A(e)&&!isNaN(e)?e:0,this.handleTickRangeOptions()}computeTickLimit(){return Math.ceil(this.drawingArea/Fo(this.options))}generateTickLabels(t){Ro.prototype.generateTickLabels.call(this,t),this._pointLabels=this.getLabels().map(((t,e)=>{const i=D(this.options.pointLabels.callback,[t,e],this);return i||0===i?i:""})).filter(((t,e)=>this.chart.getDataVisibility(e)))}fit(){const t=this.options;t.display&&t.pointLabels.display?function(t){const e={l:t.left+t._padding.left,r:t.right-t._padding.right,t:t.top+t._padding.top,b:t.bottom-t._padding.bottom},i=Object.assign({},e),s=[],n=[],o=t._pointLabels.length,a=t.options.pointLabels,r=a.centerPointLabels?H/o:0;for(let d=0;d<o;d++){const o=a.setContext(t.getPointLabelContext(d));n[d]=o.padding;const u=t.getPointPosition(d,t.drawingArea+n[d],r),p=ye(o.font),g=(h=t.ctx,l=p,c=w(c=t._pointLabels[d])?c:[c],{w:ee(h,l.string,c),h:c.length*l.lineHeight});s[d]=g;const f=lt(t.getIndexAngle(d)+r),m=Math.round(nt(f));Wo(i,e,f,Vo(m,u.x,g.w,0,180),Vo(m,u.y,g.h,90,270))}var h,l,c;t.setCenterPoint(e.l-i.l,i.r-e.r,e.t-i.t,i.b-e.b),t._pointLabelItems=function(t,e,i){const s=[],n=t._pointLabels.length,o=t.options,a=Fo(o)/2,r=t.drawingArea,h=o.pointLabels.centerPointLabels?H/n:0;for(let o=0;o<n;o++){const n=t.getPointPosition(o,r+a+i[o],h),u=Math.round(nt(lt(n.angle+q))),p=e[o],g=No(n.y,p.h,u),f=jo(u),m=(l=n.x,c=p.w,"right"===(d=f)?l-=c:"center"===d&&(l-=c/2),l);s.push({x:n.x,y:g,textAlign:f,left:m,top:g,right:m+p.w,bottom:g+p.h})}var l,c,d;return s}(t,s,n)}(this):this.setCenterPoint(0,0,0,0)}setCenterPoint(t,e,i,s){this.xCenter+=Math.floor((t-e)/2),this.yCenter+=Math.floor((i-s)/2),this.drawingArea-=Math.min(this.drawingArea/2,Math.max(t,e,i,s))}getIndexAngle(t){return lt(t*($/(this._pointLabels.length||1))+st(this.options.startAngle||0))}getDistanceFromCenterForValue(t){if(v(t))return NaN;const e=this.drawingArea/(this.max-this.min);return this.options.reverse?(this.max-t)*e:(t-this.min)*e}getValueForDistanceFromCenter(t){if(v(t))return NaN;const e=t/(this.drawingArea/(this.max-this.min));return this.options.reverse?this.max-e:this.min+e}getPointLabelContext(t){const e=this._pointLabels||[];if(t>=0&&t<e.length){const i=e[t];return function(t,e,i){return we(t,{label:i,index:e,type:"pointLabel"})}(this.getContext(),t,i)}}getPointPosition(t,e,i=0){const s=this.getIndexAngle(t)-q+i;return{x:Math.cos(s)*e+this.xCenter,y:Math.sin(s)*e+this.yCenter,angle:s}}getPointPositionForValue(t,e){return this.getPointPosition(t,this.getDistanceFromCenterForValue(e))}getBasePosition(t){return this.getPointPositionForValue(t||0,this.getBaseValue())}getPointLabelPosition(t){const{left:e,top:i,right:s,bottom:n}=this._pointLabelItems[t];return{left:e,top:i,right:s,bottom:n}}drawBackground(){const{backgroundColor:t,grid:{circular:e}}=this.options;if(t){const i=this.ctx;i.save(),i.beginPath(),Ho(this,this.getDistanceFromCenterForValue(this._endValue),e,this._pointLabels.length),i.closePath(),i.fillStyle=t,i.fill(),i.restore()}}drawGrid(){const t=this.ctx,e=this.options,{angleLines:i,grid:s}=e,n=this._pointLabels.length;let o,a,r;if(e.pointLabels.display&&function(t,e){const{ctx:i,options:{pointLabels:s}}=t;for(let n=e-1;n>=0;n--){const e=s.setContext(t.getPointLabelContext(n)),o=ye(e.font),{x:a,y:r,textAlign:h,left:l,top:c,right:d,bottom:u}=t._pointLabelItems[n],{backdropColor:p}=e;if(!v(p)){const t=_e(e.backdropPadding);i.fillStyle=p,i.fillRect(l-t.left,c-t.top,d-l+t.width,u-c+t.height)}ce(i,t._pointLabels[n],a,r+o.lineHeight/2,o,{color:e.color,textAlign:h,textBaseline:"middle"})}}(this,n),s.display&&this.ticks.forEach(((t,e)=>{0!==e&&(a=this.getDistanceFromCenterForValue(t.value),function(t,e,i,s){const n=t.ctx,o=e.circular,{color:a,lineWidth:r}=e;!o&&!s||!a||!r||i<0||(n.save(),n.strokeStyle=a,n.lineWidth=r,n.setLineDash(e.borderDash),n.lineDashOffset=e.borderDashOffset,n.beginPath(),Ho(t,i,o,s),n.closePath(),n.stroke(),n.restore())}(this,s.setContext(this.getContext(e-1)),a,n))})),i.display){for(t.save(),o=n-1;o>=0;o--){const s=i.setContext(this.getPointLabelContext(o)),{color:n,lineWidth:h}=s;h&&n&&(t.lineWidth=h,t.strokeStyle=n,t.setLineDash(s.borderDash),t.lineDashOffset=s.borderDashOffset,a=this.getDistanceFromCenterForValue(e.ticks.reverse?this.min:this.max),r=this.getPointPosition(o,a),t.beginPath(),t.moveTo(this.xCenter,this.yCenter),t.lineTo(r.x,r.y),t.stroke())}t.restore()}}drawBorder(){}drawLabels(){const t=this.ctx,e=this.options,i=e.ticks;if(!i.display)return;const s=this.getIndexAngle(0);let n,o;t.save(),t.translate(this.xCenter,this.yCenter),t.rotate(s),t.textAlign="center",t.textBaseline="middle",this.ticks.forEach(((s,a)=>{if(0===a&&!e.reverse)return;const r=i.setContext(this.getContext(a)),h=ye(r.font);if(n=this.getDistanceFromCenterForValue(this.ticks[a].value),r.showLabelBackdrop){t.font=h.string,o=t.measureText(s.label).width,t.fillStyle=r.backdropColor;const e=_e(r.backdropPadding);t.fillRect(-o/2-e.left,-n-h.size/2-e.top,o+e.width,h.size+e.height)}ce(t,s.label,0,-n,h,{color:r.color})})),t.restore()}drawTitle(){}}$o.id="radialLinear",$o.defaults={display:!0,animate:!0,position:"chartArea",angleLines:{display:!0,lineWidth:1,borderDash:[],borderDashOffset:0},grid:{circular:!1},startAngle:0,ticks:{showLabelBackdrop:!0,callback:Ws.formatters.numeric},pointLabels:{backdropColor:void 0,backdropPadding:2,display:!0,font:{size:10},callback:t=>t,padding:5,centerPointLabels:!1}},$o.defaultRoutes={"angleLines.color":"borderColor","pointLabels.color":"color","ticks.color":"color"},$o.descriptors={angleLines:{_fallback:"grid"}};const Yo={millisecond:{common:!0,size:1,steps:1e3},second:{common:!0,size:1e3,steps:60},minute:{common:!0,size:6e4,steps:60},hour:{common:!0,size:36e5,steps:24},day:{common:!0,size:864e5,steps:30},week:{common:!1,size:6048e5,steps:4},month:{common:!0,size:2628e6,steps:12},quarter:{common:!1,size:7884e6,steps:4},year:{common:!0,size:3154e7}},Uo=Object.keys(Yo);function Xo(t,e){return t-e}function qo(t,e){if(v(e))return null;const i=t._adapter,{parser:s,round:n,isoWeekday:o}=t._parseOpts;let a=e;return"function"==typeof s&&(a=s(a)),A(a)||(a="string"==typeof s?i.parse(a,s):i.parse(a)),null===a?null:(n&&(a="week"!==n||!tt(o)&&!0!==o?i.startOf(a,n):i.startOf(a,"isoWeek",o)),+a)}function Ko(t,e,i,s){const n=Uo.length;for(let o=Uo.indexOf(t);o<n-1;++o){const t=Yo[Uo[o]],n=t.steps?t.steps:Number.MAX_SAFE_INTEGER;if(t.common&&Math.ceil((i-e)/(n*t.size))<=s)return Uo[o]}return Uo[n-1]}function Zo(t,e,i){if(i){if(i.length){const{lo:s,hi:n}=Me(i,e);t[i[s]>=e?i[s]:i[n]]=!0}}else t[e]=!0}function Go(t,e,i){const s=[],n={},o=e.length;let a,r;for(a=0;a<o;++a)r=e[a],n[r]=a,s.push({value:r,major:!1});return 0!==o&&i?function(t,e,i,s){const n=t._adapter,o=+n.startOf(e[0].value,s),a=e[e.length-1].value;let r,h;for(r=o;r<=a;r=+n.add(r,1,s))h=i[r],h>=0&&(e[h].major=!0);return e}(t,s,n,i):s}class Jo extends qs{constructor(t){super(t),this._cache={data:[],labels:[],all:[]},this._unit="day",this._majorUnit=void 0,this._offsets={},this._normalized=!1,this._parseOpts=void 0}init(t,e){const i=t.time||(t.time={}),s=this._adapter=new is._date(t.adapters.date);I(i.displayFormats,s.formats()),this._parseOpts={parser:i.parser,round:i.round,isoWeekday:i.isoWeekday},super.init(t),this._normalized=e.normalized}parse(t,e){return void 0===t?null:qo(this,t)}beforeLayout(){super.beforeLayout(),this._cache={data:[],labels:[],all:[]}}determineDataLimits(){const t=this.options,e=this._adapter,i=t.time.unit||"day";let{min:s,max:n,minDefined:o,maxDefined:a}=this.getUserBounds();function r(t){o||isNaN(t.min)||(s=Math.min(s,t.min)),a||isNaN(t.max)||(n=Math.max(n,t.max))}o&&a||(r(this._getLabelBounds()),"ticks"===t.bounds&&"labels"===t.ticks.source||r(this.getMinMax(!1))),s=A(s)&&!isNaN(s)?s:+e.startOf(Date.now(),i),n=A(n)&&!isNaN(n)?n:+e.endOf(Date.now(),i)+1,this.min=Math.min(s,n-1),this.max=Math.max(s+1,n)}_getLabelBounds(){const t=this.getLabelTimestamps();let e=Number.POSITIVE_INFINITY,i=Number.NEGATIVE_INFINITY;return t.length&&(e=t[0],i=t[t.length-1]),{min:e,max:i}}buildTicks(){const t=this.options,e=t.time,i=t.ticks,s="labels"===i.source?this.getLabelTimestamps():this._generate();"ticks"===t.bounds&&s.length&&(this.min=this._userMin||s[0],this.max=this._userMax||s[s.length-1]);const n=this.min,o=function(t,e,i){let s=0,n=t.length;for(;s<n&&t[s]<e;)s++;for(;n>s&&t[n-1]>i;)n--;return s>0||n<t.length?t.slice(s,n):t}(s,n,this.max);return this._unit=e.unit||(i.autoSkip?Ko(e.minUnit,this.min,this.max,this._getLabelCapacity(n)):function(t,e,i,s,n){for(let o=Uo.length-1;o>=Uo.indexOf(i);o--){const i=Uo[o];if(Yo[i].common&&t._adapter.diff(n,s,i)>=e-1)return i}return Uo[i?Uo.indexOf(i):0]}(this,o.length,e.minUnit,this.min,this.max)),this._majorUnit=i.major.enabled&&"year"!==this._unit?function(t){for(let e=Uo.indexOf(t)+1,i=Uo.length;e<i;++e)if(Yo[Uo[e]].common)return Uo[e]}(this._unit):void 0,this.initOffsets(s),t.reverse&&o.reverse(),Go(this,o,this._majorUnit)}initOffsets(t){let e,i,s=0,n=0;this.options.offset&&t.length&&(e=this.getDecimalForValue(t[0]),s=1===t.length?1-e:(this.getDecimalForValue(t[1])-e)/2,i=this.getDecimalForValue(t[t.length-1]),n=1===t.length?i:(i-this.getDecimalForValue(t[t.length-2]))/2);const o=t.length<3?.5:.25;s=dt(s,0,o),n=dt(n,0,o),this._offsets={start:s,end:n,factor:1/(s+1+n)}}_generate(){const t=this._adapter,e=this.min,i=this.max,s=this.options,n=s.time,o=n.unit||Ko(n.minUnit,e,i,this._getLabelCapacity(e)),a=C(n.stepSize,1),r="week"===o&&n.isoWeekday,h=tt(r)||!0===r,l={};let c,d,u=e;if(h&&(u=+t.startOf(u,"isoWeek",r)),u=+t.startOf(u,h?"day":o),t.diff(i,e,o)>1e5*a)throw new Error(e+" and "+i+" are too far apart with stepSize of "+a+" "+o);const p="data"===s.ticks.source&&this.getDataTimestamps();for(c=u,d=0;c<i;c=+t.add(c,a,o),d++)Zo(l,c,p);return c!==i&&"ticks"!==s.bounds&&1!==d||Zo(l,c,p),Object.keys(l).sort(((t,e)=>t-e)).map((t=>+t))}getLabelForValue(t){const e=this._adapter,i=this.options.time;return i.tooltipFormat?e.format(t,i.tooltipFormat):e.format(t,i.displayFormats.datetime)}_tickFormatFunction(t,e,i,s){const n=this.options,o=n.time.displayFormats,a=this._unit,r=this._majorUnit,h=a&&o[a],l=r&&o[r],c=i[e],d=r&&l&&c&&c.major,u=this._adapter.format(t,s||(d?l:h)),p=n.ticks.callback;return p?D(p,[u,e,i],this):u}generateTickLabels(t){let e,i,s;for(e=0,i=t.length;e<i;++e)s=t[e],s.label=this._tickFormatFunction(s.value,e,t)}getDecimalForValue(t){return null===t?NaN:(t-this.min)/(this.max-this.min)}getPixelForValue(t){const e=this._offsets,i=this.getDecimalForValue(t);return this.getPixelForDecimal((e.start+i)*e.factor)}getValueForPixel(t){const e=this._offsets,i=this.getDecimalForPixel(t)/e.factor-e.end;return this.min+i*(this.max-this.min)}_getLabelSize(t){const e=this.options.ticks,i=this.ctx.measureText(t).width,s=st(this.isHorizontal()?e.maxRotation:e.minRotation),n=Math.cos(s),o=Math.sin(s),a=this._resolveTickFontOptions(0).size;return{w:i*n+a*o,h:i*o+a*n}}_getLabelCapacity(t){const e=this.options.time,i=e.displayFormats,s=i[e.unit]||i.millisecond,n=this._tickFormatFunction(t,0,Go(this,[t],this._majorUnit),s),o=this._getLabelSize(n),a=Math.floor(this.isHorizontal()?this.width/o.w:this.height/o.h)-1;return a>0?a:1}getDataTimestamps(){let t,e,i=this._cache.data||[];if(i.length)return i;const s=this.getMatchingVisibleMetas();if(this._normalized&&s.length)return this._cache.data=s[0].controller.getAllParsedValues(this);for(t=0,e=s.length;t<e;++t)i=i.concat(s[t].controller.getAllParsedValues(this));return this._cache.data=this.normalize(i)}getLabelTimestamps(){const t=this._cache.labels||[];let e,i;if(t.length)return t;const s=this.getLabels();for(e=0,i=s.length;e<i;++e)t.push(qo(this,s[e]));return this._cache.labels=this._normalized?t:this.normalize(t)}normalize(t){return De(t.sort(Xo))}}function Qo(t,e,i){let s,n,o,a,r=0,h=t.length-1;i?(e>=t[r].pos&&e<=t[h].pos&&({lo:r,hi:h}=Ae(t,"pos",e)),({pos:s,time:o}=t[r]),({pos:n,time:a}=t[h])):(e>=t[r].time&&e<=t[h].time&&({lo:r,hi:h}=Ae(t,"time",e)),({time:s,pos:o}=t[r]),({time:n,pos:a}=t[h]));const l=n-s;return l?o+(a-o)*(e-s)/l:o}Jo.id="time",Jo.defaults={bounds:"data",adapters:{},time:{parser:!1,unit:!1,round:!1,isoWeekday:!1,minUnit:"millisecond",displayFormats:{}},ticks:{source:"auto",major:{enabled:!1}}};class ta extends Jo{constructor(t){super(t),this._table=[],this._minPos=void 0,this._tableRange=void 0}initOffsets(){const t=this._getTimestampsForTable(),e=this._table=this.buildLookupTable(t);this._minPos=Qo(e,this.min),this._tableRange=Qo(e,this.max)-this._minPos,super.initOffsets(t)}buildLookupTable(t){const{min:e,max:i}=this,s=[],n=[];let o,a,r,h,l;for(o=0,a=t.length;o<a;++o)h=t[o],h>=e&&h<=i&&s.push(h);if(s.length<2)return[{time:e,pos:0},{time:i,pos:1}];for(o=0,a=s.length;o<a;++o)l=s[o+1],r=s[o-1],h=s[o],Math.round((l+r)/2)!==h&&n.push({time:h,pos:o/(a-1)});return n}_getTimestampsForTable(){let t=this._cache.all||[];if(t.length)return t;const e=this.getDataTimestamps(),i=this.getLabelTimestamps();return t=e.length&&i.length?this.normalize(e.concat(i)):e.length?e:i,t=this._cache.all=t,t}getDecimalForValue(t){return(Qo(this._table,t)-this._minPos)/this._tableRange}getValueForPixel(t){const e=this._offsets,i=this.getDecimalForPixel(t)/e.factor-e.end;return Qo(this._table,i*this._tableRange+this._minPos,!0)}}ta.id="timeseries",ta.defaults=Jo.defaults;const ea=[Qi,$n,Oo,Object.freeze({__proto__:null,CategoryScale:To,LinearScale:Io,LogarithmicScale:zo,RadialLinearScale:$o,TimeScale:Jo,TimeSeriesScale:ta})];vn.register(...ea);const ia=vn;var sa=i(3761),na=i(8287),oa=i(1454),aa=i(5077),ra=i(9155),ha=i(8203),la=i(8941),ca=i(1549),da=i(5783),ua=i(2757),pa=i(9195),ga=i(752),fa=i(1471),ma=i(7708),ba=i(965),xa=i(1936),_a=i(2804),ya=i(8912),va=i(3452),wa=i(7703),Ma=i(5594),Aa=i(8612),ka=i(8851),Ca=i(9014),Sa=i(1958),Da=i(590),Pa=i(6048),Ea=i(8092),Oa=i(7943),Ta=i(1422),La=i(7848),Ra=i(1910),Ia=i(2343),Ba=i(2268),za=i(4938),Fa=i(2790),Va=i(822),Wa=i(9208),ja=i(8533),Na=i(7151),Ha=i(5296),$a=i(134),Ya=i(6507),Ua=i(9065),Xa=i(5560),qa=i(9856),Ka=i(3317);const Za={clearsky_day:sa,clearsky_night:na,clearsky_polartwilight:oa,cloudy:aa,fair_day:ra,fair_night:ha,fair_polartwilight:la,fog:ca,heavyrain:da,heavyrainandthunder:ua,heavyrainshowersandthunder_day:pa,heavyrainshowersandthunder_night:ga,heavyrainshowersandthunder_polartwilight:fa,heavyrainshowers_day:ma,heavyrainshowers_night:ba,heavyrainshowers_polartwilight:xa,heavysleet:_a,heavysleetandthunder:ya,heavysleetshowersandthunder_day:va,heavysleetshowersandthunder_night:wa,heavysleetshowersandthunder_polartwilight:Ma,heavysleetshowers_day:Aa,heavysleetshowers_night:ka,heavysleetshowers_polartwilight:Ca,heavysnow:Sa,heavysnowandthunder:Da,heavysnowshowersandthunder_day:Pa,heavysnowshowersandthunder_night:Ea,heavysnowshowersandthunder_polartwilight:Oa,heavysnowshowers_day:Ta,heavysnowshowers_night:La,heavysnowshowers_polartwilight:Ra,lightrain:Ia,lightrainandthunder:Ba,lightrainshowersandthunder_day:za,lightrainshowersandthunder_night:Fa,lightrainshowersandthunder_polartwilight:Va,lightrainshowers_day:Wa,lightrainshowers_night:ja,lightrainshowers_polartwilight:Na,lightsleet:Ha,lightsleetandthunder:$a,lightsleetshowers_day:Ya,lightsleetshowers_night:Ua,lightsleetshowers_polartwilight:Xa,lightsnow:qa,lightsnowandthunder:Ka,lightsnowandthunder:Ka,lightsnowshowers_day:i(6001),lightsnowshowers_night:i(8282),lightsnowshowers_polartwilight:i(4659),ightssleetshowersandthunder_day:i(5518),lightssleetshowersandthunder_night:i(2049),lightssleetshowersandthunder_polartwilight:i(9322),lightssnowshowersandthunder_day:i(8587),lightssnowshowersandthunder_night:i(378),lightssnowshowersandthunder_polartwilight:i(2496),partlycloudy_day:i(8133),partlycloudy_night:i(1793),partlycloudy_polartwilight:i(2473),rain:i(1550),rainandthunder:i(8084),rainshowersandthunder_day:i(5),rainshowersandthunder_night:i(4863),rainshowersandthunder_polartwilight:i(1467),rainshowers_day:i(6679),rainshowers_night:i(8749),rainshowers_polartwilight:i(3148),sleet:i(6949),sleetandthunder:i(662),sleetshowersandthunder_day:i(8200),sleetshowersandthunder_night:i(3271),sleetshowersandthunder_polartwilight:i(8817),sleetshowers_day:i(5587),sleetshowers_night:i(3464),sleetshowers_polartwilight:i(2686),snow:i(4112),snowandthunder:i(8902),snowshowersandthunder_day:i(2957),snowshowersandthunder_night:i(3851),snowshowersandthunder_polartwilight:i(6508),snowshowers_day:i(2182),snowshowers_night:i(625),snowshowers_polartwilight:i(9292),icon_arrow:i(3446),base_map:i(5945),background_img:i(1815),radar_map:i(9345)};class Ga{constructor(t){this.buildChart(t)}buildChart(t){this.chart=new ia(t,{data:{datasets:this.getDatasets()},options:this.getOptions()})}updateData(t,e,i,s,n,o,a,r){this.chart.data.labels=t,this.chart.data.datasets[0].data=e,this.chart.data.datasets[0].pointStyle=o,this.chart.data.datasets[1].data=i,this.chart.data.datasets[2].data=s,this.chart.data.datasets[2].pointStyle=a,this.chart.data.datasets[2].pointRotation=r,this.chart.data.datasets[3].data=n,this.chart.update()}getDatasets(){return[{order:2,type:"line",pointRadius:.1,tension:.4,fill:!0,borderWidth:0,yAxisID:"y",segment:{backgroundColor:t=>t.p0.parsed.y>0?"rgba(360, 63, 73, 0.5)":"rgba(141, 166, 229, 0.5)"}},{order:1,type:"bar",backgroundColor:"rgba(54, 162, 235, 0.3)",borderWidth:0,yAxisID:"y2"},{order:3,type:"line",pointRadius:.1,tension:.4,yAxisID:"y",segment:{borderColor:"rgba(141, 229, 166, 0.5)"}},{order:4,type:"line",pointRadius:0,tension:.4,borderDash:[5,5],yAxisID:"y3",segment:{borderColor:"rgba(197, 201, 198, 0.9)"}}]}getOptions(){return{responsive:!0,maintainAspectRatio:!1,plugins:{legend:{display:!1}},scales:{y:{min:-15,max:35,type:"linear",position:"left",ticks:{color:"black",beginAtZero:!0}},y2:{min:0,max:16,type:"linear",position:"right",ticks:{color:"rgba(54, 162, 235, 0.8)"},grid:{drawOnChartArea:!1}},y3:{type:"linear",position:"right",ticks:{color:"rgba(197, 201, 198, 1)",stepSize:5},grid:{drawOnChartArea:!1}}}}}}class Ja{constructor(){this.radarImage=document.getElementById("radar-map"),this.chart=document.getElementById("chart")}getChartEl(){return this.chart}updateRadarImage(t,e){console.log(t),this.radarImage.src=e}}class Qa{async fetch(t){try{return await fetch(t,{mode:"cors"})}catch(t){console.log(t)}}async getJSON(t){try{return await t.json()}catch(t){console.log(t)}}getRadarImage(t){return{timeStamp:t.lastFiles[0].formats[0].updated,imageURL:t.lastFiles[0].formats[0].link}}getChartData(t){const e=[],i=[],s=[],n=[],o=[],a=[],r=[],h=[];for(let l=0;l<12;l++)if(e.push(parseInt(t.properties.timeseries[l].time.slice(11,13))+1),i.push(t.properties.timeseries[l].data.instant.details.air_temperature),s.push(t.properties.timeseries[l].data.next_1_hours.details.precipitation_amount),n.push(t.properties.timeseries[l].data.instant.details.wind_speed),o.push(t.properties.timeseries[l].data.instant.details.air_pressure_at_sea_level),l%2==0){const e=new Image(35,35);e.src=Za[t.properties.timeseries[l].data.next_1_hours.summary.symbol_code],a.push(e),r.push(""),h.push("")}else{const e=new Image(20,20);a.push(""),e.src=Za.icon_arrow,r.push(e),h.push(t.properties.timeseries[l].data.instant.details.wind_from_direction)}return{hour:e,temp:i,precipitation:s,wind:n,airPressure:o,weatherImg:a,windArrow:r,windDirection:h}}}new class{constructor(t,e){this.weatherData=new Qa,this.displayController=new Ja,this.chart=new Ga(this.displayController.getChartEl())}async updateMap(t){const e=await this.weatherData.fetch(t),i=await this.weatherData.getJSON(e),s=this.weatherData.getRadarImage(i);this.displayController.updateRadarImage(s.timeStamp,s.imageURL)}async updateChart(t){const e=await this.weatherData.fetch(t),i=await this.weatherData.getJSON(e),s=this.weatherData.getChartData(i);this.chart.updateData(s.hour,s.temp,s.precipitation,s.wind,s.airPressure,s.weatherImg,s.windArrow,s.windDirection)}}("https://api.met.no/weatherapi/locationforecast/2.0/complete?lat=59.8586&lon=17.6389","https://opendata-download-radar.smhi.se/api/version/latest/area/sweden/product/comp?format=png&timeZone=Europe/Stockholm")})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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VkMsU0FBVSxTQUNWQyxTQUFVLFNBQ1ZDLFNBQVUsU0FDVkMsT0FBUSxTQUNSQyxRQUFTLFNBQ1RDLFVBQVcsU0FDWEMsSUFBSyxTQUNMQyxPQUFRLFNBQ1JDLElBQUssU0FDTEMsSUFBSyxPQUNMQyxNQUFPLFNBQ1BDLElBQUssU0FDTEMsUUFBUyxTQUNUQyxPQUFRLFNBQ1JDLFFBQVMsU0FDVEMsTUFBTyxTQUNQQyxLQUFNLFNBQ05DLE1BQU8sU0FDUEMsT0FBUSxTQUNSQyxVQUFXLFNBQ1hDLFFBQVMsU0FDVEMsV0FBWSxTQUNaQyxJQUFLLFNBQ0xDLEtBQU0sU0FDTkMsTUFBTyxTQUNQQyxVQUFXLFNBQ1hDLEtBQU0sU0FDTkMsS0FBTSxTQUNOQyxLQUFNLFNBQ05DLEtBQU0sU0FDTkMsT0FBUSxTQUNSQyxPQUFRLFNBQ1JDLE9BQVEsU0FDUkMsTUFBTyxTQUNQQyxNQUFPLFNBQ1BDLFFBQVMsU0FDVEMsSUFBSyxTQUNMQyxLQUFNLE9BQ05DLFFBQVMsU0FDVEMsSUFBSyxTQUNMQyxPQUFRLFNBQ1JDLE1BQU8sU0FDUEMsV0FBWSxTQUNaQyxJQUFLLEtBQ0xDLE1BQU8sU0FDUEMsT0FBUSxTQUNSQyxPQUFRLFNBQ1JDLEtBQU0sU0FDTkMsVUFBVyxPQUNYQyxJQUFLLFNBQ0xDLFNBQVUsU0FDVkMsV0FBWSxTQUNaQyxRQUFTLFNBQ1RDLFNBQVUsU0FDVkMsUUFBUyxTQUNUQyxXQUFZLFNBQ1pDLEtBQU0sS0FDTkMsT0FBUSxTQUNSQyxLQUFNLFNBQ05DLFFBQVMsU0FDVEMsTUFBTyxTQUNQQyxRQUFTLFNBQ1RDLEtBQU0sU0FDTkMsVUFBVyxTQUNYQyxPQUFRLFNBQ1JDLE1BQU8sU0FDUEMsV0FBWSxTQUNaQyxVQUFXLFNBQ1hDLFFBQVMsU0FDVEMsS0FBTSxTQUNOQyxJQUFLLFNBQ0xDLEtBQU0sU0FDTkMsUUFBUyxTQUNUQyxNQUFPLFNBQ1BDLFlBQWEsU0FDYkMsR0FBSSxTQUNKQyxTQUFVLFNBQ1ZDLE1BQU8sU0FDUEMsVUFBVyxTQUNYQyxNQUFPLFNBQ1BDLFVBQVcsU0FDWEMsTUFBTyxT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SyxLQUFBQSxFQUNBQyxjQUFBQSxFQUNBQyxLQUFBQSxFQUNBQyxZQUFBQSxFQUNBQyxXQUFBQSxFQUNBQyxVQUFBQSxFQUNBQyxjQUFBQSxJQStDTixJQTFDQSxNQUNFenJFLFlBQVl5dEUsRUFBVUMsR0FDcEIzdUYsS0FBSzR1RixZQUFjLElBQUl4QixHQUN2QnB0RixLQUFLNnVGLGtCQUFvQixJQUFJaEMsR0FDN0I3c0YsS0FBSzhrQixNQUFRLElBQUlpbkUsR0FBYS9yRixLQUFLNnVGLGtCQUFrQjlCLGNBS3ZETSxnQkFBZ0JzQixHQUNkLE1BQU1wQixRQUFpQnZ0RixLQUFLNHVGLFlBQVl0QixNQUFNcUIsR0FDeENuQixRQUFheHRGLEtBQUs0dUYsWUFBWUUsUUFBUXZCLEdBQ3RDcHJGLEVBQU9uQyxLQUFLNHVGLFlBQVluQixjQUFjRCxHQUM1Q3h0RixLQUFLNnVGLGtCQUFrQjdCLGlCQUFpQjdxRixFQUFLOHFGLFVBQVc5cUYsRUFBSytxRixVQUkvREcsa0JBQWtCcUIsR0FDaEIsTUFBTW5CLFFBQWlCdnRGLEtBQUs0dUYsWUFBWXRCLE1BQU1vQixHQUN4Q2xCLFFBQWF4dEYsS0FBSzR1RixZQUFZRSxRQUFRdkIsR0FDdENwckYsRUFBT25DLEtBQUs0dUYsWUFBWWhCLGFBQWFKLEdBQzNDeHRGLEtBQUs4a0IsTUFBTXFuRSxXQUNUaHFGLEVBQUtpZ0YsS0FDTGpnRixFQUFLaXFGLEtBQ0xqcUYsRUFBS2txRixjQUNMbHFGLEVBQUttcUYsS0FDTG5xRixFQUFLb3FGLFlBQ0xwcUYsRUFBS3FxRixXQUNMcnFGLEVBQUtzcUYsVUFDTHRxRixFQUFLdXFGLGlCQVVULHNGQUVBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vd2VhdGhlci1hcHAvLi9zcmMvc3R5bGVzLmNzcyIsIndlYnBhY2s6Ly93ZWF0aGVyLWFwcC8uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanMiLCJ3ZWJwYWNrOi8vd2VhdGhlci1hcHAvLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvZ2V0VXJsLmpzIiwid2VicGFjazovL3dlYXRoZXItYXBwLy4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanMiLCJ3ZWJwYWNrOi8vd2VhdGhlci1hcHAvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanMiLCJ3ZWJwYWNrOi8vd2VhdGhlci1hcHAvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzIiwid2VicGFjazovL3dlYXRoZXItYXBwLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzIiwid2VicGFjazovL3dlYXRoZXItYXBwLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzIiwid2VicGFjazovL3dlYXRoZXItYXBwLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanMiLCJ3ZWJwYWNrOi8vd2VhdGhlci1hcHAvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qcyIsIndlYnBhY2s6Ly93ZWF0aGVyLWFwcC93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly93ZWF0aGVyLWFwcC93ZWJwYWNrL3J1bnRpbWUvY29tcGF0IGdldCBkZWZhdWx0IGV4cG9ydCIsIndlYnBhY2s6Ly93ZWF0aGVyLWFwcC93ZWJwYWNrL3J1bnRpbWUvZGVmaW5lIHByb3BlcnR5IGdldHRlcnMiLCJ3ZWJwYWNrOi8vd2VhdGhlci1hcHAvd2VicGFjay9ydW50aW1lL2dsb2JhbCIsIndlYnBhY2s6Ly93ZWF0aGVyLWFwcC93ZWJwYWNrL3J1bnRpbWUvaGFzT3duUHJvcGVydHkgc2hvcnRoYW5kIiwid2VicGFjazovL3dlYXRoZXItYXBwL3dlYnBhY2svcnVudGltZS9wdWJsaWNQYXRoIiwid2VicGFjazovL3dlYXRoZXItYXBwL3dlYnBhY2svcnVudGltZS9qc29ucCBjaHVuayBsb2FkaW5nIiwid2VicGFjazovL3dlYXRoZXItYXBwLy4vc3JjL3N0eWxlcy5jc3M/NDRiMiIsIndlYnBhY2s6Ly93ZWF0aGVyLWFwcC8uL25vZGVfbW9kdWxlcy9jaGFydC5qcy9kaXN0L2NodW5rcy9oZWxwZXJzLnNlZ21lbnQuanMiLCJ3ZWJwYWNrOi8vd2VhdGhlci1hcHAvLi9ub2RlX21vZHVsZXMvY2hhcnQuanMvZGlzdC9jaGFydC5lc20uanMiLCJ3ZWJwYWNrOi8vd2VhdGhlci1hcHAvLi9ub2RlX21vZHVsZXMvY2hhcnQuanMvYXV0by9hdXRvLmVzbS5qcyIsIndlYnBhY2s6Ly93ZWF0aGVyLWFwcC8uL3NyYy9pbWFnZXMuanMiLCJ3ZWJwYWNrOi8vd2VhdGhlci1hcHAvLi9zcmMvaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9HRVRfVVJMX0lNUE9SVF9fXyBmcm9tIFwiLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2dldFVybC5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF8wX19fID0gbmV3IFVSTChcImltYWdlcy9iYWNrZ3JvdW5kX2ltZy5wbmdcIiwgaW1wb3J0Lm1ldGEudXJsKTtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgXCJAaW1wb3J0IHVybChodHRwOi8vZm9udHMuZ29vZ2xlYXBpcy5jb20vY3NzP2ZhbWlseT1Sb2JvdG86NDAwLDEwMCwxMDBpdGFsaWMsMzAwLDMwMGl0YeKAjOKAi2xpYyw0MDBpdGFsaWMsNTAwLDUwMGl0YWxpYyw3MDAsNzAwaXRhbGljLDkwMGl0YWxpYyw5MDApO1wiXSk7XG52YXIgX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfMF9fXyA9IF9fX0NTU19MT0FERVJfR0VUX1VSTF9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzBfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIFwiKixcXHJcXG4qOjpiZWZvcmUsXFxyXFxuKjo6YWZ0ZXIge1xcclxcbiAgYm94LXNpemluZzogYm9yZGVyLWJveDtcXHJcXG4gIHBhZGRpbmc6IDA7XFxyXFxuICBtYXJnaW46IDA7XFxyXFxuICBmb250LXNpemU6IDEwcHg7XFxyXFxuICBmb250LWZhbWlseTogJ1JvYm90bycsIHNhbnMtc2VyaWY7XFxyXFxufVxcclxcbmJvZHkge1xcclxcbiAgYmFja2dyb3VuZC1jb2xvcjogZ3JleTtcXHJcXG4gIGNvbG9yOiBoc2xhKDAsIDAlLCAzOCUsIDEpO1xcclxcbn1cXHJcXG5cXHJcXG4udGVtcC1jb250YWluZXIge1xcclxcbiAgZ3JpZC1hcmVhOiB0ZW1wO1xcclxcbn1cXHJcXG4uZW1wdHktY29udGFpbmVyIHtcXHJcXG4gIGdyaWQtYXJlYTogZW1wdHk7XFxyXFxufVxcclxcbi50aW1lLWNvbnRhaW5lciB7XFxyXFxuICBncmlkLWFyZWE6IHRpbWU7XFxyXFxufVxcclxcbi5jaGFydC1jb250YWluZXIge1xcclxcbiAgZ3JpZC1hcmVhOiBjaGFydDtcXHJcXG59XFxyXFxuLm1hcC1jb250YWluZXIge1xcclxcbiAgZ3JpZC1hcmVhOiBtYXA7XFxyXFxufVxcclxcblxcclxcbi5ncmlkLWNvbnRhaW5lciB7XFxyXFxuICBiYWNrZ3JvdW5kLWltYWdlOiB1cmwoXCIgKyBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8wX19fICsgXCIpO1xcclxcbiAgaGVpZ2h0OiA3MjBweDtcXHJcXG4gIHdpZHRoOiAxMjgwcHg7XFxyXFxuICBkaXNwbGF5OiBncmlkO1xcclxcbiAgZ3JpZC10ZW1wbGF0ZS1hcmVhczpcXHJcXG4gICAgJ3RlbXAgZW1wdHkgdGltZSBtYXAnXFxyXFxuICAgICdjaGFydCBjaGFydCBjaGFydCBtYXAnO1xcclxcbiAgZ2FwOiAyNnB4O1xcclxcbiAgLyogb3ZlcmZsb3c6IGhpZGRlbjsgKi9cXHJcXG4gIGp1c3RpZnktY29udGVudDogcmlnaHQ7XFxyXFxuICBhbGlnbi1pdGVtczogcmlnaHQ7XFxyXFxufVxcclxcblxcclxcbi50ZW1wLWNvbnRhaW5lcixcXHJcXG4udGltZS1jb250YWluZXIge1xcclxcbiAgZm9udC1zaXplOiA5LjZyZW07XFxyXFxuICBqdXN0aWZ5LXNlbGY6IHJpZ2h0O1xcclxcbiAgYm9yZGVyLXJhZGl1czogMTBweCAxMHB4IDEwcHggMTBweDtcXHJcXG4gIGJhY2tncm91bmQtY29sb3I6IGhzbGEoMCwgMCUsIDEwMCUsIDAuOTUpO1xcclxcbiAgaGVpZ2h0OiAxNjVweDtcXHJcXG4gIHdpZHRoOiAzNTVweDtcXHJcXG4gIGRpc3BsYXk6IGZsZXg7XFxyXFxuICBhbGlnbi1zZWxmOiBmbGV4LWVuZDtcXHJcXG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcclxcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXHJcXG59XFxyXFxuLmVtcHR5LWNvbnRhaW5lciB7XFxyXFxuICBqdXN0aWZ5LXNlbGY6IHJpZ2h0O1xcclxcbiAgYWxpZ24tc2VsZjogZmxleC1lbmQ7XFxyXFxuICBoZWlnaHQ6IDE2NXB4O1xcclxcbiAgd2lkdGg6IDgwcHg7XFxyXFxufVxcclxcbi5jaGFydC1jb250YWluZXIge1xcclxcbiAgYm9yZGVyLXJhZGl1czogMTBweCAxMHB4IDEwcHggMTBweDtcXHJcXG4gIGJhY2tncm91bmQtY29sb3I6IGhzbGEoMCwgMCUsIDEwMCUsIDAuOTUpO1xcclxcbiAgcGFkZGluZzogMjBweDtcXHJcXG4gIGhlaWdodDogNDY3cHg7XFxyXFxuICB3aWR0aDogODQ1cHg7XFxyXFxufVxcclxcbi5tYXAtY29udGFpbmVyIHtcXHJcXG4gIGhlaWdodDogNzIwcHg7XFxyXFxuICB3aWR0aDogMzgycHg7XFxyXFxuICBmaWx0ZXI6IGRyb3Atc2hhZG93KDBweCA0cHggOHB4ICM0ZTg3YjEpO1xcclxcbiAgZGlzcGxheTogZ3JpZDtcXHJcXG4gIGdyaWQtdGVtcGxhdGUtY29sdW1uczogW2ZpcnN0LWNvbF07XFxyXFxuICBncmlkLXRlbXBsYXRlLXJvd3M6IFtmaXJzdC1yb3ddO1xcclxcbn1cXHJcXG4ubWFwLWNvbnRhaW5lciBpbWcge1xcclxcbiAgYm9yZGVyLXJhZGl1czogMTBweCAwcHggMHB4IDEwcHg7XFxyXFxuICBtYXgtd2lkdGg6IDEwMCU7XFxyXFxuICBtYXgtaGVpZ2h0OiAxMDAlO1xcclxcbn1cXHJcXG5cXHJcXG4jYmFzZS1tYXAge1xcclxcbiAgZ3JpZC1jb2x1bW4tc3RhcnQ6IGZpcnN0LWNvbDtcXHJcXG4gIGdyaWQtcm93LXN0YXJ0OiBmaXJzdC1yb3c7XFxyXFxufVxcclxcbiNyYWRhci1tYXAge1xcclxcbiAgZ3JpZC1jb2x1bW4tc3RhcnQ6IGZpcnN0LWNvbDtcXHJcXG4gIGdyaWQtcm93LXN0YXJ0OiBmaXJzdC1yb3c7XFxyXFxuXFxyXFxuICAvKiBjbGlwLXBhdGg6IGVsbGlwc2UoNzAwcHggNzQ1cHggYXQgMTAwJSAxMDAlKTsgKi9cXHJcXG59XFxyXFxuXCIsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL3N0eWxlcy5jc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBRUE7OztFQUdFLHNCQUFzQjtFQUN0QixVQUFVO0VBQ1YsU0FBUztFQUNULGVBQWU7RUFDZixpQ0FBaUM7QUFDbkM7QUFDQTtFQUNFLHNCQUFzQjtFQUN0QiwwQkFBMEI7QUFDNUI7O0FBRUE7RUFDRSxlQUFlO0FBQ2pCO0FBQ0E7RUFDRSxnQkFBZ0I7QUFDbEI7QUFDQTtFQUNFLGVBQWU7QUFDakI7QUFDQTtFQUNFLGdCQUFnQjtBQUNsQjtBQUNBO0VBQ0UsY0FBYztBQUNoQjs7QUFFQTtFQUNFLHlEQUFnRDtFQUNoRCxhQUFhO0VBQ2IsYUFBYTtFQUNiLGFBQWE7RUFDYjs7MkJBRXlCO0VBQ3pCLFNBQVM7RUFDVCxzQkFBc0I7RUFDdEIsc0JBQXNCO0VBQ3RCLGtCQUFrQjtBQUNwQjs7QUFFQTs7RUFFRSxpQkFBaUI7RUFDakIsbUJBQW1CO0VBQ25CLGtDQUFrQztFQUNsQyx5Q0FBeUM7RUFDekMsYUFBYTtFQUNiLFlBQVk7RUFDWixhQUFhO0VBQ2Isb0JBQW9CO0VBQ3BCLHVCQUF1QjtFQUN2QixtQkFBbUI7QUFDckI7QUFDQTtFQUNFLG1CQUFtQjtFQUNuQixvQkFBb0I7RUFDcEIsYUFBYTtFQUNiLFdBQVc7QUFDYjtBQUNBO0VBQ0Usa0NBQWtDO0VBQ2xDLHlDQUF5QztFQUN6QyxhQUFhO0VBQ2IsYUFBYTtFQUNiLFlBQVk7QUFDZDtBQUNBO0VBQ0UsYUFBYTtFQUNiLFlBQVk7RUFDWix3Q0FBd0M7RUFDeEMsYUFBYTtFQUNiLGtDQUFrQztFQUNsQywrQkFBK0I7QUFDakM7QUFDQTtFQUNFLGdDQUFnQztFQUNoQyxlQUFlO0VBQ2YsZ0JBQWdCO0FBQ2xCOztBQUVBO0VBQ0UsNEJBQTRCO0VBQzVCLHlCQUF5QjtBQUMzQjtBQUNBO0VBQ0UsNEJBQTRCO0VBQzVCLHlCQUF5Qjs7RUFFekIsa0RBQWtEO0FBQ3BEXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIkBpbXBvcnQgdXJsKGh0dHA6Ly9mb250cy5nb29nbGVhcGlzLmNvbS9jc3M/ZmFtaWx5PVJvYm90bzo0MDAsMTAwLDEwMGl0YWxpYywzMDAsMzAwaXRh4oCM4oCLbGljLDQwMGl0YWxpYyw1MDAsNTAwaXRhbGljLDcwMCw3MDBpdGFsaWMsOTAwaXRhbGljLDkwMCk7XFxyXFxuXFxyXFxuKixcXHJcXG4qOjpiZWZvcmUsXFxyXFxuKjo6YWZ0ZXIge1xcclxcbiAgYm94LXNpemluZzogYm9yZGVyLWJveDtcXHJcXG4gIHBhZGRpbmc6IDA7XFxyXFxuICBtYXJnaW46IDA7XFxyXFxuICBmb250LXNpemU6IDEwcHg7XFxyXFxuICBmb250LWZhbWlseTogJ1JvYm90bycsIHNhbnMtc2VyaWY7XFxyXFxufVxcclxcbmJvZHkge1xcclxcbiAgYmFja2dyb3VuZC1jb2xvcjogZ3JleTtcXHJcXG4gIGNvbG9yOiBoc2xhKDAsIDAlLCAzOCUsIDEpO1xcclxcbn1cXHJcXG5cXHJcXG4udGVtcC1jb250YWluZXIge1xcclxcbiAgZ3JpZC1hcmVhOiB0ZW1wO1xcclxcbn1cXHJcXG4uZW1wdHktY29udGFpbmVyIHtcXHJcXG4gIGdyaWQtYXJlYTogZW1wdHk7XFxyXFxufVxcclxcbi50aW1lLWNvbnRhaW5lciB7XFxyXFxuICBncmlkLWFyZWE6IHRpbWU7XFxyXFxufVxcclxcbi5jaGFydC1jb250YWluZXIge1xcclxcbiAgZ3JpZC1hcmVhOiBjaGFydDtcXHJcXG59XFxyXFxuLm1hcC1jb250YWluZXIge1xcclxcbiAgZ3JpZC1hcmVhOiBtYXA7XFxyXFxufVxcclxcblxcclxcbi5ncmlkLWNvbnRhaW5lciB7XFxyXFxuICBiYWNrZ3JvdW5kLWltYWdlOiB1cmwoaW1hZ2VzL2JhY2tncm91bmRfaW1nLnBuZyk7XFxyXFxuICBoZWlnaHQ6IDcyMHB4O1xcclxcbiAgd2lkdGg6IDEyODBweDtcXHJcXG4gIGRpc3BsYXk6IGdyaWQ7XFxyXFxuICBncmlkLXRlbXBsYXRlLWFyZWFzOlxcclxcbiAgICAndGVtcCBlbXB0eSB0aW1lIG1hcCdcXHJcXG4gICAgJ2NoYXJ0IGNoYXJ0IGNoYXJ0IG1hcCc7XFxyXFxuICBnYXA6IDI2cHg7XFxyXFxuICAvKiBvdmVyZmxvdzogaGlkZGVuOyAqL1xcclxcbiAganVzdGlmeS1jb250ZW50OiByaWdodDtcXHJcXG4gIGFsaWduLWl0ZW1zOiByaWdodDtcXHJcXG59XFxyXFxuXFxyXFxuLnRlbXAtY29udGFpbmVyLFxcclxcbi50aW1lLWNvbnRhaW5lciB7XFxyXFxuICBmb250LXNpemU6IDkuNnJlbTtcXHJcXG4gIGp1c3RpZnktc2VsZjogcmlnaHQ7XFxyXFxuICBib3JkZXItcmFkaXVzOiAxMHB4IDEwcHggMTBweCAxMHB4O1xcclxcbiAgYmFja2dyb3VuZC1jb2xvcjogaHNsYSgwLCAwJSwgMTAwJSwgMC45NSk7XFxyXFxuICBoZWlnaHQ6IDE2NXB4O1xcclxcbiAgd2lkdGg6IDM1NXB4O1xcclxcbiAgZGlzcGxheTogZmxleDtcXHJcXG4gIGFsaWduLXNlbGY6IGZsZXgtZW5kO1xcclxcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxyXFxuICBhbGlnbi1pdGVtczogY2VudGVyO1xcclxcbn1cXHJcXG4uZW1wdHktY29udGFpbmVyIHtcXHJcXG4gIGp1c3RpZnktc2VsZjogcmlnaHQ7XFxyXFxuICBhbGlnbi1zZWxmOiBmbGV4LWVuZDtcXHJcXG4gIGhlaWdodDogMTY1cHg7XFxyXFxuICB3aWR0aDogODBweDtcXHJcXG59XFxyXFxuLmNoYXJ0LWNvbnRhaW5lciB7XFxyXFxuICBib3JkZXItcmFkaXVzOiAxMHB4IDEwcHggMTBweCAxMHB4O1xcclxcbiAgYmFja2dyb3VuZC1jb2xvcjogaHNsYSgwLCAwJSwgMTAwJSwgMC45NSk7XFxyXFxuICBwYWRkaW5nOiAyMHB4O1xcclxcbiAgaGVpZ2h0OiA0NjdweDtcXHJcXG4gIHdpZHRoOiA4NDVweDtcXHJcXG59XFxyXFxuLm1hcC1jb250YWluZXIge1xcclxcbiAgaGVpZ2h0OiA3MjBweDtcXHJcXG4gIHdpZHRoOiAzODJweDtcXHJcXG4gIGZpbHRlcjogZHJvcC1zaGFkb3coMHB4IDRweCA4cHggIzRlODdiMSk7XFxyXFxuICBkaXNwbGF5OiBncmlkO1xcclxcbiAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiBbZmlyc3QtY29sXTtcXHJcXG4gIGdyaWQtdGVtcGxhdGUtcm93czogW2ZpcnN0LXJvd107XFxyXFxufVxcclxcbi5tYXAtY29udGFpbmVyIGltZyB7XFxyXFxuICBib3JkZXItcmFkaXVzOiAxMHB4IDBweCAwcHggMTBweDtcXHJcXG4gIG1heC13aWR0aDogMTAwJTtcXHJcXG4gIG1heC1oZWlnaHQ6IDEwMCU7XFxyXFxufVxcclxcblxcclxcbiNiYXNlLW1hcCB7XFxyXFxuICBncmlkLWNvbHVtbi1zdGFydDogZmlyc3QtY29sO1xcclxcbiAgZ3JpZC1yb3ctc3RhcnQ6IGZpcnN0LXJvdztcXHJcXG59XFxyXFxuI3JhZGFyLW1hcCB7XFxyXFxuICBncmlkLWNvbHVtbi1zdGFydDogZmlyc3QtY29sO1xcclxcbiAgZ3JpZC1yb3ctc3RhcnQ6IGZpcnN0LXJvdztcXHJcXG5cXHJcXG4gIC8qIGNsaXAtcGF0aDogZWxsaXBzZSg3MDBweCA3NDVweCBhdCAxMDAlIDEwMCUpOyAqL1xcclxcbn1cXHJcXG5cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qXG4gIE1JVCBMaWNlbnNlIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwXG4gIEF1dGhvciBUb2JpYXMgS29wcGVycyBAc29rcmFcbiovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKSB7XG4gIHZhciBsaXN0ID0gW107IC8vIHJldHVybiB0aGUgbGlzdCBvZiBtb2R1bGVzIGFzIGNzcyBzdHJpbmdcblxuICBsaXN0LnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICB2YXIgY29udGVudCA9IFwiXCI7XG4gICAgICB2YXIgbmVlZExheWVyID0gdHlwZW9mIGl0ZW1bNV0gIT09IFwidW5kZWZpbmVkXCI7XG5cbiAgICAgIGlmIChpdGVtWzRdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJAc3VwcG9ydHMgKFwiLmNvbmNhdChpdGVtWzRdLCBcIikge1wiKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGl0ZW1bMl0pIHtcbiAgICAgICAgY29udGVudCArPSBcIkBtZWRpYSBcIi5jb25jYXQoaXRlbVsyXSwgXCIge1wiKTtcbiAgICAgIH1cblxuICAgICAgaWYgKG5lZWRMYXllcikge1xuICAgICAgICBjb250ZW50ICs9IFwiQGxheWVyXCIuY29uY2F0KGl0ZW1bNV0ubGVuZ3RoID4gMCA/IFwiIFwiLmNvbmNhdChpdGVtWzVdKSA6IFwiXCIsIFwiIHtcIik7XG4gICAgICB9XG5cbiAgICAgIGNvbnRlbnQgKz0gY3NzV2l0aE1hcHBpbmdUb1N0cmluZyhpdGVtKTtcblxuICAgICAgaWYgKG5lZWRMYXllcikge1xuICAgICAgICBjb250ZW50ICs9IFwifVwiO1xuICAgICAgfVxuXG4gICAgICBpZiAoaXRlbVsyXSkge1xuICAgICAgICBjb250ZW50ICs9IFwifVwiO1xuICAgICAgfVxuXG4gICAgICBpZiAoaXRlbVs0XSkge1xuICAgICAgICBjb250ZW50ICs9IFwifVwiO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gY29udGVudDtcbiAgICB9KS5qb2luKFwiXCIpO1xuICB9OyAvLyBpbXBvcnQgYSBsaXN0IG9mIG1vZHVsZXMgaW50byB0aGUgbGlzdFxuXG5cbiAgbGlzdC5pID0gZnVuY3Rpb24gaShtb2R1bGVzLCBtZWRpYSwgZGVkdXBlLCBzdXBwb3J0cywgbGF5ZXIpIHtcbiAgICBpZiAodHlwZW9mIG1vZHVsZXMgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgIG1vZHVsZXMgPSBbW251bGwsIG1vZHVsZXMsIHVuZGVmaW5lZF1dO1xuICAgIH1cblxuICAgIHZhciBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzID0ge307XG5cbiAgICBpZiAoZGVkdXBlKSB7XG4gICAgICBmb3IgKHZhciBrID0gMDsgayA8IHRoaXMubGVuZ3RoOyBrKyspIHtcbiAgICAgICAgdmFyIGlkID0gdGhpc1trXVswXTtcblxuICAgICAgICBpZiAoaWQgIT0gbnVsbCkge1xuICAgICAgICAgIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaWRdID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGZvciAodmFyIF9rID0gMDsgX2sgPCBtb2R1bGVzLmxlbmd0aDsgX2srKykge1xuICAgICAgdmFyIGl0ZW0gPSBbXS5jb25jYXQobW9kdWxlc1tfa10pO1xuXG4gICAgICBpZiAoZGVkdXBlICYmIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaXRlbVswXV0pIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlb2YgbGF5ZXIgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBpdGVtWzVdID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgaXRlbVs1XSA9IGxheWVyO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMV0gPSBcIkBsYXllclwiLmNvbmNhdChpdGVtWzVdLmxlbmd0aCA+IDAgPyBcIiBcIi5jb25jYXQoaXRlbVs1XSkgOiBcIlwiLCBcIiB7XCIpLmNvbmNhdChpdGVtWzFdLCBcIn1cIik7XG4gICAgICAgICAgaXRlbVs1XSA9IGxheWVyO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChtZWRpYSkge1xuICAgICAgICBpZiAoIWl0ZW1bMl0pIHtcbiAgICAgICAgICBpdGVtWzJdID0gbWVkaWE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsxXSA9IFwiQG1lZGlhIFwiLmNvbmNhdChpdGVtWzJdLCBcIiB7XCIpLmNvbmNhdChpdGVtWzFdLCBcIn1cIik7XG4gICAgICAgICAgaXRlbVsyXSA9IG1lZGlhO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChzdXBwb3J0cykge1xuICAgICAgICBpZiAoIWl0ZW1bNF0pIHtcbiAgICAgICAgICBpdGVtWzRdID0gXCJcIi5jb25jYXQoc3VwcG9ydHMpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMV0gPSBcIkBzdXBwb3J0cyAoXCIuY29uY2F0KGl0ZW1bNF0sIFwiKSB7XCIpLmNvbmNhdChpdGVtWzFdLCBcIn1cIik7XG4gICAgICAgICAgaXRlbVs0XSA9IHN1cHBvcnRzO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGxpc3QucHVzaChpdGVtKTtcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIGxpc3Q7XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh1cmwsIG9wdGlvbnMpIHtcbiAgaWYgKCFvcHRpb25zKSB7XG4gICAgb3B0aW9ucyA9IHt9O1xuICB9XG5cbiAgaWYgKCF1cmwpIHtcbiAgICByZXR1cm4gdXJsO1xuICB9XG5cbiAgdXJsID0gU3RyaW5nKHVybC5fX2VzTW9kdWxlID8gdXJsLmRlZmF1bHQgOiB1cmwpOyAvLyBJZiB1cmwgaXMgYWxyZWFkeSB3cmFwcGVkIGluIHF1b3RlcywgcmVtb3ZlIHRoZW1cblxuICBpZiAoL15bJ1wiXS4qWydcIl0kLy50ZXN0KHVybCkpIHtcbiAgICB1cmwgPSB1cmwuc2xpY2UoMSwgLTEpO1xuICB9XG5cbiAgaWYgKG9wdGlvbnMuaGFzaCkge1xuICAgIHVybCArPSBvcHRpb25zLmhhc2g7XG4gIH0gLy8gU2hvdWxkIHVybCBiZSB3cmFwcGVkP1xuICAvLyBTZWUgaHR0cHM6Ly9kcmFmdHMuY3Nzd2cub3JnL2Nzcy12YWx1ZXMtMy8jdXJsc1xuXG5cbiAgaWYgKC9bXCInKCkgXFx0XFxuXXwoJTIwKS8udGVzdCh1cmwpIHx8IG9wdGlvbnMubmVlZFF1b3Rlcykge1xuICAgIHJldHVybiBcIlxcXCJcIi5jb25jYXQodXJsLnJlcGxhY2UoL1wiL2csICdcXFxcXCInKS5yZXBsYWNlKC9cXG4vZywgXCJcXFxcblwiKSwgXCJcXFwiXCIpO1xuICB9XG5cbiAgcmV0dXJuIHVybDtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0ZW0pIHtcbiAgdmFyIGNvbnRlbnQgPSBpdGVtWzFdO1xuICB2YXIgY3NzTWFwcGluZyA9IGl0ZW1bM107XG5cbiAgaWYgKCFjc3NNYXBwaW5nKSB7XG4gICAgcmV0dXJuIGNvbnRlbnQ7XG4gIH1cblxuICBpZiAodHlwZW9mIGJ0b2EgPT09IFwiZnVuY3Rpb25cIikge1xuICAgIHZhciBiYXNlNjQgPSBidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShjc3NNYXBwaW5nKSkpKTtcbiAgICB2YXIgZGF0YSA9IFwic291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsXCIuY29uY2F0KGJhc2U2NCk7XG4gICAgdmFyIHNvdXJjZU1hcHBpbmcgPSBcIi8qIyBcIi5jb25jYXQoZGF0YSwgXCIgKi9cIik7XG4gICAgdmFyIHNvdXJjZVVSTHMgPSBjc3NNYXBwaW5nLnNvdXJjZXMubWFwKGZ1bmN0aW9uIChzb3VyY2UpIHtcbiAgICAgIHJldHVybiBcIi8qIyBzb3VyY2VVUkw9XCIuY29uY2F0KGNzc01hcHBpbmcuc291cmNlUm9vdCB8fCBcIlwiKS5jb25jYXQoc291cmNlLCBcIiAqL1wiKTtcbiAgICB9KTtcbiAgICByZXR1cm4gW2NvbnRlbnRdLmNvbmNhdChzb3VyY2VVUkxzKS5jb25jYXQoW3NvdXJjZU1hcHBpbmddKS5qb2luKFwiXFxuXCIpO1xuICB9XG5cbiAgcmV0dXJuIFtjb250ZW50XS5qb2luKFwiXFxuXCIpO1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIHN0eWxlc0luRE9NID0gW107XG5cbmZ1bmN0aW9uIGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpIHtcbiAgdmFyIHJlc3VsdCA9IC0xO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3R5bGVzSW5ET00ubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoc3R5bGVzSW5ET01baV0uaWRlbnRpZmllciA9PT0gaWRlbnRpZmllcikge1xuICAgICAgcmVzdWx0ID0gaTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmZ1bmN0aW9uIG1vZHVsZXNUb0RvbShsaXN0LCBvcHRpb25zKSB7XG4gIHZhciBpZENvdW50TWFwID0ge307XG4gIHZhciBpZGVudGlmaWVycyA9IFtdO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7IGkrKykge1xuICAgIHZhciBpdGVtID0gbGlzdFtpXTtcbiAgICB2YXIgaWQgPSBvcHRpb25zLmJhc2UgPyBpdGVtWzBdICsgb3B0aW9ucy5iYXNlIDogaXRlbVswXTtcbiAgICB2YXIgY291bnQgPSBpZENvdW50TWFwW2lkXSB8fCAwO1xuICAgIHZhciBpZGVudGlmaWVyID0gXCJcIi5jb25jYXQoaWQsIFwiIFwiKS5jb25jYXQoY291bnQpO1xuICAgIGlkQ291bnRNYXBbaWRdID0gY291bnQgKyAxO1xuICAgIHZhciBpbmRleEJ5SWRlbnRpZmllciA9IGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpO1xuICAgIHZhciBvYmogPSB7XG4gICAgICBjc3M6IGl0ZW1bMV0sXG4gICAgICBtZWRpYTogaXRlbVsyXSxcbiAgICAgIHNvdXJjZU1hcDogaXRlbVszXSxcbiAgICAgIHN1cHBvcnRzOiBpdGVtWzRdLFxuICAgICAgbGF5ZXI6IGl0ZW1bNV1cbiAgICB9O1xuXG4gICAgaWYgKGluZGV4QnlJZGVudGlmaWVyICE9PSAtMSkge1xuICAgICAgc3R5bGVzSW5ET01baW5kZXhCeUlkZW50aWZpZXJdLnJlZmVyZW5jZXMrKztcbiAgICAgIHN0eWxlc0luRE9NW2luZGV4QnlJZGVudGlmaWVyXS51cGRhdGVyKG9iaik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciB1cGRhdGVyID0gYWRkRWxlbWVudFN0eWxlKG9iaiwgb3B0aW9ucyk7XG4gICAgICBvcHRpb25zLmJ5SW5kZXggPSBpO1xuICAgICAgc3R5bGVzSW5ET00uc3BsaWNlKGksIDAsIHtcbiAgICAgICAgaWRlbnRpZmllcjogaWRlbnRpZmllcixcbiAgICAgICAgdXBkYXRlcjogdXBkYXRlcixcbiAgICAgICAgcmVmZXJlbmNlczogMVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWRlbnRpZmllcnMucHVzaChpZGVudGlmaWVyKTtcbiAgfVxuXG4gIHJldHVybiBpZGVudGlmaWVycztcbn1cblxuZnVuY3Rpb24gYWRkRWxlbWVudFN0eWxlKG9iaiwgb3B0aW9ucykge1xuICB2YXIgYXBpID0gb3B0aW9ucy5kb21BUEkob3B0aW9ucyk7XG4gIGFwaS51cGRhdGUob2JqKTtcblxuICB2YXIgdXBkYXRlciA9IGZ1bmN0aW9uIHVwZGF0ZXIobmV3T2JqKSB7XG4gICAgaWYgKG5ld09iaikge1xuICAgICAgaWYgKG5ld09iai5jc3MgPT09IG9iai5jc3MgJiYgbmV3T2JqLm1lZGlhID09PSBvYmoubWVkaWEgJiYgbmV3T2JqLnNvdXJjZU1hcCA9PT0gb2JqLnNvdXJjZU1hcCAmJiBuZXdPYmouc3VwcG9ydHMgPT09IG9iai5zdXBwb3J0cyAmJiBuZXdPYmoubGF5ZXIgPT09IG9iai5sYXllcikge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGFwaS51cGRhdGUob2JqID0gbmV3T2JqKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYXBpLnJlbW92ZSgpO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gdXBkYXRlcjtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobGlzdCwgb3B0aW9ucykge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgbGlzdCA9IGxpc3QgfHwgW107XG4gIHZhciBsYXN0SWRlbnRpZmllcnMgPSBtb2R1bGVzVG9Eb20obGlzdCwgb3B0aW9ucyk7XG4gIHJldHVybiBmdW5jdGlvbiB1cGRhdGUobmV3TGlzdCkge1xuICAgIG5ld0xpc3QgPSBuZXdMaXN0IHx8IFtdO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsYXN0SWRlbnRpZmllcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBpZGVudGlmaWVyID0gbGFzdElkZW50aWZpZXJzW2ldO1xuICAgICAgdmFyIGluZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcik7XG4gICAgICBzdHlsZXNJbkRPTVtpbmRleF0ucmVmZXJlbmNlcy0tO1xuICAgIH1cblxuICAgIHZhciBuZXdMYXN0SWRlbnRpZmllcnMgPSBtb2R1bGVzVG9Eb20obmV3TGlzdCwgb3B0aW9ucyk7XG5cbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgbGFzdElkZW50aWZpZXJzLmxlbmd0aDsgX2krKykge1xuICAgICAgdmFyIF9pZGVudGlmaWVyID0gbGFzdElkZW50aWZpZXJzW19pXTtcblxuICAgICAgdmFyIF9pbmRleCA9IGdldEluZGV4QnlJZGVudGlmaWVyKF9pZGVudGlmaWVyKTtcblxuICAgICAgaWYgKHN0eWxlc0luRE9NW19pbmRleF0ucmVmZXJlbmNlcyA9PT0gMCkge1xuICAgICAgICBzdHlsZXNJbkRPTVtfaW5kZXhdLnVwZGF0ZXIoKTtcblxuICAgICAgICBzdHlsZXNJbkRPTS5zcGxpY2UoX2luZGV4LCAxKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBsYXN0SWRlbnRpZmllcnMgPSBuZXdMYXN0SWRlbnRpZmllcnM7XG4gIH07XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgbWVtbyA9IHt9O1xuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5cbmZ1bmN0aW9uIGdldFRhcmdldCh0YXJnZXQpIHtcbiAgaWYgKHR5cGVvZiBtZW1vW3RhcmdldF0gPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICB2YXIgc3R5bGVUYXJnZXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHRhcmdldCk7IC8vIFNwZWNpYWwgY2FzZSB0byByZXR1cm4gaGVhZCBvZiBpZnJhbWUgaW5zdGVhZCBvZiBpZnJhbWUgaXRzZWxmXG5cbiAgICBpZiAod2luZG93LkhUTUxJRnJhbWVFbGVtZW50ICYmIHN0eWxlVGFyZ2V0IGluc3RhbmNlb2Ygd2luZG93LkhUTUxJRnJhbWVFbGVtZW50KSB7XG4gICAgICB0cnkge1xuICAgICAgICAvLyBUaGlzIHdpbGwgdGhyb3cgYW4gZXhjZXB0aW9uIGlmIGFjY2VzcyB0byBpZnJhbWUgaXMgYmxvY2tlZFxuICAgICAgICAvLyBkdWUgdG8gY3Jvc3Mtb3JpZ2luIHJlc3RyaWN0aW9uc1xuICAgICAgICBzdHlsZVRhcmdldCA9IHN0eWxlVGFyZ2V0LmNvbnRlbnREb2N1bWVudC5oZWFkO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAvLyBpc3RhbmJ1bCBpZ25vcmUgbmV4dFxuICAgICAgICBzdHlsZVRhcmdldCA9IG51bGw7XG4gICAgICB9XG4gICAgfVxuXG4gICAgbWVtb1t0YXJnZXRdID0gc3R5bGVUYXJnZXQ7XG4gIH1cblxuICByZXR1cm4gbWVtb1t0YXJnZXRdO1xufVxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5cblxuZnVuY3Rpb24gaW5zZXJ0QnlTZWxlY3RvcihpbnNlcnQsIHN0eWxlKSB7XG4gIHZhciB0YXJnZXQgPSBnZXRUYXJnZXQoaW5zZXJ0KTtcblxuICBpZiAoIXRhcmdldCkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIkNvdWxkbid0IGZpbmQgYSBzdHlsZSB0YXJnZXQuIFRoaXMgcHJvYmFibHkgbWVhbnMgdGhhdCB0aGUgdmFsdWUgZm9yIHRoZSAnaW5zZXJ0JyBwYXJhbWV0ZXIgaXMgaW52YWxpZC5cIik7XG4gIH1cblxuICB0YXJnZXQuYXBwZW5kQ2hpbGQoc3R5bGUpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGluc2VydEJ5U2VsZWN0b3I7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMpIHtcbiAgdmFyIGVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3R5bGVcIik7XG4gIG9wdGlvbnMuc2V0QXR0cmlidXRlcyhlbGVtZW50LCBvcHRpb25zLmF0dHJpYnV0ZXMpO1xuICBvcHRpb25zLmluc2VydChlbGVtZW50LCBvcHRpb25zLm9wdGlvbnMpO1xuICByZXR1cm4gZWxlbWVudDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzKHN0eWxlRWxlbWVudCkge1xuICB2YXIgbm9uY2UgPSB0eXBlb2YgX193ZWJwYWNrX25vbmNlX18gIT09IFwidW5kZWZpbmVkXCIgPyBfX3dlYnBhY2tfbm9uY2VfXyA6IG51bGw7XG5cbiAgaWYgKG5vbmNlKSB7XG4gICAgc3R5bGVFbGVtZW50LnNldEF0dHJpYnV0ZShcIm5vbmNlXCIsIG5vbmNlKTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHNldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlczsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBhcHBseShzdHlsZUVsZW1lbnQsIG9wdGlvbnMsIG9iaikge1xuICB2YXIgY3NzID0gXCJcIjtcblxuICBpZiAob2JqLnN1cHBvcnRzKSB7XG4gICAgY3NzICs9IFwiQHN1cHBvcnRzIChcIi5jb25jYXQob2JqLnN1cHBvcnRzLCBcIikge1wiKTtcbiAgfVxuXG4gIGlmIChvYmoubWVkaWEpIHtcbiAgICBjc3MgKz0gXCJAbWVkaWEgXCIuY29uY2F0KG9iai5tZWRpYSwgXCIge1wiKTtcbiAgfVxuXG4gIHZhciBuZWVkTGF5ZXIgPSB0eXBlb2Ygb2JqLmxheWVyICE9PSBcInVuZGVmaW5lZFwiO1xuXG4gIGlmIChuZWVkTGF5ZXIpIHtcbiAgICBjc3MgKz0gXCJAbGF5ZXJcIi5jb25jYXQob2JqLmxheWVyLmxlbmd0aCA+IDAgPyBcIiBcIi5jb25jYXQob2JqLmxheWVyKSA6IFwiXCIsIFwiIHtcIik7XG4gIH1cblxuICBjc3MgKz0gb2JqLmNzcztcblxuICBpZiAobmVlZExheWVyKSB7XG4gICAgY3NzICs9IFwifVwiO1xuICB9XG5cbiAgaWYgKG9iai5tZWRpYSkge1xuICAgIGNzcyArPSBcIn1cIjtcbiAgfVxuXG4gIGlmIChvYmouc3VwcG9ydHMpIHtcbiAgICBjc3MgKz0gXCJ9XCI7XG4gIH1cblxuICB2YXIgc291cmNlTWFwID0gb2JqLnNvdXJjZU1hcDtcblxuICBpZiAoc291cmNlTWFwICYmIHR5cGVvZiBidG9hICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgY3NzICs9IFwiXFxuLyojIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxcIi5jb25jYXQoYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoc291cmNlTWFwKSkpKSwgXCIgKi9cIik7XG4gIH0gLy8gRm9yIG9sZCBJRVxuXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAgKi9cblxuXG4gIG9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0oY3NzLCBzdHlsZUVsZW1lbnQsIG9wdGlvbnMub3B0aW9ucyk7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZUVsZW1lbnQpIHtcbiAgLy8gaXN0YW5idWwgaWdub3JlIGlmXG4gIGlmIChzdHlsZUVsZW1lbnQucGFyZW50Tm9kZSA9PT0gbnVsbCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHN0eWxlRWxlbWVudC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHN0eWxlRWxlbWVudCk7XG59XG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cblxuXG5mdW5jdGlvbiBkb21BUEkob3B0aW9ucykge1xuICB2YXIgc3R5bGVFbGVtZW50ID0gb3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucyk7XG4gIHJldHVybiB7XG4gICAgdXBkYXRlOiBmdW5jdGlvbiB1cGRhdGUob2JqKSB7XG4gICAgICBhcHBseShzdHlsZUVsZW1lbnQsIG9wdGlvbnMsIG9iaik7XG4gICAgfSxcbiAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZSgpIHtcbiAgICAgIHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZUVsZW1lbnQpO1xuICAgIH1cbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBkb21BUEk7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gc3R5bGVUYWdUcmFuc2Zvcm0oY3NzLCBzdHlsZUVsZW1lbnQpIHtcbiAgaWYgKHN0eWxlRWxlbWVudC5zdHlsZVNoZWV0KSB7XG4gICAgc3R5bGVFbGVtZW50LnN0eWxlU2hlZXQuY3NzVGV4dCA9IGNzcztcbiAgfSBlbHNlIHtcbiAgICB3aGlsZSAoc3R5bGVFbGVtZW50LmZpcnN0Q2hpbGQpIHtcbiAgICAgIHN0eWxlRWxlbWVudC5yZW1vdmVDaGlsZChzdHlsZUVsZW1lbnQuZmlyc3RDaGlsZCk7XG4gICAgfVxuXG4gICAgc3R5bGVFbGVtZW50LmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNzcykpO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc3R5bGVUYWdUcmFuc2Zvcm07IiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0dmFyIGNhY2hlZE1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF07XG5cdGlmIChjYWNoZWRNb2R1bGUgIT09IHVuZGVmaW5lZCkge1xuXHRcdHJldHVybiBjYWNoZWRNb2R1bGUuZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHRpZDogbW9kdWxlSWQsXG5cdFx0Ly8gbm8gbW9kdWxlLmxvYWRlZCBuZWVkZWRcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXShtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbi8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG5fX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBfX3dlYnBhY2tfbW9kdWxlc19fO1xuXG4iLCIvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuX193ZWJwYWNrX3JlcXVpcmVfXy5uID0gKG1vZHVsZSkgPT4ge1xuXHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cblx0XHQoKSA9PiAobW9kdWxlWydkZWZhdWx0J10pIDpcblx0XHQoKSA9PiAobW9kdWxlKTtcblx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgeyBhOiBnZXR0ZXIgfSk7XG5cdHJldHVybiBnZXR0ZXI7XG59OyIsIi8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb25zIGZvciBoYXJtb255IGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uZCA9IChleHBvcnRzLCBkZWZpbml0aW9uKSA9PiB7XG5cdGZvcih2YXIga2V5IGluIGRlZmluaXRpb24pIHtcblx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZGVmaW5pdGlvbiwga2V5KSAmJiAhX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIGtleSkpIHtcblx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBkZWZpbml0aW9uW2tleV0gfSk7XG5cdFx0fVxuXHR9XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18uZyA9IChmdW5jdGlvbigpIHtcblx0aWYgKHR5cGVvZiBnbG9iYWxUaGlzID09PSAnb2JqZWN0JykgcmV0dXJuIGdsb2JhbFRoaXM7XG5cdHRyeSB7XG5cdFx0cmV0dXJuIHRoaXMgfHwgbmV3IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG5cdH0gY2F0Y2ggKGUpIHtcblx0XHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gJ29iamVjdCcpIHJldHVybiB3aW5kb3c7XG5cdH1cbn0pKCk7IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5vID0gKG9iaiwgcHJvcCkgPT4gKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApKSIsInZhciBzY3JpcHRVcmw7XG5pZiAoX193ZWJwYWNrX3JlcXVpcmVfXy5nLmltcG9ydFNjcmlwdHMpIHNjcmlwdFVybCA9IF9fd2VicGFja19yZXF1aXJlX18uZy5sb2NhdGlvbiArIFwiXCI7XG52YXIgZG9jdW1lbnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLmcuZG9jdW1lbnQ7XG5pZiAoIXNjcmlwdFVybCAmJiBkb2N1bWVudCkge1xuXHRpZiAoZG9jdW1lbnQuY3VycmVudFNjcmlwdClcblx0XHRzY3JpcHRVcmwgPSBkb2N1bWVudC5jdXJyZW50U2NyaXB0LnNyY1xuXHRpZiAoIXNjcmlwdFVybCkge1xuXHRcdHZhciBzY3JpcHRzID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJzY3JpcHRcIik7XG5cdFx0aWYoc2NyaXB0cy5sZW5ndGgpIHNjcmlwdFVybCA9IHNjcmlwdHNbc2NyaXB0cy5sZW5ndGggLSAxXS5zcmNcblx0fVxufVxuLy8gV2hlbiBzdXBwb3J0aW5nIGJyb3dzZXJzIHdoZXJlIGFuIGF1dG9tYXRpYyBwdWJsaWNQYXRoIGlzIG5vdCBzdXBwb3J0ZWQgeW91IG11c3Qgc3BlY2lmeSBhbiBvdXRwdXQucHVibGljUGF0aCBtYW51YWxseSB2aWEgY29uZmlndXJhdGlvblxuLy8gb3IgcGFzcyBhbiBlbXB0eSBzdHJpbmcgKFwiXCIpIGFuZCBzZXQgdGhlIF9fd2VicGFja19wdWJsaWNfcGF0aF9fIHZhcmlhYmxlIGZyb20geW91ciBjb2RlIHRvIHVzZSB5b3VyIG93biBsb2dpYy5cbmlmICghc2NyaXB0VXJsKSB0aHJvdyBuZXcgRXJyb3IoXCJBdXRvbWF0aWMgcHVibGljUGF0aCBpcyBub3Qgc3VwcG9ydGVkIGluIHRoaXMgYnJvd3NlclwiKTtcbnNjcmlwdFVybCA9IHNjcmlwdFVybC5yZXBsYWNlKC8jLiokLywgXCJcIikucmVwbGFjZSgvXFw/LiokLywgXCJcIikucmVwbGFjZSgvXFwvW15cXC9dKyQvLCBcIi9cIik7XG5fX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBzY3JpcHRVcmw7IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5iID0gZG9jdW1lbnQuYmFzZVVSSSB8fCBzZWxmLmxvY2F0aW9uLmhyZWY7XG5cbi8vIG9iamVjdCB0byBzdG9yZSBsb2FkZWQgYW5kIGxvYWRpbmcgY2h1bmtzXG4vLyB1bmRlZmluZWQgPSBjaHVuayBub3QgbG9hZGVkLCBudWxsID0gY2h1bmsgcHJlbG9hZGVkL3ByZWZldGNoZWRcbi8vIFtyZXNvbHZlLCByZWplY3QsIFByb21pc2VdID0gY2h1bmsgbG9hZGluZywgMCA9IGNodW5rIGxvYWRlZFxudmFyIGluc3RhbGxlZENodW5rcyA9IHtcblx0MTc5OiAwXG59O1xuXG4vLyBubyBjaHVuayBvbiBkZW1hbmQgbG9hZGluZ1xuXG4vLyBubyBwcmVmZXRjaGluZ1xuXG4vLyBubyBwcmVsb2FkZWRcblxuLy8gbm8gSE1SXG5cbi8vIG5vIEhNUiBtYW5pZmVzdFxuXG4vLyBubyBvbiBjaHVua3MgbG9hZGVkXG5cbi8vIG5vIGpzb25wIGZ1bmN0aW9uIiwiXG4gICAgICBpbXBvcnQgQVBJIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICBpbXBvcnQgZG9tQVBJIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRGbiBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanNcIjtcbiAgICAgIGltcG9ydCBzZXRBdHRyaWJ1dGVzIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0U3R5bGVFbGVtZW50IGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzXCI7XG4gICAgICBpbXBvcnQgc3R5bGVUYWdUcmFuc2Zvcm1GbiBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzXCI7XG4gICAgICBpbXBvcnQgY29udGVudCwgKiBhcyBuYW1lZEV4cG9ydCBmcm9tIFwiISEuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL3N0eWxlcy5jc3NcIjtcbiAgICAgIFxuICAgICAgXG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0gPSBzdHlsZVRhZ1RyYW5zZm9ybUZuO1xub3B0aW9ucy5zZXRBdHRyaWJ1dGVzID0gc2V0QXR0cmlidXRlcztcblxuICAgICAgb3B0aW9ucy5pbnNlcnQgPSBpbnNlcnRGbi5iaW5kKG51bGwsIFwiaGVhZFwiKTtcbiAgICBcbm9wdGlvbnMuZG9tQVBJID0gZG9tQVBJO1xub3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7XG5cbnZhciB1cGRhdGUgPSBBUEkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgKiBmcm9tIFwiISEuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL3N0eWxlcy5jc3NcIjtcbiAgICAgICBleHBvcnQgZGVmYXVsdCBjb250ZW50ICYmIGNvbnRlbnQubG9jYWxzID8gY29udGVudC5sb2NhbHMgOiB1bmRlZmluZWQ7XG4iLCIvKiFcbiAqIENoYXJ0LmpzIHYzLjcuMVxuICogaHR0cHM6Ly93d3cuY2hhcnRqcy5vcmdcbiAqIChjKSAyMDIyIENoYXJ0LmpzIENvbnRyaWJ1dG9yc1xuICogUmVsZWFzZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlXG4gKi9cbmZ1bmN0aW9uIGZvbnRTdHJpbmcocGl4ZWxTaXplLCBmb250U3R5bGUsIGZvbnRGYW1pbHkpIHtcbiAgcmV0dXJuIGZvbnRTdHlsZSArICcgJyArIHBpeGVsU2l6ZSArICdweCAnICsgZm9udEZhbWlseTtcbn1cbmNvbnN0IHJlcXVlc3RBbmltRnJhbWUgPSAoZnVuY3Rpb24oKSB7XG4gIGlmICh0eXBlb2Ygd2luZG93ID09PSAndW5kZWZpbmVkJykge1xuICAgIHJldHVybiBmdW5jdGlvbihjYWxsYmFjaykge1xuICAgICAgcmV0dXJuIGNhbGxiYWNrKCk7XG4gICAgfTtcbiAgfVxuICByZXR1cm4gd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZTtcbn0oKSk7XG5mdW5jdGlvbiB0aHJvdHRsZWQoZm4sIHRoaXNBcmcsIHVwZGF0ZUZuKSB7XG4gIGNvbnN0IHVwZGF0ZUFyZ3MgPSB1cGRhdGVGbiB8fCAoKGFyZ3MpID0+IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3MpKTtcbiAgbGV0IHRpY2tpbmcgPSBmYWxzZTtcbiAgbGV0IGFyZ3MgPSBbXTtcbiAgcmV0dXJuIGZ1bmN0aW9uKC4uLnJlc3QpIHtcbiAgICBhcmdzID0gdXBkYXRlQXJncyhyZXN0KTtcbiAgICBpZiAoIXRpY2tpbmcpIHtcbiAgICAgIHRpY2tpbmcgPSB0cnVlO1xuICAgICAgcmVxdWVzdEFuaW1GcmFtZS5jYWxsKHdpbmRvdywgKCkgPT4ge1xuICAgICAgICB0aWNraW5nID0gZmFsc2U7XG4gICAgICAgIGZuLmFwcGx5KHRoaXNBcmcsIGFyZ3MpO1xuICAgICAgfSk7XG4gICAgfVxuICB9O1xufVxuZnVuY3Rpb24gZGVib3VuY2UoZm4sIGRlbGF5KSB7XG4gIGxldCB0aW1lb3V0O1xuICByZXR1cm4gZnVuY3Rpb24oLi4uYXJncykge1xuICAgIGlmIChkZWxheSkge1xuICAgICAgY2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xuICAgICAgdGltZW91dCA9IHNldFRpbWVvdXQoZm4sIGRlbGF5LCBhcmdzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZm4uYXBwbHkodGhpcywgYXJncyk7XG4gICAgfVxuICAgIHJldHVybiBkZWxheTtcbiAgfTtcbn1cbmNvbnN0IF90b0xlZnRSaWdodENlbnRlciA9IChhbGlnbikgPT4gYWxpZ24gPT09ICdzdGFydCcgPyAnbGVmdCcgOiBhbGlnbiA9PT0gJ2VuZCcgPyAncmlnaHQnIDogJ2NlbnRlcic7XG5jb25zdCBfYWxpZ25TdGFydEVuZCA9IChhbGlnbiwgc3RhcnQsIGVuZCkgPT4gYWxpZ24gPT09ICdzdGFydCcgPyBzdGFydCA6IGFsaWduID09PSAnZW5kJyA/IGVuZCA6IChzdGFydCArIGVuZCkgLyAyO1xuY29uc3QgX3RleHRYID0gKGFsaWduLCBsZWZ0LCByaWdodCwgcnRsKSA9PiB7XG4gIGNvbnN0IGNoZWNrID0gcnRsID8gJ2xlZnQnIDogJ3JpZ2h0JztcbiAgcmV0dXJuIGFsaWduID09PSBjaGVjayA/IHJpZ2h0IDogYWxpZ24gPT09ICdjZW50ZXInID8gKGxlZnQgKyByaWdodCkgLyAyIDogbGVmdDtcbn07XG5cbmZ1bmN0aW9uIG5vb3AoKSB7fVxuY29uc3QgdWlkID0gKGZ1bmN0aW9uKCkge1xuICBsZXQgaWQgPSAwO1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGlkKys7XG4gIH07XG59KCkpO1xuZnVuY3Rpb24gaXNOdWxsT3JVbmRlZih2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgPT09IG51bGwgfHwgdHlwZW9mIHZhbHVlID09PSAndW5kZWZpbmVkJztcbn1cbmZ1bmN0aW9uIGlzQXJyYXkodmFsdWUpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkgJiYgQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICBjb25zdCB0eXBlID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbHVlKTtcbiAgaWYgKHR5cGUuc3Vic3RyKDAsIDcpID09PSAnW29iamVjdCcgJiYgdHlwZS5zdWJzdHIoLTYpID09PSAnQXJyYXldJykge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIHJldHVybiBmYWxzZTtcbn1cbmZ1bmN0aW9uIGlzT2JqZWN0KHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSAhPT0gbnVsbCAmJiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsdWUpID09PSAnW29iamVjdCBPYmplY3RdJztcbn1cbmNvbnN0IGlzTnVtYmVyRmluaXRlID0gKHZhbHVlKSA9PiAodHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJyB8fCB2YWx1ZSBpbnN0YW5jZW9mIE51bWJlcikgJiYgaXNGaW5pdGUoK3ZhbHVlKTtcbmZ1bmN0aW9uIGZpbml0ZU9yRGVmYXVsdCh2YWx1ZSwgZGVmYXVsdFZhbHVlKSB7XG4gIHJldHVybiBpc051bWJlckZpbml0ZSh2YWx1ZSkgPyB2YWx1ZSA6IGRlZmF1bHRWYWx1ZTtcbn1cbmZ1bmN0aW9uIHZhbHVlT3JEZWZhdWx0KHZhbHVlLCBkZWZhdWx0VmFsdWUpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ3VuZGVmaW5lZCcgPyBkZWZhdWx0VmFsdWUgOiB2YWx1ZTtcbn1cbmNvbnN0IHRvUGVyY2VudGFnZSA9ICh2YWx1ZSwgZGltZW5zaW9uKSA9PlxuICB0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnICYmIHZhbHVlLmVuZHNXaXRoKCclJykgP1xuICAgIHBhcnNlRmxvYXQodmFsdWUpIC8gMTAwXG4gICAgOiB2YWx1ZSAvIGRpbWVuc2lvbjtcbmNvbnN0IHRvRGltZW5zaW9uID0gKHZhbHVlLCBkaW1lbnNpb24pID0+XG4gIHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgJiYgdmFsdWUuZW5kc1dpdGgoJyUnKSA/XG4gICAgcGFyc2VGbG9hdCh2YWx1ZSkgLyAxMDAgKiBkaW1lbnNpb25cbiAgICA6ICt2YWx1ZTtcbmZ1bmN0aW9uIGNhbGxiYWNrKGZuLCBhcmdzLCB0aGlzQXJnKSB7XG4gIGlmIChmbiAmJiB0eXBlb2YgZm4uY2FsbCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiBmbi5hcHBseSh0aGlzQXJnLCBhcmdzKTtcbiAgfVxufVxuZnVuY3Rpb24gZWFjaChsb29wYWJsZSwgZm4sIHRoaXNBcmcsIHJldmVyc2UpIHtcbiAgbGV0IGksIGxlbiwga2V5cztcbiAgaWYgKGlzQXJyYXkobG9vcGFibGUpKSB7XG4gICAgbGVuID0gbG9vcGFibGUubGVuZ3RoO1xuICAgIGlmIChyZXZlcnNlKSB7XG4gICAgICBmb3IgKGkgPSBsZW4gLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgICBmbi5jYWxsKHRoaXNBcmcsIGxvb3BhYmxlW2ldLCBpKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgIGZuLmNhbGwodGhpc0FyZywgbG9vcGFibGVbaV0sIGkpO1xuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIGlmIChpc09iamVjdChsb29wYWJsZSkpIHtcbiAgICBrZXlzID0gT2JqZWN0LmtleXMobG9vcGFibGUpO1xuICAgIGxlbiA9IGtleXMubGVuZ3RoO1xuICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgICAgZm4uY2FsbCh0aGlzQXJnLCBsb29wYWJsZVtrZXlzW2ldXSwga2V5c1tpXSk7XG4gICAgfVxuICB9XG59XG5mdW5jdGlvbiBfZWxlbWVudHNFcXVhbChhMCwgYTEpIHtcbiAgbGV0IGksIGlsZW4sIHYwLCB2MTtcbiAgaWYgKCFhMCB8fCAhYTEgfHwgYTAubGVuZ3RoICE9PSBhMS5sZW5ndGgpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgZm9yIChpID0gMCwgaWxlbiA9IGEwLmxlbmd0aDsgaSA8IGlsZW47ICsraSkge1xuICAgIHYwID0gYTBbaV07XG4gICAgdjEgPSBhMVtpXTtcbiAgICBpZiAodjAuZGF0YXNldEluZGV4ICE9PSB2MS5kYXRhc2V0SW5kZXggfHwgdjAuaW5kZXggIT09IHYxLmluZGV4KSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG4gIHJldHVybiB0cnVlO1xufVxuZnVuY3Rpb24gY2xvbmUkMShzb3VyY2UpIHtcbiAgaWYgKGlzQXJyYXkoc291cmNlKSkge1xuICAgIHJldHVybiBzb3VyY2UubWFwKGNsb25lJDEpO1xuICB9XG4gIGlmIChpc09iamVjdChzb3VyY2UpKSB7XG4gICAgY29uc3QgdGFyZ2V0ID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXMoc291cmNlKTtcbiAgICBjb25zdCBrbGVuID0ga2V5cy5sZW5ndGg7XG4gICAgbGV0IGsgPSAwO1xuICAgIGZvciAoOyBrIDwga2xlbjsgKytrKSB7XG4gICAgICB0YXJnZXRba2V5c1trXV0gPSBjbG9uZSQxKHNvdXJjZVtrZXlzW2tdXSk7XG4gICAgfVxuICAgIHJldHVybiB0YXJnZXQ7XG4gIH1cbiAgcmV0dXJuIHNvdXJjZTtcbn1cbmZ1bmN0aW9uIGlzVmFsaWRLZXkoa2V5KSB7XG4gIHJldHVybiBbJ19fcHJvdG9fXycsICdwcm90b3R5cGUnLCAnY29uc3RydWN0b3InXS5pbmRleE9mKGtleSkgPT09IC0xO1xufVxuZnVuY3Rpb24gX21lcmdlcihrZXksIHRhcmdldCwgc291cmNlLCBvcHRpb25zKSB7XG4gIGlmICghaXNWYWxpZEtleShrZXkpKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGNvbnN0IHR2YWwgPSB0YXJnZXRba2V5XTtcbiAgY29uc3Qgc3ZhbCA9IHNvdXJjZVtrZXldO1xuICBpZiAoaXNPYmplY3QodHZhbCkgJiYgaXNPYmplY3Qoc3ZhbCkpIHtcbiAgICBtZXJnZSh0dmFsLCBzdmFsLCBvcHRpb25zKTtcbiAgfSBlbHNlIHtcbiAgICB0YXJnZXRba2V5XSA9IGNsb25lJDEoc3ZhbCk7XG4gIH1cbn1cbmZ1bmN0aW9uIG1lcmdlKHRhcmdldCwgc291cmNlLCBvcHRpb25zKSB7XG4gIGNvbnN0IHNvdXJjZXMgPSBpc0FycmF5KHNvdXJjZSkgPyBzb3VyY2UgOiBbc291cmNlXTtcbiAgY29uc3QgaWxlbiA9IHNvdXJjZXMubGVuZ3RoO1xuICBpZiAoIWlzT2JqZWN0KHRhcmdldCkpIHtcbiAgICByZXR1cm4gdGFyZ2V0O1xuICB9XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICBjb25zdCBtZXJnZXIgPSBvcHRpb25zLm1lcmdlciB8fCBfbWVyZ2VyO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGlsZW47ICsraSkge1xuICAgIHNvdXJjZSA9IHNvdXJjZXNbaV07XG4gICAgaWYgKCFpc09iamVjdChzb3VyY2UpKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKHNvdXJjZSk7XG4gICAgZm9yIChsZXQgayA9IDAsIGtsZW4gPSBrZXlzLmxlbmd0aDsgayA8IGtsZW47ICsraykge1xuICAgICAgbWVyZ2VyKGtleXNba10sIHRhcmdldCwgc291cmNlLCBvcHRpb25zKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRhcmdldDtcbn1cbmZ1bmN0aW9uIG1lcmdlSWYodGFyZ2V0LCBzb3VyY2UpIHtcbiAgcmV0dXJuIG1lcmdlKHRhcmdldCwgc291cmNlLCB7bWVyZ2VyOiBfbWVyZ2VySWZ9KTtcbn1cbmZ1bmN0aW9uIF9tZXJnZXJJZihrZXksIHRhcmdldCwgc291cmNlKSB7XG4gIGlmICghaXNWYWxpZEtleShrZXkpKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGNvbnN0IHR2YWwgPSB0YXJnZXRba2V5XTtcbiAgY29uc3Qgc3ZhbCA9IHNvdXJjZVtrZXldO1xuICBpZiAoaXNPYmplY3QodHZhbCkgJiYgaXNPYmplY3Qoc3ZhbCkpIHtcbiAgICBtZXJnZUlmKHR2YWwsIHN2YWwpO1xuICB9IGVsc2UgaWYgKCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwodGFyZ2V0LCBrZXkpKSB7XG4gICAgdGFyZ2V0W2tleV0gPSBjbG9uZSQxKHN2YWwpO1xuICB9XG59XG5mdW5jdGlvbiBfZGVwcmVjYXRlZChzY29wZSwgdmFsdWUsIHByZXZpb3VzLCBjdXJyZW50KSB7XG4gIGlmICh2YWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgY29uc29sZS53YXJuKHNjb3BlICsgJzogXCInICsgcHJldmlvdXMgK1xuXHRcdFx0J1wiIGlzIGRlcHJlY2F0ZWQuIFBsZWFzZSB1c2UgXCInICsgY3VycmVudCArICdcIiBpbnN0ZWFkJyk7XG4gIH1cbn1cbmNvbnN0IGVtcHR5U3RyaW5nID0gJyc7XG5jb25zdCBkb3QgPSAnLic7XG5mdW5jdGlvbiBpbmRleE9mRG90T3JMZW5ndGgoa2V5LCBzdGFydCkge1xuICBjb25zdCBpZHggPSBrZXkuaW5kZXhPZihkb3QsIHN0YXJ0KTtcbiAgcmV0dXJuIGlkeCA9PT0gLTEgPyBrZXkubGVuZ3RoIDogaWR4O1xufVxuZnVuY3Rpb24gcmVzb2x2ZU9iamVjdEtleShvYmosIGtleSkge1xuICBpZiAoa2V5ID09PSBlbXB0eVN0cmluZykge1xuICAgIHJldHVybiBvYmo7XG4gIH1cbiAgbGV0IHBvcyA9IDA7XG4gIGxldCBpZHggPSBpbmRleE9mRG90T3JMZW5ndGgoa2V5LCBwb3MpO1xuICB3aGlsZSAob2JqICYmIGlkeCA+IHBvcykge1xuICAgIG9iaiA9IG9ialtrZXkuc3Vic3RyKHBvcywgaWR4IC0gcG9zKV07XG4gICAgcG9zID0gaWR4ICsgMTtcbiAgICBpZHggPSBpbmRleE9mRG90T3JMZW5ndGgoa2V5LCBwb3MpO1xuICB9XG4gIHJldHVybiBvYmo7XG59XG5mdW5jdGlvbiBfY2FwaXRhbGl6ZShzdHIpIHtcbiAgcmV0dXJuIHN0ci5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIHN0ci5zbGljZSgxKTtcbn1cbmNvbnN0IGRlZmluZWQgPSAodmFsdWUpID0+IHR5cGVvZiB2YWx1ZSAhPT0gJ3VuZGVmaW5lZCc7XG5jb25zdCBpc0Z1bmN0aW9uID0gKHZhbHVlKSA9PiB0eXBlb2YgdmFsdWUgPT09ICdmdW5jdGlvbic7XG5jb25zdCBzZXRzRXF1YWwgPSAoYSwgYikgPT4ge1xuICBpZiAoYS5zaXplICE9PSBiLnNpemUpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgZm9yIChjb25zdCBpdGVtIG9mIGEpIHtcbiAgICBpZiAoIWIuaGFzKGl0ZW0pKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG4gIHJldHVybiB0cnVlO1xufTtcbmZ1bmN0aW9uIF9pc0NsaWNrRXZlbnQoZSkge1xuICByZXR1cm4gZS50eXBlID09PSAnbW91c2V1cCcgfHwgZS50eXBlID09PSAnY2xpY2snIHx8IGUudHlwZSA9PT0gJ2NvbnRleHRtZW51Jztcbn1cblxuY29uc3QgUEkgPSBNYXRoLlBJO1xuY29uc3QgVEFVID0gMiAqIFBJO1xuY29uc3QgUElUQVUgPSBUQVUgKyBQSTtcbmNvbnN0IElORklOSVRZID0gTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZO1xuY29uc3QgUkFEX1BFUl9ERUcgPSBQSSAvIDE4MDtcbmNvbnN0IEhBTEZfUEkgPSBQSSAvIDI7XG5jb25zdCBRVUFSVEVSX1BJID0gUEkgLyA0O1xuY29uc3QgVFdPX1RISVJEU19QSSA9IFBJICogMiAvIDM7XG5jb25zdCBsb2cxMCA9IE1hdGgubG9nMTA7XG5jb25zdCBzaWduID0gTWF0aC5zaWduO1xuZnVuY3Rpb24gbmljZU51bShyYW5nZSkge1xuICBjb25zdCByb3VuZGVkUmFuZ2UgPSBNYXRoLnJvdW5kKHJhbmdlKTtcbiAgcmFuZ2UgPSBhbG1vc3RFcXVhbHMocmFuZ2UsIHJvdW5kZWRSYW5nZSwgcmFuZ2UgLyAxMDAwKSA/IHJvdW5kZWRSYW5nZSA6IHJhbmdlO1xuICBjb25zdCBuaWNlUmFuZ2UgPSBNYXRoLnBvdygxMCwgTWF0aC5mbG9vcihsb2cxMChyYW5nZSkpKTtcbiAgY29uc3QgZnJhY3Rpb24gPSByYW5nZSAvIG5pY2VSYW5nZTtcbiAgY29uc3QgbmljZUZyYWN0aW9uID0gZnJhY3Rpb24gPD0gMSA/IDEgOiBmcmFjdGlvbiA8PSAyID8gMiA6IGZyYWN0aW9uIDw9IDUgPyA1IDogMTA7XG4gIHJldHVybiBuaWNlRnJhY3Rpb24gKiBuaWNlUmFuZ2U7XG59XG5mdW5jdGlvbiBfZmFjdG9yaXplKHZhbHVlKSB7XG4gIGNvbnN0IHJlc3VsdCA9IFtdO1xuICBjb25zdCBzcXJ0ID0gTWF0aC5zcXJ0KHZhbHVlKTtcbiAgbGV0IGk7XG4gIGZvciAoaSA9IDE7IGkgPCBzcXJ0OyBpKyspIHtcbiAgICBpZiAodmFsdWUgJSBpID09PSAwKSB7XG4gICAgICByZXN1bHQucHVzaChpKTtcbiAgICAgIHJlc3VsdC5wdXNoKHZhbHVlIC8gaSk7XG4gICAgfVxuICB9XG4gIGlmIChzcXJ0ID09PSAoc3FydCB8IDApKSB7XG4gICAgcmVzdWx0LnB1c2goc3FydCk7XG4gIH1cbiAgcmVzdWx0LnNvcnQoKGEsIGIpID0+IGEgLSBiKS5wb3AoKTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cbmZ1bmN0aW9uIGlzTnVtYmVyKG4pIHtcbiAgcmV0dXJuICFpc05hTihwYXJzZUZsb2F0KG4pKSAmJiBpc0Zpbml0ZShuKTtcbn1cbmZ1bmN0aW9uIGFsbW9zdEVxdWFscyh4LCB5LCBlcHNpbG9uKSB7XG4gIHJldHVybiBNYXRoLmFicyh4IC0geSkgPCBlcHNpbG9uO1xufVxuZnVuY3Rpb24gYWxtb3N0V2hvbGUoeCwgZXBzaWxvbikge1xuICBjb25zdCByb3VuZGVkID0gTWF0aC5yb3VuZCh4KTtcbiAgcmV0dXJuICgocm91bmRlZCAtIGVwc2lsb24pIDw9IHgpICYmICgocm91bmRlZCArIGVwc2lsb24pID49IHgpO1xufVxuZnVuY3Rpb24gX3NldE1pbkFuZE1heEJ5S2V5KGFycmF5LCB0YXJnZXQsIHByb3BlcnR5KSB7XG4gIGxldCBpLCBpbGVuLCB2YWx1ZTtcbiAgZm9yIChpID0gMCwgaWxlbiA9IGFycmF5Lmxlbmd0aDsgaSA8IGlsZW47IGkrKykge1xuICAgIHZhbHVlID0gYXJyYXlbaV1bcHJvcGVydHldO1xuICAgIGlmICghaXNOYU4odmFsdWUpKSB7XG4gICAgICB0YXJnZXQubWluID0gTWF0aC5taW4odGFyZ2V0Lm1pbiwgdmFsdWUpO1xuICAgICAgdGFyZ2V0Lm1heCA9IE1hdGgubWF4KHRhcmdldC5tYXgsIHZhbHVlKTtcbiAgICB9XG4gIH1cbn1cbmZ1bmN0aW9uIHRvUmFkaWFucyhkZWdyZWVzKSB7XG4gIHJldHVybiBkZWdyZWVzICogKFBJIC8gMTgwKTtcbn1cbmZ1bmN0aW9uIHRvRGVncmVlcyhyYWRpYW5zKSB7XG4gIHJldHVybiByYWRpYW5zICogKDE4MCAvIFBJKTtcbn1cbmZ1bmN0aW9uIF9kZWNpbWFsUGxhY2VzKHgpIHtcbiAgaWYgKCFpc051bWJlckZpbml0ZSh4KSkge1xuICAgIHJldHVybjtcbiAgfVxuICBsZXQgZSA9IDE7XG4gIGxldCBwID0gMDtcbiAgd2hpbGUgKE1hdGgucm91bmQoeCAqIGUpIC8gZSAhPT0geCkge1xuICAgIGUgKj0gMTA7XG4gICAgcCsrO1xuICB9XG4gIHJldHVybiBwO1xufVxuZnVuY3Rpb24gZ2V0QW5nbGVGcm9tUG9pbnQoY2VudHJlUG9pbnQsIGFuZ2xlUG9pbnQpIHtcbiAgY29uc3QgZGlzdGFuY2VGcm9tWENlbnRlciA9IGFuZ2xlUG9pbnQueCAtIGNlbnRyZVBvaW50Lng7XG4gIGNvbnN0IGRpc3RhbmNlRnJvbVlDZW50ZXIgPSBhbmdsZVBvaW50LnkgLSBjZW50cmVQb2ludC55O1xuICBjb25zdCByYWRpYWxEaXN0YW5jZUZyb21DZW50ZXIgPSBNYXRoLnNxcnQoZGlzdGFuY2VGcm9tWENlbnRlciAqIGRpc3RhbmNlRnJvbVhDZW50ZXIgKyBkaXN0YW5jZUZyb21ZQ2VudGVyICogZGlzdGFuY2VGcm9tWUNlbnRlcik7XG4gIGxldCBhbmdsZSA9IE1hdGguYXRhbjIoZGlzdGFuY2VGcm9tWUNlbnRlciwgZGlzdGFuY2VGcm9tWENlbnRlcik7XG4gIGlmIChhbmdsZSA8ICgtMC41ICogUEkpKSB7XG4gICAgYW5nbGUgKz0gVEFVO1xuICB9XG4gIHJldHVybiB7XG4gICAgYW5nbGUsXG4gICAgZGlzdGFuY2U6IHJhZGlhbERpc3RhbmNlRnJvbUNlbnRlclxuICB9O1xufVxuZnVuY3Rpb24gZGlzdGFuY2VCZXR3ZWVuUG9pbnRzKHB0MSwgcHQyKSB7XG4gIHJldHVybiBNYXRoLnNxcnQoTWF0aC5wb3cocHQyLnggLSBwdDEueCwgMikgKyBNYXRoLnBvdyhwdDIueSAtIHB0MS55LCAyKSk7XG59XG5mdW5jdGlvbiBfYW5nbGVEaWZmKGEsIGIpIHtcbiAgcmV0dXJuIChhIC0gYiArIFBJVEFVKSAlIFRBVSAtIFBJO1xufVxuZnVuY3Rpb24gX25vcm1hbGl6ZUFuZ2xlKGEpIHtcbiAgcmV0dXJuIChhICUgVEFVICsgVEFVKSAlIFRBVTtcbn1cbmZ1bmN0aW9uIF9hbmdsZUJldHdlZW4oYW5nbGUsIHN0YXJ0LCBlbmQsIHNhbWVBbmdsZUlzRnVsbENpcmNsZSkge1xuICBjb25zdCBhID0gX25vcm1hbGl6ZUFuZ2xlKGFuZ2xlKTtcbiAgY29uc3QgcyA9IF9ub3JtYWxpemVBbmdsZShzdGFydCk7XG4gIGNvbnN0IGUgPSBfbm9ybWFsaXplQW5nbGUoZW5kKTtcbiAgY29uc3QgYW5nbGVUb1N0YXJ0ID0gX25vcm1hbGl6ZUFuZ2xlKHMgLSBhKTtcbiAgY29uc3QgYW5nbGVUb0VuZCA9IF9ub3JtYWxpemVBbmdsZShlIC0gYSk7XG4gIGNvbnN0IHN0YXJ0VG9BbmdsZSA9IF9ub3JtYWxpemVBbmdsZShhIC0gcyk7XG4gIGNvbnN0IGVuZFRvQW5nbGUgPSBfbm9ybWFsaXplQW5nbGUoYSAtIGUpO1xuICByZXR1cm4gYSA9PT0gcyB8fCBhID09PSBlIHx8IChzYW1lQW5nbGVJc0Z1bGxDaXJjbGUgJiYgcyA9PT0gZSlcbiAgICB8fCAoYW5nbGVUb1N0YXJ0ID4gYW5nbGVUb0VuZCAmJiBzdGFydFRvQW5nbGUgPCBlbmRUb0FuZ2xlKTtcbn1cbmZ1bmN0aW9uIF9saW1pdFZhbHVlKHZhbHVlLCBtaW4sIG1heCkge1xuICByZXR1cm4gTWF0aC5tYXgobWluLCBNYXRoLm1pbihtYXgsIHZhbHVlKSk7XG59XG5mdW5jdGlvbiBfaW50MTZSYW5nZSh2YWx1ZSkge1xuICByZXR1cm4gX2xpbWl0VmFsdWUodmFsdWUsIC0zMjc2OCwgMzI3NjcpO1xufVxuZnVuY3Rpb24gX2lzQmV0d2Vlbih2YWx1ZSwgc3RhcnQsIGVuZCwgZXBzaWxvbiA9IDFlLTYpIHtcbiAgcmV0dXJuIHZhbHVlID49IE1hdGgubWluKHN0YXJ0LCBlbmQpIC0gZXBzaWxvbiAmJiB2YWx1ZSA8PSBNYXRoLm1heChzdGFydCwgZW5kKSArIGVwc2lsb247XG59XG5cbmNvbnN0IGF0RWRnZSA9ICh0KSA9PiB0ID09PSAwIHx8IHQgPT09IDE7XG5jb25zdCBlbGFzdGljSW4gPSAodCwgcywgcCkgPT4gLShNYXRoLnBvdygyLCAxMCAqICh0IC09IDEpKSAqIE1hdGguc2luKCh0IC0gcykgKiBUQVUgLyBwKSk7XG5jb25zdCBlbGFzdGljT3V0ID0gKHQsIHMsIHApID0+IE1hdGgucG93KDIsIC0xMCAqIHQpICogTWF0aC5zaW4oKHQgLSBzKSAqIFRBVSAvIHApICsgMTtcbmNvbnN0IGVmZmVjdHMgPSB7XG4gIGxpbmVhcjogdCA9PiB0LFxuICBlYXNlSW5RdWFkOiB0ID0+IHQgKiB0LFxuICBlYXNlT3V0UXVhZDogdCA9PiAtdCAqICh0IC0gMiksXG4gIGVhc2VJbk91dFF1YWQ6IHQgPT4gKCh0IC89IDAuNSkgPCAxKVxuICAgID8gMC41ICogdCAqIHRcbiAgICA6IC0wLjUgKiAoKC0tdCkgKiAodCAtIDIpIC0gMSksXG4gIGVhc2VJbkN1YmljOiB0ID0+IHQgKiB0ICogdCxcbiAgZWFzZU91dEN1YmljOiB0ID0+ICh0IC09IDEpICogdCAqIHQgKyAxLFxuICBlYXNlSW5PdXRDdWJpYzogdCA9PiAoKHQgLz0gMC41KSA8IDEpXG4gICAgPyAwLjUgKiB0ICogdCAqIHRcbiAgICA6IDAuNSAqICgodCAtPSAyKSAqIHQgKiB0ICsgMiksXG4gIGVhc2VJblF1YXJ0OiB0ID0+IHQgKiB0ICogdCAqIHQsXG4gIGVhc2VPdXRRdWFydDogdCA9PiAtKCh0IC09IDEpICogdCAqIHQgKiB0IC0gMSksXG4gIGVhc2VJbk91dFF1YXJ0OiB0ID0+ICgodCAvPSAwLjUpIDwgMSlcbiAgICA/IDAuNSAqIHQgKiB0ICogdCAqIHRcbiAgICA6IC0wLjUgKiAoKHQgLT0gMikgKiB0ICogdCAqIHQgLSAyKSxcbiAgZWFzZUluUXVpbnQ6IHQgPT4gdCAqIHQgKiB0ICogdCAqIHQsXG4gIGVhc2VPdXRRdWludDogdCA9PiAodCAtPSAxKSAqIHQgKiB0ICogdCAqIHQgKyAxLFxuICBlYXNlSW5PdXRRdWludDogdCA9PiAoKHQgLz0gMC41KSA8IDEpXG4gICAgPyAwLjUgKiB0ICogdCAqIHQgKiB0ICogdFxuICAgIDogMC41ICogKCh0IC09IDIpICogdCAqIHQgKiB0ICogdCArIDIpLFxuICBlYXNlSW5TaW5lOiB0ID0+IC1NYXRoLmNvcyh0ICogSEFMRl9QSSkgKyAxLFxuICBlYXNlT3V0U2luZTogdCA9PiBNYXRoLnNpbih0ICogSEFMRl9QSSksXG4gIGVhc2VJbk91dFNpbmU6IHQgPT4gLTAuNSAqIChNYXRoLmNvcyhQSSAqIHQpIC0gMSksXG4gIGVhc2VJbkV4cG86IHQgPT4gKHQgPT09IDApID8gMCA6IE1hdGgucG93KDIsIDEwICogKHQgLSAxKSksXG4gIGVhc2VPdXRFeHBvOiB0ID0+ICh0ID09PSAxKSA/IDEgOiAtTWF0aC5wb3coMiwgLTEwICogdCkgKyAxLFxuICBlYXNlSW5PdXRFeHBvOiB0ID0+IGF0RWRnZSh0KSA/IHQgOiB0IDwgMC41XG4gICAgPyAwLjUgKiBNYXRoLnBvdygyLCAxMCAqICh0ICogMiAtIDEpKVxuICAgIDogMC41ICogKC1NYXRoLnBvdygyLCAtMTAgKiAodCAqIDIgLSAxKSkgKyAyKSxcbiAgZWFzZUluQ2lyYzogdCA9PiAodCA+PSAxKSA/IHQgOiAtKE1hdGguc3FydCgxIC0gdCAqIHQpIC0gMSksXG4gIGVhc2VPdXRDaXJjOiB0ID0+IE1hdGguc3FydCgxIC0gKHQgLT0gMSkgKiB0KSxcbiAgZWFzZUluT3V0Q2lyYzogdCA9PiAoKHQgLz0gMC41KSA8IDEpXG4gICAgPyAtMC41ICogKE1hdGguc3FydCgxIC0gdCAqIHQpIC0gMSlcbiAgICA6IDAuNSAqIChNYXRoLnNxcnQoMSAtICh0IC09IDIpICogdCkgKyAxKSxcbiAgZWFzZUluRWxhc3RpYzogdCA9PiBhdEVkZ2UodCkgPyB0IDogZWxhc3RpY0luKHQsIDAuMDc1LCAwLjMpLFxuICBlYXNlT3V0RWxhc3RpYzogdCA9PiBhdEVkZ2UodCkgPyB0IDogZWxhc3RpY091dCh0LCAwLjA3NSwgMC4zKSxcbiAgZWFzZUluT3V0RWxhc3RpYyh0KSB7XG4gICAgY29uc3QgcyA9IDAuMTEyNTtcbiAgICBjb25zdCBwID0gMC40NTtcbiAgICByZXR1cm4gYXRFZGdlKHQpID8gdCA6XG4gICAgICB0IDwgMC41XG4gICAgICAgID8gMC41ICogZWxhc3RpY0luKHQgKiAyLCBzLCBwKVxuICAgICAgICA6IDAuNSArIDAuNSAqIGVsYXN0aWNPdXQodCAqIDIgLSAxLCBzLCBwKTtcbiAgfSxcbiAgZWFzZUluQmFjayh0KSB7XG4gICAgY29uc3QgcyA9IDEuNzAxNTg7XG4gICAgcmV0dXJuIHQgKiB0ICogKChzICsgMSkgKiB0IC0gcyk7XG4gIH0sXG4gIGVhc2VPdXRCYWNrKHQpIHtcbiAgICBjb25zdCBzID0gMS43MDE1ODtcbiAgICByZXR1cm4gKHQgLT0gMSkgKiB0ICogKChzICsgMSkgKiB0ICsgcykgKyAxO1xuICB9LFxuICBlYXNlSW5PdXRCYWNrKHQpIHtcbiAgICBsZXQgcyA9IDEuNzAxNTg7XG4gICAgaWYgKCh0IC89IDAuNSkgPCAxKSB7XG4gICAgICByZXR1cm4gMC41ICogKHQgKiB0ICogKCgocyAqPSAoMS41MjUpKSArIDEpICogdCAtIHMpKTtcbiAgICB9XG4gICAgcmV0dXJuIDAuNSAqICgodCAtPSAyKSAqIHQgKiAoKChzICo9ICgxLjUyNSkpICsgMSkgKiB0ICsgcykgKyAyKTtcbiAgfSxcbiAgZWFzZUluQm91bmNlOiB0ID0+IDEgLSBlZmZlY3RzLmVhc2VPdXRCb3VuY2UoMSAtIHQpLFxuICBlYXNlT3V0Qm91bmNlKHQpIHtcbiAgICBjb25zdCBtID0gNy41NjI1O1xuICAgIGNvbnN0IGQgPSAyLjc1O1xuICAgIGlmICh0IDwgKDEgLyBkKSkge1xuICAgICAgcmV0dXJuIG0gKiB0ICogdDtcbiAgICB9XG4gICAgaWYgKHQgPCAoMiAvIGQpKSB7XG4gICAgICByZXR1cm4gbSAqICh0IC09ICgxLjUgLyBkKSkgKiB0ICsgMC43NTtcbiAgICB9XG4gICAgaWYgKHQgPCAoMi41IC8gZCkpIHtcbiAgICAgIHJldHVybiBtICogKHQgLT0gKDIuMjUgLyBkKSkgKiB0ICsgMC45Mzc1O1xuICAgIH1cbiAgICByZXR1cm4gbSAqICh0IC09ICgyLjYyNSAvIGQpKSAqIHQgKyAwLjk4NDM3NTtcbiAgfSxcbiAgZWFzZUluT3V0Qm91bmNlOiB0ID0+ICh0IDwgMC41KVxuICAgID8gZWZmZWN0cy5lYXNlSW5Cb3VuY2UodCAqIDIpICogMC41XG4gICAgOiBlZmZlY3RzLmVhc2VPdXRCb3VuY2UodCAqIDIgLSAxKSAqIDAuNSArIDAuNSxcbn07XG5cbi8qIVxuICogQGt1cmtsZS9jb2xvciB2MC4xLjlcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9rdXJrbGUvY29sb3IjcmVhZG1lXG4gKiAoYykgMjAyMCBKdWtrYSBLdXJrZWxhXG4gKiBSZWxlYXNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2VcbiAqL1xuY29uc3QgbWFwID0gezA6IDAsIDE6IDEsIDI6IDIsIDM6IDMsIDQ6IDQsIDU6IDUsIDY6IDYsIDc6IDcsIDg6IDgsIDk6IDksIEE6IDEwLCBCOiAxMSwgQzogMTIsIEQ6IDEzLCBFOiAxNCwgRjogMTUsIGE6IDEwLCBiOiAxMSwgYzogMTIsIGQ6IDEzLCBlOiAxNCwgZjogMTV9O1xuY29uc3QgaGV4ID0gJzAxMjM0NTY3ODlBQkNERUYnO1xuY29uc3QgaDEgPSAoYikgPT4gaGV4W2IgJiAweEZdO1xuY29uc3QgaDIgPSAoYikgPT4gaGV4WyhiICYgMHhGMCkgPj4gNF0gKyBoZXhbYiAmIDB4Rl07XG5jb25zdCBlcSA9IChiKSA9PiAoKChiICYgMHhGMCkgPj4gNCkgPT09IChiICYgMHhGKSk7XG5mdW5jdGlvbiBpc1Nob3J0KHYpIHtcblx0cmV0dXJuIGVxKHYucikgJiYgZXEodi5nKSAmJiBlcSh2LmIpICYmIGVxKHYuYSk7XG59XG5mdW5jdGlvbiBoZXhQYXJzZShzdHIpIHtcblx0dmFyIGxlbiA9IHN0ci5sZW5ndGg7XG5cdHZhciByZXQ7XG5cdGlmIChzdHJbMF0gPT09ICcjJykge1xuXHRcdGlmIChsZW4gPT09IDQgfHwgbGVuID09PSA1KSB7XG5cdFx0XHRyZXQgPSB7XG5cdFx0XHRcdHI6IDI1NSAmIG1hcFtzdHJbMV1dICogMTcsXG5cdFx0XHRcdGc6IDI1NSAmIG1hcFtzdHJbMl1dICogMTcsXG5cdFx0XHRcdGI6IDI1NSAmIG1hcFtzdHJbM11dICogMTcsXG5cdFx0XHRcdGE6IGxlbiA9PT0gNSA/IG1hcFtzdHJbNF1dICogMTcgOiAyNTVcblx0XHRcdH07XG5cdFx0fSBlbHNlIGlmIChsZW4gPT09IDcgfHwgbGVuID09PSA5KSB7XG5cdFx0XHRyZXQgPSB7XG5cdFx0XHRcdHI6IG1hcFtzdHJbMV1dIDw8IDQgfCBtYXBbc3RyWzJdXSxcblx0XHRcdFx0ZzogbWFwW3N0clszXV0gPDwgNCB8IG1hcFtzdHJbNF1dLFxuXHRcdFx0XHRiOiBtYXBbc3RyWzVdXSA8PCA0IHwgbWFwW3N0cls2XV0sXG5cdFx0XHRcdGE6IGxlbiA9PT0gOSA/IChtYXBbc3RyWzddXSA8PCA0IHwgbWFwW3N0cls4XV0pIDogMjU1XG5cdFx0XHR9O1xuXHRcdH1cblx0fVxuXHRyZXR1cm4gcmV0O1xufVxuZnVuY3Rpb24gaGV4U3RyaW5nKHYpIHtcblx0dmFyIGYgPSBpc1Nob3J0KHYpID8gaDEgOiBoMjtcblx0cmV0dXJuIHZcblx0XHQ/ICcjJyArIGYodi5yKSArIGYodi5nKSArIGYodi5iKSArICh2LmEgPCAyNTUgPyBmKHYuYSkgOiAnJylcblx0XHQ6IHY7XG59XG5mdW5jdGlvbiByb3VuZCh2KSB7XG5cdHJldHVybiB2ICsgMC41IHwgMDtcbn1cbmNvbnN0IGxpbSA9ICh2LCBsLCBoKSA9PiBNYXRoLm1heChNYXRoLm1pbih2LCBoKSwgbCk7XG5mdW5jdGlvbiBwMmIodikge1xuXHRyZXR1cm4gbGltKHJvdW5kKHYgKiAyLjU1KSwgMCwgMjU1KTtcbn1cbmZ1bmN0aW9uIG4yYih2KSB7XG5cdHJldHVybiBsaW0ocm91bmQodiAqIDI1NSksIDAsIDI1NSk7XG59XG5mdW5jdGlvbiBiMm4odikge1xuXHRyZXR1cm4gbGltKHJvdW5kKHYgLyAyLjU1KSAvIDEwMCwgMCwgMSk7XG59XG5mdW5jdGlvbiBuMnAodikge1xuXHRyZXR1cm4gbGltKHJvdW5kKHYgKiAxMDApLCAwLCAxMDApO1xufVxuY29uc3QgUkdCX1JFID0gL15yZ2JhP1xcKFxccyooWy0rLlxcZF0rKSglKT9bXFxzLF0rKFstKy5lXFxkXSspKCUpP1tcXHMsXSsoWy0rLmVcXGRdKykoJSk/KD86W1xccywvXSsoWy0rLmVcXGRdKykoJSk/KT9cXHMqXFwpJC87XG5mdW5jdGlvbiByZ2JQYXJzZShzdHIpIHtcblx0Y29uc3QgbSA9IFJHQl9SRS5leGVjKHN0cik7XG5cdGxldCBhID0gMjU1O1xuXHRsZXQgciwgZywgYjtcblx0aWYgKCFtKSB7XG5cdFx0cmV0dXJuO1xuXHR9XG5cdGlmIChtWzddICE9PSByKSB7XG5cdFx0Y29uc3QgdiA9ICttWzddO1xuXHRcdGEgPSAyNTUgJiAobVs4XSA/IHAyYih2KSA6IHYgKiAyNTUpO1xuXHR9XG5cdHIgPSArbVsxXTtcblx0ZyA9ICttWzNdO1xuXHRiID0gK21bNV07XG5cdHIgPSAyNTUgJiAobVsyXSA/IHAyYihyKSA6IHIpO1xuXHRnID0gMjU1ICYgKG1bNF0gPyBwMmIoZykgOiBnKTtcblx0YiA9IDI1NSAmIChtWzZdID8gcDJiKGIpIDogYik7XG5cdHJldHVybiB7XG5cdFx0cjogcixcblx0XHRnOiBnLFxuXHRcdGI6IGIsXG5cdFx0YTogYVxuXHR9O1xufVxuZnVuY3Rpb24gcmdiU3RyaW5nKHYpIHtcblx0cmV0dXJuIHYgJiYgKFxuXHRcdHYuYSA8IDI1NVxuXHRcdFx0PyBgcmdiYSgke3Yucn0sICR7di5nfSwgJHt2LmJ9LCAke2Iybih2LmEpfSlgXG5cdFx0XHQ6IGByZ2IoJHt2LnJ9LCAke3YuZ30sICR7di5ifSlgXG5cdCk7XG59XG5jb25zdCBIVUVfUkUgPSAvXihoc2xhP3xod2J8aHN2KVxcKFxccyooWy0rLmVcXGRdKykoPzpkZWcpP1tcXHMsXSsoWy0rLmVcXGRdKyklW1xccyxdKyhbLSsuZVxcZF0rKSUoPzpbXFxzLF0rKFstKy5lXFxkXSspKCUpPyk/XFxzKlxcKSQvO1xuZnVuY3Rpb24gaHNsMnJnYm4oaCwgcywgbCkge1xuXHRjb25zdCBhID0gcyAqIE1hdGgubWluKGwsIDEgLSBsKTtcblx0Y29uc3QgZiA9IChuLCBrID0gKG4gKyBoIC8gMzApICUgMTIpID0+IGwgLSBhICogTWF0aC5tYXgoTWF0aC5taW4oayAtIDMsIDkgLSBrLCAxKSwgLTEpO1xuXHRyZXR1cm4gW2YoMCksIGYoOCksIGYoNCldO1xufVxuZnVuY3Rpb24gaHN2MnJnYm4oaCwgcywgdikge1xuXHRjb25zdCBmID0gKG4sIGsgPSAobiArIGggLyA2MCkgJSA2KSA9PiB2IC0gdiAqIHMgKiBNYXRoLm1heChNYXRoLm1pbihrLCA0IC0gaywgMSksIDApO1xuXHRyZXR1cm4gW2YoNSksIGYoMyksIGYoMSldO1xufVxuZnVuY3Rpb24gaHdiMnJnYm4oaCwgdywgYikge1xuXHRjb25zdCByZ2IgPSBoc2wycmdibihoLCAxLCAwLjUpO1xuXHRsZXQgaTtcblx0aWYgKHcgKyBiID4gMSkge1xuXHRcdGkgPSAxIC8gKHcgKyBiKTtcblx0XHR3ICo9IGk7XG5cdFx0YiAqPSBpO1xuXHR9XG5cdGZvciAoaSA9IDA7IGkgPCAzOyBpKyspIHtcblx0XHRyZ2JbaV0gKj0gMSAtIHcgLSBiO1xuXHRcdHJnYltpXSArPSB3O1xuXHR9XG5cdHJldHVybiByZ2I7XG59XG5mdW5jdGlvbiByZ2IyaHNsKHYpIHtcblx0Y29uc3QgcmFuZ2UgPSAyNTU7XG5cdGNvbnN0IHIgPSB2LnIgLyByYW5nZTtcblx0Y29uc3QgZyA9IHYuZyAvIHJhbmdlO1xuXHRjb25zdCBiID0gdi5iIC8gcmFuZ2U7XG5cdGNvbnN0IG1heCA9IE1hdGgubWF4KHIsIGcsIGIpO1xuXHRjb25zdCBtaW4gPSBNYXRoLm1pbihyLCBnLCBiKTtcblx0Y29uc3QgbCA9IChtYXggKyBtaW4pIC8gMjtcblx0bGV0IGgsIHMsIGQ7XG5cdGlmIChtYXggIT09IG1pbikge1xuXHRcdGQgPSBtYXggLSBtaW47XG5cdFx0cyA9IGwgPiAwLjUgPyBkIC8gKDIgLSBtYXggLSBtaW4pIDogZCAvIChtYXggKyBtaW4pO1xuXHRcdGggPSBtYXggPT09IHJcblx0XHRcdD8gKChnIC0gYikgLyBkKSArIChnIDwgYiA/IDYgOiAwKVxuXHRcdFx0OiBtYXggPT09IGdcblx0XHRcdFx0PyAoYiAtIHIpIC8gZCArIDJcblx0XHRcdFx0OiAociAtIGcpIC8gZCArIDQ7XG5cdFx0aCA9IGggKiA2MCArIDAuNTtcblx0fVxuXHRyZXR1cm4gW2ggfCAwLCBzIHx8IDAsIGxdO1xufVxuZnVuY3Rpb24gY2FsbG4oZiwgYSwgYiwgYykge1xuXHRyZXR1cm4gKFxuXHRcdEFycmF5LmlzQXJyYXkoYSlcblx0XHRcdD8gZihhWzBdLCBhWzFdLCBhWzJdKVxuXHRcdFx0OiBmKGEsIGIsIGMpXG5cdCkubWFwKG4yYik7XG59XG5mdW5jdGlvbiBoc2wycmdiKGgsIHMsIGwpIHtcblx0cmV0dXJuIGNhbGxuKGhzbDJyZ2JuLCBoLCBzLCBsKTtcbn1cbmZ1bmN0aW9uIGh3YjJyZ2IoaCwgdywgYikge1xuXHRyZXR1cm4gY2FsbG4oaHdiMnJnYm4sIGgsIHcsIGIpO1xufVxuZnVuY3Rpb24gaHN2MnJnYihoLCBzLCB2KSB7XG5cdHJldHVybiBjYWxsbihoc3YycmdibiwgaCwgcywgdik7XG59XG5mdW5jdGlvbiBodWUoaCkge1xuXHRyZXR1cm4gKGggJSAzNjAgKyAzNjApICUgMzYwO1xufVxuZnVuY3Rpb24gaHVlUGFyc2Uoc3RyKSB7XG5cdGNvbnN0IG0gPSBIVUVfUkUuZXhlYyhzdHIpO1xuXHRsZXQgYSA9IDI1NTtcblx0bGV0IHY7XG5cdGlmICghbSkge1xuXHRcdHJldHVybjtcblx0fVxuXHRpZiAobVs1XSAhPT0gdikge1xuXHRcdGEgPSBtWzZdID8gcDJiKCttWzVdKSA6IG4yYigrbVs1XSk7XG5cdH1cblx0Y29uc3QgaCA9IGh1ZSgrbVsyXSk7XG5cdGNvbnN0IHAxID0gK21bM10gLyAxMDA7XG5cdGNvbnN0IHAyID0gK21bNF0gLyAxMDA7XG5cdGlmIChtWzFdID09PSAnaHdiJykge1xuXHRcdHYgPSBod2IycmdiKGgsIHAxLCBwMik7XG5cdH0gZWxzZSBpZiAobVsxXSA9PT0gJ2hzdicpIHtcblx0XHR2ID0gaHN2MnJnYihoLCBwMSwgcDIpO1xuXHR9IGVsc2Uge1xuXHRcdHYgPSBoc2wycmdiKGgsIHAxLCBwMik7XG5cdH1cblx0cmV0dXJuIHtcblx0XHRyOiB2WzBdLFxuXHRcdGc6IHZbMV0sXG5cdFx0YjogdlsyXSxcblx0XHRhOiBhXG5cdH07XG59XG5mdW5jdGlvbiByb3RhdGUodiwgZGVnKSB7XG5cdHZhciBoID0gcmdiMmhzbCh2KTtcblx0aFswXSA9IGh1ZShoWzBdICsgZGVnKTtcblx0aCA9IGhzbDJyZ2IoaCk7XG5cdHYuciA9IGhbMF07XG5cdHYuZyA9IGhbMV07XG5cdHYuYiA9IGhbMl07XG59XG5mdW5jdGlvbiBoc2xTdHJpbmcodikge1xuXHRpZiAoIXYpIHtcblx0XHRyZXR1cm47XG5cdH1cblx0Y29uc3QgYSA9IHJnYjJoc2wodik7XG5cdGNvbnN0IGggPSBhWzBdO1xuXHRjb25zdCBzID0gbjJwKGFbMV0pO1xuXHRjb25zdCBsID0gbjJwKGFbMl0pO1xuXHRyZXR1cm4gdi5hIDwgMjU1XG5cdFx0PyBgaHNsYSgke2h9LCAke3N9JSwgJHtsfSUsICR7YjJuKHYuYSl9KWBcblx0XHQ6IGBoc2woJHtofSwgJHtzfSUsICR7bH0lKWA7XG59XG5jb25zdCBtYXAkMSA9IHtcblx0eDogJ2RhcmsnLFxuXHRaOiAnbGlnaHQnLFxuXHRZOiAncmUnLFxuXHRYOiAnYmx1Jyxcblx0VzogJ2dyJyxcblx0VjogJ21lZGl1bScsXG5cdFU6ICdzbGF0ZScsXG5cdEE6ICdlZScsXG5cdFQ6ICdvbCcsXG5cdFM6ICdvcicsXG5cdEI6ICdyYScsXG5cdEM6ICdsYXRlZycsXG5cdEQ6ICdpZ2h0cycsXG5cdFI6ICdpbicsXG5cdFE6ICd0dXJxdW9pcycsXG5cdEU6ICdoaScsXG5cdFA6ICdybycsXG5cdE86ICdhbCcsXG5cdE46ICdsZScsXG5cdE06ICdkZScsXG5cdEw6ICd5ZWxsbycsXG5cdEY6ICdlbicsXG5cdEs6ICdjaCcsXG5cdEc6ICdhcmtzJyxcblx0SDogJ2VhJyxcblx0STogJ2lnaHRnJyxcblx0SjogJ3doJ1xufTtcbmNvbnN0IG5hbWVzID0ge1xuXHRPaWNlWGU6ICdmMGY4ZmYnLFxuXHRhbnRpcXVld0V0ZTogJ2ZhZWJkNycsXG5cdGFxdWE6ICdmZmZmJyxcblx0YXF1YW1hclJlOiAnN2ZmZmQ0Jyxcblx0YXp1WTogJ2YwZmZmZicsXG5cdGJlaWdlOiAnZjVmNWRjJyxcblx0YmlzcXVlOiAnZmZlNGM0Jyxcblx0YmxhY2s6ICcwJyxcblx0YmxhbktlZE9tb25kOiAnZmZlYmNkJyxcblx0WGU6ICdmZicsXG5cdFhldmlUZXQ6ICc4YTJiZTInLFxuXHRiUHduOiAnYTUyYTJhJyxcblx0YnVybHl3b29kOiAnZGViODg3Jyxcblx0Y2FNdFhlOiAnNWY5ZWEwJyxcblx0S2FydFl1c2U6ICc3ZmZmMDAnLFxuXHRLb2NUYXRlOiAnZDI2OTFlJyxcblx0Y1NPOiAnZmY3ZjUwJyxcblx0Y1NuZmxvd2VyWGU6ICc2NDk1ZWQnLFxuXHRjU25zaWxrOiAnZmZmOGRjJyxcblx0Y3JpbXNvbjogJ2RjMTQzYycsXG5cdGN5YW46ICdmZmZmJyxcblx0eFhlOiAnOGInLFxuXHR4Y3lhbjogJzhiOGInLFxuXHR4Z1RNblBkOiAnYjg4NjBiJyxcblx0eFdheTogJ2E5YTlhOScsXG5cdHhnWUY6ICc2NDAwJyxcblx0eGdZeTogJ2E5YTlhOScsXG5cdHhraGFraTogJ2JkYjc2YicsXG5cdHhtYWdGdGE6ICc4YjAwOGInLFxuXHR4VGl2ZWdZRjogJzU1NmIyZicsXG5cdHhTYW5nZTogJ2ZmOGMwMCcsXG5cdHhTY0VkOiAnOTkzMmNjJyxcblx0eFlkOiAnOGIwMDAwJyxcblx0eHNPbW9uOiAnZTk5NjdhJyxcblx0eHNIZ1lGOiAnOGZiYzhmJyxcblx0eFVYZTogJzQ4M2Q4YicsXG5cdHhVV2F5OiAnMmY0ZjRmJyxcblx0eFVnWXk6ICcyZjRmNGYnLFxuXHR4UWU6ICdjZWQxJyxcblx0eHZpVGV0OiAnOTQwMGQzJyxcblx0ZEFwcFJrOiAnZmYxNDkzJyxcblx0ZEFwc2t5WGU6ICdiZmZmJyxcblx0ZGltV2F5OiAnNjk2OTY5Jyxcblx0ZGltZ1l5OiAnNjk2OTY5Jyxcblx0ZG9kZ2VyWGU6ICcxZTkwZmYnLFxuXHRmaVlicmljazogJ2IyMjIyMicsXG5cdGZsU093RXRlOiAnZmZmYWYwJyxcblx0Zm9Zc3RXQW46ICcyMjhiMjInLFxuXHRmdUtzaWE6ICdmZjAwZmYnLFxuXHRnYVJzYlNvOiAnZGNkY2RjJyxcblx0Z2hvc3R3RXRlOiAnZjhmOGZmJyxcblx0Z1RkOiAnZmZkNzAwJyxcblx0Z1RNblBkOiAnZGFhNTIwJyxcblx0V2F5OiAnODA4MDgwJyxcblx0Z1lGOiAnODAwMCcsXG5cdGdZRkx3OiAnYWRmZjJmJyxcblx0Z1l5OiAnODA4MDgwJyxcblx0aG9uZXlNdzogJ2YwZmZmMCcsXG5cdGhvdHBSazogJ2ZmNjliNCcsXG5cdFJkaWFuWWQ6ICdjZDVjNWMnLFxuXHRSZGlnbzogJzRiMDA4MicsXG5cdGl2U3k6ICdmZmZmZjAnLFxuXHRraGFraTogJ2YwZTY4YycsXG5cdGxhdkZNcjogJ2U2ZTZmYScsXG5cdGxhdkZNclhzaDogJ2ZmZjBmNScsXG5cdGxhd25nWUY6ICc3Y2ZjMDAnLFxuXHRObW9uY0VmZm9uOiAnZmZmYWNkJyxcblx0WlhlOiAnYWRkOGU2Jyxcblx0WmNTTzogJ2YwODA4MCcsXG5cdFpjeWFuOiAnZTBmZmZmJyxcblx0WmdUTW5QZEx3OiAnZmFmYWQyJyxcblx0WldheTogJ2QzZDNkMycsXG5cdFpnWUY6ICc5MGVlOTAnLFxuXHRaZ1l5OiAnZDNkM2QzJyxcblx0WnBSazogJ2ZmYjZjMScsXG5cdFpzT21vbjogJ2ZmYTA3YScsXG5cdFpzSGdZRjogJzIwYjJhYScsXG5cdFpza3lYZTogJzg3Y2VmYScsXG5cdFpVV2F5OiAnNzc4ODk5Jyxcblx0WlVnWXk6ICc3Nzg4OTknLFxuXHRac3RBbFhlOiAnYjBjNGRlJyxcblx0Wkx3OiAnZmZmZmUwJyxcblx0bGltZTogJ2ZmMDAnLFxuXHRsaW1lZ1lGOiAnMzJjZDMyJyxcblx0bFJGOiAnZmFmMGU2Jyxcblx0bWFnRnRhOiAnZmYwMGZmJyxcblx0bWFQb246ICc4MDAwMDAnLFxuXHRWYXF1YW1hclJlOiAnNjZjZGFhJyxcblx0VlhlOiAnY2QnLFxuXHRWU2NFZDogJ2JhNTVkMycsXG5cdFZwdXJwTjogJzkzNzBkYicsXG5cdFZzSGdZRjogJzNjYjM3MScsXG5cdFZVWGU6ICc3YjY4ZWUnLFxuXHRWc3ByUmdnWUY6ICdmYTlhJyxcblx0VlFlOiAnNDhkMWNjJyxcblx0VnZpVGV0WWQ6ICdjNzE1ODUnLFxuXHRtaWRuaWdodFhlOiAnMTkxOTcwJyxcblx0bVJ0Y1lhbTogJ2Y1ZmZmYScsXG5cdG1pc3R5UHNlOiAnZmZlNGUxJyxcblx0bW9jY2FzUjogJ2ZmZTRiNScsXG5cdG5hdmFqb3dFdGU6ICdmZmRlYWQnLFxuXHRuYXZ5OiAnODAnLFxuXHRUZGxhY2U6ICdmZGY1ZTYnLFxuXHRUaXZlOiAnODA4MDAwJyxcblx0VGl2ZWRCYjogJzZiOGUyMycsXG5cdFNhbmdlOiAnZmZhNTAwJyxcblx0U2FuZ2VZZDogJ2ZmNDUwMCcsXG5cdFNjRWQ6ICdkYTcwZDYnLFxuXHRwT2VnVE1uUGQ6ICdlZWU4YWEnLFxuXHRwT2VnWUY6ICc5OGZiOTgnLFxuXHRwT2VRZTogJ2FmZWVlZScsXG5cdHBPZXZpVGV0WWQ6ICdkYjcwOTMnLFxuXHRwYXBheWF3RXA6ICdmZmVmZDUnLFxuXHRwSEtwdWZmOiAnZmZkYWI5Jyxcblx0cGVydTogJ2NkODUzZicsXG5cdHBSazogJ2ZmYzBjYicsXG5cdHBsdW06ICdkZGEwZGQnLFxuXHRwb3dNclhlOiAnYjBlMGU2Jyxcblx0cHVycE46ICc4MDAwODAnLFxuXHRZYmVjY2FwdXJwTjogJzY2MzM5OScsXG5cdFlkOiAnZmYwMDAwJyxcblx0UHN5YnJvd246ICdiYzhmOGYnLFxuXHRQeU9YZTogJzQxNjllMScsXG5cdHNhZGROYlB3bjogJzhiNDUxMycsXG5cdHNPbW9uOiAnZmE4MDcyJyxcblx0c2FuZHliUHduOiAnZjRhNDYwJyxcblx0c0hnWUY6ICcyZThiNTcnLFxuXHRzSHNoZWxsOiAnZmZmNWVlJyxcblx0c2lGbmE6ICdhMDUyMmQnLFxuXHRzaWx2ZXI6ICdjMGMwYzAnLFxuXHRza3lYZTogJzg3Y2VlYicsXG5cdFVYZTogJzZhNWFjZCcsXG5cdFVXYXk6ICc3MDgwOTAnLFxuXHRVZ1l5OiAnNzA4MDkwJyxcblx0c25vdzogJ2ZmZmFmYScsXG5cdHNwclJnZ1lGOiAnZmY3ZicsXG5cdHN0QWxYZTogJzQ2ODJiNCcsXG5cdHRhbjogJ2QyYjQ4YycsXG5cdHRlTzogJzgwODAnLFxuXHR0RXN0TjogJ2Q4YmZkOCcsXG5cdHRvbWF0bzogJ2ZmNjM0NycsXG5cdFFlOiAnNDBlMGQwJyxcblx0dmlUZXQ6ICdlZTgyZWUnLFxuXHRKSHQ6ICdmNWRlYjMnLFxuXHR3RXRlOiAnZmZmZmZmJyxcblx0d0V0ZXNtb2tlOiAnZjVmNWY1Jyxcblx0THc6ICdmZmZmMDAnLFxuXHRMd2dZRjogJzlhY2QzMidcbn07XG5mdW5jdGlvbiB1bnBhY2soKSB7XG5cdGNvbnN0IHVucGFja2VkID0ge307XG5cdGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyhuYW1lcyk7XG5cdGNvbnN0IHRrZXlzID0gT2JqZWN0LmtleXMobWFwJDEpO1xuXHRsZXQgaSwgaiwgaywgb2ssIG5rO1xuXHRmb3IgKGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7IGkrKykge1xuXHRcdG9rID0gbmsgPSBrZXlzW2ldO1xuXHRcdGZvciAoaiA9IDA7IGogPCB0a2V5cy5sZW5ndGg7IGorKykge1xuXHRcdFx0ayA9IHRrZXlzW2pdO1xuXHRcdFx0bmsgPSBuay5yZXBsYWNlKGssIG1hcCQxW2tdKTtcblx0XHR9XG5cdFx0ayA9IHBhcnNlSW50KG5hbWVzW29rXSwgMTYpO1xuXHRcdHVucGFja2VkW25rXSA9IFtrID4+IDE2ICYgMHhGRiwgayA+PiA4ICYgMHhGRiwgayAmIDB4RkZdO1xuXHR9XG5cdHJldHVybiB1bnBhY2tlZDtcbn1cbmxldCBuYW1lcyQxO1xuZnVuY3Rpb24gbmFtZVBhcnNlKHN0cikge1xuXHRpZiAoIW5hbWVzJDEpIHtcblx0XHRuYW1lcyQxID0gdW5wYWNrKCk7XG5cdFx0bmFtZXMkMS50cmFuc3BhcmVudCA9IFswLCAwLCAwLCAwXTtcblx0fVxuXHRjb25zdCBhID0gbmFtZXMkMVtzdHIudG9Mb3dlckNhc2UoKV07XG5cdHJldHVybiBhICYmIHtcblx0XHRyOiBhWzBdLFxuXHRcdGc6IGFbMV0sXG5cdFx0YjogYVsyXSxcblx0XHRhOiBhLmxlbmd0aCA9PT0gNCA/IGFbM10gOiAyNTVcblx0fTtcbn1cbmZ1bmN0aW9uIG1vZEhTTCh2LCBpLCByYXRpbykge1xuXHRpZiAodikge1xuXHRcdGxldCB0bXAgPSByZ2IyaHNsKHYpO1xuXHRcdHRtcFtpXSA9IE1hdGgubWF4KDAsIE1hdGgubWluKHRtcFtpXSArIHRtcFtpXSAqIHJhdGlvLCBpID09PSAwID8gMzYwIDogMSkpO1xuXHRcdHRtcCA9IGhzbDJyZ2IodG1wKTtcblx0XHR2LnIgPSB0bXBbMF07XG5cdFx0di5nID0gdG1wWzFdO1xuXHRcdHYuYiA9IHRtcFsyXTtcblx0fVxufVxuZnVuY3Rpb24gY2xvbmUodiwgcHJvdG8pIHtcblx0cmV0dXJuIHYgPyBPYmplY3QuYXNzaWduKHByb3RvIHx8IHt9LCB2KSA6IHY7XG59XG5mdW5jdGlvbiBmcm9tT2JqZWN0KGlucHV0KSB7XG5cdHZhciB2ID0ge3I6IDAsIGc6IDAsIGI6IDAsIGE6IDI1NX07XG5cdGlmIChBcnJheS5pc0FycmF5KGlucHV0KSkge1xuXHRcdGlmIChpbnB1dC5sZW5ndGggPj0gMykge1xuXHRcdFx0diA9IHtyOiBpbnB1dFswXSwgZzogaW5wdXRbMV0sIGI6IGlucHV0WzJdLCBhOiAyNTV9O1xuXHRcdFx0aWYgKGlucHV0Lmxlbmd0aCA+IDMpIHtcblx0XHRcdFx0di5hID0gbjJiKGlucHV0WzNdKTtcblx0XHRcdH1cblx0XHR9XG5cdH0gZWxzZSB7XG5cdFx0diA9IGNsb25lKGlucHV0LCB7cjogMCwgZzogMCwgYjogMCwgYTogMX0pO1xuXHRcdHYuYSA9IG4yYih2LmEpO1xuXHR9XG5cdHJldHVybiB2O1xufVxuZnVuY3Rpb24gZnVuY3Rpb25QYXJzZShzdHIpIHtcblx0aWYgKHN0ci5jaGFyQXQoMCkgPT09ICdyJykge1xuXHRcdHJldHVybiByZ2JQYXJzZShzdHIpO1xuXHR9XG5cdHJldHVybiBodWVQYXJzZShzdHIpO1xufVxuY2xhc3MgQ29sb3Ige1xuXHRjb25zdHJ1Y3RvcihpbnB1dCkge1xuXHRcdGlmIChpbnB1dCBpbnN0YW5jZW9mIENvbG9yKSB7XG5cdFx0XHRyZXR1cm4gaW5wdXQ7XG5cdFx0fVxuXHRcdGNvbnN0IHR5cGUgPSB0eXBlb2YgaW5wdXQ7XG5cdFx0bGV0IHY7XG5cdFx0aWYgKHR5cGUgPT09ICdvYmplY3QnKSB7XG5cdFx0XHR2ID0gZnJvbU9iamVjdChpbnB1dCk7XG5cdFx0fSBlbHNlIGlmICh0eXBlID09PSAnc3RyaW5nJykge1xuXHRcdFx0diA9IGhleFBhcnNlKGlucHV0KSB8fCBuYW1lUGFyc2UoaW5wdXQpIHx8IGZ1bmN0aW9uUGFyc2UoaW5wdXQpO1xuXHRcdH1cblx0XHR0aGlzLl9yZ2IgPSB2O1xuXHRcdHRoaXMuX3ZhbGlkID0gISF2O1xuXHR9XG5cdGdldCB2YWxpZCgpIHtcblx0XHRyZXR1cm4gdGhpcy5fdmFsaWQ7XG5cdH1cblx0Z2V0IHJnYigpIHtcblx0XHR2YXIgdiA9IGNsb25lKHRoaXMuX3JnYik7XG5cdFx0aWYgKHYpIHtcblx0XHRcdHYuYSA9IGIybih2LmEpO1xuXHRcdH1cblx0XHRyZXR1cm4gdjtcblx0fVxuXHRzZXQgcmdiKG9iaikge1xuXHRcdHRoaXMuX3JnYiA9IGZyb21PYmplY3Qob2JqKTtcblx0fVxuXHRyZ2JTdHJpbmcoKSB7XG5cdFx0cmV0dXJuIHRoaXMuX3ZhbGlkID8gcmdiU3RyaW5nKHRoaXMuX3JnYikgOiB0aGlzLl9yZ2I7XG5cdH1cblx0aGV4U3RyaW5nKCkge1xuXHRcdHJldHVybiB0aGlzLl92YWxpZCA/IGhleFN0cmluZyh0aGlzLl9yZ2IpIDogdGhpcy5fcmdiO1xuXHR9XG5cdGhzbFN0cmluZygpIHtcblx0XHRyZXR1cm4gdGhpcy5fdmFsaWQgPyBoc2xTdHJpbmcodGhpcy5fcmdiKSA6IHRoaXMuX3JnYjtcblx0fVxuXHRtaXgoY29sb3IsIHdlaWdodCkge1xuXHRcdGNvbnN0IG1lID0gdGhpcztcblx0XHRpZiAoY29sb3IpIHtcblx0XHRcdGNvbnN0IGMxID0gbWUucmdiO1xuXHRcdFx0Y29uc3QgYzIgPSBjb2xvci5yZ2I7XG5cdFx0XHRsZXQgdzI7XG5cdFx0XHRjb25zdCBwID0gd2VpZ2h0ID09PSB3MiA/IDAuNSA6IHdlaWdodDtcblx0XHRcdGNvbnN0IHcgPSAyICogcCAtIDE7XG5cdFx0XHRjb25zdCBhID0gYzEuYSAtIGMyLmE7XG5cdFx0XHRjb25zdCB3MSA9ICgodyAqIGEgPT09IC0xID8gdyA6ICh3ICsgYSkgLyAoMSArIHcgKiBhKSkgKyAxKSAvIDIuMDtcblx0XHRcdHcyID0gMSAtIHcxO1xuXHRcdFx0YzEuciA9IDB4RkYgJiB3MSAqIGMxLnIgKyB3MiAqIGMyLnIgKyAwLjU7XG5cdFx0XHRjMS5nID0gMHhGRiAmIHcxICogYzEuZyArIHcyICogYzIuZyArIDAuNTtcblx0XHRcdGMxLmIgPSAweEZGICYgdzEgKiBjMS5iICsgdzIgKiBjMi5iICsgMC41O1xuXHRcdFx0YzEuYSA9IHAgKiBjMS5hICsgKDEgLSBwKSAqIGMyLmE7XG5cdFx0XHRtZS5yZ2IgPSBjMTtcblx0XHR9XG5cdFx0cmV0dXJuIG1lO1xuXHR9XG5cdGNsb25lKCkge1xuXHRcdHJldHVybiBuZXcgQ29sb3IodGhpcy5yZ2IpO1xuXHR9XG5cdGFscGhhKGEpIHtcblx0XHR0aGlzLl9yZ2IuYSA9IG4yYihhKTtcblx0XHRyZXR1cm4gdGhpcztcblx0fVxuXHRjbGVhcmVyKHJhdGlvKSB7XG5cdFx0Y29uc3QgcmdiID0gdGhpcy5fcmdiO1xuXHRcdHJnYi5hICo9IDEgLSByYXRpbztcblx0XHRyZXR1cm4gdGhpcztcblx0fVxuXHRncmV5c2NhbGUoKSB7XG5cdFx0Y29uc3QgcmdiID0gdGhpcy5fcmdiO1xuXHRcdGNvbnN0IHZhbCA9IHJvdW5kKHJnYi5yICogMC4zICsgcmdiLmcgKiAwLjU5ICsgcmdiLmIgKiAwLjExKTtcblx0XHRyZ2IuciA9IHJnYi5nID0gcmdiLmIgPSB2YWw7XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH1cblx0b3BhcXVlcihyYXRpbykge1xuXHRcdGNvbnN0IHJnYiA9IHRoaXMuX3JnYjtcblx0XHRyZ2IuYSAqPSAxICsgcmF0aW87XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH1cblx0bmVnYXRlKCkge1xuXHRcdGNvbnN0IHYgPSB0aGlzLl9yZ2I7XG5cdFx0di5yID0gMjU1IC0gdi5yO1xuXHRcdHYuZyA9IDI1NSAtIHYuZztcblx0XHR2LmIgPSAyNTUgLSB2LmI7XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH1cblx0bGlnaHRlbihyYXRpbykge1xuXHRcdG1vZEhTTCh0aGlzLl9yZ2IsIDIsIHJhdGlvKTtcblx0XHRyZXR1cm4gdGhpcztcblx0fVxuXHRkYXJrZW4ocmF0aW8pIHtcblx0XHRtb2RIU0wodGhpcy5fcmdiLCAyLCAtcmF0aW8pO1xuXHRcdHJldHVybiB0aGlzO1xuXHR9XG5cdHNhdHVyYXRlKHJhdGlvKSB7XG5cdFx0bW9kSFNMKHRoaXMuX3JnYiwgMSwgcmF0aW8pO1xuXHRcdHJldHVybiB0aGlzO1xuXHR9XG5cdGRlc2F0dXJhdGUocmF0aW8pIHtcblx0XHRtb2RIU0wodGhpcy5fcmdiLCAxLCAtcmF0aW8pO1xuXHRcdHJldHVybiB0aGlzO1xuXHR9XG5cdHJvdGF0ZShkZWcpIHtcblx0XHRyb3RhdGUodGhpcy5fcmdiLCBkZWcpO1xuXHRcdHJldHVybiB0aGlzO1xuXHR9XG59XG5mdW5jdGlvbiBpbmRleF9lc20oaW5wdXQpIHtcblx0cmV0dXJuIG5ldyBDb2xvcihpbnB1dCk7XG59XG5cbmNvbnN0IGlzUGF0dGVybk9yR3JhZGllbnQgPSAodmFsdWUpID0+IHZhbHVlIGluc3RhbmNlb2YgQ2FudmFzR3JhZGllbnQgfHwgdmFsdWUgaW5zdGFuY2VvZiBDYW52YXNQYXR0ZXJuO1xuZnVuY3Rpb24gY29sb3IodmFsdWUpIHtcbiAgcmV0dXJuIGlzUGF0dGVybk9yR3JhZGllbnQodmFsdWUpID8gdmFsdWUgOiBpbmRleF9lc20odmFsdWUpO1xufVxuZnVuY3Rpb24gZ2V0SG92ZXJDb2xvcih2YWx1ZSkge1xuICByZXR1cm4gaXNQYXR0ZXJuT3JHcmFkaWVudCh2YWx1ZSlcbiAgICA/IHZhbHVlXG4gICAgOiBpbmRleF9lc20odmFsdWUpLnNhdHVyYXRlKDAuNSkuZGFya2VuKDAuMSkuaGV4U3RyaW5nKCk7XG59XG5cbmNvbnN0IG92ZXJyaWRlcyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG5jb25zdCBkZXNjcmlwdG9ycyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG5mdW5jdGlvbiBnZXRTY29wZSQxKG5vZGUsIGtleSkge1xuICBpZiAoIWtleSkge1xuICAgIHJldHVybiBub2RlO1xuICB9XG4gIGNvbnN0IGtleXMgPSBrZXkuc3BsaXQoJy4nKTtcbiAgZm9yIChsZXQgaSA9IDAsIG4gPSBrZXlzLmxlbmd0aDsgaSA8IG47ICsraSkge1xuICAgIGNvbnN0IGsgPSBrZXlzW2ldO1xuICAgIG5vZGUgPSBub2RlW2tdIHx8IChub2RlW2tdID0gT2JqZWN0LmNyZWF0ZShudWxsKSk7XG4gIH1cbiAgcmV0dXJuIG5vZGU7XG59XG5mdW5jdGlvbiBzZXQocm9vdCwgc2NvcGUsIHZhbHVlcykge1xuICBpZiAodHlwZW9mIHNjb3BlID09PSAnc3RyaW5nJykge1xuICAgIHJldHVybiBtZXJnZShnZXRTY29wZSQxKHJvb3QsIHNjb3BlKSwgdmFsdWVzKTtcbiAgfVxuICByZXR1cm4gbWVyZ2UoZ2V0U2NvcGUkMShyb290LCAnJyksIHNjb3BlKTtcbn1cbmNsYXNzIERlZmF1bHRzIHtcbiAgY29uc3RydWN0b3IoX2Rlc2NyaXB0b3JzKSB7XG4gICAgdGhpcy5hbmltYXRpb24gPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5iYWNrZ3JvdW5kQ29sb3IgPSAncmdiYSgwLDAsMCwwLjEpJztcbiAgICB0aGlzLmJvcmRlckNvbG9yID0gJ3JnYmEoMCwwLDAsMC4xKSc7XG4gICAgdGhpcy5jb2xvciA9ICcjNjY2JztcbiAgICB0aGlzLmRhdGFzZXRzID0ge307XG4gICAgdGhpcy5kZXZpY2VQaXhlbFJhdGlvID0gKGNvbnRleHQpID0+IGNvbnRleHQuY2hhcnQucGxhdGZvcm0uZ2V0RGV2aWNlUGl4ZWxSYXRpbygpO1xuICAgIHRoaXMuZWxlbWVudHMgPSB7fTtcbiAgICB0aGlzLmV2ZW50cyA9IFtcbiAgICAgICdtb3VzZW1vdmUnLFxuICAgICAgJ21vdXNlb3V0JyxcbiAgICAgICdjbGljaycsXG4gICAgICAndG91Y2hzdGFydCcsXG4gICAgICAndG91Y2htb3ZlJ1xuICAgIF07XG4gICAgdGhpcy5mb250ID0ge1xuICAgICAgZmFtaWx5OiBcIidIZWx2ZXRpY2EgTmV1ZScsICdIZWx2ZXRpY2EnLCAnQXJpYWwnLCBzYW5zLXNlcmlmXCIsXG4gICAgICBzaXplOiAxMixcbiAgICAgIHN0eWxlOiAnbm9ybWFsJyxcbiAgICAgIGxpbmVIZWlnaHQ6IDEuMixcbiAgICAgIHdlaWdodDogbnVsbFxuICAgIH07XG4gICAgdGhpcy5ob3ZlciA9IHt9O1xuICAgIHRoaXMuaG92ZXJCYWNrZ3JvdW5kQ29sb3IgPSAoY3R4LCBvcHRpb25zKSA9PiBnZXRIb3ZlckNvbG9yKG9wdGlvbnMuYmFja2dyb3VuZENvbG9yKTtcbiAgICB0aGlzLmhvdmVyQm9yZGVyQ29sb3IgPSAoY3R4LCBvcHRpb25zKSA9PiBnZXRIb3ZlckNvbG9yKG9wdGlvbnMuYm9yZGVyQ29sb3IpO1xuICAgIHRoaXMuaG92ZXJDb2xvciA9IChjdHgsIG9wdGlvbnMpID0+IGdldEhvdmVyQ29sb3Iob3B0aW9ucy5jb2xvcik7XG4gICAgdGhpcy5pbmRleEF4aXMgPSAneCc7XG4gICAgdGhpcy5pbnRlcmFjdGlvbiA9IHtcbiAgICAgIG1vZGU6ICduZWFyZXN0JyxcbiAgICAgIGludGVyc2VjdDogdHJ1ZVxuICAgIH07XG4gICAgdGhpcy5tYWludGFpbkFzcGVjdFJhdGlvID0gdHJ1ZTtcbiAgICB0aGlzLm9uSG92ZXIgPSBudWxsO1xuICAgIHRoaXMub25DbGljayA9IG51bGw7XG4gICAgdGhpcy5wYXJzaW5nID0gdHJ1ZTtcbiAgICB0aGlzLnBsdWdpbnMgPSB7fTtcbiAgICB0aGlzLnJlc3BvbnNpdmUgPSB0cnVlO1xuICAgIHRoaXMuc2NhbGUgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5zY2FsZXMgPSB7fTtcbiAgICB0aGlzLnNob3dMaW5lID0gdHJ1ZTtcbiAgICB0aGlzLmRyYXdBY3RpdmVFbGVtZW50c09uVG9wID0gdHJ1ZTtcbiAgICB0aGlzLmRlc2NyaWJlKF9kZXNjcmlwdG9ycyk7XG4gIH1cbiAgc2V0KHNjb3BlLCB2YWx1ZXMpIHtcbiAgICByZXR1cm4gc2V0KHRoaXMsIHNjb3BlLCB2YWx1ZXMpO1xuICB9XG4gIGdldChzY29wZSkge1xuICAgIHJldHVybiBnZXRTY29wZSQxKHRoaXMsIHNjb3BlKTtcbiAgfVxuICBkZXNjcmliZShzY29wZSwgdmFsdWVzKSB7XG4gICAgcmV0dXJuIHNldChkZXNjcmlwdG9ycywgc2NvcGUsIHZhbHVlcyk7XG4gIH1cbiAgb3ZlcnJpZGUoc2NvcGUsIHZhbHVlcykge1xuICAgIHJldHVybiBzZXQob3ZlcnJpZGVzLCBzY29wZSwgdmFsdWVzKTtcbiAgfVxuICByb3V0ZShzY29wZSwgbmFtZSwgdGFyZ2V0U2NvcGUsIHRhcmdldE5hbWUpIHtcbiAgICBjb25zdCBzY29wZU9iamVjdCA9IGdldFNjb3BlJDEodGhpcywgc2NvcGUpO1xuICAgIGNvbnN0IHRhcmdldFNjb3BlT2JqZWN0ID0gZ2V0U2NvcGUkMSh0aGlzLCB0YXJnZXRTY29wZSk7XG4gICAgY29uc3QgcHJpdmF0ZU5hbWUgPSAnXycgKyBuYW1lO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHNjb3BlT2JqZWN0LCB7XG4gICAgICBbcHJpdmF0ZU5hbWVdOiB7XG4gICAgICAgIHZhbHVlOiBzY29wZU9iamVjdFtuYW1lXSxcbiAgICAgICAgd3JpdGFibGU6IHRydWVcbiAgICAgIH0sXG4gICAgICBbbmFtZV06IHtcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgZ2V0KCkge1xuICAgICAgICAgIGNvbnN0IGxvY2FsID0gdGhpc1twcml2YXRlTmFtZV07XG4gICAgICAgICAgY29uc3QgdGFyZ2V0ID0gdGFyZ2V0U2NvcGVPYmplY3RbdGFyZ2V0TmFtZV07XG4gICAgICAgICAgaWYgKGlzT2JqZWN0KGxvY2FsKSkge1xuICAgICAgICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oe30sIHRhcmdldCwgbG9jYWwpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gdmFsdWVPckRlZmF1bHQobG9jYWwsIHRhcmdldCk7XG4gICAgICAgIH0sXG4gICAgICAgIHNldCh2YWx1ZSkge1xuICAgICAgICAgIHRoaXNbcHJpdmF0ZU5hbWVdID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgfVxufVxudmFyIGRlZmF1bHRzID0gbmV3IERlZmF1bHRzKHtcbiAgX3NjcmlwdGFibGU6IChuYW1lKSA9PiAhbmFtZS5zdGFydHNXaXRoKCdvbicpLFxuICBfaW5kZXhhYmxlOiAobmFtZSkgPT4gbmFtZSAhPT0gJ2V2ZW50cycsXG4gIGhvdmVyOiB7XG4gICAgX2ZhbGxiYWNrOiAnaW50ZXJhY3Rpb24nXG4gIH0sXG4gIGludGVyYWN0aW9uOiB7XG4gICAgX3NjcmlwdGFibGU6IGZhbHNlLFxuICAgIF9pbmRleGFibGU6IGZhbHNlLFxuICB9XG59KTtcblxuZnVuY3Rpb24gdG9Gb250U3RyaW5nKGZvbnQpIHtcbiAgaWYgKCFmb250IHx8IGlzTnVsbE9yVW5kZWYoZm9udC5zaXplKSB8fCBpc051bGxPclVuZGVmKGZvbnQuZmFtaWx5KSkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIHJldHVybiAoZm9udC5zdHlsZSA/IGZvbnQuc3R5bGUgKyAnICcgOiAnJylcblx0XHQrIChmb250LndlaWdodCA/IGZvbnQud2VpZ2h0ICsgJyAnIDogJycpXG5cdFx0KyBmb250LnNpemUgKyAncHggJ1xuXHRcdCsgZm9udC5mYW1pbHk7XG59XG5mdW5jdGlvbiBfbWVhc3VyZVRleHQoY3R4LCBkYXRhLCBnYywgbG9uZ2VzdCwgc3RyaW5nKSB7XG4gIGxldCB0ZXh0V2lkdGggPSBkYXRhW3N0cmluZ107XG4gIGlmICghdGV4dFdpZHRoKSB7XG4gICAgdGV4dFdpZHRoID0gZGF0YVtzdHJpbmddID0gY3R4Lm1lYXN1cmVUZXh0KHN0cmluZykud2lkdGg7XG4gICAgZ2MucHVzaChzdHJpbmcpO1xuICB9XG4gIGlmICh0ZXh0V2lkdGggPiBsb25nZXN0KSB7XG4gICAgbG9uZ2VzdCA9IHRleHRXaWR0aDtcbiAgfVxuICByZXR1cm4gbG9uZ2VzdDtcbn1cbmZ1bmN0aW9uIF9sb25nZXN0VGV4dChjdHgsIGZvbnQsIGFycmF5T2ZUaGluZ3MsIGNhY2hlKSB7XG4gIGNhY2hlID0gY2FjaGUgfHwge307XG4gIGxldCBkYXRhID0gY2FjaGUuZGF0YSA9IGNhY2hlLmRhdGEgfHwge307XG4gIGxldCBnYyA9IGNhY2hlLmdhcmJhZ2VDb2xsZWN0ID0gY2FjaGUuZ2FyYmFnZUNvbGxlY3QgfHwgW107XG4gIGlmIChjYWNoZS5mb250ICE9PSBmb250KSB7XG4gICAgZGF0YSA9IGNhY2hlLmRhdGEgPSB7fTtcbiAgICBnYyA9IGNhY2hlLmdhcmJhZ2VDb2xsZWN0ID0gW107XG4gICAgY2FjaGUuZm9udCA9IGZvbnQ7XG4gIH1cbiAgY3R4LnNhdmUoKTtcbiAgY3R4LmZvbnQgPSBmb250O1xuICBsZXQgbG9uZ2VzdCA9IDA7XG4gIGNvbnN0IGlsZW4gPSBhcnJheU9mVGhpbmdzLmxlbmd0aDtcbiAgbGV0IGksIGosIGpsZW4sIHRoaW5nLCBuZXN0ZWRUaGluZztcbiAgZm9yIChpID0gMDsgaSA8IGlsZW47IGkrKykge1xuICAgIHRoaW5nID0gYXJyYXlPZlRoaW5nc1tpXTtcbiAgICBpZiAodGhpbmcgIT09IHVuZGVmaW5lZCAmJiB0aGluZyAhPT0gbnVsbCAmJiBpc0FycmF5KHRoaW5nKSAhPT0gdHJ1ZSkge1xuICAgICAgbG9uZ2VzdCA9IF9tZWFzdXJlVGV4dChjdHgsIGRhdGEsIGdjLCBsb25nZXN0LCB0aGluZyk7XG4gICAgfSBlbHNlIGlmIChpc0FycmF5KHRoaW5nKSkge1xuICAgICAgZm9yIChqID0gMCwgamxlbiA9IHRoaW5nLmxlbmd0aDsgaiA8IGpsZW47IGorKykge1xuICAgICAgICBuZXN0ZWRUaGluZyA9IHRoaW5nW2pdO1xuICAgICAgICBpZiAobmVzdGVkVGhpbmcgIT09IHVuZGVmaW5lZCAmJiBuZXN0ZWRUaGluZyAhPT0gbnVsbCAmJiAhaXNBcnJheShuZXN0ZWRUaGluZykpIHtcbiAgICAgICAgICBsb25nZXN0ID0gX21lYXN1cmVUZXh0KGN0eCwgZGF0YSwgZ2MsIGxvbmdlc3QsIG5lc3RlZFRoaW5nKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuICBjdHgucmVzdG9yZSgpO1xuICBjb25zdCBnY0xlbiA9IGdjLmxlbmd0aCAvIDI7XG4gIGlmIChnY0xlbiA+IGFycmF5T2ZUaGluZ3MubGVuZ3RoKSB7XG4gICAgZm9yIChpID0gMDsgaSA8IGdjTGVuOyBpKyspIHtcbiAgICAgIGRlbGV0ZSBkYXRhW2djW2ldXTtcbiAgICB9XG4gICAgZ2Muc3BsaWNlKDAsIGdjTGVuKTtcbiAgfVxuICByZXR1cm4gbG9uZ2VzdDtcbn1cbmZ1bmN0aW9uIF9hbGlnblBpeGVsKGNoYXJ0LCBwaXhlbCwgd2lkdGgpIHtcbiAgY29uc3QgZGV2aWNlUGl4ZWxSYXRpbyA9IGNoYXJ0LmN1cnJlbnREZXZpY2VQaXhlbFJhdGlvO1xuICBjb25zdCBoYWxmV2lkdGggPSB3aWR0aCAhPT0gMCA/IE1hdGgubWF4KHdpZHRoIC8gMiwgMC41KSA6IDA7XG4gIHJldHVybiBNYXRoLnJvdW5kKChwaXhlbCAtIGhhbGZXaWR0aCkgKiBkZXZpY2VQaXhlbFJhdGlvKSAvIGRldmljZVBpeGVsUmF0aW8gKyBoYWxmV2lkdGg7XG59XG5mdW5jdGlvbiBjbGVhckNhbnZhcyhjYW52YXMsIGN0eCkge1xuICBjdHggPSBjdHggfHwgY2FudmFzLmdldENvbnRleHQoJzJkJyk7XG4gIGN0eC5zYXZlKCk7XG4gIGN0eC5yZXNldFRyYW5zZm9ybSgpO1xuICBjdHguY2xlYXJSZWN0KDAsIDAsIGNhbnZhcy53aWR0aCwgY2FudmFzLmhlaWdodCk7XG4gIGN0eC5yZXN0b3JlKCk7XG59XG5mdW5jdGlvbiBkcmF3UG9pbnQoY3R4LCBvcHRpb25zLCB4LCB5KSB7XG4gIGxldCB0eXBlLCB4T2Zmc2V0LCB5T2Zmc2V0LCBzaXplLCBjb3JuZXJSYWRpdXM7XG4gIGNvbnN0IHN0eWxlID0gb3B0aW9ucy5wb2ludFN0eWxlO1xuICBjb25zdCByb3RhdGlvbiA9IG9wdGlvbnMucm90YXRpb247XG4gIGNvbnN0IHJhZGl1cyA9IG9wdGlvbnMucmFkaXVzO1xuICBsZXQgcmFkID0gKHJvdGF0aW9uIHx8IDApICogUkFEX1BFUl9ERUc7XG4gIGlmIChzdHlsZSAmJiB0eXBlb2Ygc3R5bGUgPT09ICdvYmplY3QnKSB7XG4gICAgdHlwZSA9IHN0eWxlLnRvU3RyaW5nKCk7XG4gICAgaWYgKHR5cGUgPT09ICdbb2JqZWN0IEhUTUxJbWFnZUVsZW1lbnRdJyB8fCB0eXBlID09PSAnW29iamVjdCBIVE1MQ2FudmFzRWxlbWVudF0nKSB7XG4gICAgICBjdHguc2F2ZSgpO1xuICAgICAgY3R4LnRyYW5zbGF0ZSh4LCB5KTtcbiAgICAgIGN0eC5yb3RhdGUocmFkKTtcbiAgICAgIGN0eC5kcmF3SW1hZ2Uoc3R5bGUsIC1zdHlsZS53aWR0aCAvIDIsIC1zdHlsZS5oZWlnaHQgLyAyLCBzdHlsZS53aWR0aCwgc3R5bGUuaGVpZ2h0KTtcbiAgICAgIGN0eC5yZXN0b3JlKCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICB9XG4gIGlmIChpc05hTihyYWRpdXMpIHx8IHJhZGl1cyA8PSAwKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGN0eC5iZWdpblBhdGgoKTtcbiAgc3dpdGNoIChzdHlsZSkge1xuICBkZWZhdWx0OlxuICAgIGN0eC5hcmMoeCwgeSwgcmFkaXVzLCAwLCBUQVUpO1xuICAgIGN0eC5jbG9zZVBhdGgoKTtcbiAgICBicmVhaztcbiAgY2FzZSAndHJpYW5nbGUnOlxuICAgIGN0eC5tb3ZlVG8oeCArIE1hdGguc2luKHJhZCkgKiByYWRpdXMsIHkgLSBNYXRoLmNvcyhyYWQpICogcmFkaXVzKTtcbiAgICByYWQgKz0gVFdPX1RISVJEU19QSTtcbiAgICBjdHgubGluZVRvKHggKyBNYXRoLnNpbihyYWQpICogcmFkaXVzLCB5IC0gTWF0aC5jb3MocmFkKSAqIHJhZGl1cyk7XG4gICAgcmFkICs9IFRXT19USElSRFNfUEk7XG4gICAgY3R4LmxpbmVUbyh4ICsgTWF0aC5zaW4ocmFkKSAqIHJhZGl1cywgeSAtIE1hdGguY29zKHJhZCkgKiByYWRpdXMpO1xuICAgIGN0eC5jbG9zZVBhdGgoKTtcbiAgICBicmVhaztcbiAgY2FzZSAncmVjdFJvdW5kZWQnOlxuICAgIGNvcm5lclJhZGl1cyA9IHJhZGl1cyAqIDAuNTE2O1xuICAgIHNpemUgPSByYWRpdXMgLSBjb3JuZXJSYWRpdXM7XG4gICAgeE9mZnNldCA9IE1hdGguY29zKHJhZCArIFFVQVJURVJfUEkpICogc2l6ZTtcbiAgICB5T2Zmc2V0ID0gTWF0aC5zaW4ocmFkICsgUVVBUlRFUl9QSSkgKiBzaXplO1xuICAgIGN0eC5hcmMoeCAtIHhPZmZzZXQsIHkgLSB5T2Zmc2V0LCBjb3JuZXJSYWRpdXMsIHJhZCAtIFBJLCByYWQgLSBIQUxGX1BJKTtcbiAgICBjdHguYXJjKHggKyB5T2Zmc2V0LCB5IC0geE9mZnNldCwgY29ybmVyUmFkaXVzLCByYWQgLSBIQUxGX1BJLCByYWQpO1xuICAgIGN0eC5hcmMoeCArIHhPZmZzZXQsIHkgKyB5T2Zmc2V0LCBjb3JuZXJSYWRpdXMsIHJhZCwgcmFkICsgSEFMRl9QSSk7XG4gICAgY3R4LmFyYyh4IC0geU9mZnNldCwgeSArIHhPZmZzZXQsIGNvcm5lclJhZGl1cywgcmFkICsgSEFMRl9QSSwgcmFkICsgUEkpO1xuICAgIGN0eC5jbG9zZVBhdGgoKTtcbiAgICBicmVhaztcbiAgY2FzZSAncmVjdCc6XG4gICAgaWYgKCFyb3RhdGlvbikge1xuICAgICAgc2l6ZSA9IE1hdGguU1FSVDFfMiAqIHJhZGl1cztcbiAgICAgIGN0eC5yZWN0KHggLSBzaXplLCB5IC0gc2l6ZSwgMiAqIHNpemUsIDIgKiBzaXplKTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICByYWQgKz0gUVVBUlRFUl9QSTtcbiAgY2FzZSAncmVjdFJvdCc6XG4gICAgeE9mZnNldCA9IE1hdGguY29zKHJhZCkgKiByYWRpdXM7XG4gICAgeU9mZnNldCA9IE1hdGguc2luKHJhZCkgKiByYWRpdXM7XG4gICAgY3R4Lm1vdmVUbyh4IC0geE9mZnNldCwgeSAtIHlPZmZzZXQpO1xuICAgIGN0eC5saW5lVG8oeCArIHlPZmZzZXQsIHkgLSB4T2Zmc2V0KTtcbiAgICBjdHgubGluZVRvKHggKyB4T2Zmc2V0LCB5ICsgeU9mZnNldCk7XG4gICAgY3R4LmxpbmVUbyh4IC0geU9mZnNldCwgeSArIHhPZmZzZXQpO1xuICAgIGN0eC5jbG9zZVBhdGgoKTtcbiAgICBicmVhaztcbiAgY2FzZSAnY3Jvc3NSb3QnOlxuICAgIHJhZCArPSBRVUFSVEVSX1BJO1xuICBjYXNlICdjcm9zcyc6XG4gICAgeE9mZnNldCA9IE1hdGguY29zKHJhZCkgKiByYWRpdXM7XG4gICAgeU9mZnNldCA9IE1hdGguc2luKHJhZCkgKiByYWRpdXM7XG4gICAgY3R4Lm1vdmVUbyh4IC0geE9mZnNldCwgeSAtIHlPZmZzZXQpO1xuICAgIGN0eC5saW5lVG8oeCArIHhPZmZzZXQsIHkgKyB5T2Zmc2V0KTtcbiAgICBjdHgubW92ZVRvKHggKyB5T2Zmc2V0LCB5IC0geE9mZnNldCk7XG4gICAgY3R4LmxpbmVUbyh4IC0geU9mZnNldCwgeSArIHhPZmZzZXQpO1xuICAgIGJyZWFrO1xuICBjYXNlICdzdGFyJzpcbiAgICB4T2Zmc2V0ID0gTWF0aC5jb3MocmFkKSAqIHJhZGl1cztcbiAgICB5T2Zmc2V0ID0gTWF0aC5zaW4ocmFkKSAqIHJhZGl1cztcbiAgICBjdHgubW92ZVRvKHggLSB4T2Zmc2V0LCB5IC0geU9mZnNldCk7XG4gICAgY3R4LmxpbmVUbyh4ICsgeE9mZnNldCwgeSArIHlPZmZzZXQpO1xuICAgIGN0eC5tb3ZlVG8oeCArIHlPZmZzZXQsIHkgLSB4T2Zmc2V0KTtcbiAgICBjdHgubGluZVRvKHggLSB5T2Zmc2V0LCB5ICsgeE9mZnNldCk7XG4gICAgcmFkICs9IFFVQVJURVJfUEk7XG4gICAgeE9mZnNldCA9IE1hdGguY29zKHJhZCkgKiByYWRpdXM7XG4gICAgeU9mZnNldCA9IE1hdGguc2luKHJhZCkgKiByYWRpdXM7XG4gICAgY3R4Lm1vdmVUbyh4IC0geE9mZnNldCwgeSAtIHlPZmZzZXQpO1xuICAgIGN0eC5saW5lVG8oeCArIHhPZmZzZXQsIHkgKyB5T2Zmc2V0KTtcbiAgICBjdHgubW92ZVRvKHggKyB5T2Zmc2V0LCB5IC0geE9mZnNldCk7XG4gICAgY3R4LmxpbmVUbyh4IC0geU9mZnNldCwgeSArIHhPZmZzZXQpO1xuICAgIGJyZWFrO1xuICBjYXNlICdsaW5lJzpcbiAgICB4T2Zmc2V0ID0gTWF0aC5jb3MocmFkKSAqIHJhZGl1cztcbiAgICB5T2Zmc2V0ID0gTWF0aC5zaW4ocmFkKSAqIHJhZGl1cztcbiAgICBjdHgubW92ZVRvKHggLSB4T2Zmc2V0LCB5IC0geU9mZnNldCk7XG4gICAgY3R4LmxpbmVUbyh4ICsgeE9mZnNldCwgeSArIHlPZmZzZXQpO1xuICAgIGJyZWFrO1xuICBjYXNlICdkYXNoJzpcbiAgICBjdHgubW92ZVRvKHgsIHkpO1xuICAgIGN0eC5saW5lVG8oeCArIE1hdGguY29zKHJhZCkgKiByYWRpdXMsIHkgKyBNYXRoLnNpbihyYWQpICogcmFkaXVzKTtcbiAgICBicmVhaztcbiAgfVxuICBjdHguZmlsbCgpO1xuICBpZiAob3B0aW9ucy5ib3JkZXJXaWR0aCA+IDApIHtcbiAgICBjdHguc3Ryb2tlKCk7XG4gIH1cbn1cbmZ1bmN0aW9uIF9pc1BvaW50SW5BcmVhKHBvaW50LCBhcmVhLCBtYXJnaW4pIHtcbiAgbWFyZ2luID0gbWFyZ2luIHx8IDAuNTtcbiAgcmV0dXJuICFhcmVhIHx8IChwb2ludCAmJiBwb2ludC54ID4gYXJlYS5sZWZ0IC0gbWFyZ2luICYmIHBvaW50LnggPCBhcmVhLnJpZ2h0ICsgbWFyZ2luICYmXG5cdFx0cG9pbnQueSA+IGFyZWEudG9wIC0gbWFyZ2luICYmIHBvaW50LnkgPCBhcmVhLmJvdHRvbSArIG1hcmdpbik7XG59XG5mdW5jdGlvbiBjbGlwQXJlYShjdHgsIGFyZWEpIHtcbiAgY3R4LnNhdmUoKTtcbiAgY3R4LmJlZ2luUGF0aCgpO1xuICBjdHgucmVjdChhcmVhLmxlZnQsIGFyZWEudG9wLCBhcmVhLnJpZ2h0IC0gYXJlYS5sZWZ0LCBhcmVhLmJvdHRvbSAtIGFyZWEudG9wKTtcbiAgY3R4LmNsaXAoKTtcbn1cbmZ1bmN0aW9uIHVuY2xpcEFyZWEoY3R4KSB7XG4gIGN0eC5yZXN0b3JlKCk7XG59XG5mdW5jdGlvbiBfc3RlcHBlZExpbmVUbyhjdHgsIHByZXZpb3VzLCB0YXJnZXQsIGZsaXAsIG1vZGUpIHtcbiAgaWYgKCFwcmV2aW91cykge1xuICAgIHJldHVybiBjdHgubGluZVRvKHRhcmdldC54LCB0YXJnZXQueSk7XG4gIH1cbiAgaWYgKG1vZGUgPT09ICdtaWRkbGUnKSB7XG4gICAgY29uc3QgbWlkcG9pbnQgPSAocHJldmlvdXMueCArIHRhcmdldC54KSAvIDIuMDtcbiAgICBjdHgubGluZVRvKG1pZHBvaW50LCBwcmV2aW91cy55KTtcbiAgICBjdHgubGluZVRvKG1pZHBvaW50LCB0YXJnZXQueSk7XG4gIH0gZWxzZSBpZiAobW9kZSA9PT0gJ2FmdGVyJyAhPT0gISFmbGlwKSB7XG4gICAgY3R4LmxpbmVUbyhwcmV2aW91cy54LCB0YXJnZXQueSk7XG4gIH0gZWxzZSB7XG4gICAgY3R4LmxpbmVUbyh0YXJnZXQueCwgcHJldmlvdXMueSk7XG4gIH1cbiAgY3R4LmxpbmVUbyh0YXJnZXQueCwgdGFyZ2V0LnkpO1xufVxuZnVuY3Rpb24gX2JlemllckN1cnZlVG8oY3R4LCBwcmV2aW91cywgdGFyZ2V0LCBmbGlwKSB7XG4gIGlmICghcHJldmlvdXMpIHtcbiAgICByZXR1cm4gY3R4LmxpbmVUbyh0YXJnZXQueCwgdGFyZ2V0LnkpO1xuICB9XG4gIGN0eC5iZXppZXJDdXJ2ZVRvKFxuICAgIGZsaXAgPyBwcmV2aW91cy5jcDF4IDogcHJldmlvdXMuY3AyeCxcbiAgICBmbGlwID8gcHJldmlvdXMuY3AxeSA6IHByZXZpb3VzLmNwMnksXG4gICAgZmxpcCA/IHRhcmdldC5jcDJ4IDogdGFyZ2V0LmNwMXgsXG4gICAgZmxpcCA/IHRhcmdldC5jcDJ5IDogdGFyZ2V0LmNwMXksXG4gICAgdGFyZ2V0LngsXG4gICAgdGFyZ2V0LnkpO1xufVxuZnVuY3Rpb24gcmVuZGVyVGV4dChjdHgsIHRleHQsIHgsIHksIGZvbnQsIG9wdHMgPSB7fSkge1xuICBjb25zdCBsaW5lcyA9IGlzQXJyYXkodGV4dCkgPyB0ZXh0IDogW3RleHRdO1xuICBjb25zdCBzdHJva2UgPSBvcHRzLnN0cm9rZVdpZHRoID4gMCAmJiBvcHRzLnN0cm9rZUNvbG9yICE9PSAnJztcbiAgbGV0IGksIGxpbmU7XG4gIGN0eC5zYXZlKCk7XG4gIGN0eC5mb250ID0gZm9udC5zdHJpbmc7XG4gIHNldFJlbmRlck9wdHMoY3R4LCBvcHRzKTtcbiAgZm9yIChpID0gMDsgaSA8IGxpbmVzLmxlbmd0aDsgKytpKSB7XG4gICAgbGluZSA9IGxpbmVzW2ldO1xuICAgIGlmIChzdHJva2UpIHtcbiAgICAgIGlmIChvcHRzLnN0cm9rZUNvbG9yKSB7XG4gICAgICAgIGN0eC5zdHJva2VTdHlsZSA9IG9wdHMuc3Ryb2tlQ29sb3I7XG4gICAgICB9XG4gICAgICBpZiAoIWlzTnVsbE9yVW5kZWYob3B0cy5zdHJva2VXaWR0aCkpIHtcbiAgICAgICAgY3R4LmxpbmVXaWR0aCA9IG9wdHMuc3Ryb2tlV2lkdGg7XG4gICAgICB9XG4gICAgICBjdHguc3Ryb2tlVGV4dChsaW5lLCB4LCB5LCBvcHRzLm1heFdpZHRoKTtcbiAgICB9XG4gICAgY3R4LmZpbGxUZXh0KGxpbmUsIHgsIHksIG9wdHMubWF4V2lkdGgpO1xuICAgIGRlY29yYXRlVGV4dChjdHgsIHgsIHksIGxpbmUsIG9wdHMpO1xuICAgIHkgKz0gZm9udC5saW5lSGVpZ2h0O1xuICB9XG4gIGN0eC5yZXN0b3JlKCk7XG59XG5mdW5jdGlvbiBzZXRSZW5kZXJPcHRzKGN0eCwgb3B0cykge1xuICBpZiAob3B0cy50cmFuc2xhdGlvbikge1xuICAgIGN0eC50cmFuc2xhdGUob3B0cy50cmFuc2xhdGlvblswXSwgb3B0cy50cmFuc2xhdGlvblsxXSk7XG4gIH1cbiAgaWYgKCFpc051bGxPclVuZGVmKG9wdHMucm90YXRpb24pKSB7XG4gICAgY3R4LnJvdGF0ZShvcHRzLnJvdGF0aW9uKTtcbiAgfVxuICBpZiAob3B0cy5jb2xvcikge1xuICAgIGN0eC5maWxsU3R5bGUgPSBvcHRzLmNvbG9yO1xuICB9XG4gIGlmIChvcHRzLnRleHRBbGlnbikge1xuICAgIGN0eC50ZXh0QWxpZ24gPSBvcHRzLnRleHRBbGlnbjtcbiAgfVxuICBpZiAob3B0cy50ZXh0QmFzZWxpbmUpIHtcbiAgICBjdHgudGV4dEJhc2VsaW5lID0gb3B0cy50ZXh0QmFzZWxpbmU7XG4gIH1cbn1cbmZ1bmN0aW9uIGRlY29yYXRlVGV4dChjdHgsIHgsIHksIGxpbmUsIG9wdHMpIHtcbiAgaWYgKG9wdHMuc3RyaWtldGhyb3VnaCB8fCBvcHRzLnVuZGVybGluZSkge1xuICAgIGNvbnN0IG1ldHJpY3MgPSBjdHgubWVhc3VyZVRleHQobGluZSk7XG4gICAgY29uc3QgbGVmdCA9IHggLSBtZXRyaWNzLmFjdHVhbEJvdW5kaW5nQm94TGVmdDtcbiAgICBjb25zdCByaWdodCA9IHggKyBtZXRyaWNzLmFjdHVhbEJvdW5kaW5nQm94UmlnaHQ7XG4gICAgY29uc3QgdG9wID0geSAtIG1ldHJpY3MuYWN0dWFsQm91bmRpbmdCb3hBc2NlbnQ7XG4gICAgY29uc3QgYm90dG9tID0geSArIG1ldHJpY3MuYWN0dWFsQm91bmRpbmdCb3hEZXNjZW50O1xuICAgIGNvbnN0IHlEZWNvcmF0aW9uID0gb3B0cy5zdHJpa2V0aHJvdWdoID8gKHRvcCArIGJvdHRvbSkgLyAyIDogYm90dG9tO1xuICAgIGN0eC5zdHJva2VTdHlsZSA9IGN0eC5maWxsU3R5bGU7XG4gICAgY3R4LmJlZ2luUGF0aCgpO1xuICAgIGN0eC5saW5lV2lkdGggPSBvcHRzLmRlY29yYXRpb25XaWR0aCB8fCAyO1xuICAgIGN0eC5tb3ZlVG8obGVmdCwgeURlY29yYXRpb24pO1xuICAgIGN0eC5saW5lVG8ocmlnaHQsIHlEZWNvcmF0aW9uKTtcbiAgICBjdHguc3Ryb2tlKCk7XG4gIH1cbn1cbmZ1bmN0aW9uIGFkZFJvdW5kZWRSZWN0UGF0aChjdHgsIHJlY3QpIHtcbiAgY29uc3Qge3gsIHksIHcsIGgsIHJhZGl1c30gPSByZWN0O1xuICBjdHguYXJjKHggKyByYWRpdXMudG9wTGVmdCwgeSArIHJhZGl1cy50b3BMZWZ0LCByYWRpdXMudG9wTGVmdCwgLUhBTEZfUEksIFBJLCB0cnVlKTtcbiAgY3R4LmxpbmVUbyh4LCB5ICsgaCAtIHJhZGl1cy5ib3R0b21MZWZ0KTtcbiAgY3R4LmFyYyh4ICsgcmFkaXVzLmJvdHRvbUxlZnQsIHkgKyBoIC0gcmFkaXVzLmJvdHRvbUxlZnQsIHJhZGl1cy5ib3R0b21MZWZ0LCBQSSwgSEFMRl9QSSwgdHJ1ZSk7XG4gIGN0eC5saW5lVG8oeCArIHcgLSByYWRpdXMuYm90dG9tUmlnaHQsIHkgKyBoKTtcbiAgY3R4LmFyYyh4ICsgdyAtIHJhZGl1cy5ib3R0b21SaWdodCwgeSArIGggLSByYWRpdXMuYm90dG9tUmlnaHQsIHJhZGl1cy5ib3R0b21SaWdodCwgSEFMRl9QSSwgMCwgdHJ1ZSk7XG4gIGN0eC5saW5lVG8oeCArIHcsIHkgKyByYWRpdXMudG9wUmlnaHQpO1xuICBjdHguYXJjKHggKyB3IC0gcmFkaXVzLnRvcFJpZ2h0LCB5ICsgcmFkaXVzLnRvcFJpZ2h0LCByYWRpdXMudG9wUmlnaHQsIDAsIC1IQUxGX1BJLCB0cnVlKTtcbiAgY3R4LmxpbmVUbyh4ICsgcmFkaXVzLnRvcExlZnQsIHkpO1xufVxuXG5jb25zdCBMSU5FX0hFSUdIVCA9IG5ldyBSZWdFeHAoL14obm9ybWFsfChcXGQrKD86XFwuXFxkKyk/KShweHxlbXwlKT8pJC8pO1xuY29uc3QgRk9OVF9TVFlMRSA9IG5ldyBSZWdFeHAoL14obm9ybWFsfGl0YWxpY3xpbml0aWFsfGluaGVyaXR8dW5zZXR8KG9ibGlxdWUoIC0/WzAtOV0/WzAtOV1kZWcpPykpJC8pO1xuZnVuY3Rpb24gdG9MaW5lSGVpZ2h0KHZhbHVlLCBzaXplKSB7XG4gIGNvbnN0IG1hdGNoZXMgPSAoJycgKyB2YWx1ZSkubWF0Y2goTElORV9IRUlHSFQpO1xuICBpZiAoIW1hdGNoZXMgfHwgbWF0Y2hlc1sxXSA9PT0gJ25vcm1hbCcpIHtcbiAgICByZXR1cm4gc2l6ZSAqIDEuMjtcbiAgfVxuICB2YWx1ZSA9ICttYXRjaGVzWzJdO1xuICBzd2l0Y2ggKG1hdGNoZXNbM10pIHtcbiAgY2FzZSAncHgnOlxuICAgIHJldHVybiB2YWx1ZTtcbiAgY2FzZSAnJSc6XG4gICAgdmFsdWUgLz0gMTAwO1xuICAgIGJyZWFrO1xuICB9XG4gIHJldHVybiBzaXplICogdmFsdWU7XG59XG5jb25zdCBudW1iZXJPclplcm8gPSB2ID0+ICt2IHx8IDA7XG5mdW5jdGlvbiBfcmVhZFZhbHVlVG9Qcm9wcyh2YWx1ZSwgcHJvcHMpIHtcbiAgY29uc3QgcmV0ID0ge307XG4gIGNvbnN0IG9ialByb3BzID0gaXNPYmplY3QocHJvcHMpO1xuICBjb25zdCBrZXlzID0gb2JqUHJvcHMgPyBPYmplY3Qua2V5cyhwcm9wcykgOiBwcm9wcztcbiAgY29uc3QgcmVhZCA9IGlzT2JqZWN0KHZhbHVlKVxuICAgID8gb2JqUHJvcHNcbiAgICAgID8gcHJvcCA9PiB2YWx1ZU9yRGVmYXVsdCh2YWx1ZVtwcm9wXSwgdmFsdWVbcHJvcHNbcHJvcF1dKVxuICAgICAgOiBwcm9wID0+IHZhbHVlW3Byb3BdXG4gICAgOiAoKSA9PiB2YWx1ZTtcbiAgZm9yIChjb25zdCBwcm9wIG9mIGtleXMpIHtcbiAgICByZXRbcHJvcF0gPSBudW1iZXJPclplcm8ocmVhZChwcm9wKSk7XG4gIH1cbiAgcmV0dXJuIHJldDtcbn1cbmZ1bmN0aW9uIHRvVFJCTCh2YWx1ZSkge1xuICByZXR1cm4gX3JlYWRWYWx1ZVRvUHJvcHModmFsdWUsIHt0b3A6ICd5JywgcmlnaHQ6ICd4JywgYm90dG9tOiAneScsIGxlZnQ6ICd4J30pO1xufVxuZnVuY3Rpb24gdG9UUkJMQ29ybmVycyh2YWx1ZSkge1xuICByZXR1cm4gX3JlYWRWYWx1ZVRvUHJvcHModmFsdWUsIFsndG9wTGVmdCcsICd0b3BSaWdodCcsICdib3R0b21MZWZ0JywgJ2JvdHRvbVJpZ2h0J10pO1xufVxuZnVuY3Rpb24gdG9QYWRkaW5nKHZhbHVlKSB7XG4gIGNvbnN0IG9iaiA9IHRvVFJCTCh2YWx1ZSk7XG4gIG9iai53aWR0aCA9IG9iai5sZWZ0ICsgb2JqLnJpZ2h0O1xuICBvYmouaGVpZ2h0ID0gb2JqLnRvcCArIG9iai5ib3R0b207XG4gIHJldHVybiBvYmo7XG59XG5mdW5jdGlvbiB0b0ZvbnQob3B0aW9ucywgZmFsbGJhY2spIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gIGZhbGxiYWNrID0gZmFsbGJhY2sgfHwgZGVmYXVsdHMuZm9udDtcbiAgbGV0IHNpemUgPSB2YWx1ZU9yRGVmYXVsdChvcHRpb25zLnNpemUsIGZhbGxiYWNrLnNpemUpO1xuICBpZiAodHlwZW9mIHNpemUgPT09ICdzdHJpbmcnKSB7XG4gICAgc2l6ZSA9IHBhcnNlSW50KHNpemUsIDEwKTtcbiAgfVxuICBsZXQgc3R5bGUgPSB2YWx1ZU9yRGVmYXVsdChvcHRpb25zLnN0eWxlLCBmYWxsYmFjay5zdHlsZSk7XG4gIGlmIChzdHlsZSAmJiAhKCcnICsgc3R5bGUpLm1hdGNoKEZPTlRfU1RZTEUpKSB7XG4gICAgY29uc29sZS53YXJuKCdJbnZhbGlkIGZvbnQgc3R5bGUgc3BlY2lmaWVkOiBcIicgKyBzdHlsZSArICdcIicpO1xuICAgIHN0eWxlID0gJyc7XG4gIH1cbiAgY29uc3QgZm9udCA9IHtcbiAgICBmYW1pbHk6IHZhbHVlT3JEZWZhdWx0KG9wdGlvbnMuZmFtaWx5LCBmYWxsYmFjay5mYW1pbHkpLFxuICAgIGxpbmVIZWlnaHQ6IHRvTGluZUhlaWdodCh2YWx1ZU9yRGVmYXVsdChvcHRpb25zLmxpbmVIZWlnaHQsIGZhbGxiYWNrLmxpbmVIZWlnaHQpLCBzaXplKSxcbiAgICBzaXplLFxuICAgIHN0eWxlLFxuICAgIHdlaWdodDogdmFsdWVPckRlZmF1bHQob3B0aW9ucy53ZWlnaHQsIGZhbGxiYWNrLndlaWdodCksXG4gICAgc3RyaW5nOiAnJ1xuICB9O1xuICBmb250LnN0cmluZyA9IHRvRm9udFN0cmluZyhmb250KTtcbiAgcmV0dXJuIGZvbnQ7XG59XG5mdW5jdGlvbiByZXNvbHZlKGlucHV0cywgY29udGV4dCwgaW5kZXgsIGluZm8pIHtcbiAgbGV0IGNhY2hlYWJsZSA9IHRydWU7XG4gIGxldCBpLCBpbGVuLCB2YWx1ZTtcbiAgZm9yIChpID0gMCwgaWxlbiA9IGlucHV0cy5sZW5ndGg7IGkgPCBpbGVuOyArK2kpIHtcbiAgICB2YWx1ZSA9IGlucHV0c1tpXTtcbiAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIGlmIChjb250ZXh0ICE9PSB1bmRlZmluZWQgJiYgdHlwZW9mIHZhbHVlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICB2YWx1ZSA9IHZhbHVlKGNvbnRleHQpO1xuICAgICAgY2FjaGVhYmxlID0gZmFsc2U7XG4gICAgfVxuICAgIGlmIChpbmRleCAhPT0gdW5kZWZpbmVkICYmIGlzQXJyYXkodmFsdWUpKSB7XG4gICAgICB2YWx1ZSA9IHZhbHVlW2luZGV4ICUgdmFsdWUubGVuZ3RoXTtcbiAgICAgIGNhY2hlYWJsZSA9IGZhbHNlO1xuICAgIH1cbiAgICBpZiAodmFsdWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgaWYgKGluZm8gJiYgIWNhY2hlYWJsZSkge1xuICAgICAgICBpbmZvLmNhY2hlYWJsZSA9IGZhbHNlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cbiAgfVxufVxuZnVuY3Rpb24gX2FkZEdyYWNlKG1pbm1heCwgZ3JhY2UsIGJlZ2luQXRaZXJvKSB7XG4gIGNvbnN0IHttaW4sIG1heH0gPSBtaW5tYXg7XG4gIGNvbnN0IGNoYW5nZSA9IHRvRGltZW5zaW9uKGdyYWNlLCAobWF4IC0gbWluKSAvIDIpO1xuICBjb25zdCBrZWVwWmVybyA9ICh2YWx1ZSwgYWRkKSA9PiBiZWdpbkF0WmVybyAmJiB2YWx1ZSA9PT0gMCA/IDAgOiB2YWx1ZSArIGFkZDtcbiAgcmV0dXJuIHtcbiAgICBtaW46IGtlZXBaZXJvKG1pbiwgLU1hdGguYWJzKGNoYW5nZSkpLFxuICAgIG1heDoga2VlcFplcm8obWF4LCBjaGFuZ2UpXG4gIH07XG59XG5mdW5jdGlvbiBjcmVhdGVDb250ZXh0KHBhcmVudENvbnRleHQsIGNvbnRleHQpIHtcbiAgcmV0dXJuIE9iamVjdC5hc3NpZ24oT2JqZWN0LmNyZWF0ZShwYXJlbnRDb250ZXh0KSwgY29udGV4dCk7XG59XG5cbmZ1bmN0aW9uIF9sb29rdXAodGFibGUsIHZhbHVlLCBjbXApIHtcbiAgY21wID0gY21wIHx8ICgoaW5kZXgpID0+IHRhYmxlW2luZGV4XSA8IHZhbHVlKTtcbiAgbGV0IGhpID0gdGFibGUubGVuZ3RoIC0gMTtcbiAgbGV0IGxvID0gMDtcbiAgbGV0IG1pZDtcbiAgd2hpbGUgKGhpIC0gbG8gPiAxKSB7XG4gICAgbWlkID0gKGxvICsgaGkpID4+IDE7XG4gICAgaWYgKGNtcChtaWQpKSB7XG4gICAgICBsbyA9IG1pZDtcbiAgICB9IGVsc2Uge1xuICAgICAgaGkgPSBtaWQ7XG4gICAgfVxuICB9XG4gIHJldHVybiB7bG8sIGhpfTtcbn1cbmNvbnN0IF9sb29rdXBCeUtleSA9ICh0YWJsZSwga2V5LCB2YWx1ZSkgPT5cbiAgX2xvb2t1cCh0YWJsZSwgdmFsdWUsIGluZGV4ID0+IHRhYmxlW2luZGV4XVtrZXldIDwgdmFsdWUpO1xuY29uc3QgX3Jsb29rdXBCeUtleSA9ICh0YWJsZSwga2V5LCB2YWx1ZSkgPT5cbiAgX2xvb2t1cCh0YWJsZSwgdmFsdWUsIGluZGV4ID0+IHRhYmxlW2luZGV4XVtrZXldID49IHZhbHVlKTtcbmZ1bmN0aW9uIF9maWx0ZXJCZXR3ZWVuKHZhbHVlcywgbWluLCBtYXgpIHtcbiAgbGV0IHN0YXJ0ID0gMDtcbiAgbGV0IGVuZCA9IHZhbHVlcy5sZW5ndGg7XG4gIHdoaWxlIChzdGFydCA8IGVuZCAmJiB2YWx1ZXNbc3RhcnRdIDwgbWluKSB7XG4gICAgc3RhcnQrKztcbiAgfVxuICB3aGlsZSAoZW5kID4gc3RhcnQgJiYgdmFsdWVzW2VuZCAtIDFdID4gbWF4KSB7XG4gICAgZW5kLS07XG4gIH1cbiAgcmV0dXJuIHN0YXJ0ID4gMCB8fCBlbmQgPCB2YWx1ZXMubGVuZ3RoXG4gICAgPyB2YWx1ZXMuc2xpY2Uoc3RhcnQsIGVuZClcbiAgICA6IHZhbHVlcztcbn1cbmNvbnN0IGFycmF5RXZlbnRzID0gWydwdXNoJywgJ3BvcCcsICdzaGlmdCcsICdzcGxpY2UnLCAndW5zaGlmdCddO1xuZnVuY3Rpb24gbGlzdGVuQXJyYXlFdmVudHMoYXJyYXksIGxpc3RlbmVyKSB7XG4gIGlmIChhcnJheS5fY2hhcnRqcykge1xuICAgIGFycmF5Ll9jaGFydGpzLmxpc3RlbmVycy5wdXNoKGxpc3RlbmVyKTtcbiAgICByZXR1cm47XG4gIH1cbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGFycmF5LCAnX2NoYXJ0anMnLCB7XG4gICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgIHZhbHVlOiB7XG4gICAgICBsaXN0ZW5lcnM6IFtsaXN0ZW5lcl1cbiAgICB9XG4gIH0pO1xuICBhcnJheUV2ZW50cy5mb3JFYWNoKChrZXkpID0+IHtcbiAgICBjb25zdCBtZXRob2QgPSAnX29uRGF0YScgKyBfY2FwaXRhbGl6ZShrZXkpO1xuICAgIGNvbnN0IGJhc2UgPSBhcnJheVtrZXldO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShhcnJheSwga2V5LCB7XG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgIHZhbHVlKC4uLmFyZ3MpIHtcbiAgICAgICAgY29uc3QgcmVzID0gYmFzZS5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICAgICAgYXJyYXkuX2NoYXJ0anMubGlzdGVuZXJzLmZvckVhY2goKG9iamVjdCkgPT4ge1xuICAgICAgICAgIGlmICh0eXBlb2Ygb2JqZWN0W21ldGhvZF0gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIG9iamVjdFttZXRob2RdKC4uLmFyZ3MpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiByZXM7XG4gICAgICB9XG4gICAgfSk7XG4gIH0pO1xufVxuZnVuY3Rpb24gdW5saXN0ZW5BcnJheUV2ZW50cyhhcnJheSwgbGlzdGVuZXIpIHtcbiAgY29uc3Qgc3R1YiA9IGFycmF5Ll9jaGFydGpzO1xuICBpZiAoIXN0dWIpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgY29uc3QgbGlzdGVuZXJzID0gc3R1Yi5saXN0ZW5lcnM7XG4gIGNvbnN0IGluZGV4ID0gbGlzdGVuZXJzLmluZGV4T2YobGlzdGVuZXIpO1xuICBpZiAoaW5kZXggIT09IC0xKSB7XG4gICAgbGlzdGVuZXJzLnNwbGljZShpbmRleCwgMSk7XG4gIH1cbiAgaWYgKGxpc3RlbmVycy5sZW5ndGggPiAwKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGFycmF5RXZlbnRzLmZvckVhY2goKGtleSkgPT4ge1xuICAgIGRlbGV0ZSBhcnJheVtrZXldO1xuICB9KTtcbiAgZGVsZXRlIGFycmF5Ll9jaGFydGpzO1xufVxuZnVuY3Rpb24gX2FycmF5VW5pcXVlKGl0ZW1zKSB7XG4gIGNvbnN0IHNldCA9IG5ldyBTZXQoKTtcbiAgbGV0IGksIGlsZW47XG4gIGZvciAoaSA9IDAsIGlsZW4gPSBpdGVtcy5sZW5ndGg7IGkgPCBpbGVuOyArK2kpIHtcbiAgICBzZXQuYWRkKGl0ZW1zW2ldKTtcbiAgfVxuICBpZiAoc2V0LnNpemUgPT09IGlsZW4pIHtcbiAgICByZXR1cm4gaXRlbXM7XG4gIH1cbiAgcmV0dXJuIEFycmF5LmZyb20oc2V0KTtcbn1cblxuZnVuY3Rpb24gX2NyZWF0ZVJlc29sdmVyKHNjb3BlcywgcHJlZml4ZXMgPSBbJyddLCByb290U2NvcGVzID0gc2NvcGVzLCBmYWxsYmFjaywgZ2V0VGFyZ2V0ID0gKCkgPT4gc2NvcGVzWzBdKSB7XG4gIGlmICghZGVmaW5lZChmYWxsYmFjaykpIHtcbiAgICBmYWxsYmFjayA9IF9yZXNvbHZlKCdfZmFsbGJhY2snLCBzY29wZXMpO1xuICB9XG4gIGNvbnN0IGNhY2hlID0ge1xuICAgIFtTeW1ib2wudG9TdHJpbmdUYWddOiAnT2JqZWN0JyxcbiAgICBfY2FjaGVhYmxlOiB0cnVlLFxuICAgIF9zY29wZXM6IHNjb3BlcyxcbiAgICBfcm9vdFNjb3Blczogcm9vdFNjb3BlcyxcbiAgICBfZmFsbGJhY2s6IGZhbGxiYWNrLFxuICAgIF9nZXRUYXJnZXQ6IGdldFRhcmdldCxcbiAgICBvdmVycmlkZTogKHNjb3BlKSA9PiBfY3JlYXRlUmVzb2x2ZXIoW3Njb3BlLCAuLi5zY29wZXNdLCBwcmVmaXhlcywgcm9vdFNjb3BlcywgZmFsbGJhY2spLFxuICB9O1xuICByZXR1cm4gbmV3IFByb3h5KGNhY2hlLCB7XG4gICAgZGVsZXRlUHJvcGVydHkodGFyZ2V0LCBwcm9wKSB7XG4gICAgICBkZWxldGUgdGFyZ2V0W3Byb3BdO1xuICAgICAgZGVsZXRlIHRhcmdldC5fa2V5cztcbiAgICAgIGRlbGV0ZSBzY29wZXNbMF1bcHJvcF07XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9LFxuICAgIGdldCh0YXJnZXQsIHByb3ApIHtcbiAgICAgIHJldHVybiBfY2FjaGVkKHRhcmdldCwgcHJvcCxcbiAgICAgICAgKCkgPT4gX3Jlc29sdmVXaXRoUHJlZml4ZXMocHJvcCwgcHJlZml4ZXMsIHNjb3BlcywgdGFyZ2V0KSk7XG4gICAgfSxcbiAgICBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBwcm9wKSB7XG4gICAgICByZXR1cm4gUmVmbGVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0Ll9zY29wZXNbMF0sIHByb3ApO1xuICAgIH0sXG4gICAgZ2V0UHJvdG90eXBlT2YoKSB7XG4gICAgICByZXR1cm4gUmVmbGVjdC5nZXRQcm90b3R5cGVPZihzY29wZXNbMF0pO1xuICAgIH0sXG4gICAgaGFzKHRhcmdldCwgcHJvcCkge1xuICAgICAgcmV0dXJuIGdldEtleXNGcm9tQWxsU2NvcGVzKHRhcmdldCkuaW5jbHVkZXMocHJvcCk7XG4gICAgfSxcbiAgICBvd25LZXlzKHRhcmdldCkge1xuICAgICAgcmV0dXJuIGdldEtleXNGcm9tQWxsU2NvcGVzKHRhcmdldCk7XG4gICAgfSxcbiAgICBzZXQodGFyZ2V0LCBwcm9wLCB2YWx1ZSkge1xuICAgICAgY29uc3Qgc3RvcmFnZSA9IHRhcmdldC5fc3RvcmFnZSB8fCAodGFyZ2V0Ll9zdG9yYWdlID0gZ2V0VGFyZ2V0KCkpO1xuICAgICAgdGFyZ2V0W3Byb3BdID0gc3RvcmFnZVtwcm9wXSA9IHZhbHVlO1xuICAgICAgZGVsZXRlIHRhcmdldC5fa2V5cztcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfSk7XG59XG5mdW5jdGlvbiBfYXR0YWNoQ29udGV4dChwcm94eSwgY29udGV4dCwgc3ViUHJveHksIGRlc2NyaXB0b3JEZWZhdWx0cykge1xuICBjb25zdCBjYWNoZSA9IHtcbiAgICBfY2FjaGVhYmxlOiBmYWxzZSxcbiAgICBfcHJveHk6IHByb3h5LFxuICAgIF9jb250ZXh0OiBjb250ZXh0LFxuICAgIF9zdWJQcm94eTogc3ViUHJveHksXG4gICAgX3N0YWNrOiBuZXcgU2V0KCksXG4gICAgX2Rlc2NyaXB0b3JzOiBfZGVzY3JpcHRvcnMocHJveHksIGRlc2NyaXB0b3JEZWZhdWx0cyksXG4gICAgc2V0Q29udGV4dDogKGN0eCkgPT4gX2F0dGFjaENvbnRleHQocHJveHksIGN0eCwgc3ViUHJveHksIGRlc2NyaXB0b3JEZWZhdWx0cyksXG4gICAgb3ZlcnJpZGU6IChzY29wZSkgPT4gX2F0dGFjaENvbnRleHQocHJveHkub3ZlcnJpZGUoc2NvcGUpLCBjb250ZXh0LCBzdWJQcm94eSwgZGVzY3JpcHRvckRlZmF1bHRzKVxuICB9O1xuICByZXR1cm4gbmV3IFByb3h5KGNhY2hlLCB7XG4gICAgZGVsZXRlUHJvcGVydHkodGFyZ2V0LCBwcm9wKSB7XG4gICAgICBkZWxldGUgdGFyZ2V0W3Byb3BdO1xuICAgICAgZGVsZXRlIHByb3h5W3Byb3BdO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSxcbiAgICBnZXQodGFyZ2V0LCBwcm9wLCByZWNlaXZlcikge1xuICAgICAgcmV0dXJuIF9jYWNoZWQodGFyZ2V0LCBwcm9wLFxuICAgICAgICAoKSA9PiBfcmVzb2x2ZVdpdGhDb250ZXh0KHRhcmdldCwgcHJvcCwgcmVjZWl2ZXIpKTtcbiAgICB9LFxuICAgIGdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIHByb3ApIHtcbiAgICAgIHJldHVybiB0YXJnZXQuX2Rlc2NyaXB0b3JzLmFsbEtleXNcbiAgICAgICAgPyBSZWZsZWN0Lmhhcyhwcm94eSwgcHJvcCkgPyB7ZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlfSA6IHVuZGVmaW5lZFxuICAgICAgICA6IFJlZmxlY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHByb3h5LCBwcm9wKTtcbiAgICB9LFxuICAgIGdldFByb3RvdHlwZU9mKCkge1xuICAgICAgcmV0dXJuIFJlZmxlY3QuZ2V0UHJvdG90eXBlT2YocHJveHkpO1xuICAgIH0sXG4gICAgaGFzKHRhcmdldCwgcHJvcCkge1xuICAgICAgcmV0dXJuIFJlZmxlY3QuaGFzKHByb3h5LCBwcm9wKTtcbiAgICB9LFxuICAgIG93bktleXMoKSB7XG4gICAgICByZXR1cm4gUmVmbGVjdC5vd25LZXlzKHByb3h5KTtcbiAgICB9LFxuICAgIHNldCh0YXJnZXQsIHByb3AsIHZhbHVlKSB7XG4gICAgICBwcm94eVtwcm9wXSA9IHZhbHVlO1xuICAgICAgZGVsZXRlIHRhcmdldFtwcm9wXTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfSk7XG59XG5mdW5jdGlvbiBfZGVzY3JpcHRvcnMocHJveHksIGRlZmF1bHRzID0ge3NjcmlwdGFibGU6IHRydWUsIGluZGV4YWJsZTogdHJ1ZX0pIHtcbiAgY29uc3Qge19zY3JpcHRhYmxlID0gZGVmYXVsdHMuc2NyaXB0YWJsZSwgX2luZGV4YWJsZSA9IGRlZmF1bHRzLmluZGV4YWJsZSwgX2FsbEtleXMgPSBkZWZhdWx0cy5hbGxLZXlzfSA9IHByb3h5O1xuICByZXR1cm4ge1xuICAgIGFsbEtleXM6IF9hbGxLZXlzLFxuICAgIHNjcmlwdGFibGU6IF9zY3JpcHRhYmxlLFxuICAgIGluZGV4YWJsZTogX2luZGV4YWJsZSxcbiAgICBpc1NjcmlwdGFibGU6IGlzRnVuY3Rpb24oX3NjcmlwdGFibGUpID8gX3NjcmlwdGFibGUgOiAoKSA9PiBfc2NyaXB0YWJsZSxcbiAgICBpc0luZGV4YWJsZTogaXNGdW5jdGlvbihfaW5kZXhhYmxlKSA/IF9pbmRleGFibGUgOiAoKSA9PiBfaW5kZXhhYmxlXG4gIH07XG59XG5jb25zdCByZWFkS2V5ID0gKHByZWZpeCwgbmFtZSkgPT4gcHJlZml4ID8gcHJlZml4ICsgX2NhcGl0YWxpemUobmFtZSkgOiBuYW1lO1xuY29uc3QgbmVlZHNTdWJSZXNvbHZlciA9IChwcm9wLCB2YWx1ZSkgPT4gaXNPYmplY3QodmFsdWUpICYmIHByb3AgIT09ICdhZGFwdGVycycgJiZcbiAgKE9iamVjdC5nZXRQcm90b3R5cGVPZih2YWx1ZSkgPT09IG51bGwgfHwgdmFsdWUuY29uc3RydWN0b3IgPT09IE9iamVjdCk7XG5mdW5jdGlvbiBfY2FjaGVkKHRhcmdldCwgcHJvcCwgcmVzb2x2ZSkge1xuICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHRhcmdldCwgcHJvcCkpIHtcbiAgICByZXR1cm4gdGFyZ2V0W3Byb3BdO1xuICB9XG4gIGNvbnN0IHZhbHVlID0gcmVzb2x2ZSgpO1xuICB0YXJnZXRbcHJvcF0gPSB2YWx1ZTtcbiAgcmV0dXJuIHZhbHVlO1xufVxuZnVuY3Rpb24gX3Jlc29sdmVXaXRoQ29udGV4dCh0YXJnZXQsIHByb3AsIHJlY2VpdmVyKSB7XG4gIGNvbnN0IHtfcHJveHksIF9jb250ZXh0LCBfc3ViUHJveHksIF9kZXNjcmlwdG9yczogZGVzY3JpcHRvcnN9ID0gdGFyZ2V0O1xuICBsZXQgdmFsdWUgPSBfcHJveHlbcHJvcF07XG4gIGlmIChpc0Z1bmN0aW9uKHZhbHVlKSAmJiBkZXNjcmlwdG9ycy5pc1NjcmlwdGFibGUocHJvcCkpIHtcbiAgICB2YWx1ZSA9IF9yZXNvbHZlU2NyaXB0YWJsZShwcm9wLCB2YWx1ZSwgdGFyZ2V0LCByZWNlaXZlcik7XG4gIH1cbiAgaWYgKGlzQXJyYXkodmFsdWUpICYmIHZhbHVlLmxlbmd0aCkge1xuICAgIHZhbHVlID0gX3Jlc29sdmVBcnJheShwcm9wLCB2YWx1ZSwgdGFyZ2V0LCBkZXNjcmlwdG9ycy5pc0luZGV4YWJsZSk7XG4gIH1cbiAgaWYgKG5lZWRzU3ViUmVzb2x2ZXIocHJvcCwgdmFsdWUpKSB7XG4gICAgdmFsdWUgPSBfYXR0YWNoQ29udGV4dCh2YWx1ZSwgX2NvbnRleHQsIF9zdWJQcm94eSAmJiBfc3ViUHJveHlbcHJvcF0sIGRlc2NyaXB0b3JzKTtcbiAgfVxuICByZXR1cm4gdmFsdWU7XG59XG5mdW5jdGlvbiBfcmVzb2x2ZVNjcmlwdGFibGUocHJvcCwgdmFsdWUsIHRhcmdldCwgcmVjZWl2ZXIpIHtcbiAgY29uc3Qge19wcm94eSwgX2NvbnRleHQsIF9zdWJQcm94eSwgX3N0YWNrfSA9IHRhcmdldDtcbiAgaWYgKF9zdGFjay5oYXMocHJvcCkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1JlY3Vyc2lvbiBkZXRlY3RlZDogJyArIEFycmF5LmZyb20oX3N0YWNrKS5qb2luKCctPicpICsgJy0+JyArIHByb3ApO1xuICB9XG4gIF9zdGFjay5hZGQocHJvcCk7XG4gIHZhbHVlID0gdmFsdWUoX2NvbnRleHQsIF9zdWJQcm94eSB8fCByZWNlaXZlcik7XG4gIF9zdGFjay5kZWxldGUocHJvcCk7XG4gIGlmIChuZWVkc1N1YlJlc29sdmVyKHByb3AsIHZhbHVlKSkge1xuICAgIHZhbHVlID0gY3JlYXRlU3ViUmVzb2x2ZXIoX3Byb3h5Ll9zY29wZXMsIF9wcm94eSwgcHJvcCwgdmFsdWUpO1xuICB9XG4gIHJldHVybiB2YWx1ZTtcbn1cbmZ1bmN0aW9uIF9yZXNvbHZlQXJyYXkocHJvcCwgdmFsdWUsIHRhcmdldCwgaXNJbmRleGFibGUpIHtcbiAgY29uc3Qge19wcm94eSwgX2NvbnRleHQsIF9zdWJQcm94eSwgX2Rlc2NyaXB0b3JzOiBkZXNjcmlwdG9yc30gPSB0YXJnZXQ7XG4gIGlmIChkZWZpbmVkKF9jb250ZXh0LmluZGV4KSAmJiBpc0luZGV4YWJsZShwcm9wKSkge1xuICAgIHZhbHVlID0gdmFsdWVbX2NvbnRleHQuaW5kZXggJSB2YWx1ZS5sZW5ndGhdO1xuICB9IGVsc2UgaWYgKGlzT2JqZWN0KHZhbHVlWzBdKSkge1xuICAgIGNvbnN0IGFyciA9IHZhbHVlO1xuICAgIGNvbnN0IHNjb3BlcyA9IF9wcm94eS5fc2NvcGVzLmZpbHRlcihzID0+IHMgIT09IGFycik7XG4gICAgdmFsdWUgPSBbXTtcbiAgICBmb3IgKGNvbnN0IGl0ZW0gb2YgYXJyKSB7XG4gICAgICBjb25zdCByZXNvbHZlciA9IGNyZWF0ZVN1YlJlc29sdmVyKHNjb3BlcywgX3Byb3h5LCBwcm9wLCBpdGVtKTtcbiAgICAgIHZhbHVlLnB1c2goX2F0dGFjaENvbnRleHQocmVzb2x2ZXIsIF9jb250ZXh0LCBfc3ViUHJveHkgJiYgX3N1YlByb3h5W3Byb3BdLCBkZXNjcmlwdG9ycykpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdmFsdWU7XG59XG5mdW5jdGlvbiByZXNvbHZlRmFsbGJhY2soZmFsbGJhY2ssIHByb3AsIHZhbHVlKSB7XG4gIHJldHVybiBpc0Z1bmN0aW9uKGZhbGxiYWNrKSA/IGZhbGxiYWNrKHByb3AsIHZhbHVlKSA6IGZhbGxiYWNrO1xufVxuY29uc3QgZ2V0U2NvcGUgPSAoa2V5LCBwYXJlbnQpID0+IGtleSA9PT0gdHJ1ZSA/IHBhcmVudFxuICA6IHR5cGVvZiBrZXkgPT09ICdzdHJpbmcnID8gcmVzb2x2ZU9iamVjdEtleShwYXJlbnQsIGtleSkgOiB1bmRlZmluZWQ7XG5mdW5jdGlvbiBhZGRTY29wZXMoc2V0LCBwYXJlbnRTY29wZXMsIGtleSwgcGFyZW50RmFsbGJhY2ssIHZhbHVlKSB7XG4gIGZvciAoY29uc3QgcGFyZW50IG9mIHBhcmVudFNjb3Blcykge1xuICAgIGNvbnN0IHNjb3BlID0gZ2V0U2NvcGUoa2V5LCBwYXJlbnQpO1xuICAgIGlmIChzY29wZSkge1xuICAgICAgc2V0LmFkZChzY29wZSk7XG4gICAgICBjb25zdCBmYWxsYmFjayA9IHJlc29sdmVGYWxsYmFjayhzY29wZS5fZmFsbGJhY2ssIGtleSwgdmFsdWUpO1xuICAgICAgaWYgKGRlZmluZWQoZmFsbGJhY2spICYmIGZhbGxiYWNrICE9PSBrZXkgJiYgZmFsbGJhY2sgIT09IHBhcmVudEZhbGxiYWNrKSB7XG4gICAgICAgIHJldHVybiBmYWxsYmFjaztcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHNjb3BlID09PSBmYWxzZSAmJiBkZWZpbmVkKHBhcmVudEZhbGxiYWNrKSAmJiBrZXkgIT09IHBhcmVudEZhbGxiYWNrKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxuZnVuY3Rpb24gY3JlYXRlU3ViUmVzb2x2ZXIocGFyZW50U2NvcGVzLCByZXNvbHZlciwgcHJvcCwgdmFsdWUpIHtcbiAgY29uc3Qgcm9vdFNjb3BlcyA9IHJlc29sdmVyLl9yb290U2NvcGVzO1xuICBjb25zdCBmYWxsYmFjayA9IHJlc29sdmVGYWxsYmFjayhyZXNvbHZlci5fZmFsbGJhY2ssIHByb3AsIHZhbHVlKTtcbiAgY29uc3QgYWxsU2NvcGVzID0gWy4uLnBhcmVudFNjb3BlcywgLi4ucm9vdFNjb3Blc107XG4gIGNvbnN0IHNldCA9IG5ldyBTZXQoKTtcbiAgc2V0LmFkZCh2YWx1ZSk7XG4gIGxldCBrZXkgPSBhZGRTY29wZXNGcm9tS2V5KHNldCwgYWxsU2NvcGVzLCBwcm9wLCBmYWxsYmFjayB8fCBwcm9wLCB2YWx1ZSk7XG4gIGlmIChrZXkgPT09IG51bGwpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgaWYgKGRlZmluZWQoZmFsbGJhY2spICYmIGZhbGxiYWNrICE9PSBwcm9wKSB7XG4gICAga2V5ID0gYWRkU2NvcGVzRnJvbUtleShzZXQsIGFsbFNjb3BlcywgZmFsbGJhY2ssIGtleSwgdmFsdWUpO1xuICAgIGlmIChrZXkgPT09IG51bGwpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIF9jcmVhdGVSZXNvbHZlcihBcnJheS5mcm9tKHNldCksIFsnJ10sIHJvb3RTY29wZXMsIGZhbGxiYWNrLFxuICAgICgpID0+IHN1YkdldFRhcmdldChyZXNvbHZlciwgcHJvcCwgdmFsdWUpKTtcbn1cbmZ1bmN0aW9uIGFkZFNjb3Blc0Zyb21LZXkoc2V0LCBhbGxTY29wZXMsIGtleSwgZmFsbGJhY2ssIGl0ZW0pIHtcbiAgd2hpbGUgKGtleSkge1xuICAgIGtleSA9IGFkZFNjb3BlcyhzZXQsIGFsbFNjb3Blcywga2V5LCBmYWxsYmFjaywgaXRlbSk7XG4gIH1cbiAgcmV0dXJuIGtleTtcbn1cbmZ1bmN0aW9uIHN1YkdldFRhcmdldChyZXNvbHZlciwgcHJvcCwgdmFsdWUpIHtcbiAgY29uc3QgcGFyZW50ID0gcmVzb2x2ZXIuX2dldFRhcmdldCgpO1xuICBpZiAoIShwcm9wIGluIHBhcmVudCkpIHtcbiAgICBwYXJlbnRbcHJvcF0gPSB7fTtcbiAgfVxuICBjb25zdCB0YXJnZXQgPSBwYXJlbnRbcHJvcF07XG4gIGlmIChpc0FycmF5KHRhcmdldCkgJiYgaXNPYmplY3QodmFsdWUpKSB7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG4gIHJldHVybiB0YXJnZXQ7XG59XG5mdW5jdGlvbiBfcmVzb2x2ZVdpdGhQcmVmaXhlcyhwcm9wLCBwcmVmaXhlcywgc2NvcGVzLCBwcm94eSkge1xuICBsZXQgdmFsdWU7XG4gIGZvciAoY29uc3QgcHJlZml4IG9mIHByZWZpeGVzKSB7XG4gICAgdmFsdWUgPSBfcmVzb2x2ZShyZWFkS2V5KHByZWZpeCwgcHJvcCksIHNjb3Blcyk7XG4gICAgaWYgKGRlZmluZWQodmFsdWUpKSB7XG4gICAgICByZXR1cm4gbmVlZHNTdWJSZXNvbHZlcihwcm9wLCB2YWx1ZSlcbiAgICAgICAgPyBjcmVhdGVTdWJSZXNvbHZlcihzY29wZXMsIHByb3h5LCBwcm9wLCB2YWx1ZSlcbiAgICAgICAgOiB2YWx1ZTtcbiAgICB9XG4gIH1cbn1cbmZ1bmN0aW9uIF9yZXNvbHZlKGtleSwgc2NvcGVzKSB7XG4gIGZvciAoY29uc3Qgc2NvcGUgb2Ygc2NvcGVzKSB7XG4gICAgaWYgKCFzY29wZSkge1xuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIGNvbnN0IHZhbHVlID0gc2NvcGVba2V5XTtcbiAgICBpZiAoZGVmaW5lZCh2YWx1ZSkpIHtcbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG4gIH1cbn1cbmZ1bmN0aW9uIGdldEtleXNGcm9tQWxsU2NvcGVzKHRhcmdldCkge1xuICBsZXQga2V5cyA9IHRhcmdldC5fa2V5cztcbiAgaWYgKCFrZXlzKSB7XG4gICAga2V5cyA9IHRhcmdldC5fa2V5cyA9IHJlc29sdmVLZXlzRnJvbUFsbFNjb3Blcyh0YXJnZXQuX3Njb3Blcyk7XG4gIH1cbiAgcmV0dXJuIGtleXM7XG59XG5mdW5jdGlvbiByZXNvbHZlS2V5c0Zyb21BbGxTY29wZXMoc2NvcGVzKSB7XG4gIGNvbnN0IHNldCA9IG5ldyBTZXQoKTtcbiAgZm9yIChjb25zdCBzY29wZSBvZiBzY29wZXMpIHtcbiAgICBmb3IgKGNvbnN0IGtleSBvZiBPYmplY3Qua2V5cyhzY29wZSkuZmlsdGVyKGsgPT4gIWsuc3RhcnRzV2l0aCgnXycpKSkge1xuICAgICAgc2V0LmFkZChrZXkpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gQXJyYXkuZnJvbShzZXQpO1xufVxuXG5jb25zdCBFUFNJTE9OID0gTnVtYmVyLkVQU0lMT04gfHwgMWUtMTQ7XG5jb25zdCBnZXRQb2ludCA9IChwb2ludHMsIGkpID0+IGkgPCBwb2ludHMubGVuZ3RoICYmICFwb2ludHNbaV0uc2tpcCAmJiBwb2ludHNbaV07XG5jb25zdCBnZXRWYWx1ZUF4aXMgPSAoaW5kZXhBeGlzKSA9PiBpbmRleEF4aXMgPT09ICd4JyA/ICd5JyA6ICd4JztcbmZ1bmN0aW9uIHNwbGluZUN1cnZlKGZpcnN0UG9pbnQsIG1pZGRsZVBvaW50LCBhZnRlclBvaW50LCB0KSB7XG4gIGNvbnN0IHByZXZpb3VzID0gZmlyc3RQb2ludC5za2lwID8gbWlkZGxlUG9pbnQgOiBmaXJzdFBvaW50O1xuICBjb25zdCBjdXJyZW50ID0gbWlkZGxlUG9pbnQ7XG4gIGNvbnN0IG5leHQgPSBhZnRlclBvaW50LnNraXAgPyBtaWRkbGVQb2ludCA6IGFmdGVyUG9pbnQ7XG4gIGNvbnN0IGQwMSA9IGRpc3RhbmNlQmV0d2VlblBvaW50cyhjdXJyZW50LCBwcmV2aW91cyk7XG4gIGNvbnN0IGQxMiA9IGRpc3RhbmNlQmV0d2VlblBvaW50cyhuZXh0LCBjdXJyZW50KTtcbiAgbGV0IHMwMSA9IGQwMSAvIChkMDEgKyBkMTIpO1xuICBsZXQgczEyID0gZDEyIC8gKGQwMSArIGQxMik7XG4gIHMwMSA9IGlzTmFOKHMwMSkgPyAwIDogczAxO1xuICBzMTIgPSBpc05hTihzMTIpID8gMCA6IHMxMjtcbiAgY29uc3QgZmEgPSB0ICogczAxO1xuICBjb25zdCBmYiA9IHQgKiBzMTI7XG4gIHJldHVybiB7XG4gICAgcHJldmlvdXM6IHtcbiAgICAgIHg6IGN1cnJlbnQueCAtIGZhICogKG5leHQueCAtIHByZXZpb3VzLngpLFxuICAgICAgeTogY3VycmVudC55IC0gZmEgKiAobmV4dC55IC0gcHJldmlvdXMueSlcbiAgICB9LFxuICAgIG5leHQ6IHtcbiAgICAgIHg6IGN1cnJlbnQueCArIGZiICogKG5leHQueCAtIHByZXZpb3VzLngpLFxuICAgICAgeTogY3VycmVudC55ICsgZmIgKiAobmV4dC55IC0gcHJldmlvdXMueSlcbiAgICB9XG4gIH07XG59XG5mdW5jdGlvbiBtb25vdG9uZUFkanVzdChwb2ludHMsIGRlbHRhSywgbUspIHtcbiAgY29uc3QgcG9pbnRzTGVuID0gcG9pbnRzLmxlbmd0aDtcbiAgbGV0IGFscGhhSywgYmV0YUssIHRhdUssIHNxdWFyZWRNYWduaXR1ZGUsIHBvaW50Q3VycmVudDtcbiAgbGV0IHBvaW50QWZ0ZXIgPSBnZXRQb2ludChwb2ludHMsIDApO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IHBvaW50c0xlbiAtIDE7ICsraSkge1xuICAgIHBvaW50Q3VycmVudCA9IHBvaW50QWZ0ZXI7XG4gICAgcG9pbnRBZnRlciA9IGdldFBvaW50KHBvaW50cywgaSArIDEpO1xuICAgIGlmICghcG9pbnRDdXJyZW50IHx8ICFwb2ludEFmdGVyKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgaWYgKGFsbW9zdEVxdWFscyhkZWx0YUtbaV0sIDAsIEVQU0lMT04pKSB7XG4gICAgICBtS1tpXSA9IG1LW2kgKyAxXSA9IDA7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgYWxwaGFLID0gbUtbaV0gLyBkZWx0YUtbaV07XG4gICAgYmV0YUsgPSBtS1tpICsgMV0gLyBkZWx0YUtbaV07XG4gICAgc3F1YXJlZE1hZ25pdHVkZSA9IE1hdGgucG93KGFscGhhSywgMikgKyBNYXRoLnBvdyhiZXRhSywgMik7XG4gICAgaWYgKHNxdWFyZWRNYWduaXR1ZGUgPD0gOSkge1xuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIHRhdUsgPSAzIC8gTWF0aC5zcXJ0KHNxdWFyZWRNYWduaXR1ZGUpO1xuICAgIG1LW2ldID0gYWxwaGFLICogdGF1SyAqIGRlbHRhS1tpXTtcbiAgICBtS1tpICsgMV0gPSBiZXRhSyAqIHRhdUsgKiBkZWx0YUtbaV07XG4gIH1cbn1cbmZ1bmN0aW9uIG1vbm90b25lQ29tcHV0ZShwb2ludHMsIG1LLCBpbmRleEF4aXMgPSAneCcpIHtcbiAgY29uc3QgdmFsdWVBeGlzID0gZ2V0VmFsdWVBeGlzKGluZGV4QXhpcyk7XG4gIGNvbnN0IHBvaW50c0xlbiA9IHBvaW50cy5sZW5ndGg7XG4gIGxldCBkZWx0YSwgcG9pbnRCZWZvcmUsIHBvaW50Q3VycmVudDtcbiAgbGV0IHBvaW50QWZ0ZXIgPSBnZXRQb2ludChwb2ludHMsIDApO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IHBvaW50c0xlbjsgKytpKSB7XG4gICAgcG9pbnRCZWZvcmUgPSBwb2ludEN1cnJlbnQ7XG4gICAgcG9pbnRDdXJyZW50ID0gcG9pbnRBZnRlcjtcbiAgICBwb2ludEFmdGVyID0gZ2V0UG9pbnQocG9pbnRzLCBpICsgMSk7XG4gICAgaWYgKCFwb2ludEN1cnJlbnQpIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICBjb25zdCBpUGl4ZWwgPSBwb2ludEN1cnJlbnRbaW5kZXhBeGlzXTtcbiAgICBjb25zdCB2UGl4ZWwgPSBwb2ludEN1cnJlbnRbdmFsdWVBeGlzXTtcbiAgICBpZiAocG9pbnRCZWZvcmUpIHtcbiAgICAgIGRlbHRhID0gKGlQaXhlbCAtIHBvaW50QmVmb3JlW2luZGV4QXhpc10pIC8gMztcbiAgICAgIHBvaW50Q3VycmVudFtgY3AxJHtpbmRleEF4aXN9YF0gPSBpUGl4ZWwgLSBkZWx0YTtcbiAgICAgIHBvaW50Q3VycmVudFtgY3AxJHt2YWx1ZUF4aXN9YF0gPSB2UGl4ZWwgLSBkZWx0YSAqIG1LW2ldO1xuICAgIH1cbiAgICBpZiAocG9pbnRBZnRlcikge1xuICAgICAgZGVsdGEgPSAocG9pbnRBZnRlcltpbmRleEF4aXNdIC0gaVBpeGVsKSAvIDM7XG4gICAgICBwb2ludEN1cnJlbnRbYGNwMiR7aW5kZXhBeGlzfWBdID0gaVBpeGVsICsgZGVsdGE7XG4gICAgICBwb2ludEN1cnJlbnRbYGNwMiR7dmFsdWVBeGlzfWBdID0gdlBpeGVsICsgZGVsdGEgKiBtS1tpXTtcbiAgICB9XG4gIH1cbn1cbmZ1bmN0aW9uIHNwbGluZUN1cnZlTW9ub3RvbmUocG9pbnRzLCBpbmRleEF4aXMgPSAneCcpIHtcbiAgY29uc3QgdmFsdWVBeGlzID0gZ2V0VmFsdWVBeGlzKGluZGV4QXhpcyk7XG4gIGNvbnN0IHBvaW50c0xlbiA9IHBvaW50cy5sZW5ndGg7XG4gIGNvbnN0IGRlbHRhSyA9IEFycmF5KHBvaW50c0xlbikuZmlsbCgwKTtcbiAgY29uc3QgbUsgPSBBcnJheShwb2ludHNMZW4pO1xuICBsZXQgaSwgcG9pbnRCZWZvcmUsIHBvaW50Q3VycmVudDtcbiAgbGV0IHBvaW50QWZ0ZXIgPSBnZXRQb2ludChwb2ludHMsIDApO1xuICBmb3IgKGkgPSAwOyBpIDwgcG9pbnRzTGVuOyArK2kpIHtcbiAgICBwb2ludEJlZm9yZSA9IHBvaW50Q3VycmVudDtcbiAgICBwb2ludEN1cnJlbnQgPSBwb2ludEFmdGVyO1xuICAgIHBvaW50QWZ0ZXIgPSBnZXRQb2ludChwb2ludHMsIGkgKyAxKTtcbiAgICBpZiAoIXBvaW50Q3VycmVudCkge1xuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIGlmIChwb2ludEFmdGVyKSB7XG4gICAgICBjb25zdCBzbG9wZURlbHRhID0gcG9pbnRBZnRlcltpbmRleEF4aXNdIC0gcG9pbnRDdXJyZW50W2luZGV4QXhpc107XG4gICAgICBkZWx0YUtbaV0gPSBzbG9wZURlbHRhICE9PSAwID8gKHBvaW50QWZ0ZXJbdmFsdWVBeGlzXSAtIHBvaW50Q3VycmVudFt2YWx1ZUF4aXNdKSAvIHNsb3BlRGVsdGEgOiAwO1xuICAgIH1cbiAgICBtS1tpXSA9ICFwb2ludEJlZm9yZSA/IGRlbHRhS1tpXVxuICAgICAgOiAhcG9pbnRBZnRlciA/IGRlbHRhS1tpIC0gMV1cbiAgICAgIDogKHNpZ24oZGVsdGFLW2kgLSAxXSkgIT09IHNpZ24oZGVsdGFLW2ldKSkgPyAwXG4gICAgICA6IChkZWx0YUtbaSAtIDFdICsgZGVsdGFLW2ldKSAvIDI7XG4gIH1cbiAgbW9ub3RvbmVBZGp1c3QocG9pbnRzLCBkZWx0YUssIG1LKTtcbiAgbW9ub3RvbmVDb21wdXRlKHBvaW50cywgbUssIGluZGV4QXhpcyk7XG59XG5mdW5jdGlvbiBjYXBDb250cm9sUG9pbnQocHQsIG1pbiwgbWF4KSB7XG4gIHJldHVybiBNYXRoLm1heChNYXRoLm1pbihwdCwgbWF4KSwgbWluKTtcbn1cbmZ1bmN0aW9uIGNhcEJlemllclBvaW50cyhwb2ludHMsIGFyZWEpIHtcbiAgbGV0IGksIGlsZW4sIHBvaW50LCBpbkFyZWEsIGluQXJlYVByZXY7XG4gIGxldCBpbkFyZWFOZXh0ID0gX2lzUG9pbnRJbkFyZWEocG9pbnRzWzBdLCBhcmVhKTtcbiAgZm9yIChpID0gMCwgaWxlbiA9IHBvaW50cy5sZW5ndGg7IGkgPCBpbGVuOyArK2kpIHtcbiAgICBpbkFyZWFQcmV2ID0gaW5BcmVhO1xuICAgIGluQXJlYSA9IGluQXJlYU5leHQ7XG4gICAgaW5BcmVhTmV4dCA9IGkgPCBpbGVuIC0gMSAmJiBfaXNQb2ludEluQXJlYShwb2ludHNbaSArIDFdLCBhcmVhKTtcbiAgICBpZiAoIWluQXJlYSkge1xuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIHBvaW50ID0gcG9pbnRzW2ldO1xuICAgIGlmIChpbkFyZWFQcmV2KSB7XG4gICAgICBwb2ludC5jcDF4ID0gY2FwQ29udHJvbFBvaW50KHBvaW50LmNwMXgsIGFyZWEubGVmdCwgYXJlYS5yaWdodCk7XG4gICAgICBwb2ludC5jcDF5ID0gY2FwQ29udHJvbFBvaW50KHBvaW50LmNwMXksIGFyZWEudG9wLCBhcmVhLmJvdHRvbSk7XG4gICAgfVxuICAgIGlmIChpbkFyZWFOZXh0KSB7XG4gICAgICBwb2ludC5jcDJ4ID0gY2FwQ29udHJvbFBvaW50KHBvaW50LmNwMngsIGFyZWEubGVmdCwgYXJlYS5yaWdodCk7XG4gICAgICBwb2ludC5jcDJ5ID0gY2FwQ29udHJvbFBvaW50KHBvaW50LmNwMnksIGFyZWEudG9wLCBhcmVhLmJvdHRvbSk7XG4gICAgfVxuICB9XG59XG5mdW5jdGlvbiBfdXBkYXRlQmV6aWVyQ29udHJvbFBvaW50cyhwb2ludHMsIG9wdGlvbnMsIGFyZWEsIGxvb3AsIGluZGV4QXhpcykge1xuICBsZXQgaSwgaWxlbiwgcG9pbnQsIGNvbnRyb2xQb2ludHM7XG4gIGlmIChvcHRpb25zLnNwYW5HYXBzKSB7XG4gICAgcG9pbnRzID0gcG9pbnRzLmZpbHRlcigocHQpID0+ICFwdC5za2lwKTtcbiAgfVxuICBpZiAob3B0aW9ucy5jdWJpY0ludGVycG9sYXRpb25Nb2RlID09PSAnbW9ub3RvbmUnKSB7XG4gICAgc3BsaW5lQ3VydmVNb25vdG9uZShwb2ludHMsIGluZGV4QXhpcyk7XG4gIH0gZWxzZSB7XG4gICAgbGV0IHByZXYgPSBsb29wID8gcG9pbnRzW3BvaW50cy5sZW5ndGggLSAxXSA6IHBvaW50c1swXTtcbiAgICBmb3IgKGkgPSAwLCBpbGVuID0gcG9pbnRzLmxlbmd0aDsgaSA8IGlsZW47ICsraSkge1xuICAgICAgcG9pbnQgPSBwb2ludHNbaV07XG4gICAgICBjb250cm9sUG9pbnRzID0gc3BsaW5lQ3VydmUoXG4gICAgICAgIHByZXYsXG4gICAgICAgIHBvaW50LFxuICAgICAgICBwb2ludHNbTWF0aC5taW4oaSArIDEsIGlsZW4gLSAobG9vcCA/IDAgOiAxKSkgJSBpbGVuXSxcbiAgICAgICAgb3B0aW9ucy50ZW5zaW9uXG4gICAgICApO1xuICAgICAgcG9pbnQuY3AxeCA9IGNvbnRyb2xQb2ludHMucHJldmlvdXMueDtcbiAgICAgIHBvaW50LmNwMXkgPSBjb250cm9sUG9pbnRzLnByZXZpb3VzLnk7XG4gICAgICBwb2ludC5jcDJ4ID0gY29udHJvbFBvaW50cy5uZXh0Lng7XG4gICAgICBwb2ludC5jcDJ5ID0gY29udHJvbFBvaW50cy5uZXh0Lnk7XG4gICAgICBwcmV2ID0gcG9pbnQ7XG4gICAgfVxuICB9XG4gIGlmIChvcHRpb25zLmNhcEJlemllclBvaW50cykge1xuICAgIGNhcEJlemllclBvaW50cyhwb2ludHMsIGFyZWEpO1xuICB9XG59XG5cbmZ1bmN0aW9uIF9pc0RvbVN1cHBvcnRlZCgpIHtcbiAgcmV0dXJuIHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCc7XG59XG5mdW5jdGlvbiBfZ2V0UGFyZW50Tm9kZShkb21Ob2RlKSB7XG4gIGxldCBwYXJlbnQgPSBkb21Ob2RlLnBhcmVudE5vZGU7XG4gIGlmIChwYXJlbnQgJiYgcGFyZW50LnRvU3RyaW5nKCkgPT09ICdbb2JqZWN0IFNoYWRvd1Jvb3RdJykge1xuICAgIHBhcmVudCA9IHBhcmVudC5ob3N0O1xuICB9XG4gIHJldHVybiBwYXJlbnQ7XG59XG5mdW5jdGlvbiBwYXJzZU1heFN0eWxlKHN0eWxlVmFsdWUsIG5vZGUsIHBhcmVudFByb3BlcnR5KSB7XG4gIGxldCB2YWx1ZUluUGl4ZWxzO1xuICBpZiAodHlwZW9mIHN0eWxlVmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgdmFsdWVJblBpeGVscyA9IHBhcnNlSW50KHN0eWxlVmFsdWUsIDEwKTtcbiAgICBpZiAoc3R5bGVWYWx1ZS5pbmRleE9mKCclJykgIT09IC0xKSB7XG4gICAgICB2YWx1ZUluUGl4ZWxzID0gdmFsdWVJblBpeGVscyAvIDEwMCAqIG5vZGUucGFyZW50Tm9kZVtwYXJlbnRQcm9wZXJ0eV07XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHZhbHVlSW5QaXhlbHMgPSBzdHlsZVZhbHVlO1xuICB9XG4gIHJldHVybiB2YWx1ZUluUGl4ZWxzO1xufVxuY29uc3QgZ2V0Q29tcHV0ZWRTdHlsZSA9IChlbGVtZW50KSA9PiB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShlbGVtZW50LCBudWxsKTtcbmZ1bmN0aW9uIGdldFN0eWxlKGVsLCBwcm9wZXJ0eSkge1xuICByZXR1cm4gZ2V0Q29tcHV0ZWRTdHlsZShlbCkuZ2V0UHJvcGVydHlWYWx1ZShwcm9wZXJ0eSk7XG59XG5jb25zdCBwb3NpdGlvbnMgPSBbJ3RvcCcsICdyaWdodCcsICdib3R0b20nLCAnbGVmdCddO1xuZnVuY3Rpb24gZ2V0UG9zaXRpb25lZFN0eWxlKHN0eWxlcywgc3R5bGUsIHN1ZmZpeCkge1xuICBjb25zdCByZXN1bHQgPSB7fTtcbiAgc3VmZml4ID0gc3VmZml4ID8gJy0nICsgc3VmZml4IDogJyc7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgNDsgaSsrKSB7XG4gICAgY29uc3QgcG9zID0gcG9zaXRpb25zW2ldO1xuICAgIHJlc3VsdFtwb3NdID0gcGFyc2VGbG9hdChzdHlsZXNbc3R5bGUgKyAnLScgKyBwb3MgKyBzdWZmaXhdKSB8fCAwO1xuICB9XG4gIHJlc3VsdC53aWR0aCA9IHJlc3VsdC5sZWZ0ICsgcmVzdWx0LnJpZ2h0O1xuICByZXN1bHQuaGVpZ2h0ID0gcmVzdWx0LnRvcCArIHJlc3VsdC5ib3R0b207XG4gIHJldHVybiByZXN1bHQ7XG59XG5jb25zdCB1c2VPZmZzZXRQb3MgPSAoeCwgeSwgdGFyZ2V0KSA9PiAoeCA+IDAgfHwgeSA+IDApICYmICghdGFyZ2V0IHx8ICF0YXJnZXQuc2hhZG93Um9vdCk7XG5mdW5jdGlvbiBnZXRDYW52YXNQb3NpdGlvbihldnQsIGNhbnZhcykge1xuICBjb25zdCBlID0gZXZ0Lm5hdGl2ZSB8fCBldnQ7XG4gIGNvbnN0IHRvdWNoZXMgPSBlLnRvdWNoZXM7XG4gIGNvbnN0IHNvdXJjZSA9IHRvdWNoZXMgJiYgdG91Y2hlcy5sZW5ndGggPyB0b3VjaGVzWzBdIDogZTtcbiAgY29uc3Qge29mZnNldFgsIG9mZnNldFl9ID0gc291cmNlO1xuICBsZXQgYm94ID0gZmFsc2U7XG4gIGxldCB4LCB5O1xuICBpZiAodXNlT2Zmc2V0UG9zKG9mZnNldFgsIG9mZnNldFksIGUudGFyZ2V0KSkge1xuICAgIHggPSBvZmZzZXRYO1xuICAgIHkgPSBvZmZzZXRZO1xuICB9IGVsc2Uge1xuICAgIGNvbnN0IHJlY3QgPSBjYW52YXMuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgeCA9IHNvdXJjZS5jbGllbnRYIC0gcmVjdC5sZWZ0O1xuICAgIHkgPSBzb3VyY2UuY2xpZW50WSAtIHJlY3QudG9wO1xuICAgIGJveCA9IHRydWU7XG4gIH1cbiAgcmV0dXJuIHt4LCB5LCBib3h9O1xufVxuZnVuY3Rpb24gZ2V0UmVsYXRpdmVQb3NpdGlvbihldnQsIGNoYXJ0KSB7XG4gIGNvbnN0IHtjYW52YXMsIGN1cnJlbnREZXZpY2VQaXhlbFJhdGlvfSA9IGNoYXJ0O1xuICBjb25zdCBzdHlsZSA9IGdldENvbXB1dGVkU3R5bGUoY2FudmFzKTtcbiAgY29uc3QgYm9yZGVyQm94ID0gc3R5bGUuYm94U2l6aW5nID09PSAnYm9yZGVyLWJveCc7XG4gIGNvbnN0IHBhZGRpbmdzID0gZ2V0UG9zaXRpb25lZFN0eWxlKHN0eWxlLCAncGFkZGluZycpO1xuICBjb25zdCBib3JkZXJzID0gZ2V0UG9zaXRpb25lZFN0eWxlKHN0eWxlLCAnYm9yZGVyJywgJ3dpZHRoJyk7XG4gIGNvbnN0IHt4LCB5LCBib3h9ID0gZ2V0Q2FudmFzUG9zaXRpb24oZXZ0LCBjYW52YXMpO1xuICBjb25zdCB4T2Zmc2V0ID0gcGFkZGluZ3MubGVmdCArIChib3ggJiYgYm9yZGVycy5sZWZ0KTtcbiAgY29uc3QgeU9mZnNldCA9IHBhZGRpbmdzLnRvcCArIChib3ggJiYgYm9yZGVycy50b3ApO1xuICBsZXQge3dpZHRoLCBoZWlnaHR9ID0gY2hhcnQ7XG4gIGlmIChib3JkZXJCb3gpIHtcbiAgICB3aWR0aCAtPSBwYWRkaW5ncy53aWR0aCArIGJvcmRlcnMud2lkdGg7XG4gICAgaGVpZ2h0IC09IHBhZGRpbmdzLmhlaWdodCArIGJvcmRlcnMuaGVpZ2h0O1xuICB9XG4gIHJldHVybiB7XG4gICAgeDogTWF0aC5yb3VuZCgoeCAtIHhPZmZzZXQpIC8gd2lkdGggKiBjYW52YXMud2lkdGggLyBjdXJyZW50RGV2aWNlUGl4ZWxSYXRpbyksXG4gICAgeTogTWF0aC5yb3VuZCgoeSAtIHlPZmZzZXQpIC8gaGVpZ2h0ICogY2FudmFzLmhlaWdodCAvIGN1cnJlbnREZXZpY2VQaXhlbFJhdGlvKVxuICB9O1xufVxuZnVuY3Rpb24gZ2V0Q29udGFpbmVyU2l6ZShjYW52YXMsIHdpZHRoLCBoZWlnaHQpIHtcbiAgbGV0IG1heFdpZHRoLCBtYXhIZWlnaHQ7XG4gIGlmICh3aWR0aCA9PT0gdW5kZWZpbmVkIHx8IGhlaWdodCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgY29uc3QgY29udGFpbmVyID0gX2dldFBhcmVudE5vZGUoY2FudmFzKTtcbiAgICBpZiAoIWNvbnRhaW5lcikge1xuICAgICAgd2lkdGggPSBjYW52YXMuY2xpZW50V2lkdGg7XG4gICAgICBoZWlnaHQgPSBjYW52YXMuY2xpZW50SGVpZ2h0O1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCByZWN0ID0gY29udGFpbmVyLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgY29uc3QgY29udGFpbmVyU3R5bGUgPSBnZXRDb21wdXRlZFN0eWxlKGNvbnRhaW5lcik7XG4gICAgICBjb25zdCBjb250YWluZXJCb3JkZXIgPSBnZXRQb3NpdGlvbmVkU3R5bGUoY29udGFpbmVyU3R5bGUsICdib3JkZXInLCAnd2lkdGgnKTtcbiAgICAgIGNvbnN0IGNvbnRhaW5lclBhZGRpbmcgPSBnZXRQb3NpdGlvbmVkU3R5bGUoY29udGFpbmVyU3R5bGUsICdwYWRkaW5nJyk7XG4gICAgICB3aWR0aCA9IHJlY3Qud2lkdGggLSBjb250YWluZXJQYWRkaW5nLndpZHRoIC0gY29udGFpbmVyQm9yZGVyLndpZHRoO1xuICAgICAgaGVpZ2h0ID0gcmVjdC5oZWlnaHQgLSBjb250YWluZXJQYWRkaW5nLmhlaWdodCAtIGNvbnRhaW5lckJvcmRlci5oZWlnaHQ7XG4gICAgICBtYXhXaWR0aCA9IHBhcnNlTWF4U3R5bGUoY29udGFpbmVyU3R5bGUubWF4V2lkdGgsIGNvbnRhaW5lciwgJ2NsaWVudFdpZHRoJyk7XG4gICAgICBtYXhIZWlnaHQgPSBwYXJzZU1heFN0eWxlKGNvbnRhaW5lclN0eWxlLm1heEhlaWdodCwgY29udGFpbmVyLCAnY2xpZW50SGVpZ2h0Jyk7XG4gICAgfVxuICB9XG4gIHJldHVybiB7XG4gICAgd2lkdGgsXG4gICAgaGVpZ2h0LFxuICAgIG1heFdpZHRoOiBtYXhXaWR0aCB8fCBJTkZJTklUWSxcbiAgICBtYXhIZWlnaHQ6IG1heEhlaWdodCB8fCBJTkZJTklUWVxuICB9O1xufVxuY29uc3Qgcm91bmQxID0gdiA9PiBNYXRoLnJvdW5kKHYgKiAxMCkgLyAxMDtcbmZ1bmN0aW9uIGdldE1heGltdW1TaXplKGNhbnZhcywgYmJXaWR0aCwgYmJIZWlnaHQsIGFzcGVjdFJhdGlvKSB7XG4gIGNvbnN0IHN0eWxlID0gZ2V0Q29tcHV0ZWRTdHlsZShjYW52YXMpO1xuICBjb25zdCBtYXJnaW5zID0gZ2V0UG9zaXRpb25lZFN0eWxlKHN0eWxlLCAnbWFyZ2luJyk7XG4gIGNvbnN0IG1heFdpZHRoID0gcGFyc2VNYXhTdHlsZShzdHlsZS5tYXhXaWR0aCwgY2FudmFzLCAnY2xpZW50V2lkdGgnKSB8fCBJTkZJTklUWTtcbiAgY29uc3QgbWF4SGVpZ2h0ID0gcGFyc2VNYXhTdHlsZShzdHlsZS5tYXhIZWlnaHQsIGNhbnZhcywgJ2NsaWVudEhlaWdodCcpIHx8IElORklOSVRZO1xuICBjb25zdCBjb250YWluZXJTaXplID0gZ2V0Q29udGFpbmVyU2l6ZShjYW52YXMsIGJiV2lkdGgsIGJiSGVpZ2h0KTtcbiAgbGV0IHt3aWR0aCwgaGVpZ2h0fSA9IGNvbnRhaW5lclNpemU7XG4gIGlmIChzdHlsZS5ib3hTaXppbmcgPT09ICdjb250ZW50LWJveCcpIHtcbiAgICBjb25zdCBib3JkZXJzID0gZ2V0UG9zaXRpb25lZFN0eWxlKHN0eWxlLCAnYm9yZGVyJywgJ3dpZHRoJyk7XG4gICAgY29uc3QgcGFkZGluZ3MgPSBnZXRQb3NpdGlvbmVkU3R5bGUoc3R5bGUsICdwYWRkaW5nJyk7XG4gICAgd2lkdGggLT0gcGFkZGluZ3Mud2lkdGggKyBib3JkZXJzLndpZHRoO1xuICAgIGhlaWdodCAtPSBwYWRkaW5ncy5oZWlnaHQgKyBib3JkZXJzLmhlaWdodDtcbiAgfVxuICB3aWR0aCA9IE1hdGgubWF4KDAsIHdpZHRoIC0gbWFyZ2lucy53aWR0aCk7XG4gIGhlaWdodCA9IE1hdGgubWF4KDAsIGFzcGVjdFJhdGlvID8gTWF0aC5mbG9vcih3aWR0aCAvIGFzcGVjdFJhdGlvKSA6IGhlaWdodCAtIG1hcmdpbnMuaGVpZ2h0KTtcbiAgd2lkdGggPSByb3VuZDEoTWF0aC5taW4od2lkdGgsIG1heFdpZHRoLCBjb250YWluZXJTaXplLm1heFdpZHRoKSk7XG4gIGhlaWdodCA9IHJvdW5kMShNYXRoLm1pbihoZWlnaHQsIG1heEhlaWdodCwgY29udGFpbmVyU2l6ZS5tYXhIZWlnaHQpKTtcbiAgaWYgKHdpZHRoICYmICFoZWlnaHQpIHtcbiAgICBoZWlnaHQgPSByb3VuZDEod2lkdGggLyAyKTtcbiAgfVxuICByZXR1cm4ge1xuICAgIHdpZHRoLFxuICAgIGhlaWdodFxuICB9O1xufVxuZnVuY3Rpb24gcmV0aW5hU2NhbGUoY2hhcnQsIGZvcmNlUmF0aW8sIGZvcmNlU3R5bGUpIHtcbiAgY29uc3QgcGl4ZWxSYXRpbyA9IGZvcmNlUmF0aW8gfHwgMTtcbiAgY29uc3QgZGV2aWNlSGVpZ2h0ID0gTWF0aC5mbG9vcihjaGFydC5oZWlnaHQgKiBwaXhlbFJhdGlvKTtcbiAgY29uc3QgZGV2aWNlV2lkdGggPSBNYXRoLmZsb29yKGNoYXJ0LndpZHRoICogcGl4ZWxSYXRpbyk7XG4gIGNoYXJ0LmhlaWdodCA9IGRldmljZUhlaWdodCAvIHBpeGVsUmF0aW87XG4gIGNoYXJ0LndpZHRoID0gZGV2aWNlV2lkdGggLyBwaXhlbFJhdGlvO1xuICBjb25zdCBjYW52YXMgPSBjaGFydC5jYW52YXM7XG4gIGlmIChjYW52YXMuc3R5bGUgJiYgKGZvcmNlU3R5bGUgfHwgKCFjYW52YXMuc3R5bGUuaGVpZ2h0ICYmICFjYW52YXMuc3R5bGUud2lkdGgpKSkge1xuICAgIGNhbnZhcy5zdHlsZS5oZWlnaHQgPSBgJHtjaGFydC5oZWlnaHR9cHhgO1xuICAgIGNhbnZhcy5zdHlsZS53aWR0aCA9IGAke2NoYXJ0LndpZHRofXB4YDtcbiAgfVxuICBpZiAoY2hhcnQuY3VycmVudERldmljZVBpeGVsUmF0aW8gIT09IHBpeGVsUmF0aW9cbiAgICAgIHx8IGNhbnZhcy5oZWlnaHQgIT09IGRldmljZUhlaWdodFxuICAgICAgfHwgY2FudmFzLndpZHRoICE9PSBkZXZpY2VXaWR0aCkge1xuICAgIGNoYXJ0LmN1cnJlbnREZXZpY2VQaXhlbFJhdGlvID0gcGl4ZWxSYXRpbztcbiAgICBjYW52YXMuaGVpZ2h0ID0gZGV2aWNlSGVpZ2h0O1xuICAgIGNhbnZhcy53aWR0aCA9IGRldmljZVdpZHRoO1xuICAgIGNoYXJ0LmN0eC5zZXRUcmFuc2Zvcm0ocGl4ZWxSYXRpbywgMCwgMCwgcGl4ZWxSYXRpbywgMCwgMCk7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxuY29uc3Qgc3VwcG9ydHNFdmVudExpc3RlbmVyT3B0aW9ucyA9IChmdW5jdGlvbigpIHtcbiAgbGV0IHBhc3NpdmVTdXBwb3J0ZWQgPSBmYWxzZTtcbiAgdHJ5IHtcbiAgICBjb25zdCBvcHRpb25zID0ge1xuICAgICAgZ2V0IHBhc3NpdmUoKSB7XG4gICAgICAgIHBhc3NpdmVTdXBwb3J0ZWQgPSB0cnVlO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfTtcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigndGVzdCcsIG51bGwsIG9wdGlvbnMpO1xuICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCd0ZXN0JywgbnVsbCwgb3B0aW9ucyk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgfVxuICByZXR1cm4gcGFzc2l2ZVN1cHBvcnRlZDtcbn0oKSk7XG5mdW5jdGlvbiByZWFkVXNlZFNpemUoZWxlbWVudCwgcHJvcGVydHkpIHtcbiAgY29uc3QgdmFsdWUgPSBnZXRTdHlsZShlbGVtZW50LCBwcm9wZXJ0eSk7XG4gIGNvbnN0IG1hdGNoZXMgPSB2YWx1ZSAmJiB2YWx1ZS5tYXRjaCgvXihcXGQrKShcXC5cXGQrKT9weCQvKTtcbiAgcmV0dXJuIG1hdGNoZXMgPyArbWF0Y2hlc1sxXSA6IHVuZGVmaW5lZDtcbn1cblxuZnVuY3Rpb24gX3BvaW50SW5MaW5lKHAxLCBwMiwgdCwgbW9kZSkge1xuICByZXR1cm4ge1xuICAgIHg6IHAxLnggKyB0ICogKHAyLnggLSBwMS54KSxcbiAgICB5OiBwMS55ICsgdCAqIChwMi55IC0gcDEueSlcbiAgfTtcbn1cbmZ1bmN0aW9uIF9zdGVwcGVkSW50ZXJwb2xhdGlvbihwMSwgcDIsIHQsIG1vZGUpIHtcbiAgcmV0dXJuIHtcbiAgICB4OiBwMS54ICsgdCAqIChwMi54IC0gcDEueCksXG4gICAgeTogbW9kZSA9PT0gJ21pZGRsZScgPyB0IDwgMC41ID8gcDEueSA6IHAyLnlcbiAgICA6IG1vZGUgPT09ICdhZnRlcicgPyB0IDwgMSA/IHAxLnkgOiBwMi55XG4gICAgOiB0ID4gMCA/IHAyLnkgOiBwMS55XG4gIH07XG59XG5mdW5jdGlvbiBfYmV6aWVySW50ZXJwb2xhdGlvbihwMSwgcDIsIHQsIG1vZGUpIHtcbiAgY29uc3QgY3AxID0ge3g6IHAxLmNwMngsIHk6IHAxLmNwMnl9O1xuICBjb25zdCBjcDIgPSB7eDogcDIuY3AxeCwgeTogcDIuY3AxeX07XG4gIGNvbnN0IGEgPSBfcG9pbnRJbkxpbmUocDEsIGNwMSwgdCk7XG4gIGNvbnN0IGIgPSBfcG9pbnRJbkxpbmUoY3AxLCBjcDIsIHQpO1xuICBjb25zdCBjID0gX3BvaW50SW5MaW5lKGNwMiwgcDIsIHQpO1xuICBjb25zdCBkID0gX3BvaW50SW5MaW5lKGEsIGIsIHQpO1xuICBjb25zdCBlID0gX3BvaW50SW5MaW5lKGIsIGMsIHQpO1xuICByZXR1cm4gX3BvaW50SW5MaW5lKGQsIGUsIHQpO1xufVxuXG5jb25zdCBpbnRsQ2FjaGUgPSBuZXcgTWFwKCk7XG5mdW5jdGlvbiBnZXROdW1iZXJGb3JtYXQobG9jYWxlLCBvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICBjb25zdCBjYWNoZUtleSA9IGxvY2FsZSArIEpTT04uc3RyaW5naWZ5KG9wdGlvbnMpO1xuICBsZXQgZm9ybWF0dGVyID0gaW50bENhY2hlLmdldChjYWNoZUtleSk7XG4gIGlmICghZm9ybWF0dGVyKSB7XG4gICAgZm9ybWF0dGVyID0gbmV3IEludGwuTnVtYmVyRm9ybWF0KGxvY2FsZSwgb3B0aW9ucyk7XG4gICAgaW50bENhY2hlLnNldChjYWNoZUtleSwgZm9ybWF0dGVyKTtcbiAgfVxuICByZXR1cm4gZm9ybWF0dGVyO1xufVxuZnVuY3Rpb24gZm9ybWF0TnVtYmVyKG51bSwgbG9jYWxlLCBvcHRpb25zKSB7XG4gIHJldHVybiBnZXROdW1iZXJGb3JtYXQobG9jYWxlLCBvcHRpb25zKS5mb3JtYXQobnVtKTtcbn1cblxuY29uc3QgZ2V0UmlnaHRUb0xlZnRBZGFwdGVyID0gZnVuY3Rpb24ocmVjdFgsIHdpZHRoKSB7XG4gIHJldHVybiB7XG4gICAgeCh4KSB7XG4gICAgICByZXR1cm4gcmVjdFggKyByZWN0WCArIHdpZHRoIC0geDtcbiAgICB9LFxuICAgIHNldFdpZHRoKHcpIHtcbiAgICAgIHdpZHRoID0gdztcbiAgICB9LFxuICAgIHRleHRBbGlnbihhbGlnbikge1xuICAgICAgaWYgKGFsaWduID09PSAnY2VudGVyJykge1xuICAgICAgICByZXR1cm4gYWxpZ247XG4gICAgICB9XG4gICAgICByZXR1cm4gYWxpZ24gPT09ICdyaWdodCcgPyAnbGVmdCcgOiAncmlnaHQnO1xuICAgIH0sXG4gICAgeFBsdXMoeCwgdmFsdWUpIHtcbiAgICAgIHJldHVybiB4IC0gdmFsdWU7XG4gICAgfSxcbiAgICBsZWZ0Rm9yTHRyKHgsIGl0ZW1XaWR0aCkge1xuICAgICAgcmV0dXJuIHggLSBpdGVtV2lkdGg7XG4gICAgfSxcbiAgfTtcbn07XG5jb25zdCBnZXRMZWZ0VG9SaWdodEFkYXB0ZXIgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHtcbiAgICB4KHgpIHtcbiAgICAgIHJldHVybiB4O1xuICAgIH0sXG4gICAgc2V0V2lkdGgodykge1xuICAgIH0sXG4gICAgdGV4dEFsaWduKGFsaWduKSB7XG4gICAgICByZXR1cm4gYWxpZ247XG4gICAgfSxcbiAgICB4UGx1cyh4LCB2YWx1ZSkge1xuICAgICAgcmV0dXJuIHggKyB2YWx1ZTtcbiAgICB9LFxuICAgIGxlZnRGb3JMdHIoeCwgX2l0ZW1XaWR0aCkge1xuICAgICAgcmV0dXJuIHg7XG4gICAgfSxcbiAgfTtcbn07XG5mdW5jdGlvbiBnZXRSdGxBZGFwdGVyKHJ0bCwgcmVjdFgsIHdpZHRoKSB7XG4gIHJldHVybiBydGwgPyBnZXRSaWdodFRvTGVmdEFkYXB0ZXIocmVjdFgsIHdpZHRoKSA6IGdldExlZnRUb1JpZ2h0QWRhcHRlcigpO1xufVxuZnVuY3Rpb24gb3ZlcnJpZGVUZXh0RGlyZWN0aW9uKGN0eCwgZGlyZWN0aW9uKSB7XG4gIGxldCBzdHlsZSwgb3JpZ2luYWw7XG4gIGlmIChkaXJlY3Rpb24gPT09ICdsdHInIHx8IGRpcmVjdGlvbiA9PT0gJ3J0bCcpIHtcbiAgICBzdHlsZSA9IGN0eC5jYW52YXMuc3R5bGU7XG4gICAgb3JpZ2luYWwgPSBbXG4gICAgICBzdHlsZS5nZXRQcm9wZXJ0eVZhbHVlKCdkaXJlY3Rpb24nKSxcbiAgICAgIHN0eWxlLmdldFByb3BlcnR5UHJpb3JpdHkoJ2RpcmVjdGlvbicpLFxuICAgIF07XG4gICAgc3R5bGUuc2V0UHJvcGVydHkoJ2RpcmVjdGlvbicsIGRpcmVjdGlvbiwgJ2ltcG9ydGFudCcpO1xuICAgIGN0eC5wcmV2VGV4dERpcmVjdGlvbiA9IG9yaWdpbmFsO1xuICB9XG59XG5mdW5jdGlvbiByZXN0b3JlVGV4dERpcmVjdGlvbihjdHgsIG9yaWdpbmFsKSB7XG4gIGlmIChvcmlnaW5hbCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgZGVsZXRlIGN0eC5wcmV2VGV4dERpcmVjdGlvbjtcbiAgICBjdHguY2FudmFzLnN0eWxlLnNldFByb3BlcnR5KCdkaXJlY3Rpb24nLCBvcmlnaW5hbFswXSwgb3JpZ2luYWxbMV0pO1xuICB9XG59XG5cbmZ1bmN0aW9uIHByb3BlcnR5Rm4ocHJvcGVydHkpIHtcbiAgaWYgKHByb3BlcnR5ID09PSAnYW5nbGUnKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGJldHdlZW46IF9hbmdsZUJldHdlZW4sXG4gICAgICBjb21wYXJlOiBfYW5nbGVEaWZmLFxuICAgICAgbm9ybWFsaXplOiBfbm9ybWFsaXplQW5nbGUsXG4gICAgfTtcbiAgfVxuICByZXR1cm4ge1xuICAgIGJldHdlZW46IF9pc0JldHdlZW4sXG4gICAgY29tcGFyZTogKGEsIGIpID0+IGEgLSBiLFxuICAgIG5vcm1hbGl6ZTogeCA9PiB4XG4gIH07XG59XG5mdW5jdGlvbiBub3JtYWxpemVTZWdtZW50KHtzdGFydCwgZW5kLCBjb3VudCwgbG9vcCwgc3R5bGV9KSB7XG4gIHJldHVybiB7XG4gICAgc3RhcnQ6IHN0YXJ0ICUgY291bnQsXG4gICAgZW5kOiBlbmQgJSBjb3VudCxcbiAgICBsb29wOiBsb29wICYmIChlbmQgLSBzdGFydCArIDEpICUgY291bnQgPT09IDAsXG4gICAgc3R5bGVcbiAgfTtcbn1cbmZ1bmN0aW9uIGdldFNlZ21lbnQoc2VnbWVudCwgcG9pbnRzLCBib3VuZHMpIHtcbiAgY29uc3Qge3Byb3BlcnR5LCBzdGFydDogc3RhcnRCb3VuZCwgZW5kOiBlbmRCb3VuZH0gPSBib3VuZHM7XG4gIGNvbnN0IHtiZXR3ZWVuLCBub3JtYWxpemV9ID0gcHJvcGVydHlGbihwcm9wZXJ0eSk7XG4gIGNvbnN0IGNvdW50ID0gcG9pbnRzLmxlbmd0aDtcbiAgbGV0IHtzdGFydCwgZW5kLCBsb29wfSA9IHNlZ21lbnQ7XG4gIGxldCBpLCBpbGVuO1xuICBpZiAobG9vcCkge1xuICAgIHN0YXJ0ICs9IGNvdW50O1xuICAgIGVuZCArPSBjb3VudDtcbiAgICBmb3IgKGkgPSAwLCBpbGVuID0gY291bnQ7IGkgPCBpbGVuOyArK2kpIHtcbiAgICAgIGlmICghYmV0d2Vlbihub3JtYWxpemUocG9pbnRzW3N0YXJ0ICUgY291bnRdW3Byb3BlcnR5XSksIHN0YXJ0Qm91bmQsIGVuZEJvdW5kKSkge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIHN0YXJ0LS07XG4gICAgICBlbmQtLTtcbiAgICB9XG4gICAgc3RhcnQgJT0gY291bnQ7XG4gICAgZW5kICU9IGNvdW50O1xuICB9XG4gIGlmIChlbmQgPCBzdGFydCkge1xuICAgIGVuZCArPSBjb3VudDtcbiAgfVxuICByZXR1cm4ge3N0YXJ0LCBlbmQsIGxvb3AsIHN0eWxlOiBzZWdtZW50LnN0eWxlfTtcbn1cbmZ1bmN0aW9uIF9ib3VuZFNlZ21lbnQoc2VnbWVudCwgcG9pbnRzLCBib3VuZHMpIHtcbiAgaWYgKCFib3VuZHMpIHtcbiAgICByZXR1cm4gW3NlZ21lbnRdO1xuICB9XG4gIGNvbnN0IHtwcm9wZXJ0eSwgc3RhcnQ6IHN0YXJ0Qm91bmQsIGVuZDogZW5kQm91bmR9ID0gYm91bmRzO1xuICBjb25zdCBjb3VudCA9IHBvaW50cy5sZW5ndGg7XG4gIGNvbnN0IHtjb21wYXJlLCBiZXR3ZWVuLCBub3JtYWxpemV9ID0gcHJvcGVydHlGbihwcm9wZXJ0eSk7XG4gIGNvbnN0IHtzdGFydCwgZW5kLCBsb29wLCBzdHlsZX0gPSBnZXRTZWdtZW50KHNlZ21lbnQsIHBvaW50cywgYm91bmRzKTtcbiAgY29uc3QgcmVzdWx0ID0gW107XG4gIGxldCBpbnNpZGUgPSBmYWxzZTtcbiAgbGV0IHN1YlN0YXJ0ID0gbnVsbDtcbiAgbGV0IHZhbHVlLCBwb2ludCwgcHJldlZhbHVlO1xuICBjb25zdCBzdGFydElzQmVmb3JlID0gKCkgPT4gYmV0d2VlbihzdGFydEJvdW5kLCBwcmV2VmFsdWUsIHZhbHVlKSAmJiBjb21wYXJlKHN0YXJ0Qm91bmQsIHByZXZWYWx1ZSkgIT09IDA7XG4gIGNvbnN0IGVuZElzQmVmb3JlID0gKCkgPT4gY29tcGFyZShlbmRCb3VuZCwgdmFsdWUpID09PSAwIHx8IGJldHdlZW4oZW5kQm91bmQsIHByZXZWYWx1ZSwgdmFsdWUpO1xuICBjb25zdCBzaG91bGRTdGFydCA9ICgpID0+IGluc2lkZSB8fCBzdGFydElzQmVmb3JlKCk7XG4gIGNvbnN0IHNob3VsZFN0b3AgPSAoKSA9PiAhaW5zaWRlIHx8IGVuZElzQmVmb3JlKCk7XG4gIGZvciAobGV0IGkgPSBzdGFydCwgcHJldiA9IHN0YXJ0OyBpIDw9IGVuZDsgKytpKSB7XG4gICAgcG9pbnQgPSBwb2ludHNbaSAlIGNvdW50XTtcbiAgICBpZiAocG9pbnQuc2tpcCkge1xuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIHZhbHVlID0gbm9ybWFsaXplKHBvaW50W3Byb3BlcnR5XSk7XG4gICAgaWYgKHZhbHVlID09PSBwcmV2VmFsdWUpIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICBpbnNpZGUgPSBiZXR3ZWVuKHZhbHVlLCBzdGFydEJvdW5kLCBlbmRCb3VuZCk7XG4gICAgaWYgKHN1YlN0YXJ0ID09PSBudWxsICYmIHNob3VsZFN0YXJ0KCkpIHtcbiAgICAgIHN1YlN0YXJ0ID0gY29tcGFyZSh2YWx1ZSwgc3RhcnRCb3VuZCkgPT09IDAgPyBpIDogcHJldjtcbiAgICB9XG4gICAgaWYgKHN1YlN0YXJ0ICE9PSBudWxsICYmIHNob3VsZFN0b3AoKSkge1xuICAgICAgcmVzdWx0LnB1c2gobm9ybWFsaXplU2VnbWVudCh7c3RhcnQ6IHN1YlN0YXJ0LCBlbmQ6IGksIGxvb3AsIGNvdW50LCBzdHlsZX0pKTtcbiAgICAgIHN1YlN0YXJ0ID0gbnVsbDtcbiAgICB9XG4gICAgcHJldiA9IGk7XG4gICAgcHJldlZhbHVlID0gdmFsdWU7XG4gIH1cbiAgaWYgKHN1YlN0YXJ0ICE9PSBudWxsKSB7XG4gICAgcmVzdWx0LnB1c2gobm9ybWFsaXplU2VnbWVudCh7c3RhcnQ6IHN1YlN0YXJ0LCBlbmQsIGxvb3AsIGNvdW50LCBzdHlsZX0pKTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuZnVuY3Rpb24gX2JvdW5kU2VnbWVudHMobGluZSwgYm91bmRzKSB7XG4gIGNvbnN0IHJlc3VsdCA9IFtdO1xuICBjb25zdCBzZWdtZW50cyA9IGxpbmUuc2VnbWVudHM7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgc2VnbWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICBjb25zdCBzdWIgPSBfYm91bmRTZWdtZW50KHNlZ21lbnRzW2ldLCBsaW5lLnBvaW50cywgYm91bmRzKTtcbiAgICBpZiAoc3ViLmxlbmd0aCkge1xuICAgICAgcmVzdWx0LnB1c2goLi4uc3ViKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cbmZ1bmN0aW9uIGZpbmRTdGFydEFuZEVuZChwb2ludHMsIGNvdW50LCBsb29wLCBzcGFuR2Fwcykge1xuICBsZXQgc3RhcnQgPSAwO1xuICBsZXQgZW5kID0gY291bnQgLSAxO1xuICBpZiAobG9vcCAmJiAhc3BhbkdhcHMpIHtcbiAgICB3aGlsZSAoc3RhcnQgPCBjb3VudCAmJiAhcG9pbnRzW3N0YXJ0XS5za2lwKSB7XG4gICAgICBzdGFydCsrO1xuICAgIH1cbiAgfVxuICB3aGlsZSAoc3RhcnQgPCBjb3VudCAmJiBwb2ludHNbc3RhcnRdLnNraXApIHtcbiAgICBzdGFydCsrO1xuICB9XG4gIHN0YXJ0ICU9IGNvdW50O1xuICBpZiAobG9vcCkge1xuICAgIGVuZCArPSBzdGFydDtcbiAgfVxuICB3aGlsZSAoZW5kID4gc3RhcnQgJiYgcG9pbnRzW2VuZCAlIGNvdW50XS5za2lwKSB7XG4gICAgZW5kLS07XG4gIH1cbiAgZW5kICU9IGNvdW50O1xuICByZXR1cm4ge3N0YXJ0LCBlbmR9O1xufVxuZnVuY3Rpb24gc29saWRTZWdtZW50cyhwb2ludHMsIHN0YXJ0LCBtYXgsIGxvb3ApIHtcbiAgY29uc3QgY291bnQgPSBwb2ludHMubGVuZ3RoO1xuICBjb25zdCByZXN1bHQgPSBbXTtcbiAgbGV0IGxhc3QgPSBzdGFydDtcbiAgbGV0IHByZXYgPSBwb2ludHNbc3RhcnRdO1xuICBsZXQgZW5kO1xuICBmb3IgKGVuZCA9IHN0YXJ0ICsgMTsgZW5kIDw9IG1heDsgKytlbmQpIHtcbiAgICBjb25zdCBjdXIgPSBwb2ludHNbZW5kICUgY291bnRdO1xuICAgIGlmIChjdXIuc2tpcCB8fCBjdXIuc3RvcCkge1xuICAgICAgaWYgKCFwcmV2LnNraXApIHtcbiAgICAgICAgbG9vcCA9IGZhbHNlO1xuICAgICAgICByZXN1bHQucHVzaCh7c3RhcnQ6IHN0YXJ0ICUgY291bnQsIGVuZDogKGVuZCAtIDEpICUgY291bnQsIGxvb3B9KTtcbiAgICAgICAgc3RhcnQgPSBsYXN0ID0gY3VyLnN0b3AgPyBlbmQgOiBudWxsO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBsYXN0ID0gZW5kO1xuICAgICAgaWYgKHByZXYuc2tpcCkge1xuICAgICAgICBzdGFydCA9IGVuZDtcbiAgICAgIH1cbiAgICB9XG4gICAgcHJldiA9IGN1cjtcbiAgfVxuICBpZiAobGFzdCAhPT0gbnVsbCkge1xuICAgIHJlc3VsdC5wdXNoKHtzdGFydDogc3RhcnQgJSBjb3VudCwgZW5kOiBsYXN0ICUgY291bnQsIGxvb3B9KTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuZnVuY3Rpb24gX2NvbXB1dGVTZWdtZW50cyhsaW5lLCBzZWdtZW50T3B0aW9ucykge1xuICBjb25zdCBwb2ludHMgPSBsaW5lLnBvaW50cztcbiAgY29uc3Qgc3BhbkdhcHMgPSBsaW5lLm9wdGlvbnMuc3BhbkdhcHM7XG4gIGNvbnN0IGNvdW50ID0gcG9pbnRzLmxlbmd0aDtcbiAgaWYgKCFjb3VudCkge1xuICAgIHJldHVybiBbXTtcbiAgfVxuICBjb25zdCBsb29wID0gISFsaW5lLl9sb29wO1xuICBjb25zdCB7c3RhcnQsIGVuZH0gPSBmaW5kU3RhcnRBbmRFbmQocG9pbnRzLCBjb3VudCwgbG9vcCwgc3BhbkdhcHMpO1xuICBpZiAoc3BhbkdhcHMgPT09IHRydWUpIHtcbiAgICByZXR1cm4gc3BsaXRCeVN0eWxlcyhsaW5lLCBbe3N0YXJ0LCBlbmQsIGxvb3B9XSwgcG9pbnRzLCBzZWdtZW50T3B0aW9ucyk7XG4gIH1cbiAgY29uc3QgbWF4ID0gZW5kIDwgc3RhcnQgPyBlbmQgKyBjb3VudCA6IGVuZDtcbiAgY29uc3QgY29tcGxldGVMb29wID0gISFsaW5lLl9mdWxsTG9vcCAmJiBzdGFydCA9PT0gMCAmJiBlbmQgPT09IGNvdW50IC0gMTtcbiAgcmV0dXJuIHNwbGl0QnlTdHlsZXMobGluZSwgc29saWRTZWdtZW50cyhwb2ludHMsIHN0YXJ0LCBtYXgsIGNvbXBsZXRlTG9vcCksIHBvaW50cywgc2VnbWVudE9wdGlvbnMpO1xufVxuZnVuY3Rpb24gc3BsaXRCeVN0eWxlcyhsaW5lLCBzZWdtZW50cywgcG9pbnRzLCBzZWdtZW50T3B0aW9ucykge1xuICBpZiAoIXNlZ21lbnRPcHRpb25zIHx8ICFzZWdtZW50T3B0aW9ucy5zZXRDb250ZXh0IHx8ICFwb2ludHMpIHtcbiAgICByZXR1cm4gc2VnbWVudHM7XG4gIH1cbiAgcmV0dXJuIGRvU3BsaXRCeVN0eWxlcyhsaW5lLCBzZWdtZW50cywgcG9pbnRzLCBzZWdtZW50T3B0aW9ucyk7XG59XG5mdW5jdGlvbiBkb1NwbGl0QnlTdHlsZXMobGluZSwgc2VnbWVudHMsIHBvaW50cywgc2VnbWVudE9wdGlvbnMpIHtcbiAgY29uc3QgY2hhcnRDb250ZXh0ID0gbGluZS5fY2hhcnQuZ2V0Q29udGV4dCgpO1xuICBjb25zdCBiYXNlU3R5bGUgPSByZWFkU3R5bGUobGluZS5vcHRpb25zKTtcbiAgY29uc3Qge19kYXRhc2V0SW5kZXg6IGRhdGFzZXRJbmRleCwgb3B0aW9uczoge3NwYW5HYXBzfX0gPSBsaW5lO1xuICBjb25zdCBjb3VudCA9IHBvaW50cy5sZW5ndGg7XG4gIGNvbnN0IHJlc3VsdCA9IFtdO1xuICBsZXQgcHJldlN0eWxlID0gYmFzZVN0eWxlO1xuICBsZXQgc3RhcnQgPSBzZWdtZW50c1swXS5zdGFydDtcbiAgbGV0IGkgPSBzdGFydDtcbiAgZnVuY3Rpb24gYWRkU3R5bGUocywgZSwgbCwgc3QpIHtcbiAgICBjb25zdCBkaXIgPSBzcGFuR2FwcyA/IC0xIDogMTtcbiAgICBpZiAocyA9PT0gZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBzICs9IGNvdW50O1xuICAgIHdoaWxlIChwb2ludHNbcyAlIGNvdW50XS5za2lwKSB7XG4gICAgICBzIC09IGRpcjtcbiAgICB9XG4gICAgd2hpbGUgKHBvaW50c1tlICUgY291bnRdLnNraXApIHtcbiAgICAgIGUgKz0gZGlyO1xuICAgIH1cbiAgICBpZiAocyAlIGNvdW50ICE9PSBlICUgY291bnQpIHtcbiAgICAgIHJlc3VsdC5wdXNoKHtzdGFydDogcyAlIGNvdW50LCBlbmQ6IGUgJSBjb3VudCwgbG9vcDogbCwgc3R5bGU6IHN0fSk7XG4gICAgICBwcmV2U3R5bGUgPSBzdDtcbiAgICAgIHN0YXJ0ID0gZSAlIGNvdW50O1xuICAgIH1cbiAgfVxuICBmb3IgKGNvbnN0IHNlZ21lbnQgb2Ygc2VnbWVudHMpIHtcbiAgICBzdGFydCA9IHNwYW5HYXBzID8gc3RhcnQgOiBzZWdtZW50LnN0YXJ0O1xuICAgIGxldCBwcmV2ID0gcG9pbnRzW3N0YXJ0ICUgY291bnRdO1xuICAgIGxldCBzdHlsZTtcbiAgICBmb3IgKGkgPSBzdGFydCArIDE7IGkgPD0gc2VnbWVudC5lbmQ7IGkrKykge1xuICAgICAgY29uc3QgcHQgPSBwb2ludHNbaSAlIGNvdW50XTtcbiAgICAgIHN0eWxlID0gcmVhZFN0eWxlKHNlZ21lbnRPcHRpb25zLnNldENvbnRleHQoY3JlYXRlQ29udGV4dChjaGFydENvbnRleHQsIHtcbiAgICAgICAgdHlwZTogJ3NlZ21lbnQnLFxuICAgICAgICBwMDogcHJldixcbiAgICAgICAgcDE6IHB0LFxuICAgICAgICBwMERhdGFJbmRleDogKGkgLSAxKSAlIGNvdW50LFxuICAgICAgICBwMURhdGFJbmRleDogaSAlIGNvdW50LFxuICAgICAgICBkYXRhc2V0SW5kZXhcbiAgICAgIH0pKSk7XG4gICAgICBpZiAoc3R5bGVDaGFuZ2VkKHN0eWxlLCBwcmV2U3R5bGUpKSB7XG4gICAgICAgIGFkZFN0eWxlKHN0YXJ0LCBpIC0gMSwgc2VnbWVudC5sb29wLCBwcmV2U3R5bGUpO1xuICAgICAgfVxuICAgICAgcHJldiA9IHB0O1xuICAgICAgcHJldlN0eWxlID0gc3R5bGU7XG4gICAgfVxuICAgIGlmIChzdGFydCA8IGkgLSAxKSB7XG4gICAgICBhZGRTdHlsZShzdGFydCwgaSAtIDEsIHNlZ21lbnQubG9vcCwgcHJldlN0eWxlKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cbmZ1bmN0aW9uIHJlYWRTdHlsZShvcHRpb25zKSB7XG4gIHJldHVybiB7XG4gICAgYmFja2dyb3VuZENvbG9yOiBvcHRpb25zLmJhY2tncm91bmRDb2xvcixcbiAgICBib3JkZXJDYXBTdHlsZTogb3B0aW9ucy5ib3JkZXJDYXBTdHlsZSxcbiAgICBib3JkZXJEYXNoOiBvcHRpb25zLmJvcmRlckRhc2gsXG4gICAgYm9yZGVyRGFzaE9mZnNldDogb3B0aW9ucy5ib3JkZXJEYXNoT2Zmc2V0LFxuICAgIGJvcmRlckpvaW5TdHlsZTogb3B0aW9ucy5ib3JkZXJKb2luU3R5bGUsXG4gICAgYm9yZGVyV2lkdGg6IG9wdGlvbnMuYm9yZGVyV2lkdGgsXG4gICAgYm9yZGVyQ29sb3I6IG9wdGlvbnMuYm9yZGVyQ29sb3JcbiAgfTtcbn1cbmZ1bmN0aW9uIHN0eWxlQ2hhbmdlZChzdHlsZSwgcHJldlN0eWxlKSB7XG4gIHJldHVybiBwcmV2U3R5bGUgJiYgSlNPTi5zdHJpbmdpZnkoc3R5bGUpICE9PSBKU09OLnN0cmluZ2lmeShwcmV2U3R5bGUpO1xufVxuXG5leHBvcnQgeyBfdG9MZWZ0UmlnaHRDZW50ZXIgYXMgJCwgX3Jsb29rdXBCeUtleSBhcyBBLCBnZXRBbmdsZUZyb21Qb2ludCBhcyBCLCB0b1BhZGRpbmcgYXMgQywgZWFjaCBhcyBELCBnZXRNYXhpbXVtU2l6ZSBhcyBFLCBfZ2V0UGFyZW50Tm9kZSBhcyBGLCByZWFkVXNlZFNpemUgYXMgRywgSEFMRl9QSSBhcyBILCB0aHJvdHRsZWQgYXMgSSwgc3VwcG9ydHNFdmVudExpc3RlbmVyT3B0aW9ucyBhcyBKLCBfaXNEb21TdXBwb3J0ZWQgYXMgSywgbG9nMTAgYXMgTCwgX2ZhY3Rvcml6ZSBhcyBNLCBmaW5pdGVPckRlZmF1bHQgYXMgTiwgY2FsbGJhY2sgYXMgTywgUEkgYXMgUCwgX2FkZEdyYWNlIGFzIFEsIHRvRGVncmVlcyBhcyBSLCBfbWVhc3VyZVRleHQgYXMgUywgVEFVIGFzIFQsIF9pbnQxNlJhbmdlIGFzIFUsIF9hbGlnblBpeGVsIGFzIFYsIGNsaXBBcmVhIGFzIFcsIHJlbmRlclRleHQgYXMgWCwgdW5jbGlwQXJlYSBhcyBZLCB0b0ZvbnQgYXMgWiwgX2FycmF5VW5pcXVlIGFzIF8sIHJlc29sdmUgYXMgYSwgX2FuZ2xlRGlmZiBhcyBhJCwgX2FsaWduU3RhcnRFbmQgYXMgYTAsIG92ZXJyaWRlcyBhcyBhMSwgbWVyZ2UgYXMgYTIsIF9jYXBpdGFsaXplIGFzIGEzLCBkZXNjcmlwdG9ycyBhcyBhNCwgaXNGdW5jdGlvbiBhcyBhNSwgX2F0dGFjaENvbnRleHQgYXMgYTYsIF9jcmVhdGVSZXNvbHZlciBhcyBhNywgX2Rlc2NyaXB0b3JzIGFzIGE4LCBtZXJnZUlmIGFzIGE5LCByZXN0b3JlVGV4dERpcmVjdGlvbiBhcyBhQSwgbm9vcCBhcyBhQiwgZGlzdGFuY2VCZXR3ZWVuUG9pbnRzIGFzIGFDLCBfc2V0TWluQW5kTWF4QnlLZXkgYXMgYUQsIG5pY2VOdW0gYXMgYUUsIGFsbW9zdFdob2xlIGFzIGFGLCBhbG1vc3RFcXVhbHMgYXMgYUcsIF9kZWNpbWFsUGxhY2VzIGFzIGFILCBfbG9uZ2VzdFRleHQgYXMgYUksIF9maWx0ZXJCZXR3ZWVuIGFzIGFKLCBfbG9va3VwIGFzIGFLLCBnZXRIb3ZlckNvbG9yIGFzIGFMLCBjbG9uZSQxIGFzIGFNLCBfbWVyZ2VyIGFzIGFOLCBfbWVyZ2VySWYgYXMgYU8sIF9kZXByZWNhdGVkIGFzIGFQLCB0b0ZvbnRTdHJpbmcgYXMgYVEsIHNwbGluZUN1cnZlIGFzIGFSLCBzcGxpbmVDdXJ2ZU1vbm90b25lIGFzIGFTLCBnZXRTdHlsZSBhcyBhVCwgZm9udFN0cmluZyBhcyBhVSwgdG9MaW5lSGVpZ2h0IGFzIGFWLCBQSVRBVSBhcyBhVywgSU5GSU5JVFkgYXMgYVgsIFJBRF9QRVJfREVHIGFzIGFZLCBRVUFSVEVSX1BJIGFzIGFaLCBUV09fVEhJUkRTX1BJIGFzIGFfLCB1aWQgYXMgYWEsIGRlYm91bmNlIGFzIGFiLCByZXRpbmFTY2FsZSBhcyBhYywgY2xlYXJDYW52YXMgYXMgYWQsIHNldHNFcXVhbCBhcyBhZSwgX2VsZW1lbnRzRXF1YWwgYXMgYWYsIF9pc0NsaWNrRXZlbnQgYXMgYWcsIF9pc0JldHdlZW4gYXMgYWgsIF9yZWFkVmFsdWVUb1Byb3BzIGFzIGFpLCBfdXBkYXRlQmV6aWVyQ29udHJvbFBvaW50cyBhcyBhaiwgX2NvbXB1dGVTZWdtZW50cyBhcyBhaywgX2JvdW5kU2VnbWVudHMgYXMgYWwsIF9zdGVwcGVkSW50ZXJwb2xhdGlvbiBhcyBhbSwgX2JlemllckludGVycG9sYXRpb24gYXMgYW4sIF9wb2ludEluTGluZSBhcyBhbywgX3N0ZXBwZWRMaW5lVG8gYXMgYXAsIF9iZXppZXJDdXJ2ZVRvIGFzIGFxLCBkcmF3UG9pbnQgYXMgYXIsIGFkZFJvdW5kZWRSZWN0UGF0aCBhcyBhcywgdG9UUkJMIGFzIGF0LCB0b1RSQkxDb3JuZXJzIGFzIGF1LCBfYm91bmRTZWdtZW50IGFzIGF2LCBfbm9ybWFsaXplQW5nbGUgYXMgYXcsIGdldFJ0bEFkYXB0ZXIgYXMgYXgsIG92ZXJyaWRlVGV4dERpcmVjdGlvbiBhcyBheSwgX3RleHRYIGFzIGF6LCBpc0FycmF5IGFzIGIsIGNvbG9yIGFzIGMsIGRlZmF1bHRzIGFzIGQsIGVmZmVjdHMgYXMgZSwgcmVzb2x2ZU9iamVjdEtleSBhcyBmLCBpc051bWJlckZpbml0ZSBhcyBnLCBjcmVhdGVDb250ZXh0IGFzIGgsIGlzT2JqZWN0IGFzIGksIGRlZmluZWQgYXMgaiwgaXNOdWxsT3JVbmRlZiBhcyBrLCBsaXN0ZW5BcnJheUV2ZW50cyBhcyBsLCB0b1BlcmNlbnRhZ2UgYXMgbSwgdG9EaW1lbnNpb24gYXMgbiwgZm9ybWF0TnVtYmVyIGFzIG8sIF9hbmdsZUJldHdlZW4gYXMgcCwgaXNOdW1iZXIgYXMgcSwgcmVxdWVzdEFuaW1GcmFtZSBhcyByLCBzaWduIGFzIHMsIHRvUmFkaWFucyBhcyB0LCB1bmxpc3RlbkFycmF5RXZlbnRzIGFzIHUsIHZhbHVlT3JEZWZhdWx0IGFzIHYsIF9saW1pdFZhbHVlIGFzIHcsIF9sb29rdXBCeUtleSBhcyB4LCBnZXRSZWxhdGl2ZVBvc2l0aW9uIGFzIHksIF9pc1BvaW50SW5BcmVhIGFzIHogfTtcbiIsIi8qIVxuICogQ2hhcnQuanMgdjMuNy4xXG4gKiBodHRwczovL3d3dy5jaGFydGpzLm9yZ1xuICogKGMpIDIwMjIgQ2hhcnQuanMgQ29udHJpYnV0b3JzXG4gKiBSZWxlYXNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2VcbiAqL1xuaW1wb3J0IHsgciBhcyByZXF1ZXN0QW5pbUZyYW1lLCBhIGFzIHJlc29sdmUsIGUgYXMgZWZmZWN0cywgYyBhcyBjb2xvciwgZCBhcyBkZWZhdWx0cywgaSBhcyBpc09iamVjdCwgYiBhcyBpc0FycmF5LCB2IGFzIHZhbHVlT3JEZWZhdWx0LCB1IGFzIHVubGlzdGVuQXJyYXlFdmVudHMsIGwgYXMgbGlzdGVuQXJyYXlFdmVudHMsIGYgYXMgcmVzb2x2ZU9iamVjdEtleSwgZyBhcyBpc051bWJlckZpbml0ZSwgaCBhcyBjcmVhdGVDb250ZXh0LCBqIGFzIGRlZmluZWQsIHMgYXMgc2lnbiwgayBhcyBpc051bGxPclVuZGVmLCBfIGFzIF9hcnJheVVuaXF1ZSwgdCBhcyB0b1JhZGlhbnMsIG0gYXMgdG9QZXJjZW50YWdlLCBuIGFzIHRvRGltZW5zaW9uLCBUIGFzIFRBVSwgbyBhcyBmb3JtYXROdW1iZXIsIHAgYXMgX2FuZ2xlQmV0d2VlbiwgSCBhcyBIQUxGX1BJLCBQIGFzIFBJLCBxIGFzIGlzTnVtYmVyLCB3IGFzIF9saW1pdFZhbHVlLCB4IGFzIF9sb29rdXBCeUtleSwgeSBhcyBnZXRSZWxhdGl2ZVBvc2l0aW9uJDEsIHogYXMgX2lzUG9pbnRJbkFyZWEsIEEgYXMgX3Jsb29rdXBCeUtleSwgQiBhcyBnZXRBbmdsZUZyb21Qb2ludCwgQyBhcyB0b1BhZGRpbmcsIEQgYXMgZWFjaCwgRSBhcyBnZXRNYXhpbXVtU2l6ZSwgRiBhcyBfZ2V0UGFyZW50Tm9kZSwgRyBhcyByZWFkVXNlZFNpemUsIEkgYXMgdGhyb3R0bGVkLCBKIGFzIHN1cHBvcnRzRXZlbnRMaXN0ZW5lck9wdGlvbnMsIEsgYXMgX2lzRG9tU3VwcG9ydGVkLCBMIGFzIGxvZzEwLCBNIGFzIF9mYWN0b3JpemUsIE4gYXMgZmluaXRlT3JEZWZhdWx0LCBPIGFzIGNhbGxiYWNrLCBRIGFzIF9hZGRHcmFjZSwgUiBhcyB0b0RlZ3JlZXMsIFMgYXMgX21lYXN1cmVUZXh0LCBVIGFzIF9pbnQxNlJhbmdlLCBWIGFzIF9hbGlnblBpeGVsLCBXIGFzIGNsaXBBcmVhLCBYIGFzIHJlbmRlclRleHQsIFkgYXMgdW5jbGlwQXJlYSwgWiBhcyB0b0ZvbnQsICQgYXMgX3RvTGVmdFJpZ2h0Q2VudGVyLCBhMCBhcyBfYWxpZ25TdGFydEVuZCwgYTEgYXMgb3ZlcnJpZGVzLCBhMiBhcyBtZXJnZSwgYTMgYXMgX2NhcGl0YWxpemUsIGE0IGFzIGRlc2NyaXB0b3JzLCBhNSBhcyBpc0Z1bmN0aW9uLCBhNiBhcyBfYXR0YWNoQ29udGV4dCwgYTcgYXMgX2NyZWF0ZVJlc29sdmVyLCBhOCBhcyBfZGVzY3JpcHRvcnMsIGE5IGFzIG1lcmdlSWYsIGFhIGFzIHVpZCwgYWIgYXMgZGVib3VuY2UsIGFjIGFzIHJldGluYVNjYWxlLCBhZCBhcyBjbGVhckNhbnZhcywgYWUgYXMgc2V0c0VxdWFsLCBhZiBhcyBfZWxlbWVudHNFcXVhbCwgYWcgYXMgX2lzQ2xpY2tFdmVudCwgYWggYXMgX2lzQmV0d2VlbiwgYWkgYXMgX3JlYWRWYWx1ZVRvUHJvcHMsIGFqIGFzIF91cGRhdGVCZXppZXJDb250cm9sUG9pbnRzLCBhayBhcyBfY29tcHV0ZVNlZ21lbnRzLCBhbCBhcyBfYm91bmRTZWdtZW50cywgYW0gYXMgX3N0ZXBwZWRJbnRlcnBvbGF0aW9uLCBhbiBhcyBfYmV6aWVySW50ZXJwb2xhdGlvbiwgYW8gYXMgX3BvaW50SW5MaW5lLCBhcCBhcyBfc3RlcHBlZExpbmVUbywgYXEgYXMgX2JlemllckN1cnZlVG8sIGFyIGFzIGRyYXdQb2ludCwgYXMgYXMgYWRkUm91bmRlZFJlY3RQYXRoLCBhdCBhcyB0b1RSQkwsIGF1IGFzIHRvVFJCTENvcm5lcnMsIGF2IGFzIF9ib3VuZFNlZ21lbnQsIGF3IGFzIF9ub3JtYWxpemVBbmdsZSwgYXggYXMgZ2V0UnRsQWRhcHRlciwgYXkgYXMgb3ZlcnJpZGVUZXh0RGlyZWN0aW9uLCBheiBhcyBfdGV4dFgsIGFBIGFzIHJlc3RvcmVUZXh0RGlyZWN0aW9uLCBhQiBhcyBub29wLCBhQyBhcyBkaXN0YW5jZUJldHdlZW5Qb2ludHMsIGFEIGFzIF9zZXRNaW5BbmRNYXhCeUtleSwgYUUgYXMgbmljZU51bSwgYUYgYXMgYWxtb3N0V2hvbGUsIGFHIGFzIGFsbW9zdEVxdWFscywgYUggYXMgX2RlY2ltYWxQbGFjZXMsIGFJIGFzIF9sb25nZXN0VGV4dCwgYUogYXMgX2ZpbHRlckJldHdlZW4sIGFLIGFzIF9sb29rdXAgfSBmcm9tICcuL2NodW5rcy9oZWxwZXJzLnNlZ21lbnQuanMnO1xuZXhwb3J0IHsgZCBhcyBkZWZhdWx0cyB9IGZyb20gJy4vY2h1bmtzL2hlbHBlcnMuc2VnbWVudC5qcyc7XG5cbmNsYXNzIEFuaW1hdG9yIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5fcmVxdWVzdCA9IG51bGw7XG4gICAgdGhpcy5fY2hhcnRzID0gbmV3IE1hcCgpO1xuICAgIHRoaXMuX3J1bm5pbmcgPSBmYWxzZTtcbiAgICB0aGlzLl9sYXN0RGF0ZSA9IHVuZGVmaW5lZDtcbiAgfVxuICBfbm90aWZ5KGNoYXJ0LCBhbmltcywgZGF0ZSwgdHlwZSkge1xuICAgIGNvbnN0IGNhbGxiYWNrcyA9IGFuaW1zLmxpc3RlbmVyc1t0eXBlXTtcbiAgICBjb25zdCBudW1TdGVwcyA9IGFuaW1zLmR1cmF0aW9uO1xuICAgIGNhbGxiYWNrcy5mb3JFYWNoKGZuID0+IGZuKHtcbiAgICAgIGNoYXJ0LFxuICAgICAgaW5pdGlhbDogYW5pbXMuaW5pdGlhbCxcbiAgICAgIG51bVN0ZXBzLFxuICAgICAgY3VycmVudFN0ZXA6IE1hdGgubWluKGRhdGUgLSBhbmltcy5zdGFydCwgbnVtU3RlcHMpXG4gICAgfSkpO1xuICB9XG4gIF9yZWZyZXNoKCkge1xuICAgIGlmICh0aGlzLl9yZXF1ZXN0KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMuX3J1bm5pbmcgPSB0cnVlO1xuICAgIHRoaXMuX3JlcXVlc3QgPSByZXF1ZXN0QW5pbUZyYW1lLmNhbGwod2luZG93LCAoKSA9PiB7XG4gICAgICB0aGlzLl91cGRhdGUoKTtcbiAgICAgIHRoaXMuX3JlcXVlc3QgPSBudWxsO1xuICAgICAgaWYgKHRoaXMuX3J1bm5pbmcpIHtcbiAgICAgICAgdGhpcy5fcmVmcmVzaCgpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG4gIF91cGRhdGUoZGF0ZSA9IERhdGUubm93KCkpIHtcbiAgICBsZXQgcmVtYWluaW5nID0gMDtcbiAgICB0aGlzLl9jaGFydHMuZm9yRWFjaCgoYW5pbXMsIGNoYXJ0KSA9PiB7XG4gICAgICBpZiAoIWFuaW1zLnJ1bm5pbmcgfHwgIWFuaW1zLml0ZW1zLmxlbmd0aCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBjb25zdCBpdGVtcyA9IGFuaW1zLml0ZW1zO1xuICAgICAgbGV0IGkgPSBpdGVtcy5sZW5ndGggLSAxO1xuICAgICAgbGV0IGRyYXcgPSBmYWxzZTtcbiAgICAgIGxldCBpdGVtO1xuICAgICAgZm9yICg7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIGl0ZW0gPSBpdGVtc1tpXTtcbiAgICAgICAgaWYgKGl0ZW0uX2FjdGl2ZSkge1xuICAgICAgICAgIGlmIChpdGVtLl90b3RhbCA+IGFuaW1zLmR1cmF0aW9uKSB7XG4gICAgICAgICAgICBhbmltcy5kdXJhdGlvbiA9IGl0ZW0uX3RvdGFsO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpdGVtLnRpY2soZGF0ZSk7XG4gICAgICAgICAgZHJhdyA9IHRydWU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbXNbaV0gPSBpdGVtc1tpdGVtcy5sZW5ndGggLSAxXTtcbiAgICAgICAgICBpdGVtcy5wb3AoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGRyYXcpIHtcbiAgICAgICAgY2hhcnQuZHJhdygpO1xuICAgICAgICB0aGlzLl9ub3RpZnkoY2hhcnQsIGFuaW1zLCBkYXRlLCAncHJvZ3Jlc3MnKTtcbiAgICAgIH1cbiAgICAgIGlmICghaXRlbXMubGVuZ3RoKSB7XG4gICAgICAgIGFuaW1zLnJ1bm5pbmcgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5fbm90aWZ5KGNoYXJ0LCBhbmltcywgZGF0ZSwgJ2NvbXBsZXRlJyk7XG4gICAgICAgIGFuaW1zLmluaXRpYWwgPSBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHJlbWFpbmluZyArPSBpdGVtcy5sZW5ndGg7XG4gICAgfSk7XG4gICAgdGhpcy5fbGFzdERhdGUgPSBkYXRlO1xuICAgIGlmIChyZW1haW5pbmcgPT09IDApIHtcbiAgICAgIHRoaXMuX3J1bm5pbmcgPSBmYWxzZTtcbiAgICB9XG4gIH1cbiAgX2dldEFuaW1zKGNoYXJ0KSB7XG4gICAgY29uc3QgY2hhcnRzID0gdGhpcy5fY2hhcnRzO1xuICAgIGxldCBhbmltcyA9IGNoYXJ0cy5nZXQoY2hhcnQpO1xuICAgIGlmICghYW5pbXMpIHtcbiAgICAgIGFuaW1zID0ge1xuICAgICAgICBydW5uaW5nOiBmYWxzZSxcbiAgICAgICAgaW5pdGlhbDogdHJ1ZSxcbiAgICAgICAgaXRlbXM6IFtdLFxuICAgICAgICBsaXN0ZW5lcnM6IHtcbiAgICAgICAgICBjb21wbGV0ZTogW10sXG4gICAgICAgICAgcHJvZ3Jlc3M6IFtdXG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgICBjaGFydHMuc2V0KGNoYXJ0LCBhbmltcyk7XG4gICAgfVxuICAgIHJldHVybiBhbmltcztcbiAgfVxuICBsaXN0ZW4oY2hhcnQsIGV2ZW50LCBjYikge1xuICAgIHRoaXMuX2dldEFuaW1zKGNoYXJ0KS5saXN0ZW5lcnNbZXZlbnRdLnB1c2goY2IpO1xuICB9XG4gIGFkZChjaGFydCwgaXRlbXMpIHtcbiAgICBpZiAoIWl0ZW1zIHx8ICFpdGVtcy5sZW5ndGgpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy5fZ2V0QW5pbXMoY2hhcnQpLml0ZW1zLnB1c2goLi4uaXRlbXMpO1xuICB9XG4gIGhhcyhjaGFydCkge1xuICAgIHJldHVybiB0aGlzLl9nZXRBbmltcyhjaGFydCkuaXRlbXMubGVuZ3RoID4gMDtcbiAgfVxuICBzdGFydChjaGFydCkge1xuICAgIGNvbnN0IGFuaW1zID0gdGhpcy5fY2hhcnRzLmdldChjaGFydCk7XG4gICAgaWYgKCFhbmltcykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBhbmltcy5ydW5uaW5nID0gdHJ1ZTtcbiAgICBhbmltcy5zdGFydCA9IERhdGUubm93KCk7XG4gICAgYW5pbXMuZHVyYXRpb24gPSBhbmltcy5pdGVtcy5yZWR1Y2UoKGFjYywgY3VyKSA9PiBNYXRoLm1heChhY2MsIGN1ci5fZHVyYXRpb24pLCAwKTtcbiAgICB0aGlzLl9yZWZyZXNoKCk7XG4gIH1cbiAgcnVubmluZyhjaGFydCkge1xuICAgIGlmICghdGhpcy5fcnVubmluZykge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBjb25zdCBhbmltcyA9IHRoaXMuX2NoYXJ0cy5nZXQoY2hhcnQpO1xuICAgIGlmICghYW5pbXMgfHwgIWFuaW1zLnJ1bm5pbmcgfHwgIWFuaW1zLml0ZW1zLmxlbmd0aCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICBzdG9wKGNoYXJ0KSB7XG4gICAgY29uc3QgYW5pbXMgPSB0aGlzLl9jaGFydHMuZ2V0KGNoYXJ0KTtcbiAgICBpZiAoIWFuaW1zIHx8ICFhbmltcy5pdGVtcy5sZW5ndGgpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgaXRlbXMgPSBhbmltcy5pdGVtcztcbiAgICBsZXQgaSA9IGl0ZW1zLmxlbmd0aCAtIDE7XG4gICAgZm9yICg7IGkgPj0gMDsgLS1pKSB7XG4gICAgICBpdGVtc1tpXS5jYW5jZWwoKTtcbiAgICB9XG4gICAgYW5pbXMuaXRlbXMgPSBbXTtcbiAgICB0aGlzLl9ub3RpZnkoY2hhcnQsIGFuaW1zLCBEYXRlLm5vdygpLCAnY29tcGxldGUnKTtcbiAgfVxuICByZW1vdmUoY2hhcnQpIHtcbiAgICByZXR1cm4gdGhpcy5fY2hhcnRzLmRlbGV0ZShjaGFydCk7XG4gIH1cbn1cbnZhciBhbmltYXRvciA9IG5ldyBBbmltYXRvcigpO1xuXG5jb25zdCB0cmFuc3BhcmVudCA9ICd0cmFuc3BhcmVudCc7XG5jb25zdCBpbnRlcnBvbGF0b3JzID0ge1xuICBib29sZWFuKGZyb20sIHRvLCBmYWN0b3IpIHtcbiAgICByZXR1cm4gZmFjdG9yID4gMC41ID8gdG8gOiBmcm9tO1xuICB9LFxuICBjb2xvcihmcm9tLCB0bywgZmFjdG9yKSB7XG4gICAgY29uc3QgYzAgPSBjb2xvcihmcm9tIHx8IHRyYW5zcGFyZW50KTtcbiAgICBjb25zdCBjMSA9IGMwLnZhbGlkICYmIGNvbG9yKHRvIHx8IHRyYW5zcGFyZW50KTtcbiAgICByZXR1cm4gYzEgJiYgYzEudmFsaWRcbiAgICAgID8gYzEubWl4KGMwLCBmYWN0b3IpLmhleFN0cmluZygpXG4gICAgICA6IHRvO1xuICB9LFxuICBudW1iZXIoZnJvbSwgdG8sIGZhY3Rvcikge1xuICAgIHJldHVybiBmcm9tICsgKHRvIC0gZnJvbSkgKiBmYWN0b3I7XG4gIH1cbn07XG5jbGFzcyBBbmltYXRpb24ge1xuICBjb25zdHJ1Y3RvcihjZmcsIHRhcmdldCwgcHJvcCwgdG8pIHtcbiAgICBjb25zdCBjdXJyZW50VmFsdWUgPSB0YXJnZXRbcHJvcF07XG4gICAgdG8gPSByZXNvbHZlKFtjZmcudG8sIHRvLCBjdXJyZW50VmFsdWUsIGNmZy5mcm9tXSk7XG4gICAgY29uc3QgZnJvbSA9IHJlc29sdmUoW2NmZy5mcm9tLCBjdXJyZW50VmFsdWUsIHRvXSk7XG4gICAgdGhpcy5fYWN0aXZlID0gdHJ1ZTtcbiAgICB0aGlzLl9mbiA9IGNmZy5mbiB8fCBpbnRlcnBvbGF0b3JzW2NmZy50eXBlIHx8IHR5cGVvZiBmcm9tXTtcbiAgICB0aGlzLl9lYXNpbmcgPSBlZmZlY3RzW2NmZy5lYXNpbmddIHx8IGVmZmVjdHMubGluZWFyO1xuICAgIHRoaXMuX3N0YXJ0ID0gTWF0aC5mbG9vcihEYXRlLm5vdygpICsgKGNmZy5kZWxheSB8fCAwKSk7XG4gICAgdGhpcy5fZHVyYXRpb24gPSB0aGlzLl90b3RhbCA9IE1hdGguZmxvb3IoY2ZnLmR1cmF0aW9uKTtcbiAgICB0aGlzLl9sb29wID0gISFjZmcubG9vcDtcbiAgICB0aGlzLl90YXJnZXQgPSB0YXJnZXQ7XG4gICAgdGhpcy5fcHJvcCA9IHByb3A7XG4gICAgdGhpcy5fZnJvbSA9IGZyb207XG4gICAgdGhpcy5fdG8gPSB0bztcbiAgICB0aGlzLl9wcm9taXNlcyA9IHVuZGVmaW5lZDtcbiAgfVxuICBhY3RpdmUoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2FjdGl2ZTtcbiAgfVxuICB1cGRhdGUoY2ZnLCB0bywgZGF0ZSkge1xuICAgIGlmICh0aGlzLl9hY3RpdmUpIHtcbiAgICAgIHRoaXMuX25vdGlmeShmYWxzZSk7XG4gICAgICBjb25zdCBjdXJyZW50VmFsdWUgPSB0aGlzLl90YXJnZXRbdGhpcy5fcHJvcF07XG4gICAgICBjb25zdCBlbGFwc2VkID0gZGF0ZSAtIHRoaXMuX3N0YXJ0O1xuICAgICAgY29uc3QgcmVtYWluID0gdGhpcy5fZHVyYXRpb24gLSBlbGFwc2VkO1xuICAgICAgdGhpcy5fc3RhcnQgPSBkYXRlO1xuICAgICAgdGhpcy5fZHVyYXRpb24gPSBNYXRoLmZsb29yKE1hdGgubWF4KHJlbWFpbiwgY2ZnLmR1cmF0aW9uKSk7XG4gICAgICB0aGlzLl90b3RhbCArPSBlbGFwc2VkO1xuICAgICAgdGhpcy5fbG9vcCA9ICEhY2ZnLmxvb3A7XG4gICAgICB0aGlzLl90byA9IHJlc29sdmUoW2NmZy50bywgdG8sIGN1cnJlbnRWYWx1ZSwgY2ZnLmZyb21dKTtcbiAgICAgIHRoaXMuX2Zyb20gPSByZXNvbHZlKFtjZmcuZnJvbSwgY3VycmVudFZhbHVlLCB0b10pO1xuICAgIH1cbiAgfVxuICBjYW5jZWwoKSB7XG4gICAgaWYgKHRoaXMuX2FjdGl2ZSkge1xuICAgICAgdGhpcy50aWNrKERhdGUubm93KCkpO1xuICAgICAgdGhpcy5fYWN0aXZlID0gZmFsc2U7XG4gICAgICB0aGlzLl9ub3RpZnkoZmFsc2UpO1xuICAgIH1cbiAgfVxuICB0aWNrKGRhdGUpIHtcbiAgICBjb25zdCBlbGFwc2VkID0gZGF0ZSAtIHRoaXMuX3N0YXJ0O1xuICAgIGNvbnN0IGR1cmF0aW9uID0gdGhpcy5fZHVyYXRpb247XG4gICAgY29uc3QgcHJvcCA9IHRoaXMuX3Byb3A7XG4gICAgY29uc3QgZnJvbSA9IHRoaXMuX2Zyb207XG4gICAgY29uc3QgbG9vcCA9IHRoaXMuX2xvb3A7XG4gICAgY29uc3QgdG8gPSB0aGlzLl90bztcbiAgICBsZXQgZmFjdG9yO1xuICAgIHRoaXMuX2FjdGl2ZSA9IGZyb20gIT09IHRvICYmIChsb29wIHx8IChlbGFwc2VkIDwgZHVyYXRpb24pKTtcbiAgICBpZiAoIXRoaXMuX2FjdGl2ZSkge1xuICAgICAgdGhpcy5fdGFyZ2V0W3Byb3BdID0gdG87XG4gICAgICB0aGlzLl9ub3RpZnkodHJ1ZSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChlbGFwc2VkIDwgMCkge1xuICAgICAgdGhpcy5fdGFyZ2V0W3Byb3BdID0gZnJvbTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZmFjdG9yID0gKGVsYXBzZWQgLyBkdXJhdGlvbikgJSAyO1xuICAgIGZhY3RvciA9IGxvb3AgJiYgZmFjdG9yID4gMSA/IDIgLSBmYWN0b3IgOiBmYWN0b3I7XG4gICAgZmFjdG9yID0gdGhpcy5fZWFzaW5nKE1hdGgubWluKDEsIE1hdGgubWF4KDAsIGZhY3RvcikpKTtcbiAgICB0aGlzLl90YXJnZXRbcHJvcF0gPSB0aGlzLl9mbihmcm9tLCB0bywgZmFjdG9yKTtcbiAgfVxuICB3YWl0KCkge1xuICAgIGNvbnN0IHByb21pc2VzID0gdGhpcy5fcHJvbWlzZXMgfHwgKHRoaXMuX3Byb21pc2VzID0gW10pO1xuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzLCByZWopID0+IHtcbiAgICAgIHByb21pc2VzLnB1c2goe3JlcywgcmVqfSk7XG4gICAgfSk7XG4gIH1cbiAgX25vdGlmeShyZXNvbHZlZCkge1xuICAgIGNvbnN0IG1ldGhvZCA9IHJlc29sdmVkID8gJ3JlcycgOiAncmVqJztcbiAgICBjb25zdCBwcm9taXNlcyA9IHRoaXMuX3Byb21pc2VzIHx8IFtdO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcHJvbWlzZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHByb21pc2VzW2ldW21ldGhvZF0oKTtcbiAgICB9XG4gIH1cbn1cblxuY29uc3QgbnVtYmVycyA9IFsneCcsICd5JywgJ2JvcmRlcldpZHRoJywgJ3JhZGl1cycsICd0ZW5zaW9uJ107XG5jb25zdCBjb2xvcnMgPSBbJ2NvbG9yJywgJ2JvcmRlckNvbG9yJywgJ2JhY2tncm91bmRDb2xvciddO1xuZGVmYXVsdHMuc2V0KCdhbmltYXRpb24nLCB7XG4gIGRlbGF5OiB1bmRlZmluZWQsXG4gIGR1cmF0aW9uOiAxMDAwLFxuICBlYXNpbmc6ICdlYXNlT3V0UXVhcnQnLFxuICBmbjogdW5kZWZpbmVkLFxuICBmcm9tOiB1bmRlZmluZWQsXG4gIGxvb3A6IHVuZGVmaW5lZCxcbiAgdG86IHVuZGVmaW5lZCxcbiAgdHlwZTogdW5kZWZpbmVkLFxufSk7XG5jb25zdCBhbmltYXRpb25PcHRpb25zID0gT2JqZWN0LmtleXMoZGVmYXVsdHMuYW5pbWF0aW9uKTtcbmRlZmF1bHRzLmRlc2NyaWJlKCdhbmltYXRpb24nLCB7XG4gIF9mYWxsYmFjazogZmFsc2UsXG4gIF9pbmRleGFibGU6IGZhbHNlLFxuICBfc2NyaXB0YWJsZTogKG5hbWUpID0+IG5hbWUgIT09ICdvblByb2dyZXNzJyAmJiBuYW1lICE9PSAnb25Db21wbGV0ZScgJiYgbmFtZSAhPT0gJ2ZuJyxcbn0pO1xuZGVmYXVsdHMuc2V0KCdhbmltYXRpb25zJywge1xuICBjb2xvcnM6IHtcbiAgICB0eXBlOiAnY29sb3InLFxuICAgIHByb3BlcnRpZXM6IGNvbG9yc1xuICB9LFxuICBudW1iZXJzOiB7XG4gICAgdHlwZTogJ251bWJlcicsXG4gICAgcHJvcGVydGllczogbnVtYmVyc1xuICB9LFxufSk7XG5kZWZhdWx0cy5kZXNjcmliZSgnYW5pbWF0aW9ucycsIHtcbiAgX2ZhbGxiYWNrOiAnYW5pbWF0aW9uJyxcbn0pO1xuZGVmYXVsdHMuc2V0KCd0cmFuc2l0aW9ucycsIHtcbiAgYWN0aXZlOiB7XG4gICAgYW5pbWF0aW9uOiB7XG4gICAgICBkdXJhdGlvbjogNDAwXG4gICAgfVxuICB9LFxuICByZXNpemU6IHtcbiAgICBhbmltYXRpb246IHtcbiAgICAgIGR1cmF0aW9uOiAwXG4gICAgfVxuICB9LFxuICBzaG93OiB7XG4gICAgYW5pbWF0aW9uczoge1xuICAgICAgY29sb3JzOiB7XG4gICAgICAgIGZyb206ICd0cmFuc3BhcmVudCdcbiAgICAgIH0sXG4gICAgICB2aXNpYmxlOiB7XG4gICAgICAgIHR5cGU6ICdib29sZWFuJyxcbiAgICAgICAgZHVyYXRpb246IDBcbiAgICAgIH0sXG4gICAgfVxuICB9LFxuICBoaWRlOiB7XG4gICAgYW5pbWF0aW9uczoge1xuICAgICAgY29sb3JzOiB7XG4gICAgICAgIHRvOiAndHJhbnNwYXJlbnQnXG4gICAgICB9LFxuICAgICAgdmlzaWJsZToge1xuICAgICAgICB0eXBlOiAnYm9vbGVhbicsXG4gICAgICAgIGVhc2luZzogJ2xpbmVhcicsXG4gICAgICAgIGZuOiB2ID0+IHYgfCAwXG4gICAgICB9LFxuICAgIH1cbiAgfVxufSk7XG5jbGFzcyBBbmltYXRpb25zIHtcbiAgY29uc3RydWN0b3IoY2hhcnQsIGNvbmZpZykge1xuICAgIHRoaXMuX2NoYXJ0ID0gY2hhcnQ7XG4gICAgdGhpcy5fcHJvcGVydGllcyA9IG5ldyBNYXAoKTtcbiAgICB0aGlzLmNvbmZpZ3VyZShjb25maWcpO1xuICB9XG4gIGNvbmZpZ3VyZShjb25maWcpIHtcbiAgICBpZiAoIWlzT2JqZWN0KGNvbmZpZykpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgYW5pbWF0ZWRQcm9wcyA9IHRoaXMuX3Byb3BlcnRpZXM7XG4gICAgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoY29uZmlnKS5mb3JFYWNoKGtleSA9PiB7XG4gICAgICBjb25zdCBjZmcgPSBjb25maWdba2V5XTtcbiAgICAgIGlmICghaXNPYmplY3QoY2ZnKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBjb25zdCByZXNvbHZlZCA9IHt9O1xuICAgICAgZm9yIChjb25zdCBvcHRpb24gb2YgYW5pbWF0aW9uT3B0aW9ucykge1xuICAgICAgICByZXNvbHZlZFtvcHRpb25dID0gY2ZnW29wdGlvbl07XG4gICAgICB9XG4gICAgICAoaXNBcnJheShjZmcucHJvcGVydGllcykgJiYgY2ZnLnByb3BlcnRpZXMgfHwgW2tleV0pLmZvckVhY2goKHByb3ApID0+IHtcbiAgICAgICAgaWYgKHByb3AgPT09IGtleSB8fCAhYW5pbWF0ZWRQcm9wcy5oYXMocHJvcCkpIHtcbiAgICAgICAgICBhbmltYXRlZFByb3BzLnNldChwcm9wLCByZXNvbHZlZCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG4gIF9hbmltYXRlT3B0aW9ucyh0YXJnZXQsIHZhbHVlcykge1xuICAgIGNvbnN0IG5ld09wdGlvbnMgPSB2YWx1ZXMub3B0aW9ucztcbiAgICBjb25zdCBvcHRpb25zID0gcmVzb2x2ZVRhcmdldE9wdGlvbnModGFyZ2V0LCBuZXdPcHRpb25zKTtcbiAgICBpZiAoIW9wdGlvbnMpIHtcbiAgICAgIHJldHVybiBbXTtcbiAgICB9XG4gICAgY29uc3QgYW5pbWF0aW9ucyA9IHRoaXMuX2NyZWF0ZUFuaW1hdGlvbnMob3B0aW9ucywgbmV3T3B0aW9ucyk7XG4gICAgaWYgKG5ld09wdGlvbnMuJHNoYXJlZCkge1xuICAgICAgYXdhaXRBbGwodGFyZ2V0Lm9wdGlvbnMuJGFuaW1hdGlvbnMsIG5ld09wdGlvbnMpLnRoZW4oKCkgPT4ge1xuICAgICAgICB0YXJnZXQub3B0aW9ucyA9IG5ld09wdGlvbnM7XG4gICAgICB9LCAoKSA9PiB7XG4gICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIGFuaW1hdGlvbnM7XG4gIH1cbiAgX2NyZWF0ZUFuaW1hdGlvbnModGFyZ2V0LCB2YWx1ZXMpIHtcbiAgICBjb25zdCBhbmltYXRlZFByb3BzID0gdGhpcy5fcHJvcGVydGllcztcbiAgICBjb25zdCBhbmltYXRpb25zID0gW107XG4gICAgY29uc3QgcnVubmluZyA9IHRhcmdldC4kYW5pbWF0aW9ucyB8fCAodGFyZ2V0LiRhbmltYXRpb25zID0ge30pO1xuICAgIGNvbnN0IHByb3BzID0gT2JqZWN0LmtleXModmFsdWVzKTtcbiAgICBjb25zdCBkYXRlID0gRGF0ZS5ub3coKTtcbiAgICBsZXQgaTtcbiAgICBmb3IgKGkgPSBwcm9wcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgY29uc3QgcHJvcCA9IHByb3BzW2ldO1xuICAgICAgaWYgKHByb3AuY2hhckF0KDApID09PSAnJCcpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICBpZiAocHJvcCA9PT0gJ29wdGlvbnMnKSB7XG4gICAgICAgIGFuaW1hdGlvbnMucHVzaCguLi50aGlzLl9hbmltYXRlT3B0aW9ucyh0YXJnZXQsIHZhbHVlcykpO1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IHZhbHVlID0gdmFsdWVzW3Byb3BdO1xuICAgICAgbGV0IGFuaW1hdGlvbiA9IHJ1bm5pbmdbcHJvcF07XG4gICAgICBjb25zdCBjZmcgPSBhbmltYXRlZFByb3BzLmdldChwcm9wKTtcbiAgICAgIGlmIChhbmltYXRpb24pIHtcbiAgICAgICAgaWYgKGNmZyAmJiBhbmltYXRpb24uYWN0aXZlKCkpIHtcbiAgICAgICAgICBhbmltYXRpb24udXBkYXRlKGNmZywgdmFsdWUsIGRhdGUpO1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGFuaW1hdGlvbi5jYW5jZWwoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKCFjZmcgfHwgIWNmZy5kdXJhdGlvbikge1xuICAgICAgICB0YXJnZXRbcHJvcF0gPSB2YWx1ZTtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICBydW5uaW5nW3Byb3BdID0gYW5pbWF0aW9uID0gbmV3IEFuaW1hdGlvbihjZmcsIHRhcmdldCwgcHJvcCwgdmFsdWUpO1xuICAgICAgYW5pbWF0aW9ucy5wdXNoKGFuaW1hdGlvbik7XG4gICAgfVxuICAgIHJldHVybiBhbmltYXRpb25zO1xuICB9XG4gIHVwZGF0ZSh0YXJnZXQsIHZhbHVlcykge1xuICAgIGlmICh0aGlzLl9wcm9wZXJ0aWVzLnNpemUgPT09IDApIHtcbiAgICAgIE9iamVjdC5hc3NpZ24odGFyZ2V0LCB2YWx1ZXMpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBhbmltYXRpb25zID0gdGhpcy5fY3JlYXRlQW5pbWF0aW9ucyh0YXJnZXQsIHZhbHVlcyk7XG4gICAgaWYgKGFuaW1hdGlvbnMubGVuZ3RoKSB7XG4gICAgICBhbmltYXRvci5hZGQodGhpcy5fY2hhcnQsIGFuaW1hdGlvbnMpO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9XG59XG5mdW5jdGlvbiBhd2FpdEFsbChhbmltYXRpb25zLCBwcm9wZXJ0aWVzKSB7XG4gIGNvbnN0IHJ1bm5pbmcgPSBbXTtcbiAgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKHByb3BlcnRpZXMpO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcbiAgICBjb25zdCBhbmltID0gYW5pbWF0aW9uc1trZXlzW2ldXTtcbiAgICBpZiAoYW5pbSAmJiBhbmltLmFjdGl2ZSgpKSB7XG4gICAgICBydW5uaW5nLnB1c2goYW5pbS53YWl0KCkpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gUHJvbWlzZS5hbGwocnVubmluZyk7XG59XG5mdW5jdGlvbiByZXNvbHZlVGFyZ2V0T3B0aW9ucyh0YXJnZXQsIG5ld09wdGlvbnMpIHtcbiAgaWYgKCFuZXdPcHRpb25zKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGxldCBvcHRpb25zID0gdGFyZ2V0Lm9wdGlvbnM7XG4gIGlmICghb3B0aW9ucykge1xuICAgIHRhcmdldC5vcHRpb25zID0gbmV3T3B0aW9ucztcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKG9wdGlvbnMuJHNoYXJlZCkge1xuICAgIHRhcmdldC5vcHRpb25zID0gb3B0aW9ucyA9IE9iamVjdC5hc3NpZ24oe30sIG9wdGlvbnMsIHskc2hhcmVkOiBmYWxzZSwgJGFuaW1hdGlvbnM6IHt9fSk7XG4gIH1cbiAgcmV0dXJuIG9wdGlvbnM7XG59XG5cbmZ1bmN0aW9uIHNjYWxlQ2xpcChzY2FsZSwgYWxsb3dlZE92ZXJmbG93KSB7XG4gIGNvbnN0IG9wdHMgPSBzY2FsZSAmJiBzY2FsZS5vcHRpb25zIHx8IHt9O1xuICBjb25zdCByZXZlcnNlID0gb3B0cy5yZXZlcnNlO1xuICBjb25zdCBtaW4gPSBvcHRzLm1pbiA9PT0gdW5kZWZpbmVkID8gYWxsb3dlZE92ZXJmbG93IDogMDtcbiAgY29uc3QgbWF4ID0gb3B0cy5tYXggPT09IHVuZGVmaW5lZCA/IGFsbG93ZWRPdmVyZmxvdyA6IDA7XG4gIHJldHVybiB7XG4gICAgc3RhcnQ6IHJldmVyc2UgPyBtYXggOiBtaW4sXG4gICAgZW5kOiByZXZlcnNlID8gbWluIDogbWF4XG4gIH07XG59XG5mdW5jdGlvbiBkZWZhdWx0Q2xpcCh4U2NhbGUsIHlTY2FsZSwgYWxsb3dlZE92ZXJmbG93KSB7XG4gIGlmIChhbGxvd2VkT3ZlcmZsb3cgPT09IGZhbHNlKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGNvbnN0IHggPSBzY2FsZUNsaXAoeFNjYWxlLCBhbGxvd2VkT3ZlcmZsb3cpO1xuICBjb25zdCB5ID0gc2NhbGVDbGlwKHlTY2FsZSwgYWxsb3dlZE92ZXJmbG93KTtcbiAgcmV0dXJuIHtcbiAgICB0b3A6IHkuZW5kLFxuICAgIHJpZ2h0OiB4LmVuZCxcbiAgICBib3R0b206IHkuc3RhcnQsXG4gICAgbGVmdDogeC5zdGFydFxuICB9O1xufVxuZnVuY3Rpb24gdG9DbGlwKHZhbHVlKSB7XG4gIGxldCB0LCByLCBiLCBsO1xuICBpZiAoaXNPYmplY3QodmFsdWUpKSB7XG4gICAgdCA9IHZhbHVlLnRvcDtcbiAgICByID0gdmFsdWUucmlnaHQ7XG4gICAgYiA9IHZhbHVlLmJvdHRvbTtcbiAgICBsID0gdmFsdWUubGVmdDtcbiAgfSBlbHNlIHtcbiAgICB0ID0gciA9IGIgPSBsID0gdmFsdWU7XG4gIH1cbiAgcmV0dXJuIHtcbiAgICB0b3A6IHQsXG4gICAgcmlnaHQ6IHIsXG4gICAgYm90dG9tOiBiLFxuICAgIGxlZnQ6IGwsXG4gICAgZGlzYWJsZWQ6IHZhbHVlID09PSBmYWxzZVxuICB9O1xufVxuZnVuY3Rpb24gZ2V0U29ydGVkRGF0YXNldEluZGljZXMoY2hhcnQsIGZpbHRlclZpc2libGUpIHtcbiAgY29uc3Qga2V5cyA9IFtdO1xuICBjb25zdCBtZXRhc2V0cyA9IGNoYXJ0Ll9nZXRTb3J0ZWREYXRhc2V0TWV0YXMoZmlsdGVyVmlzaWJsZSk7XG4gIGxldCBpLCBpbGVuO1xuICBmb3IgKGkgPSAwLCBpbGVuID0gbWV0YXNldHMubGVuZ3RoOyBpIDwgaWxlbjsgKytpKSB7XG4gICAga2V5cy5wdXNoKG1ldGFzZXRzW2ldLmluZGV4KTtcbiAgfVxuICByZXR1cm4ga2V5cztcbn1cbmZ1bmN0aW9uIGFwcGx5U3RhY2soc3RhY2ssIHZhbHVlLCBkc0luZGV4LCBvcHRpb25zID0ge30pIHtcbiAgY29uc3Qga2V5cyA9IHN0YWNrLmtleXM7XG4gIGNvbnN0IHNpbmdsZU1vZGUgPSBvcHRpb25zLm1vZGUgPT09ICdzaW5nbGUnO1xuICBsZXQgaSwgaWxlbiwgZGF0YXNldEluZGV4LCBvdGhlclZhbHVlO1xuICBpZiAodmFsdWUgPT09IG51bGwpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgZm9yIChpID0gMCwgaWxlbiA9IGtleXMubGVuZ3RoOyBpIDwgaWxlbjsgKytpKSB7XG4gICAgZGF0YXNldEluZGV4ID0gK2tleXNbaV07XG4gICAgaWYgKGRhdGFzZXRJbmRleCA9PT0gZHNJbmRleCkge1xuICAgICAgaWYgKG9wdGlvbnMuYWxsKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIG90aGVyVmFsdWUgPSBzdGFjay52YWx1ZXNbZGF0YXNldEluZGV4XTtcbiAgICBpZiAoaXNOdW1iZXJGaW5pdGUob3RoZXJWYWx1ZSkgJiYgKHNpbmdsZU1vZGUgfHwgKHZhbHVlID09PSAwIHx8IHNpZ24odmFsdWUpID09PSBzaWduKG90aGVyVmFsdWUpKSkpIHtcbiAgICAgIHZhbHVlICs9IG90aGVyVmFsdWU7XG4gICAgfVxuICB9XG4gIHJldHVybiB2YWx1ZTtcbn1cbmZ1bmN0aW9uIGNvbnZlcnRPYmplY3REYXRhVG9BcnJheShkYXRhKSB7XG4gIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyhkYXRhKTtcbiAgY29uc3QgYWRhdGEgPSBuZXcgQXJyYXkoa2V5cy5sZW5ndGgpO1xuICBsZXQgaSwgaWxlbiwga2V5O1xuICBmb3IgKGkgPSAwLCBpbGVuID0ga2V5cy5sZW5ndGg7IGkgPCBpbGVuOyArK2kpIHtcbiAgICBrZXkgPSBrZXlzW2ldO1xuICAgIGFkYXRhW2ldID0ge1xuICAgICAgeDoga2V5LFxuICAgICAgeTogZGF0YVtrZXldXG4gICAgfTtcbiAgfVxuICByZXR1cm4gYWRhdGE7XG59XG5mdW5jdGlvbiBpc1N0YWNrZWQoc2NhbGUsIG1ldGEpIHtcbiAgY29uc3Qgc3RhY2tlZCA9IHNjYWxlICYmIHNjYWxlLm9wdGlvbnMuc3RhY2tlZDtcbiAgcmV0dXJuIHN0YWNrZWQgfHwgKHN0YWNrZWQgPT09IHVuZGVmaW5lZCAmJiBtZXRhLnN0YWNrICE9PSB1bmRlZmluZWQpO1xufVxuZnVuY3Rpb24gZ2V0U3RhY2tLZXkoaW5kZXhTY2FsZSwgdmFsdWVTY2FsZSwgbWV0YSkge1xuICByZXR1cm4gYCR7aW5kZXhTY2FsZS5pZH0uJHt2YWx1ZVNjYWxlLmlkfS4ke21ldGEuc3RhY2sgfHwgbWV0YS50eXBlfWA7XG59XG5mdW5jdGlvbiBnZXRVc2VyQm91bmRzKHNjYWxlKSB7XG4gIGNvbnN0IHttaW4sIG1heCwgbWluRGVmaW5lZCwgbWF4RGVmaW5lZH0gPSBzY2FsZS5nZXRVc2VyQm91bmRzKCk7XG4gIHJldHVybiB7XG4gICAgbWluOiBtaW5EZWZpbmVkID8gbWluIDogTnVtYmVyLk5FR0FUSVZFX0lORklOSVRZLFxuICAgIG1heDogbWF4RGVmaW5lZCA/IG1heCA6IE51bWJlci5QT1NJVElWRV9JTkZJTklUWVxuICB9O1xufVxuZnVuY3Rpb24gZ2V0T3JDcmVhdGVTdGFjayhzdGFja3MsIHN0YWNrS2V5LCBpbmRleFZhbHVlKSB7XG4gIGNvbnN0IHN1YlN0YWNrID0gc3RhY2tzW3N0YWNrS2V5XSB8fCAoc3RhY2tzW3N0YWNrS2V5XSA9IHt9KTtcbiAgcmV0dXJuIHN1YlN0YWNrW2luZGV4VmFsdWVdIHx8IChzdWJTdGFja1tpbmRleFZhbHVlXSA9IHt9KTtcbn1cbmZ1bmN0aW9uIGdldExhc3RJbmRleEluU3RhY2soc3RhY2ssIHZTY2FsZSwgcG9zaXRpdmUsIHR5cGUpIHtcbiAgZm9yIChjb25zdCBtZXRhIG9mIHZTY2FsZS5nZXRNYXRjaGluZ1Zpc2libGVNZXRhcyh0eXBlKS5yZXZlcnNlKCkpIHtcbiAgICBjb25zdCB2YWx1ZSA9IHN0YWNrW21ldGEuaW5kZXhdO1xuICAgIGlmICgocG9zaXRpdmUgJiYgdmFsdWUgPiAwKSB8fCAoIXBvc2l0aXZlICYmIHZhbHVlIDwgMCkpIHtcbiAgICAgIHJldHVybiBtZXRhLmluZGV4O1xuICAgIH1cbiAgfVxuICByZXR1cm4gbnVsbDtcbn1cbmZ1bmN0aW9uIHVwZGF0ZVN0YWNrcyhjb250cm9sbGVyLCBwYXJzZWQpIHtcbiAgY29uc3Qge2NoYXJ0LCBfY2FjaGVkTWV0YTogbWV0YX0gPSBjb250cm9sbGVyO1xuICBjb25zdCBzdGFja3MgPSBjaGFydC5fc3RhY2tzIHx8IChjaGFydC5fc3RhY2tzID0ge30pO1xuICBjb25zdCB7aVNjYWxlLCB2U2NhbGUsIGluZGV4OiBkYXRhc2V0SW5kZXh9ID0gbWV0YTtcbiAgY29uc3QgaUF4aXMgPSBpU2NhbGUuYXhpcztcbiAgY29uc3QgdkF4aXMgPSB2U2NhbGUuYXhpcztcbiAgY29uc3Qga2V5ID0gZ2V0U3RhY2tLZXkoaVNjYWxlLCB2U2NhbGUsIG1ldGEpO1xuICBjb25zdCBpbGVuID0gcGFyc2VkLmxlbmd0aDtcbiAgbGV0IHN0YWNrO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGlsZW47ICsraSkge1xuICAgIGNvbnN0IGl0ZW0gPSBwYXJzZWRbaV07XG4gICAgY29uc3Qge1tpQXhpc106IGluZGV4LCBbdkF4aXNdOiB2YWx1ZX0gPSBpdGVtO1xuICAgIGNvbnN0IGl0ZW1TdGFja3MgPSBpdGVtLl9zdGFja3MgfHwgKGl0ZW0uX3N0YWNrcyA9IHt9KTtcbiAgICBzdGFjayA9IGl0ZW1TdGFja3NbdkF4aXNdID0gZ2V0T3JDcmVhdGVTdGFjayhzdGFja3MsIGtleSwgaW5kZXgpO1xuICAgIHN0YWNrW2RhdGFzZXRJbmRleF0gPSB2YWx1ZTtcbiAgICBzdGFjay5fdG9wID0gZ2V0TGFzdEluZGV4SW5TdGFjayhzdGFjaywgdlNjYWxlLCB0cnVlLCBtZXRhLnR5cGUpO1xuICAgIHN0YWNrLl9ib3R0b20gPSBnZXRMYXN0SW5kZXhJblN0YWNrKHN0YWNrLCB2U2NhbGUsIGZhbHNlLCBtZXRhLnR5cGUpO1xuICB9XG59XG5mdW5jdGlvbiBnZXRGaXJzdFNjYWxlSWQoY2hhcnQsIGF4aXMpIHtcbiAgY29uc3Qgc2NhbGVzID0gY2hhcnQuc2NhbGVzO1xuICByZXR1cm4gT2JqZWN0LmtleXMoc2NhbGVzKS5maWx0ZXIoa2V5ID0+IHNjYWxlc1trZXldLmF4aXMgPT09IGF4aXMpLnNoaWZ0KCk7XG59XG5mdW5jdGlvbiBjcmVhdGVEYXRhc2V0Q29udGV4dChwYXJlbnQsIGluZGV4KSB7XG4gIHJldHVybiBjcmVhdGVDb250ZXh0KHBhcmVudCxcbiAgICB7XG4gICAgICBhY3RpdmU6IGZhbHNlLFxuICAgICAgZGF0YXNldDogdW5kZWZpbmVkLFxuICAgICAgZGF0YXNldEluZGV4OiBpbmRleCxcbiAgICAgIGluZGV4LFxuICAgICAgbW9kZTogJ2RlZmF1bHQnLFxuICAgICAgdHlwZTogJ2RhdGFzZXQnXG4gICAgfVxuICApO1xufVxuZnVuY3Rpb24gY3JlYXRlRGF0YUNvbnRleHQocGFyZW50LCBpbmRleCwgZWxlbWVudCkge1xuICByZXR1cm4gY3JlYXRlQ29udGV4dChwYXJlbnQsIHtcbiAgICBhY3RpdmU6IGZhbHNlLFxuICAgIGRhdGFJbmRleDogaW5kZXgsXG4gICAgcGFyc2VkOiB1bmRlZmluZWQsXG4gICAgcmF3OiB1bmRlZmluZWQsXG4gICAgZWxlbWVudCxcbiAgICBpbmRleCxcbiAgICBtb2RlOiAnZGVmYXVsdCcsXG4gICAgdHlwZTogJ2RhdGEnXG4gIH0pO1xufVxuZnVuY3Rpb24gY2xlYXJTdGFja3MobWV0YSwgaXRlbXMpIHtcbiAgY29uc3QgZGF0YXNldEluZGV4ID0gbWV0YS5jb250cm9sbGVyLmluZGV4O1xuICBjb25zdCBheGlzID0gbWV0YS52U2NhbGUgJiYgbWV0YS52U2NhbGUuYXhpcztcbiAgaWYgKCFheGlzKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGl0ZW1zID0gaXRlbXMgfHwgbWV0YS5fcGFyc2VkO1xuICBmb3IgKGNvbnN0IHBhcnNlZCBvZiBpdGVtcykge1xuICAgIGNvbnN0IHN0YWNrcyA9IHBhcnNlZC5fc3RhY2tzO1xuICAgIGlmICghc3RhY2tzIHx8IHN0YWNrc1theGlzXSA9PT0gdW5kZWZpbmVkIHx8IHN0YWNrc1theGlzXVtkYXRhc2V0SW5kZXhdID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZGVsZXRlIHN0YWNrc1theGlzXVtkYXRhc2V0SW5kZXhdO1xuICB9XG59XG5jb25zdCBpc0RpcmVjdFVwZGF0ZU1vZGUgPSAobW9kZSkgPT4gbW9kZSA9PT0gJ3Jlc2V0JyB8fCBtb2RlID09PSAnbm9uZSc7XG5jb25zdCBjbG9uZUlmTm90U2hhcmVkID0gKGNhY2hlZCwgc2hhcmVkKSA9PiBzaGFyZWQgPyBjYWNoZWQgOiBPYmplY3QuYXNzaWduKHt9LCBjYWNoZWQpO1xuY29uc3QgY3JlYXRlU3RhY2sgPSAoY2FuU3RhY2ssIG1ldGEsIGNoYXJ0KSA9PiBjYW5TdGFjayAmJiAhbWV0YS5oaWRkZW4gJiYgbWV0YS5fc3RhY2tlZFxuICAmJiB7a2V5czogZ2V0U29ydGVkRGF0YXNldEluZGljZXMoY2hhcnQsIHRydWUpLCB2YWx1ZXM6IG51bGx9O1xuY2xhc3MgRGF0YXNldENvbnRyb2xsZXIge1xuICBjb25zdHJ1Y3RvcihjaGFydCwgZGF0YXNldEluZGV4KSB7XG4gICAgdGhpcy5jaGFydCA9IGNoYXJ0O1xuICAgIHRoaXMuX2N0eCA9IGNoYXJ0LmN0eDtcbiAgICB0aGlzLmluZGV4ID0gZGF0YXNldEluZGV4O1xuICAgIHRoaXMuX2NhY2hlZERhdGFPcHRzID0ge307XG4gICAgdGhpcy5fY2FjaGVkTWV0YSA9IHRoaXMuZ2V0TWV0YSgpO1xuICAgIHRoaXMuX3R5cGUgPSB0aGlzLl9jYWNoZWRNZXRhLnR5cGU7XG4gICAgdGhpcy5vcHRpb25zID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuX3BhcnNpbmcgPSBmYWxzZTtcbiAgICB0aGlzLl9kYXRhID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuX29iamVjdERhdGEgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5fc2hhcmVkT3B0aW9ucyA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLl9kcmF3U3RhcnQgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5fZHJhd0NvdW50ID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuZW5hYmxlT3B0aW9uU2hhcmluZyA9IGZhbHNlO1xuICAgIHRoaXMuJGNvbnRleHQgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5fc3luY0xpc3QgPSBbXTtcbiAgICB0aGlzLmluaXRpYWxpemUoKTtcbiAgfVxuICBpbml0aWFsaXplKCkge1xuICAgIGNvbnN0IG1ldGEgPSB0aGlzLl9jYWNoZWRNZXRhO1xuICAgIHRoaXMuY29uZmlndXJlKCk7XG4gICAgdGhpcy5saW5rU2NhbGVzKCk7XG4gICAgbWV0YS5fc3RhY2tlZCA9IGlzU3RhY2tlZChtZXRhLnZTY2FsZSwgbWV0YSk7XG4gICAgdGhpcy5hZGRFbGVtZW50cygpO1xuICB9XG4gIHVwZGF0ZUluZGV4KGRhdGFzZXRJbmRleCkge1xuICAgIGlmICh0aGlzLmluZGV4ICE9PSBkYXRhc2V0SW5kZXgpIHtcbiAgICAgIGNsZWFyU3RhY2tzKHRoaXMuX2NhY2hlZE1ldGEpO1xuICAgIH1cbiAgICB0aGlzLmluZGV4ID0gZGF0YXNldEluZGV4O1xuICB9XG4gIGxpbmtTY2FsZXMoKSB7XG4gICAgY29uc3QgY2hhcnQgPSB0aGlzLmNoYXJ0O1xuICAgIGNvbnN0IG1ldGEgPSB0aGlzLl9jYWNoZWRNZXRhO1xuICAgIGNvbnN0IGRhdGFzZXQgPSB0aGlzLmdldERhdGFzZXQoKTtcbiAgICBjb25zdCBjaG9vc2VJZCA9IChheGlzLCB4LCB5LCByKSA9PiBheGlzID09PSAneCcgPyB4IDogYXhpcyA9PT0gJ3InID8gciA6IHk7XG4gICAgY29uc3QgeGlkID0gbWV0YS54QXhpc0lEID0gdmFsdWVPckRlZmF1bHQoZGF0YXNldC54QXhpc0lELCBnZXRGaXJzdFNjYWxlSWQoY2hhcnQsICd4JykpO1xuICAgIGNvbnN0IHlpZCA9IG1ldGEueUF4aXNJRCA9IHZhbHVlT3JEZWZhdWx0KGRhdGFzZXQueUF4aXNJRCwgZ2V0Rmlyc3RTY2FsZUlkKGNoYXJ0LCAneScpKTtcbiAgICBjb25zdCByaWQgPSBtZXRhLnJBeGlzSUQgPSB2YWx1ZU9yRGVmYXVsdChkYXRhc2V0LnJBeGlzSUQsIGdldEZpcnN0U2NhbGVJZChjaGFydCwgJ3InKSk7XG4gICAgY29uc3QgaW5kZXhBeGlzID0gbWV0YS5pbmRleEF4aXM7XG4gICAgY29uc3QgaWlkID0gbWV0YS5pQXhpc0lEID0gY2hvb3NlSWQoaW5kZXhBeGlzLCB4aWQsIHlpZCwgcmlkKTtcbiAgICBjb25zdCB2aWQgPSBtZXRhLnZBeGlzSUQgPSBjaG9vc2VJZChpbmRleEF4aXMsIHlpZCwgeGlkLCByaWQpO1xuICAgIG1ldGEueFNjYWxlID0gdGhpcy5nZXRTY2FsZUZvcklkKHhpZCk7XG4gICAgbWV0YS55U2NhbGUgPSB0aGlzLmdldFNjYWxlRm9ySWQoeWlkKTtcbiAgICBtZXRhLnJTY2FsZSA9IHRoaXMuZ2V0U2NhbGVGb3JJZChyaWQpO1xuICAgIG1ldGEuaVNjYWxlID0gdGhpcy5nZXRTY2FsZUZvcklkKGlpZCk7XG4gICAgbWV0YS52U2NhbGUgPSB0aGlzLmdldFNjYWxlRm9ySWQodmlkKTtcbiAgfVxuICBnZXREYXRhc2V0KCkge1xuICAgIHJldHVybiB0aGlzLmNoYXJ0LmRhdGEuZGF0YXNldHNbdGhpcy5pbmRleF07XG4gIH1cbiAgZ2V0TWV0YSgpIHtcbiAgICByZXR1cm4gdGhpcy5jaGFydC5nZXREYXRhc2V0TWV0YSh0aGlzLmluZGV4KTtcbiAgfVxuICBnZXRTY2FsZUZvcklkKHNjYWxlSUQpIHtcbiAgICByZXR1cm4gdGhpcy5jaGFydC5zY2FsZXNbc2NhbGVJRF07XG4gIH1cbiAgX2dldE90aGVyU2NhbGUoc2NhbGUpIHtcbiAgICBjb25zdCBtZXRhID0gdGhpcy5fY2FjaGVkTWV0YTtcbiAgICByZXR1cm4gc2NhbGUgPT09IG1ldGEuaVNjYWxlXG4gICAgICA/IG1ldGEudlNjYWxlXG4gICAgICA6IG1ldGEuaVNjYWxlO1xuICB9XG4gIHJlc2V0KCkge1xuICAgIHRoaXMuX3VwZGF0ZSgncmVzZXQnKTtcbiAgfVxuICBfZGVzdHJveSgpIHtcbiAgICBjb25zdCBtZXRhID0gdGhpcy5fY2FjaGVkTWV0YTtcbiAgICBpZiAodGhpcy5fZGF0YSkge1xuICAgICAgdW5saXN0ZW5BcnJheUV2ZW50cyh0aGlzLl9kYXRhLCB0aGlzKTtcbiAgICB9XG4gICAgaWYgKG1ldGEuX3N0YWNrZWQpIHtcbiAgICAgIGNsZWFyU3RhY2tzKG1ldGEpO1xuICAgIH1cbiAgfVxuICBfZGF0YUNoZWNrKCkge1xuICAgIGNvbnN0IGRhdGFzZXQgPSB0aGlzLmdldERhdGFzZXQoKTtcbiAgICBjb25zdCBkYXRhID0gZGF0YXNldC5kYXRhIHx8IChkYXRhc2V0LmRhdGEgPSBbXSk7XG4gICAgY29uc3QgX2RhdGEgPSB0aGlzLl9kYXRhO1xuICAgIGlmIChpc09iamVjdChkYXRhKSkge1xuICAgICAgdGhpcy5fZGF0YSA9IGNvbnZlcnRPYmplY3REYXRhVG9BcnJheShkYXRhKTtcbiAgICB9IGVsc2UgaWYgKF9kYXRhICE9PSBkYXRhKSB7XG4gICAgICBpZiAoX2RhdGEpIHtcbiAgICAgICAgdW5saXN0ZW5BcnJheUV2ZW50cyhfZGF0YSwgdGhpcyk7XG4gICAgICAgIGNvbnN0IG1ldGEgPSB0aGlzLl9jYWNoZWRNZXRhO1xuICAgICAgICBjbGVhclN0YWNrcyhtZXRhKTtcbiAgICAgICAgbWV0YS5fcGFyc2VkID0gW107XG4gICAgICB9XG4gICAgICBpZiAoZGF0YSAmJiBPYmplY3QuaXNFeHRlbnNpYmxlKGRhdGEpKSB7XG4gICAgICAgIGxpc3RlbkFycmF5RXZlbnRzKGRhdGEsIHRoaXMpO1xuICAgICAgfVxuICAgICAgdGhpcy5fc3luY0xpc3QgPSBbXTtcbiAgICAgIHRoaXMuX2RhdGEgPSBkYXRhO1xuICAgIH1cbiAgfVxuICBhZGRFbGVtZW50cygpIHtcbiAgICBjb25zdCBtZXRhID0gdGhpcy5fY2FjaGVkTWV0YTtcbiAgICB0aGlzLl9kYXRhQ2hlY2soKTtcbiAgICBpZiAodGhpcy5kYXRhc2V0RWxlbWVudFR5cGUpIHtcbiAgICAgIG1ldGEuZGF0YXNldCA9IG5ldyB0aGlzLmRhdGFzZXRFbGVtZW50VHlwZSgpO1xuICAgIH1cbiAgfVxuICBidWlsZE9yVXBkYXRlRWxlbWVudHMocmVzZXROZXdFbGVtZW50cykge1xuICAgIGNvbnN0IG1ldGEgPSB0aGlzLl9jYWNoZWRNZXRhO1xuICAgIGNvbnN0IGRhdGFzZXQgPSB0aGlzLmdldERhdGFzZXQoKTtcbiAgICBsZXQgc3RhY2tDaGFuZ2VkID0gZmFsc2U7XG4gICAgdGhpcy5fZGF0YUNoZWNrKCk7XG4gICAgY29uc3Qgb2xkU3RhY2tlZCA9IG1ldGEuX3N0YWNrZWQ7XG4gICAgbWV0YS5fc3RhY2tlZCA9IGlzU3RhY2tlZChtZXRhLnZTY2FsZSwgbWV0YSk7XG4gICAgaWYgKG1ldGEuc3RhY2sgIT09IGRhdGFzZXQuc3RhY2spIHtcbiAgICAgIHN0YWNrQ2hhbmdlZCA9IHRydWU7XG4gICAgICBjbGVhclN0YWNrcyhtZXRhKTtcbiAgICAgIG1ldGEuc3RhY2sgPSBkYXRhc2V0LnN0YWNrO1xuICAgIH1cbiAgICB0aGlzLl9yZXN5bmNFbGVtZW50cyhyZXNldE5ld0VsZW1lbnRzKTtcbiAgICBpZiAoc3RhY2tDaGFuZ2VkIHx8IG9sZFN0YWNrZWQgIT09IG1ldGEuX3N0YWNrZWQpIHtcbiAgICAgIHVwZGF0ZVN0YWNrcyh0aGlzLCBtZXRhLl9wYXJzZWQpO1xuICAgIH1cbiAgfVxuICBjb25maWd1cmUoKSB7XG4gICAgY29uc3QgY29uZmlnID0gdGhpcy5jaGFydC5jb25maWc7XG4gICAgY29uc3Qgc2NvcGVLZXlzID0gY29uZmlnLmRhdGFzZXRTY29wZUtleXModGhpcy5fdHlwZSk7XG4gICAgY29uc3Qgc2NvcGVzID0gY29uZmlnLmdldE9wdGlvblNjb3Blcyh0aGlzLmdldERhdGFzZXQoKSwgc2NvcGVLZXlzLCB0cnVlKTtcbiAgICB0aGlzLm9wdGlvbnMgPSBjb25maWcuY3JlYXRlUmVzb2x2ZXIoc2NvcGVzLCB0aGlzLmdldENvbnRleHQoKSk7XG4gICAgdGhpcy5fcGFyc2luZyA9IHRoaXMub3B0aW9ucy5wYXJzaW5nO1xuICAgIHRoaXMuX2NhY2hlZERhdGFPcHRzID0ge307XG4gIH1cbiAgcGFyc2Uoc3RhcnQsIGNvdW50KSB7XG4gICAgY29uc3Qge19jYWNoZWRNZXRhOiBtZXRhLCBfZGF0YTogZGF0YX0gPSB0aGlzO1xuICAgIGNvbnN0IHtpU2NhbGUsIF9zdGFja2VkfSA9IG1ldGE7XG4gICAgY29uc3QgaUF4aXMgPSBpU2NhbGUuYXhpcztcbiAgICBsZXQgc29ydGVkID0gc3RhcnQgPT09IDAgJiYgY291bnQgPT09IGRhdGEubGVuZ3RoID8gdHJ1ZSA6IG1ldGEuX3NvcnRlZDtcbiAgICBsZXQgcHJldiA9IHN0YXJ0ID4gMCAmJiBtZXRhLl9wYXJzZWRbc3RhcnQgLSAxXTtcbiAgICBsZXQgaSwgY3VyLCBwYXJzZWQ7XG4gICAgaWYgKHRoaXMuX3BhcnNpbmcgPT09IGZhbHNlKSB7XG4gICAgICBtZXRhLl9wYXJzZWQgPSBkYXRhO1xuICAgICAgbWV0YS5fc29ydGVkID0gdHJ1ZTtcbiAgICAgIHBhcnNlZCA9IGRhdGE7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChpc0FycmF5KGRhdGFbc3RhcnRdKSkge1xuICAgICAgICBwYXJzZWQgPSB0aGlzLnBhcnNlQXJyYXlEYXRhKG1ldGEsIGRhdGEsIHN0YXJ0LCBjb3VudCk7XG4gICAgICB9IGVsc2UgaWYgKGlzT2JqZWN0KGRhdGFbc3RhcnRdKSkge1xuICAgICAgICBwYXJzZWQgPSB0aGlzLnBhcnNlT2JqZWN0RGF0YShtZXRhLCBkYXRhLCBzdGFydCwgY291bnQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGFyc2VkID0gdGhpcy5wYXJzZVByaW1pdGl2ZURhdGEobWV0YSwgZGF0YSwgc3RhcnQsIGNvdW50KTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IGlzTm90SW5PcmRlckNvbXBhcmVkVG9QcmV2ID0gKCkgPT4gY3VyW2lBeGlzXSA9PT0gbnVsbCB8fCAocHJldiAmJiBjdXJbaUF4aXNdIDwgcHJldltpQXhpc10pO1xuICAgICAgZm9yIChpID0gMDsgaSA8IGNvdW50OyArK2kpIHtcbiAgICAgICAgbWV0YS5fcGFyc2VkW2kgKyBzdGFydF0gPSBjdXIgPSBwYXJzZWRbaV07XG4gICAgICAgIGlmIChzb3J0ZWQpIHtcbiAgICAgICAgICBpZiAoaXNOb3RJbk9yZGVyQ29tcGFyZWRUb1ByZXYoKSkge1xuICAgICAgICAgICAgc29ydGVkID0gZmFsc2U7XG4gICAgICAgICAgfVxuICAgICAgICAgIHByZXYgPSBjdXI7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIG1ldGEuX3NvcnRlZCA9IHNvcnRlZDtcbiAgICB9XG4gICAgaWYgKF9zdGFja2VkKSB7XG4gICAgICB1cGRhdGVTdGFja3ModGhpcywgcGFyc2VkKTtcbiAgICB9XG4gIH1cbiAgcGFyc2VQcmltaXRpdmVEYXRhKG1ldGEsIGRhdGEsIHN0YXJ0LCBjb3VudCkge1xuICAgIGNvbnN0IHtpU2NhbGUsIHZTY2FsZX0gPSBtZXRhO1xuICAgIGNvbnN0IGlBeGlzID0gaVNjYWxlLmF4aXM7XG4gICAgY29uc3QgdkF4aXMgPSB2U2NhbGUuYXhpcztcbiAgICBjb25zdCBsYWJlbHMgPSBpU2NhbGUuZ2V0TGFiZWxzKCk7XG4gICAgY29uc3Qgc2luZ2xlU2NhbGUgPSBpU2NhbGUgPT09IHZTY2FsZTtcbiAgICBjb25zdCBwYXJzZWQgPSBuZXcgQXJyYXkoY291bnQpO1xuICAgIGxldCBpLCBpbGVuLCBpbmRleDtcbiAgICBmb3IgKGkgPSAwLCBpbGVuID0gY291bnQ7IGkgPCBpbGVuOyArK2kpIHtcbiAgICAgIGluZGV4ID0gaSArIHN0YXJ0O1xuICAgICAgcGFyc2VkW2ldID0ge1xuICAgICAgICBbaUF4aXNdOiBzaW5nbGVTY2FsZSB8fCBpU2NhbGUucGFyc2UobGFiZWxzW2luZGV4XSwgaW5kZXgpLFxuICAgICAgICBbdkF4aXNdOiB2U2NhbGUucGFyc2UoZGF0YVtpbmRleF0sIGluZGV4KVxuICAgICAgfTtcbiAgICB9XG4gICAgcmV0dXJuIHBhcnNlZDtcbiAgfVxuICBwYXJzZUFycmF5RGF0YShtZXRhLCBkYXRhLCBzdGFydCwgY291bnQpIHtcbiAgICBjb25zdCB7eFNjYWxlLCB5U2NhbGV9ID0gbWV0YTtcbiAgICBjb25zdCBwYXJzZWQgPSBuZXcgQXJyYXkoY291bnQpO1xuICAgIGxldCBpLCBpbGVuLCBpbmRleCwgaXRlbTtcbiAgICBmb3IgKGkgPSAwLCBpbGVuID0gY291bnQ7IGkgPCBpbGVuOyArK2kpIHtcbiAgICAgIGluZGV4ID0gaSArIHN0YXJ0O1xuICAgICAgaXRlbSA9IGRhdGFbaW5kZXhdO1xuICAgICAgcGFyc2VkW2ldID0ge1xuICAgICAgICB4OiB4U2NhbGUucGFyc2UoaXRlbVswXSwgaW5kZXgpLFxuICAgICAgICB5OiB5U2NhbGUucGFyc2UoaXRlbVsxXSwgaW5kZXgpXG4gICAgICB9O1xuICAgIH1cbiAgICByZXR1cm4gcGFyc2VkO1xuICB9XG4gIHBhcnNlT2JqZWN0RGF0YShtZXRhLCBkYXRhLCBzdGFydCwgY291bnQpIHtcbiAgICBjb25zdCB7eFNjYWxlLCB5U2NhbGV9ID0gbWV0YTtcbiAgICBjb25zdCB7eEF4aXNLZXkgPSAneCcsIHlBeGlzS2V5ID0gJ3knfSA9IHRoaXMuX3BhcnNpbmc7XG4gICAgY29uc3QgcGFyc2VkID0gbmV3IEFycmF5KGNvdW50KTtcbiAgICBsZXQgaSwgaWxlbiwgaW5kZXgsIGl0ZW07XG4gICAgZm9yIChpID0gMCwgaWxlbiA9IGNvdW50OyBpIDwgaWxlbjsgKytpKSB7XG4gICAgICBpbmRleCA9IGkgKyBzdGFydDtcbiAgICAgIGl0ZW0gPSBkYXRhW2luZGV4XTtcbiAgICAgIHBhcnNlZFtpXSA9IHtcbiAgICAgICAgeDogeFNjYWxlLnBhcnNlKHJlc29sdmVPYmplY3RLZXkoaXRlbSwgeEF4aXNLZXkpLCBpbmRleCksXG4gICAgICAgIHk6IHlTY2FsZS5wYXJzZShyZXNvbHZlT2JqZWN0S2V5KGl0ZW0sIHlBeGlzS2V5KSwgaW5kZXgpXG4gICAgICB9O1xuICAgIH1cbiAgICByZXR1cm4gcGFyc2VkO1xuICB9XG4gIGdldFBhcnNlZChpbmRleCkge1xuICAgIHJldHVybiB0aGlzLl9jYWNoZWRNZXRhLl9wYXJzZWRbaW5kZXhdO1xuICB9XG4gIGdldERhdGFFbGVtZW50KGluZGV4KSB7XG4gICAgcmV0dXJuIHRoaXMuX2NhY2hlZE1ldGEuZGF0YVtpbmRleF07XG4gIH1cbiAgYXBwbHlTdGFjayhzY2FsZSwgcGFyc2VkLCBtb2RlKSB7XG4gICAgY29uc3QgY2hhcnQgPSB0aGlzLmNoYXJ0O1xuICAgIGNvbnN0IG1ldGEgPSB0aGlzLl9jYWNoZWRNZXRhO1xuICAgIGNvbnN0IHZhbHVlID0gcGFyc2VkW3NjYWxlLmF4aXNdO1xuICAgIGNvbnN0IHN0YWNrID0ge1xuICAgICAga2V5czogZ2V0U29ydGVkRGF0YXNldEluZGljZXMoY2hhcnQsIHRydWUpLFxuICAgICAgdmFsdWVzOiBwYXJzZWQuX3N0YWNrc1tzY2FsZS5heGlzXVxuICAgIH07XG4gICAgcmV0dXJuIGFwcGx5U3RhY2soc3RhY2ssIHZhbHVlLCBtZXRhLmluZGV4LCB7bW9kZX0pO1xuICB9XG4gIHVwZGF0ZVJhbmdlRnJvbVBhcnNlZChyYW5nZSwgc2NhbGUsIHBhcnNlZCwgc3RhY2spIHtcbiAgICBjb25zdCBwYXJzZWRWYWx1ZSA9IHBhcnNlZFtzY2FsZS5heGlzXTtcbiAgICBsZXQgdmFsdWUgPSBwYXJzZWRWYWx1ZSA9PT0gbnVsbCA/IE5hTiA6IHBhcnNlZFZhbHVlO1xuICAgIGNvbnN0IHZhbHVlcyA9IHN0YWNrICYmIHBhcnNlZC5fc3RhY2tzW3NjYWxlLmF4aXNdO1xuICAgIGlmIChzdGFjayAmJiB2YWx1ZXMpIHtcbiAgICAgIHN0YWNrLnZhbHVlcyA9IHZhbHVlcztcbiAgICAgIHZhbHVlID0gYXBwbHlTdGFjayhzdGFjaywgcGFyc2VkVmFsdWUsIHRoaXMuX2NhY2hlZE1ldGEuaW5kZXgpO1xuICAgIH1cbiAgICByYW5nZS5taW4gPSBNYXRoLm1pbihyYW5nZS5taW4sIHZhbHVlKTtcbiAgICByYW5nZS5tYXggPSBNYXRoLm1heChyYW5nZS5tYXgsIHZhbHVlKTtcbiAgfVxuICBnZXRNaW5NYXgoc2NhbGUsIGNhblN0YWNrKSB7XG4gICAgY29uc3QgbWV0YSA9IHRoaXMuX2NhY2hlZE1ldGE7XG4gICAgY29uc3QgX3BhcnNlZCA9IG1ldGEuX3BhcnNlZDtcbiAgICBjb25zdCBzb3J0ZWQgPSBtZXRhLl9zb3J0ZWQgJiYgc2NhbGUgPT09IG1ldGEuaVNjYWxlO1xuICAgIGNvbnN0IGlsZW4gPSBfcGFyc2VkLmxlbmd0aDtcbiAgICBjb25zdCBvdGhlclNjYWxlID0gdGhpcy5fZ2V0T3RoZXJTY2FsZShzY2FsZSk7XG4gICAgY29uc3Qgc3RhY2sgPSBjcmVhdGVTdGFjayhjYW5TdGFjaywgbWV0YSwgdGhpcy5jaGFydCk7XG4gICAgY29uc3QgcmFuZ2UgPSB7bWluOiBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFksIG1heDogTnVtYmVyLk5FR0FUSVZFX0lORklOSVRZfTtcbiAgICBjb25zdCB7bWluOiBvdGhlck1pbiwgbWF4OiBvdGhlck1heH0gPSBnZXRVc2VyQm91bmRzKG90aGVyU2NhbGUpO1xuICAgIGxldCBpLCBwYXJzZWQ7XG4gICAgZnVuY3Rpb24gX3NraXAoKSB7XG4gICAgICBwYXJzZWQgPSBfcGFyc2VkW2ldO1xuICAgICAgY29uc3Qgb3RoZXJWYWx1ZSA9IHBhcnNlZFtvdGhlclNjYWxlLmF4aXNdO1xuICAgICAgcmV0dXJuICFpc051bWJlckZpbml0ZShwYXJzZWRbc2NhbGUuYXhpc10pIHx8IG90aGVyTWluID4gb3RoZXJWYWx1ZSB8fCBvdGhlck1heCA8IG90aGVyVmFsdWU7XG4gICAgfVxuICAgIGZvciAoaSA9IDA7IGkgPCBpbGVuOyArK2kpIHtcbiAgICAgIGlmIChfc2tpcCgpKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgdGhpcy51cGRhdGVSYW5nZUZyb21QYXJzZWQocmFuZ2UsIHNjYWxlLCBwYXJzZWQsIHN0YWNrKTtcbiAgICAgIGlmIChzb3J0ZWQpIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChzb3J0ZWQpIHtcbiAgICAgIGZvciAoaSA9IGlsZW4gLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICBpZiAoX3NraXAoKSkge1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMudXBkYXRlUmFuZ2VGcm9tUGFyc2VkKHJhbmdlLCBzY2FsZSwgcGFyc2VkLCBzdGFjayk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmFuZ2U7XG4gIH1cbiAgZ2V0QWxsUGFyc2VkVmFsdWVzKHNjYWxlKSB7XG4gICAgY29uc3QgcGFyc2VkID0gdGhpcy5fY2FjaGVkTWV0YS5fcGFyc2VkO1xuICAgIGNvbnN0IHZhbHVlcyA9IFtdO1xuICAgIGxldCBpLCBpbGVuLCB2YWx1ZTtcbiAgICBmb3IgKGkgPSAwLCBpbGVuID0gcGFyc2VkLmxlbmd0aDsgaSA8IGlsZW47ICsraSkge1xuICAgICAgdmFsdWUgPSBwYXJzZWRbaV1bc2NhbGUuYXhpc107XG4gICAgICBpZiAoaXNOdW1iZXJGaW5pdGUodmFsdWUpKSB7XG4gICAgICAgIHZhbHVlcy5wdXNoKHZhbHVlKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHZhbHVlcztcbiAgfVxuICBnZXRNYXhPdmVyZmxvdygpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgZ2V0TGFiZWxBbmRWYWx1ZShpbmRleCkge1xuICAgIGNvbnN0IG1ldGEgPSB0aGlzLl9jYWNoZWRNZXRhO1xuICAgIGNvbnN0IGlTY2FsZSA9IG1ldGEuaVNjYWxlO1xuICAgIGNvbnN0IHZTY2FsZSA9IG1ldGEudlNjYWxlO1xuICAgIGNvbnN0IHBhcnNlZCA9IHRoaXMuZ2V0UGFyc2VkKGluZGV4KTtcbiAgICByZXR1cm4ge1xuICAgICAgbGFiZWw6IGlTY2FsZSA/ICcnICsgaVNjYWxlLmdldExhYmVsRm9yVmFsdWUocGFyc2VkW2lTY2FsZS5heGlzXSkgOiAnJyxcbiAgICAgIHZhbHVlOiB2U2NhbGUgPyAnJyArIHZTY2FsZS5nZXRMYWJlbEZvclZhbHVlKHBhcnNlZFt2U2NhbGUuYXhpc10pIDogJydcbiAgICB9O1xuICB9XG4gIF91cGRhdGUobW9kZSkge1xuICAgIGNvbnN0IG1ldGEgPSB0aGlzLl9jYWNoZWRNZXRhO1xuICAgIHRoaXMudXBkYXRlKG1vZGUgfHwgJ2RlZmF1bHQnKTtcbiAgICBtZXRhLl9jbGlwID0gdG9DbGlwKHZhbHVlT3JEZWZhdWx0KHRoaXMub3B0aW9ucy5jbGlwLCBkZWZhdWx0Q2xpcChtZXRhLnhTY2FsZSwgbWV0YS55U2NhbGUsIHRoaXMuZ2V0TWF4T3ZlcmZsb3coKSkpKTtcbiAgfVxuICB1cGRhdGUobW9kZSkge31cbiAgZHJhdygpIHtcbiAgICBjb25zdCBjdHggPSB0aGlzLl9jdHg7XG4gICAgY29uc3QgY2hhcnQgPSB0aGlzLmNoYXJ0O1xuICAgIGNvbnN0IG1ldGEgPSB0aGlzLl9jYWNoZWRNZXRhO1xuICAgIGNvbnN0IGVsZW1lbnRzID0gbWV0YS5kYXRhIHx8IFtdO1xuICAgIGNvbnN0IGFyZWEgPSBjaGFydC5jaGFydEFyZWE7XG4gICAgY29uc3QgYWN0aXZlID0gW107XG4gICAgY29uc3Qgc3RhcnQgPSB0aGlzLl9kcmF3U3RhcnQgfHwgMDtcbiAgICBjb25zdCBjb3VudCA9IHRoaXMuX2RyYXdDb3VudCB8fCAoZWxlbWVudHMubGVuZ3RoIC0gc3RhcnQpO1xuICAgIGNvbnN0IGRyYXdBY3RpdmVFbGVtZW50c09uVG9wID0gdGhpcy5vcHRpb25zLmRyYXdBY3RpdmVFbGVtZW50c09uVG9wO1xuICAgIGxldCBpO1xuICAgIGlmIChtZXRhLmRhdGFzZXQpIHtcbiAgICAgIG1ldGEuZGF0YXNldC5kcmF3KGN0eCwgYXJlYSwgc3RhcnQsIGNvdW50KTtcbiAgICB9XG4gICAgZm9yIChpID0gc3RhcnQ7IGkgPCBzdGFydCArIGNvdW50OyArK2kpIHtcbiAgICAgIGNvbnN0IGVsZW1lbnQgPSBlbGVtZW50c1tpXTtcbiAgICAgIGlmIChlbGVtZW50LmhpZGRlbikge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIGlmIChlbGVtZW50LmFjdGl2ZSAmJiBkcmF3QWN0aXZlRWxlbWVudHNPblRvcCkge1xuICAgICAgICBhY3RpdmUucHVzaChlbGVtZW50KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGVsZW1lbnQuZHJhdyhjdHgsIGFyZWEpO1xuICAgICAgfVxuICAgIH1cbiAgICBmb3IgKGkgPSAwOyBpIDwgYWN0aXZlLmxlbmd0aDsgKytpKSB7XG4gICAgICBhY3RpdmVbaV0uZHJhdyhjdHgsIGFyZWEpO1xuICAgIH1cbiAgfVxuICBnZXRTdHlsZShpbmRleCwgYWN0aXZlKSB7XG4gICAgY29uc3QgbW9kZSA9IGFjdGl2ZSA/ICdhY3RpdmUnIDogJ2RlZmF1bHQnO1xuICAgIHJldHVybiBpbmRleCA9PT0gdW5kZWZpbmVkICYmIHRoaXMuX2NhY2hlZE1ldGEuZGF0YXNldFxuICAgICAgPyB0aGlzLnJlc29sdmVEYXRhc2V0RWxlbWVudE9wdGlvbnMobW9kZSlcbiAgICAgIDogdGhpcy5yZXNvbHZlRGF0YUVsZW1lbnRPcHRpb25zKGluZGV4IHx8IDAsIG1vZGUpO1xuICB9XG4gIGdldENvbnRleHQoaW5kZXgsIGFjdGl2ZSwgbW9kZSkge1xuICAgIGNvbnN0IGRhdGFzZXQgPSB0aGlzLmdldERhdGFzZXQoKTtcbiAgICBsZXQgY29udGV4dDtcbiAgICBpZiAoaW5kZXggPj0gMCAmJiBpbmRleCA8IHRoaXMuX2NhY2hlZE1ldGEuZGF0YS5sZW5ndGgpIHtcbiAgICAgIGNvbnN0IGVsZW1lbnQgPSB0aGlzLl9jYWNoZWRNZXRhLmRhdGFbaW5kZXhdO1xuICAgICAgY29udGV4dCA9IGVsZW1lbnQuJGNvbnRleHQgfHxcbiAgICAgICAgKGVsZW1lbnQuJGNvbnRleHQgPSBjcmVhdGVEYXRhQ29udGV4dCh0aGlzLmdldENvbnRleHQoKSwgaW5kZXgsIGVsZW1lbnQpKTtcbiAgICAgIGNvbnRleHQucGFyc2VkID0gdGhpcy5nZXRQYXJzZWQoaW5kZXgpO1xuICAgICAgY29udGV4dC5yYXcgPSBkYXRhc2V0LmRhdGFbaW5kZXhdO1xuICAgICAgY29udGV4dC5pbmRleCA9IGNvbnRleHQuZGF0YUluZGV4ID0gaW5kZXg7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnRleHQgPSB0aGlzLiRjb250ZXh0IHx8XG4gICAgICAgICh0aGlzLiRjb250ZXh0ID0gY3JlYXRlRGF0YXNldENvbnRleHQodGhpcy5jaGFydC5nZXRDb250ZXh0KCksIHRoaXMuaW5kZXgpKTtcbiAgICAgIGNvbnRleHQuZGF0YXNldCA9IGRhdGFzZXQ7XG4gICAgICBjb250ZXh0LmluZGV4ID0gY29udGV4dC5kYXRhc2V0SW5kZXggPSB0aGlzLmluZGV4O1xuICAgIH1cbiAgICBjb250ZXh0LmFjdGl2ZSA9ICEhYWN0aXZlO1xuICAgIGNvbnRleHQubW9kZSA9IG1vZGU7XG4gICAgcmV0dXJuIGNvbnRleHQ7XG4gIH1cbiAgcmVzb2x2ZURhdGFzZXRFbGVtZW50T3B0aW9ucyhtb2RlKSB7XG4gICAgcmV0dXJuIHRoaXMuX3Jlc29sdmVFbGVtZW50T3B0aW9ucyh0aGlzLmRhdGFzZXRFbGVtZW50VHlwZS5pZCwgbW9kZSk7XG4gIH1cbiAgcmVzb2x2ZURhdGFFbGVtZW50T3B0aW9ucyhpbmRleCwgbW9kZSkge1xuICAgIHJldHVybiB0aGlzLl9yZXNvbHZlRWxlbWVudE9wdGlvbnModGhpcy5kYXRhRWxlbWVudFR5cGUuaWQsIG1vZGUsIGluZGV4KTtcbiAgfVxuICBfcmVzb2x2ZUVsZW1lbnRPcHRpb25zKGVsZW1lbnRUeXBlLCBtb2RlID0gJ2RlZmF1bHQnLCBpbmRleCkge1xuICAgIGNvbnN0IGFjdGl2ZSA9IG1vZGUgPT09ICdhY3RpdmUnO1xuICAgIGNvbnN0IGNhY2hlID0gdGhpcy5fY2FjaGVkRGF0YU9wdHM7XG4gICAgY29uc3QgY2FjaGVLZXkgPSBlbGVtZW50VHlwZSArICctJyArIG1vZGU7XG4gICAgY29uc3QgY2FjaGVkID0gY2FjaGVbY2FjaGVLZXldO1xuICAgIGNvbnN0IHNoYXJpbmcgPSB0aGlzLmVuYWJsZU9wdGlvblNoYXJpbmcgJiYgZGVmaW5lZChpbmRleCk7XG4gICAgaWYgKGNhY2hlZCkge1xuICAgICAgcmV0dXJuIGNsb25lSWZOb3RTaGFyZWQoY2FjaGVkLCBzaGFyaW5nKTtcbiAgICB9XG4gICAgY29uc3QgY29uZmlnID0gdGhpcy5jaGFydC5jb25maWc7XG4gICAgY29uc3Qgc2NvcGVLZXlzID0gY29uZmlnLmRhdGFzZXRFbGVtZW50U2NvcGVLZXlzKHRoaXMuX3R5cGUsIGVsZW1lbnRUeXBlKTtcbiAgICBjb25zdCBwcmVmaXhlcyA9IGFjdGl2ZSA/IFtgJHtlbGVtZW50VHlwZX1Ib3ZlcmAsICdob3ZlcicsIGVsZW1lbnRUeXBlLCAnJ10gOiBbZWxlbWVudFR5cGUsICcnXTtcbiAgICBjb25zdCBzY29wZXMgPSBjb25maWcuZ2V0T3B0aW9uU2NvcGVzKHRoaXMuZ2V0RGF0YXNldCgpLCBzY29wZUtleXMpO1xuICAgIGNvbnN0IG5hbWVzID0gT2JqZWN0LmtleXMoZGVmYXVsdHMuZWxlbWVudHNbZWxlbWVudFR5cGVdKTtcbiAgICBjb25zdCBjb250ZXh0ID0gKCkgPT4gdGhpcy5nZXRDb250ZXh0KGluZGV4LCBhY3RpdmUpO1xuICAgIGNvbnN0IHZhbHVlcyA9IGNvbmZpZy5yZXNvbHZlTmFtZWRPcHRpb25zKHNjb3BlcywgbmFtZXMsIGNvbnRleHQsIHByZWZpeGVzKTtcbiAgICBpZiAodmFsdWVzLiRzaGFyZWQpIHtcbiAgICAgIHZhbHVlcy4kc2hhcmVkID0gc2hhcmluZztcbiAgICAgIGNhY2hlW2NhY2hlS2V5XSA9IE9iamVjdC5mcmVlemUoY2xvbmVJZk5vdFNoYXJlZCh2YWx1ZXMsIHNoYXJpbmcpKTtcbiAgICB9XG4gICAgcmV0dXJuIHZhbHVlcztcbiAgfVxuICBfcmVzb2x2ZUFuaW1hdGlvbnMoaW5kZXgsIHRyYW5zaXRpb24sIGFjdGl2ZSkge1xuICAgIGNvbnN0IGNoYXJ0ID0gdGhpcy5jaGFydDtcbiAgICBjb25zdCBjYWNoZSA9IHRoaXMuX2NhY2hlZERhdGFPcHRzO1xuICAgIGNvbnN0IGNhY2hlS2V5ID0gYGFuaW1hdGlvbi0ke3RyYW5zaXRpb259YDtcbiAgICBjb25zdCBjYWNoZWQgPSBjYWNoZVtjYWNoZUtleV07XG4gICAgaWYgKGNhY2hlZCkge1xuICAgICAgcmV0dXJuIGNhY2hlZDtcbiAgICB9XG4gICAgbGV0IG9wdGlvbnM7XG4gICAgaWYgKGNoYXJ0Lm9wdGlvbnMuYW5pbWF0aW9uICE9PSBmYWxzZSkge1xuICAgICAgY29uc3QgY29uZmlnID0gdGhpcy5jaGFydC5jb25maWc7XG4gICAgICBjb25zdCBzY29wZUtleXMgPSBjb25maWcuZGF0YXNldEFuaW1hdGlvblNjb3BlS2V5cyh0aGlzLl90eXBlLCB0cmFuc2l0aW9uKTtcbiAgICAgIGNvbnN0IHNjb3BlcyA9IGNvbmZpZy5nZXRPcHRpb25TY29wZXModGhpcy5nZXREYXRhc2V0KCksIHNjb3BlS2V5cyk7XG4gICAgICBvcHRpb25zID0gY29uZmlnLmNyZWF0ZVJlc29sdmVyKHNjb3BlcywgdGhpcy5nZXRDb250ZXh0KGluZGV4LCBhY3RpdmUsIHRyYW5zaXRpb24pKTtcbiAgICB9XG4gICAgY29uc3QgYW5pbWF0aW9ucyA9IG5ldyBBbmltYXRpb25zKGNoYXJ0LCBvcHRpb25zICYmIG9wdGlvbnMuYW5pbWF0aW9ucyk7XG4gICAgaWYgKG9wdGlvbnMgJiYgb3B0aW9ucy5fY2FjaGVhYmxlKSB7XG4gICAgICBjYWNoZVtjYWNoZUtleV0gPSBPYmplY3QuZnJlZXplKGFuaW1hdGlvbnMpO1xuICAgIH1cbiAgICByZXR1cm4gYW5pbWF0aW9ucztcbiAgfVxuICBnZXRTaGFyZWRPcHRpb25zKG9wdGlvbnMpIHtcbiAgICBpZiAoIW9wdGlvbnMuJHNoYXJlZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5fc2hhcmVkT3B0aW9ucyB8fCAodGhpcy5fc2hhcmVkT3B0aW9ucyA9IE9iamVjdC5hc3NpZ24oe30sIG9wdGlvbnMpKTtcbiAgfVxuICBpbmNsdWRlT3B0aW9ucyhtb2RlLCBzaGFyZWRPcHRpb25zKSB7XG4gICAgcmV0dXJuICFzaGFyZWRPcHRpb25zIHx8IGlzRGlyZWN0VXBkYXRlTW9kZShtb2RlKSB8fCB0aGlzLmNoYXJ0Ll9hbmltYXRpb25zRGlzYWJsZWQ7XG4gIH1cbiAgdXBkYXRlRWxlbWVudChlbGVtZW50LCBpbmRleCwgcHJvcGVydGllcywgbW9kZSkge1xuICAgIGlmIChpc0RpcmVjdFVwZGF0ZU1vZGUobW9kZSkpIHtcbiAgICAgIE9iamVjdC5hc3NpZ24oZWxlbWVudCwgcHJvcGVydGllcyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX3Jlc29sdmVBbmltYXRpb25zKGluZGV4LCBtb2RlKS51cGRhdGUoZWxlbWVudCwgcHJvcGVydGllcyk7XG4gICAgfVxuICB9XG4gIHVwZGF0ZVNoYXJlZE9wdGlvbnMoc2hhcmVkT3B0aW9ucywgbW9kZSwgbmV3T3B0aW9ucykge1xuICAgIGlmIChzaGFyZWRPcHRpb25zICYmICFpc0RpcmVjdFVwZGF0ZU1vZGUobW9kZSkpIHtcbiAgICAgIHRoaXMuX3Jlc29sdmVBbmltYXRpb25zKHVuZGVmaW5lZCwgbW9kZSkudXBkYXRlKHNoYXJlZE9wdGlvbnMsIG5ld09wdGlvbnMpO1xuICAgIH1cbiAgfVxuICBfc2V0U3R5bGUoZWxlbWVudCwgaW5kZXgsIG1vZGUsIGFjdGl2ZSkge1xuICAgIGVsZW1lbnQuYWN0aXZlID0gYWN0aXZlO1xuICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLmdldFN0eWxlKGluZGV4LCBhY3RpdmUpO1xuICAgIHRoaXMuX3Jlc29sdmVBbmltYXRpb25zKGluZGV4LCBtb2RlLCBhY3RpdmUpLnVwZGF0ZShlbGVtZW50LCB7XG4gICAgICBvcHRpb25zOiAoIWFjdGl2ZSAmJiB0aGlzLmdldFNoYXJlZE9wdGlvbnMob3B0aW9ucykpIHx8IG9wdGlvbnNcbiAgICB9KTtcbiAgfVxuICByZW1vdmVIb3ZlclN0eWxlKGVsZW1lbnQsIGRhdGFzZXRJbmRleCwgaW5kZXgpIHtcbiAgICB0aGlzLl9zZXRTdHlsZShlbGVtZW50LCBpbmRleCwgJ2FjdGl2ZScsIGZhbHNlKTtcbiAgfVxuICBzZXRIb3ZlclN0eWxlKGVsZW1lbnQsIGRhdGFzZXRJbmRleCwgaW5kZXgpIHtcbiAgICB0aGlzLl9zZXRTdHlsZShlbGVtZW50LCBpbmRleCwgJ2FjdGl2ZScsIHRydWUpO1xuICB9XG4gIF9yZW1vdmVEYXRhc2V0SG92ZXJTdHlsZSgpIHtcbiAgICBjb25zdCBlbGVtZW50ID0gdGhpcy5fY2FjaGVkTWV0YS5kYXRhc2V0O1xuICAgIGlmIChlbGVtZW50KSB7XG4gICAgICB0aGlzLl9zZXRTdHlsZShlbGVtZW50LCB1bmRlZmluZWQsICdhY3RpdmUnLCBmYWxzZSk7XG4gICAgfVxuICB9XG4gIF9zZXREYXRhc2V0SG92ZXJTdHlsZSgpIHtcbiAgICBjb25zdCBlbGVtZW50ID0gdGhpcy5fY2FjaGVkTWV0YS5kYXRhc2V0O1xuICAgIGlmIChlbGVtZW50KSB7XG4gICAgICB0aGlzLl9zZXRTdHlsZShlbGVtZW50LCB1bmRlZmluZWQsICdhY3RpdmUnLCB0cnVlKTtcbiAgICB9XG4gIH1cbiAgX3Jlc3luY0VsZW1lbnRzKHJlc2V0TmV3RWxlbWVudHMpIHtcbiAgICBjb25zdCBkYXRhID0gdGhpcy5fZGF0YTtcbiAgICBjb25zdCBlbGVtZW50cyA9IHRoaXMuX2NhY2hlZE1ldGEuZGF0YTtcbiAgICBmb3IgKGNvbnN0IFttZXRob2QsIGFyZzEsIGFyZzJdIG9mIHRoaXMuX3N5bmNMaXN0KSB7XG4gICAgICB0aGlzW21ldGhvZF0oYXJnMSwgYXJnMik7XG4gICAgfVxuICAgIHRoaXMuX3N5bmNMaXN0ID0gW107XG4gICAgY29uc3QgbnVtTWV0YSA9IGVsZW1lbnRzLmxlbmd0aDtcbiAgICBjb25zdCBudW1EYXRhID0gZGF0YS5sZW5ndGg7XG4gICAgY29uc3QgY291bnQgPSBNYXRoLm1pbihudW1EYXRhLCBudW1NZXRhKTtcbiAgICBpZiAoY291bnQpIHtcbiAgICAgIHRoaXMucGFyc2UoMCwgY291bnQpO1xuICAgIH1cbiAgICBpZiAobnVtRGF0YSA+IG51bU1ldGEpIHtcbiAgICAgIHRoaXMuX2luc2VydEVsZW1lbnRzKG51bU1ldGEsIG51bURhdGEgLSBudW1NZXRhLCByZXNldE5ld0VsZW1lbnRzKTtcbiAgICB9IGVsc2UgaWYgKG51bURhdGEgPCBudW1NZXRhKSB7XG4gICAgICB0aGlzLl9yZW1vdmVFbGVtZW50cyhudW1EYXRhLCBudW1NZXRhIC0gbnVtRGF0YSk7XG4gICAgfVxuICB9XG4gIF9pbnNlcnRFbGVtZW50cyhzdGFydCwgY291bnQsIHJlc2V0TmV3RWxlbWVudHMgPSB0cnVlKSB7XG4gICAgY29uc3QgbWV0YSA9IHRoaXMuX2NhY2hlZE1ldGE7XG4gICAgY29uc3QgZGF0YSA9IG1ldGEuZGF0YTtcbiAgICBjb25zdCBlbmQgPSBzdGFydCArIGNvdW50O1xuICAgIGxldCBpO1xuICAgIGNvbnN0IG1vdmUgPSAoYXJyKSA9PiB7XG4gICAgICBhcnIubGVuZ3RoICs9IGNvdW50O1xuICAgICAgZm9yIChpID0gYXJyLmxlbmd0aCAtIDE7IGkgPj0gZW5kOyBpLS0pIHtcbiAgICAgICAgYXJyW2ldID0gYXJyW2kgLSBjb3VudF07XG4gICAgICB9XG4gICAgfTtcbiAgICBtb3ZlKGRhdGEpO1xuICAgIGZvciAoaSA9IHN0YXJ0OyBpIDwgZW5kOyArK2kpIHtcbiAgICAgIGRhdGFbaV0gPSBuZXcgdGhpcy5kYXRhRWxlbWVudFR5cGUoKTtcbiAgICB9XG4gICAgaWYgKHRoaXMuX3BhcnNpbmcpIHtcbiAgICAgIG1vdmUobWV0YS5fcGFyc2VkKTtcbiAgICB9XG4gICAgdGhpcy5wYXJzZShzdGFydCwgY291bnQpO1xuICAgIGlmIChyZXNldE5ld0VsZW1lbnRzKSB7XG4gICAgICB0aGlzLnVwZGF0ZUVsZW1lbnRzKGRhdGEsIHN0YXJ0LCBjb3VudCwgJ3Jlc2V0Jyk7XG4gICAgfVxuICB9XG4gIHVwZGF0ZUVsZW1lbnRzKGVsZW1lbnQsIHN0YXJ0LCBjb3VudCwgbW9kZSkge31cbiAgX3JlbW92ZUVsZW1lbnRzKHN0YXJ0LCBjb3VudCkge1xuICAgIGNvbnN0IG1ldGEgPSB0aGlzLl9jYWNoZWRNZXRhO1xuICAgIGlmICh0aGlzLl9wYXJzaW5nKSB7XG4gICAgICBjb25zdCByZW1vdmVkID0gbWV0YS5fcGFyc2VkLnNwbGljZShzdGFydCwgY291bnQpO1xuICAgICAgaWYgKG1ldGEuX3N0YWNrZWQpIHtcbiAgICAgICAgY2xlYXJTdGFja3MobWV0YSwgcmVtb3ZlZCk7XG4gICAgICB9XG4gICAgfVxuICAgIG1ldGEuZGF0YS5zcGxpY2Uoc3RhcnQsIGNvdW50KTtcbiAgfVxuICBfc3luYyhhcmdzKSB7XG4gICAgaWYgKHRoaXMuX3BhcnNpbmcpIHtcbiAgICAgIHRoaXMuX3N5bmNMaXN0LnB1c2goYXJncyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IFttZXRob2QsIGFyZzEsIGFyZzJdID0gYXJncztcbiAgICAgIHRoaXNbbWV0aG9kXShhcmcxLCBhcmcyKTtcbiAgICB9XG4gICAgdGhpcy5jaGFydC5fZGF0YUNoYW5nZXMucHVzaChbdGhpcy5pbmRleCwgLi4uYXJnc10pO1xuICB9XG4gIF9vbkRhdGFQdXNoKCkge1xuICAgIGNvbnN0IGNvdW50ID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICB0aGlzLl9zeW5jKFsnX2luc2VydEVsZW1lbnRzJywgdGhpcy5nZXREYXRhc2V0KCkuZGF0YS5sZW5ndGggLSBjb3VudCwgY291bnRdKTtcbiAgfVxuICBfb25EYXRhUG9wKCkge1xuICAgIHRoaXMuX3N5bmMoWydfcmVtb3ZlRWxlbWVudHMnLCB0aGlzLl9jYWNoZWRNZXRhLmRhdGEubGVuZ3RoIC0gMSwgMV0pO1xuICB9XG4gIF9vbkRhdGFTaGlmdCgpIHtcbiAgICB0aGlzLl9zeW5jKFsnX3JlbW92ZUVsZW1lbnRzJywgMCwgMV0pO1xuICB9XG4gIF9vbkRhdGFTcGxpY2Uoc3RhcnQsIGNvdW50KSB7XG4gICAgaWYgKGNvdW50KSB7XG4gICAgICB0aGlzLl9zeW5jKFsnX3JlbW92ZUVsZW1lbnRzJywgc3RhcnQsIGNvdW50XSk7XG4gICAgfVxuICAgIGNvbnN0IG5ld0NvdW50ID0gYXJndW1lbnRzLmxlbmd0aCAtIDI7XG4gICAgaWYgKG5ld0NvdW50KSB7XG4gICAgICB0aGlzLl9zeW5jKFsnX2luc2VydEVsZW1lbnRzJywgc3RhcnQsIG5ld0NvdW50XSk7XG4gICAgfVxuICB9XG4gIF9vbkRhdGFVbnNoaWZ0KCkge1xuICAgIHRoaXMuX3N5bmMoWydfaW5zZXJ0RWxlbWVudHMnLCAwLCBhcmd1bWVudHMubGVuZ3RoXSk7XG4gIH1cbn1cbkRhdGFzZXRDb250cm9sbGVyLmRlZmF1bHRzID0ge307XG5EYXRhc2V0Q29udHJvbGxlci5wcm90b3R5cGUuZGF0YXNldEVsZW1lbnRUeXBlID0gbnVsbDtcbkRhdGFzZXRDb250cm9sbGVyLnByb3RvdHlwZS5kYXRhRWxlbWVudFR5cGUgPSBudWxsO1xuXG5mdW5jdGlvbiBnZXRBbGxTY2FsZVZhbHVlcyhzY2FsZSwgdHlwZSkge1xuICBpZiAoIXNjYWxlLl9jYWNoZS4kYmFyKSB7XG4gICAgY29uc3QgdmlzaWJsZU1ldGFzID0gc2NhbGUuZ2V0TWF0Y2hpbmdWaXNpYmxlTWV0YXModHlwZSk7XG4gICAgbGV0IHZhbHVlcyA9IFtdO1xuICAgIGZvciAobGV0IGkgPSAwLCBpbGVuID0gdmlzaWJsZU1ldGFzLmxlbmd0aDsgaSA8IGlsZW47IGkrKykge1xuICAgICAgdmFsdWVzID0gdmFsdWVzLmNvbmNhdCh2aXNpYmxlTWV0YXNbaV0uY29udHJvbGxlci5nZXRBbGxQYXJzZWRWYWx1ZXMoc2NhbGUpKTtcbiAgICB9XG4gICAgc2NhbGUuX2NhY2hlLiRiYXIgPSBfYXJyYXlVbmlxdWUodmFsdWVzLnNvcnQoKGEsIGIpID0+IGEgLSBiKSk7XG4gIH1cbiAgcmV0dXJuIHNjYWxlLl9jYWNoZS4kYmFyO1xufVxuZnVuY3Rpb24gY29tcHV0ZU1pblNhbXBsZVNpemUobWV0YSkge1xuICBjb25zdCBzY2FsZSA9IG1ldGEuaVNjYWxlO1xuICBjb25zdCB2YWx1ZXMgPSBnZXRBbGxTY2FsZVZhbHVlcyhzY2FsZSwgbWV0YS50eXBlKTtcbiAgbGV0IG1pbiA9IHNjYWxlLl9sZW5ndGg7XG4gIGxldCBpLCBpbGVuLCBjdXJyLCBwcmV2O1xuICBjb25zdCB1cGRhdGVNaW5BbmRQcmV2ID0gKCkgPT4ge1xuICAgIGlmIChjdXJyID09PSAzMjc2NyB8fCBjdXJyID09PSAtMzI3NjgpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKGRlZmluZWQocHJldikpIHtcbiAgICAgIG1pbiA9IE1hdGgubWluKG1pbiwgTWF0aC5hYnMoY3VyciAtIHByZXYpIHx8IG1pbik7XG4gICAgfVxuICAgIHByZXYgPSBjdXJyO1xuICB9O1xuICBmb3IgKGkgPSAwLCBpbGVuID0gdmFsdWVzLmxlbmd0aDsgaSA8IGlsZW47ICsraSkge1xuICAgIGN1cnIgPSBzY2FsZS5nZXRQaXhlbEZvclZhbHVlKHZhbHVlc1tpXSk7XG4gICAgdXBkYXRlTWluQW5kUHJldigpO1xuICB9XG4gIHByZXYgPSB1bmRlZmluZWQ7XG4gIGZvciAoaSA9IDAsIGlsZW4gPSBzY2FsZS50aWNrcy5sZW5ndGg7IGkgPCBpbGVuOyArK2kpIHtcbiAgICBjdXJyID0gc2NhbGUuZ2V0UGl4ZWxGb3JUaWNrKGkpO1xuICAgIHVwZGF0ZU1pbkFuZFByZXYoKTtcbiAgfVxuICByZXR1cm4gbWluO1xufVxuZnVuY3Rpb24gY29tcHV0ZUZpdENhdGVnb3J5VHJhaXRzKGluZGV4LCBydWxlciwgb3B0aW9ucywgc3RhY2tDb3VudCkge1xuICBjb25zdCB0aGlja25lc3MgPSBvcHRpb25zLmJhclRoaWNrbmVzcztcbiAgbGV0IHNpemUsIHJhdGlvO1xuICBpZiAoaXNOdWxsT3JVbmRlZih0aGlja25lc3MpKSB7XG4gICAgc2l6ZSA9IHJ1bGVyLm1pbiAqIG9wdGlvbnMuY2F0ZWdvcnlQZXJjZW50YWdlO1xuICAgIHJhdGlvID0gb3B0aW9ucy5iYXJQZXJjZW50YWdlO1xuICB9IGVsc2Uge1xuICAgIHNpemUgPSB0aGlja25lc3MgKiBzdGFja0NvdW50O1xuICAgIHJhdGlvID0gMTtcbiAgfVxuICByZXR1cm4ge1xuICAgIGNodW5rOiBzaXplIC8gc3RhY2tDb3VudCxcbiAgICByYXRpbyxcbiAgICBzdGFydDogcnVsZXIucGl4ZWxzW2luZGV4XSAtIChzaXplIC8gMilcbiAgfTtcbn1cbmZ1bmN0aW9uIGNvbXB1dGVGbGV4Q2F0ZWdvcnlUcmFpdHMoaW5kZXgsIHJ1bGVyLCBvcHRpb25zLCBzdGFja0NvdW50KSB7XG4gIGNvbnN0IHBpeGVscyA9IHJ1bGVyLnBpeGVscztcbiAgY29uc3QgY3VyciA9IHBpeGVsc1tpbmRleF07XG4gIGxldCBwcmV2ID0gaW5kZXggPiAwID8gcGl4ZWxzW2luZGV4IC0gMV0gOiBudWxsO1xuICBsZXQgbmV4dCA9IGluZGV4IDwgcGl4ZWxzLmxlbmd0aCAtIDEgPyBwaXhlbHNbaW5kZXggKyAxXSA6IG51bGw7XG4gIGNvbnN0IHBlcmNlbnQgPSBvcHRpb25zLmNhdGVnb3J5UGVyY2VudGFnZTtcbiAgaWYgKHByZXYgPT09IG51bGwpIHtcbiAgICBwcmV2ID0gY3VyciAtIChuZXh0ID09PSBudWxsID8gcnVsZXIuZW5kIC0gcnVsZXIuc3RhcnQgOiBuZXh0IC0gY3Vycik7XG4gIH1cbiAgaWYgKG5leHQgPT09IG51bGwpIHtcbiAgICBuZXh0ID0gY3VyciArIGN1cnIgLSBwcmV2O1xuICB9XG4gIGNvbnN0IHN0YXJ0ID0gY3VyciAtIChjdXJyIC0gTWF0aC5taW4ocHJldiwgbmV4dCkpIC8gMiAqIHBlcmNlbnQ7XG4gIGNvbnN0IHNpemUgPSBNYXRoLmFicyhuZXh0IC0gcHJldikgLyAyICogcGVyY2VudDtcbiAgcmV0dXJuIHtcbiAgICBjaHVuazogc2l6ZSAvIHN0YWNrQ291bnQsXG4gICAgcmF0aW86IG9wdGlvbnMuYmFyUGVyY2VudGFnZSxcbiAgICBzdGFydFxuICB9O1xufVxuZnVuY3Rpb24gcGFyc2VGbG9hdEJhcihlbnRyeSwgaXRlbSwgdlNjYWxlLCBpKSB7XG4gIGNvbnN0IHN0YXJ0VmFsdWUgPSB2U2NhbGUucGFyc2UoZW50cnlbMF0sIGkpO1xuICBjb25zdCBlbmRWYWx1ZSA9IHZTY2FsZS5wYXJzZShlbnRyeVsxXSwgaSk7XG4gIGNvbnN0IG1pbiA9IE1hdGgubWluKHN0YXJ0VmFsdWUsIGVuZFZhbHVlKTtcbiAgY29uc3QgbWF4ID0gTWF0aC5tYXgoc3RhcnRWYWx1ZSwgZW5kVmFsdWUpO1xuICBsZXQgYmFyU3RhcnQgPSBtaW47XG4gIGxldCBiYXJFbmQgPSBtYXg7XG4gIGlmIChNYXRoLmFicyhtaW4pID4gTWF0aC5hYnMobWF4KSkge1xuICAgIGJhclN0YXJ0ID0gbWF4O1xuICAgIGJhckVuZCA9IG1pbjtcbiAgfVxuICBpdGVtW3ZTY2FsZS5heGlzXSA9IGJhckVuZDtcbiAgaXRlbS5fY3VzdG9tID0ge1xuICAgIGJhclN0YXJ0LFxuICAgIGJhckVuZCxcbiAgICBzdGFydDogc3RhcnRWYWx1ZSxcbiAgICBlbmQ6IGVuZFZhbHVlLFxuICAgIG1pbixcbiAgICBtYXhcbiAgfTtcbn1cbmZ1bmN0aW9uIHBhcnNlVmFsdWUoZW50cnksIGl0ZW0sIHZTY2FsZSwgaSkge1xuICBpZiAoaXNBcnJheShlbnRyeSkpIHtcbiAgICBwYXJzZUZsb2F0QmFyKGVudHJ5LCBpdGVtLCB2U2NhbGUsIGkpO1xuICB9IGVsc2Uge1xuICAgIGl0ZW1bdlNjYWxlLmF4aXNdID0gdlNjYWxlLnBhcnNlKGVudHJ5LCBpKTtcbiAgfVxuICByZXR1cm4gaXRlbTtcbn1cbmZ1bmN0aW9uIHBhcnNlQXJyYXlPclByaW1pdGl2ZShtZXRhLCBkYXRhLCBzdGFydCwgY291bnQpIHtcbiAgY29uc3QgaVNjYWxlID0gbWV0YS5pU2NhbGU7XG4gIGNvbnN0IHZTY2FsZSA9IG1ldGEudlNjYWxlO1xuICBjb25zdCBsYWJlbHMgPSBpU2NhbGUuZ2V0TGFiZWxzKCk7XG4gIGNvbnN0IHNpbmdsZVNjYWxlID0gaVNjYWxlID09PSB2U2NhbGU7XG4gIGNvbnN0IHBhcnNlZCA9IFtdO1xuICBsZXQgaSwgaWxlbiwgaXRlbSwgZW50cnk7XG4gIGZvciAoaSA9IHN0YXJ0LCBpbGVuID0gc3RhcnQgKyBjb3VudDsgaSA8IGlsZW47ICsraSkge1xuICAgIGVudHJ5ID0gZGF0YVtpXTtcbiAgICBpdGVtID0ge307XG4gICAgaXRlbVtpU2NhbGUuYXhpc10gPSBzaW5nbGVTY2FsZSB8fCBpU2NhbGUucGFyc2UobGFiZWxzW2ldLCBpKTtcbiAgICBwYXJzZWQucHVzaChwYXJzZVZhbHVlKGVudHJ5LCBpdGVtLCB2U2NhbGUsIGkpKTtcbiAgfVxuICByZXR1cm4gcGFyc2VkO1xufVxuZnVuY3Rpb24gaXNGbG9hdEJhcihjdXN0b20pIHtcbiAgcmV0dXJuIGN1c3RvbSAmJiBjdXN0b20uYmFyU3RhcnQgIT09IHVuZGVmaW5lZCAmJiBjdXN0b20uYmFyRW5kICE9PSB1bmRlZmluZWQ7XG59XG5mdW5jdGlvbiBiYXJTaWduKHNpemUsIHZTY2FsZSwgYWN0dWFsQmFzZSkge1xuICBpZiAoc2l6ZSAhPT0gMCkge1xuICAgIHJldHVybiBzaWduKHNpemUpO1xuICB9XG4gIHJldHVybiAodlNjYWxlLmlzSG9yaXpvbnRhbCgpID8gMSA6IC0xKSAqICh2U2NhbGUubWluID49IGFjdHVhbEJhc2UgPyAxIDogLTEpO1xufVxuZnVuY3Rpb24gYm9yZGVyUHJvcHMocHJvcGVydGllcykge1xuICBsZXQgcmV2ZXJzZSwgc3RhcnQsIGVuZCwgdG9wLCBib3R0b207XG4gIGlmIChwcm9wZXJ0aWVzLmhvcml6b250YWwpIHtcbiAgICByZXZlcnNlID0gcHJvcGVydGllcy5iYXNlID4gcHJvcGVydGllcy54O1xuICAgIHN0YXJ0ID0gJ2xlZnQnO1xuICAgIGVuZCA9ICdyaWdodCc7XG4gIH0gZWxzZSB7XG4gICAgcmV2ZXJzZSA9IHByb3BlcnRpZXMuYmFzZSA8IHByb3BlcnRpZXMueTtcbiAgICBzdGFydCA9ICdib3R0b20nO1xuICAgIGVuZCA9ICd0b3AnO1xuICB9XG4gIGlmIChyZXZlcnNlKSB7XG4gICAgdG9wID0gJ2VuZCc7XG4gICAgYm90dG9tID0gJ3N0YXJ0JztcbiAgfSBlbHNlIHtcbiAgICB0b3AgPSAnc3RhcnQnO1xuICAgIGJvdHRvbSA9ICdlbmQnO1xuICB9XG4gIHJldHVybiB7c3RhcnQsIGVuZCwgcmV2ZXJzZSwgdG9wLCBib3R0b219O1xufVxuZnVuY3Rpb24gc2V0Qm9yZGVyU2tpcHBlZChwcm9wZXJ0aWVzLCBvcHRpb25zLCBzdGFjaywgaW5kZXgpIHtcbiAgbGV0IGVkZ2UgPSBvcHRpb25zLmJvcmRlclNraXBwZWQ7XG4gIGNvbnN0IHJlcyA9IHt9O1xuICBpZiAoIWVkZ2UpIHtcbiAgICBwcm9wZXJ0aWVzLmJvcmRlclNraXBwZWQgPSByZXM7XG4gICAgcmV0dXJuO1xuICB9XG4gIGNvbnN0IHtzdGFydCwgZW5kLCByZXZlcnNlLCB0b3AsIGJvdHRvbX0gPSBib3JkZXJQcm9wcyhwcm9wZXJ0aWVzKTtcbiAgaWYgKGVkZ2UgPT09ICdtaWRkbGUnICYmIHN0YWNrKSB7XG4gICAgcHJvcGVydGllcy5lbmFibGVCb3JkZXJSYWRpdXMgPSB0cnVlO1xuICAgIGlmICgoc3RhY2suX3RvcCB8fCAwKSA9PT0gaW5kZXgpIHtcbiAgICAgIGVkZ2UgPSB0b3A7XG4gICAgfSBlbHNlIGlmICgoc3RhY2suX2JvdHRvbSB8fCAwKSA9PT0gaW5kZXgpIHtcbiAgICAgIGVkZ2UgPSBib3R0b207XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlc1twYXJzZUVkZ2UoYm90dG9tLCBzdGFydCwgZW5kLCByZXZlcnNlKV0gPSB0cnVlO1xuICAgICAgZWRnZSA9IHRvcDtcbiAgICB9XG4gIH1cbiAgcmVzW3BhcnNlRWRnZShlZGdlLCBzdGFydCwgZW5kLCByZXZlcnNlKV0gPSB0cnVlO1xuICBwcm9wZXJ0aWVzLmJvcmRlclNraXBwZWQgPSByZXM7XG59XG5mdW5jdGlvbiBwYXJzZUVkZ2UoZWRnZSwgYSwgYiwgcmV2ZXJzZSkge1xuICBpZiAocmV2ZXJzZSkge1xuICAgIGVkZ2UgPSBzd2FwKGVkZ2UsIGEsIGIpO1xuICAgIGVkZ2UgPSBzdGFydEVuZChlZGdlLCBiLCBhKTtcbiAgfSBlbHNlIHtcbiAgICBlZGdlID0gc3RhcnRFbmQoZWRnZSwgYSwgYik7XG4gIH1cbiAgcmV0dXJuIGVkZ2U7XG59XG5mdW5jdGlvbiBzd2FwKG9yaWcsIHYxLCB2Mikge1xuICByZXR1cm4gb3JpZyA9PT0gdjEgPyB2MiA6IG9yaWcgPT09IHYyID8gdjEgOiBvcmlnO1xufVxuZnVuY3Rpb24gc3RhcnRFbmQodiwgc3RhcnQsIGVuZCkge1xuICByZXR1cm4gdiA9PT0gJ3N0YXJ0JyA/IHN0YXJ0IDogdiA9PT0gJ2VuZCcgPyBlbmQgOiB2O1xufVxuZnVuY3Rpb24gc2V0SW5mbGF0ZUFtb3VudChwcm9wZXJ0aWVzLCB7aW5mbGF0ZUFtb3VudH0sIHJhdGlvKSB7XG4gIHByb3BlcnRpZXMuaW5mbGF0ZUFtb3VudCA9IGluZmxhdGVBbW91bnQgPT09ICdhdXRvJ1xuICAgID8gcmF0aW8gPT09IDEgPyAwLjMzIDogMFxuICAgIDogaW5mbGF0ZUFtb3VudDtcbn1cbmNsYXNzIEJhckNvbnRyb2xsZXIgZXh0ZW5kcyBEYXRhc2V0Q29udHJvbGxlciB7XG4gIHBhcnNlUHJpbWl0aXZlRGF0YShtZXRhLCBkYXRhLCBzdGFydCwgY291bnQpIHtcbiAgICByZXR1cm4gcGFyc2VBcnJheU9yUHJpbWl0aXZlKG1ldGEsIGRhdGEsIHN0YXJ0LCBjb3VudCk7XG4gIH1cbiAgcGFyc2VBcnJheURhdGEobWV0YSwgZGF0YSwgc3RhcnQsIGNvdW50KSB7XG4gICAgcmV0dXJuIHBhcnNlQXJyYXlPclByaW1pdGl2ZShtZXRhLCBkYXRhLCBzdGFydCwgY291bnQpO1xuICB9XG4gIHBhcnNlT2JqZWN0RGF0YShtZXRhLCBkYXRhLCBzdGFydCwgY291bnQpIHtcbiAgICBjb25zdCB7aVNjYWxlLCB2U2NhbGV9ID0gbWV0YTtcbiAgICBjb25zdCB7eEF4aXNLZXkgPSAneCcsIHlBeGlzS2V5ID0gJ3knfSA9IHRoaXMuX3BhcnNpbmc7XG4gICAgY29uc3QgaUF4aXNLZXkgPSBpU2NhbGUuYXhpcyA9PT0gJ3gnID8geEF4aXNLZXkgOiB5QXhpc0tleTtcbiAgICBjb25zdCB2QXhpc0tleSA9IHZTY2FsZS5heGlzID09PSAneCcgPyB4QXhpc0tleSA6IHlBeGlzS2V5O1xuICAgIGNvbnN0IHBhcnNlZCA9IFtdO1xuICAgIGxldCBpLCBpbGVuLCBpdGVtLCBvYmo7XG4gICAgZm9yIChpID0gc3RhcnQsIGlsZW4gPSBzdGFydCArIGNvdW50OyBpIDwgaWxlbjsgKytpKSB7XG4gICAgICBvYmogPSBkYXRhW2ldO1xuICAgICAgaXRlbSA9IHt9O1xuICAgICAgaXRlbVtpU2NhbGUuYXhpc10gPSBpU2NhbGUucGFyc2UocmVzb2x2ZU9iamVjdEtleShvYmosIGlBeGlzS2V5KSwgaSk7XG4gICAgICBwYXJzZWQucHVzaChwYXJzZVZhbHVlKHJlc29sdmVPYmplY3RLZXkob2JqLCB2QXhpc0tleSksIGl0ZW0sIHZTY2FsZSwgaSkpO1xuICAgIH1cbiAgICByZXR1cm4gcGFyc2VkO1xuICB9XG4gIHVwZGF0ZVJhbmdlRnJvbVBhcnNlZChyYW5nZSwgc2NhbGUsIHBhcnNlZCwgc3RhY2spIHtcbiAgICBzdXBlci51cGRhdGVSYW5nZUZyb21QYXJzZWQocmFuZ2UsIHNjYWxlLCBwYXJzZWQsIHN0YWNrKTtcbiAgICBjb25zdCBjdXN0b20gPSBwYXJzZWQuX2N1c3RvbTtcbiAgICBpZiAoY3VzdG9tICYmIHNjYWxlID09PSB0aGlzLl9jYWNoZWRNZXRhLnZTY2FsZSkge1xuICAgICAgcmFuZ2UubWluID0gTWF0aC5taW4ocmFuZ2UubWluLCBjdXN0b20ubWluKTtcbiAgICAgIHJhbmdlLm1heCA9IE1hdGgubWF4KHJhbmdlLm1heCwgY3VzdG9tLm1heCk7XG4gICAgfVxuICB9XG4gIGdldE1heE92ZXJmbG93KCkge1xuICAgIHJldHVybiAwO1xuICB9XG4gIGdldExhYmVsQW5kVmFsdWUoaW5kZXgpIHtcbiAgICBjb25zdCBtZXRhID0gdGhpcy5fY2FjaGVkTWV0YTtcbiAgICBjb25zdCB7aVNjYWxlLCB2U2NhbGV9ID0gbWV0YTtcbiAgICBjb25zdCBwYXJzZWQgPSB0aGlzLmdldFBhcnNlZChpbmRleCk7XG4gICAgY29uc3QgY3VzdG9tID0gcGFyc2VkLl9jdXN0b207XG4gICAgY29uc3QgdmFsdWUgPSBpc0Zsb2F0QmFyKGN1c3RvbSlcbiAgICAgID8gJ1snICsgY3VzdG9tLnN0YXJ0ICsgJywgJyArIGN1c3RvbS5lbmQgKyAnXSdcbiAgICAgIDogJycgKyB2U2NhbGUuZ2V0TGFiZWxGb3JWYWx1ZShwYXJzZWRbdlNjYWxlLmF4aXNdKTtcbiAgICByZXR1cm4ge1xuICAgICAgbGFiZWw6ICcnICsgaVNjYWxlLmdldExhYmVsRm9yVmFsdWUocGFyc2VkW2lTY2FsZS5heGlzXSksXG4gICAgICB2YWx1ZVxuICAgIH07XG4gIH1cbiAgaW5pdGlhbGl6ZSgpIHtcbiAgICB0aGlzLmVuYWJsZU9wdGlvblNoYXJpbmcgPSB0cnVlO1xuICAgIHN1cGVyLmluaXRpYWxpemUoKTtcbiAgICBjb25zdCBtZXRhID0gdGhpcy5fY2FjaGVkTWV0YTtcbiAgICBtZXRhLnN0YWNrID0gdGhpcy5nZXREYXRhc2V0KCkuc3RhY2s7XG4gIH1cbiAgdXBkYXRlKG1vZGUpIHtcbiAgICBjb25zdCBtZXRhID0gdGhpcy5fY2FjaGVkTWV0YTtcbiAgICB0aGlzLnVwZGF0ZUVsZW1lbnRzKG1ldGEuZGF0YSwgMCwgbWV0YS5kYXRhLmxlbmd0aCwgbW9kZSk7XG4gIH1cbiAgdXBkYXRlRWxlbWVudHMoYmFycywgc3RhcnQsIGNvdW50LCBtb2RlKSB7XG4gICAgY29uc3QgcmVzZXQgPSBtb2RlID09PSAncmVzZXQnO1xuICAgIGNvbnN0IHtpbmRleCwgX2NhY2hlZE1ldGE6IHt2U2NhbGV9fSA9IHRoaXM7XG4gICAgY29uc3QgYmFzZSA9IHZTY2FsZS5nZXRCYXNlUGl4ZWwoKTtcbiAgICBjb25zdCBob3Jpem9udGFsID0gdlNjYWxlLmlzSG9yaXpvbnRhbCgpO1xuICAgIGNvbnN0IHJ1bGVyID0gdGhpcy5fZ2V0UnVsZXIoKTtcbiAgICBjb25zdCBmaXJzdE9wdHMgPSB0aGlzLnJlc29sdmVEYXRhRWxlbWVudE9wdGlvbnMoc3RhcnQsIG1vZGUpO1xuICAgIGNvbnN0IHNoYXJlZE9wdGlvbnMgPSB0aGlzLmdldFNoYXJlZE9wdGlvbnMoZmlyc3RPcHRzKTtcbiAgICBjb25zdCBpbmNsdWRlT3B0aW9ucyA9IHRoaXMuaW5jbHVkZU9wdGlvbnMobW9kZSwgc2hhcmVkT3B0aW9ucyk7XG4gICAgdGhpcy51cGRhdGVTaGFyZWRPcHRpb25zKHNoYXJlZE9wdGlvbnMsIG1vZGUsIGZpcnN0T3B0cyk7XG4gICAgZm9yIChsZXQgaSA9IHN0YXJ0OyBpIDwgc3RhcnQgKyBjb3VudDsgaSsrKSB7XG4gICAgICBjb25zdCBwYXJzZWQgPSB0aGlzLmdldFBhcnNlZChpKTtcbiAgICAgIGNvbnN0IHZwaXhlbHMgPSByZXNldCB8fCBpc051bGxPclVuZGVmKHBhcnNlZFt2U2NhbGUuYXhpc10pID8ge2Jhc2UsIGhlYWQ6IGJhc2V9IDogdGhpcy5fY2FsY3VsYXRlQmFyVmFsdWVQaXhlbHMoaSk7XG4gICAgICBjb25zdCBpcGl4ZWxzID0gdGhpcy5fY2FsY3VsYXRlQmFySW5kZXhQaXhlbHMoaSwgcnVsZXIpO1xuICAgICAgY29uc3Qgc3RhY2sgPSAocGFyc2VkLl9zdGFja3MgfHwge30pW3ZTY2FsZS5heGlzXTtcbiAgICAgIGNvbnN0IHByb3BlcnRpZXMgPSB7XG4gICAgICAgIGhvcml6b250YWwsXG4gICAgICAgIGJhc2U6IHZwaXhlbHMuYmFzZSxcbiAgICAgICAgZW5hYmxlQm9yZGVyUmFkaXVzOiAhc3RhY2sgfHwgaXNGbG9hdEJhcihwYXJzZWQuX2N1c3RvbSkgfHwgKGluZGV4ID09PSBzdGFjay5fdG9wIHx8IGluZGV4ID09PSBzdGFjay5fYm90dG9tKSxcbiAgICAgICAgeDogaG9yaXpvbnRhbCA/IHZwaXhlbHMuaGVhZCA6IGlwaXhlbHMuY2VudGVyLFxuICAgICAgICB5OiBob3Jpem9udGFsID8gaXBpeGVscy5jZW50ZXIgOiB2cGl4ZWxzLmhlYWQsXG4gICAgICAgIGhlaWdodDogaG9yaXpvbnRhbCA/IGlwaXhlbHMuc2l6ZSA6IE1hdGguYWJzKHZwaXhlbHMuc2l6ZSksXG4gICAgICAgIHdpZHRoOiBob3Jpem9udGFsID8gTWF0aC5hYnModnBpeGVscy5zaXplKSA6IGlwaXhlbHMuc2l6ZVxuICAgICAgfTtcbiAgICAgIGlmIChpbmNsdWRlT3B0aW9ucykge1xuICAgICAgICBwcm9wZXJ0aWVzLm9wdGlvbnMgPSBzaGFyZWRPcHRpb25zIHx8IHRoaXMucmVzb2x2ZURhdGFFbGVtZW50T3B0aW9ucyhpLCBiYXJzW2ldLmFjdGl2ZSA/ICdhY3RpdmUnIDogbW9kZSk7XG4gICAgICB9XG4gICAgICBjb25zdCBvcHRpb25zID0gcHJvcGVydGllcy5vcHRpb25zIHx8IGJhcnNbaV0ub3B0aW9ucztcbiAgICAgIHNldEJvcmRlclNraXBwZWQocHJvcGVydGllcywgb3B0aW9ucywgc3RhY2ssIGluZGV4KTtcbiAgICAgIHNldEluZmxhdGVBbW91bnQocHJvcGVydGllcywgb3B0aW9ucywgcnVsZXIucmF0aW8pO1xuICAgICAgdGhpcy51cGRhdGVFbGVtZW50KGJhcnNbaV0sIGksIHByb3BlcnRpZXMsIG1vZGUpO1xuICAgIH1cbiAgfVxuICBfZ2V0U3RhY2tzKGxhc3QsIGRhdGFJbmRleCkge1xuICAgIGNvbnN0IG1ldGEgPSB0aGlzLl9jYWNoZWRNZXRhO1xuICAgIGNvbnN0IGlTY2FsZSA9IG1ldGEuaVNjYWxlO1xuICAgIGNvbnN0IG1ldGFzZXRzID0gaVNjYWxlLmdldE1hdGNoaW5nVmlzaWJsZU1ldGFzKHRoaXMuX3R5cGUpO1xuICAgIGNvbnN0IHN0YWNrZWQgPSBpU2NhbGUub3B0aW9ucy5zdGFja2VkO1xuICAgIGNvbnN0IGlsZW4gPSBtZXRhc2V0cy5sZW5ndGg7XG4gICAgY29uc3Qgc3RhY2tzID0gW107XG4gICAgbGV0IGksIGl0ZW07XG4gICAgZm9yIChpID0gMDsgaSA8IGlsZW47ICsraSkge1xuICAgICAgaXRlbSA9IG1ldGFzZXRzW2ldO1xuICAgICAgaWYgKCFpdGVtLmNvbnRyb2xsZXIub3B0aW9ucy5ncm91cGVkKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgaWYgKHR5cGVvZiBkYXRhSW5kZXggIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIGNvbnN0IHZhbCA9IGl0ZW0uY29udHJvbGxlci5nZXRQYXJzZWQoZGF0YUluZGV4KVtcbiAgICAgICAgICBpdGVtLmNvbnRyb2xsZXIuX2NhY2hlZE1ldGEudlNjYWxlLmF4aXNcbiAgICAgICAgXTtcbiAgICAgICAgaWYgKGlzTnVsbE9yVW5kZWYodmFsKSB8fCBpc05hTih2YWwpKSB7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChzdGFja2VkID09PSBmYWxzZSB8fCBzdGFja3MuaW5kZXhPZihpdGVtLnN0YWNrKSA9PT0gLTEgfHxcblx0XHRcdFx0KHN0YWNrZWQgPT09IHVuZGVmaW5lZCAmJiBpdGVtLnN0YWNrID09PSB1bmRlZmluZWQpKSB7XG4gICAgICAgIHN0YWNrcy5wdXNoKGl0ZW0uc3RhY2spO1xuICAgICAgfVxuICAgICAgaWYgKGl0ZW0uaW5kZXggPT09IGxhc3QpIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICAgIGlmICghc3RhY2tzLmxlbmd0aCkge1xuICAgICAgc3RhY2tzLnB1c2godW5kZWZpbmVkKTtcbiAgICB9XG4gICAgcmV0dXJuIHN0YWNrcztcbiAgfVxuICBfZ2V0U3RhY2tDb3VudChpbmRleCkge1xuICAgIHJldHVybiB0aGlzLl9nZXRTdGFja3ModW5kZWZpbmVkLCBpbmRleCkubGVuZ3RoO1xuICB9XG4gIF9nZXRTdGFja0luZGV4KGRhdGFzZXRJbmRleCwgbmFtZSwgZGF0YUluZGV4KSB7XG4gICAgY29uc3Qgc3RhY2tzID0gdGhpcy5fZ2V0U3RhY2tzKGRhdGFzZXRJbmRleCwgZGF0YUluZGV4KTtcbiAgICBjb25zdCBpbmRleCA9IChuYW1lICE9PSB1bmRlZmluZWQpXG4gICAgICA/IHN0YWNrcy5pbmRleE9mKG5hbWUpXG4gICAgICA6IC0xO1xuICAgIHJldHVybiAoaW5kZXggPT09IC0xKVxuICAgICAgPyBzdGFja3MubGVuZ3RoIC0gMVxuICAgICAgOiBpbmRleDtcbiAgfVxuICBfZ2V0UnVsZXIoKSB7XG4gICAgY29uc3Qgb3B0cyA9IHRoaXMub3B0aW9ucztcbiAgICBjb25zdCBtZXRhID0gdGhpcy5fY2FjaGVkTWV0YTtcbiAgICBjb25zdCBpU2NhbGUgPSBtZXRhLmlTY2FsZTtcbiAgICBjb25zdCBwaXhlbHMgPSBbXTtcbiAgICBsZXQgaSwgaWxlbjtcbiAgICBmb3IgKGkgPSAwLCBpbGVuID0gbWV0YS5kYXRhLmxlbmd0aDsgaSA8IGlsZW47ICsraSkge1xuICAgICAgcGl4ZWxzLnB1c2goaVNjYWxlLmdldFBpeGVsRm9yVmFsdWUodGhpcy5nZXRQYXJzZWQoaSlbaVNjYWxlLmF4aXNdLCBpKSk7XG4gICAgfVxuICAgIGNvbnN0IGJhclRoaWNrbmVzcyA9IG9wdHMuYmFyVGhpY2tuZXNzO1xuICAgIGNvbnN0IG1pbiA9IGJhclRoaWNrbmVzcyB8fCBjb21wdXRlTWluU2FtcGxlU2l6ZShtZXRhKTtcbiAgICByZXR1cm4ge1xuICAgICAgbWluLFxuICAgICAgcGl4ZWxzLFxuICAgICAgc3RhcnQ6IGlTY2FsZS5fc3RhcnRQaXhlbCxcbiAgICAgIGVuZDogaVNjYWxlLl9lbmRQaXhlbCxcbiAgICAgIHN0YWNrQ291bnQ6IHRoaXMuX2dldFN0YWNrQ291bnQoKSxcbiAgICAgIHNjYWxlOiBpU2NhbGUsXG4gICAgICBncm91cGVkOiBvcHRzLmdyb3VwZWQsXG4gICAgICByYXRpbzogYmFyVGhpY2tuZXNzID8gMSA6IG9wdHMuY2F0ZWdvcnlQZXJjZW50YWdlICogb3B0cy5iYXJQZXJjZW50YWdlXG4gICAgfTtcbiAgfVxuICBfY2FsY3VsYXRlQmFyVmFsdWVQaXhlbHMoaW5kZXgpIHtcbiAgICBjb25zdCB7X2NhY2hlZE1ldGE6IHt2U2NhbGUsIF9zdGFja2VkfSwgb3B0aW9uczoge2Jhc2U6IGJhc2VWYWx1ZSwgbWluQmFyTGVuZ3RofX0gPSB0aGlzO1xuICAgIGNvbnN0IGFjdHVhbEJhc2UgPSBiYXNlVmFsdWUgfHwgMDtcbiAgICBjb25zdCBwYXJzZWQgPSB0aGlzLmdldFBhcnNlZChpbmRleCk7XG4gICAgY29uc3QgY3VzdG9tID0gcGFyc2VkLl9jdXN0b207XG4gICAgY29uc3QgZmxvYXRpbmcgPSBpc0Zsb2F0QmFyKGN1c3RvbSk7XG4gICAgbGV0IHZhbHVlID0gcGFyc2VkW3ZTY2FsZS5heGlzXTtcbiAgICBsZXQgc3RhcnQgPSAwO1xuICAgIGxldCBsZW5ndGggPSBfc3RhY2tlZCA/IHRoaXMuYXBwbHlTdGFjayh2U2NhbGUsIHBhcnNlZCwgX3N0YWNrZWQpIDogdmFsdWU7XG4gICAgbGV0IGhlYWQsIHNpemU7XG4gICAgaWYgKGxlbmd0aCAhPT0gdmFsdWUpIHtcbiAgICAgIHN0YXJ0ID0gbGVuZ3RoIC0gdmFsdWU7XG4gICAgICBsZW5ndGggPSB2YWx1ZTtcbiAgICB9XG4gICAgaWYgKGZsb2F0aW5nKSB7XG4gICAgICB2YWx1ZSA9IGN1c3RvbS5iYXJTdGFydDtcbiAgICAgIGxlbmd0aCA9IGN1c3RvbS5iYXJFbmQgLSBjdXN0b20uYmFyU3RhcnQ7XG4gICAgICBpZiAodmFsdWUgIT09IDAgJiYgc2lnbih2YWx1ZSkgIT09IHNpZ24oY3VzdG9tLmJhckVuZCkpIHtcbiAgICAgICAgc3RhcnQgPSAwO1xuICAgICAgfVxuICAgICAgc3RhcnQgKz0gdmFsdWU7XG4gICAgfVxuICAgIGNvbnN0IHN0YXJ0VmFsdWUgPSAhaXNOdWxsT3JVbmRlZihiYXNlVmFsdWUpICYmICFmbG9hdGluZyA/IGJhc2VWYWx1ZSA6IHN0YXJ0O1xuICAgIGxldCBiYXNlID0gdlNjYWxlLmdldFBpeGVsRm9yVmFsdWUoc3RhcnRWYWx1ZSk7XG4gICAgaWYgKHRoaXMuY2hhcnQuZ2V0RGF0YVZpc2liaWxpdHkoaW5kZXgpKSB7XG4gICAgICBoZWFkID0gdlNjYWxlLmdldFBpeGVsRm9yVmFsdWUoc3RhcnQgKyBsZW5ndGgpO1xuICAgIH0gZWxzZSB7XG4gICAgICBoZWFkID0gYmFzZTtcbiAgICB9XG4gICAgc2l6ZSA9IGhlYWQgLSBiYXNlO1xuICAgIGlmIChNYXRoLmFicyhzaXplKSA8IG1pbkJhckxlbmd0aCkge1xuICAgICAgc2l6ZSA9IGJhclNpZ24oc2l6ZSwgdlNjYWxlLCBhY3R1YWxCYXNlKSAqIG1pbkJhckxlbmd0aDtcbiAgICAgIGlmICh2YWx1ZSA9PT0gYWN0dWFsQmFzZSkge1xuICAgICAgICBiYXNlIC09IHNpemUgLyAyO1xuICAgICAgfVxuICAgICAgaGVhZCA9IGJhc2UgKyBzaXplO1xuICAgIH1cbiAgICBpZiAoYmFzZSA9PT0gdlNjYWxlLmdldFBpeGVsRm9yVmFsdWUoYWN0dWFsQmFzZSkpIHtcbiAgICAgIGNvbnN0IGhhbGZHcmlkID0gc2lnbihzaXplKSAqIHZTY2FsZS5nZXRMaW5lV2lkdGhGb3JWYWx1ZShhY3R1YWxCYXNlKSAvIDI7XG4gICAgICBiYXNlICs9IGhhbGZHcmlkO1xuICAgICAgc2l6ZSAtPSBoYWxmR3JpZDtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgIHNpemUsXG4gICAgICBiYXNlLFxuICAgICAgaGVhZCxcbiAgICAgIGNlbnRlcjogaGVhZCArIHNpemUgLyAyXG4gICAgfTtcbiAgfVxuICBfY2FsY3VsYXRlQmFySW5kZXhQaXhlbHMoaW5kZXgsIHJ1bGVyKSB7XG4gICAgY29uc3Qgc2NhbGUgPSBydWxlci5zY2FsZTtcbiAgICBjb25zdCBvcHRpb25zID0gdGhpcy5vcHRpb25zO1xuICAgIGNvbnN0IHNraXBOdWxsID0gb3B0aW9ucy5za2lwTnVsbDtcbiAgICBjb25zdCBtYXhCYXJUaGlja25lc3MgPSB2YWx1ZU9yRGVmYXVsdChvcHRpb25zLm1heEJhclRoaWNrbmVzcywgSW5maW5pdHkpO1xuICAgIGxldCBjZW50ZXIsIHNpemU7XG4gICAgaWYgKHJ1bGVyLmdyb3VwZWQpIHtcbiAgICAgIGNvbnN0IHN0YWNrQ291bnQgPSBza2lwTnVsbCA/IHRoaXMuX2dldFN0YWNrQ291bnQoaW5kZXgpIDogcnVsZXIuc3RhY2tDb3VudDtcbiAgICAgIGNvbnN0IHJhbmdlID0gb3B0aW9ucy5iYXJUaGlja25lc3MgPT09ICdmbGV4J1xuICAgICAgICA/IGNvbXB1dGVGbGV4Q2F0ZWdvcnlUcmFpdHMoaW5kZXgsIHJ1bGVyLCBvcHRpb25zLCBzdGFja0NvdW50KVxuICAgICAgICA6IGNvbXB1dGVGaXRDYXRlZ29yeVRyYWl0cyhpbmRleCwgcnVsZXIsIG9wdGlvbnMsIHN0YWNrQ291bnQpO1xuICAgICAgY29uc3Qgc3RhY2tJbmRleCA9IHRoaXMuX2dldFN0YWNrSW5kZXgodGhpcy5pbmRleCwgdGhpcy5fY2FjaGVkTWV0YS5zdGFjaywgc2tpcE51bGwgPyBpbmRleCA6IHVuZGVmaW5lZCk7XG4gICAgICBjZW50ZXIgPSByYW5nZS5zdGFydCArIChyYW5nZS5jaHVuayAqIHN0YWNrSW5kZXgpICsgKHJhbmdlLmNodW5rIC8gMik7XG4gICAgICBzaXplID0gTWF0aC5taW4obWF4QmFyVGhpY2tuZXNzLCByYW5nZS5jaHVuayAqIHJhbmdlLnJhdGlvKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY2VudGVyID0gc2NhbGUuZ2V0UGl4ZWxGb3JWYWx1ZSh0aGlzLmdldFBhcnNlZChpbmRleClbc2NhbGUuYXhpc10sIGluZGV4KTtcbiAgICAgIHNpemUgPSBNYXRoLm1pbihtYXhCYXJUaGlja25lc3MsIHJ1bGVyLm1pbiAqIHJ1bGVyLnJhdGlvKTtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgIGJhc2U6IGNlbnRlciAtIHNpemUgLyAyLFxuICAgICAgaGVhZDogY2VudGVyICsgc2l6ZSAvIDIsXG4gICAgICBjZW50ZXIsXG4gICAgICBzaXplXG4gICAgfTtcbiAgfVxuICBkcmF3KCkge1xuICAgIGNvbnN0IG1ldGEgPSB0aGlzLl9jYWNoZWRNZXRhO1xuICAgIGNvbnN0IHZTY2FsZSA9IG1ldGEudlNjYWxlO1xuICAgIGNvbnN0IHJlY3RzID0gbWV0YS5kYXRhO1xuICAgIGNvbnN0IGlsZW4gPSByZWN0cy5sZW5ndGg7XG4gICAgbGV0IGkgPSAwO1xuICAgIGZvciAoOyBpIDwgaWxlbjsgKytpKSB7XG4gICAgICBpZiAodGhpcy5nZXRQYXJzZWQoaSlbdlNjYWxlLmF4aXNdICE9PSBudWxsKSB7XG4gICAgICAgIHJlY3RzW2ldLmRyYXcodGhpcy5fY3R4KTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cbkJhckNvbnRyb2xsZXIuaWQgPSAnYmFyJztcbkJhckNvbnRyb2xsZXIuZGVmYXVsdHMgPSB7XG4gIGRhdGFzZXRFbGVtZW50VHlwZTogZmFsc2UsXG4gIGRhdGFFbGVtZW50VHlwZTogJ2JhcicsXG4gIGNhdGVnb3J5UGVyY2VudGFnZTogMC44LFxuICBiYXJQZXJjZW50YWdlOiAwLjksXG4gIGdyb3VwZWQ6IHRydWUsXG4gIGFuaW1hdGlvbnM6IHtcbiAgICBudW1iZXJzOiB7XG4gICAgICB0eXBlOiAnbnVtYmVyJyxcbiAgICAgIHByb3BlcnRpZXM6IFsneCcsICd5JywgJ2Jhc2UnLCAnd2lkdGgnLCAnaGVpZ2h0J11cbiAgICB9XG4gIH1cbn07XG5CYXJDb250cm9sbGVyLm92ZXJyaWRlcyA9IHtcbiAgc2NhbGVzOiB7XG4gICAgX2luZGV4Xzoge1xuICAgICAgdHlwZTogJ2NhdGVnb3J5JyxcbiAgICAgIG9mZnNldDogdHJ1ZSxcbiAgICAgIGdyaWQ6IHtcbiAgICAgICAgb2Zmc2V0OiB0cnVlXG4gICAgICB9XG4gICAgfSxcbiAgICBfdmFsdWVfOiB7XG4gICAgICB0eXBlOiAnbGluZWFyJyxcbiAgICAgIGJlZ2luQXRaZXJvOiB0cnVlLFxuICAgIH1cbiAgfVxufTtcblxuY2xhc3MgQnViYmxlQ29udHJvbGxlciBleHRlbmRzIERhdGFzZXRDb250cm9sbGVyIHtcbiAgaW5pdGlhbGl6ZSgpIHtcbiAgICB0aGlzLmVuYWJsZU9wdGlvblNoYXJpbmcgPSB0cnVlO1xuICAgIHN1cGVyLmluaXRpYWxpemUoKTtcbiAgfVxuICBwYXJzZVByaW1pdGl2ZURhdGEobWV0YSwgZGF0YSwgc3RhcnQsIGNvdW50KSB7XG4gICAgY29uc3QgcGFyc2VkID0gc3VwZXIucGFyc2VQcmltaXRpdmVEYXRhKG1ldGEsIGRhdGEsIHN0YXJ0LCBjb3VudCk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwYXJzZWQubGVuZ3RoOyBpKyspIHtcbiAgICAgIHBhcnNlZFtpXS5fY3VzdG9tID0gdGhpcy5yZXNvbHZlRGF0YUVsZW1lbnRPcHRpb25zKGkgKyBzdGFydCkucmFkaXVzO1xuICAgIH1cbiAgICByZXR1cm4gcGFyc2VkO1xuICB9XG4gIHBhcnNlQXJyYXlEYXRhKG1ldGEsIGRhdGEsIHN0YXJ0LCBjb3VudCkge1xuICAgIGNvbnN0IHBhcnNlZCA9IHN1cGVyLnBhcnNlQXJyYXlEYXRhKG1ldGEsIGRhdGEsIHN0YXJ0LCBjb3VudCk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwYXJzZWQubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNvbnN0IGl0ZW0gPSBkYXRhW3N0YXJ0ICsgaV07XG4gICAgICBwYXJzZWRbaV0uX2N1c3RvbSA9IHZhbHVlT3JEZWZhdWx0KGl0ZW1bMl0sIHRoaXMucmVzb2x2ZURhdGFFbGVtZW50T3B0aW9ucyhpICsgc3RhcnQpLnJhZGl1cyk7XG4gICAgfVxuICAgIHJldHVybiBwYXJzZWQ7XG4gIH1cbiAgcGFyc2VPYmplY3REYXRhKG1ldGEsIGRhdGEsIHN0YXJ0LCBjb3VudCkge1xuICAgIGNvbnN0IHBhcnNlZCA9IHN1cGVyLnBhcnNlT2JqZWN0RGF0YShtZXRhLCBkYXRhLCBzdGFydCwgY291bnQpO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcGFyc2VkLmxlbmd0aDsgaSsrKSB7XG4gICAgICBjb25zdCBpdGVtID0gZGF0YVtzdGFydCArIGldO1xuICAgICAgcGFyc2VkW2ldLl9jdXN0b20gPSB2YWx1ZU9yRGVmYXVsdChpdGVtICYmIGl0ZW0uciAmJiAraXRlbS5yLCB0aGlzLnJlc29sdmVEYXRhRWxlbWVudE9wdGlvbnMoaSArIHN0YXJ0KS5yYWRpdXMpO1xuICAgIH1cbiAgICByZXR1cm4gcGFyc2VkO1xuICB9XG4gIGdldE1heE92ZXJmbG93KCkge1xuICAgIGNvbnN0IGRhdGEgPSB0aGlzLl9jYWNoZWRNZXRhLmRhdGE7XG4gICAgbGV0IG1heCA9IDA7XG4gICAgZm9yIChsZXQgaSA9IGRhdGEubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgIG1heCA9IE1hdGgubWF4KG1heCwgZGF0YVtpXS5zaXplKHRoaXMucmVzb2x2ZURhdGFFbGVtZW50T3B0aW9ucyhpKSkgLyAyKTtcbiAgICB9XG4gICAgcmV0dXJuIG1heCA+IDAgJiYgbWF4O1xuICB9XG4gIGdldExhYmVsQW5kVmFsdWUoaW5kZXgpIHtcbiAgICBjb25zdCBtZXRhID0gdGhpcy5fY2FjaGVkTWV0YTtcbiAgICBjb25zdCB7eFNjYWxlLCB5U2NhbGV9ID0gbWV0YTtcbiAgICBjb25zdCBwYXJzZWQgPSB0aGlzLmdldFBhcnNlZChpbmRleCk7XG4gICAgY29uc3QgeCA9IHhTY2FsZS5nZXRMYWJlbEZvclZhbHVlKHBhcnNlZC54KTtcbiAgICBjb25zdCB5ID0geVNjYWxlLmdldExhYmVsRm9yVmFsdWUocGFyc2VkLnkpO1xuICAgIGNvbnN0IHIgPSBwYXJzZWQuX2N1c3RvbTtcbiAgICByZXR1cm4ge1xuICAgICAgbGFiZWw6IG1ldGEubGFiZWwsXG4gICAgICB2YWx1ZTogJygnICsgeCArICcsICcgKyB5ICsgKHIgPyAnLCAnICsgciA6ICcnKSArICcpJ1xuICAgIH07XG4gIH1cbiAgdXBkYXRlKG1vZGUpIHtcbiAgICBjb25zdCBwb2ludHMgPSB0aGlzLl9jYWNoZWRNZXRhLmRhdGE7XG4gICAgdGhpcy51cGRhdGVFbGVtZW50cyhwb2ludHMsIDAsIHBvaW50cy5sZW5ndGgsIG1vZGUpO1xuICB9XG4gIHVwZGF0ZUVsZW1lbnRzKHBvaW50cywgc3RhcnQsIGNvdW50LCBtb2RlKSB7XG4gICAgY29uc3QgcmVzZXQgPSBtb2RlID09PSAncmVzZXQnO1xuICAgIGNvbnN0IHtpU2NhbGUsIHZTY2FsZX0gPSB0aGlzLl9jYWNoZWRNZXRhO1xuICAgIGNvbnN0IGZpcnN0T3B0cyA9IHRoaXMucmVzb2x2ZURhdGFFbGVtZW50T3B0aW9ucyhzdGFydCwgbW9kZSk7XG4gICAgY29uc3Qgc2hhcmVkT3B0aW9ucyA9IHRoaXMuZ2V0U2hhcmVkT3B0aW9ucyhmaXJzdE9wdHMpO1xuICAgIGNvbnN0IGluY2x1ZGVPcHRpb25zID0gdGhpcy5pbmNsdWRlT3B0aW9ucyhtb2RlLCBzaGFyZWRPcHRpb25zKTtcbiAgICBjb25zdCBpQXhpcyA9IGlTY2FsZS5heGlzO1xuICAgIGNvbnN0IHZBeGlzID0gdlNjYWxlLmF4aXM7XG4gICAgZm9yIChsZXQgaSA9IHN0YXJ0OyBpIDwgc3RhcnQgKyBjb3VudDsgaSsrKSB7XG4gICAgICBjb25zdCBwb2ludCA9IHBvaW50c1tpXTtcbiAgICAgIGNvbnN0IHBhcnNlZCA9ICFyZXNldCAmJiB0aGlzLmdldFBhcnNlZChpKTtcbiAgICAgIGNvbnN0IHByb3BlcnRpZXMgPSB7fTtcbiAgICAgIGNvbnN0IGlQaXhlbCA9IHByb3BlcnRpZXNbaUF4aXNdID0gcmVzZXQgPyBpU2NhbGUuZ2V0UGl4ZWxGb3JEZWNpbWFsKDAuNSkgOiBpU2NhbGUuZ2V0UGl4ZWxGb3JWYWx1ZShwYXJzZWRbaUF4aXNdKTtcbiAgICAgIGNvbnN0IHZQaXhlbCA9IHByb3BlcnRpZXNbdkF4aXNdID0gcmVzZXQgPyB2U2NhbGUuZ2V0QmFzZVBpeGVsKCkgOiB2U2NhbGUuZ2V0UGl4ZWxGb3JWYWx1ZShwYXJzZWRbdkF4aXNdKTtcbiAgICAgIHByb3BlcnRpZXMuc2tpcCA9IGlzTmFOKGlQaXhlbCkgfHwgaXNOYU4odlBpeGVsKTtcbiAgICAgIGlmIChpbmNsdWRlT3B0aW9ucykge1xuICAgICAgICBwcm9wZXJ0aWVzLm9wdGlvbnMgPSB0aGlzLnJlc29sdmVEYXRhRWxlbWVudE9wdGlvbnMoaSwgcG9pbnQuYWN0aXZlID8gJ2FjdGl2ZScgOiBtb2RlKTtcbiAgICAgICAgaWYgKHJlc2V0KSB7XG4gICAgICAgICAgcHJvcGVydGllcy5vcHRpb25zLnJhZGl1cyA9IDA7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHRoaXMudXBkYXRlRWxlbWVudChwb2ludCwgaSwgcHJvcGVydGllcywgbW9kZSk7XG4gICAgfVxuICAgIHRoaXMudXBkYXRlU2hhcmVkT3B0aW9ucyhzaGFyZWRPcHRpb25zLCBtb2RlLCBmaXJzdE9wdHMpO1xuICB9XG4gIHJlc29sdmVEYXRhRWxlbWVudE9wdGlvbnMoaW5kZXgsIG1vZGUpIHtcbiAgICBjb25zdCBwYXJzZWQgPSB0aGlzLmdldFBhcnNlZChpbmRleCk7XG4gICAgbGV0IHZhbHVlcyA9IHN1cGVyLnJlc29sdmVEYXRhRWxlbWVudE9wdGlvbnMoaW5kZXgsIG1vZGUpO1xuICAgIGlmICh2YWx1ZXMuJHNoYXJlZCkge1xuICAgICAgdmFsdWVzID0gT2JqZWN0LmFzc2lnbih7fSwgdmFsdWVzLCB7JHNoYXJlZDogZmFsc2V9KTtcbiAgICB9XG4gICAgY29uc3QgcmFkaXVzID0gdmFsdWVzLnJhZGl1cztcbiAgICBpZiAobW9kZSAhPT0gJ2FjdGl2ZScpIHtcbiAgICAgIHZhbHVlcy5yYWRpdXMgPSAwO1xuICAgIH1cbiAgICB2YWx1ZXMucmFkaXVzICs9IHZhbHVlT3JEZWZhdWx0KHBhcnNlZCAmJiBwYXJzZWQuX2N1c3RvbSwgcmFkaXVzKTtcbiAgICByZXR1cm4gdmFsdWVzO1xuICB9XG59XG5CdWJibGVDb250cm9sbGVyLmlkID0gJ2J1YmJsZSc7XG5CdWJibGVDb250cm9sbGVyLmRlZmF1bHRzID0ge1xuICBkYXRhc2V0RWxlbWVudFR5cGU6IGZhbHNlLFxuICBkYXRhRWxlbWVudFR5cGU6ICdwb2ludCcsXG4gIGFuaW1hdGlvbnM6IHtcbiAgICBudW1iZXJzOiB7XG4gICAgICB0eXBlOiAnbnVtYmVyJyxcbiAgICAgIHByb3BlcnRpZXM6IFsneCcsICd5JywgJ2JvcmRlcldpZHRoJywgJ3JhZGl1cyddXG4gICAgfVxuICB9XG59O1xuQnViYmxlQ29udHJvbGxlci5vdmVycmlkZXMgPSB7XG4gIHNjYWxlczoge1xuICAgIHg6IHtcbiAgICAgIHR5cGU6ICdsaW5lYXInXG4gICAgfSxcbiAgICB5OiB7XG4gICAgICB0eXBlOiAnbGluZWFyJ1xuICAgIH1cbiAgfSxcbiAgcGx1Z2luczoge1xuICAgIHRvb2x0aXA6IHtcbiAgICAgIGNhbGxiYWNrczoge1xuICAgICAgICB0aXRsZSgpIHtcbiAgICAgICAgICByZXR1cm4gJyc7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbn07XG5cbmZ1bmN0aW9uIGdldFJhdGlvQW5kT2Zmc2V0KHJvdGF0aW9uLCBjaXJjdW1mZXJlbmNlLCBjdXRvdXQpIHtcbiAgbGV0IHJhdGlvWCA9IDE7XG4gIGxldCByYXRpb1kgPSAxO1xuICBsZXQgb2Zmc2V0WCA9IDA7XG4gIGxldCBvZmZzZXRZID0gMDtcbiAgaWYgKGNpcmN1bWZlcmVuY2UgPCBUQVUpIHtcbiAgICBjb25zdCBzdGFydEFuZ2xlID0gcm90YXRpb247XG4gICAgY29uc3QgZW5kQW5nbGUgPSBzdGFydEFuZ2xlICsgY2lyY3VtZmVyZW5jZTtcbiAgICBjb25zdCBzdGFydFggPSBNYXRoLmNvcyhzdGFydEFuZ2xlKTtcbiAgICBjb25zdCBzdGFydFkgPSBNYXRoLnNpbihzdGFydEFuZ2xlKTtcbiAgICBjb25zdCBlbmRYID0gTWF0aC5jb3MoZW5kQW5nbGUpO1xuICAgIGNvbnN0IGVuZFkgPSBNYXRoLnNpbihlbmRBbmdsZSk7XG4gICAgY29uc3QgY2FsY01heCA9IChhbmdsZSwgYSwgYikgPT4gX2FuZ2xlQmV0d2VlbihhbmdsZSwgc3RhcnRBbmdsZSwgZW5kQW5nbGUsIHRydWUpID8gMSA6IE1hdGgubWF4KGEsIGEgKiBjdXRvdXQsIGIsIGIgKiBjdXRvdXQpO1xuICAgIGNvbnN0IGNhbGNNaW4gPSAoYW5nbGUsIGEsIGIpID0+IF9hbmdsZUJldHdlZW4oYW5nbGUsIHN0YXJ0QW5nbGUsIGVuZEFuZ2xlLCB0cnVlKSA/IC0xIDogTWF0aC5taW4oYSwgYSAqIGN1dG91dCwgYiwgYiAqIGN1dG91dCk7XG4gICAgY29uc3QgbWF4WCA9IGNhbGNNYXgoMCwgc3RhcnRYLCBlbmRYKTtcbiAgICBjb25zdCBtYXhZID0gY2FsY01heChIQUxGX1BJLCBzdGFydFksIGVuZFkpO1xuICAgIGNvbnN0IG1pblggPSBjYWxjTWluKFBJLCBzdGFydFgsIGVuZFgpO1xuICAgIGNvbnN0IG1pblkgPSBjYWxjTWluKFBJICsgSEFMRl9QSSwgc3RhcnRZLCBlbmRZKTtcbiAgICByYXRpb1ggPSAobWF4WCAtIG1pblgpIC8gMjtcbiAgICByYXRpb1kgPSAobWF4WSAtIG1pblkpIC8gMjtcbiAgICBvZmZzZXRYID0gLShtYXhYICsgbWluWCkgLyAyO1xuICAgIG9mZnNldFkgPSAtKG1heFkgKyBtaW5ZKSAvIDI7XG4gIH1cbiAgcmV0dXJuIHtyYXRpb1gsIHJhdGlvWSwgb2Zmc2V0WCwgb2Zmc2V0WX07XG59XG5jbGFzcyBEb3VnaG51dENvbnRyb2xsZXIgZXh0ZW5kcyBEYXRhc2V0Q29udHJvbGxlciB7XG4gIGNvbnN0cnVjdG9yKGNoYXJ0LCBkYXRhc2V0SW5kZXgpIHtcbiAgICBzdXBlcihjaGFydCwgZGF0YXNldEluZGV4KTtcbiAgICB0aGlzLmVuYWJsZU9wdGlvblNoYXJpbmcgPSB0cnVlO1xuICAgIHRoaXMuaW5uZXJSYWRpdXMgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5vdXRlclJhZGl1cyA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLm9mZnNldFggPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5vZmZzZXRZID0gdW5kZWZpbmVkO1xuICB9XG4gIGxpbmtTY2FsZXMoKSB7fVxuICBwYXJzZShzdGFydCwgY291bnQpIHtcbiAgICBjb25zdCBkYXRhID0gdGhpcy5nZXREYXRhc2V0KCkuZGF0YTtcbiAgICBjb25zdCBtZXRhID0gdGhpcy5fY2FjaGVkTWV0YTtcbiAgICBpZiAodGhpcy5fcGFyc2luZyA9PT0gZmFsc2UpIHtcbiAgICAgIG1ldGEuX3BhcnNlZCA9IGRhdGE7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxldCBnZXR0ZXIgPSAoaSkgPT4gK2RhdGFbaV07XG4gICAgICBpZiAoaXNPYmplY3QoZGF0YVtzdGFydF0pKSB7XG4gICAgICAgIGNvbnN0IHtrZXkgPSAndmFsdWUnfSA9IHRoaXMuX3BhcnNpbmc7XG4gICAgICAgIGdldHRlciA9IChpKSA9PiArcmVzb2x2ZU9iamVjdEtleShkYXRhW2ldLCBrZXkpO1xuICAgICAgfVxuICAgICAgbGV0IGksIGlsZW47XG4gICAgICBmb3IgKGkgPSBzdGFydCwgaWxlbiA9IHN0YXJ0ICsgY291bnQ7IGkgPCBpbGVuOyArK2kpIHtcbiAgICAgICAgbWV0YS5fcGFyc2VkW2ldID0gZ2V0dGVyKGkpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBfZ2V0Um90YXRpb24oKSB7XG4gICAgcmV0dXJuIHRvUmFkaWFucyh0aGlzLm9wdGlvbnMucm90YXRpb24gLSA5MCk7XG4gIH1cbiAgX2dldENpcmN1bWZlcmVuY2UoKSB7XG4gICAgcmV0dXJuIHRvUmFkaWFucyh0aGlzLm9wdGlvbnMuY2lyY3VtZmVyZW5jZSk7XG4gIH1cbiAgX2dldFJvdGF0aW9uRXh0ZW50cygpIHtcbiAgICBsZXQgbWluID0gVEFVO1xuICAgIGxldCBtYXggPSAtVEFVO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5jaGFydC5kYXRhLmRhdGFzZXRzLmxlbmd0aDsgKytpKSB7XG4gICAgICBpZiAodGhpcy5jaGFydC5pc0RhdGFzZXRWaXNpYmxlKGkpKSB7XG4gICAgICAgIGNvbnN0IGNvbnRyb2xsZXIgPSB0aGlzLmNoYXJ0LmdldERhdGFzZXRNZXRhKGkpLmNvbnRyb2xsZXI7XG4gICAgICAgIGNvbnN0IHJvdGF0aW9uID0gY29udHJvbGxlci5fZ2V0Um90YXRpb24oKTtcbiAgICAgICAgY29uc3QgY2lyY3VtZmVyZW5jZSA9IGNvbnRyb2xsZXIuX2dldENpcmN1bWZlcmVuY2UoKTtcbiAgICAgICAgbWluID0gTWF0aC5taW4obWluLCByb3RhdGlvbik7XG4gICAgICAgIG1heCA9IE1hdGgubWF4KG1heCwgcm90YXRpb24gKyBjaXJjdW1mZXJlbmNlKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgIHJvdGF0aW9uOiBtaW4sXG4gICAgICBjaXJjdW1mZXJlbmNlOiBtYXggLSBtaW4sXG4gICAgfTtcbiAgfVxuICB1cGRhdGUobW9kZSkge1xuICAgIGNvbnN0IGNoYXJ0ID0gdGhpcy5jaGFydDtcbiAgICBjb25zdCB7Y2hhcnRBcmVhfSA9IGNoYXJ0O1xuICAgIGNvbnN0IG1ldGEgPSB0aGlzLl9jYWNoZWRNZXRhO1xuICAgIGNvbnN0IGFyY3MgPSBtZXRhLmRhdGE7XG4gICAgY29uc3Qgc3BhY2luZyA9IHRoaXMuZ2V0TWF4Qm9yZGVyV2lkdGgoKSArIHRoaXMuZ2V0TWF4T2Zmc2V0KGFyY3MpICsgdGhpcy5vcHRpb25zLnNwYWNpbmc7XG4gICAgY29uc3QgbWF4U2l6ZSA9IE1hdGgubWF4KChNYXRoLm1pbihjaGFydEFyZWEud2lkdGgsIGNoYXJ0QXJlYS5oZWlnaHQpIC0gc3BhY2luZykgLyAyLCAwKTtcbiAgICBjb25zdCBjdXRvdXQgPSBNYXRoLm1pbih0b1BlcmNlbnRhZ2UodGhpcy5vcHRpb25zLmN1dG91dCwgbWF4U2l6ZSksIDEpO1xuICAgIGNvbnN0IGNoYXJ0V2VpZ2h0ID0gdGhpcy5fZ2V0UmluZ1dlaWdodCh0aGlzLmluZGV4KTtcbiAgICBjb25zdCB7Y2lyY3VtZmVyZW5jZSwgcm90YXRpb259ID0gdGhpcy5fZ2V0Um90YXRpb25FeHRlbnRzKCk7XG4gICAgY29uc3Qge3JhdGlvWCwgcmF0aW9ZLCBvZmZzZXRYLCBvZmZzZXRZfSA9IGdldFJhdGlvQW5kT2Zmc2V0KHJvdGF0aW9uLCBjaXJjdW1mZXJlbmNlLCBjdXRvdXQpO1xuICAgIGNvbnN0IG1heFdpZHRoID0gKGNoYXJ0QXJlYS53aWR0aCAtIHNwYWNpbmcpIC8gcmF0aW9YO1xuICAgIGNvbnN0IG1heEhlaWdodCA9IChjaGFydEFyZWEuaGVpZ2h0IC0gc3BhY2luZykgLyByYXRpb1k7XG4gICAgY29uc3QgbWF4UmFkaXVzID0gTWF0aC5tYXgoTWF0aC5taW4obWF4V2lkdGgsIG1heEhlaWdodCkgLyAyLCAwKTtcbiAgICBjb25zdCBvdXRlclJhZGl1cyA9IHRvRGltZW5zaW9uKHRoaXMub3B0aW9ucy5yYWRpdXMsIG1heFJhZGl1cyk7XG4gICAgY29uc3QgaW5uZXJSYWRpdXMgPSBNYXRoLm1heChvdXRlclJhZGl1cyAqIGN1dG91dCwgMCk7XG4gICAgY29uc3QgcmFkaXVzTGVuZ3RoID0gKG91dGVyUmFkaXVzIC0gaW5uZXJSYWRpdXMpIC8gdGhpcy5fZ2V0VmlzaWJsZURhdGFzZXRXZWlnaHRUb3RhbCgpO1xuICAgIHRoaXMub2Zmc2V0WCA9IG9mZnNldFggKiBvdXRlclJhZGl1cztcbiAgICB0aGlzLm9mZnNldFkgPSBvZmZzZXRZICogb3V0ZXJSYWRpdXM7XG4gICAgbWV0YS50b3RhbCA9IHRoaXMuY2FsY3VsYXRlVG90YWwoKTtcbiAgICB0aGlzLm91dGVyUmFkaXVzID0gb3V0ZXJSYWRpdXMgLSByYWRpdXNMZW5ndGggKiB0aGlzLl9nZXRSaW5nV2VpZ2h0T2Zmc2V0KHRoaXMuaW5kZXgpO1xuICAgIHRoaXMuaW5uZXJSYWRpdXMgPSBNYXRoLm1heCh0aGlzLm91dGVyUmFkaXVzIC0gcmFkaXVzTGVuZ3RoICogY2hhcnRXZWlnaHQsIDApO1xuICAgIHRoaXMudXBkYXRlRWxlbWVudHMoYXJjcywgMCwgYXJjcy5sZW5ndGgsIG1vZGUpO1xuICB9XG4gIF9jaXJjdW1mZXJlbmNlKGksIHJlc2V0KSB7XG4gICAgY29uc3Qgb3B0cyA9IHRoaXMub3B0aW9ucztcbiAgICBjb25zdCBtZXRhID0gdGhpcy5fY2FjaGVkTWV0YTtcbiAgICBjb25zdCBjaXJjdW1mZXJlbmNlID0gdGhpcy5fZ2V0Q2lyY3VtZmVyZW5jZSgpO1xuICAgIGlmICgocmVzZXQgJiYgb3B0cy5hbmltYXRpb24uYW5pbWF0ZVJvdGF0ZSkgfHwgIXRoaXMuY2hhcnQuZ2V0RGF0YVZpc2liaWxpdHkoaSkgfHwgbWV0YS5fcGFyc2VkW2ldID09PSBudWxsIHx8IG1ldGEuZGF0YVtpXS5oaWRkZW4pIHtcbiAgICAgIHJldHVybiAwO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5jYWxjdWxhdGVDaXJjdW1mZXJlbmNlKG1ldGEuX3BhcnNlZFtpXSAqIGNpcmN1bWZlcmVuY2UgLyBUQVUpO1xuICB9XG4gIHVwZGF0ZUVsZW1lbnRzKGFyY3MsIHN0YXJ0LCBjb3VudCwgbW9kZSkge1xuICAgIGNvbnN0IHJlc2V0ID0gbW9kZSA9PT0gJ3Jlc2V0JztcbiAgICBjb25zdCBjaGFydCA9IHRoaXMuY2hhcnQ7XG4gICAgY29uc3QgY2hhcnRBcmVhID0gY2hhcnQuY2hhcnRBcmVhO1xuICAgIGNvbnN0IG9wdHMgPSBjaGFydC5vcHRpb25zO1xuICAgIGNvbnN0IGFuaW1hdGlvbk9wdHMgPSBvcHRzLmFuaW1hdGlvbjtcbiAgICBjb25zdCBjZW50ZXJYID0gKGNoYXJ0QXJlYS5sZWZ0ICsgY2hhcnRBcmVhLnJpZ2h0KSAvIDI7XG4gICAgY29uc3QgY2VudGVyWSA9IChjaGFydEFyZWEudG9wICsgY2hhcnRBcmVhLmJvdHRvbSkgLyAyO1xuICAgIGNvbnN0IGFuaW1hdGVTY2FsZSA9IHJlc2V0ICYmIGFuaW1hdGlvbk9wdHMuYW5pbWF0ZVNjYWxlO1xuICAgIGNvbnN0IGlubmVyUmFkaXVzID0gYW5pbWF0ZVNjYWxlID8gMCA6IHRoaXMuaW5uZXJSYWRpdXM7XG4gICAgY29uc3Qgb3V0ZXJSYWRpdXMgPSBhbmltYXRlU2NhbGUgPyAwIDogdGhpcy5vdXRlclJhZGl1cztcbiAgICBjb25zdCBmaXJzdE9wdHMgPSB0aGlzLnJlc29sdmVEYXRhRWxlbWVudE9wdGlvbnMoc3RhcnQsIG1vZGUpO1xuICAgIGNvbnN0IHNoYXJlZE9wdGlvbnMgPSB0aGlzLmdldFNoYXJlZE9wdGlvbnMoZmlyc3RPcHRzKTtcbiAgICBjb25zdCBpbmNsdWRlT3B0aW9ucyA9IHRoaXMuaW5jbHVkZU9wdGlvbnMobW9kZSwgc2hhcmVkT3B0aW9ucyk7XG4gICAgbGV0IHN0YXJ0QW5nbGUgPSB0aGlzLl9nZXRSb3RhdGlvbigpO1xuICAgIGxldCBpO1xuICAgIGZvciAoaSA9IDA7IGkgPCBzdGFydDsgKytpKSB7XG4gICAgICBzdGFydEFuZ2xlICs9IHRoaXMuX2NpcmN1bWZlcmVuY2UoaSwgcmVzZXQpO1xuICAgIH1cbiAgICBmb3IgKGkgPSBzdGFydDsgaSA8IHN0YXJ0ICsgY291bnQ7ICsraSkge1xuICAgICAgY29uc3QgY2lyY3VtZmVyZW5jZSA9IHRoaXMuX2NpcmN1bWZlcmVuY2UoaSwgcmVzZXQpO1xuICAgICAgY29uc3QgYXJjID0gYXJjc1tpXTtcbiAgICAgIGNvbnN0IHByb3BlcnRpZXMgPSB7XG4gICAgICAgIHg6IGNlbnRlclggKyB0aGlzLm9mZnNldFgsXG4gICAgICAgIHk6IGNlbnRlclkgKyB0aGlzLm9mZnNldFksXG4gICAgICAgIHN0YXJ0QW5nbGUsXG4gICAgICAgIGVuZEFuZ2xlOiBzdGFydEFuZ2xlICsgY2lyY3VtZmVyZW5jZSxcbiAgICAgICAgY2lyY3VtZmVyZW5jZSxcbiAgICAgICAgb3V0ZXJSYWRpdXMsXG4gICAgICAgIGlubmVyUmFkaXVzXG4gICAgICB9O1xuICAgICAgaWYgKGluY2x1ZGVPcHRpb25zKSB7XG4gICAgICAgIHByb3BlcnRpZXMub3B0aW9ucyA9IHNoYXJlZE9wdGlvbnMgfHwgdGhpcy5yZXNvbHZlRGF0YUVsZW1lbnRPcHRpb25zKGksIGFyYy5hY3RpdmUgPyAnYWN0aXZlJyA6IG1vZGUpO1xuICAgICAgfVxuICAgICAgc3RhcnRBbmdsZSArPSBjaXJjdW1mZXJlbmNlO1xuICAgICAgdGhpcy51cGRhdGVFbGVtZW50KGFyYywgaSwgcHJvcGVydGllcywgbW9kZSk7XG4gICAgfVxuICAgIHRoaXMudXBkYXRlU2hhcmVkT3B0aW9ucyhzaGFyZWRPcHRpb25zLCBtb2RlLCBmaXJzdE9wdHMpO1xuICB9XG4gIGNhbGN1bGF0ZVRvdGFsKCkge1xuICAgIGNvbnN0IG1ldGEgPSB0aGlzLl9jYWNoZWRNZXRhO1xuICAgIGNvbnN0IG1ldGFEYXRhID0gbWV0YS5kYXRhO1xuICAgIGxldCB0b3RhbCA9IDA7XG4gICAgbGV0IGk7XG4gICAgZm9yIChpID0gMDsgaSA8IG1ldGFEYXRhLmxlbmd0aDsgaSsrKSB7XG4gICAgICBjb25zdCB2YWx1ZSA9IG1ldGEuX3BhcnNlZFtpXTtcbiAgICAgIGlmICh2YWx1ZSAhPT0gbnVsbCAmJiAhaXNOYU4odmFsdWUpICYmIHRoaXMuY2hhcnQuZ2V0RGF0YVZpc2liaWxpdHkoaSkgJiYgIW1ldGFEYXRhW2ldLmhpZGRlbikge1xuICAgICAgICB0b3RhbCArPSBNYXRoLmFicyh2YWx1ZSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0b3RhbDtcbiAgfVxuICBjYWxjdWxhdGVDaXJjdW1mZXJlbmNlKHZhbHVlKSB7XG4gICAgY29uc3QgdG90YWwgPSB0aGlzLl9jYWNoZWRNZXRhLnRvdGFsO1xuICAgIGlmICh0b3RhbCA+IDAgJiYgIWlzTmFOKHZhbHVlKSkge1xuICAgICAgcmV0dXJuIFRBVSAqIChNYXRoLmFicyh2YWx1ZSkgLyB0b3RhbCk7XG4gICAgfVxuICAgIHJldHVybiAwO1xuICB9XG4gIGdldExhYmVsQW5kVmFsdWUoaW5kZXgpIHtcbiAgICBjb25zdCBtZXRhID0gdGhpcy5fY2FjaGVkTWV0YTtcbiAgICBjb25zdCBjaGFydCA9IHRoaXMuY2hhcnQ7XG4gICAgY29uc3QgbGFiZWxzID0gY2hhcnQuZGF0YS5sYWJlbHMgfHwgW107XG4gICAgY29uc3QgdmFsdWUgPSBmb3JtYXROdW1iZXIobWV0YS5fcGFyc2VkW2luZGV4XSwgY2hhcnQub3B0aW9ucy5sb2NhbGUpO1xuICAgIHJldHVybiB7XG4gICAgICBsYWJlbDogbGFiZWxzW2luZGV4XSB8fCAnJyxcbiAgICAgIHZhbHVlLFxuICAgIH07XG4gIH1cbiAgZ2V0TWF4Qm9yZGVyV2lkdGgoYXJjcykge1xuICAgIGxldCBtYXggPSAwO1xuICAgIGNvbnN0IGNoYXJ0ID0gdGhpcy5jaGFydDtcbiAgICBsZXQgaSwgaWxlbiwgbWV0YSwgY29udHJvbGxlciwgb3B0aW9ucztcbiAgICBpZiAoIWFyY3MpIHtcbiAgICAgIGZvciAoaSA9IDAsIGlsZW4gPSBjaGFydC5kYXRhLmRhdGFzZXRzLmxlbmd0aDsgaSA8IGlsZW47ICsraSkge1xuICAgICAgICBpZiAoY2hhcnQuaXNEYXRhc2V0VmlzaWJsZShpKSkge1xuICAgICAgICAgIG1ldGEgPSBjaGFydC5nZXREYXRhc2V0TWV0YShpKTtcbiAgICAgICAgICBhcmNzID0gbWV0YS5kYXRhO1xuICAgICAgICAgIGNvbnRyb2xsZXIgPSBtZXRhLmNvbnRyb2xsZXI7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKCFhcmNzKSB7XG4gICAgICByZXR1cm4gMDtcbiAgICB9XG4gICAgZm9yIChpID0gMCwgaWxlbiA9IGFyY3MubGVuZ3RoOyBpIDwgaWxlbjsgKytpKSB7XG4gICAgICBvcHRpb25zID0gY29udHJvbGxlci5yZXNvbHZlRGF0YUVsZW1lbnRPcHRpb25zKGkpO1xuICAgICAgaWYgKG9wdGlvbnMuYm9yZGVyQWxpZ24gIT09ICdpbm5lcicpIHtcbiAgICAgICAgbWF4ID0gTWF0aC5tYXgobWF4LCBvcHRpb25zLmJvcmRlcldpZHRoIHx8IDAsIG9wdGlvbnMuaG92ZXJCb3JkZXJXaWR0aCB8fCAwKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG1heDtcbiAgfVxuICBnZXRNYXhPZmZzZXQoYXJjcykge1xuICAgIGxldCBtYXggPSAwO1xuICAgIGZvciAobGV0IGkgPSAwLCBpbGVuID0gYXJjcy5sZW5ndGg7IGkgPCBpbGVuOyArK2kpIHtcbiAgICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLnJlc29sdmVEYXRhRWxlbWVudE9wdGlvbnMoaSk7XG4gICAgICBtYXggPSBNYXRoLm1heChtYXgsIG9wdGlvbnMub2Zmc2V0IHx8IDAsIG9wdGlvbnMuaG92ZXJPZmZzZXQgfHwgMCk7XG4gICAgfVxuICAgIHJldHVybiBtYXg7XG4gIH1cbiAgX2dldFJpbmdXZWlnaHRPZmZzZXQoZGF0YXNldEluZGV4KSB7XG4gICAgbGV0IHJpbmdXZWlnaHRPZmZzZXQgPSAwO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZGF0YXNldEluZGV4OyArK2kpIHtcbiAgICAgIGlmICh0aGlzLmNoYXJ0LmlzRGF0YXNldFZpc2libGUoaSkpIHtcbiAgICAgICAgcmluZ1dlaWdodE9mZnNldCArPSB0aGlzLl9nZXRSaW5nV2VpZ2h0KGkpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmluZ1dlaWdodE9mZnNldDtcbiAgfVxuICBfZ2V0UmluZ1dlaWdodChkYXRhc2V0SW5kZXgpIHtcbiAgICByZXR1cm4gTWF0aC5tYXgodmFsdWVPckRlZmF1bHQodGhpcy5jaGFydC5kYXRhLmRhdGFzZXRzW2RhdGFzZXRJbmRleF0ud2VpZ2h0LCAxKSwgMCk7XG4gIH1cbiAgX2dldFZpc2libGVEYXRhc2V0V2VpZ2h0VG90YWwoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2dldFJpbmdXZWlnaHRPZmZzZXQodGhpcy5jaGFydC5kYXRhLmRhdGFzZXRzLmxlbmd0aCkgfHwgMTtcbiAgfVxufVxuRG91Z2hudXRDb250cm9sbGVyLmlkID0gJ2RvdWdobnV0JztcbkRvdWdobnV0Q29udHJvbGxlci5kZWZhdWx0cyA9IHtcbiAgZGF0YXNldEVsZW1lbnRUeXBlOiBmYWxzZSxcbiAgZGF0YUVsZW1lbnRUeXBlOiAnYXJjJyxcbiAgYW5pbWF0aW9uOiB7XG4gICAgYW5pbWF0ZVJvdGF0ZTogdHJ1ZSxcbiAgICBhbmltYXRlU2NhbGU6IGZhbHNlXG4gIH0sXG4gIGFuaW1hdGlvbnM6IHtcbiAgICBudW1iZXJzOiB7XG4gICAgICB0eXBlOiAnbnVtYmVyJyxcbiAgICAgIHByb3BlcnRpZXM6IFsnY2lyY3VtZmVyZW5jZScsICdlbmRBbmdsZScsICdpbm5lclJhZGl1cycsICdvdXRlclJhZGl1cycsICdzdGFydEFuZ2xlJywgJ3gnLCAneScsICdvZmZzZXQnLCAnYm9yZGVyV2lkdGgnLCAnc3BhY2luZyddXG4gICAgfSxcbiAgfSxcbiAgY3V0b3V0OiAnNTAlJyxcbiAgcm90YXRpb246IDAsXG4gIGNpcmN1bWZlcmVuY2U6IDM2MCxcbiAgcmFkaXVzOiAnMTAwJScsXG4gIHNwYWNpbmc6IDAsXG4gIGluZGV4QXhpczogJ3InLFxufTtcbkRvdWdobnV0Q29udHJvbGxlci5kZXNjcmlwdG9ycyA9IHtcbiAgX3NjcmlwdGFibGU6IChuYW1lKSA9PiBuYW1lICE9PSAnc3BhY2luZycsXG4gIF9pbmRleGFibGU6IChuYW1lKSA9PiBuYW1lICE9PSAnc3BhY2luZycsXG59O1xuRG91Z2hudXRDb250cm9sbGVyLm92ZXJyaWRlcyA9IHtcbiAgYXNwZWN0UmF0aW86IDEsXG4gIHBsdWdpbnM6IHtcbiAgICBsZWdlbmQ6IHtcbiAgICAgIGxhYmVsczoge1xuICAgICAgICBnZW5lcmF0ZUxhYmVscyhjaGFydCkge1xuICAgICAgICAgIGNvbnN0IGRhdGEgPSBjaGFydC5kYXRhO1xuICAgICAgICAgIGlmIChkYXRhLmxhYmVscy5sZW5ndGggJiYgZGF0YS5kYXRhc2V0cy5sZW5ndGgpIHtcbiAgICAgICAgICAgIGNvbnN0IHtsYWJlbHM6IHtwb2ludFN0eWxlfX0gPSBjaGFydC5sZWdlbmQub3B0aW9ucztcbiAgICAgICAgICAgIHJldHVybiBkYXRhLmxhYmVscy5tYXAoKGxhYmVsLCBpKSA9PiB7XG4gICAgICAgICAgICAgIGNvbnN0IG1ldGEgPSBjaGFydC5nZXREYXRhc2V0TWV0YSgwKTtcbiAgICAgICAgICAgICAgY29uc3Qgc3R5bGUgPSBtZXRhLmNvbnRyb2xsZXIuZ2V0U3R5bGUoaSk7XG4gICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgdGV4dDogbGFiZWwsXG4gICAgICAgICAgICAgICAgZmlsbFN0eWxlOiBzdHlsZS5iYWNrZ3JvdW5kQ29sb3IsXG4gICAgICAgICAgICAgICAgc3Ryb2tlU3R5bGU6IHN0eWxlLmJvcmRlckNvbG9yLFxuICAgICAgICAgICAgICAgIGxpbmVXaWR0aDogc3R5bGUuYm9yZGVyV2lkdGgsXG4gICAgICAgICAgICAgICAgcG9pbnRTdHlsZTogcG9pbnRTdHlsZSxcbiAgICAgICAgICAgICAgICBoaWRkZW46ICFjaGFydC5nZXREYXRhVmlzaWJpbGl0eShpKSxcbiAgICAgICAgICAgICAgICBpbmRleDogaVxuICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBbXTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIG9uQ2xpY2soZSwgbGVnZW5kSXRlbSwgbGVnZW5kKSB7XG4gICAgICAgIGxlZ2VuZC5jaGFydC50b2dnbGVEYXRhVmlzaWJpbGl0eShsZWdlbmRJdGVtLmluZGV4KTtcbiAgICAgICAgbGVnZW5kLmNoYXJ0LnVwZGF0ZSgpO1xuICAgICAgfVxuICAgIH0sXG4gICAgdG9vbHRpcDoge1xuICAgICAgY2FsbGJhY2tzOiB7XG4gICAgICAgIHRpdGxlKCkge1xuICAgICAgICAgIHJldHVybiAnJztcbiAgICAgICAgfSxcbiAgICAgICAgbGFiZWwodG9vbHRpcEl0ZW0pIHtcbiAgICAgICAgICBsZXQgZGF0YUxhYmVsID0gdG9vbHRpcEl0ZW0ubGFiZWw7XG4gICAgICAgICAgY29uc3QgdmFsdWUgPSAnOiAnICsgdG9vbHRpcEl0ZW0uZm9ybWF0dGVkVmFsdWU7XG4gICAgICAgICAgaWYgKGlzQXJyYXkoZGF0YUxhYmVsKSkge1xuICAgICAgICAgICAgZGF0YUxhYmVsID0gZGF0YUxhYmVsLnNsaWNlKCk7XG4gICAgICAgICAgICBkYXRhTGFiZWxbMF0gKz0gdmFsdWU7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGRhdGFMYWJlbCArPSB2YWx1ZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIGRhdGFMYWJlbDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxufTtcblxuY2xhc3MgTGluZUNvbnRyb2xsZXIgZXh0ZW5kcyBEYXRhc2V0Q29udHJvbGxlciB7XG4gIGluaXRpYWxpemUoKSB7XG4gICAgdGhpcy5lbmFibGVPcHRpb25TaGFyaW5nID0gdHJ1ZTtcbiAgICBzdXBlci5pbml0aWFsaXplKCk7XG4gIH1cbiAgdXBkYXRlKG1vZGUpIHtcbiAgICBjb25zdCBtZXRhID0gdGhpcy5fY2FjaGVkTWV0YTtcbiAgICBjb25zdCB7ZGF0YXNldDogbGluZSwgZGF0YTogcG9pbnRzID0gW10sIF9kYXRhc2V0fSA9IG1ldGE7XG4gICAgY29uc3QgYW5pbWF0aW9uc0Rpc2FibGVkID0gdGhpcy5jaGFydC5fYW5pbWF0aW9uc0Rpc2FibGVkO1xuICAgIGxldCB7c3RhcnQsIGNvdW50fSA9IGdldFN0YXJ0QW5kQ291bnRPZlZpc2libGVQb2ludHMobWV0YSwgcG9pbnRzLCBhbmltYXRpb25zRGlzYWJsZWQpO1xuICAgIHRoaXMuX2RyYXdTdGFydCA9IHN0YXJ0O1xuICAgIHRoaXMuX2RyYXdDb3VudCA9IGNvdW50O1xuICAgIGlmIChzY2FsZVJhbmdlc0NoYW5nZWQobWV0YSkpIHtcbiAgICAgIHN0YXJ0ID0gMDtcbiAgICAgIGNvdW50ID0gcG9pbnRzLmxlbmd0aDtcbiAgICB9XG4gICAgbGluZS5fY2hhcnQgPSB0aGlzLmNoYXJ0O1xuICAgIGxpbmUuX2RhdGFzZXRJbmRleCA9IHRoaXMuaW5kZXg7XG4gICAgbGluZS5fZGVjaW1hdGVkID0gISFfZGF0YXNldC5fZGVjaW1hdGVkO1xuICAgIGxpbmUucG9pbnRzID0gcG9pbnRzO1xuICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLnJlc29sdmVEYXRhc2V0RWxlbWVudE9wdGlvbnMobW9kZSk7XG4gICAgaWYgKCF0aGlzLm9wdGlvbnMuc2hvd0xpbmUpIHtcbiAgICAgIG9wdGlvbnMuYm9yZGVyV2lkdGggPSAwO1xuICAgIH1cbiAgICBvcHRpb25zLnNlZ21lbnQgPSB0aGlzLm9wdGlvbnMuc2VnbWVudDtcbiAgICB0aGlzLnVwZGF0ZUVsZW1lbnQobGluZSwgdW5kZWZpbmVkLCB7XG4gICAgICBhbmltYXRlZDogIWFuaW1hdGlvbnNEaXNhYmxlZCxcbiAgICAgIG9wdGlvbnNcbiAgICB9LCBtb2RlKTtcbiAgICB0aGlzLnVwZGF0ZUVsZW1lbnRzKHBvaW50cywgc3RhcnQsIGNvdW50LCBtb2RlKTtcbiAgfVxuICB1cGRhdGVFbGVtZW50cyhwb2ludHMsIHN0YXJ0LCBjb3VudCwgbW9kZSkge1xuICAgIGNvbnN0IHJlc2V0ID0gbW9kZSA9PT0gJ3Jlc2V0JztcbiAgICBjb25zdCB7aVNjYWxlLCB2U2NhbGUsIF9zdGFja2VkLCBfZGF0YXNldH0gPSB0aGlzLl9jYWNoZWRNZXRhO1xuICAgIGNvbnN0IGZpcnN0T3B0cyA9IHRoaXMucmVzb2x2ZURhdGFFbGVtZW50T3B0aW9ucyhzdGFydCwgbW9kZSk7XG4gICAgY29uc3Qgc2hhcmVkT3B0aW9ucyA9IHRoaXMuZ2V0U2hhcmVkT3B0aW9ucyhmaXJzdE9wdHMpO1xuICAgIGNvbnN0IGluY2x1ZGVPcHRpb25zID0gdGhpcy5pbmNsdWRlT3B0aW9ucyhtb2RlLCBzaGFyZWRPcHRpb25zKTtcbiAgICBjb25zdCBpQXhpcyA9IGlTY2FsZS5heGlzO1xuICAgIGNvbnN0IHZBeGlzID0gdlNjYWxlLmF4aXM7XG4gICAgY29uc3Qge3NwYW5HYXBzLCBzZWdtZW50fSA9IHRoaXMub3B0aW9ucztcbiAgICBjb25zdCBtYXhHYXBMZW5ndGggPSBpc051bWJlcihzcGFuR2FwcykgPyBzcGFuR2FwcyA6IE51bWJlci5QT1NJVElWRV9JTkZJTklUWTtcbiAgICBjb25zdCBkaXJlY3RVcGRhdGUgPSB0aGlzLmNoYXJ0Ll9hbmltYXRpb25zRGlzYWJsZWQgfHwgcmVzZXQgfHwgbW9kZSA9PT0gJ25vbmUnO1xuICAgIGxldCBwcmV2UGFyc2VkID0gc3RhcnQgPiAwICYmIHRoaXMuZ2V0UGFyc2VkKHN0YXJ0IC0gMSk7XG4gICAgZm9yIChsZXQgaSA9IHN0YXJ0OyBpIDwgc3RhcnQgKyBjb3VudDsgKytpKSB7XG4gICAgICBjb25zdCBwb2ludCA9IHBvaW50c1tpXTtcbiAgICAgIGNvbnN0IHBhcnNlZCA9IHRoaXMuZ2V0UGFyc2VkKGkpO1xuICAgICAgY29uc3QgcHJvcGVydGllcyA9IGRpcmVjdFVwZGF0ZSA/IHBvaW50IDoge307XG4gICAgICBjb25zdCBudWxsRGF0YSA9IGlzTnVsbE9yVW5kZWYocGFyc2VkW3ZBeGlzXSk7XG4gICAgICBjb25zdCBpUGl4ZWwgPSBwcm9wZXJ0aWVzW2lBeGlzXSA9IGlTY2FsZS5nZXRQaXhlbEZvclZhbHVlKHBhcnNlZFtpQXhpc10sIGkpO1xuICAgICAgY29uc3QgdlBpeGVsID0gcHJvcGVydGllc1t2QXhpc10gPSByZXNldCB8fCBudWxsRGF0YSA/IHZTY2FsZS5nZXRCYXNlUGl4ZWwoKSA6IHZTY2FsZS5nZXRQaXhlbEZvclZhbHVlKF9zdGFja2VkID8gdGhpcy5hcHBseVN0YWNrKHZTY2FsZSwgcGFyc2VkLCBfc3RhY2tlZCkgOiBwYXJzZWRbdkF4aXNdLCBpKTtcbiAgICAgIHByb3BlcnRpZXMuc2tpcCA9IGlzTmFOKGlQaXhlbCkgfHwgaXNOYU4odlBpeGVsKSB8fCBudWxsRGF0YTtcbiAgICAgIHByb3BlcnRpZXMuc3RvcCA9IGkgPiAwICYmIChwYXJzZWRbaUF4aXNdIC0gcHJldlBhcnNlZFtpQXhpc10pID4gbWF4R2FwTGVuZ3RoO1xuICAgICAgaWYgKHNlZ21lbnQpIHtcbiAgICAgICAgcHJvcGVydGllcy5wYXJzZWQgPSBwYXJzZWQ7XG4gICAgICAgIHByb3BlcnRpZXMucmF3ID0gX2RhdGFzZXQuZGF0YVtpXTtcbiAgICAgIH1cbiAgICAgIGlmIChpbmNsdWRlT3B0aW9ucykge1xuICAgICAgICBwcm9wZXJ0aWVzLm9wdGlvbnMgPSBzaGFyZWRPcHRpb25zIHx8IHRoaXMucmVzb2x2ZURhdGFFbGVtZW50T3B0aW9ucyhpLCBwb2ludC5hY3RpdmUgPyAnYWN0aXZlJyA6IG1vZGUpO1xuICAgICAgfVxuICAgICAgaWYgKCFkaXJlY3RVcGRhdGUpIHtcbiAgICAgICAgdGhpcy51cGRhdGVFbGVtZW50KHBvaW50LCBpLCBwcm9wZXJ0aWVzLCBtb2RlKTtcbiAgICAgIH1cbiAgICAgIHByZXZQYXJzZWQgPSBwYXJzZWQ7XG4gICAgfVxuICAgIHRoaXMudXBkYXRlU2hhcmVkT3B0aW9ucyhzaGFyZWRPcHRpb25zLCBtb2RlLCBmaXJzdE9wdHMpO1xuICB9XG4gIGdldE1heE92ZXJmbG93KCkge1xuICAgIGNvbnN0IG1ldGEgPSB0aGlzLl9jYWNoZWRNZXRhO1xuICAgIGNvbnN0IGRhdGFzZXQgPSBtZXRhLmRhdGFzZXQ7XG4gICAgY29uc3QgYm9yZGVyID0gZGF0YXNldC5vcHRpb25zICYmIGRhdGFzZXQub3B0aW9ucy5ib3JkZXJXaWR0aCB8fCAwO1xuICAgIGNvbnN0IGRhdGEgPSBtZXRhLmRhdGEgfHwgW107XG4gICAgaWYgKCFkYXRhLmxlbmd0aCkge1xuICAgICAgcmV0dXJuIGJvcmRlcjtcbiAgICB9XG4gICAgY29uc3QgZmlyc3RQb2ludCA9IGRhdGFbMF0uc2l6ZSh0aGlzLnJlc29sdmVEYXRhRWxlbWVudE9wdGlvbnMoMCkpO1xuICAgIGNvbnN0IGxhc3RQb2ludCA9IGRhdGFbZGF0YS5sZW5ndGggLSAxXS5zaXplKHRoaXMucmVzb2x2ZURhdGFFbGVtZW50T3B0aW9ucyhkYXRhLmxlbmd0aCAtIDEpKTtcbiAgICByZXR1cm4gTWF0aC5tYXgoYm9yZGVyLCBmaXJzdFBvaW50LCBsYXN0UG9pbnQpIC8gMjtcbiAgfVxuICBkcmF3KCkge1xuICAgIGNvbnN0IG1ldGEgPSB0aGlzLl9jYWNoZWRNZXRhO1xuICAgIG1ldGEuZGF0YXNldC51cGRhdGVDb250cm9sUG9pbnRzKHRoaXMuY2hhcnQuY2hhcnRBcmVhLCBtZXRhLmlTY2FsZS5heGlzKTtcbiAgICBzdXBlci5kcmF3KCk7XG4gIH1cbn1cbkxpbmVDb250cm9sbGVyLmlkID0gJ2xpbmUnO1xuTGluZUNvbnRyb2xsZXIuZGVmYXVsdHMgPSB7XG4gIGRhdGFzZXRFbGVtZW50VHlwZTogJ2xpbmUnLFxuICBkYXRhRWxlbWVudFR5cGU6ICdwb2ludCcsXG4gIHNob3dMaW5lOiB0cnVlLFxuICBzcGFuR2FwczogZmFsc2UsXG59O1xuTGluZUNvbnRyb2xsZXIub3ZlcnJpZGVzID0ge1xuICBzY2FsZXM6IHtcbiAgICBfaW5kZXhfOiB7XG4gICAgICB0eXBlOiAnY2F0ZWdvcnknLFxuICAgIH0sXG4gICAgX3ZhbHVlXzoge1xuICAgICAgdHlwZTogJ2xpbmVhcicsXG4gICAgfSxcbiAgfVxufTtcbmZ1bmN0aW9uIGdldFN0YXJ0QW5kQ291bnRPZlZpc2libGVQb2ludHMobWV0YSwgcG9pbnRzLCBhbmltYXRpb25zRGlzYWJsZWQpIHtcbiAgY29uc3QgcG9pbnRDb3VudCA9IHBvaW50cy5sZW5ndGg7XG4gIGxldCBzdGFydCA9IDA7XG4gIGxldCBjb3VudCA9IHBvaW50Q291bnQ7XG4gIGlmIChtZXRhLl9zb3J0ZWQpIHtcbiAgICBjb25zdCB7aVNjYWxlLCBfcGFyc2VkfSA9IG1ldGE7XG4gICAgY29uc3QgYXhpcyA9IGlTY2FsZS5heGlzO1xuICAgIGNvbnN0IHttaW4sIG1heCwgbWluRGVmaW5lZCwgbWF4RGVmaW5lZH0gPSBpU2NhbGUuZ2V0VXNlckJvdW5kcygpO1xuICAgIGlmIChtaW5EZWZpbmVkKSB7XG4gICAgICBzdGFydCA9IF9saW1pdFZhbHVlKE1hdGgubWluKFxuICAgICAgICBfbG9va3VwQnlLZXkoX3BhcnNlZCwgaVNjYWxlLmF4aXMsIG1pbikubG8sXG4gICAgICAgIGFuaW1hdGlvbnNEaXNhYmxlZCA/IHBvaW50Q291bnQgOiBfbG9va3VwQnlLZXkocG9pbnRzLCBheGlzLCBpU2NhbGUuZ2V0UGl4ZWxGb3JWYWx1ZShtaW4pKS5sbyksXG4gICAgICAwLCBwb2ludENvdW50IC0gMSk7XG4gICAgfVxuICAgIGlmIChtYXhEZWZpbmVkKSB7XG4gICAgICBjb3VudCA9IF9saW1pdFZhbHVlKE1hdGgubWF4KFxuICAgICAgICBfbG9va3VwQnlLZXkoX3BhcnNlZCwgaVNjYWxlLmF4aXMsIG1heCkuaGkgKyAxLFxuICAgICAgICBhbmltYXRpb25zRGlzYWJsZWQgPyAwIDogX2xvb2t1cEJ5S2V5KHBvaW50cywgYXhpcywgaVNjYWxlLmdldFBpeGVsRm9yVmFsdWUobWF4KSkuaGkgKyAxKSxcbiAgICAgIHN0YXJ0LCBwb2ludENvdW50KSAtIHN0YXJ0O1xuICAgIH0gZWxzZSB7XG4gICAgICBjb3VudCA9IHBvaW50Q291bnQgLSBzdGFydDtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHtzdGFydCwgY291bnR9O1xufVxuZnVuY3Rpb24gc2NhbGVSYW5nZXNDaGFuZ2VkKG1ldGEpIHtcbiAgY29uc3Qge3hTY2FsZSwgeVNjYWxlLCBfc2NhbGVSYW5nZXN9ID0gbWV0YTtcbiAgY29uc3QgbmV3UmFuZ2VzID0ge1xuICAgIHhtaW46IHhTY2FsZS5taW4sXG4gICAgeG1heDogeFNjYWxlLm1heCxcbiAgICB5bWluOiB5U2NhbGUubWluLFxuICAgIHltYXg6IHlTY2FsZS5tYXhcbiAgfTtcbiAgaWYgKCFfc2NhbGVSYW5nZXMpIHtcbiAgICBtZXRhLl9zY2FsZVJhbmdlcyA9IG5ld1JhbmdlcztcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICBjb25zdCBjaGFuZ2VkID0gX3NjYWxlUmFuZ2VzLnhtaW4gIT09IHhTY2FsZS5taW5cblx0XHR8fCBfc2NhbGVSYW5nZXMueG1heCAhPT0geFNjYWxlLm1heFxuXHRcdHx8IF9zY2FsZVJhbmdlcy55bWluICE9PSB5U2NhbGUubWluXG5cdFx0fHwgX3NjYWxlUmFuZ2VzLnltYXggIT09IHlTY2FsZS5tYXg7XG4gIE9iamVjdC5hc3NpZ24oX3NjYWxlUmFuZ2VzLCBuZXdSYW5nZXMpO1xuICByZXR1cm4gY2hhbmdlZDtcbn1cblxuY2xhc3MgUG9sYXJBcmVhQ29udHJvbGxlciBleHRlbmRzIERhdGFzZXRDb250cm9sbGVyIHtcbiAgY29uc3RydWN0b3IoY2hhcnQsIGRhdGFzZXRJbmRleCkge1xuICAgIHN1cGVyKGNoYXJ0LCBkYXRhc2V0SW5kZXgpO1xuICAgIHRoaXMuaW5uZXJSYWRpdXMgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5vdXRlclJhZGl1cyA9IHVuZGVmaW5lZDtcbiAgfVxuICBnZXRMYWJlbEFuZFZhbHVlKGluZGV4KSB7XG4gICAgY29uc3QgbWV0YSA9IHRoaXMuX2NhY2hlZE1ldGE7XG4gICAgY29uc3QgY2hhcnQgPSB0aGlzLmNoYXJ0O1xuICAgIGNvbnN0IGxhYmVscyA9IGNoYXJ0LmRhdGEubGFiZWxzIHx8IFtdO1xuICAgIGNvbnN0IHZhbHVlID0gZm9ybWF0TnVtYmVyKG1ldGEuX3BhcnNlZFtpbmRleF0uciwgY2hhcnQub3B0aW9ucy5sb2NhbGUpO1xuICAgIHJldHVybiB7XG4gICAgICBsYWJlbDogbGFiZWxzW2luZGV4XSB8fCAnJyxcbiAgICAgIHZhbHVlLFxuICAgIH07XG4gIH1cbiAgdXBkYXRlKG1vZGUpIHtcbiAgICBjb25zdCBhcmNzID0gdGhpcy5fY2FjaGVkTWV0YS5kYXRhO1xuICAgIHRoaXMuX3VwZGF0ZVJhZGl1cygpO1xuICAgIHRoaXMudXBkYXRlRWxlbWVudHMoYXJjcywgMCwgYXJjcy5sZW5ndGgsIG1vZGUpO1xuICB9XG4gIF91cGRhdGVSYWRpdXMoKSB7XG4gICAgY29uc3QgY2hhcnQgPSB0aGlzLmNoYXJ0O1xuICAgIGNvbnN0IGNoYXJ0QXJlYSA9IGNoYXJ0LmNoYXJ0QXJlYTtcbiAgICBjb25zdCBvcHRzID0gY2hhcnQub3B0aW9ucztcbiAgICBjb25zdCBtaW5TaXplID0gTWF0aC5taW4oY2hhcnRBcmVhLnJpZ2h0IC0gY2hhcnRBcmVhLmxlZnQsIGNoYXJ0QXJlYS5ib3R0b20gLSBjaGFydEFyZWEudG9wKTtcbiAgICBjb25zdCBvdXRlclJhZGl1cyA9IE1hdGgubWF4KG1pblNpemUgLyAyLCAwKTtcbiAgICBjb25zdCBpbm5lclJhZGl1cyA9IE1hdGgubWF4KG9wdHMuY3V0b3V0UGVyY2VudGFnZSA/IChvdXRlclJhZGl1cyAvIDEwMCkgKiAob3B0cy5jdXRvdXRQZXJjZW50YWdlKSA6IDEsIDApO1xuICAgIGNvbnN0IHJhZGl1c0xlbmd0aCA9IChvdXRlclJhZGl1cyAtIGlubmVyUmFkaXVzKSAvIGNoYXJ0LmdldFZpc2libGVEYXRhc2V0Q291bnQoKTtcbiAgICB0aGlzLm91dGVyUmFkaXVzID0gb3V0ZXJSYWRpdXMgLSAocmFkaXVzTGVuZ3RoICogdGhpcy5pbmRleCk7XG4gICAgdGhpcy5pbm5lclJhZGl1cyA9IHRoaXMub3V0ZXJSYWRpdXMgLSByYWRpdXNMZW5ndGg7XG4gIH1cbiAgdXBkYXRlRWxlbWVudHMoYXJjcywgc3RhcnQsIGNvdW50LCBtb2RlKSB7XG4gICAgY29uc3QgcmVzZXQgPSBtb2RlID09PSAncmVzZXQnO1xuICAgIGNvbnN0IGNoYXJ0ID0gdGhpcy5jaGFydDtcbiAgICBjb25zdCBkYXRhc2V0ID0gdGhpcy5nZXREYXRhc2V0KCk7XG4gICAgY29uc3Qgb3B0cyA9IGNoYXJ0Lm9wdGlvbnM7XG4gICAgY29uc3QgYW5pbWF0aW9uT3B0cyA9IG9wdHMuYW5pbWF0aW9uO1xuICAgIGNvbnN0IHNjYWxlID0gdGhpcy5fY2FjaGVkTWV0YS5yU2NhbGU7XG4gICAgY29uc3QgY2VudGVyWCA9IHNjYWxlLnhDZW50ZXI7XG4gICAgY29uc3QgY2VudGVyWSA9IHNjYWxlLnlDZW50ZXI7XG4gICAgY29uc3QgZGF0YXNldFN0YXJ0QW5nbGUgPSBzY2FsZS5nZXRJbmRleEFuZ2xlKDApIC0gMC41ICogUEk7XG4gICAgbGV0IGFuZ2xlID0gZGF0YXNldFN0YXJ0QW5nbGU7XG4gICAgbGV0IGk7XG4gICAgY29uc3QgZGVmYXVsdEFuZ2xlID0gMzYwIC8gdGhpcy5jb3VudFZpc2libGVFbGVtZW50cygpO1xuICAgIGZvciAoaSA9IDA7IGkgPCBzdGFydDsgKytpKSB7XG4gICAgICBhbmdsZSArPSB0aGlzLl9jb21wdXRlQW5nbGUoaSwgbW9kZSwgZGVmYXVsdEFuZ2xlKTtcbiAgICB9XG4gICAgZm9yIChpID0gc3RhcnQ7IGkgPCBzdGFydCArIGNvdW50OyBpKyspIHtcbiAgICAgIGNvbnN0IGFyYyA9IGFyY3NbaV07XG4gICAgICBsZXQgc3RhcnRBbmdsZSA9IGFuZ2xlO1xuICAgICAgbGV0IGVuZEFuZ2xlID0gYW5nbGUgKyB0aGlzLl9jb21wdXRlQW5nbGUoaSwgbW9kZSwgZGVmYXVsdEFuZ2xlKTtcbiAgICAgIGxldCBvdXRlclJhZGl1cyA9IGNoYXJ0LmdldERhdGFWaXNpYmlsaXR5KGkpID8gc2NhbGUuZ2V0RGlzdGFuY2VGcm9tQ2VudGVyRm9yVmFsdWUoZGF0YXNldC5kYXRhW2ldKSA6IDA7XG4gICAgICBhbmdsZSA9IGVuZEFuZ2xlO1xuICAgICAgaWYgKHJlc2V0KSB7XG4gICAgICAgIGlmIChhbmltYXRpb25PcHRzLmFuaW1hdGVTY2FsZSkge1xuICAgICAgICAgIG91dGVyUmFkaXVzID0gMDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoYW5pbWF0aW9uT3B0cy5hbmltYXRlUm90YXRlKSB7XG4gICAgICAgICAgc3RhcnRBbmdsZSA9IGVuZEFuZ2xlID0gZGF0YXNldFN0YXJ0QW5nbGU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGNvbnN0IHByb3BlcnRpZXMgPSB7XG4gICAgICAgIHg6IGNlbnRlclgsXG4gICAgICAgIHk6IGNlbnRlclksXG4gICAgICAgIGlubmVyUmFkaXVzOiAwLFxuICAgICAgICBvdXRlclJhZGl1cyxcbiAgICAgICAgc3RhcnRBbmdsZSxcbiAgICAgICAgZW5kQW5nbGUsXG4gICAgICAgIG9wdGlvbnM6IHRoaXMucmVzb2x2ZURhdGFFbGVtZW50T3B0aW9ucyhpLCBhcmMuYWN0aXZlID8gJ2FjdGl2ZScgOiBtb2RlKVxuICAgICAgfTtcbiAgICAgIHRoaXMudXBkYXRlRWxlbWVudChhcmMsIGksIHByb3BlcnRpZXMsIG1vZGUpO1xuICAgIH1cbiAgfVxuICBjb3VudFZpc2libGVFbGVtZW50cygpIHtcbiAgICBjb25zdCBkYXRhc2V0ID0gdGhpcy5nZXREYXRhc2V0KCk7XG4gICAgY29uc3QgbWV0YSA9IHRoaXMuX2NhY2hlZE1ldGE7XG4gICAgbGV0IGNvdW50ID0gMDtcbiAgICBtZXRhLmRhdGEuZm9yRWFjaCgoZWxlbWVudCwgaW5kZXgpID0+IHtcbiAgICAgIGlmICghaXNOYU4oZGF0YXNldC5kYXRhW2luZGV4XSkgJiYgdGhpcy5jaGFydC5nZXREYXRhVmlzaWJpbGl0eShpbmRleCkpIHtcbiAgICAgICAgY291bnQrKztcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gY291bnQ7XG4gIH1cbiAgX2NvbXB1dGVBbmdsZShpbmRleCwgbW9kZSwgZGVmYXVsdEFuZ2xlKSB7XG4gICAgcmV0dXJuIHRoaXMuY2hhcnQuZ2V0RGF0YVZpc2liaWxpdHkoaW5kZXgpXG4gICAgICA/IHRvUmFkaWFucyh0aGlzLnJlc29sdmVEYXRhRWxlbWVudE9wdGlvbnMoaW5kZXgsIG1vZGUpLmFuZ2xlIHx8IGRlZmF1bHRBbmdsZSlcbiAgICAgIDogMDtcbiAgfVxufVxuUG9sYXJBcmVhQ29udHJvbGxlci5pZCA9ICdwb2xhckFyZWEnO1xuUG9sYXJBcmVhQ29udHJvbGxlci5kZWZhdWx0cyA9IHtcbiAgZGF0YUVsZW1lbnRUeXBlOiAnYXJjJyxcbiAgYW5pbWF0aW9uOiB7XG4gICAgYW5pbWF0ZVJvdGF0ZTogdHJ1ZSxcbiAgICBhbmltYXRlU2NhbGU6IHRydWVcbiAgfSxcbiAgYW5pbWF0aW9uczoge1xuICAgIG51bWJlcnM6IHtcbiAgICAgIHR5cGU6ICdudW1iZXInLFxuICAgICAgcHJvcGVydGllczogWyd4JywgJ3knLCAnc3RhcnRBbmdsZScsICdlbmRBbmdsZScsICdpbm5lclJhZGl1cycsICdvdXRlclJhZGl1cyddXG4gICAgfSxcbiAgfSxcbiAgaW5kZXhBeGlzOiAncicsXG4gIHN0YXJ0QW5nbGU6IDAsXG59O1xuUG9sYXJBcmVhQ29udHJvbGxlci5vdmVycmlkZXMgPSB7XG4gIGFzcGVjdFJhdGlvOiAxLFxuICBwbHVnaW5zOiB7XG4gICAgbGVnZW5kOiB7XG4gICAgICBsYWJlbHM6IHtcbiAgICAgICAgZ2VuZXJhdGVMYWJlbHMoY2hhcnQpIHtcbiAgICAgICAgICBjb25zdCBkYXRhID0gY2hhcnQuZGF0YTtcbiAgICAgICAgICBpZiAoZGF0YS5sYWJlbHMubGVuZ3RoICYmIGRhdGEuZGF0YXNldHMubGVuZ3RoKSB7XG4gICAgICAgICAgICBjb25zdCB7bGFiZWxzOiB7cG9pbnRTdHlsZX19ID0gY2hhcnQubGVnZW5kLm9wdGlvbnM7XG4gICAgICAgICAgICByZXR1cm4gZGF0YS5sYWJlbHMubWFwKChsYWJlbCwgaSkgPT4ge1xuICAgICAgICAgICAgICBjb25zdCBtZXRhID0gY2hhcnQuZ2V0RGF0YXNldE1ldGEoMCk7XG4gICAgICAgICAgICAgIGNvbnN0IHN0eWxlID0gbWV0YS5jb250cm9sbGVyLmdldFN0eWxlKGkpO1xuICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHRleHQ6IGxhYmVsLFxuICAgICAgICAgICAgICAgIGZpbGxTdHlsZTogc3R5bGUuYmFja2dyb3VuZENvbG9yLFxuICAgICAgICAgICAgICAgIHN0cm9rZVN0eWxlOiBzdHlsZS5ib3JkZXJDb2xvcixcbiAgICAgICAgICAgICAgICBsaW5lV2lkdGg6IHN0eWxlLmJvcmRlcldpZHRoLFxuICAgICAgICAgICAgICAgIHBvaW50U3R5bGU6IHBvaW50U3R5bGUsXG4gICAgICAgICAgICAgICAgaGlkZGVuOiAhY2hhcnQuZ2V0RGF0YVZpc2liaWxpdHkoaSksXG4gICAgICAgICAgICAgICAgaW5kZXg6IGlcbiAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gW107XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBvbkNsaWNrKGUsIGxlZ2VuZEl0ZW0sIGxlZ2VuZCkge1xuICAgICAgICBsZWdlbmQuY2hhcnQudG9nZ2xlRGF0YVZpc2liaWxpdHkobGVnZW5kSXRlbS5pbmRleCk7XG4gICAgICAgIGxlZ2VuZC5jaGFydC51cGRhdGUoKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIHRvb2x0aXA6IHtcbiAgICAgIGNhbGxiYWNrczoge1xuICAgICAgICB0aXRsZSgpIHtcbiAgICAgICAgICByZXR1cm4gJyc7XG4gICAgICAgIH0sXG4gICAgICAgIGxhYmVsKGNvbnRleHQpIHtcbiAgICAgICAgICByZXR1cm4gY29udGV4dC5jaGFydC5kYXRhLmxhYmVsc1tjb250ZXh0LmRhdGFJbmRleF0gKyAnOiAnICsgY29udGV4dC5mb3JtYXR0ZWRWYWx1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfSxcbiAgc2NhbGVzOiB7XG4gICAgcjoge1xuICAgICAgdHlwZTogJ3JhZGlhbExpbmVhcicsXG4gICAgICBhbmdsZUxpbmVzOiB7XG4gICAgICAgIGRpc3BsYXk6IGZhbHNlXG4gICAgICB9LFxuICAgICAgYmVnaW5BdFplcm86IHRydWUsXG4gICAgICBncmlkOiB7XG4gICAgICAgIGNpcmN1bGFyOiB0cnVlXG4gICAgICB9LFxuICAgICAgcG9pbnRMYWJlbHM6IHtcbiAgICAgICAgZGlzcGxheTogZmFsc2VcbiAgICAgIH0sXG4gICAgICBzdGFydEFuZ2xlOiAwXG4gICAgfVxuICB9XG59O1xuXG5jbGFzcyBQaWVDb250cm9sbGVyIGV4dGVuZHMgRG91Z2hudXRDb250cm9sbGVyIHtcbn1cblBpZUNvbnRyb2xsZXIuaWQgPSAncGllJztcblBpZUNvbnRyb2xsZXIuZGVmYXVsdHMgPSB7XG4gIGN1dG91dDogMCxcbiAgcm90YXRpb246IDAsXG4gIGNpcmN1bWZlcmVuY2U6IDM2MCxcbiAgcmFkaXVzOiAnMTAwJSdcbn07XG5cbmNsYXNzIFJhZGFyQ29udHJvbGxlciBleHRlbmRzIERhdGFzZXRDb250cm9sbGVyIHtcbiAgZ2V0TGFiZWxBbmRWYWx1ZShpbmRleCkge1xuICAgIGNvbnN0IHZTY2FsZSA9IHRoaXMuX2NhY2hlZE1ldGEudlNjYWxlO1xuICAgIGNvbnN0IHBhcnNlZCA9IHRoaXMuZ2V0UGFyc2VkKGluZGV4KTtcbiAgICByZXR1cm4ge1xuICAgICAgbGFiZWw6IHZTY2FsZS5nZXRMYWJlbHMoKVtpbmRleF0sXG4gICAgICB2YWx1ZTogJycgKyB2U2NhbGUuZ2V0TGFiZWxGb3JWYWx1ZShwYXJzZWRbdlNjYWxlLmF4aXNdKVxuICAgIH07XG4gIH1cbiAgdXBkYXRlKG1vZGUpIHtcbiAgICBjb25zdCBtZXRhID0gdGhpcy5fY2FjaGVkTWV0YTtcbiAgICBjb25zdCBsaW5lID0gbWV0YS5kYXRhc2V0O1xuICAgIGNvbnN0IHBvaW50cyA9IG1ldGEuZGF0YSB8fCBbXTtcbiAgICBjb25zdCBsYWJlbHMgPSBtZXRhLmlTY2FsZS5nZXRMYWJlbHMoKTtcbiAgICBsaW5lLnBvaW50cyA9IHBvaW50cztcbiAgICBpZiAobW9kZSAhPT0gJ3Jlc2l6ZScpIHtcbiAgICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLnJlc29sdmVEYXRhc2V0RWxlbWVudE9wdGlvbnMobW9kZSk7XG4gICAgICBpZiAoIXRoaXMub3B0aW9ucy5zaG93TGluZSkge1xuICAgICAgICBvcHRpb25zLmJvcmRlcldpZHRoID0gMDtcbiAgICAgIH1cbiAgICAgIGNvbnN0IHByb3BlcnRpZXMgPSB7XG4gICAgICAgIF9sb29wOiB0cnVlLFxuICAgICAgICBfZnVsbExvb3A6IGxhYmVscy5sZW5ndGggPT09IHBvaW50cy5sZW5ndGgsXG4gICAgICAgIG9wdGlvbnNcbiAgICAgIH07XG4gICAgICB0aGlzLnVwZGF0ZUVsZW1lbnQobGluZSwgdW5kZWZpbmVkLCBwcm9wZXJ0aWVzLCBtb2RlKTtcbiAgICB9XG4gICAgdGhpcy51cGRhdGVFbGVtZW50cyhwb2ludHMsIDAsIHBvaW50cy5sZW5ndGgsIG1vZGUpO1xuICB9XG4gIHVwZGF0ZUVsZW1lbnRzKHBvaW50cywgc3RhcnQsIGNvdW50LCBtb2RlKSB7XG4gICAgY29uc3QgZGF0YXNldCA9IHRoaXMuZ2V0RGF0YXNldCgpO1xuICAgIGNvbnN0IHNjYWxlID0gdGhpcy5fY2FjaGVkTWV0YS5yU2NhbGU7XG4gICAgY29uc3QgcmVzZXQgPSBtb2RlID09PSAncmVzZXQnO1xuICAgIGZvciAobGV0IGkgPSBzdGFydDsgaSA8IHN0YXJ0ICsgY291bnQ7IGkrKykge1xuICAgICAgY29uc3QgcG9pbnQgPSBwb2ludHNbaV07XG4gICAgICBjb25zdCBvcHRpb25zID0gdGhpcy5yZXNvbHZlRGF0YUVsZW1lbnRPcHRpb25zKGksIHBvaW50LmFjdGl2ZSA/ICdhY3RpdmUnIDogbW9kZSk7XG4gICAgICBjb25zdCBwb2ludFBvc2l0aW9uID0gc2NhbGUuZ2V0UG9pbnRQb3NpdGlvbkZvclZhbHVlKGksIGRhdGFzZXQuZGF0YVtpXSk7XG4gICAgICBjb25zdCB4ID0gcmVzZXQgPyBzY2FsZS54Q2VudGVyIDogcG9pbnRQb3NpdGlvbi54O1xuICAgICAgY29uc3QgeSA9IHJlc2V0ID8gc2NhbGUueUNlbnRlciA6IHBvaW50UG9zaXRpb24ueTtcbiAgICAgIGNvbnN0IHByb3BlcnRpZXMgPSB7XG4gICAgICAgIHgsXG4gICAgICAgIHksXG4gICAgICAgIGFuZ2xlOiBwb2ludFBvc2l0aW9uLmFuZ2xlLFxuICAgICAgICBza2lwOiBpc05hTih4KSB8fCBpc05hTih5KSxcbiAgICAgICAgb3B0aW9uc1xuICAgICAgfTtcbiAgICAgIHRoaXMudXBkYXRlRWxlbWVudChwb2ludCwgaSwgcHJvcGVydGllcywgbW9kZSk7XG4gICAgfVxuICB9XG59XG5SYWRhckNvbnRyb2xsZXIuaWQgPSAncmFkYXInO1xuUmFkYXJDb250cm9sbGVyLmRlZmF1bHRzID0ge1xuICBkYXRhc2V0RWxlbWVudFR5cGU6ICdsaW5lJyxcbiAgZGF0YUVsZW1lbnRUeXBlOiAncG9pbnQnLFxuICBpbmRleEF4aXM6ICdyJyxcbiAgc2hvd0xpbmU6IHRydWUsXG4gIGVsZW1lbnRzOiB7XG4gICAgbGluZToge1xuICAgICAgZmlsbDogJ3N0YXJ0J1xuICAgIH1cbiAgfSxcbn07XG5SYWRhckNvbnRyb2xsZXIub3ZlcnJpZGVzID0ge1xuICBhc3BlY3RSYXRpbzogMSxcbiAgc2NhbGVzOiB7XG4gICAgcjoge1xuICAgICAgdHlwZTogJ3JhZGlhbExpbmVhcicsXG4gICAgfVxuICB9XG59O1xuXG5jbGFzcyBTY2F0dGVyQ29udHJvbGxlciBleHRlbmRzIExpbmVDb250cm9sbGVyIHtcbn1cblNjYXR0ZXJDb250cm9sbGVyLmlkID0gJ3NjYXR0ZXInO1xuU2NhdHRlckNvbnRyb2xsZXIuZGVmYXVsdHMgPSB7XG4gIHNob3dMaW5lOiBmYWxzZSxcbiAgZmlsbDogZmFsc2Vcbn07XG5TY2F0dGVyQ29udHJvbGxlci5vdmVycmlkZXMgPSB7XG4gIGludGVyYWN0aW9uOiB7XG4gICAgbW9kZTogJ3BvaW50J1xuICB9LFxuICBwbHVnaW5zOiB7XG4gICAgdG9vbHRpcDoge1xuICAgICAgY2FsbGJhY2tzOiB7XG4gICAgICAgIHRpdGxlKCkge1xuICAgICAgICAgIHJldHVybiAnJztcbiAgICAgICAgfSxcbiAgICAgICAgbGFiZWwoaXRlbSkge1xuICAgICAgICAgIHJldHVybiAnKCcgKyBpdGVtLmxhYmVsICsgJywgJyArIGl0ZW0uZm9ybWF0dGVkVmFsdWUgKyAnKSc7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH0sXG4gIHNjYWxlczoge1xuICAgIHg6IHtcbiAgICAgIHR5cGU6ICdsaW5lYXInXG4gICAgfSxcbiAgICB5OiB7XG4gICAgICB0eXBlOiAnbGluZWFyJ1xuICAgIH1cbiAgfVxufTtcblxudmFyIGNvbnRyb2xsZXJzID0gLyojX19QVVJFX18qL09iamVjdC5mcmVlemUoe1xuX19wcm90b19fOiBudWxsLFxuQmFyQ29udHJvbGxlcjogQmFyQ29udHJvbGxlcixcbkJ1YmJsZUNvbnRyb2xsZXI6IEJ1YmJsZUNvbnRyb2xsZXIsXG5Eb3VnaG51dENvbnRyb2xsZXI6IERvdWdobnV0Q29udHJvbGxlcixcbkxpbmVDb250cm9sbGVyOiBMaW5lQ29udHJvbGxlcixcblBvbGFyQXJlYUNvbnRyb2xsZXI6IFBvbGFyQXJlYUNvbnRyb2xsZXIsXG5QaWVDb250cm9sbGVyOiBQaWVDb250cm9sbGVyLFxuUmFkYXJDb250cm9sbGVyOiBSYWRhckNvbnRyb2xsZXIsXG5TY2F0dGVyQ29udHJvbGxlcjogU2NhdHRlckNvbnRyb2xsZXJcbn0pO1xuXG5mdW5jdGlvbiBhYnN0cmFjdCgpIHtcbiAgdGhyb3cgbmV3IEVycm9yKCdUaGlzIG1ldGhvZCBpcyBub3QgaW1wbGVtZW50ZWQ6IENoZWNrIHRoYXQgYSBjb21wbGV0ZSBkYXRlIGFkYXB0ZXIgaXMgcHJvdmlkZWQuJyk7XG59XG5jbGFzcyBEYXRlQWRhcHRlciB7XG4gIGNvbnN0cnVjdG9yKG9wdGlvbnMpIHtcbiAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICB9XG4gIGZvcm1hdHMoKSB7XG4gICAgcmV0dXJuIGFic3RyYWN0KCk7XG4gIH1cbiAgcGFyc2UodmFsdWUsIGZvcm1hdCkge1xuICAgIHJldHVybiBhYnN0cmFjdCgpO1xuICB9XG4gIGZvcm1hdCh0aW1lc3RhbXAsIGZvcm1hdCkge1xuICAgIHJldHVybiBhYnN0cmFjdCgpO1xuICB9XG4gIGFkZCh0aW1lc3RhbXAsIGFtb3VudCwgdW5pdCkge1xuICAgIHJldHVybiBhYnN0cmFjdCgpO1xuICB9XG4gIGRpZmYoYSwgYiwgdW5pdCkge1xuICAgIHJldHVybiBhYnN0cmFjdCgpO1xuICB9XG4gIHN0YXJ0T2YodGltZXN0YW1wLCB1bml0LCB3ZWVrZGF5KSB7XG4gICAgcmV0dXJuIGFic3RyYWN0KCk7XG4gIH1cbiAgZW5kT2YodGltZXN0YW1wLCB1bml0KSB7XG4gICAgcmV0dXJuIGFic3RyYWN0KCk7XG4gIH1cbn1cbkRhdGVBZGFwdGVyLm92ZXJyaWRlID0gZnVuY3Rpb24obWVtYmVycykge1xuICBPYmplY3QuYXNzaWduKERhdGVBZGFwdGVyLnByb3RvdHlwZSwgbWVtYmVycyk7XG59O1xudmFyIGFkYXB0ZXJzID0ge1xuICBfZGF0ZTogRGF0ZUFkYXB0ZXJcbn07XG5cbmZ1bmN0aW9uIGdldFJlbGF0aXZlUG9zaXRpb24oZSwgY2hhcnQpIHtcbiAgaWYgKCduYXRpdmUnIGluIGUpIHtcbiAgICByZXR1cm4ge1xuICAgICAgeDogZS54LFxuICAgICAgeTogZS55XG4gICAgfTtcbiAgfVxuICByZXR1cm4gZ2V0UmVsYXRpdmVQb3NpdGlvbiQxKGUsIGNoYXJ0KTtcbn1cbmZ1bmN0aW9uIGV2YWx1YXRlQWxsVmlzaWJsZUl0ZW1zKGNoYXJ0LCBoYW5kbGVyKSB7XG4gIGNvbnN0IG1ldGFzZXRzID0gY2hhcnQuZ2V0U29ydGVkVmlzaWJsZURhdGFzZXRNZXRhcygpO1xuICBsZXQgaW5kZXgsIGRhdGEsIGVsZW1lbnQ7XG4gIGZvciAobGV0IGkgPSAwLCBpbGVuID0gbWV0YXNldHMubGVuZ3RoOyBpIDwgaWxlbjsgKytpKSB7XG4gICAgKHtpbmRleCwgZGF0YX0gPSBtZXRhc2V0c1tpXSk7XG4gICAgZm9yIChsZXQgaiA9IDAsIGpsZW4gPSBkYXRhLmxlbmd0aDsgaiA8IGpsZW47ICsraikge1xuICAgICAgZWxlbWVudCA9IGRhdGFbal07XG4gICAgICBpZiAoIWVsZW1lbnQuc2tpcCkge1xuICAgICAgICBoYW5kbGVyKGVsZW1lbnQsIGluZGV4LCBqKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cbmZ1bmN0aW9uIGJpbmFyeVNlYXJjaChtZXRhc2V0LCBheGlzLCB2YWx1ZSwgaW50ZXJzZWN0KSB7XG4gIGNvbnN0IHtjb250cm9sbGVyLCBkYXRhLCBfc29ydGVkfSA9IG1ldGFzZXQ7XG4gIGNvbnN0IGlTY2FsZSA9IGNvbnRyb2xsZXIuX2NhY2hlZE1ldGEuaVNjYWxlO1xuICBpZiAoaVNjYWxlICYmIGF4aXMgPT09IGlTY2FsZS5heGlzICYmIGF4aXMgIT09ICdyJyAmJiBfc29ydGVkICYmIGRhdGEubGVuZ3RoKSB7XG4gICAgY29uc3QgbG9va3VwTWV0aG9kID0gaVNjYWxlLl9yZXZlcnNlUGl4ZWxzID8gX3Jsb29rdXBCeUtleSA6IF9sb29rdXBCeUtleTtcbiAgICBpZiAoIWludGVyc2VjdCkge1xuICAgICAgcmV0dXJuIGxvb2t1cE1ldGhvZChkYXRhLCBheGlzLCB2YWx1ZSk7XG4gICAgfSBlbHNlIGlmIChjb250cm9sbGVyLl9zaGFyZWRPcHRpb25zKSB7XG4gICAgICBjb25zdCBlbCA9IGRhdGFbMF07XG4gICAgICBjb25zdCByYW5nZSA9IHR5cGVvZiBlbC5nZXRSYW5nZSA9PT0gJ2Z1bmN0aW9uJyAmJiBlbC5nZXRSYW5nZShheGlzKTtcbiAgICAgIGlmIChyYW5nZSkge1xuICAgICAgICBjb25zdCBzdGFydCA9IGxvb2t1cE1ldGhvZChkYXRhLCBheGlzLCB2YWx1ZSAtIHJhbmdlKTtcbiAgICAgICAgY29uc3QgZW5kID0gbG9va3VwTWV0aG9kKGRhdGEsIGF4aXMsIHZhbHVlICsgcmFuZ2UpO1xuICAgICAgICByZXR1cm4ge2xvOiBzdGFydC5sbywgaGk6IGVuZC5oaX07XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiB7bG86IDAsIGhpOiBkYXRhLmxlbmd0aCAtIDF9O1xufVxuZnVuY3Rpb24gb3B0aW1pemVkRXZhbHVhdGVJdGVtcyhjaGFydCwgYXhpcywgcG9zaXRpb24sIGhhbmRsZXIsIGludGVyc2VjdCkge1xuICBjb25zdCBtZXRhc2V0cyA9IGNoYXJ0LmdldFNvcnRlZFZpc2libGVEYXRhc2V0TWV0YXMoKTtcbiAgY29uc3QgdmFsdWUgPSBwb3NpdGlvbltheGlzXTtcbiAgZm9yIChsZXQgaSA9IDAsIGlsZW4gPSBtZXRhc2V0cy5sZW5ndGg7IGkgPCBpbGVuOyArK2kpIHtcbiAgICBjb25zdCB7aW5kZXgsIGRhdGF9ID0gbWV0YXNldHNbaV07XG4gICAgY29uc3Qge2xvLCBoaX0gPSBiaW5hcnlTZWFyY2gobWV0YXNldHNbaV0sIGF4aXMsIHZhbHVlLCBpbnRlcnNlY3QpO1xuICAgIGZvciAobGV0IGogPSBsbzsgaiA8PSBoaTsgKytqKSB7XG4gICAgICBjb25zdCBlbGVtZW50ID0gZGF0YVtqXTtcbiAgICAgIGlmICghZWxlbWVudC5za2lwKSB7XG4gICAgICAgIGhhbmRsZXIoZWxlbWVudCwgaW5kZXgsIGopO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuZnVuY3Rpb24gZ2V0RGlzdGFuY2VNZXRyaWNGb3JBeGlzKGF4aXMpIHtcbiAgY29uc3QgdXNlWCA9IGF4aXMuaW5kZXhPZigneCcpICE9PSAtMTtcbiAgY29uc3QgdXNlWSA9IGF4aXMuaW5kZXhPZigneScpICE9PSAtMTtcbiAgcmV0dXJuIGZ1bmN0aW9uKHB0MSwgcHQyKSB7XG4gICAgY29uc3QgZGVsdGFYID0gdXNlWCA/IE1hdGguYWJzKHB0MS54IC0gcHQyLngpIDogMDtcbiAgICBjb25zdCBkZWx0YVkgPSB1c2VZID8gTWF0aC5hYnMocHQxLnkgLSBwdDIueSkgOiAwO1xuICAgIHJldHVybiBNYXRoLnNxcnQoTWF0aC5wb3coZGVsdGFYLCAyKSArIE1hdGgucG93KGRlbHRhWSwgMikpO1xuICB9O1xufVxuZnVuY3Rpb24gZ2V0SW50ZXJzZWN0SXRlbXMoY2hhcnQsIHBvc2l0aW9uLCBheGlzLCB1c2VGaW5hbFBvc2l0aW9uKSB7XG4gIGNvbnN0IGl0ZW1zID0gW107XG4gIGlmICghX2lzUG9pbnRJbkFyZWEocG9zaXRpb24sIGNoYXJ0LmNoYXJ0QXJlYSwgY2hhcnQuX21pblBhZGRpbmcpKSB7XG4gICAgcmV0dXJuIGl0ZW1zO1xuICB9XG4gIGNvbnN0IGV2YWx1YXRpb25GdW5jID0gZnVuY3Rpb24oZWxlbWVudCwgZGF0YXNldEluZGV4LCBpbmRleCkge1xuICAgIGlmIChlbGVtZW50LmluUmFuZ2UocG9zaXRpb24ueCwgcG9zaXRpb24ueSwgdXNlRmluYWxQb3NpdGlvbikpIHtcbiAgICAgIGl0ZW1zLnB1c2goe2VsZW1lbnQsIGRhdGFzZXRJbmRleCwgaW5kZXh9KTtcbiAgICB9XG4gIH07XG4gIG9wdGltaXplZEV2YWx1YXRlSXRlbXMoY2hhcnQsIGF4aXMsIHBvc2l0aW9uLCBldmFsdWF0aW9uRnVuYywgdHJ1ZSk7XG4gIHJldHVybiBpdGVtcztcbn1cbmZ1bmN0aW9uIGdldE5lYXJlc3RSYWRpYWxJdGVtcyhjaGFydCwgcG9zaXRpb24sIGF4aXMsIHVzZUZpbmFsUG9zaXRpb24pIHtcbiAgbGV0IGl0ZW1zID0gW107XG4gIGZ1bmN0aW9uIGV2YWx1YXRpb25GdW5jKGVsZW1lbnQsIGRhdGFzZXRJbmRleCwgaW5kZXgpIHtcbiAgICBjb25zdCB7c3RhcnRBbmdsZSwgZW5kQW5nbGV9ID0gZWxlbWVudC5nZXRQcm9wcyhbJ3N0YXJ0QW5nbGUnLCAnZW5kQW5nbGUnXSwgdXNlRmluYWxQb3NpdGlvbik7XG4gICAgY29uc3Qge2FuZ2xlfSA9IGdldEFuZ2xlRnJvbVBvaW50KGVsZW1lbnQsIHt4OiBwb3NpdGlvbi54LCB5OiBwb3NpdGlvbi55fSk7XG4gICAgaWYgKF9hbmdsZUJldHdlZW4oYW5nbGUsIHN0YXJ0QW5nbGUsIGVuZEFuZ2xlKSkge1xuICAgICAgaXRlbXMucHVzaCh7ZWxlbWVudCwgZGF0YXNldEluZGV4LCBpbmRleH0pO1xuICAgIH1cbiAgfVxuICBvcHRpbWl6ZWRFdmFsdWF0ZUl0ZW1zKGNoYXJ0LCBheGlzLCBwb3NpdGlvbiwgZXZhbHVhdGlvbkZ1bmMpO1xuICByZXR1cm4gaXRlbXM7XG59XG5mdW5jdGlvbiBnZXROZWFyZXN0Q2FydGVzaWFuSXRlbXMoY2hhcnQsIHBvc2l0aW9uLCBheGlzLCBpbnRlcnNlY3QsIHVzZUZpbmFsUG9zaXRpb24pIHtcbiAgbGV0IGl0ZW1zID0gW107XG4gIGNvbnN0IGRpc3RhbmNlTWV0cmljID0gZ2V0RGlzdGFuY2VNZXRyaWNGb3JBeGlzKGF4aXMpO1xuICBsZXQgbWluRGlzdGFuY2UgPSBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFk7XG4gIGZ1bmN0aW9uIGV2YWx1YXRpb25GdW5jKGVsZW1lbnQsIGRhdGFzZXRJbmRleCwgaW5kZXgpIHtcbiAgICBjb25zdCBpblJhbmdlID0gZWxlbWVudC5pblJhbmdlKHBvc2l0aW9uLngsIHBvc2l0aW9uLnksIHVzZUZpbmFsUG9zaXRpb24pO1xuICAgIGlmIChpbnRlcnNlY3QgJiYgIWluUmFuZ2UpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgY2VudGVyID0gZWxlbWVudC5nZXRDZW50ZXJQb2ludCh1c2VGaW5hbFBvc2l0aW9uKTtcbiAgICBjb25zdCBwb2ludEluQXJlYSA9IF9pc1BvaW50SW5BcmVhKGNlbnRlciwgY2hhcnQuY2hhcnRBcmVhLCBjaGFydC5fbWluUGFkZGluZyk7XG4gICAgaWYgKCFwb2ludEluQXJlYSAmJiAhaW5SYW5nZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBkaXN0YW5jZSA9IGRpc3RhbmNlTWV0cmljKHBvc2l0aW9uLCBjZW50ZXIpO1xuICAgIGlmIChkaXN0YW5jZSA8IG1pbkRpc3RhbmNlKSB7XG4gICAgICBpdGVtcyA9IFt7ZWxlbWVudCwgZGF0YXNldEluZGV4LCBpbmRleH1dO1xuICAgICAgbWluRGlzdGFuY2UgPSBkaXN0YW5jZTtcbiAgICB9IGVsc2UgaWYgKGRpc3RhbmNlID09PSBtaW5EaXN0YW5jZSkge1xuICAgICAgaXRlbXMucHVzaCh7ZWxlbWVudCwgZGF0YXNldEluZGV4LCBpbmRleH0pO1xuICAgIH1cbiAgfVxuICBvcHRpbWl6ZWRFdmFsdWF0ZUl0ZW1zKGNoYXJ0LCBheGlzLCBwb3NpdGlvbiwgZXZhbHVhdGlvbkZ1bmMpO1xuICByZXR1cm4gaXRlbXM7XG59XG5mdW5jdGlvbiBnZXROZWFyZXN0SXRlbXMoY2hhcnQsIHBvc2l0aW9uLCBheGlzLCBpbnRlcnNlY3QsIHVzZUZpbmFsUG9zaXRpb24pIHtcbiAgaWYgKCFfaXNQb2ludEluQXJlYShwb3NpdGlvbiwgY2hhcnQuY2hhcnRBcmVhLCBjaGFydC5fbWluUGFkZGluZykpIHtcbiAgICByZXR1cm4gW107XG4gIH1cbiAgcmV0dXJuIGF4aXMgPT09ICdyJyAmJiAhaW50ZXJzZWN0XG4gICAgPyBnZXROZWFyZXN0UmFkaWFsSXRlbXMoY2hhcnQsIHBvc2l0aW9uLCBheGlzLCB1c2VGaW5hbFBvc2l0aW9uKVxuICAgIDogZ2V0TmVhcmVzdENhcnRlc2lhbkl0ZW1zKGNoYXJ0LCBwb3NpdGlvbiwgYXhpcywgaW50ZXJzZWN0LCB1c2VGaW5hbFBvc2l0aW9uKTtcbn1cbmZ1bmN0aW9uIGdldEF4aXNJdGVtcyhjaGFydCwgZSwgb3B0aW9ucywgdXNlRmluYWxQb3NpdGlvbikge1xuICBjb25zdCBwb3NpdGlvbiA9IGdldFJlbGF0aXZlUG9zaXRpb24oZSwgY2hhcnQpO1xuICBjb25zdCBpdGVtcyA9IFtdO1xuICBjb25zdCBheGlzID0gb3B0aW9ucy5heGlzO1xuICBjb25zdCByYW5nZU1ldGhvZCA9IGF4aXMgPT09ICd4JyA/ICdpblhSYW5nZScgOiAnaW5ZUmFuZ2UnO1xuICBsZXQgaW50ZXJzZWN0c0l0ZW0gPSBmYWxzZTtcbiAgZXZhbHVhdGVBbGxWaXNpYmxlSXRlbXMoY2hhcnQsIChlbGVtZW50LCBkYXRhc2V0SW5kZXgsIGluZGV4KSA9PiB7XG4gICAgaWYgKGVsZW1lbnRbcmFuZ2VNZXRob2RdKHBvc2l0aW9uW2F4aXNdLCB1c2VGaW5hbFBvc2l0aW9uKSkge1xuICAgICAgaXRlbXMucHVzaCh7ZWxlbWVudCwgZGF0YXNldEluZGV4LCBpbmRleH0pO1xuICAgIH1cbiAgICBpZiAoZWxlbWVudC5pblJhbmdlKHBvc2l0aW9uLngsIHBvc2l0aW9uLnksIHVzZUZpbmFsUG9zaXRpb24pKSB7XG4gICAgICBpbnRlcnNlY3RzSXRlbSA9IHRydWU7XG4gICAgfVxuICB9KTtcbiAgaWYgKG9wdGlvbnMuaW50ZXJzZWN0ICYmICFpbnRlcnNlY3RzSXRlbSkge1xuICAgIHJldHVybiBbXTtcbiAgfVxuICByZXR1cm4gaXRlbXM7XG59XG52YXIgSW50ZXJhY3Rpb24gPSB7XG4gIG1vZGVzOiB7XG4gICAgaW5kZXgoY2hhcnQsIGUsIG9wdGlvbnMsIHVzZUZpbmFsUG9zaXRpb24pIHtcbiAgICAgIGNvbnN0IHBvc2l0aW9uID0gZ2V0UmVsYXRpdmVQb3NpdGlvbihlLCBjaGFydCk7XG4gICAgICBjb25zdCBheGlzID0gb3B0aW9ucy5heGlzIHx8ICd4JztcbiAgICAgIGNvbnN0IGl0ZW1zID0gb3B0aW9ucy5pbnRlcnNlY3RcbiAgICAgICAgPyBnZXRJbnRlcnNlY3RJdGVtcyhjaGFydCwgcG9zaXRpb24sIGF4aXMsIHVzZUZpbmFsUG9zaXRpb24pXG4gICAgICAgIDogZ2V0TmVhcmVzdEl0ZW1zKGNoYXJ0LCBwb3NpdGlvbiwgYXhpcywgZmFsc2UsIHVzZUZpbmFsUG9zaXRpb24pO1xuICAgICAgY29uc3QgZWxlbWVudHMgPSBbXTtcbiAgICAgIGlmICghaXRlbXMubGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cbiAgICAgIGNoYXJ0LmdldFNvcnRlZFZpc2libGVEYXRhc2V0TWV0YXMoKS5mb3JFYWNoKChtZXRhKSA9PiB7XG4gICAgICAgIGNvbnN0IGluZGV4ID0gaXRlbXNbMF0uaW5kZXg7XG4gICAgICAgIGNvbnN0IGVsZW1lbnQgPSBtZXRhLmRhdGFbaW5kZXhdO1xuICAgICAgICBpZiAoZWxlbWVudCAmJiAhZWxlbWVudC5za2lwKSB7XG4gICAgICAgICAgZWxlbWVudHMucHVzaCh7ZWxlbWVudCwgZGF0YXNldEluZGV4OiBtZXRhLmluZGV4LCBpbmRleH0pO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBlbGVtZW50cztcbiAgICB9LFxuICAgIGRhdGFzZXQoY2hhcnQsIGUsIG9wdGlvbnMsIHVzZUZpbmFsUG9zaXRpb24pIHtcbiAgICAgIGNvbnN0IHBvc2l0aW9uID0gZ2V0UmVsYXRpdmVQb3NpdGlvbihlLCBjaGFydCk7XG4gICAgICBjb25zdCBheGlzID0gb3B0aW9ucy5heGlzIHx8ICd4eSc7XG4gICAgICBsZXQgaXRlbXMgPSBvcHRpb25zLmludGVyc2VjdFxuICAgICAgICA/IGdldEludGVyc2VjdEl0ZW1zKGNoYXJ0LCBwb3NpdGlvbiwgYXhpcywgdXNlRmluYWxQb3NpdGlvbikgOlxuICAgICAgICBnZXROZWFyZXN0SXRlbXMoY2hhcnQsIHBvc2l0aW9uLCBheGlzLCBmYWxzZSwgdXNlRmluYWxQb3NpdGlvbik7XG4gICAgICBpZiAoaXRlbXMubGVuZ3RoID4gMCkge1xuICAgICAgICBjb25zdCBkYXRhc2V0SW5kZXggPSBpdGVtc1swXS5kYXRhc2V0SW5kZXg7XG4gICAgICAgIGNvbnN0IGRhdGEgPSBjaGFydC5nZXREYXRhc2V0TWV0YShkYXRhc2V0SW5kZXgpLmRhdGE7XG4gICAgICAgIGl0ZW1zID0gW107XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZGF0YS5sZW5ndGg7ICsraSkge1xuICAgICAgICAgIGl0ZW1zLnB1c2goe2VsZW1lbnQ6IGRhdGFbaV0sIGRhdGFzZXRJbmRleCwgaW5kZXg6IGl9KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIGl0ZW1zO1xuICAgIH0sXG4gICAgcG9pbnQoY2hhcnQsIGUsIG9wdGlvbnMsIHVzZUZpbmFsUG9zaXRpb24pIHtcbiAgICAgIGNvbnN0IHBvc2l0aW9uID0gZ2V0UmVsYXRpdmVQb3NpdGlvbihlLCBjaGFydCk7XG4gICAgICBjb25zdCBheGlzID0gb3B0aW9ucy5heGlzIHx8ICd4eSc7XG4gICAgICByZXR1cm4gZ2V0SW50ZXJzZWN0SXRlbXMoY2hhcnQsIHBvc2l0aW9uLCBheGlzLCB1c2VGaW5hbFBvc2l0aW9uKTtcbiAgICB9LFxuICAgIG5lYXJlc3QoY2hhcnQsIGUsIG9wdGlvbnMsIHVzZUZpbmFsUG9zaXRpb24pIHtcbiAgICAgIGNvbnN0IHBvc2l0aW9uID0gZ2V0UmVsYXRpdmVQb3NpdGlvbihlLCBjaGFydCk7XG4gICAgICBjb25zdCBheGlzID0gb3B0aW9ucy5heGlzIHx8ICd4eSc7XG4gICAgICByZXR1cm4gZ2V0TmVhcmVzdEl0ZW1zKGNoYXJ0LCBwb3NpdGlvbiwgYXhpcywgb3B0aW9ucy5pbnRlcnNlY3QsIHVzZUZpbmFsUG9zaXRpb24pO1xuICAgIH0sXG4gICAgeChjaGFydCwgZSwgb3B0aW9ucywgdXNlRmluYWxQb3NpdGlvbikge1xuICAgICAgcmV0dXJuIGdldEF4aXNJdGVtcyhjaGFydCwgZSwge2F4aXM6ICd4JywgaW50ZXJzZWN0OiBvcHRpb25zLmludGVyc2VjdH0sIHVzZUZpbmFsUG9zaXRpb24pO1xuICAgIH0sXG4gICAgeShjaGFydCwgZSwgb3B0aW9ucywgdXNlRmluYWxQb3NpdGlvbikge1xuICAgICAgcmV0dXJuIGdldEF4aXNJdGVtcyhjaGFydCwgZSwge2F4aXM6ICd5JywgaW50ZXJzZWN0OiBvcHRpb25zLmludGVyc2VjdH0sIHVzZUZpbmFsUG9zaXRpb24pO1xuICAgIH1cbiAgfVxufTtcblxuY29uc3QgU1RBVElDX1BPU0lUSU9OUyA9IFsnbGVmdCcsICd0b3AnLCAncmlnaHQnLCAnYm90dG9tJ107XG5mdW5jdGlvbiBmaWx0ZXJCeVBvc2l0aW9uKGFycmF5LCBwb3NpdGlvbikge1xuICByZXR1cm4gYXJyYXkuZmlsdGVyKHYgPT4gdi5wb3MgPT09IHBvc2l0aW9uKTtcbn1cbmZ1bmN0aW9uIGZpbHRlckR5bmFtaWNQb3NpdGlvbkJ5QXhpcyhhcnJheSwgYXhpcykge1xuICByZXR1cm4gYXJyYXkuZmlsdGVyKHYgPT4gU1RBVElDX1BPU0lUSU9OUy5pbmRleE9mKHYucG9zKSA9PT0gLTEgJiYgdi5ib3guYXhpcyA9PT0gYXhpcyk7XG59XG5mdW5jdGlvbiBzb3J0QnlXZWlnaHQoYXJyYXksIHJldmVyc2UpIHtcbiAgcmV0dXJuIGFycmF5LnNvcnQoKGEsIGIpID0+IHtcbiAgICBjb25zdCB2MCA9IHJldmVyc2UgPyBiIDogYTtcbiAgICBjb25zdCB2MSA9IHJldmVyc2UgPyBhIDogYjtcbiAgICByZXR1cm4gdjAud2VpZ2h0ID09PSB2MS53ZWlnaHQgP1xuICAgICAgdjAuaW5kZXggLSB2MS5pbmRleCA6XG4gICAgICB2MC53ZWlnaHQgLSB2MS53ZWlnaHQ7XG4gIH0pO1xufVxuZnVuY3Rpb24gd3JhcEJveGVzKGJveGVzKSB7XG4gIGNvbnN0IGxheW91dEJveGVzID0gW107XG4gIGxldCBpLCBpbGVuLCBib3gsIHBvcywgc3RhY2ssIHN0YWNrV2VpZ2h0O1xuICBmb3IgKGkgPSAwLCBpbGVuID0gKGJveGVzIHx8IFtdKS5sZW5ndGg7IGkgPCBpbGVuOyArK2kpIHtcbiAgICBib3ggPSBib3hlc1tpXTtcbiAgICAoe3Bvc2l0aW9uOiBwb3MsIG9wdGlvbnM6IHtzdGFjaywgc3RhY2tXZWlnaHQgPSAxfX0gPSBib3gpO1xuICAgIGxheW91dEJveGVzLnB1c2goe1xuICAgICAgaW5kZXg6IGksXG4gICAgICBib3gsXG4gICAgICBwb3MsXG4gICAgICBob3Jpem9udGFsOiBib3guaXNIb3Jpem9udGFsKCksXG4gICAgICB3ZWlnaHQ6IGJveC53ZWlnaHQsXG4gICAgICBzdGFjazogc3RhY2sgJiYgKHBvcyArIHN0YWNrKSxcbiAgICAgIHN0YWNrV2VpZ2h0XG4gICAgfSk7XG4gIH1cbiAgcmV0dXJuIGxheW91dEJveGVzO1xufVxuZnVuY3Rpb24gYnVpbGRTdGFja3MobGF5b3V0cykge1xuICBjb25zdCBzdGFja3MgPSB7fTtcbiAgZm9yIChjb25zdCB3cmFwIG9mIGxheW91dHMpIHtcbiAgICBjb25zdCB7c3RhY2ssIHBvcywgc3RhY2tXZWlnaHR9ID0gd3JhcDtcbiAgICBpZiAoIXN0YWNrIHx8ICFTVEFUSUNfUE9TSVRJT05TLmluY2x1ZGVzKHBvcykpIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICBjb25zdCBfc3RhY2sgPSBzdGFja3Nbc3RhY2tdIHx8IChzdGFja3Nbc3RhY2tdID0ge2NvdW50OiAwLCBwbGFjZWQ6IDAsIHdlaWdodDogMCwgc2l6ZTogMH0pO1xuICAgIF9zdGFjay5jb3VudCsrO1xuICAgIF9zdGFjay53ZWlnaHQgKz0gc3RhY2tXZWlnaHQ7XG4gIH1cbiAgcmV0dXJuIHN0YWNrcztcbn1cbmZ1bmN0aW9uIHNldExheW91dERpbXMobGF5b3V0cywgcGFyYW1zKSB7XG4gIGNvbnN0IHN0YWNrcyA9IGJ1aWxkU3RhY2tzKGxheW91dHMpO1xuICBjb25zdCB7dkJveE1heFdpZHRoLCBoQm94TWF4SGVpZ2h0fSA9IHBhcmFtcztcbiAgbGV0IGksIGlsZW4sIGxheW91dDtcbiAgZm9yIChpID0gMCwgaWxlbiA9IGxheW91dHMubGVuZ3RoOyBpIDwgaWxlbjsgKytpKSB7XG4gICAgbGF5b3V0ID0gbGF5b3V0c1tpXTtcbiAgICBjb25zdCB7ZnVsbFNpemV9ID0gbGF5b3V0LmJveDtcbiAgICBjb25zdCBzdGFjayA9IHN0YWNrc1tsYXlvdXQuc3RhY2tdO1xuICAgIGNvbnN0IGZhY3RvciA9IHN0YWNrICYmIGxheW91dC5zdGFja1dlaWdodCAvIHN0YWNrLndlaWdodDtcbiAgICBpZiAobGF5b3V0Lmhvcml6b250YWwpIHtcbiAgICAgIGxheW91dC53aWR0aCA9IGZhY3RvciA/IGZhY3RvciAqIHZCb3hNYXhXaWR0aCA6IGZ1bGxTaXplICYmIHBhcmFtcy5hdmFpbGFibGVXaWR0aDtcbiAgICAgIGxheW91dC5oZWlnaHQgPSBoQm94TWF4SGVpZ2h0O1xuICAgIH0gZWxzZSB7XG4gICAgICBsYXlvdXQud2lkdGggPSB2Qm94TWF4V2lkdGg7XG4gICAgICBsYXlvdXQuaGVpZ2h0ID0gZmFjdG9yID8gZmFjdG9yICogaEJveE1heEhlaWdodCA6IGZ1bGxTaXplICYmIHBhcmFtcy5hdmFpbGFibGVIZWlnaHQ7XG4gICAgfVxuICB9XG4gIHJldHVybiBzdGFja3M7XG59XG5mdW5jdGlvbiBidWlsZExheW91dEJveGVzKGJveGVzKSB7XG4gIGNvbnN0IGxheW91dEJveGVzID0gd3JhcEJveGVzKGJveGVzKTtcbiAgY29uc3QgZnVsbFNpemUgPSBzb3J0QnlXZWlnaHQobGF5b3V0Qm94ZXMuZmlsdGVyKHdyYXAgPT4gd3JhcC5ib3guZnVsbFNpemUpLCB0cnVlKTtcbiAgY29uc3QgbGVmdCA9IHNvcnRCeVdlaWdodChmaWx0ZXJCeVBvc2l0aW9uKGxheW91dEJveGVzLCAnbGVmdCcpLCB0cnVlKTtcbiAgY29uc3QgcmlnaHQgPSBzb3J0QnlXZWlnaHQoZmlsdGVyQnlQb3NpdGlvbihsYXlvdXRCb3hlcywgJ3JpZ2h0JykpO1xuICBjb25zdCB0b3AgPSBzb3J0QnlXZWlnaHQoZmlsdGVyQnlQb3NpdGlvbihsYXlvdXRCb3hlcywgJ3RvcCcpLCB0cnVlKTtcbiAgY29uc3QgYm90dG9tID0gc29ydEJ5V2VpZ2h0KGZpbHRlckJ5UG9zaXRpb24obGF5b3V0Qm94ZXMsICdib3R0b20nKSk7XG4gIGNvbnN0IGNlbnRlckhvcml6b250YWwgPSBmaWx0ZXJEeW5hbWljUG9zaXRpb25CeUF4aXMobGF5b3V0Qm94ZXMsICd4Jyk7XG4gIGNvbnN0IGNlbnRlclZlcnRpY2FsID0gZmlsdGVyRHluYW1pY1Bvc2l0aW9uQnlBeGlzKGxheW91dEJveGVzLCAneScpO1xuICByZXR1cm4ge1xuICAgIGZ1bGxTaXplLFxuICAgIGxlZnRBbmRUb3A6IGxlZnQuY29uY2F0KHRvcCksXG4gICAgcmlnaHRBbmRCb3R0b206IHJpZ2h0LmNvbmNhdChjZW50ZXJWZXJ0aWNhbCkuY29uY2F0KGJvdHRvbSkuY29uY2F0KGNlbnRlckhvcml6b250YWwpLFxuICAgIGNoYXJ0QXJlYTogZmlsdGVyQnlQb3NpdGlvbihsYXlvdXRCb3hlcywgJ2NoYXJ0QXJlYScpLFxuICAgIHZlcnRpY2FsOiBsZWZ0LmNvbmNhdChyaWdodCkuY29uY2F0KGNlbnRlclZlcnRpY2FsKSxcbiAgICBob3Jpem9udGFsOiB0b3AuY29uY2F0KGJvdHRvbSkuY29uY2F0KGNlbnRlckhvcml6b250YWwpXG4gIH07XG59XG5mdW5jdGlvbiBnZXRDb21iaW5lZE1heChtYXhQYWRkaW5nLCBjaGFydEFyZWEsIGEsIGIpIHtcbiAgcmV0dXJuIE1hdGgubWF4KG1heFBhZGRpbmdbYV0sIGNoYXJ0QXJlYVthXSkgKyBNYXRoLm1heChtYXhQYWRkaW5nW2JdLCBjaGFydEFyZWFbYl0pO1xufVxuZnVuY3Rpb24gdXBkYXRlTWF4UGFkZGluZyhtYXhQYWRkaW5nLCBib3hQYWRkaW5nKSB7XG4gIG1heFBhZGRpbmcudG9wID0gTWF0aC5tYXgobWF4UGFkZGluZy50b3AsIGJveFBhZGRpbmcudG9wKTtcbiAgbWF4UGFkZGluZy5sZWZ0ID0gTWF0aC5tYXgobWF4UGFkZGluZy5sZWZ0LCBib3hQYWRkaW5nLmxlZnQpO1xuICBtYXhQYWRkaW5nLmJvdHRvbSA9IE1hdGgubWF4KG1heFBhZGRpbmcuYm90dG9tLCBib3hQYWRkaW5nLmJvdHRvbSk7XG4gIG1heFBhZGRpbmcucmlnaHQgPSBNYXRoLm1heChtYXhQYWRkaW5nLnJpZ2h0LCBib3hQYWRkaW5nLnJpZ2h0KTtcbn1cbmZ1bmN0aW9uIHVwZGF0ZURpbXMoY2hhcnRBcmVhLCBwYXJhbXMsIGxheW91dCwgc3RhY2tzKSB7XG4gIGNvbnN0IHtwb3MsIGJveH0gPSBsYXlvdXQ7XG4gIGNvbnN0IG1heFBhZGRpbmcgPSBjaGFydEFyZWEubWF4UGFkZGluZztcbiAgaWYgKCFpc09iamVjdChwb3MpKSB7XG4gICAgaWYgKGxheW91dC5zaXplKSB7XG4gICAgICBjaGFydEFyZWFbcG9zXSAtPSBsYXlvdXQuc2l6ZTtcbiAgICB9XG4gICAgY29uc3Qgc3RhY2sgPSBzdGFja3NbbGF5b3V0LnN0YWNrXSB8fCB7c2l6ZTogMCwgY291bnQ6IDF9O1xuICAgIHN0YWNrLnNpemUgPSBNYXRoLm1heChzdGFjay5zaXplLCBsYXlvdXQuaG9yaXpvbnRhbCA/IGJveC5oZWlnaHQgOiBib3gud2lkdGgpO1xuICAgIGxheW91dC5zaXplID0gc3RhY2suc2l6ZSAvIHN0YWNrLmNvdW50O1xuICAgIGNoYXJ0QXJlYVtwb3NdICs9IGxheW91dC5zaXplO1xuICB9XG4gIGlmIChib3guZ2V0UGFkZGluZykge1xuICAgIHVwZGF0ZU1heFBhZGRpbmcobWF4UGFkZGluZywgYm94LmdldFBhZGRpbmcoKSk7XG4gIH1cbiAgY29uc3QgbmV3V2lkdGggPSBNYXRoLm1heCgwLCBwYXJhbXMub3V0ZXJXaWR0aCAtIGdldENvbWJpbmVkTWF4KG1heFBhZGRpbmcsIGNoYXJ0QXJlYSwgJ2xlZnQnLCAncmlnaHQnKSk7XG4gIGNvbnN0IG5ld0hlaWdodCA9IE1hdGgubWF4KDAsIHBhcmFtcy5vdXRlckhlaWdodCAtIGdldENvbWJpbmVkTWF4KG1heFBhZGRpbmcsIGNoYXJ0QXJlYSwgJ3RvcCcsICdib3R0b20nKSk7XG4gIGNvbnN0IHdpZHRoQ2hhbmdlZCA9IG5ld1dpZHRoICE9PSBjaGFydEFyZWEudztcbiAgY29uc3QgaGVpZ2h0Q2hhbmdlZCA9IG5ld0hlaWdodCAhPT0gY2hhcnRBcmVhLmg7XG4gIGNoYXJ0QXJlYS53ID0gbmV3V2lkdGg7XG4gIGNoYXJ0QXJlYS5oID0gbmV3SGVpZ2h0O1xuICByZXR1cm4gbGF5b3V0Lmhvcml6b250YWxcbiAgICA/IHtzYW1lOiB3aWR0aENoYW5nZWQsIG90aGVyOiBoZWlnaHRDaGFuZ2VkfVxuICAgIDoge3NhbWU6IGhlaWdodENoYW5nZWQsIG90aGVyOiB3aWR0aENoYW5nZWR9O1xufVxuZnVuY3Rpb24gaGFuZGxlTWF4UGFkZGluZyhjaGFydEFyZWEpIHtcbiAgY29uc3QgbWF4UGFkZGluZyA9IGNoYXJ0QXJlYS5tYXhQYWRkaW5nO1xuICBmdW5jdGlvbiB1cGRhdGVQb3MocG9zKSB7XG4gICAgY29uc3QgY2hhbmdlID0gTWF0aC5tYXgobWF4UGFkZGluZ1twb3NdIC0gY2hhcnRBcmVhW3Bvc10sIDApO1xuICAgIGNoYXJ0QXJlYVtwb3NdICs9IGNoYW5nZTtcbiAgICByZXR1cm4gY2hhbmdlO1xuICB9XG4gIGNoYXJ0QXJlYS55ICs9IHVwZGF0ZVBvcygndG9wJyk7XG4gIGNoYXJ0QXJlYS54ICs9IHVwZGF0ZVBvcygnbGVmdCcpO1xuICB1cGRhdGVQb3MoJ3JpZ2h0Jyk7XG4gIHVwZGF0ZVBvcygnYm90dG9tJyk7XG59XG5mdW5jdGlvbiBnZXRNYXJnaW5zKGhvcml6b250YWwsIGNoYXJ0QXJlYSkge1xuICBjb25zdCBtYXhQYWRkaW5nID0gY2hhcnRBcmVhLm1heFBhZGRpbmc7XG4gIGZ1bmN0aW9uIG1hcmdpbkZvclBvc2l0aW9ucyhwb3NpdGlvbnMpIHtcbiAgICBjb25zdCBtYXJnaW4gPSB7bGVmdDogMCwgdG9wOiAwLCByaWdodDogMCwgYm90dG9tOiAwfTtcbiAgICBwb3NpdGlvbnMuZm9yRWFjaCgocG9zKSA9PiB7XG4gICAgICBtYXJnaW5bcG9zXSA9IE1hdGgubWF4KGNoYXJ0QXJlYVtwb3NdLCBtYXhQYWRkaW5nW3Bvc10pO1xuICAgIH0pO1xuICAgIHJldHVybiBtYXJnaW47XG4gIH1cbiAgcmV0dXJuIGhvcml6b250YWxcbiAgICA/IG1hcmdpbkZvclBvc2l0aW9ucyhbJ2xlZnQnLCAncmlnaHQnXSlcbiAgICA6IG1hcmdpbkZvclBvc2l0aW9ucyhbJ3RvcCcsICdib3R0b20nXSk7XG59XG5mdW5jdGlvbiBmaXRCb3hlcyhib3hlcywgY2hhcnRBcmVhLCBwYXJhbXMsIHN0YWNrcykge1xuICBjb25zdCByZWZpdEJveGVzID0gW107XG4gIGxldCBpLCBpbGVuLCBsYXlvdXQsIGJveCwgcmVmaXQsIGNoYW5nZWQ7XG4gIGZvciAoaSA9IDAsIGlsZW4gPSBib3hlcy5sZW5ndGgsIHJlZml0ID0gMDsgaSA8IGlsZW47ICsraSkge1xuICAgIGxheW91dCA9IGJveGVzW2ldO1xuICAgIGJveCA9IGxheW91dC5ib3g7XG4gICAgYm94LnVwZGF0ZShcbiAgICAgIGxheW91dC53aWR0aCB8fCBjaGFydEFyZWEudyxcbiAgICAgIGxheW91dC5oZWlnaHQgfHwgY2hhcnRBcmVhLmgsXG4gICAgICBnZXRNYXJnaW5zKGxheW91dC5ob3Jpem9udGFsLCBjaGFydEFyZWEpXG4gICAgKTtcbiAgICBjb25zdCB7c2FtZSwgb3RoZXJ9ID0gdXBkYXRlRGltcyhjaGFydEFyZWEsIHBhcmFtcywgbGF5b3V0LCBzdGFja3MpO1xuICAgIHJlZml0IHw9IHNhbWUgJiYgcmVmaXRCb3hlcy5sZW5ndGg7XG4gICAgY2hhbmdlZCA9IGNoYW5nZWQgfHwgb3RoZXI7XG4gICAgaWYgKCFib3guZnVsbFNpemUpIHtcbiAgICAgIHJlZml0Qm94ZXMucHVzaChsYXlvdXQpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVmaXQgJiYgZml0Qm94ZXMocmVmaXRCb3hlcywgY2hhcnRBcmVhLCBwYXJhbXMsIHN0YWNrcykgfHwgY2hhbmdlZDtcbn1cbmZ1bmN0aW9uIHNldEJveERpbXMoYm94LCBsZWZ0LCB0b3AsIHdpZHRoLCBoZWlnaHQpIHtcbiAgYm94LnRvcCA9IHRvcDtcbiAgYm94LmxlZnQgPSBsZWZ0O1xuICBib3gucmlnaHQgPSBsZWZ0ICsgd2lkdGg7XG4gIGJveC5ib3R0b20gPSB0b3AgKyBoZWlnaHQ7XG4gIGJveC53aWR0aCA9IHdpZHRoO1xuICBib3guaGVpZ2h0ID0gaGVpZ2h0O1xufVxuZnVuY3Rpb24gcGxhY2VCb3hlcyhib3hlcywgY2hhcnRBcmVhLCBwYXJhbXMsIHN0YWNrcykge1xuICBjb25zdCB1c2VyUGFkZGluZyA9IHBhcmFtcy5wYWRkaW5nO1xuICBsZXQge3gsIHl9ID0gY2hhcnRBcmVhO1xuICBmb3IgKGNvbnN0IGxheW91dCBvZiBib3hlcykge1xuICAgIGNvbnN0IGJveCA9IGxheW91dC5ib3g7XG4gICAgY29uc3Qgc3RhY2sgPSBzdGFja3NbbGF5b3V0LnN0YWNrXSB8fCB7Y291bnQ6IDEsIHBsYWNlZDogMCwgd2VpZ2h0OiAxfTtcbiAgICBjb25zdCB3ZWlnaHQgPSAobGF5b3V0LnN0YWNrV2VpZ2h0IC8gc3RhY2sud2VpZ2h0KSB8fCAxO1xuICAgIGlmIChsYXlvdXQuaG9yaXpvbnRhbCkge1xuICAgICAgY29uc3Qgd2lkdGggPSBjaGFydEFyZWEudyAqIHdlaWdodDtcbiAgICAgIGNvbnN0IGhlaWdodCA9IHN0YWNrLnNpemUgfHwgYm94LmhlaWdodDtcbiAgICAgIGlmIChkZWZpbmVkKHN0YWNrLnN0YXJ0KSkge1xuICAgICAgICB5ID0gc3RhY2suc3RhcnQ7XG4gICAgICB9XG4gICAgICBpZiAoYm94LmZ1bGxTaXplKSB7XG4gICAgICAgIHNldEJveERpbXMoYm94LCB1c2VyUGFkZGluZy5sZWZ0LCB5LCBwYXJhbXMub3V0ZXJXaWR0aCAtIHVzZXJQYWRkaW5nLnJpZ2h0IC0gdXNlclBhZGRpbmcubGVmdCwgaGVpZ2h0KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNldEJveERpbXMoYm94LCBjaGFydEFyZWEubGVmdCArIHN0YWNrLnBsYWNlZCwgeSwgd2lkdGgsIGhlaWdodCk7XG4gICAgICB9XG4gICAgICBzdGFjay5zdGFydCA9IHk7XG4gICAgICBzdGFjay5wbGFjZWQgKz0gd2lkdGg7XG4gICAgICB5ID0gYm94LmJvdHRvbTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgaGVpZ2h0ID0gY2hhcnRBcmVhLmggKiB3ZWlnaHQ7XG4gICAgICBjb25zdCB3aWR0aCA9IHN0YWNrLnNpemUgfHwgYm94LndpZHRoO1xuICAgICAgaWYgKGRlZmluZWQoc3RhY2suc3RhcnQpKSB7XG4gICAgICAgIHggPSBzdGFjay5zdGFydDtcbiAgICAgIH1cbiAgICAgIGlmIChib3guZnVsbFNpemUpIHtcbiAgICAgICAgc2V0Qm94RGltcyhib3gsIHgsIHVzZXJQYWRkaW5nLnRvcCwgd2lkdGgsIHBhcmFtcy5vdXRlckhlaWdodCAtIHVzZXJQYWRkaW5nLmJvdHRvbSAtIHVzZXJQYWRkaW5nLnRvcCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzZXRCb3hEaW1zKGJveCwgeCwgY2hhcnRBcmVhLnRvcCArIHN0YWNrLnBsYWNlZCwgd2lkdGgsIGhlaWdodCk7XG4gICAgICB9XG4gICAgICBzdGFjay5zdGFydCA9IHg7XG4gICAgICBzdGFjay5wbGFjZWQgKz0gaGVpZ2h0O1xuICAgICAgeCA9IGJveC5yaWdodDtcbiAgICB9XG4gIH1cbiAgY2hhcnRBcmVhLnggPSB4O1xuICBjaGFydEFyZWEueSA9IHk7XG59XG5kZWZhdWx0cy5zZXQoJ2xheW91dCcsIHtcbiAgYXV0b1BhZGRpbmc6IHRydWUsXG4gIHBhZGRpbmc6IHtcbiAgICB0b3A6IDAsXG4gICAgcmlnaHQ6IDAsXG4gICAgYm90dG9tOiAwLFxuICAgIGxlZnQ6IDBcbiAgfVxufSk7XG52YXIgbGF5b3V0cyA9IHtcbiAgYWRkQm94KGNoYXJ0LCBpdGVtKSB7XG4gICAgaWYgKCFjaGFydC5ib3hlcykge1xuICAgICAgY2hhcnQuYm94ZXMgPSBbXTtcbiAgICB9XG4gICAgaXRlbS5mdWxsU2l6ZSA9IGl0ZW0uZnVsbFNpemUgfHwgZmFsc2U7XG4gICAgaXRlbS5wb3NpdGlvbiA9IGl0ZW0ucG9zaXRpb24gfHwgJ3RvcCc7XG4gICAgaXRlbS53ZWlnaHQgPSBpdGVtLndlaWdodCB8fCAwO1xuICAgIGl0ZW0uX2xheWVycyA9IGl0ZW0uX2xheWVycyB8fCBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBbe1xuICAgICAgICB6OiAwLFxuICAgICAgICBkcmF3KGNoYXJ0QXJlYSkge1xuICAgICAgICAgIGl0ZW0uZHJhdyhjaGFydEFyZWEpO1xuICAgICAgICB9XG4gICAgICB9XTtcbiAgICB9O1xuICAgIGNoYXJ0LmJveGVzLnB1c2goaXRlbSk7XG4gIH0sXG4gIHJlbW92ZUJveChjaGFydCwgbGF5b3V0SXRlbSkge1xuICAgIGNvbnN0IGluZGV4ID0gY2hhcnQuYm94ZXMgPyBjaGFydC5ib3hlcy5pbmRleE9mKGxheW91dEl0ZW0pIDogLTE7XG4gICAgaWYgKGluZGV4ICE9PSAtMSkge1xuICAgICAgY2hhcnQuYm94ZXMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICB9XG4gIH0sXG4gIGNvbmZpZ3VyZShjaGFydCwgaXRlbSwgb3B0aW9ucykge1xuICAgIGl0ZW0uZnVsbFNpemUgPSBvcHRpb25zLmZ1bGxTaXplO1xuICAgIGl0ZW0ucG9zaXRpb24gPSBvcHRpb25zLnBvc2l0aW9uO1xuICAgIGl0ZW0ud2VpZ2h0ID0gb3B0aW9ucy53ZWlnaHQ7XG4gIH0sXG4gIHVwZGF0ZShjaGFydCwgd2lkdGgsIGhlaWdodCwgbWluUGFkZGluZykge1xuICAgIGlmICghY2hhcnQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgcGFkZGluZyA9IHRvUGFkZGluZyhjaGFydC5vcHRpb25zLmxheW91dC5wYWRkaW5nKTtcbiAgICBjb25zdCBhdmFpbGFibGVXaWR0aCA9IE1hdGgubWF4KHdpZHRoIC0gcGFkZGluZy53aWR0aCwgMCk7XG4gICAgY29uc3QgYXZhaWxhYmxlSGVpZ2h0ID0gTWF0aC5tYXgoaGVpZ2h0IC0gcGFkZGluZy5oZWlnaHQsIDApO1xuICAgIGNvbnN0IGJveGVzID0gYnVpbGRMYXlvdXRCb3hlcyhjaGFydC5ib3hlcyk7XG4gICAgY29uc3QgdmVydGljYWxCb3hlcyA9IGJveGVzLnZlcnRpY2FsO1xuICAgIGNvbnN0IGhvcml6b250YWxCb3hlcyA9IGJveGVzLmhvcml6b250YWw7XG4gICAgZWFjaChjaGFydC5ib3hlcywgYm94ID0+IHtcbiAgICAgIGlmICh0eXBlb2YgYm94LmJlZm9yZUxheW91dCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBib3guYmVmb3JlTGF5b3V0KCk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgY29uc3QgdmlzaWJsZVZlcnRpY2FsQm94Q291bnQgPSB2ZXJ0aWNhbEJveGVzLnJlZHVjZSgodG90YWwsIHdyYXApID0+XG4gICAgICB3cmFwLmJveC5vcHRpb25zICYmIHdyYXAuYm94Lm9wdGlvbnMuZGlzcGxheSA9PT0gZmFsc2UgPyB0b3RhbCA6IHRvdGFsICsgMSwgMCkgfHwgMTtcbiAgICBjb25zdCBwYXJhbXMgPSBPYmplY3QuZnJlZXplKHtcbiAgICAgIG91dGVyV2lkdGg6IHdpZHRoLFxuICAgICAgb3V0ZXJIZWlnaHQ6IGhlaWdodCxcbiAgICAgIHBhZGRpbmcsXG4gICAgICBhdmFpbGFibGVXaWR0aCxcbiAgICAgIGF2YWlsYWJsZUhlaWdodCxcbiAgICAgIHZCb3hNYXhXaWR0aDogYXZhaWxhYmxlV2lkdGggLyAyIC8gdmlzaWJsZVZlcnRpY2FsQm94Q291bnQsXG4gICAgICBoQm94TWF4SGVpZ2h0OiBhdmFpbGFibGVIZWlnaHQgLyAyXG4gICAgfSk7XG4gICAgY29uc3QgbWF4UGFkZGluZyA9IE9iamVjdC5hc3NpZ24oe30sIHBhZGRpbmcpO1xuICAgIHVwZGF0ZU1heFBhZGRpbmcobWF4UGFkZGluZywgdG9QYWRkaW5nKG1pblBhZGRpbmcpKTtcbiAgICBjb25zdCBjaGFydEFyZWEgPSBPYmplY3QuYXNzaWduKHtcbiAgICAgIG1heFBhZGRpbmcsXG4gICAgICB3OiBhdmFpbGFibGVXaWR0aCxcbiAgICAgIGg6IGF2YWlsYWJsZUhlaWdodCxcbiAgICAgIHg6IHBhZGRpbmcubGVmdCxcbiAgICAgIHk6IHBhZGRpbmcudG9wXG4gICAgfSwgcGFkZGluZyk7XG4gICAgY29uc3Qgc3RhY2tzID0gc2V0TGF5b3V0RGltcyh2ZXJ0aWNhbEJveGVzLmNvbmNhdChob3Jpem9udGFsQm94ZXMpLCBwYXJhbXMpO1xuICAgIGZpdEJveGVzKGJveGVzLmZ1bGxTaXplLCBjaGFydEFyZWEsIHBhcmFtcywgc3RhY2tzKTtcbiAgICBmaXRCb3hlcyh2ZXJ0aWNhbEJveGVzLCBjaGFydEFyZWEsIHBhcmFtcywgc3RhY2tzKTtcbiAgICBpZiAoZml0Qm94ZXMoaG9yaXpvbnRhbEJveGVzLCBjaGFydEFyZWEsIHBhcmFtcywgc3RhY2tzKSkge1xuICAgICAgZml0Qm94ZXModmVydGljYWxCb3hlcywgY2hhcnRBcmVhLCBwYXJhbXMsIHN0YWNrcyk7XG4gICAgfVxuICAgIGhhbmRsZU1heFBhZGRpbmcoY2hhcnRBcmVhKTtcbiAgICBwbGFjZUJveGVzKGJveGVzLmxlZnRBbmRUb3AsIGNoYXJ0QXJlYSwgcGFyYW1zLCBzdGFja3MpO1xuICAgIGNoYXJ0QXJlYS54ICs9IGNoYXJ0QXJlYS53O1xuICAgIGNoYXJ0QXJlYS55ICs9IGNoYXJ0QXJlYS5oO1xuICAgIHBsYWNlQm94ZXMoYm94ZXMucmlnaHRBbmRCb3R0b20sIGNoYXJ0QXJlYSwgcGFyYW1zLCBzdGFja3MpO1xuICAgIGNoYXJ0LmNoYXJ0QXJlYSA9IHtcbiAgICAgIGxlZnQ6IGNoYXJ0QXJlYS5sZWZ0LFxuICAgICAgdG9wOiBjaGFydEFyZWEudG9wLFxuICAgICAgcmlnaHQ6IGNoYXJ0QXJlYS5sZWZ0ICsgY2hhcnRBcmVhLncsXG4gICAgICBib3R0b206IGNoYXJ0QXJlYS50b3AgKyBjaGFydEFyZWEuaCxcbiAgICAgIGhlaWdodDogY2hhcnRBcmVhLmgsXG4gICAgICB3aWR0aDogY2hhcnRBcmVhLncsXG4gICAgfTtcbiAgICBlYWNoKGJveGVzLmNoYXJ0QXJlYSwgKGxheW91dCkgPT4ge1xuICAgICAgY29uc3QgYm94ID0gbGF5b3V0LmJveDtcbiAgICAgIE9iamVjdC5hc3NpZ24oYm94LCBjaGFydC5jaGFydEFyZWEpO1xuICAgICAgYm94LnVwZGF0ZShjaGFydEFyZWEudywgY2hhcnRBcmVhLmgsIHtsZWZ0OiAwLCB0b3A6IDAsIHJpZ2h0OiAwLCBib3R0b206IDB9KTtcbiAgICB9KTtcbiAgfVxufTtcblxuY2xhc3MgQmFzZVBsYXRmb3JtIHtcbiAgYWNxdWlyZUNvbnRleHQoY2FudmFzLCBhc3BlY3RSYXRpbykge31cbiAgcmVsZWFzZUNvbnRleHQoY29udGV4dCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBhZGRFdmVudExpc3RlbmVyKGNoYXJ0LCB0eXBlLCBsaXN0ZW5lcikge31cbiAgcmVtb3ZlRXZlbnRMaXN0ZW5lcihjaGFydCwgdHlwZSwgbGlzdGVuZXIpIHt9XG4gIGdldERldmljZVBpeGVsUmF0aW8oKSB7XG4gICAgcmV0dXJuIDE7XG4gIH1cbiAgZ2V0TWF4aW11bVNpemUoZWxlbWVudCwgd2lkdGgsIGhlaWdodCwgYXNwZWN0UmF0aW8pIHtcbiAgICB3aWR0aCA9IE1hdGgubWF4KDAsIHdpZHRoIHx8IGVsZW1lbnQud2lkdGgpO1xuICAgIGhlaWdodCA9IGhlaWdodCB8fCBlbGVtZW50LmhlaWdodDtcbiAgICByZXR1cm4ge1xuICAgICAgd2lkdGgsXG4gICAgICBoZWlnaHQ6IE1hdGgubWF4KDAsIGFzcGVjdFJhdGlvID8gTWF0aC5mbG9vcih3aWR0aCAvIGFzcGVjdFJhdGlvKSA6IGhlaWdodClcbiAgICB9O1xuICB9XG4gIGlzQXR0YWNoZWQoY2FudmFzKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgdXBkYXRlQ29uZmlnKGNvbmZpZykge1xuICB9XG59XG5cbmNsYXNzIEJhc2ljUGxhdGZvcm0gZXh0ZW5kcyBCYXNlUGxhdGZvcm0ge1xuICBhY3F1aXJlQ29udGV4dChpdGVtKSB7XG4gICAgcmV0dXJuIGl0ZW0gJiYgaXRlbS5nZXRDb250ZXh0ICYmIGl0ZW0uZ2V0Q29udGV4dCgnMmQnKSB8fCBudWxsO1xuICB9XG4gIHVwZGF0ZUNvbmZpZyhjb25maWcpIHtcbiAgICBjb25maWcub3B0aW9ucy5hbmltYXRpb24gPSBmYWxzZTtcbiAgfVxufVxuXG5jb25zdCBFWFBBTkRPX0tFWSA9ICckY2hhcnRqcyc7XG5jb25zdCBFVkVOVF9UWVBFUyA9IHtcbiAgdG91Y2hzdGFydDogJ21vdXNlZG93bicsXG4gIHRvdWNobW92ZTogJ21vdXNlbW92ZScsXG4gIHRvdWNoZW5kOiAnbW91c2V1cCcsXG4gIHBvaW50ZXJlbnRlcjogJ21vdXNlZW50ZXInLFxuICBwb2ludGVyZG93bjogJ21vdXNlZG93bicsXG4gIHBvaW50ZXJtb3ZlOiAnbW91c2Vtb3ZlJyxcbiAgcG9pbnRlcnVwOiAnbW91c2V1cCcsXG4gIHBvaW50ZXJsZWF2ZTogJ21vdXNlb3V0JyxcbiAgcG9pbnRlcm91dDogJ21vdXNlb3V0J1xufTtcbmNvbnN0IGlzTnVsbE9yRW1wdHkgPSB2YWx1ZSA9PiB2YWx1ZSA9PT0gbnVsbCB8fCB2YWx1ZSA9PT0gJyc7XG5mdW5jdGlvbiBpbml0Q2FudmFzKGNhbnZhcywgYXNwZWN0UmF0aW8pIHtcbiAgY29uc3Qgc3R5bGUgPSBjYW52YXMuc3R5bGU7XG4gIGNvbnN0IHJlbmRlckhlaWdodCA9IGNhbnZhcy5nZXRBdHRyaWJ1dGUoJ2hlaWdodCcpO1xuICBjb25zdCByZW5kZXJXaWR0aCA9IGNhbnZhcy5nZXRBdHRyaWJ1dGUoJ3dpZHRoJyk7XG4gIGNhbnZhc1tFWFBBTkRPX0tFWV0gPSB7XG4gICAgaW5pdGlhbDoge1xuICAgICAgaGVpZ2h0OiByZW5kZXJIZWlnaHQsXG4gICAgICB3aWR0aDogcmVuZGVyV2lkdGgsXG4gICAgICBzdHlsZToge1xuICAgICAgICBkaXNwbGF5OiBzdHlsZS5kaXNwbGF5LFxuICAgICAgICBoZWlnaHQ6IHN0eWxlLmhlaWdodCxcbiAgICAgICAgd2lkdGg6IHN0eWxlLndpZHRoXG4gICAgICB9XG4gICAgfVxuICB9O1xuICBzdHlsZS5kaXNwbGF5ID0gc3R5bGUuZGlzcGxheSB8fCAnYmxvY2snO1xuICBzdHlsZS5ib3hTaXppbmcgPSBzdHlsZS5ib3hTaXppbmcgfHwgJ2JvcmRlci1ib3gnO1xuICBpZiAoaXNOdWxsT3JFbXB0eShyZW5kZXJXaWR0aCkpIHtcbiAgICBjb25zdCBkaXNwbGF5V2lkdGggPSByZWFkVXNlZFNpemUoY2FudmFzLCAnd2lkdGgnKTtcbiAgICBpZiAoZGlzcGxheVdpZHRoICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGNhbnZhcy53aWR0aCA9IGRpc3BsYXlXaWR0aDtcbiAgICB9XG4gIH1cbiAgaWYgKGlzTnVsbE9yRW1wdHkocmVuZGVySGVpZ2h0KSkge1xuICAgIGlmIChjYW52YXMuc3R5bGUuaGVpZ2h0ID09PSAnJykge1xuICAgICAgY2FudmFzLmhlaWdodCA9IGNhbnZhcy53aWR0aCAvIChhc3BlY3RSYXRpbyB8fCAyKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgZGlzcGxheUhlaWdodCA9IHJlYWRVc2VkU2l6ZShjYW52YXMsICdoZWlnaHQnKTtcbiAgICAgIGlmIChkaXNwbGF5SGVpZ2h0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgY2FudmFzLmhlaWdodCA9IGRpc3BsYXlIZWlnaHQ7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiBjYW52YXM7XG59XG5jb25zdCBldmVudExpc3RlbmVyT3B0aW9ucyA9IHN1cHBvcnRzRXZlbnRMaXN0ZW5lck9wdGlvbnMgPyB7cGFzc2l2ZTogdHJ1ZX0gOiBmYWxzZTtcbmZ1bmN0aW9uIGFkZExpc3RlbmVyKG5vZGUsIHR5cGUsIGxpc3RlbmVyKSB7XG4gIG5vZGUuYWRkRXZlbnRMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lciwgZXZlbnRMaXN0ZW5lck9wdGlvbnMpO1xufVxuZnVuY3Rpb24gcmVtb3ZlTGlzdGVuZXIoY2hhcnQsIHR5cGUsIGxpc3RlbmVyKSB7XG4gIGNoYXJ0LmNhbnZhcy5yZW1vdmVFdmVudExpc3RlbmVyKHR5cGUsIGxpc3RlbmVyLCBldmVudExpc3RlbmVyT3B0aW9ucyk7XG59XG5mdW5jdGlvbiBmcm9tTmF0aXZlRXZlbnQoZXZlbnQsIGNoYXJ0KSB7XG4gIGNvbnN0IHR5cGUgPSBFVkVOVF9UWVBFU1tldmVudC50eXBlXSB8fCBldmVudC50eXBlO1xuICBjb25zdCB7eCwgeX0gPSBnZXRSZWxhdGl2ZVBvc2l0aW9uJDEoZXZlbnQsIGNoYXJ0KTtcbiAgcmV0dXJuIHtcbiAgICB0eXBlLFxuICAgIGNoYXJ0LFxuICAgIG5hdGl2ZTogZXZlbnQsXG4gICAgeDogeCAhPT0gdW5kZWZpbmVkID8geCA6IG51bGwsXG4gICAgeTogeSAhPT0gdW5kZWZpbmVkID8geSA6IG51bGwsXG4gIH07XG59XG5mdW5jdGlvbiBub2RlTGlzdENvbnRhaW5zKG5vZGVMaXN0LCBjYW52YXMpIHtcbiAgZm9yIChjb25zdCBub2RlIG9mIG5vZGVMaXN0KSB7XG4gICAgaWYgKG5vZGUgPT09IGNhbnZhcyB8fCBub2RlLmNvbnRhaW5zKGNhbnZhcykpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfVxufVxuZnVuY3Rpb24gY3JlYXRlQXR0YWNoT2JzZXJ2ZXIoY2hhcnQsIHR5cGUsIGxpc3RlbmVyKSB7XG4gIGNvbnN0IGNhbnZhcyA9IGNoYXJ0LmNhbnZhcztcbiAgY29uc3Qgb2JzZXJ2ZXIgPSBuZXcgTXV0YXRpb25PYnNlcnZlcihlbnRyaWVzID0+IHtcbiAgICBsZXQgdHJpZ2dlciA9IGZhbHNlO1xuICAgIGZvciAoY29uc3QgZW50cnkgb2YgZW50cmllcykge1xuICAgICAgdHJpZ2dlciA9IHRyaWdnZXIgfHwgbm9kZUxpc3RDb250YWlucyhlbnRyeS5hZGRlZE5vZGVzLCBjYW52YXMpO1xuICAgICAgdHJpZ2dlciA9IHRyaWdnZXIgJiYgIW5vZGVMaXN0Q29udGFpbnMoZW50cnkucmVtb3ZlZE5vZGVzLCBjYW52YXMpO1xuICAgIH1cbiAgICBpZiAodHJpZ2dlcikge1xuICAgICAgbGlzdGVuZXIoKTtcbiAgICB9XG4gIH0pO1xuICBvYnNlcnZlci5vYnNlcnZlKGRvY3VtZW50LCB7Y2hpbGRMaXN0OiB0cnVlLCBzdWJ0cmVlOiB0cnVlfSk7XG4gIHJldHVybiBvYnNlcnZlcjtcbn1cbmZ1bmN0aW9uIGNyZWF0ZURldGFjaE9ic2VydmVyKGNoYXJ0LCB0eXBlLCBsaXN0ZW5lcikge1xuICBjb25zdCBjYW52YXMgPSBjaGFydC5jYW52YXM7XG4gIGNvbnN0IG9ic2VydmVyID0gbmV3IE11dGF0aW9uT2JzZXJ2ZXIoZW50cmllcyA9PiB7XG4gICAgbGV0IHRyaWdnZXIgPSBmYWxzZTtcbiAgICBmb3IgKGNvbnN0IGVudHJ5IG9mIGVudHJpZXMpIHtcbiAgICAgIHRyaWdnZXIgPSB0cmlnZ2VyIHx8IG5vZGVMaXN0Q29udGFpbnMoZW50cnkucmVtb3ZlZE5vZGVzLCBjYW52YXMpO1xuICAgICAgdHJpZ2dlciA9IHRyaWdnZXIgJiYgIW5vZGVMaXN0Q29udGFpbnMoZW50cnkuYWRkZWROb2RlcywgY2FudmFzKTtcbiAgICB9XG4gICAgaWYgKHRyaWdnZXIpIHtcbiAgICAgIGxpc3RlbmVyKCk7XG4gICAgfVxuICB9KTtcbiAgb2JzZXJ2ZXIub2JzZXJ2ZShkb2N1bWVudCwge2NoaWxkTGlzdDogdHJ1ZSwgc3VidHJlZTogdHJ1ZX0pO1xuICByZXR1cm4gb2JzZXJ2ZXI7XG59XG5jb25zdCBkcnBMaXN0ZW5pbmdDaGFydHMgPSBuZXcgTWFwKCk7XG5sZXQgb2xkRGV2aWNlUGl4ZWxSYXRpbyA9IDA7XG5mdW5jdGlvbiBvbldpbmRvd1Jlc2l6ZSgpIHtcbiAgY29uc3QgZHByID0gd2luZG93LmRldmljZVBpeGVsUmF0aW87XG4gIGlmIChkcHIgPT09IG9sZERldmljZVBpeGVsUmF0aW8pIHtcbiAgICByZXR1cm47XG4gIH1cbiAgb2xkRGV2aWNlUGl4ZWxSYXRpbyA9IGRwcjtcbiAgZHJwTGlzdGVuaW5nQ2hhcnRzLmZvckVhY2goKHJlc2l6ZSwgY2hhcnQpID0+IHtcbiAgICBpZiAoY2hhcnQuY3VycmVudERldmljZVBpeGVsUmF0aW8gIT09IGRwcikge1xuICAgICAgcmVzaXplKCk7XG4gICAgfVxuICB9KTtcbn1cbmZ1bmN0aW9uIGxpc3RlbkRldmljZVBpeGVsUmF0aW9DaGFuZ2VzKGNoYXJ0LCByZXNpemUpIHtcbiAgaWYgKCFkcnBMaXN0ZW5pbmdDaGFydHMuc2l6ZSkge1xuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCBvbldpbmRvd1Jlc2l6ZSk7XG4gIH1cbiAgZHJwTGlzdGVuaW5nQ2hhcnRzLnNldChjaGFydCwgcmVzaXplKTtcbn1cbmZ1bmN0aW9uIHVubGlzdGVuRGV2aWNlUGl4ZWxSYXRpb0NoYW5nZXMoY2hhcnQpIHtcbiAgZHJwTGlzdGVuaW5nQ2hhcnRzLmRlbGV0ZShjaGFydCk7XG4gIGlmICghZHJwTGlzdGVuaW5nQ2hhcnRzLnNpemUpIHtcbiAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcigncmVzaXplJywgb25XaW5kb3dSZXNpemUpO1xuICB9XG59XG5mdW5jdGlvbiBjcmVhdGVSZXNpemVPYnNlcnZlcihjaGFydCwgdHlwZSwgbGlzdGVuZXIpIHtcbiAgY29uc3QgY2FudmFzID0gY2hhcnQuY2FudmFzO1xuICBjb25zdCBjb250YWluZXIgPSBjYW52YXMgJiYgX2dldFBhcmVudE5vZGUoY2FudmFzKTtcbiAgaWYgKCFjb250YWluZXIpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgY29uc3QgcmVzaXplID0gdGhyb3R0bGVkKCh3aWR0aCwgaGVpZ2h0KSA9PiB7XG4gICAgY29uc3QgdyA9IGNvbnRhaW5lci5jbGllbnRXaWR0aDtcbiAgICBsaXN0ZW5lcih3aWR0aCwgaGVpZ2h0KTtcbiAgICBpZiAodyA8IGNvbnRhaW5lci5jbGllbnRXaWR0aCkge1xuICAgICAgbGlzdGVuZXIoKTtcbiAgICB9XG4gIH0sIHdpbmRvdyk7XG4gIGNvbnN0IG9ic2VydmVyID0gbmV3IFJlc2l6ZU9ic2VydmVyKGVudHJpZXMgPT4ge1xuICAgIGNvbnN0IGVudHJ5ID0gZW50cmllc1swXTtcbiAgICBjb25zdCB3aWR0aCA9IGVudHJ5LmNvbnRlbnRSZWN0LndpZHRoO1xuICAgIGNvbnN0IGhlaWdodCA9IGVudHJ5LmNvbnRlbnRSZWN0LmhlaWdodDtcbiAgICBpZiAod2lkdGggPT09IDAgJiYgaGVpZ2h0ID09PSAwKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHJlc2l6ZSh3aWR0aCwgaGVpZ2h0KTtcbiAgfSk7XG4gIG9ic2VydmVyLm9ic2VydmUoY29udGFpbmVyKTtcbiAgbGlzdGVuRGV2aWNlUGl4ZWxSYXRpb0NoYW5nZXMoY2hhcnQsIHJlc2l6ZSk7XG4gIHJldHVybiBvYnNlcnZlcjtcbn1cbmZ1bmN0aW9uIHJlbGVhc2VPYnNlcnZlcihjaGFydCwgdHlwZSwgb2JzZXJ2ZXIpIHtcbiAgaWYgKG9ic2VydmVyKSB7XG4gICAgb2JzZXJ2ZXIuZGlzY29ubmVjdCgpO1xuICB9XG4gIGlmICh0eXBlID09PSAncmVzaXplJykge1xuICAgIHVubGlzdGVuRGV2aWNlUGl4ZWxSYXRpb0NoYW5nZXMoY2hhcnQpO1xuICB9XG59XG5mdW5jdGlvbiBjcmVhdGVQcm94eUFuZExpc3RlbihjaGFydCwgdHlwZSwgbGlzdGVuZXIpIHtcbiAgY29uc3QgY2FudmFzID0gY2hhcnQuY2FudmFzO1xuICBjb25zdCBwcm94eSA9IHRocm90dGxlZCgoZXZlbnQpID0+IHtcbiAgICBpZiAoY2hhcnQuY3R4ICE9PSBudWxsKSB7XG4gICAgICBsaXN0ZW5lcihmcm9tTmF0aXZlRXZlbnQoZXZlbnQsIGNoYXJ0KSk7XG4gICAgfVxuICB9LCBjaGFydCwgKGFyZ3MpID0+IHtcbiAgICBjb25zdCBldmVudCA9IGFyZ3NbMF07XG4gICAgcmV0dXJuIFtldmVudCwgZXZlbnQub2Zmc2V0WCwgZXZlbnQub2Zmc2V0WV07XG4gIH0pO1xuICBhZGRMaXN0ZW5lcihjYW52YXMsIHR5cGUsIHByb3h5KTtcbiAgcmV0dXJuIHByb3h5O1xufVxuY2xhc3MgRG9tUGxhdGZvcm0gZXh0ZW5kcyBCYXNlUGxhdGZvcm0ge1xuICBhY3F1aXJlQ29udGV4dChjYW52YXMsIGFzcGVjdFJhdGlvKSB7XG4gICAgY29uc3QgY29udGV4dCA9IGNhbnZhcyAmJiBjYW52YXMuZ2V0Q29udGV4dCAmJiBjYW52YXMuZ2V0Q29udGV4dCgnMmQnKTtcbiAgICBpZiAoY29udGV4dCAmJiBjb250ZXh0LmNhbnZhcyA9PT0gY2FudmFzKSB7XG4gICAgICBpbml0Q2FudmFzKGNhbnZhcywgYXNwZWN0UmF0aW8pO1xuICAgICAgcmV0dXJuIGNvbnRleHQ7XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9XG4gIHJlbGVhc2VDb250ZXh0KGNvbnRleHQpIHtcbiAgICBjb25zdCBjYW52YXMgPSBjb250ZXh0LmNhbnZhcztcbiAgICBpZiAoIWNhbnZhc1tFWFBBTkRPX0tFWV0pIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgY29uc3QgaW5pdGlhbCA9IGNhbnZhc1tFWFBBTkRPX0tFWV0uaW5pdGlhbDtcbiAgICBbJ2hlaWdodCcsICd3aWR0aCddLmZvckVhY2goKHByb3ApID0+IHtcbiAgICAgIGNvbnN0IHZhbHVlID0gaW5pdGlhbFtwcm9wXTtcbiAgICAgIGlmIChpc051bGxPclVuZGVmKHZhbHVlKSkge1xuICAgICAgICBjYW52YXMucmVtb3ZlQXR0cmlidXRlKHByb3ApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY2FudmFzLnNldEF0dHJpYnV0ZShwcm9wLCB2YWx1ZSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgY29uc3Qgc3R5bGUgPSBpbml0aWFsLnN0eWxlIHx8IHt9O1xuICAgIE9iamVjdC5rZXlzKHN0eWxlKS5mb3JFYWNoKChrZXkpID0+IHtcbiAgICAgIGNhbnZhcy5zdHlsZVtrZXldID0gc3R5bGVba2V5XTtcbiAgICB9KTtcbiAgICBjYW52YXMud2lkdGggPSBjYW52YXMud2lkdGg7XG4gICAgZGVsZXRlIGNhbnZhc1tFWFBBTkRPX0tFWV07XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgYWRkRXZlbnRMaXN0ZW5lcihjaGFydCwgdHlwZSwgbGlzdGVuZXIpIHtcbiAgICB0aGlzLnJlbW92ZUV2ZW50TGlzdGVuZXIoY2hhcnQsIHR5cGUpO1xuICAgIGNvbnN0IHByb3hpZXMgPSBjaGFydC4kcHJveGllcyB8fCAoY2hhcnQuJHByb3hpZXMgPSB7fSk7XG4gICAgY29uc3QgaGFuZGxlcnMgPSB7XG4gICAgICBhdHRhY2g6IGNyZWF0ZUF0dGFjaE9ic2VydmVyLFxuICAgICAgZGV0YWNoOiBjcmVhdGVEZXRhY2hPYnNlcnZlcixcbiAgICAgIHJlc2l6ZTogY3JlYXRlUmVzaXplT2JzZXJ2ZXJcbiAgICB9O1xuICAgIGNvbnN0IGhhbmRsZXIgPSBoYW5kbGVyc1t0eXBlXSB8fCBjcmVhdGVQcm94eUFuZExpc3RlbjtcbiAgICBwcm94aWVzW3R5cGVdID0gaGFuZGxlcihjaGFydCwgdHlwZSwgbGlzdGVuZXIpO1xuICB9XG4gIHJlbW92ZUV2ZW50TGlzdGVuZXIoY2hhcnQsIHR5cGUpIHtcbiAgICBjb25zdCBwcm94aWVzID0gY2hhcnQuJHByb3hpZXMgfHwgKGNoYXJ0LiRwcm94aWVzID0ge30pO1xuICAgIGNvbnN0IHByb3h5ID0gcHJveGllc1t0eXBlXTtcbiAgICBpZiAoIXByb3h5KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IGhhbmRsZXJzID0ge1xuICAgICAgYXR0YWNoOiByZWxlYXNlT2JzZXJ2ZXIsXG4gICAgICBkZXRhY2g6IHJlbGVhc2VPYnNlcnZlcixcbiAgICAgIHJlc2l6ZTogcmVsZWFzZU9ic2VydmVyXG4gICAgfTtcbiAgICBjb25zdCBoYW5kbGVyID0gaGFuZGxlcnNbdHlwZV0gfHwgcmVtb3ZlTGlzdGVuZXI7XG4gICAgaGFuZGxlcihjaGFydCwgdHlwZSwgcHJveHkpO1xuICAgIHByb3hpZXNbdHlwZV0gPSB1bmRlZmluZWQ7XG4gIH1cbiAgZ2V0RGV2aWNlUGl4ZWxSYXRpbygpIHtcbiAgICByZXR1cm4gd2luZG93LmRldmljZVBpeGVsUmF0aW87XG4gIH1cbiAgZ2V0TWF4aW11bVNpemUoY2FudmFzLCB3aWR0aCwgaGVpZ2h0LCBhc3BlY3RSYXRpbykge1xuICAgIHJldHVybiBnZXRNYXhpbXVtU2l6ZShjYW52YXMsIHdpZHRoLCBoZWlnaHQsIGFzcGVjdFJhdGlvKTtcbiAgfVxuICBpc0F0dGFjaGVkKGNhbnZhcykge1xuICAgIGNvbnN0IGNvbnRhaW5lciA9IF9nZXRQYXJlbnROb2RlKGNhbnZhcyk7XG4gICAgcmV0dXJuICEhKGNvbnRhaW5lciAmJiBjb250YWluZXIuaXNDb25uZWN0ZWQpO1xuICB9XG59XG5cbmZ1bmN0aW9uIF9kZXRlY3RQbGF0Zm9ybShjYW52YXMpIHtcbiAgaWYgKCFfaXNEb21TdXBwb3J0ZWQoKSB8fCAodHlwZW9mIE9mZnNjcmVlbkNhbnZhcyAhPT0gJ3VuZGVmaW5lZCcgJiYgY2FudmFzIGluc3RhbmNlb2YgT2Zmc2NyZWVuQ2FudmFzKSkge1xuICAgIHJldHVybiBCYXNpY1BsYXRmb3JtO1xuICB9XG4gIHJldHVybiBEb21QbGF0Zm9ybTtcbn1cblxuY2xhc3MgRWxlbWVudCB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMueCA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLnkgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5hY3RpdmUgPSBmYWxzZTtcbiAgICB0aGlzLm9wdGlvbnMgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy4kYW5pbWF0aW9ucyA9IHVuZGVmaW5lZDtcbiAgfVxuICB0b29sdGlwUG9zaXRpb24odXNlRmluYWxQb3NpdGlvbikge1xuICAgIGNvbnN0IHt4LCB5fSA9IHRoaXMuZ2V0UHJvcHMoWyd4JywgJ3knXSwgdXNlRmluYWxQb3NpdGlvbik7XG4gICAgcmV0dXJuIHt4LCB5fTtcbiAgfVxuICBoYXNWYWx1ZSgpIHtcbiAgICByZXR1cm4gaXNOdW1iZXIodGhpcy54KSAmJiBpc051bWJlcih0aGlzLnkpO1xuICB9XG4gIGdldFByb3BzKHByb3BzLCBmaW5hbCkge1xuICAgIGNvbnN0IGFuaW1zID0gdGhpcy4kYW5pbWF0aW9ucztcbiAgICBpZiAoIWZpbmFsIHx8ICFhbmltcykge1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIGNvbnN0IHJldCA9IHt9O1xuICAgIHByb3BzLmZvckVhY2gocHJvcCA9PiB7XG4gICAgICByZXRbcHJvcF0gPSBhbmltc1twcm9wXSAmJiBhbmltc1twcm9wXS5hY3RpdmUoKSA/IGFuaW1zW3Byb3BdLl90byA6IHRoaXNbcHJvcF07XG4gICAgfSk7XG4gICAgcmV0dXJuIHJldDtcbiAgfVxufVxuRWxlbWVudC5kZWZhdWx0cyA9IHt9O1xuRWxlbWVudC5kZWZhdWx0Um91dGVzID0gdW5kZWZpbmVkO1xuXG5jb25zdCBmb3JtYXR0ZXJzID0ge1xuICB2YWx1ZXModmFsdWUpIHtcbiAgICByZXR1cm4gaXNBcnJheSh2YWx1ZSkgPyB2YWx1ZSA6ICcnICsgdmFsdWU7XG4gIH0sXG4gIG51bWVyaWModGlja1ZhbHVlLCBpbmRleCwgdGlja3MpIHtcbiAgICBpZiAodGlja1ZhbHVlID09PSAwKSB7XG4gICAgICByZXR1cm4gJzAnO1xuICAgIH1cbiAgICBjb25zdCBsb2NhbGUgPSB0aGlzLmNoYXJ0Lm9wdGlvbnMubG9jYWxlO1xuICAgIGxldCBub3RhdGlvbjtcbiAgICBsZXQgZGVsdGEgPSB0aWNrVmFsdWU7XG4gICAgaWYgKHRpY2tzLmxlbmd0aCA+IDEpIHtcbiAgICAgIGNvbnN0IG1heFRpY2sgPSBNYXRoLm1heChNYXRoLmFicyh0aWNrc1swXS52YWx1ZSksIE1hdGguYWJzKHRpY2tzW3RpY2tzLmxlbmd0aCAtIDFdLnZhbHVlKSk7XG4gICAgICBpZiAobWF4VGljayA8IDFlLTQgfHwgbWF4VGljayA+IDFlKzE1KSB7XG4gICAgICAgIG5vdGF0aW9uID0gJ3NjaWVudGlmaWMnO1xuICAgICAgfVxuICAgICAgZGVsdGEgPSBjYWxjdWxhdGVEZWx0YSh0aWNrVmFsdWUsIHRpY2tzKTtcbiAgICB9XG4gICAgY29uc3QgbG9nRGVsdGEgPSBsb2cxMChNYXRoLmFicyhkZWx0YSkpO1xuICAgIGNvbnN0IG51bURlY2ltYWwgPSBNYXRoLm1heChNYXRoLm1pbigtMSAqIE1hdGguZmxvb3IobG9nRGVsdGEpLCAyMCksIDApO1xuICAgIGNvbnN0IG9wdGlvbnMgPSB7bm90YXRpb24sIG1pbmltdW1GcmFjdGlvbkRpZ2l0czogbnVtRGVjaW1hbCwgbWF4aW11bUZyYWN0aW9uRGlnaXRzOiBudW1EZWNpbWFsfTtcbiAgICBPYmplY3QuYXNzaWduKG9wdGlvbnMsIHRoaXMub3B0aW9ucy50aWNrcy5mb3JtYXQpO1xuICAgIHJldHVybiBmb3JtYXROdW1iZXIodGlja1ZhbHVlLCBsb2NhbGUsIG9wdGlvbnMpO1xuICB9LFxuICBsb2dhcml0aG1pYyh0aWNrVmFsdWUsIGluZGV4LCB0aWNrcykge1xuICAgIGlmICh0aWNrVmFsdWUgPT09IDApIHtcbiAgICAgIHJldHVybiAnMCc7XG4gICAgfVxuICAgIGNvbnN0IHJlbWFpbiA9IHRpY2tWYWx1ZSAvIChNYXRoLnBvdygxMCwgTWF0aC5mbG9vcihsb2cxMCh0aWNrVmFsdWUpKSkpO1xuICAgIGlmIChyZW1haW4gPT09IDEgfHwgcmVtYWluID09PSAyIHx8IHJlbWFpbiA9PT0gNSkge1xuICAgICAgcmV0dXJuIGZvcm1hdHRlcnMubnVtZXJpYy5jYWxsKHRoaXMsIHRpY2tWYWx1ZSwgaW5kZXgsIHRpY2tzKTtcbiAgICB9XG4gICAgcmV0dXJuICcnO1xuICB9XG59O1xuZnVuY3Rpb24gY2FsY3VsYXRlRGVsdGEodGlja1ZhbHVlLCB0aWNrcykge1xuICBsZXQgZGVsdGEgPSB0aWNrcy5sZW5ndGggPiAzID8gdGlja3NbMl0udmFsdWUgLSB0aWNrc1sxXS52YWx1ZSA6IHRpY2tzWzFdLnZhbHVlIC0gdGlja3NbMF0udmFsdWU7XG4gIGlmIChNYXRoLmFicyhkZWx0YSkgPj0gMSAmJiB0aWNrVmFsdWUgIT09IE1hdGguZmxvb3IodGlja1ZhbHVlKSkge1xuICAgIGRlbHRhID0gdGlja1ZhbHVlIC0gTWF0aC5mbG9vcih0aWNrVmFsdWUpO1xuICB9XG4gIHJldHVybiBkZWx0YTtcbn1cbnZhciBUaWNrcyA9IHtmb3JtYXR0ZXJzfTtcblxuZGVmYXVsdHMuc2V0KCdzY2FsZScsIHtcbiAgZGlzcGxheTogdHJ1ZSxcbiAgb2Zmc2V0OiBmYWxzZSxcbiAgcmV2ZXJzZTogZmFsc2UsXG4gIGJlZ2luQXRaZXJvOiBmYWxzZSxcbiAgYm91bmRzOiAndGlja3MnLFxuICBncmFjZTogMCxcbiAgZ3JpZDoge1xuICAgIGRpc3BsYXk6IHRydWUsXG4gICAgbGluZVdpZHRoOiAxLFxuICAgIGRyYXdCb3JkZXI6IHRydWUsXG4gICAgZHJhd09uQ2hhcnRBcmVhOiB0cnVlLFxuICAgIGRyYXdUaWNrczogdHJ1ZSxcbiAgICB0aWNrTGVuZ3RoOiA4LFxuICAgIHRpY2tXaWR0aDogKF9jdHgsIG9wdGlvbnMpID0+IG9wdGlvbnMubGluZVdpZHRoLFxuICAgIHRpY2tDb2xvcjogKF9jdHgsIG9wdGlvbnMpID0+IG9wdGlvbnMuY29sb3IsXG4gICAgb2Zmc2V0OiBmYWxzZSxcbiAgICBib3JkZXJEYXNoOiBbXSxcbiAgICBib3JkZXJEYXNoT2Zmc2V0OiAwLjAsXG4gICAgYm9yZGVyV2lkdGg6IDFcbiAgfSxcbiAgdGl0bGU6IHtcbiAgICBkaXNwbGF5OiBmYWxzZSxcbiAgICB0ZXh0OiAnJyxcbiAgICBwYWRkaW5nOiB7XG4gICAgICB0b3A6IDQsXG4gICAgICBib3R0b206IDRcbiAgICB9XG4gIH0sXG4gIHRpY2tzOiB7XG4gICAgbWluUm90YXRpb246IDAsXG4gICAgbWF4Um90YXRpb246IDUwLFxuICAgIG1pcnJvcjogZmFsc2UsXG4gICAgdGV4dFN0cm9rZVdpZHRoOiAwLFxuICAgIHRleHRTdHJva2VDb2xvcjogJycsXG4gICAgcGFkZGluZzogMyxcbiAgICBkaXNwbGF5OiB0cnVlLFxuICAgIGF1dG9Ta2lwOiB0cnVlLFxuICAgIGF1dG9Ta2lwUGFkZGluZzogMyxcbiAgICBsYWJlbE9mZnNldDogMCxcbiAgICBjYWxsYmFjazogVGlja3MuZm9ybWF0dGVycy52YWx1ZXMsXG4gICAgbWlub3I6IHt9LFxuICAgIG1ham9yOiB7fSxcbiAgICBhbGlnbjogJ2NlbnRlcicsXG4gICAgY3Jvc3NBbGlnbjogJ25lYXInLFxuICAgIHNob3dMYWJlbEJhY2tkcm9wOiBmYWxzZSxcbiAgICBiYWNrZHJvcENvbG9yOiAncmdiYSgyNTUsIDI1NSwgMjU1LCAwLjc1KScsXG4gICAgYmFja2Ryb3BQYWRkaW5nOiAyLFxuICB9XG59KTtcbmRlZmF1bHRzLnJvdXRlKCdzY2FsZS50aWNrcycsICdjb2xvcicsICcnLCAnY29sb3InKTtcbmRlZmF1bHRzLnJvdXRlKCdzY2FsZS5ncmlkJywgJ2NvbG9yJywgJycsICdib3JkZXJDb2xvcicpO1xuZGVmYXVsdHMucm91dGUoJ3NjYWxlLmdyaWQnLCAnYm9yZGVyQ29sb3InLCAnJywgJ2JvcmRlckNvbG9yJyk7XG5kZWZhdWx0cy5yb3V0ZSgnc2NhbGUudGl0bGUnLCAnY29sb3InLCAnJywgJ2NvbG9yJyk7XG5kZWZhdWx0cy5kZXNjcmliZSgnc2NhbGUnLCB7XG4gIF9mYWxsYmFjazogZmFsc2UsXG4gIF9zY3JpcHRhYmxlOiAobmFtZSkgPT4gIW5hbWUuc3RhcnRzV2l0aCgnYmVmb3JlJykgJiYgIW5hbWUuc3RhcnRzV2l0aCgnYWZ0ZXInKSAmJiBuYW1lICE9PSAnY2FsbGJhY2snICYmIG5hbWUgIT09ICdwYXJzZXInLFxuICBfaW5kZXhhYmxlOiAobmFtZSkgPT4gbmFtZSAhPT0gJ2JvcmRlckRhc2gnICYmIG5hbWUgIT09ICd0aWNrQm9yZGVyRGFzaCcsXG59KTtcbmRlZmF1bHRzLmRlc2NyaWJlKCdzY2FsZXMnLCB7XG4gIF9mYWxsYmFjazogJ3NjYWxlJyxcbn0pO1xuZGVmYXVsdHMuZGVzY3JpYmUoJ3NjYWxlLnRpY2tzJywge1xuICBfc2NyaXB0YWJsZTogKG5hbWUpID0+IG5hbWUgIT09ICdiYWNrZHJvcFBhZGRpbmcnICYmIG5hbWUgIT09ICdjYWxsYmFjaycsXG4gIF9pbmRleGFibGU6IChuYW1lKSA9PiBuYW1lICE9PSAnYmFja2Ryb3BQYWRkaW5nJyxcbn0pO1xuXG5mdW5jdGlvbiBhdXRvU2tpcChzY2FsZSwgdGlja3MpIHtcbiAgY29uc3QgdGlja09wdHMgPSBzY2FsZS5vcHRpb25zLnRpY2tzO1xuICBjb25zdCB0aWNrc0xpbWl0ID0gdGlja09wdHMubWF4VGlja3NMaW1pdCB8fCBkZXRlcm1pbmVNYXhUaWNrcyhzY2FsZSk7XG4gIGNvbnN0IG1ham9ySW5kaWNlcyA9IHRpY2tPcHRzLm1ham9yLmVuYWJsZWQgPyBnZXRNYWpvckluZGljZXModGlja3MpIDogW107XG4gIGNvbnN0IG51bU1ham9ySW5kaWNlcyA9IG1ham9ySW5kaWNlcy5sZW5ndGg7XG4gIGNvbnN0IGZpcnN0ID0gbWFqb3JJbmRpY2VzWzBdO1xuICBjb25zdCBsYXN0ID0gbWFqb3JJbmRpY2VzW251bU1ham9ySW5kaWNlcyAtIDFdO1xuICBjb25zdCBuZXdUaWNrcyA9IFtdO1xuICBpZiAobnVtTWFqb3JJbmRpY2VzID4gdGlja3NMaW1pdCkge1xuICAgIHNraXBNYWpvcnModGlja3MsIG5ld1RpY2tzLCBtYWpvckluZGljZXMsIG51bU1ham9ySW5kaWNlcyAvIHRpY2tzTGltaXQpO1xuICAgIHJldHVybiBuZXdUaWNrcztcbiAgfVxuICBjb25zdCBzcGFjaW5nID0gY2FsY3VsYXRlU3BhY2luZyhtYWpvckluZGljZXMsIHRpY2tzLCB0aWNrc0xpbWl0KTtcbiAgaWYgKG51bU1ham9ySW5kaWNlcyA+IDApIHtcbiAgICBsZXQgaSwgaWxlbjtcbiAgICBjb25zdCBhdmdNYWpvclNwYWNpbmcgPSBudW1NYWpvckluZGljZXMgPiAxID8gTWF0aC5yb3VuZCgobGFzdCAtIGZpcnN0KSAvIChudW1NYWpvckluZGljZXMgLSAxKSkgOiBudWxsO1xuICAgIHNraXAodGlja3MsIG5ld1RpY2tzLCBzcGFjaW5nLCBpc051bGxPclVuZGVmKGF2Z01ham9yU3BhY2luZykgPyAwIDogZmlyc3QgLSBhdmdNYWpvclNwYWNpbmcsIGZpcnN0KTtcbiAgICBmb3IgKGkgPSAwLCBpbGVuID0gbnVtTWFqb3JJbmRpY2VzIC0gMTsgaSA8IGlsZW47IGkrKykge1xuICAgICAgc2tpcCh0aWNrcywgbmV3VGlja3MsIHNwYWNpbmcsIG1ham9ySW5kaWNlc1tpXSwgbWFqb3JJbmRpY2VzW2kgKyAxXSk7XG4gICAgfVxuICAgIHNraXAodGlja3MsIG5ld1RpY2tzLCBzcGFjaW5nLCBsYXN0LCBpc051bGxPclVuZGVmKGF2Z01ham9yU3BhY2luZykgPyB0aWNrcy5sZW5ndGggOiBsYXN0ICsgYXZnTWFqb3JTcGFjaW5nKTtcbiAgICByZXR1cm4gbmV3VGlja3M7XG4gIH1cbiAgc2tpcCh0aWNrcywgbmV3VGlja3MsIHNwYWNpbmcpO1xuICByZXR1cm4gbmV3VGlja3M7XG59XG5mdW5jdGlvbiBkZXRlcm1pbmVNYXhUaWNrcyhzY2FsZSkge1xuICBjb25zdCBvZmZzZXQgPSBzY2FsZS5vcHRpb25zLm9mZnNldDtcbiAgY29uc3QgdGlja0xlbmd0aCA9IHNjYWxlLl90aWNrU2l6ZSgpO1xuICBjb25zdCBtYXhTY2FsZSA9IHNjYWxlLl9sZW5ndGggLyB0aWNrTGVuZ3RoICsgKG9mZnNldCA/IDAgOiAxKTtcbiAgY29uc3QgbWF4Q2hhcnQgPSBzY2FsZS5fbWF4TGVuZ3RoIC8gdGlja0xlbmd0aDtcbiAgcmV0dXJuIE1hdGguZmxvb3IoTWF0aC5taW4obWF4U2NhbGUsIG1heENoYXJ0KSk7XG59XG5mdW5jdGlvbiBjYWxjdWxhdGVTcGFjaW5nKG1ham9ySW5kaWNlcywgdGlja3MsIHRpY2tzTGltaXQpIHtcbiAgY29uc3QgZXZlbk1ham9yU3BhY2luZyA9IGdldEV2ZW5TcGFjaW5nKG1ham9ySW5kaWNlcyk7XG4gIGNvbnN0IHNwYWNpbmcgPSB0aWNrcy5sZW5ndGggLyB0aWNrc0xpbWl0O1xuICBpZiAoIWV2ZW5NYWpvclNwYWNpbmcpIHtcbiAgICByZXR1cm4gTWF0aC5tYXgoc3BhY2luZywgMSk7XG4gIH1cbiAgY29uc3QgZmFjdG9ycyA9IF9mYWN0b3JpemUoZXZlbk1ham9yU3BhY2luZyk7XG4gIGZvciAobGV0IGkgPSAwLCBpbGVuID0gZmFjdG9ycy5sZW5ndGggLSAxOyBpIDwgaWxlbjsgaSsrKSB7XG4gICAgY29uc3QgZmFjdG9yID0gZmFjdG9yc1tpXTtcbiAgICBpZiAoZmFjdG9yID4gc3BhY2luZykge1xuICAgICAgcmV0dXJuIGZhY3RvcjtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIE1hdGgubWF4KHNwYWNpbmcsIDEpO1xufVxuZnVuY3Rpb24gZ2V0TWFqb3JJbmRpY2VzKHRpY2tzKSB7XG4gIGNvbnN0IHJlc3VsdCA9IFtdO1xuICBsZXQgaSwgaWxlbjtcbiAgZm9yIChpID0gMCwgaWxlbiA9IHRpY2tzLmxlbmd0aDsgaSA8IGlsZW47IGkrKykge1xuICAgIGlmICh0aWNrc1tpXS5tYWpvcikge1xuICAgICAgcmVzdWx0LnB1c2goaSk7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5mdW5jdGlvbiBza2lwTWFqb3JzKHRpY2tzLCBuZXdUaWNrcywgbWFqb3JJbmRpY2VzLCBzcGFjaW5nKSB7XG4gIGxldCBjb3VudCA9IDA7XG4gIGxldCBuZXh0ID0gbWFqb3JJbmRpY2VzWzBdO1xuICBsZXQgaTtcbiAgc3BhY2luZyA9IE1hdGguY2VpbChzcGFjaW5nKTtcbiAgZm9yIChpID0gMDsgaSA8IHRpY2tzLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKGkgPT09IG5leHQpIHtcbiAgICAgIG5ld1RpY2tzLnB1c2godGlja3NbaV0pO1xuICAgICAgY291bnQrKztcbiAgICAgIG5leHQgPSBtYWpvckluZGljZXNbY291bnQgKiBzcGFjaW5nXTtcbiAgICB9XG4gIH1cbn1cbmZ1bmN0aW9uIHNraXAodGlja3MsIG5ld1RpY2tzLCBzcGFjaW5nLCBtYWpvclN0YXJ0LCBtYWpvckVuZCkge1xuICBjb25zdCBzdGFydCA9IHZhbHVlT3JEZWZhdWx0KG1ham9yU3RhcnQsIDApO1xuICBjb25zdCBlbmQgPSBNYXRoLm1pbih2YWx1ZU9yRGVmYXVsdChtYWpvckVuZCwgdGlja3MubGVuZ3RoKSwgdGlja3MubGVuZ3RoKTtcbiAgbGV0IGNvdW50ID0gMDtcbiAgbGV0IGxlbmd0aCwgaSwgbmV4dDtcbiAgc3BhY2luZyA9IE1hdGguY2VpbChzcGFjaW5nKTtcbiAgaWYgKG1ham9yRW5kKSB7XG4gICAgbGVuZ3RoID0gbWFqb3JFbmQgLSBtYWpvclN0YXJ0O1xuICAgIHNwYWNpbmcgPSBsZW5ndGggLyBNYXRoLmZsb29yKGxlbmd0aCAvIHNwYWNpbmcpO1xuICB9XG4gIG5leHQgPSBzdGFydDtcbiAgd2hpbGUgKG5leHQgPCAwKSB7XG4gICAgY291bnQrKztcbiAgICBuZXh0ID0gTWF0aC5yb3VuZChzdGFydCArIGNvdW50ICogc3BhY2luZyk7XG4gIH1cbiAgZm9yIChpID0gTWF0aC5tYXgoc3RhcnQsIDApOyBpIDwgZW5kOyBpKyspIHtcbiAgICBpZiAoaSA9PT0gbmV4dCkge1xuICAgICAgbmV3VGlja3MucHVzaCh0aWNrc1tpXSk7XG4gICAgICBjb3VudCsrO1xuICAgICAgbmV4dCA9IE1hdGgucm91bmQoc3RhcnQgKyBjb3VudCAqIHNwYWNpbmcpO1xuICAgIH1cbiAgfVxufVxuZnVuY3Rpb24gZ2V0RXZlblNwYWNpbmcoYXJyKSB7XG4gIGNvbnN0IGxlbiA9IGFyci5sZW5ndGg7XG4gIGxldCBpLCBkaWZmO1xuICBpZiAobGVuIDwgMikge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBmb3IgKGRpZmYgPSBhcnJbMF0sIGkgPSAxOyBpIDwgbGVuOyArK2kpIHtcbiAgICBpZiAoYXJyW2ldIC0gYXJyW2kgLSAxXSAhPT0gZGlmZikge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gZGlmZjtcbn1cblxuY29uc3QgcmV2ZXJzZUFsaWduID0gKGFsaWduKSA9PiBhbGlnbiA9PT0gJ2xlZnQnID8gJ3JpZ2h0JyA6IGFsaWduID09PSAncmlnaHQnID8gJ2xlZnQnIDogYWxpZ247XG5jb25zdCBvZmZzZXRGcm9tRWRnZSA9IChzY2FsZSwgZWRnZSwgb2Zmc2V0KSA9PiBlZGdlID09PSAndG9wJyB8fCBlZGdlID09PSAnbGVmdCcgPyBzY2FsZVtlZGdlXSArIG9mZnNldCA6IHNjYWxlW2VkZ2VdIC0gb2Zmc2V0O1xuZnVuY3Rpb24gc2FtcGxlKGFyciwgbnVtSXRlbXMpIHtcbiAgY29uc3QgcmVzdWx0ID0gW107XG4gIGNvbnN0IGluY3JlbWVudCA9IGFyci5sZW5ndGggLyBudW1JdGVtcztcbiAgY29uc3QgbGVuID0gYXJyLmxlbmd0aDtcbiAgbGV0IGkgPSAwO1xuICBmb3IgKDsgaSA8IGxlbjsgaSArPSBpbmNyZW1lbnQpIHtcbiAgICByZXN1bHQucHVzaChhcnJbTWF0aC5mbG9vcihpKV0pO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5mdW5jdGlvbiBnZXRQaXhlbEZvckdyaWRMaW5lKHNjYWxlLCBpbmRleCwgb2Zmc2V0R3JpZExpbmVzKSB7XG4gIGNvbnN0IGxlbmd0aCA9IHNjYWxlLnRpY2tzLmxlbmd0aDtcbiAgY29uc3QgdmFsaWRJbmRleCA9IE1hdGgubWluKGluZGV4LCBsZW5ndGggLSAxKTtcbiAgY29uc3Qgc3RhcnQgPSBzY2FsZS5fc3RhcnRQaXhlbDtcbiAgY29uc3QgZW5kID0gc2NhbGUuX2VuZFBpeGVsO1xuICBjb25zdCBlcHNpbG9uID0gMWUtNjtcbiAgbGV0IGxpbmVWYWx1ZSA9IHNjYWxlLmdldFBpeGVsRm9yVGljayh2YWxpZEluZGV4KTtcbiAgbGV0IG9mZnNldDtcbiAgaWYgKG9mZnNldEdyaWRMaW5lcykge1xuICAgIGlmIChsZW5ndGggPT09IDEpIHtcbiAgICAgIG9mZnNldCA9IE1hdGgubWF4KGxpbmVWYWx1ZSAtIHN0YXJ0LCBlbmQgLSBsaW5lVmFsdWUpO1xuICAgIH0gZWxzZSBpZiAoaW5kZXggPT09IDApIHtcbiAgICAgIG9mZnNldCA9IChzY2FsZS5nZXRQaXhlbEZvclRpY2soMSkgLSBsaW5lVmFsdWUpIC8gMjtcbiAgICB9IGVsc2Uge1xuICAgICAgb2Zmc2V0ID0gKGxpbmVWYWx1ZSAtIHNjYWxlLmdldFBpeGVsRm9yVGljayh2YWxpZEluZGV4IC0gMSkpIC8gMjtcbiAgICB9XG4gICAgbGluZVZhbHVlICs9IHZhbGlkSW5kZXggPCBpbmRleCA/IG9mZnNldCA6IC1vZmZzZXQ7XG4gICAgaWYgKGxpbmVWYWx1ZSA8IHN0YXJ0IC0gZXBzaWxvbiB8fCBsaW5lVmFsdWUgPiBlbmQgKyBlcHNpbG9uKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICB9XG4gIHJldHVybiBsaW5lVmFsdWU7XG59XG5mdW5jdGlvbiBnYXJiYWdlQ29sbGVjdChjYWNoZXMsIGxlbmd0aCkge1xuICBlYWNoKGNhY2hlcywgKGNhY2hlKSA9PiB7XG4gICAgY29uc3QgZ2MgPSBjYWNoZS5nYztcbiAgICBjb25zdCBnY0xlbiA9IGdjLmxlbmd0aCAvIDI7XG4gICAgbGV0IGk7XG4gICAgaWYgKGdjTGVuID4gbGVuZ3RoKSB7XG4gICAgICBmb3IgKGkgPSAwOyBpIDwgZ2NMZW47ICsraSkge1xuICAgICAgICBkZWxldGUgY2FjaGUuZGF0YVtnY1tpXV07XG4gICAgICB9XG4gICAgICBnYy5zcGxpY2UoMCwgZ2NMZW4pO1xuICAgIH1cbiAgfSk7XG59XG5mdW5jdGlvbiBnZXRUaWNrTWFya0xlbmd0aChvcHRpb25zKSB7XG4gIHJldHVybiBvcHRpb25zLmRyYXdUaWNrcyA/IG9wdGlvbnMudGlja0xlbmd0aCA6IDA7XG59XG5mdW5jdGlvbiBnZXRUaXRsZUhlaWdodChvcHRpb25zLCBmYWxsYmFjaykge1xuICBpZiAoIW9wdGlvbnMuZGlzcGxheSkge1xuICAgIHJldHVybiAwO1xuICB9XG4gIGNvbnN0IGZvbnQgPSB0b0ZvbnQob3B0aW9ucy5mb250LCBmYWxsYmFjayk7XG4gIGNvbnN0IHBhZGRpbmcgPSB0b1BhZGRpbmcob3B0aW9ucy5wYWRkaW5nKTtcbiAgY29uc3QgbGluZXMgPSBpc0FycmF5KG9wdGlvbnMudGV4dCkgPyBvcHRpb25zLnRleHQubGVuZ3RoIDogMTtcbiAgcmV0dXJuIChsaW5lcyAqIGZvbnQubGluZUhlaWdodCkgKyBwYWRkaW5nLmhlaWdodDtcbn1cbmZ1bmN0aW9uIGNyZWF0ZVNjYWxlQ29udGV4dChwYXJlbnQsIHNjYWxlKSB7XG4gIHJldHVybiBjcmVhdGVDb250ZXh0KHBhcmVudCwge1xuICAgIHNjYWxlLFxuICAgIHR5cGU6ICdzY2FsZSdcbiAgfSk7XG59XG5mdW5jdGlvbiBjcmVhdGVUaWNrQ29udGV4dChwYXJlbnQsIGluZGV4LCB0aWNrKSB7XG4gIHJldHVybiBjcmVhdGVDb250ZXh0KHBhcmVudCwge1xuICAgIHRpY2ssXG4gICAgaW5kZXgsXG4gICAgdHlwZTogJ3RpY2snXG4gIH0pO1xufVxuZnVuY3Rpb24gdGl0bGVBbGlnbihhbGlnbiwgcG9zaXRpb24sIHJldmVyc2UpIHtcbiAgbGV0IHJldCA9IF90b0xlZnRSaWdodENlbnRlcihhbGlnbik7XG4gIGlmICgocmV2ZXJzZSAmJiBwb3NpdGlvbiAhPT0gJ3JpZ2h0JykgfHwgKCFyZXZlcnNlICYmIHBvc2l0aW9uID09PSAncmlnaHQnKSkge1xuICAgIHJldCA9IHJldmVyc2VBbGlnbihyZXQpO1xuICB9XG4gIHJldHVybiByZXQ7XG59XG5mdW5jdGlvbiB0aXRsZUFyZ3Moc2NhbGUsIG9mZnNldCwgcG9zaXRpb24sIGFsaWduKSB7XG4gIGNvbnN0IHt0b3AsIGxlZnQsIGJvdHRvbSwgcmlnaHQsIGNoYXJ0fSA9IHNjYWxlO1xuICBjb25zdCB7Y2hhcnRBcmVhLCBzY2FsZXN9ID0gY2hhcnQ7XG4gIGxldCByb3RhdGlvbiA9IDA7XG4gIGxldCBtYXhXaWR0aCwgdGl0bGVYLCB0aXRsZVk7XG4gIGNvbnN0IGhlaWdodCA9IGJvdHRvbSAtIHRvcDtcbiAgY29uc3Qgd2lkdGggPSByaWdodCAtIGxlZnQ7XG4gIGlmIChzY2FsZS5pc0hvcml6b250YWwoKSkge1xuICAgIHRpdGxlWCA9IF9hbGlnblN0YXJ0RW5kKGFsaWduLCBsZWZ0LCByaWdodCk7XG4gICAgaWYgKGlzT2JqZWN0KHBvc2l0aW9uKSkge1xuICAgICAgY29uc3QgcG9zaXRpb25BeGlzSUQgPSBPYmplY3Qua2V5cyhwb3NpdGlvbilbMF07XG4gICAgICBjb25zdCB2YWx1ZSA9IHBvc2l0aW9uW3Bvc2l0aW9uQXhpc0lEXTtcbiAgICAgIHRpdGxlWSA9IHNjYWxlc1twb3NpdGlvbkF4aXNJRF0uZ2V0UGl4ZWxGb3JWYWx1ZSh2YWx1ZSkgKyBoZWlnaHQgLSBvZmZzZXQ7XG4gICAgfSBlbHNlIGlmIChwb3NpdGlvbiA9PT0gJ2NlbnRlcicpIHtcbiAgICAgIHRpdGxlWSA9IChjaGFydEFyZWEuYm90dG9tICsgY2hhcnRBcmVhLnRvcCkgLyAyICsgaGVpZ2h0IC0gb2Zmc2V0O1xuICAgIH0gZWxzZSB7XG4gICAgICB0aXRsZVkgPSBvZmZzZXRGcm9tRWRnZShzY2FsZSwgcG9zaXRpb24sIG9mZnNldCk7XG4gICAgfVxuICAgIG1heFdpZHRoID0gcmlnaHQgLSBsZWZ0O1xuICB9IGVsc2Uge1xuICAgIGlmIChpc09iamVjdChwb3NpdGlvbikpIHtcbiAgICAgIGNvbnN0IHBvc2l0aW9uQXhpc0lEID0gT2JqZWN0LmtleXMocG9zaXRpb24pWzBdO1xuICAgICAgY29uc3QgdmFsdWUgPSBwb3NpdGlvbltwb3NpdGlvbkF4aXNJRF07XG4gICAgICB0aXRsZVggPSBzY2FsZXNbcG9zaXRpb25BeGlzSURdLmdldFBpeGVsRm9yVmFsdWUodmFsdWUpIC0gd2lkdGggKyBvZmZzZXQ7XG4gICAgfSBlbHNlIGlmIChwb3NpdGlvbiA9PT0gJ2NlbnRlcicpIHtcbiAgICAgIHRpdGxlWCA9IChjaGFydEFyZWEubGVmdCArIGNoYXJ0QXJlYS5yaWdodCkgLyAyIC0gd2lkdGggKyBvZmZzZXQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRpdGxlWCA9IG9mZnNldEZyb21FZGdlKHNjYWxlLCBwb3NpdGlvbiwgb2Zmc2V0KTtcbiAgICB9XG4gICAgdGl0bGVZID0gX2FsaWduU3RhcnRFbmQoYWxpZ24sIGJvdHRvbSwgdG9wKTtcbiAgICByb3RhdGlvbiA9IHBvc2l0aW9uID09PSAnbGVmdCcgPyAtSEFMRl9QSSA6IEhBTEZfUEk7XG4gIH1cbiAgcmV0dXJuIHt0aXRsZVgsIHRpdGxlWSwgbWF4V2lkdGgsIHJvdGF0aW9ufTtcbn1cbmNsYXNzIFNjYWxlIGV4dGVuZHMgRWxlbWVudCB7XG4gIGNvbnN0cnVjdG9yKGNmZykge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5pZCA9IGNmZy5pZDtcbiAgICB0aGlzLnR5cGUgPSBjZmcudHlwZTtcbiAgICB0aGlzLm9wdGlvbnMgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5jdHggPSBjZmcuY3R4O1xuICAgIHRoaXMuY2hhcnQgPSBjZmcuY2hhcnQ7XG4gICAgdGhpcy50b3AgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5ib3R0b20gPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5sZWZ0ID0gdW5kZWZpbmVkO1xuICAgIHRoaXMucmlnaHQgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy53aWR0aCA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLmhlaWdodCA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLl9tYXJnaW5zID0ge1xuICAgICAgbGVmdDogMCxcbiAgICAgIHJpZ2h0OiAwLFxuICAgICAgdG9wOiAwLFxuICAgICAgYm90dG9tOiAwXG4gICAgfTtcbiAgICB0aGlzLm1heFdpZHRoID0gdW5kZWZpbmVkO1xuICAgIHRoaXMubWF4SGVpZ2h0ID0gdW5kZWZpbmVkO1xuICAgIHRoaXMucGFkZGluZ1RvcCA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLnBhZGRpbmdCb3R0b20gPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5wYWRkaW5nTGVmdCA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLnBhZGRpbmdSaWdodCA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLmF4aXMgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5sYWJlbFJvdGF0aW9uID0gdW5kZWZpbmVkO1xuICAgIHRoaXMubWluID0gdW5kZWZpbmVkO1xuICAgIHRoaXMubWF4ID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuX3JhbmdlID0gdW5kZWZpbmVkO1xuICAgIHRoaXMudGlja3MgPSBbXTtcbiAgICB0aGlzLl9ncmlkTGluZUl0ZW1zID0gbnVsbDtcbiAgICB0aGlzLl9sYWJlbEl0ZW1zID0gbnVsbDtcbiAgICB0aGlzLl9sYWJlbFNpemVzID0gbnVsbDtcbiAgICB0aGlzLl9sZW5ndGggPSAwO1xuICAgIHRoaXMuX21heExlbmd0aCA9IDA7XG4gICAgdGhpcy5fbG9uZ2VzdFRleHRDYWNoZSA9IHt9O1xuICAgIHRoaXMuX3N0YXJ0UGl4ZWwgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5fZW5kUGl4ZWwgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5fcmV2ZXJzZVBpeGVscyA9IGZhbHNlO1xuICAgIHRoaXMuX3VzZXJNYXggPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5fdXNlck1pbiA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLl9zdWdnZXN0ZWRNYXggPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5fc3VnZ2VzdGVkTWluID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuX3RpY2tzTGVuZ3RoID0gMDtcbiAgICB0aGlzLl9ib3JkZXJWYWx1ZSA9IDA7XG4gICAgdGhpcy5fY2FjaGUgPSB7fTtcbiAgICB0aGlzLl9kYXRhTGltaXRzQ2FjaGVkID0gZmFsc2U7XG4gICAgdGhpcy4kY29udGV4dCA9IHVuZGVmaW5lZDtcbiAgfVxuICBpbml0KG9wdGlvbnMpIHtcbiAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zLnNldENvbnRleHQodGhpcy5nZXRDb250ZXh0KCkpO1xuICAgIHRoaXMuYXhpcyA9IG9wdGlvbnMuYXhpcztcbiAgICB0aGlzLl91c2VyTWluID0gdGhpcy5wYXJzZShvcHRpb25zLm1pbik7XG4gICAgdGhpcy5fdXNlck1heCA9IHRoaXMucGFyc2Uob3B0aW9ucy5tYXgpO1xuICAgIHRoaXMuX3N1Z2dlc3RlZE1pbiA9IHRoaXMucGFyc2Uob3B0aW9ucy5zdWdnZXN0ZWRNaW4pO1xuICAgIHRoaXMuX3N1Z2dlc3RlZE1heCA9IHRoaXMucGFyc2Uob3B0aW9ucy5zdWdnZXN0ZWRNYXgpO1xuICB9XG4gIHBhcnNlKHJhdywgaW5kZXgpIHtcbiAgICByZXR1cm4gcmF3O1xuICB9XG4gIGdldFVzZXJCb3VuZHMoKSB7XG4gICAgbGV0IHtfdXNlck1pbiwgX3VzZXJNYXgsIF9zdWdnZXN0ZWRNaW4sIF9zdWdnZXN0ZWRNYXh9ID0gdGhpcztcbiAgICBfdXNlck1pbiA9IGZpbml0ZU9yRGVmYXVsdChfdXNlck1pbiwgTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZKTtcbiAgICBfdXNlck1heCA9IGZpbml0ZU9yRGVmYXVsdChfdXNlck1heCwgTnVtYmVyLk5FR0FUSVZFX0lORklOSVRZKTtcbiAgICBfc3VnZ2VzdGVkTWluID0gZmluaXRlT3JEZWZhdWx0KF9zdWdnZXN0ZWRNaW4sIE51bWJlci5QT1NJVElWRV9JTkZJTklUWSk7XG4gICAgX3N1Z2dlc3RlZE1heCA9IGZpbml0ZU9yRGVmYXVsdChfc3VnZ2VzdGVkTWF4LCBOdW1iZXIuTkVHQVRJVkVfSU5GSU5JVFkpO1xuICAgIHJldHVybiB7XG4gICAgICBtaW46IGZpbml0ZU9yRGVmYXVsdChfdXNlck1pbiwgX3N1Z2dlc3RlZE1pbiksXG4gICAgICBtYXg6IGZpbml0ZU9yRGVmYXVsdChfdXNlck1heCwgX3N1Z2dlc3RlZE1heCksXG4gICAgICBtaW5EZWZpbmVkOiBpc051bWJlckZpbml0ZShfdXNlck1pbiksXG4gICAgICBtYXhEZWZpbmVkOiBpc051bWJlckZpbml0ZShfdXNlck1heClcbiAgICB9O1xuICB9XG4gIGdldE1pbk1heChjYW5TdGFjaykge1xuICAgIGxldCB7bWluLCBtYXgsIG1pbkRlZmluZWQsIG1heERlZmluZWR9ID0gdGhpcy5nZXRVc2VyQm91bmRzKCk7XG4gICAgbGV0IHJhbmdlO1xuICAgIGlmIChtaW5EZWZpbmVkICYmIG1heERlZmluZWQpIHtcbiAgICAgIHJldHVybiB7bWluLCBtYXh9O1xuICAgIH1cbiAgICBjb25zdCBtZXRhcyA9IHRoaXMuZ2V0TWF0Y2hpbmdWaXNpYmxlTWV0YXMoKTtcbiAgICBmb3IgKGxldCBpID0gMCwgaWxlbiA9IG1ldGFzLmxlbmd0aDsgaSA8IGlsZW47ICsraSkge1xuICAgICAgcmFuZ2UgPSBtZXRhc1tpXS5jb250cm9sbGVyLmdldE1pbk1heCh0aGlzLCBjYW5TdGFjayk7XG4gICAgICBpZiAoIW1pbkRlZmluZWQpIHtcbiAgICAgICAgbWluID0gTWF0aC5taW4obWluLCByYW5nZS5taW4pO1xuICAgICAgfVxuICAgICAgaWYgKCFtYXhEZWZpbmVkKSB7XG4gICAgICAgIG1heCA9IE1hdGgubWF4KG1heCwgcmFuZ2UubWF4KTtcbiAgICAgIH1cbiAgICB9XG4gICAgbWluID0gbWF4RGVmaW5lZCAmJiBtaW4gPiBtYXggPyBtYXggOiBtaW47XG4gICAgbWF4ID0gbWluRGVmaW5lZCAmJiBtaW4gPiBtYXggPyBtaW4gOiBtYXg7XG4gICAgcmV0dXJuIHtcbiAgICAgIG1pbjogZmluaXRlT3JEZWZhdWx0KG1pbiwgZmluaXRlT3JEZWZhdWx0KG1heCwgbWluKSksXG4gICAgICBtYXg6IGZpbml0ZU9yRGVmYXVsdChtYXgsIGZpbml0ZU9yRGVmYXVsdChtaW4sIG1heCkpXG4gICAgfTtcbiAgfVxuICBnZXRQYWRkaW5nKCkge1xuICAgIHJldHVybiB7XG4gICAgICBsZWZ0OiB0aGlzLnBhZGRpbmdMZWZ0IHx8IDAsXG4gICAgICB0b3A6IHRoaXMucGFkZGluZ1RvcCB8fCAwLFxuICAgICAgcmlnaHQ6IHRoaXMucGFkZGluZ1JpZ2h0IHx8IDAsXG4gICAgICBib3R0b206IHRoaXMucGFkZGluZ0JvdHRvbSB8fCAwXG4gICAgfTtcbiAgfVxuICBnZXRUaWNrcygpIHtcbiAgICByZXR1cm4gdGhpcy50aWNrcztcbiAgfVxuICBnZXRMYWJlbHMoKSB7XG4gICAgY29uc3QgZGF0YSA9IHRoaXMuY2hhcnQuZGF0YTtcbiAgICByZXR1cm4gdGhpcy5vcHRpb25zLmxhYmVscyB8fCAodGhpcy5pc0hvcml6b250YWwoKSA/IGRhdGEueExhYmVscyA6IGRhdGEueUxhYmVscykgfHwgZGF0YS5sYWJlbHMgfHwgW107XG4gIH1cbiAgYmVmb3JlTGF5b3V0KCkge1xuICAgIHRoaXMuX2NhY2hlID0ge307XG4gICAgdGhpcy5fZGF0YUxpbWl0c0NhY2hlZCA9IGZhbHNlO1xuICB9XG4gIGJlZm9yZVVwZGF0ZSgpIHtcbiAgICBjYWxsYmFjayh0aGlzLm9wdGlvbnMuYmVmb3JlVXBkYXRlLCBbdGhpc10pO1xuICB9XG4gIHVwZGF0ZShtYXhXaWR0aCwgbWF4SGVpZ2h0LCBtYXJnaW5zKSB7XG4gICAgY29uc3Qge2JlZ2luQXRaZXJvLCBncmFjZSwgdGlja3M6IHRpY2tPcHRzfSA9IHRoaXMub3B0aW9ucztcbiAgICBjb25zdCBzYW1wbGVTaXplID0gdGlja09wdHMuc2FtcGxlU2l6ZTtcbiAgICB0aGlzLmJlZm9yZVVwZGF0ZSgpO1xuICAgIHRoaXMubWF4V2lkdGggPSBtYXhXaWR0aDtcbiAgICB0aGlzLm1heEhlaWdodCA9IG1heEhlaWdodDtcbiAgICB0aGlzLl9tYXJnaW5zID0gbWFyZ2lucyA9IE9iamVjdC5hc3NpZ24oe1xuICAgICAgbGVmdDogMCxcbiAgICAgIHJpZ2h0OiAwLFxuICAgICAgdG9wOiAwLFxuICAgICAgYm90dG9tOiAwXG4gICAgfSwgbWFyZ2lucyk7XG4gICAgdGhpcy50aWNrcyA9IG51bGw7XG4gICAgdGhpcy5fbGFiZWxTaXplcyA9IG51bGw7XG4gICAgdGhpcy5fZ3JpZExpbmVJdGVtcyA9IG51bGw7XG4gICAgdGhpcy5fbGFiZWxJdGVtcyA9IG51bGw7XG4gICAgdGhpcy5iZWZvcmVTZXREaW1lbnNpb25zKCk7XG4gICAgdGhpcy5zZXREaW1lbnNpb25zKCk7XG4gICAgdGhpcy5hZnRlclNldERpbWVuc2lvbnMoKTtcbiAgICB0aGlzLl9tYXhMZW5ndGggPSB0aGlzLmlzSG9yaXpvbnRhbCgpXG4gICAgICA/IHRoaXMud2lkdGggKyBtYXJnaW5zLmxlZnQgKyBtYXJnaW5zLnJpZ2h0XG4gICAgICA6IHRoaXMuaGVpZ2h0ICsgbWFyZ2lucy50b3AgKyBtYXJnaW5zLmJvdHRvbTtcbiAgICBpZiAoIXRoaXMuX2RhdGFMaW1pdHNDYWNoZWQpIHtcbiAgICAgIHRoaXMuYmVmb3JlRGF0YUxpbWl0cygpO1xuICAgICAgdGhpcy5kZXRlcm1pbmVEYXRhTGltaXRzKCk7XG4gICAgICB0aGlzLmFmdGVyRGF0YUxpbWl0cygpO1xuICAgICAgdGhpcy5fcmFuZ2UgPSBfYWRkR3JhY2UodGhpcywgZ3JhY2UsIGJlZ2luQXRaZXJvKTtcbiAgICAgIHRoaXMuX2RhdGFMaW1pdHNDYWNoZWQgPSB0cnVlO1xuICAgIH1cbiAgICB0aGlzLmJlZm9yZUJ1aWxkVGlja3MoKTtcbiAgICB0aGlzLnRpY2tzID0gdGhpcy5idWlsZFRpY2tzKCkgfHwgW107XG4gICAgdGhpcy5hZnRlckJ1aWxkVGlja3MoKTtcbiAgICBjb25zdCBzYW1wbGluZ0VuYWJsZWQgPSBzYW1wbGVTaXplIDwgdGhpcy50aWNrcy5sZW5ndGg7XG4gICAgdGhpcy5fY29udmVydFRpY2tzVG9MYWJlbHMoc2FtcGxpbmdFbmFibGVkID8gc2FtcGxlKHRoaXMudGlja3MsIHNhbXBsZVNpemUpIDogdGhpcy50aWNrcyk7XG4gICAgdGhpcy5jb25maWd1cmUoKTtcbiAgICB0aGlzLmJlZm9yZUNhbGN1bGF0ZUxhYmVsUm90YXRpb24oKTtcbiAgICB0aGlzLmNhbGN1bGF0ZUxhYmVsUm90YXRpb24oKTtcbiAgICB0aGlzLmFmdGVyQ2FsY3VsYXRlTGFiZWxSb3RhdGlvbigpO1xuICAgIGlmICh0aWNrT3B0cy5kaXNwbGF5ICYmICh0aWNrT3B0cy5hdXRvU2tpcCB8fCB0aWNrT3B0cy5zb3VyY2UgPT09ICdhdXRvJykpIHtcbiAgICAgIHRoaXMudGlja3MgPSBhdXRvU2tpcCh0aGlzLCB0aGlzLnRpY2tzKTtcbiAgICAgIHRoaXMuX2xhYmVsU2l6ZXMgPSBudWxsO1xuICAgIH1cbiAgICBpZiAoc2FtcGxpbmdFbmFibGVkKSB7XG4gICAgICB0aGlzLl9jb252ZXJ0VGlja3NUb0xhYmVscyh0aGlzLnRpY2tzKTtcbiAgICB9XG4gICAgdGhpcy5iZWZvcmVGaXQoKTtcbiAgICB0aGlzLmZpdCgpO1xuICAgIHRoaXMuYWZ0ZXJGaXQoKTtcbiAgICB0aGlzLmFmdGVyVXBkYXRlKCk7XG4gIH1cbiAgY29uZmlndXJlKCkge1xuICAgIGxldCByZXZlcnNlUGl4ZWxzID0gdGhpcy5vcHRpb25zLnJldmVyc2U7XG4gICAgbGV0IHN0YXJ0UGl4ZWwsIGVuZFBpeGVsO1xuICAgIGlmICh0aGlzLmlzSG9yaXpvbnRhbCgpKSB7XG4gICAgICBzdGFydFBpeGVsID0gdGhpcy5sZWZ0O1xuICAgICAgZW5kUGl4ZWwgPSB0aGlzLnJpZ2h0O1xuICAgIH0gZWxzZSB7XG4gICAgICBzdGFydFBpeGVsID0gdGhpcy50b3A7XG4gICAgICBlbmRQaXhlbCA9IHRoaXMuYm90dG9tO1xuICAgICAgcmV2ZXJzZVBpeGVscyA9ICFyZXZlcnNlUGl4ZWxzO1xuICAgIH1cbiAgICB0aGlzLl9zdGFydFBpeGVsID0gc3RhcnRQaXhlbDtcbiAgICB0aGlzLl9lbmRQaXhlbCA9IGVuZFBpeGVsO1xuICAgIHRoaXMuX3JldmVyc2VQaXhlbHMgPSByZXZlcnNlUGl4ZWxzO1xuICAgIHRoaXMuX2xlbmd0aCA9IGVuZFBpeGVsIC0gc3RhcnRQaXhlbDtcbiAgICB0aGlzLl9hbGlnblRvUGl4ZWxzID0gdGhpcy5vcHRpb25zLmFsaWduVG9QaXhlbHM7XG4gIH1cbiAgYWZ0ZXJVcGRhdGUoKSB7XG4gICAgY2FsbGJhY2sodGhpcy5vcHRpb25zLmFmdGVyVXBkYXRlLCBbdGhpc10pO1xuICB9XG4gIGJlZm9yZVNldERpbWVuc2lvbnMoKSB7XG4gICAgY2FsbGJhY2sodGhpcy5vcHRpb25zLmJlZm9yZVNldERpbWVuc2lvbnMsIFt0aGlzXSk7XG4gIH1cbiAgc2V0RGltZW5zaW9ucygpIHtcbiAgICBpZiAodGhpcy5pc0hvcml6b250YWwoKSkge1xuICAgICAgdGhpcy53aWR0aCA9IHRoaXMubWF4V2lkdGg7XG4gICAgICB0aGlzLmxlZnQgPSAwO1xuICAgICAgdGhpcy5yaWdodCA9IHRoaXMud2lkdGg7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuaGVpZ2h0ID0gdGhpcy5tYXhIZWlnaHQ7XG4gICAgICB0aGlzLnRvcCA9IDA7XG4gICAgICB0aGlzLmJvdHRvbSA9IHRoaXMuaGVpZ2h0O1xuICAgIH1cbiAgICB0aGlzLnBhZGRpbmdMZWZ0ID0gMDtcbiAgICB0aGlzLnBhZGRpbmdUb3AgPSAwO1xuICAgIHRoaXMucGFkZGluZ1JpZ2h0ID0gMDtcbiAgICB0aGlzLnBhZGRpbmdCb3R0b20gPSAwO1xuICB9XG4gIGFmdGVyU2V0RGltZW5zaW9ucygpIHtcbiAgICBjYWxsYmFjayh0aGlzLm9wdGlvbnMuYWZ0ZXJTZXREaW1lbnNpb25zLCBbdGhpc10pO1xuICB9XG4gIF9jYWxsSG9va3MobmFtZSkge1xuICAgIHRoaXMuY2hhcnQubm90aWZ5UGx1Z2lucyhuYW1lLCB0aGlzLmdldENvbnRleHQoKSk7XG4gICAgY2FsbGJhY2sodGhpcy5vcHRpb25zW25hbWVdLCBbdGhpc10pO1xuICB9XG4gIGJlZm9yZURhdGFMaW1pdHMoKSB7XG4gICAgdGhpcy5fY2FsbEhvb2tzKCdiZWZvcmVEYXRhTGltaXRzJyk7XG4gIH1cbiAgZGV0ZXJtaW5lRGF0YUxpbWl0cygpIHt9XG4gIGFmdGVyRGF0YUxpbWl0cygpIHtcbiAgICB0aGlzLl9jYWxsSG9va3MoJ2FmdGVyRGF0YUxpbWl0cycpO1xuICB9XG4gIGJlZm9yZUJ1aWxkVGlja3MoKSB7XG4gICAgdGhpcy5fY2FsbEhvb2tzKCdiZWZvcmVCdWlsZFRpY2tzJyk7XG4gIH1cbiAgYnVpbGRUaWNrcygpIHtcbiAgICByZXR1cm4gW107XG4gIH1cbiAgYWZ0ZXJCdWlsZFRpY2tzKCkge1xuICAgIHRoaXMuX2NhbGxIb29rcygnYWZ0ZXJCdWlsZFRpY2tzJyk7XG4gIH1cbiAgYmVmb3JlVGlja1RvTGFiZWxDb252ZXJzaW9uKCkge1xuICAgIGNhbGxiYWNrKHRoaXMub3B0aW9ucy5iZWZvcmVUaWNrVG9MYWJlbENvbnZlcnNpb24sIFt0aGlzXSk7XG4gIH1cbiAgZ2VuZXJhdGVUaWNrTGFiZWxzKHRpY2tzKSB7XG4gICAgY29uc3QgdGlja09wdHMgPSB0aGlzLm9wdGlvbnMudGlja3M7XG4gICAgbGV0IGksIGlsZW4sIHRpY2s7XG4gICAgZm9yIChpID0gMCwgaWxlbiA9IHRpY2tzLmxlbmd0aDsgaSA8IGlsZW47IGkrKykge1xuICAgICAgdGljayA9IHRpY2tzW2ldO1xuICAgICAgdGljay5sYWJlbCA9IGNhbGxiYWNrKHRpY2tPcHRzLmNhbGxiYWNrLCBbdGljay52YWx1ZSwgaSwgdGlja3NdLCB0aGlzKTtcbiAgICB9XG4gIH1cbiAgYWZ0ZXJUaWNrVG9MYWJlbENvbnZlcnNpb24oKSB7XG4gICAgY2FsbGJhY2sodGhpcy5vcHRpb25zLmFmdGVyVGlja1RvTGFiZWxDb252ZXJzaW9uLCBbdGhpc10pO1xuICB9XG4gIGJlZm9yZUNhbGN1bGF0ZUxhYmVsUm90YXRpb24oKSB7XG4gICAgY2FsbGJhY2sodGhpcy5vcHRpb25zLmJlZm9yZUNhbGN1bGF0ZUxhYmVsUm90YXRpb24sIFt0aGlzXSk7XG4gIH1cbiAgY2FsY3VsYXRlTGFiZWxSb3RhdGlvbigpIHtcbiAgICBjb25zdCBvcHRpb25zID0gdGhpcy5vcHRpb25zO1xuICAgIGNvbnN0IHRpY2tPcHRzID0gb3B0aW9ucy50aWNrcztcbiAgICBjb25zdCBudW1UaWNrcyA9IHRoaXMudGlja3MubGVuZ3RoO1xuICAgIGNvbnN0IG1pblJvdGF0aW9uID0gdGlja09wdHMubWluUm90YXRpb24gfHwgMDtcbiAgICBjb25zdCBtYXhSb3RhdGlvbiA9IHRpY2tPcHRzLm1heFJvdGF0aW9uO1xuICAgIGxldCBsYWJlbFJvdGF0aW9uID0gbWluUm90YXRpb247XG4gICAgbGV0IHRpY2tXaWR0aCwgbWF4SGVpZ2h0LCBtYXhMYWJlbERpYWdvbmFsO1xuICAgIGlmICghdGhpcy5faXNWaXNpYmxlKCkgfHwgIXRpY2tPcHRzLmRpc3BsYXkgfHwgbWluUm90YXRpb24gPj0gbWF4Um90YXRpb24gfHwgbnVtVGlja3MgPD0gMSB8fCAhdGhpcy5pc0hvcml6b250YWwoKSkge1xuICAgICAgdGhpcy5sYWJlbFJvdGF0aW9uID0gbWluUm90YXRpb247XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IGxhYmVsU2l6ZXMgPSB0aGlzLl9nZXRMYWJlbFNpemVzKCk7XG4gICAgY29uc3QgbWF4TGFiZWxXaWR0aCA9IGxhYmVsU2l6ZXMud2lkZXN0LndpZHRoO1xuICAgIGNvbnN0IG1heExhYmVsSGVpZ2h0ID0gbGFiZWxTaXplcy5oaWdoZXN0LmhlaWdodDtcbiAgICBjb25zdCBtYXhXaWR0aCA9IF9saW1pdFZhbHVlKHRoaXMuY2hhcnQud2lkdGggLSBtYXhMYWJlbFdpZHRoLCAwLCB0aGlzLm1heFdpZHRoKTtcbiAgICB0aWNrV2lkdGggPSBvcHRpb25zLm9mZnNldCA/IHRoaXMubWF4V2lkdGggLyBudW1UaWNrcyA6IG1heFdpZHRoIC8gKG51bVRpY2tzIC0gMSk7XG4gICAgaWYgKG1heExhYmVsV2lkdGggKyA2ID4gdGlja1dpZHRoKSB7XG4gICAgICB0aWNrV2lkdGggPSBtYXhXaWR0aCAvIChudW1UaWNrcyAtIChvcHRpb25zLm9mZnNldCA/IDAuNSA6IDEpKTtcbiAgICAgIG1heEhlaWdodCA9IHRoaXMubWF4SGVpZ2h0IC0gZ2V0VGlja01hcmtMZW5ndGgob3B0aW9ucy5ncmlkKVxuXHRcdFx0XHQtIHRpY2tPcHRzLnBhZGRpbmcgLSBnZXRUaXRsZUhlaWdodChvcHRpb25zLnRpdGxlLCB0aGlzLmNoYXJ0Lm9wdGlvbnMuZm9udCk7XG4gICAgICBtYXhMYWJlbERpYWdvbmFsID0gTWF0aC5zcXJ0KG1heExhYmVsV2lkdGggKiBtYXhMYWJlbFdpZHRoICsgbWF4TGFiZWxIZWlnaHQgKiBtYXhMYWJlbEhlaWdodCk7XG4gICAgICBsYWJlbFJvdGF0aW9uID0gdG9EZWdyZWVzKE1hdGgubWluKFxuICAgICAgICBNYXRoLmFzaW4oX2xpbWl0VmFsdWUoKGxhYmVsU2l6ZXMuaGlnaGVzdC5oZWlnaHQgKyA2KSAvIHRpY2tXaWR0aCwgLTEsIDEpKSxcbiAgICAgICAgTWF0aC5hc2luKF9saW1pdFZhbHVlKG1heEhlaWdodCAvIG1heExhYmVsRGlhZ29uYWwsIC0xLCAxKSkgLSBNYXRoLmFzaW4oX2xpbWl0VmFsdWUobWF4TGFiZWxIZWlnaHQgLyBtYXhMYWJlbERpYWdvbmFsLCAtMSwgMSkpXG4gICAgICApKTtcbiAgICAgIGxhYmVsUm90YXRpb24gPSBNYXRoLm1heChtaW5Sb3RhdGlvbiwgTWF0aC5taW4obWF4Um90YXRpb24sIGxhYmVsUm90YXRpb24pKTtcbiAgICB9XG4gICAgdGhpcy5sYWJlbFJvdGF0aW9uID0gbGFiZWxSb3RhdGlvbjtcbiAgfVxuICBhZnRlckNhbGN1bGF0ZUxhYmVsUm90YXRpb24oKSB7XG4gICAgY2FsbGJhY2sodGhpcy5vcHRpb25zLmFmdGVyQ2FsY3VsYXRlTGFiZWxSb3RhdGlvbiwgW3RoaXNdKTtcbiAgfVxuICBiZWZvcmVGaXQoKSB7XG4gICAgY2FsbGJhY2sodGhpcy5vcHRpb25zLmJlZm9yZUZpdCwgW3RoaXNdKTtcbiAgfVxuICBmaXQoKSB7XG4gICAgY29uc3QgbWluU2l6ZSA9IHtcbiAgICAgIHdpZHRoOiAwLFxuICAgICAgaGVpZ2h0OiAwXG4gICAgfTtcbiAgICBjb25zdCB7Y2hhcnQsIG9wdGlvbnM6IHt0aWNrczogdGlja09wdHMsIHRpdGxlOiB0aXRsZU9wdHMsIGdyaWQ6IGdyaWRPcHRzfX0gPSB0aGlzO1xuICAgIGNvbnN0IGRpc3BsYXkgPSB0aGlzLl9pc1Zpc2libGUoKTtcbiAgICBjb25zdCBpc0hvcml6b250YWwgPSB0aGlzLmlzSG9yaXpvbnRhbCgpO1xuICAgIGlmIChkaXNwbGF5KSB7XG4gICAgICBjb25zdCB0aXRsZUhlaWdodCA9IGdldFRpdGxlSGVpZ2h0KHRpdGxlT3B0cywgY2hhcnQub3B0aW9ucy5mb250KTtcbiAgICAgIGlmIChpc0hvcml6b250YWwpIHtcbiAgICAgICAgbWluU2l6ZS53aWR0aCA9IHRoaXMubWF4V2lkdGg7XG4gICAgICAgIG1pblNpemUuaGVpZ2h0ID0gZ2V0VGlja01hcmtMZW5ndGgoZ3JpZE9wdHMpICsgdGl0bGVIZWlnaHQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBtaW5TaXplLmhlaWdodCA9IHRoaXMubWF4SGVpZ2h0O1xuICAgICAgICBtaW5TaXplLndpZHRoID0gZ2V0VGlja01hcmtMZW5ndGgoZ3JpZE9wdHMpICsgdGl0bGVIZWlnaHQ7XG4gICAgICB9XG4gICAgICBpZiAodGlja09wdHMuZGlzcGxheSAmJiB0aGlzLnRpY2tzLmxlbmd0aCkge1xuICAgICAgICBjb25zdCB7Zmlyc3QsIGxhc3QsIHdpZGVzdCwgaGlnaGVzdH0gPSB0aGlzLl9nZXRMYWJlbFNpemVzKCk7XG4gICAgICAgIGNvbnN0IHRpY2tQYWRkaW5nID0gdGlja09wdHMucGFkZGluZyAqIDI7XG4gICAgICAgIGNvbnN0IGFuZ2xlUmFkaWFucyA9IHRvUmFkaWFucyh0aGlzLmxhYmVsUm90YXRpb24pO1xuICAgICAgICBjb25zdCBjb3MgPSBNYXRoLmNvcyhhbmdsZVJhZGlhbnMpO1xuICAgICAgICBjb25zdCBzaW4gPSBNYXRoLnNpbihhbmdsZVJhZGlhbnMpO1xuICAgICAgICBpZiAoaXNIb3Jpem9udGFsKSB7XG4gICAgICAgICAgY29uc3QgbGFiZWxIZWlnaHQgPSB0aWNrT3B0cy5taXJyb3IgPyAwIDogc2luICogd2lkZXN0LndpZHRoICsgY29zICogaGlnaGVzdC5oZWlnaHQ7XG4gICAgICAgICAgbWluU2l6ZS5oZWlnaHQgPSBNYXRoLm1pbih0aGlzLm1heEhlaWdodCwgbWluU2l6ZS5oZWlnaHQgKyBsYWJlbEhlaWdodCArIHRpY2tQYWRkaW5nKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjb25zdCBsYWJlbFdpZHRoID0gdGlja09wdHMubWlycm9yID8gMCA6IGNvcyAqIHdpZGVzdC53aWR0aCArIHNpbiAqIGhpZ2hlc3QuaGVpZ2h0O1xuICAgICAgICAgIG1pblNpemUud2lkdGggPSBNYXRoLm1pbih0aGlzLm1heFdpZHRoLCBtaW5TaXplLndpZHRoICsgbGFiZWxXaWR0aCArIHRpY2tQYWRkaW5nKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9jYWxjdWxhdGVQYWRkaW5nKGZpcnN0LCBsYXN0LCBzaW4sIGNvcyk7XG4gICAgICB9XG4gICAgfVxuICAgIHRoaXMuX2hhbmRsZU1hcmdpbnMoKTtcbiAgICBpZiAoaXNIb3Jpem9udGFsKSB7XG4gICAgICB0aGlzLndpZHRoID0gdGhpcy5fbGVuZ3RoID0gY2hhcnQud2lkdGggLSB0aGlzLl9tYXJnaW5zLmxlZnQgLSB0aGlzLl9tYXJnaW5zLnJpZ2h0O1xuICAgICAgdGhpcy5oZWlnaHQgPSBtaW5TaXplLmhlaWdodDtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy53aWR0aCA9IG1pblNpemUud2lkdGg7XG4gICAgICB0aGlzLmhlaWdodCA9IHRoaXMuX2xlbmd0aCA9IGNoYXJ0LmhlaWdodCAtIHRoaXMuX21hcmdpbnMudG9wIC0gdGhpcy5fbWFyZ2lucy5ib3R0b207XG4gICAgfVxuICB9XG4gIF9jYWxjdWxhdGVQYWRkaW5nKGZpcnN0LCBsYXN0LCBzaW4sIGNvcykge1xuICAgIGNvbnN0IHt0aWNrczoge2FsaWduLCBwYWRkaW5nfSwgcG9zaXRpb259ID0gdGhpcy5vcHRpb25zO1xuICAgIGNvbnN0IGlzUm90YXRlZCA9IHRoaXMubGFiZWxSb3RhdGlvbiAhPT0gMDtcbiAgICBjb25zdCBsYWJlbHNCZWxvd1RpY2tzID0gcG9zaXRpb24gIT09ICd0b3AnICYmIHRoaXMuYXhpcyA9PT0gJ3gnO1xuICAgIGlmICh0aGlzLmlzSG9yaXpvbnRhbCgpKSB7XG4gICAgICBjb25zdCBvZmZzZXRMZWZ0ID0gdGhpcy5nZXRQaXhlbEZvclRpY2soMCkgLSB0aGlzLmxlZnQ7XG4gICAgICBjb25zdCBvZmZzZXRSaWdodCA9IHRoaXMucmlnaHQgLSB0aGlzLmdldFBpeGVsRm9yVGljayh0aGlzLnRpY2tzLmxlbmd0aCAtIDEpO1xuICAgICAgbGV0IHBhZGRpbmdMZWZ0ID0gMDtcbiAgICAgIGxldCBwYWRkaW5nUmlnaHQgPSAwO1xuICAgICAgaWYgKGlzUm90YXRlZCkge1xuICAgICAgICBpZiAobGFiZWxzQmVsb3dUaWNrcykge1xuICAgICAgICAgIHBhZGRpbmdMZWZ0ID0gY29zICogZmlyc3Qud2lkdGg7XG4gICAgICAgICAgcGFkZGluZ1JpZ2h0ID0gc2luICogbGFzdC5oZWlnaHQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcGFkZGluZ0xlZnQgPSBzaW4gKiBmaXJzdC5oZWlnaHQ7XG4gICAgICAgICAgcGFkZGluZ1JpZ2h0ID0gY29zICogbGFzdC53aWR0aDtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChhbGlnbiA9PT0gJ3N0YXJ0Jykge1xuICAgICAgICBwYWRkaW5nUmlnaHQgPSBsYXN0LndpZHRoO1xuICAgICAgfSBlbHNlIGlmIChhbGlnbiA9PT0gJ2VuZCcpIHtcbiAgICAgICAgcGFkZGluZ0xlZnQgPSBmaXJzdC53aWR0aDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBhZGRpbmdMZWZ0ID0gZmlyc3Qud2lkdGggLyAyO1xuICAgICAgICBwYWRkaW5nUmlnaHQgPSBsYXN0LndpZHRoIC8gMjtcbiAgICAgIH1cbiAgICAgIHRoaXMucGFkZGluZ0xlZnQgPSBNYXRoLm1heCgocGFkZGluZ0xlZnQgLSBvZmZzZXRMZWZ0ICsgcGFkZGluZykgKiB0aGlzLndpZHRoIC8gKHRoaXMud2lkdGggLSBvZmZzZXRMZWZ0KSwgMCk7XG4gICAgICB0aGlzLnBhZGRpbmdSaWdodCA9IE1hdGgubWF4KChwYWRkaW5nUmlnaHQgLSBvZmZzZXRSaWdodCArIHBhZGRpbmcpICogdGhpcy53aWR0aCAvICh0aGlzLndpZHRoIC0gb2Zmc2V0UmlnaHQpLCAwKTtcbiAgICB9IGVsc2Uge1xuICAgICAgbGV0IHBhZGRpbmdUb3AgPSBsYXN0LmhlaWdodCAvIDI7XG4gICAgICBsZXQgcGFkZGluZ0JvdHRvbSA9IGZpcnN0LmhlaWdodCAvIDI7XG4gICAgICBpZiAoYWxpZ24gPT09ICdzdGFydCcpIHtcbiAgICAgICAgcGFkZGluZ1RvcCA9IDA7XG4gICAgICAgIHBhZGRpbmdCb3R0b20gPSBmaXJzdC5oZWlnaHQ7XG4gICAgICB9IGVsc2UgaWYgKGFsaWduID09PSAnZW5kJykge1xuICAgICAgICBwYWRkaW5nVG9wID0gbGFzdC5oZWlnaHQ7XG4gICAgICAgIHBhZGRpbmdCb3R0b20gPSAwO1xuICAgICAgfVxuICAgICAgdGhpcy5wYWRkaW5nVG9wID0gcGFkZGluZ1RvcCArIHBhZGRpbmc7XG4gICAgICB0aGlzLnBhZGRpbmdCb3R0b20gPSBwYWRkaW5nQm90dG9tICsgcGFkZGluZztcbiAgICB9XG4gIH1cbiAgX2hhbmRsZU1hcmdpbnMoKSB7XG4gICAgaWYgKHRoaXMuX21hcmdpbnMpIHtcbiAgICAgIHRoaXMuX21hcmdpbnMubGVmdCA9IE1hdGgubWF4KHRoaXMucGFkZGluZ0xlZnQsIHRoaXMuX21hcmdpbnMubGVmdCk7XG4gICAgICB0aGlzLl9tYXJnaW5zLnRvcCA9IE1hdGgubWF4KHRoaXMucGFkZGluZ1RvcCwgdGhpcy5fbWFyZ2lucy50b3ApO1xuICAgICAgdGhpcy5fbWFyZ2lucy5yaWdodCA9IE1hdGgubWF4KHRoaXMucGFkZGluZ1JpZ2h0LCB0aGlzLl9tYXJnaW5zLnJpZ2h0KTtcbiAgICAgIHRoaXMuX21hcmdpbnMuYm90dG9tID0gTWF0aC5tYXgodGhpcy5wYWRkaW5nQm90dG9tLCB0aGlzLl9tYXJnaW5zLmJvdHRvbSk7XG4gICAgfVxuICB9XG4gIGFmdGVyRml0KCkge1xuICAgIGNhbGxiYWNrKHRoaXMub3B0aW9ucy5hZnRlckZpdCwgW3RoaXNdKTtcbiAgfVxuICBpc0hvcml6b250YWwoKSB7XG4gICAgY29uc3Qge2F4aXMsIHBvc2l0aW9ufSA9IHRoaXMub3B0aW9ucztcbiAgICByZXR1cm4gcG9zaXRpb24gPT09ICd0b3AnIHx8IHBvc2l0aW9uID09PSAnYm90dG9tJyB8fCBheGlzID09PSAneCc7XG4gIH1cbiAgaXNGdWxsU2l6ZSgpIHtcbiAgICByZXR1cm4gdGhpcy5vcHRpb25zLmZ1bGxTaXplO1xuICB9XG4gIF9jb252ZXJ0VGlja3NUb0xhYmVscyh0aWNrcykge1xuICAgIHRoaXMuYmVmb3JlVGlja1RvTGFiZWxDb252ZXJzaW9uKCk7XG4gICAgdGhpcy5nZW5lcmF0ZVRpY2tMYWJlbHModGlja3MpO1xuICAgIGxldCBpLCBpbGVuO1xuICAgIGZvciAoaSA9IDAsIGlsZW4gPSB0aWNrcy5sZW5ndGg7IGkgPCBpbGVuOyBpKyspIHtcbiAgICAgIGlmIChpc051bGxPclVuZGVmKHRpY2tzW2ldLmxhYmVsKSkge1xuICAgICAgICB0aWNrcy5zcGxpY2UoaSwgMSk7XG4gICAgICAgIGlsZW4tLTtcbiAgICAgICAgaS0tO1xuICAgICAgfVxuICAgIH1cbiAgICB0aGlzLmFmdGVyVGlja1RvTGFiZWxDb252ZXJzaW9uKCk7XG4gIH1cbiAgX2dldExhYmVsU2l6ZXMoKSB7XG4gICAgbGV0IGxhYmVsU2l6ZXMgPSB0aGlzLl9sYWJlbFNpemVzO1xuICAgIGlmICghbGFiZWxTaXplcykge1xuICAgICAgY29uc3Qgc2FtcGxlU2l6ZSA9IHRoaXMub3B0aW9ucy50aWNrcy5zYW1wbGVTaXplO1xuICAgICAgbGV0IHRpY2tzID0gdGhpcy50aWNrcztcbiAgICAgIGlmIChzYW1wbGVTaXplIDwgdGlja3MubGVuZ3RoKSB7XG4gICAgICAgIHRpY2tzID0gc2FtcGxlKHRpY2tzLCBzYW1wbGVTaXplKTtcbiAgICAgIH1cbiAgICAgIHRoaXMuX2xhYmVsU2l6ZXMgPSBsYWJlbFNpemVzID0gdGhpcy5fY29tcHV0ZUxhYmVsU2l6ZXModGlja3MsIHRpY2tzLmxlbmd0aCk7XG4gICAgfVxuICAgIHJldHVybiBsYWJlbFNpemVzO1xuICB9XG4gIF9jb21wdXRlTGFiZWxTaXplcyh0aWNrcywgbGVuZ3RoKSB7XG4gICAgY29uc3Qge2N0eCwgX2xvbmdlc3RUZXh0Q2FjaGU6IGNhY2hlc30gPSB0aGlzO1xuICAgIGNvbnN0IHdpZHRocyA9IFtdO1xuICAgIGNvbnN0IGhlaWdodHMgPSBbXTtcbiAgICBsZXQgd2lkZXN0TGFiZWxTaXplID0gMDtcbiAgICBsZXQgaGlnaGVzdExhYmVsU2l6ZSA9IDA7XG4gICAgbGV0IGksIGosIGpsZW4sIGxhYmVsLCB0aWNrRm9udCwgZm9udFN0cmluZywgY2FjaGUsIGxpbmVIZWlnaHQsIHdpZHRoLCBoZWlnaHQsIG5lc3RlZExhYmVsO1xuICAgIGZvciAoaSA9IDA7IGkgPCBsZW5ndGg7ICsraSkge1xuICAgICAgbGFiZWwgPSB0aWNrc1tpXS5sYWJlbDtcbiAgICAgIHRpY2tGb250ID0gdGhpcy5fcmVzb2x2ZVRpY2tGb250T3B0aW9ucyhpKTtcbiAgICAgIGN0eC5mb250ID0gZm9udFN0cmluZyA9IHRpY2tGb250LnN0cmluZztcbiAgICAgIGNhY2hlID0gY2FjaGVzW2ZvbnRTdHJpbmddID0gY2FjaGVzW2ZvbnRTdHJpbmddIHx8IHtkYXRhOiB7fSwgZ2M6IFtdfTtcbiAgICAgIGxpbmVIZWlnaHQgPSB0aWNrRm9udC5saW5lSGVpZ2h0O1xuICAgICAgd2lkdGggPSBoZWlnaHQgPSAwO1xuICAgICAgaWYgKCFpc051bGxPclVuZGVmKGxhYmVsKSAmJiAhaXNBcnJheShsYWJlbCkpIHtcbiAgICAgICAgd2lkdGggPSBfbWVhc3VyZVRleHQoY3R4LCBjYWNoZS5kYXRhLCBjYWNoZS5nYywgd2lkdGgsIGxhYmVsKTtcbiAgICAgICAgaGVpZ2h0ID0gbGluZUhlaWdodDtcbiAgICAgIH0gZWxzZSBpZiAoaXNBcnJheShsYWJlbCkpIHtcbiAgICAgICAgZm9yIChqID0gMCwgamxlbiA9IGxhYmVsLmxlbmd0aDsgaiA8IGpsZW47ICsraikge1xuICAgICAgICAgIG5lc3RlZExhYmVsID0gbGFiZWxbal07XG4gICAgICAgICAgaWYgKCFpc051bGxPclVuZGVmKG5lc3RlZExhYmVsKSAmJiAhaXNBcnJheShuZXN0ZWRMYWJlbCkpIHtcbiAgICAgICAgICAgIHdpZHRoID0gX21lYXN1cmVUZXh0KGN0eCwgY2FjaGUuZGF0YSwgY2FjaGUuZ2MsIHdpZHRoLCBuZXN0ZWRMYWJlbCk7XG4gICAgICAgICAgICBoZWlnaHQgKz0gbGluZUhlaWdodDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHdpZHRocy5wdXNoKHdpZHRoKTtcbiAgICAgIGhlaWdodHMucHVzaChoZWlnaHQpO1xuICAgICAgd2lkZXN0TGFiZWxTaXplID0gTWF0aC5tYXgod2lkdGgsIHdpZGVzdExhYmVsU2l6ZSk7XG4gICAgICBoaWdoZXN0TGFiZWxTaXplID0gTWF0aC5tYXgoaGVpZ2h0LCBoaWdoZXN0TGFiZWxTaXplKTtcbiAgICB9XG4gICAgZ2FyYmFnZUNvbGxlY3QoY2FjaGVzLCBsZW5ndGgpO1xuICAgIGNvbnN0IHdpZGVzdCA9IHdpZHRocy5pbmRleE9mKHdpZGVzdExhYmVsU2l6ZSk7XG4gICAgY29uc3QgaGlnaGVzdCA9IGhlaWdodHMuaW5kZXhPZihoaWdoZXN0TGFiZWxTaXplKTtcbiAgICBjb25zdCB2YWx1ZUF0ID0gKGlkeCkgPT4gKHt3aWR0aDogd2lkdGhzW2lkeF0gfHwgMCwgaGVpZ2h0OiBoZWlnaHRzW2lkeF0gfHwgMH0pO1xuICAgIHJldHVybiB7XG4gICAgICBmaXJzdDogdmFsdWVBdCgwKSxcbiAgICAgIGxhc3Q6IHZhbHVlQXQobGVuZ3RoIC0gMSksXG4gICAgICB3aWRlc3Q6IHZhbHVlQXQod2lkZXN0KSxcbiAgICAgIGhpZ2hlc3Q6IHZhbHVlQXQoaGlnaGVzdCksXG4gICAgICB3aWR0aHMsXG4gICAgICBoZWlnaHRzLFxuICAgIH07XG4gIH1cbiAgZ2V0TGFiZWxGb3JWYWx1ZSh2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuICBnZXRQaXhlbEZvclZhbHVlKHZhbHVlLCBpbmRleCkge1xuICAgIHJldHVybiBOYU47XG4gIH1cbiAgZ2V0VmFsdWVGb3JQaXhlbChwaXhlbCkge31cbiAgZ2V0UGl4ZWxGb3JUaWNrKGluZGV4KSB7XG4gICAgY29uc3QgdGlja3MgPSB0aGlzLnRpY2tzO1xuICAgIGlmIChpbmRleCA8IDAgfHwgaW5kZXggPiB0aWNrcy5sZW5ndGggLSAxKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuZ2V0UGl4ZWxGb3JWYWx1ZSh0aWNrc1tpbmRleF0udmFsdWUpO1xuICB9XG4gIGdldFBpeGVsRm9yRGVjaW1hbChkZWNpbWFsKSB7XG4gICAgaWYgKHRoaXMuX3JldmVyc2VQaXhlbHMpIHtcbiAgICAgIGRlY2ltYWwgPSAxIC0gZGVjaW1hbDtcbiAgICB9XG4gICAgY29uc3QgcGl4ZWwgPSB0aGlzLl9zdGFydFBpeGVsICsgZGVjaW1hbCAqIHRoaXMuX2xlbmd0aDtcbiAgICByZXR1cm4gX2ludDE2UmFuZ2UodGhpcy5fYWxpZ25Ub1BpeGVscyA/IF9hbGlnblBpeGVsKHRoaXMuY2hhcnQsIHBpeGVsLCAwKSA6IHBpeGVsKTtcbiAgfVxuICBnZXREZWNpbWFsRm9yUGl4ZWwocGl4ZWwpIHtcbiAgICBjb25zdCBkZWNpbWFsID0gKHBpeGVsIC0gdGhpcy5fc3RhcnRQaXhlbCkgLyB0aGlzLl9sZW5ndGg7XG4gICAgcmV0dXJuIHRoaXMuX3JldmVyc2VQaXhlbHMgPyAxIC0gZGVjaW1hbCA6IGRlY2ltYWw7XG4gIH1cbiAgZ2V0QmFzZVBpeGVsKCkge1xuICAgIHJldHVybiB0aGlzLmdldFBpeGVsRm9yVmFsdWUodGhpcy5nZXRCYXNlVmFsdWUoKSk7XG4gIH1cbiAgZ2V0QmFzZVZhbHVlKCkge1xuICAgIGNvbnN0IHttaW4sIG1heH0gPSB0aGlzO1xuICAgIHJldHVybiBtaW4gPCAwICYmIG1heCA8IDAgPyBtYXggOlxuICAgICAgbWluID4gMCAmJiBtYXggPiAwID8gbWluIDpcbiAgICAgIDA7XG4gIH1cbiAgZ2V0Q29udGV4dChpbmRleCkge1xuICAgIGNvbnN0IHRpY2tzID0gdGhpcy50aWNrcyB8fCBbXTtcbiAgICBpZiAoaW5kZXggPj0gMCAmJiBpbmRleCA8IHRpY2tzLmxlbmd0aCkge1xuICAgICAgY29uc3QgdGljayA9IHRpY2tzW2luZGV4XTtcbiAgICAgIHJldHVybiB0aWNrLiRjb250ZXh0IHx8XG5cdFx0XHRcdCh0aWNrLiRjb250ZXh0ID0gY3JlYXRlVGlja0NvbnRleHQodGhpcy5nZXRDb250ZXh0KCksIGluZGV4LCB0aWNrKSk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLiRjb250ZXh0IHx8XG5cdFx0XHQodGhpcy4kY29udGV4dCA9IGNyZWF0ZVNjYWxlQ29udGV4dCh0aGlzLmNoYXJ0LmdldENvbnRleHQoKSwgdGhpcykpO1xuICB9XG4gIF90aWNrU2l6ZSgpIHtcbiAgICBjb25zdCBvcHRpb25UaWNrcyA9IHRoaXMub3B0aW9ucy50aWNrcztcbiAgICBjb25zdCByb3QgPSB0b1JhZGlhbnModGhpcy5sYWJlbFJvdGF0aW9uKTtcbiAgICBjb25zdCBjb3MgPSBNYXRoLmFicyhNYXRoLmNvcyhyb3QpKTtcbiAgICBjb25zdCBzaW4gPSBNYXRoLmFicyhNYXRoLnNpbihyb3QpKTtcbiAgICBjb25zdCBsYWJlbFNpemVzID0gdGhpcy5fZ2V0TGFiZWxTaXplcygpO1xuICAgIGNvbnN0IHBhZGRpbmcgPSBvcHRpb25UaWNrcy5hdXRvU2tpcFBhZGRpbmcgfHwgMDtcbiAgICBjb25zdCB3ID0gbGFiZWxTaXplcyA/IGxhYmVsU2l6ZXMud2lkZXN0LndpZHRoICsgcGFkZGluZyA6IDA7XG4gICAgY29uc3QgaCA9IGxhYmVsU2l6ZXMgPyBsYWJlbFNpemVzLmhpZ2hlc3QuaGVpZ2h0ICsgcGFkZGluZyA6IDA7XG4gICAgcmV0dXJuIHRoaXMuaXNIb3Jpem9udGFsKClcbiAgICAgID8gaCAqIGNvcyA+IHcgKiBzaW4gPyB3IC8gY29zIDogaCAvIHNpblxuICAgICAgOiBoICogc2luIDwgdyAqIGNvcyA/IGggLyBjb3MgOiB3IC8gc2luO1xuICB9XG4gIF9pc1Zpc2libGUoKSB7XG4gICAgY29uc3QgZGlzcGxheSA9IHRoaXMub3B0aW9ucy5kaXNwbGF5O1xuICAgIGlmIChkaXNwbGF5ICE9PSAnYXV0bycpIHtcbiAgICAgIHJldHVybiAhIWRpc3BsYXk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLmdldE1hdGNoaW5nVmlzaWJsZU1ldGFzKCkubGVuZ3RoID4gMDtcbiAgfVxuICBfY29tcHV0ZUdyaWRMaW5lSXRlbXMoY2hhcnRBcmVhKSB7XG4gICAgY29uc3QgYXhpcyA9IHRoaXMuYXhpcztcbiAgICBjb25zdCBjaGFydCA9IHRoaXMuY2hhcnQ7XG4gICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMub3B0aW9ucztcbiAgICBjb25zdCB7Z3JpZCwgcG9zaXRpb259ID0gb3B0aW9ucztcbiAgICBjb25zdCBvZmZzZXQgPSBncmlkLm9mZnNldDtcbiAgICBjb25zdCBpc0hvcml6b250YWwgPSB0aGlzLmlzSG9yaXpvbnRhbCgpO1xuICAgIGNvbnN0IHRpY2tzID0gdGhpcy50aWNrcztcbiAgICBjb25zdCB0aWNrc0xlbmd0aCA9IHRpY2tzLmxlbmd0aCArIChvZmZzZXQgPyAxIDogMCk7XG4gICAgY29uc3QgdGwgPSBnZXRUaWNrTWFya0xlbmd0aChncmlkKTtcbiAgICBjb25zdCBpdGVtcyA9IFtdO1xuICAgIGNvbnN0IGJvcmRlck9wdHMgPSBncmlkLnNldENvbnRleHQodGhpcy5nZXRDb250ZXh0KCkpO1xuICAgIGNvbnN0IGF4aXNXaWR0aCA9IGJvcmRlck9wdHMuZHJhd0JvcmRlciA/IGJvcmRlck9wdHMuYm9yZGVyV2lkdGggOiAwO1xuICAgIGNvbnN0IGF4aXNIYWxmV2lkdGggPSBheGlzV2lkdGggLyAyO1xuICAgIGNvbnN0IGFsaWduQm9yZGVyVmFsdWUgPSBmdW5jdGlvbihwaXhlbCkge1xuICAgICAgcmV0dXJuIF9hbGlnblBpeGVsKGNoYXJ0LCBwaXhlbCwgYXhpc1dpZHRoKTtcbiAgICB9O1xuICAgIGxldCBib3JkZXJWYWx1ZSwgaSwgbGluZVZhbHVlLCBhbGlnbmVkTGluZVZhbHVlO1xuICAgIGxldCB0eDEsIHR5MSwgdHgyLCB0eTIsIHgxLCB5MSwgeDIsIHkyO1xuICAgIGlmIChwb3NpdGlvbiA9PT0gJ3RvcCcpIHtcbiAgICAgIGJvcmRlclZhbHVlID0gYWxpZ25Cb3JkZXJWYWx1ZSh0aGlzLmJvdHRvbSk7XG4gICAgICB0eTEgPSB0aGlzLmJvdHRvbSAtIHRsO1xuICAgICAgdHkyID0gYm9yZGVyVmFsdWUgLSBheGlzSGFsZldpZHRoO1xuICAgICAgeTEgPSBhbGlnbkJvcmRlclZhbHVlKGNoYXJ0QXJlYS50b3ApICsgYXhpc0hhbGZXaWR0aDtcbiAgICAgIHkyID0gY2hhcnRBcmVhLmJvdHRvbTtcbiAgICB9IGVsc2UgaWYgKHBvc2l0aW9uID09PSAnYm90dG9tJykge1xuICAgICAgYm9yZGVyVmFsdWUgPSBhbGlnbkJvcmRlclZhbHVlKHRoaXMudG9wKTtcbiAgICAgIHkxID0gY2hhcnRBcmVhLnRvcDtcbiAgICAgIHkyID0gYWxpZ25Cb3JkZXJWYWx1ZShjaGFydEFyZWEuYm90dG9tKSAtIGF4aXNIYWxmV2lkdGg7XG4gICAgICB0eTEgPSBib3JkZXJWYWx1ZSArIGF4aXNIYWxmV2lkdGg7XG4gICAgICB0eTIgPSB0aGlzLnRvcCArIHRsO1xuICAgIH0gZWxzZSBpZiAocG9zaXRpb24gPT09ICdsZWZ0Jykge1xuICAgICAgYm9yZGVyVmFsdWUgPSBhbGlnbkJvcmRlclZhbHVlKHRoaXMucmlnaHQpO1xuICAgICAgdHgxID0gdGhpcy5yaWdodCAtIHRsO1xuICAgICAgdHgyID0gYm9yZGVyVmFsdWUgLSBheGlzSGFsZldpZHRoO1xuICAgICAgeDEgPSBhbGlnbkJvcmRlclZhbHVlKGNoYXJ0QXJlYS5sZWZ0KSArIGF4aXNIYWxmV2lkdGg7XG4gICAgICB4MiA9IGNoYXJ0QXJlYS5yaWdodDtcbiAgICB9IGVsc2UgaWYgKHBvc2l0aW9uID09PSAncmlnaHQnKSB7XG4gICAgICBib3JkZXJWYWx1ZSA9IGFsaWduQm9yZGVyVmFsdWUodGhpcy5sZWZ0KTtcbiAgICAgIHgxID0gY2hhcnRBcmVhLmxlZnQ7XG4gICAgICB4MiA9IGFsaWduQm9yZGVyVmFsdWUoY2hhcnRBcmVhLnJpZ2h0KSAtIGF4aXNIYWxmV2lkdGg7XG4gICAgICB0eDEgPSBib3JkZXJWYWx1ZSArIGF4aXNIYWxmV2lkdGg7XG4gICAgICB0eDIgPSB0aGlzLmxlZnQgKyB0bDtcbiAgICB9IGVsc2UgaWYgKGF4aXMgPT09ICd4Jykge1xuICAgICAgaWYgKHBvc2l0aW9uID09PSAnY2VudGVyJykge1xuICAgICAgICBib3JkZXJWYWx1ZSA9IGFsaWduQm9yZGVyVmFsdWUoKGNoYXJ0QXJlYS50b3AgKyBjaGFydEFyZWEuYm90dG9tKSAvIDIgKyAwLjUpO1xuICAgICAgfSBlbHNlIGlmIChpc09iamVjdChwb3NpdGlvbikpIHtcbiAgICAgICAgY29uc3QgcG9zaXRpb25BeGlzSUQgPSBPYmplY3Qua2V5cyhwb3NpdGlvbilbMF07XG4gICAgICAgIGNvbnN0IHZhbHVlID0gcG9zaXRpb25bcG9zaXRpb25BeGlzSURdO1xuICAgICAgICBib3JkZXJWYWx1ZSA9IGFsaWduQm9yZGVyVmFsdWUodGhpcy5jaGFydC5zY2FsZXNbcG9zaXRpb25BeGlzSURdLmdldFBpeGVsRm9yVmFsdWUodmFsdWUpKTtcbiAgICAgIH1cbiAgICAgIHkxID0gY2hhcnRBcmVhLnRvcDtcbiAgICAgIHkyID0gY2hhcnRBcmVhLmJvdHRvbTtcbiAgICAgIHR5MSA9IGJvcmRlclZhbHVlICsgYXhpc0hhbGZXaWR0aDtcbiAgICAgIHR5MiA9IHR5MSArIHRsO1xuICAgIH0gZWxzZSBpZiAoYXhpcyA9PT0gJ3knKSB7XG4gICAgICBpZiAocG9zaXRpb24gPT09ICdjZW50ZXInKSB7XG4gICAgICAgIGJvcmRlclZhbHVlID0gYWxpZ25Cb3JkZXJWYWx1ZSgoY2hhcnRBcmVhLmxlZnQgKyBjaGFydEFyZWEucmlnaHQpIC8gMik7XG4gICAgICB9IGVsc2UgaWYgKGlzT2JqZWN0KHBvc2l0aW9uKSkge1xuICAgICAgICBjb25zdCBwb3NpdGlvbkF4aXNJRCA9IE9iamVjdC5rZXlzKHBvc2l0aW9uKVswXTtcbiAgICAgICAgY29uc3QgdmFsdWUgPSBwb3NpdGlvbltwb3NpdGlvbkF4aXNJRF07XG4gICAgICAgIGJvcmRlclZhbHVlID0gYWxpZ25Cb3JkZXJWYWx1ZSh0aGlzLmNoYXJ0LnNjYWxlc1twb3NpdGlvbkF4aXNJRF0uZ2V0UGl4ZWxGb3JWYWx1ZSh2YWx1ZSkpO1xuICAgICAgfVxuICAgICAgdHgxID0gYm9yZGVyVmFsdWUgLSBheGlzSGFsZldpZHRoO1xuICAgICAgdHgyID0gdHgxIC0gdGw7XG4gICAgICB4MSA9IGNoYXJ0QXJlYS5sZWZ0O1xuICAgICAgeDIgPSBjaGFydEFyZWEucmlnaHQ7XG4gICAgfVxuICAgIGNvbnN0IGxpbWl0ID0gdmFsdWVPckRlZmF1bHQob3B0aW9ucy50aWNrcy5tYXhUaWNrc0xpbWl0LCB0aWNrc0xlbmd0aCk7XG4gICAgY29uc3Qgc3RlcCA9IE1hdGgubWF4KDEsIE1hdGguY2VpbCh0aWNrc0xlbmd0aCAvIGxpbWl0KSk7XG4gICAgZm9yIChpID0gMDsgaSA8IHRpY2tzTGVuZ3RoOyBpICs9IHN0ZXApIHtcbiAgICAgIGNvbnN0IG9wdHNBdEluZGV4ID0gZ3JpZC5zZXRDb250ZXh0KHRoaXMuZ2V0Q29udGV4dChpKSk7XG4gICAgICBjb25zdCBsaW5lV2lkdGggPSBvcHRzQXRJbmRleC5saW5lV2lkdGg7XG4gICAgICBjb25zdCBsaW5lQ29sb3IgPSBvcHRzQXRJbmRleC5jb2xvcjtcbiAgICAgIGNvbnN0IGJvcmRlckRhc2ggPSBncmlkLmJvcmRlckRhc2ggfHwgW107XG4gICAgICBjb25zdCBib3JkZXJEYXNoT2Zmc2V0ID0gb3B0c0F0SW5kZXguYm9yZGVyRGFzaE9mZnNldDtcbiAgICAgIGNvbnN0IHRpY2tXaWR0aCA9IG9wdHNBdEluZGV4LnRpY2tXaWR0aDtcbiAgICAgIGNvbnN0IHRpY2tDb2xvciA9IG9wdHNBdEluZGV4LnRpY2tDb2xvcjtcbiAgICAgIGNvbnN0IHRpY2tCb3JkZXJEYXNoID0gb3B0c0F0SW5kZXgudGlja0JvcmRlckRhc2ggfHwgW107XG4gICAgICBjb25zdCB0aWNrQm9yZGVyRGFzaE9mZnNldCA9IG9wdHNBdEluZGV4LnRpY2tCb3JkZXJEYXNoT2Zmc2V0O1xuICAgICAgbGluZVZhbHVlID0gZ2V0UGl4ZWxGb3JHcmlkTGluZSh0aGlzLCBpLCBvZmZzZXQpO1xuICAgICAgaWYgKGxpbmVWYWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgYWxpZ25lZExpbmVWYWx1ZSA9IF9hbGlnblBpeGVsKGNoYXJ0LCBsaW5lVmFsdWUsIGxpbmVXaWR0aCk7XG4gICAgICBpZiAoaXNIb3Jpem9udGFsKSB7XG4gICAgICAgIHR4MSA9IHR4MiA9IHgxID0geDIgPSBhbGlnbmVkTGluZVZhbHVlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdHkxID0gdHkyID0geTEgPSB5MiA9IGFsaWduZWRMaW5lVmFsdWU7XG4gICAgICB9XG4gICAgICBpdGVtcy5wdXNoKHtcbiAgICAgICAgdHgxLFxuICAgICAgICB0eTEsXG4gICAgICAgIHR4MixcbiAgICAgICAgdHkyLFxuICAgICAgICB4MSxcbiAgICAgICAgeTEsXG4gICAgICAgIHgyLFxuICAgICAgICB5MixcbiAgICAgICAgd2lkdGg6IGxpbmVXaWR0aCxcbiAgICAgICAgY29sb3I6IGxpbmVDb2xvcixcbiAgICAgICAgYm9yZGVyRGFzaCxcbiAgICAgICAgYm9yZGVyRGFzaE9mZnNldCxcbiAgICAgICAgdGlja1dpZHRoLFxuICAgICAgICB0aWNrQ29sb3IsXG4gICAgICAgIHRpY2tCb3JkZXJEYXNoLFxuICAgICAgICB0aWNrQm9yZGVyRGFzaE9mZnNldCxcbiAgICAgIH0pO1xuICAgIH1cbiAgICB0aGlzLl90aWNrc0xlbmd0aCA9IHRpY2tzTGVuZ3RoO1xuICAgIHRoaXMuX2JvcmRlclZhbHVlID0gYm9yZGVyVmFsdWU7XG4gICAgcmV0dXJuIGl0ZW1zO1xuICB9XG4gIF9jb21wdXRlTGFiZWxJdGVtcyhjaGFydEFyZWEpIHtcbiAgICBjb25zdCBheGlzID0gdGhpcy5heGlzO1xuICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG4gICAgY29uc3Qge3Bvc2l0aW9uLCB0aWNrczogb3B0aW9uVGlja3N9ID0gb3B0aW9ucztcbiAgICBjb25zdCBpc0hvcml6b250YWwgPSB0aGlzLmlzSG9yaXpvbnRhbCgpO1xuICAgIGNvbnN0IHRpY2tzID0gdGhpcy50aWNrcztcbiAgICBjb25zdCB7YWxpZ24sIGNyb3NzQWxpZ24sIHBhZGRpbmcsIG1pcnJvcn0gPSBvcHRpb25UaWNrcztcbiAgICBjb25zdCB0bCA9IGdldFRpY2tNYXJrTGVuZ3RoKG9wdGlvbnMuZ3JpZCk7XG4gICAgY29uc3QgdGlja0FuZFBhZGRpbmcgPSB0bCArIHBhZGRpbmc7XG4gICAgY29uc3QgaFRpY2tBbmRQYWRkaW5nID0gbWlycm9yID8gLXBhZGRpbmcgOiB0aWNrQW5kUGFkZGluZztcbiAgICBjb25zdCByb3RhdGlvbiA9IC10b1JhZGlhbnModGhpcy5sYWJlbFJvdGF0aW9uKTtcbiAgICBjb25zdCBpdGVtcyA9IFtdO1xuICAgIGxldCBpLCBpbGVuLCB0aWNrLCBsYWJlbCwgeCwgeSwgdGV4dEFsaWduLCBwaXhlbCwgZm9udCwgbGluZUhlaWdodCwgbGluZUNvdW50LCB0ZXh0T2Zmc2V0O1xuICAgIGxldCB0ZXh0QmFzZWxpbmUgPSAnbWlkZGxlJztcbiAgICBpZiAocG9zaXRpb24gPT09ICd0b3AnKSB7XG4gICAgICB5ID0gdGhpcy5ib3R0b20gLSBoVGlja0FuZFBhZGRpbmc7XG4gICAgICB0ZXh0QWxpZ24gPSB0aGlzLl9nZXRYQXhpc0xhYmVsQWxpZ25tZW50KCk7XG4gICAgfSBlbHNlIGlmIChwb3NpdGlvbiA9PT0gJ2JvdHRvbScpIHtcbiAgICAgIHkgPSB0aGlzLnRvcCArIGhUaWNrQW5kUGFkZGluZztcbiAgICAgIHRleHRBbGlnbiA9IHRoaXMuX2dldFhBeGlzTGFiZWxBbGlnbm1lbnQoKTtcbiAgICB9IGVsc2UgaWYgKHBvc2l0aW9uID09PSAnbGVmdCcpIHtcbiAgICAgIGNvbnN0IHJldCA9IHRoaXMuX2dldFlBeGlzTGFiZWxBbGlnbm1lbnQodGwpO1xuICAgICAgdGV4dEFsaWduID0gcmV0LnRleHRBbGlnbjtcbiAgICAgIHggPSByZXQueDtcbiAgICB9IGVsc2UgaWYgKHBvc2l0aW9uID09PSAncmlnaHQnKSB7XG4gICAgICBjb25zdCByZXQgPSB0aGlzLl9nZXRZQXhpc0xhYmVsQWxpZ25tZW50KHRsKTtcbiAgICAgIHRleHRBbGlnbiA9IHJldC50ZXh0QWxpZ247XG4gICAgICB4ID0gcmV0Lng7XG4gICAgfSBlbHNlIGlmIChheGlzID09PSAneCcpIHtcbiAgICAgIGlmIChwb3NpdGlvbiA9PT0gJ2NlbnRlcicpIHtcbiAgICAgICAgeSA9ICgoY2hhcnRBcmVhLnRvcCArIGNoYXJ0QXJlYS5ib3R0b20pIC8gMikgKyB0aWNrQW5kUGFkZGluZztcbiAgICAgIH0gZWxzZSBpZiAoaXNPYmplY3QocG9zaXRpb24pKSB7XG4gICAgICAgIGNvbnN0IHBvc2l0aW9uQXhpc0lEID0gT2JqZWN0LmtleXMocG9zaXRpb24pWzBdO1xuICAgICAgICBjb25zdCB2YWx1ZSA9IHBvc2l0aW9uW3Bvc2l0aW9uQXhpc0lEXTtcbiAgICAgICAgeSA9IHRoaXMuY2hhcnQuc2NhbGVzW3Bvc2l0aW9uQXhpc0lEXS5nZXRQaXhlbEZvclZhbHVlKHZhbHVlKSArIHRpY2tBbmRQYWRkaW5nO1xuICAgICAgfVxuICAgICAgdGV4dEFsaWduID0gdGhpcy5fZ2V0WEF4aXNMYWJlbEFsaWdubWVudCgpO1xuICAgIH0gZWxzZSBpZiAoYXhpcyA9PT0gJ3knKSB7XG4gICAgICBpZiAocG9zaXRpb24gPT09ICdjZW50ZXInKSB7XG4gICAgICAgIHggPSAoKGNoYXJ0QXJlYS5sZWZ0ICsgY2hhcnRBcmVhLnJpZ2h0KSAvIDIpIC0gdGlja0FuZFBhZGRpbmc7XG4gICAgICB9IGVsc2UgaWYgKGlzT2JqZWN0KHBvc2l0aW9uKSkge1xuICAgICAgICBjb25zdCBwb3NpdGlvbkF4aXNJRCA9IE9iamVjdC5rZXlzKHBvc2l0aW9uKVswXTtcbiAgICAgICAgY29uc3QgdmFsdWUgPSBwb3NpdGlvbltwb3NpdGlvbkF4aXNJRF07XG4gICAgICAgIHggPSB0aGlzLmNoYXJ0LnNjYWxlc1twb3NpdGlvbkF4aXNJRF0uZ2V0UGl4ZWxGb3JWYWx1ZSh2YWx1ZSk7XG4gICAgICB9XG4gICAgICB0ZXh0QWxpZ24gPSB0aGlzLl9nZXRZQXhpc0xhYmVsQWxpZ25tZW50KHRsKS50ZXh0QWxpZ247XG4gICAgfVxuICAgIGlmIChheGlzID09PSAneScpIHtcbiAgICAgIGlmIChhbGlnbiA9PT0gJ3N0YXJ0Jykge1xuICAgICAgICB0ZXh0QmFzZWxpbmUgPSAndG9wJztcbiAgICAgIH0gZWxzZSBpZiAoYWxpZ24gPT09ICdlbmQnKSB7XG4gICAgICAgIHRleHRCYXNlbGluZSA9ICdib3R0b20nO1xuICAgICAgfVxuICAgIH1cbiAgICBjb25zdCBsYWJlbFNpemVzID0gdGhpcy5fZ2V0TGFiZWxTaXplcygpO1xuICAgIGZvciAoaSA9IDAsIGlsZW4gPSB0aWNrcy5sZW5ndGg7IGkgPCBpbGVuOyArK2kpIHtcbiAgICAgIHRpY2sgPSB0aWNrc1tpXTtcbiAgICAgIGxhYmVsID0gdGljay5sYWJlbDtcbiAgICAgIGNvbnN0IG9wdHNBdEluZGV4ID0gb3B0aW9uVGlja3Muc2V0Q29udGV4dCh0aGlzLmdldENvbnRleHQoaSkpO1xuICAgICAgcGl4ZWwgPSB0aGlzLmdldFBpeGVsRm9yVGljayhpKSArIG9wdGlvblRpY2tzLmxhYmVsT2Zmc2V0O1xuICAgICAgZm9udCA9IHRoaXMuX3Jlc29sdmVUaWNrRm9udE9wdGlvbnMoaSk7XG4gICAgICBsaW5lSGVpZ2h0ID0gZm9udC5saW5lSGVpZ2h0O1xuICAgICAgbGluZUNvdW50ID0gaXNBcnJheShsYWJlbCkgPyBsYWJlbC5sZW5ndGggOiAxO1xuICAgICAgY29uc3QgaGFsZkNvdW50ID0gbGluZUNvdW50IC8gMjtcbiAgICAgIGNvbnN0IGNvbG9yID0gb3B0c0F0SW5kZXguY29sb3I7XG4gICAgICBjb25zdCBzdHJva2VDb2xvciA9IG9wdHNBdEluZGV4LnRleHRTdHJva2VDb2xvcjtcbiAgICAgIGNvbnN0IHN0cm9rZVdpZHRoID0gb3B0c0F0SW5kZXgudGV4dFN0cm9rZVdpZHRoO1xuICAgICAgaWYgKGlzSG9yaXpvbnRhbCkge1xuICAgICAgICB4ID0gcGl4ZWw7XG4gICAgICAgIGlmIChwb3NpdGlvbiA9PT0gJ3RvcCcpIHtcbiAgICAgICAgICBpZiAoY3Jvc3NBbGlnbiA9PT0gJ25lYXInIHx8IHJvdGF0aW9uICE9PSAwKSB7XG4gICAgICAgICAgICB0ZXh0T2Zmc2V0ID0gLWxpbmVDb3VudCAqIGxpbmVIZWlnaHQgKyBsaW5lSGVpZ2h0IC8gMjtcbiAgICAgICAgICB9IGVsc2UgaWYgKGNyb3NzQWxpZ24gPT09ICdjZW50ZXInKSB7XG4gICAgICAgICAgICB0ZXh0T2Zmc2V0ID0gLWxhYmVsU2l6ZXMuaGlnaGVzdC5oZWlnaHQgLyAyIC0gaGFsZkNvdW50ICogbGluZUhlaWdodCArIGxpbmVIZWlnaHQ7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRleHRPZmZzZXQgPSAtbGFiZWxTaXplcy5oaWdoZXN0LmhlaWdodCArIGxpbmVIZWlnaHQgLyAyO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAoY3Jvc3NBbGlnbiA9PT0gJ25lYXInIHx8IHJvdGF0aW9uICE9PSAwKSB7XG4gICAgICAgICAgICB0ZXh0T2Zmc2V0ID0gbGluZUhlaWdodCAvIDI7XG4gICAgICAgICAgfSBlbHNlIGlmIChjcm9zc0FsaWduID09PSAnY2VudGVyJykge1xuICAgICAgICAgICAgdGV4dE9mZnNldCA9IGxhYmVsU2l6ZXMuaGlnaGVzdC5oZWlnaHQgLyAyIC0gaGFsZkNvdW50ICogbGluZUhlaWdodDtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGV4dE9mZnNldCA9IGxhYmVsU2l6ZXMuaGlnaGVzdC5oZWlnaHQgLSBsaW5lQ291bnQgKiBsaW5lSGVpZ2h0O1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAobWlycm9yKSB7XG4gICAgICAgICAgdGV4dE9mZnNldCAqPSAtMTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgeSA9IHBpeGVsO1xuICAgICAgICB0ZXh0T2Zmc2V0ID0gKDEgLSBsaW5lQ291bnQpICogbGluZUhlaWdodCAvIDI7XG4gICAgICB9XG4gICAgICBsZXQgYmFja2Ryb3A7XG4gICAgICBpZiAob3B0c0F0SW5kZXguc2hvd0xhYmVsQmFja2Ryb3ApIHtcbiAgICAgICAgY29uc3QgbGFiZWxQYWRkaW5nID0gdG9QYWRkaW5nKG9wdHNBdEluZGV4LmJhY2tkcm9wUGFkZGluZyk7XG4gICAgICAgIGNvbnN0IGhlaWdodCA9IGxhYmVsU2l6ZXMuaGVpZ2h0c1tpXTtcbiAgICAgICAgY29uc3Qgd2lkdGggPSBsYWJlbFNpemVzLndpZHRoc1tpXTtcbiAgICAgICAgbGV0IHRvcCA9IHkgKyB0ZXh0T2Zmc2V0IC0gbGFiZWxQYWRkaW5nLnRvcDtcbiAgICAgICAgbGV0IGxlZnQgPSB4IC0gbGFiZWxQYWRkaW5nLmxlZnQ7XG4gICAgICAgIHN3aXRjaCAodGV4dEJhc2VsaW5lKSB7XG4gICAgICAgIGNhc2UgJ21pZGRsZSc6XG4gICAgICAgICAgdG9wIC09IGhlaWdodCAvIDI7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ2JvdHRvbSc6XG4gICAgICAgICAgdG9wIC09IGhlaWdodDtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBzd2l0Y2ggKHRleHRBbGlnbikge1xuICAgICAgICBjYXNlICdjZW50ZXInOlxuICAgICAgICAgIGxlZnQgLT0gd2lkdGggLyAyO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdyaWdodCc6XG4gICAgICAgICAgbGVmdCAtPSB3aWR0aDtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBiYWNrZHJvcCA9IHtcbiAgICAgICAgICBsZWZ0LFxuICAgICAgICAgIHRvcCxcbiAgICAgICAgICB3aWR0aDogd2lkdGggKyBsYWJlbFBhZGRpbmcud2lkdGgsXG4gICAgICAgICAgaGVpZ2h0OiBoZWlnaHQgKyBsYWJlbFBhZGRpbmcuaGVpZ2h0LFxuICAgICAgICAgIGNvbG9yOiBvcHRzQXRJbmRleC5iYWNrZHJvcENvbG9yLFxuICAgICAgICB9O1xuICAgICAgfVxuICAgICAgaXRlbXMucHVzaCh7XG4gICAgICAgIHJvdGF0aW9uLFxuICAgICAgICBsYWJlbCxcbiAgICAgICAgZm9udCxcbiAgICAgICAgY29sb3IsXG4gICAgICAgIHN0cm9rZUNvbG9yLFxuICAgICAgICBzdHJva2VXaWR0aCxcbiAgICAgICAgdGV4dE9mZnNldCxcbiAgICAgICAgdGV4dEFsaWduLFxuICAgICAgICB0ZXh0QmFzZWxpbmUsXG4gICAgICAgIHRyYW5zbGF0aW9uOiBbeCwgeV0sXG4gICAgICAgIGJhY2tkcm9wLFxuICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBpdGVtcztcbiAgfVxuICBfZ2V0WEF4aXNMYWJlbEFsaWdubWVudCgpIHtcbiAgICBjb25zdCB7cG9zaXRpb24sIHRpY2tzfSA9IHRoaXMub3B0aW9ucztcbiAgICBjb25zdCByb3RhdGlvbiA9IC10b1JhZGlhbnModGhpcy5sYWJlbFJvdGF0aW9uKTtcbiAgICBpZiAocm90YXRpb24pIHtcbiAgICAgIHJldHVybiBwb3NpdGlvbiA9PT0gJ3RvcCcgPyAnbGVmdCcgOiAncmlnaHQnO1xuICAgIH1cbiAgICBsZXQgYWxpZ24gPSAnY2VudGVyJztcbiAgICBpZiAodGlja3MuYWxpZ24gPT09ICdzdGFydCcpIHtcbiAgICAgIGFsaWduID0gJ2xlZnQnO1xuICAgIH0gZWxzZSBpZiAodGlja3MuYWxpZ24gPT09ICdlbmQnKSB7XG4gICAgICBhbGlnbiA9ICdyaWdodCc7XG4gICAgfVxuICAgIHJldHVybiBhbGlnbjtcbiAgfVxuICBfZ2V0WUF4aXNMYWJlbEFsaWdubWVudCh0bCkge1xuICAgIGNvbnN0IHtwb3NpdGlvbiwgdGlja3M6IHtjcm9zc0FsaWduLCBtaXJyb3IsIHBhZGRpbmd9fSA9IHRoaXMub3B0aW9ucztcbiAgICBjb25zdCBsYWJlbFNpemVzID0gdGhpcy5fZ2V0TGFiZWxTaXplcygpO1xuICAgIGNvbnN0IHRpY2tBbmRQYWRkaW5nID0gdGwgKyBwYWRkaW5nO1xuICAgIGNvbnN0IHdpZGVzdCA9IGxhYmVsU2l6ZXMud2lkZXN0LndpZHRoO1xuICAgIGxldCB0ZXh0QWxpZ247XG4gICAgbGV0IHg7XG4gICAgaWYgKHBvc2l0aW9uID09PSAnbGVmdCcpIHtcbiAgICAgIGlmIChtaXJyb3IpIHtcbiAgICAgICAgeCA9IHRoaXMucmlnaHQgKyBwYWRkaW5nO1xuICAgICAgICBpZiAoY3Jvc3NBbGlnbiA9PT0gJ25lYXInKSB7XG4gICAgICAgICAgdGV4dEFsaWduID0gJ2xlZnQnO1xuICAgICAgICB9IGVsc2UgaWYgKGNyb3NzQWxpZ24gPT09ICdjZW50ZXInKSB7XG4gICAgICAgICAgdGV4dEFsaWduID0gJ2NlbnRlcic7XG4gICAgICAgICAgeCArPSAod2lkZXN0IC8gMik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGV4dEFsaWduID0gJ3JpZ2h0JztcbiAgICAgICAgICB4ICs9IHdpZGVzdDtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgeCA9IHRoaXMucmlnaHQgLSB0aWNrQW5kUGFkZGluZztcbiAgICAgICAgaWYgKGNyb3NzQWxpZ24gPT09ICduZWFyJykge1xuICAgICAgICAgIHRleHRBbGlnbiA9ICdyaWdodCc7XG4gICAgICAgIH0gZWxzZSBpZiAoY3Jvc3NBbGlnbiA9PT0gJ2NlbnRlcicpIHtcbiAgICAgICAgICB0ZXh0QWxpZ24gPSAnY2VudGVyJztcbiAgICAgICAgICB4IC09ICh3aWRlc3QgLyAyKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0ZXh0QWxpZ24gPSAnbGVmdCc7XG4gICAgICAgICAgeCA9IHRoaXMubGVmdDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSBpZiAocG9zaXRpb24gPT09ICdyaWdodCcpIHtcbiAgICAgIGlmIChtaXJyb3IpIHtcbiAgICAgICAgeCA9IHRoaXMubGVmdCArIHBhZGRpbmc7XG4gICAgICAgIGlmIChjcm9zc0FsaWduID09PSAnbmVhcicpIHtcbiAgICAgICAgICB0ZXh0QWxpZ24gPSAncmlnaHQnO1xuICAgICAgICB9IGVsc2UgaWYgKGNyb3NzQWxpZ24gPT09ICdjZW50ZXInKSB7XG4gICAgICAgICAgdGV4dEFsaWduID0gJ2NlbnRlcic7XG4gICAgICAgICAgeCAtPSAod2lkZXN0IC8gMik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGV4dEFsaWduID0gJ2xlZnQnO1xuICAgICAgICAgIHggLT0gd2lkZXN0O1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB4ID0gdGhpcy5sZWZ0ICsgdGlja0FuZFBhZGRpbmc7XG4gICAgICAgIGlmIChjcm9zc0FsaWduID09PSAnbmVhcicpIHtcbiAgICAgICAgICB0ZXh0QWxpZ24gPSAnbGVmdCc7XG4gICAgICAgIH0gZWxzZSBpZiAoY3Jvc3NBbGlnbiA9PT0gJ2NlbnRlcicpIHtcbiAgICAgICAgICB0ZXh0QWxpZ24gPSAnY2VudGVyJztcbiAgICAgICAgICB4ICs9IHdpZGVzdCAvIDI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGV4dEFsaWduID0gJ3JpZ2h0JztcbiAgICAgICAgICB4ID0gdGhpcy5yaWdodDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB0ZXh0QWxpZ24gPSAncmlnaHQnO1xuICAgIH1cbiAgICByZXR1cm4ge3RleHRBbGlnbiwgeH07XG4gIH1cbiAgX2NvbXB1dGVMYWJlbEFyZWEoKSB7XG4gICAgaWYgKHRoaXMub3B0aW9ucy50aWNrcy5taXJyb3IpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgY2hhcnQgPSB0aGlzLmNoYXJ0O1xuICAgIGNvbnN0IHBvc2l0aW9uID0gdGhpcy5vcHRpb25zLnBvc2l0aW9uO1xuICAgIGlmIChwb3NpdGlvbiA9PT0gJ2xlZnQnIHx8IHBvc2l0aW9uID09PSAncmlnaHQnKSB7XG4gICAgICByZXR1cm4ge3RvcDogMCwgbGVmdDogdGhpcy5sZWZ0LCBib3R0b206IGNoYXJ0LmhlaWdodCwgcmlnaHQ6IHRoaXMucmlnaHR9O1xuICAgIH0gaWYgKHBvc2l0aW9uID09PSAndG9wJyB8fCBwb3NpdGlvbiA9PT0gJ2JvdHRvbScpIHtcbiAgICAgIHJldHVybiB7dG9wOiB0aGlzLnRvcCwgbGVmdDogMCwgYm90dG9tOiB0aGlzLmJvdHRvbSwgcmlnaHQ6IGNoYXJ0LndpZHRofTtcbiAgICB9XG4gIH1cbiAgZHJhd0JhY2tncm91bmQoKSB7XG4gICAgY29uc3Qge2N0eCwgb3B0aW9uczoge2JhY2tncm91bmRDb2xvcn0sIGxlZnQsIHRvcCwgd2lkdGgsIGhlaWdodH0gPSB0aGlzO1xuICAgIGlmIChiYWNrZ3JvdW5kQ29sb3IpIHtcbiAgICAgIGN0eC5zYXZlKCk7XG4gICAgICBjdHguZmlsbFN0eWxlID0gYmFja2dyb3VuZENvbG9yO1xuICAgICAgY3R4LmZpbGxSZWN0KGxlZnQsIHRvcCwgd2lkdGgsIGhlaWdodCk7XG4gICAgICBjdHgucmVzdG9yZSgpO1xuICAgIH1cbiAgfVxuICBnZXRMaW5lV2lkdGhGb3JWYWx1ZSh2YWx1ZSkge1xuICAgIGNvbnN0IGdyaWQgPSB0aGlzLm9wdGlvbnMuZ3JpZDtcbiAgICBpZiAoIXRoaXMuX2lzVmlzaWJsZSgpIHx8ICFncmlkLmRpc3BsYXkpIHtcbiAgICAgIHJldHVybiAwO1xuICAgIH1cbiAgICBjb25zdCB0aWNrcyA9IHRoaXMudGlja3M7XG4gICAgY29uc3QgaW5kZXggPSB0aWNrcy5maW5kSW5kZXgodCA9PiB0LnZhbHVlID09PSB2YWx1ZSk7XG4gICAgaWYgKGluZGV4ID49IDApIHtcbiAgICAgIGNvbnN0IG9wdHMgPSBncmlkLnNldENvbnRleHQodGhpcy5nZXRDb250ZXh0KGluZGV4KSk7XG4gICAgICByZXR1cm4gb3B0cy5saW5lV2lkdGg7XG4gICAgfVxuICAgIHJldHVybiAwO1xuICB9XG4gIGRyYXdHcmlkKGNoYXJ0QXJlYSkge1xuICAgIGNvbnN0IGdyaWQgPSB0aGlzLm9wdGlvbnMuZ3JpZDtcbiAgICBjb25zdCBjdHggPSB0aGlzLmN0eDtcbiAgICBjb25zdCBpdGVtcyA9IHRoaXMuX2dyaWRMaW5lSXRlbXMgfHwgKHRoaXMuX2dyaWRMaW5lSXRlbXMgPSB0aGlzLl9jb21wdXRlR3JpZExpbmVJdGVtcyhjaGFydEFyZWEpKTtcbiAgICBsZXQgaSwgaWxlbjtcbiAgICBjb25zdCBkcmF3TGluZSA9IChwMSwgcDIsIHN0eWxlKSA9PiB7XG4gICAgICBpZiAoIXN0eWxlLndpZHRoIHx8ICFzdHlsZS5jb2xvcikge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBjdHguc2F2ZSgpO1xuICAgICAgY3R4LmxpbmVXaWR0aCA9IHN0eWxlLndpZHRoO1xuICAgICAgY3R4LnN0cm9rZVN0eWxlID0gc3R5bGUuY29sb3I7XG4gICAgICBjdHguc2V0TGluZURhc2goc3R5bGUuYm9yZGVyRGFzaCB8fCBbXSk7XG4gICAgICBjdHgubGluZURhc2hPZmZzZXQgPSBzdHlsZS5ib3JkZXJEYXNoT2Zmc2V0O1xuICAgICAgY3R4LmJlZ2luUGF0aCgpO1xuICAgICAgY3R4Lm1vdmVUbyhwMS54LCBwMS55KTtcbiAgICAgIGN0eC5saW5lVG8ocDIueCwgcDIueSk7XG4gICAgICBjdHguc3Ryb2tlKCk7XG4gICAgICBjdHgucmVzdG9yZSgpO1xuICAgIH07XG4gICAgaWYgKGdyaWQuZGlzcGxheSkge1xuICAgICAgZm9yIChpID0gMCwgaWxlbiA9IGl0ZW1zLmxlbmd0aDsgaSA8IGlsZW47ICsraSkge1xuICAgICAgICBjb25zdCBpdGVtID0gaXRlbXNbaV07XG4gICAgICAgIGlmIChncmlkLmRyYXdPbkNoYXJ0QXJlYSkge1xuICAgICAgICAgIGRyYXdMaW5lKFxuICAgICAgICAgICAge3g6IGl0ZW0ueDEsIHk6IGl0ZW0ueTF9LFxuICAgICAgICAgICAge3g6IGl0ZW0ueDIsIHk6IGl0ZW0ueTJ9LFxuICAgICAgICAgICAgaXRlbVxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGdyaWQuZHJhd1RpY2tzKSB7XG4gICAgICAgICAgZHJhd0xpbmUoXG4gICAgICAgICAgICB7eDogaXRlbS50eDEsIHk6IGl0ZW0udHkxfSxcbiAgICAgICAgICAgIHt4OiBpdGVtLnR4MiwgeTogaXRlbS50eTJ9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBjb2xvcjogaXRlbS50aWNrQ29sb3IsXG4gICAgICAgICAgICAgIHdpZHRoOiBpdGVtLnRpY2tXaWR0aCxcbiAgICAgICAgICAgICAgYm9yZGVyRGFzaDogaXRlbS50aWNrQm9yZGVyRGFzaCxcbiAgICAgICAgICAgICAgYm9yZGVyRGFzaE9mZnNldDogaXRlbS50aWNrQm9yZGVyRGFzaE9mZnNldFxuICAgICAgICAgICAgfVxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgZHJhd0JvcmRlcigpIHtcbiAgICBjb25zdCB7Y2hhcnQsIGN0eCwgb3B0aW9uczoge2dyaWR9fSA9IHRoaXM7XG4gICAgY29uc3QgYm9yZGVyT3B0cyA9IGdyaWQuc2V0Q29udGV4dCh0aGlzLmdldENvbnRleHQoKSk7XG4gICAgY29uc3QgYXhpc1dpZHRoID0gZ3JpZC5kcmF3Qm9yZGVyID8gYm9yZGVyT3B0cy5ib3JkZXJXaWR0aCA6IDA7XG4gICAgaWYgKCFheGlzV2lkdGgpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgbGFzdExpbmVXaWR0aCA9IGdyaWQuc2V0Q29udGV4dCh0aGlzLmdldENvbnRleHQoMCkpLmxpbmVXaWR0aDtcbiAgICBjb25zdCBib3JkZXJWYWx1ZSA9IHRoaXMuX2JvcmRlclZhbHVlO1xuICAgIGxldCB4MSwgeDIsIHkxLCB5MjtcbiAgICBpZiAodGhpcy5pc0hvcml6b250YWwoKSkge1xuICAgICAgeDEgPSBfYWxpZ25QaXhlbChjaGFydCwgdGhpcy5sZWZ0LCBheGlzV2lkdGgpIC0gYXhpc1dpZHRoIC8gMjtcbiAgICAgIHgyID0gX2FsaWduUGl4ZWwoY2hhcnQsIHRoaXMucmlnaHQsIGxhc3RMaW5lV2lkdGgpICsgbGFzdExpbmVXaWR0aCAvIDI7XG4gICAgICB5MSA9IHkyID0gYm9yZGVyVmFsdWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHkxID0gX2FsaWduUGl4ZWwoY2hhcnQsIHRoaXMudG9wLCBheGlzV2lkdGgpIC0gYXhpc1dpZHRoIC8gMjtcbiAgICAgIHkyID0gX2FsaWduUGl4ZWwoY2hhcnQsIHRoaXMuYm90dG9tLCBsYXN0TGluZVdpZHRoKSArIGxhc3RMaW5lV2lkdGggLyAyO1xuICAgICAgeDEgPSB4MiA9IGJvcmRlclZhbHVlO1xuICAgIH1cbiAgICBjdHguc2F2ZSgpO1xuICAgIGN0eC5saW5lV2lkdGggPSBib3JkZXJPcHRzLmJvcmRlcldpZHRoO1xuICAgIGN0eC5zdHJva2VTdHlsZSA9IGJvcmRlck9wdHMuYm9yZGVyQ29sb3I7XG4gICAgY3R4LmJlZ2luUGF0aCgpO1xuICAgIGN0eC5tb3ZlVG8oeDEsIHkxKTtcbiAgICBjdHgubGluZVRvKHgyLCB5Mik7XG4gICAgY3R4LnN0cm9rZSgpO1xuICAgIGN0eC5yZXN0b3JlKCk7XG4gIH1cbiAgZHJhd0xhYmVscyhjaGFydEFyZWEpIHtcbiAgICBjb25zdCBvcHRpb25UaWNrcyA9IHRoaXMub3B0aW9ucy50aWNrcztcbiAgICBpZiAoIW9wdGlvblRpY2tzLmRpc3BsYXkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgY3R4ID0gdGhpcy5jdHg7XG4gICAgY29uc3QgYXJlYSA9IHRoaXMuX2NvbXB1dGVMYWJlbEFyZWEoKTtcbiAgICBpZiAoYXJlYSkge1xuICAgICAgY2xpcEFyZWEoY3R4LCBhcmVhKTtcbiAgICB9XG4gICAgY29uc3QgaXRlbXMgPSB0aGlzLl9sYWJlbEl0ZW1zIHx8ICh0aGlzLl9sYWJlbEl0ZW1zID0gdGhpcy5fY29tcHV0ZUxhYmVsSXRlbXMoY2hhcnRBcmVhKSk7XG4gICAgbGV0IGksIGlsZW47XG4gICAgZm9yIChpID0gMCwgaWxlbiA9IGl0ZW1zLmxlbmd0aDsgaSA8IGlsZW47ICsraSkge1xuICAgICAgY29uc3QgaXRlbSA9IGl0ZW1zW2ldO1xuICAgICAgY29uc3QgdGlja0ZvbnQgPSBpdGVtLmZvbnQ7XG4gICAgICBjb25zdCBsYWJlbCA9IGl0ZW0ubGFiZWw7XG4gICAgICBpZiAoaXRlbS5iYWNrZHJvcCkge1xuICAgICAgICBjdHguZmlsbFN0eWxlID0gaXRlbS5iYWNrZHJvcC5jb2xvcjtcbiAgICAgICAgY3R4LmZpbGxSZWN0KGl0ZW0uYmFja2Ryb3AubGVmdCwgaXRlbS5iYWNrZHJvcC50b3AsIGl0ZW0uYmFja2Ryb3Aud2lkdGgsIGl0ZW0uYmFja2Ryb3AuaGVpZ2h0KTtcbiAgICAgIH1cbiAgICAgIGxldCB5ID0gaXRlbS50ZXh0T2Zmc2V0O1xuICAgICAgcmVuZGVyVGV4dChjdHgsIGxhYmVsLCAwLCB5LCB0aWNrRm9udCwgaXRlbSk7XG4gICAgfVxuICAgIGlmIChhcmVhKSB7XG4gICAgICB1bmNsaXBBcmVhKGN0eCk7XG4gICAgfVxuICB9XG4gIGRyYXdUaXRsZSgpIHtcbiAgICBjb25zdCB7Y3R4LCBvcHRpb25zOiB7cG9zaXRpb24sIHRpdGxlLCByZXZlcnNlfX0gPSB0aGlzO1xuICAgIGlmICghdGl0bGUuZGlzcGxheSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBmb250ID0gdG9Gb250KHRpdGxlLmZvbnQpO1xuICAgIGNvbnN0IHBhZGRpbmcgPSB0b1BhZGRpbmcodGl0bGUucGFkZGluZyk7XG4gICAgY29uc3QgYWxpZ24gPSB0aXRsZS5hbGlnbjtcbiAgICBsZXQgb2Zmc2V0ID0gZm9udC5saW5lSGVpZ2h0IC8gMjtcbiAgICBpZiAocG9zaXRpb24gPT09ICdib3R0b20nIHx8IHBvc2l0aW9uID09PSAnY2VudGVyJyB8fCBpc09iamVjdChwb3NpdGlvbikpIHtcbiAgICAgIG9mZnNldCArPSBwYWRkaW5nLmJvdHRvbTtcbiAgICAgIGlmIChpc0FycmF5KHRpdGxlLnRleHQpKSB7XG4gICAgICAgIG9mZnNldCArPSBmb250LmxpbmVIZWlnaHQgKiAodGl0bGUudGV4dC5sZW5ndGggLSAxKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgb2Zmc2V0ICs9IHBhZGRpbmcudG9wO1xuICAgIH1cbiAgICBjb25zdCB7dGl0bGVYLCB0aXRsZVksIG1heFdpZHRoLCByb3RhdGlvbn0gPSB0aXRsZUFyZ3ModGhpcywgb2Zmc2V0LCBwb3NpdGlvbiwgYWxpZ24pO1xuICAgIHJlbmRlclRleHQoY3R4LCB0aXRsZS50ZXh0LCAwLCAwLCBmb250LCB7XG4gICAgICBjb2xvcjogdGl0bGUuY29sb3IsXG4gICAgICBtYXhXaWR0aCxcbiAgICAgIHJvdGF0aW9uLFxuICAgICAgdGV4dEFsaWduOiB0aXRsZUFsaWduKGFsaWduLCBwb3NpdGlvbiwgcmV2ZXJzZSksXG4gICAgICB0ZXh0QmFzZWxpbmU6ICdtaWRkbGUnLFxuICAgICAgdHJhbnNsYXRpb246IFt0aXRsZVgsIHRpdGxlWV0sXG4gICAgfSk7XG4gIH1cbiAgZHJhdyhjaGFydEFyZWEpIHtcbiAgICBpZiAoIXRoaXMuX2lzVmlzaWJsZSgpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMuZHJhd0JhY2tncm91bmQoKTtcbiAgICB0aGlzLmRyYXdHcmlkKGNoYXJ0QXJlYSk7XG4gICAgdGhpcy5kcmF3Qm9yZGVyKCk7XG4gICAgdGhpcy5kcmF3VGl0bGUoKTtcbiAgICB0aGlzLmRyYXdMYWJlbHMoY2hhcnRBcmVhKTtcbiAgfVxuICBfbGF5ZXJzKCkge1xuICAgIGNvbnN0IG9wdHMgPSB0aGlzLm9wdGlvbnM7XG4gICAgY29uc3QgdHogPSBvcHRzLnRpY2tzICYmIG9wdHMudGlja3MueiB8fCAwO1xuICAgIGNvbnN0IGd6ID0gdmFsdWVPckRlZmF1bHQob3B0cy5ncmlkICYmIG9wdHMuZ3JpZC56LCAtMSk7XG4gICAgaWYgKCF0aGlzLl9pc1Zpc2libGUoKSB8fCB0aGlzLmRyYXcgIT09IFNjYWxlLnByb3RvdHlwZS5kcmF3KSB7XG4gICAgICByZXR1cm4gW3tcbiAgICAgICAgejogdHosXG4gICAgICAgIGRyYXc6IChjaGFydEFyZWEpID0+IHtcbiAgICAgICAgICB0aGlzLmRyYXcoY2hhcnRBcmVhKTtcbiAgICAgICAgfVxuICAgICAgfV07XG4gICAgfVxuICAgIHJldHVybiBbe1xuICAgICAgejogZ3osXG4gICAgICBkcmF3OiAoY2hhcnRBcmVhKSA9PiB7XG4gICAgICAgIHRoaXMuZHJhd0JhY2tncm91bmQoKTtcbiAgICAgICAgdGhpcy5kcmF3R3JpZChjaGFydEFyZWEpO1xuICAgICAgICB0aGlzLmRyYXdUaXRsZSgpO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIHo6IGd6ICsgMSxcbiAgICAgIGRyYXc6ICgpID0+IHtcbiAgICAgICAgdGhpcy5kcmF3Qm9yZGVyKCk7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAgejogdHosXG4gICAgICBkcmF3OiAoY2hhcnRBcmVhKSA9PiB7XG4gICAgICAgIHRoaXMuZHJhd0xhYmVscyhjaGFydEFyZWEpO1xuICAgICAgfVxuICAgIH1dO1xuICB9XG4gIGdldE1hdGNoaW5nVmlzaWJsZU1ldGFzKHR5cGUpIHtcbiAgICBjb25zdCBtZXRhcyA9IHRoaXMuY2hhcnQuZ2V0U29ydGVkVmlzaWJsZURhdGFzZXRNZXRhcygpO1xuICAgIGNvbnN0IGF4aXNJRCA9IHRoaXMuYXhpcyArICdBeGlzSUQnO1xuICAgIGNvbnN0IHJlc3VsdCA9IFtdO1xuICAgIGxldCBpLCBpbGVuO1xuICAgIGZvciAoaSA9IDAsIGlsZW4gPSBtZXRhcy5sZW5ndGg7IGkgPCBpbGVuOyArK2kpIHtcbiAgICAgIGNvbnN0IG1ldGEgPSBtZXRhc1tpXTtcbiAgICAgIGlmIChtZXRhW2F4aXNJRF0gPT09IHRoaXMuaWQgJiYgKCF0eXBlIHx8IG1ldGEudHlwZSA9PT0gdHlwZSkpIHtcbiAgICAgICAgcmVzdWx0LnB1c2gobWV0YSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbiAgX3Jlc29sdmVUaWNrRm9udE9wdGlvbnMoaW5kZXgpIHtcbiAgICBjb25zdCBvcHRzID0gdGhpcy5vcHRpb25zLnRpY2tzLnNldENvbnRleHQodGhpcy5nZXRDb250ZXh0KGluZGV4KSk7XG4gICAgcmV0dXJuIHRvRm9udChvcHRzLmZvbnQpO1xuICB9XG4gIF9tYXhEaWdpdHMoKSB7XG4gICAgY29uc3QgZm9udFNpemUgPSB0aGlzLl9yZXNvbHZlVGlja0ZvbnRPcHRpb25zKDApLmxpbmVIZWlnaHQ7XG4gICAgcmV0dXJuICh0aGlzLmlzSG9yaXpvbnRhbCgpID8gdGhpcy53aWR0aCA6IHRoaXMuaGVpZ2h0KSAvIGZvbnRTaXplO1xuICB9XG59XG5cbmNsYXNzIFR5cGVkUmVnaXN0cnkge1xuICBjb25zdHJ1Y3Rvcih0eXBlLCBzY29wZSwgb3ZlcnJpZGUpIHtcbiAgICB0aGlzLnR5cGUgPSB0eXBlO1xuICAgIHRoaXMuc2NvcGUgPSBzY29wZTtcbiAgICB0aGlzLm92ZXJyaWRlID0gb3ZlcnJpZGU7XG4gICAgdGhpcy5pdGVtcyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIH1cbiAgaXNGb3JUeXBlKHR5cGUpIHtcbiAgICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5pc1Byb3RvdHlwZU9mLmNhbGwodGhpcy50eXBlLnByb3RvdHlwZSwgdHlwZS5wcm90b3R5cGUpO1xuICB9XG4gIHJlZ2lzdGVyKGl0ZW0pIHtcbiAgICBjb25zdCBwcm90byA9IE9iamVjdC5nZXRQcm90b3R5cGVPZihpdGVtKTtcbiAgICBsZXQgcGFyZW50U2NvcGU7XG4gICAgaWYgKGlzSUNoYXJ0Q29tcG9uZW50KHByb3RvKSkge1xuICAgICAgcGFyZW50U2NvcGUgPSB0aGlzLnJlZ2lzdGVyKHByb3RvKTtcbiAgICB9XG4gICAgY29uc3QgaXRlbXMgPSB0aGlzLml0ZW1zO1xuICAgIGNvbnN0IGlkID0gaXRlbS5pZDtcbiAgICBjb25zdCBzY29wZSA9IHRoaXMuc2NvcGUgKyAnLicgKyBpZDtcbiAgICBpZiAoIWlkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ2NsYXNzIGRvZXMgbm90IGhhdmUgaWQ6ICcgKyBpdGVtKTtcbiAgICB9XG4gICAgaWYgKGlkIGluIGl0ZW1zKSB7XG4gICAgICByZXR1cm4gc2NvcGU7XG4gICAgfVxuICAgIGl0ZW1zW2lkXSA9IGl0ZW07XG4gICAgcmVnaXN0ZXJEZWZhdWx0cyhpdGVtLCBzY29wZSwgcGFyZW50U2NvcGUpO1xuICAgIGlmICh0aGlzLm92ZXJyaWRlKSB7XG4gICAgICBkZWZhdWx0cy5vdmVycmlkZShpdGVtLmlkLCBpdGVtLm92ZXJyaWRlcyk7XG4gICAgfVxuICAgIHJldHVybiBzY29wZTtcbiAgfVxuICBnZXQoaWQpIHtcbiAgICByZXR1cm4gdGhpcy5pdGVtc1tpZF07XG4gIH1cbiAgdW5yZWdpc3RlcihpdGVtKSB7XG4gICAgY29uc3QgaXRlbXMgPSB0aGlzLml0ZW1zO1xuICAgIGNvbnN0IGlkID0gaXRlbS5pZDtcbiAgICBjb25zdCBzY29wZSA9IHRoaXMuc2NvcGU7XG4gICAgaWYgKGlkIGluIGl0ZW1zKSB7XG4gICAgICBkZWxldGUgaXRlbXNbaWRdO1xuICAgIH1cbiAgICBpZiAoc2NvcGUgJiYgaWQgaW4gZGVmYXVsdHNbc2NvcGVdKSB7XG4gICAgICBkZWxldGUgZGVmYXVsdHNbc2NvcGVdW2lkXTtcbiAgICAgIGlmICh0aGlzLm92ZXJyaWRlKSB7XG4gICAgICAgIGRlbGV0ZSBvdmVycmlkZXNbaWRdO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuZnVuY3Rpb24gcmVnaXN0ZXJEZWZhdWx0cyhpdGVtLCBzY29wZSwgcGFyZW50U2NvcGUpIHtcbiAgY29uc3QgaXRlbURlZmF1bHRzID0gbWVyZ2UoT2JqZWN0LmNyZWF0ZShudWxsKSwgW1xuICAgIHBhcmVudFNjb3BlID8gZGVmYXVsdHMuZ2V0KHBhcmVudFNjb3BlKSA6IHt9LFxuICAgIGRlZmF1bHRzLmdldChzY29wZSksXG4gICAgaXRlbS5kZWZhdWx0c1xuICBdKTtcbiAgZGVmYXVsdHMuc2V0KHNjb3BlLCBpdGVtRGVmYXVsdHMpO1xuICBpZiAoaXRlbS5kZWZhdWx0Um91dGVzKSB7XG4gICAgcm91dGVEZWZhdWx0cyhzY29wZSwgaXRlbS5kZWZhdWx0Um91dGVzKTtcbiAgfVxuICBpZiAoaXRlbS5kZXNjcmlwdG9ycykge1xuICAgIGRlZmF1bHRzLmRlc2NyaWJlKHNjb3BlLCBpdGVtLmRlc2NyaXB0b3JzKTtcbiAgfVxufVxuZnVuY3Rpb24gcm91dGVEZWZhdWx0cyhzY29wZSwgcm91dGVzKSB7XG4gIE9iamVjdC5rZXlzKHJvdXRlcykuZm9yRWFjaChwcm9wZXJ0eSA9PiB7XG4gICAgY29uc3QgcHJvcGVydHlQYXJ0cyA9IHByb3BlcnR5LnNwbGl0KCcuJyk7XG4gICAgY29uc3Qgc291cmNlTmFtZSA9IHByb3BlcnR5UGFydHMucG9wKCk7XG4gICAgY29uc3Qgc291cmNlU2NvcGUgPSBbc2NvcGVdLmNvbmNhdChwcm9wZXJ0eVBhcnRzKS5qb2luKCcuJyk7XG4gICAgY29uc3QgcGFydHMgPSByb3V0ZXNbcHJvcGVydHldLnNwbGl0KCcuJyk7XG4gICAgY29uc3QgdGFyZ2V0TmFtZSA9IHBhcnRzLnBvcCgpO1xuICAgIGNvbnN0IHRhcmdldFNjb3BlID0gcGFydHMuam9pbignLicpO1xuICAgIGRlZmF1bHRzLnJvdXRlKHNvdXJjZVNjb3BlLCBzb3VyY2VOYW1lLCB0YXJnZXRTY29wZSwgdGFyZ2V0TmFtZSk7XG4gIH0pO1xufVxuZnVuY3Rpb24gaXNJQ2hhcnRDb21wb25lbnQocHJvdG8pIHtcbiAgcmV0dXJuICdpZCcgaW4gcHJvdG8gJiYgJ2RlZmF1bHRzJyBpbiBwcm90bztcbn1cblxuY2xhc3MgUmVnaXN0cnkge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLmNvbnRyb2xsZXJzID0gbmV3IFR5cGVkUmVnaXN0cnkoRGF0YXNldENvbnRyb2xsZXIsICdkYXRhc2V0cycsIHRydWUpO1xuICAgIHRoaXMuZWxlbWVudHMgPSBuZXcgVHlwZWRSZWdpc3RyeShFbGVtZW50LCAnZWxlbWVudHMnKTtcbiAgICB0aGlzLnBsdWdpbnMgPSBuZXcgVHlwZWRSZWdpc3RyeShPYmplY3QsICdwbHVnaW5zJyk7XG4gICAgdGhpcy5zY2FsZXMgPSBuZXcgVHlwZWRSZWdpc3RyeShTY2FsZSwgJ3NjYWxlcycpO1xuICAgIHRoaXMuX3R5cGVkUmVnaXN0cmllcyA9IFt0aGlzLmNvbnRyb2xsZXJzLCB0aGlzLnNjYWxlcywgdGhpcy5lbGVtZW50c107XG4gIH1cbiAgYWRkKC4uLmFyZ3MpIHtcbiAgICB0aGlzLl9lYWNoKCdyZWdpc3RlcicsIGFyZ3MpO1xuICB9XG4gIHJlbW92ZSguLi5hcmdzKSB7XG4gICAgdGhpcy5fZWFjaCgndW5yZWdpc3RlcicsIGFyZ3MpO1xuICB9XG4gIGFkZENvbnRyb2xsZXJzKC4uLmFyZ3MpIHtcbiAgICB0aGlzLl9lYWNoKCdyZWdpc3RlcicsIGFyZ3MsIHRoaXMuY29udHJvbGxlcnMpO1xuICB9XG4gIGFkZEVsZW1lbnRzKC4uLmFyZ3MpIHtcbiAgICB0aGlzLl9lYWNoKCdyZWdpc3RlcicsIGFyZ3MsIHRoaXMuZWxlbWVudHMpO1xuICB9XG4gIGFkZFBsdWdpbnMoLi4uYXJncykge1xuICAgIHRoaXMuX2VhY2goJ3JlZ2lzdGVyJywgYXJncywgdGhpcy5wbHVnaW5zKTtcbiAgfVxuICBhZGRTY2FsZXMoLi4uYXJncykge1xuICAgIHRoaXMuX2VhY2goJ3JlZ2lzdGVyJywgYXJncywgdGhpcy5zY2FsZXMpO1xuICB9XG4gIGdldENvbnRyb2xsZXIoaWQpIHtcbiAgICByZXR1cm4gdGhpcy5fZ2V0KGlkLCB0aGlzLmNvbnRyb2xsZXJzLCAnY29udHJvbGxlcicpO1xuICB9XG4gIGdldEVsZW1lbnQoaWQpIHtcbiAgICByZXR1cm4gdGhpcy5fZ2V0KGlkLCB0aGlzLmVsZW1lbnRzLCAnZWxlbWVudCcpO1xuICB9XG4gIGdldFBsdWdpbihpZCkge1xuICAgIHJldHVybiB0aGlzLl9nZXQoaWQsIHRoaXMucGx1Z2lucywgJ3BsdWdpbicpO1xuICB9XG4gIGdldFNjYWxlKGlkKSB7XG4gICAgcmV0dXJuIHRoaXMuX2dldChpZCwgdGhpcy5zY2FsZXMsICdzY2FsZScpO1xuICB9XG4gIHJlbW92ZUNvbnRyb2xsZXJzKC4uLmFyZ3MpIHtcbiAgICB0aGlzLl9lYWNoKCd1bnJlZ2lzdGVyJywgYXJncywgdGhpcy5jb250cm9sbGVycyk7XG4gIH1cbiAgcmVtb3ZlRWxlbWVudHMoLi4uYXJncykge1xuICAgIHRoaXMuX2VhY2goJ3VucmVnaXN0ZXInLCBhcmdzLCB0aGlzLmVsZW1lbnRzKTtcbiAgfVxuICByZW1vdmVQbHVnaW5zKC4uLmFyZ3MpIHtcbiAgICB0aGlzLl9lYWNoKCd1bnJlZ2lzdGVyJywgYXJncywgdGhpcy5wbHVnaW5zKTtcbiAgfVxuICByZW1vdmVTY2FsZXMoLi4uYXJncykge1xuICAgIHRoaXMuX2VhY2goJ3VucmVnaXN0ZXInLCBhcmdzLCB0aGlzLnNjYWxlcyk7XG4gIH1cbiAgX2VhY2gobWV0aG9kLCBhcmdzLCB0eXBlZFJlZ2lzdHJ5KSB7XG4gICAgWy4uLmFyZ3NdLmZvckVhY2goYXJnID0+IHtcbiAgICAgIGNvbnN0IHJlZyA9IHR5cGVkUmVnaXN0cnkgfHwgdGhpcy5fZ2V0UmVnaXN0cnlGb3JUeXBlKGFyZyk7XG4gICAgICBpZiAodHlwZWRSZWdpc3RyeSB8fCByZWcuaXNGb3JUeXBlKGFyZykgfHwgKHJlZyA9PT0gdGhpcy5wbHVnaW5zICYmIGFyZy5pZCkpIHtcbiAgICAgICAgdGhpcy5fZXhlYyhtZXRob2QsIHJlZywgYXJnKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGVhY2goYXJnLCBpdGVtID0+IHtcbiAgICAgICAgICBjb25zdCBpdGVtUmVnID0gdHlwZWRSZWdpc3RyeSB8fCB0aGlzLl9nZXRSZWdpc3RyeUZvclR5cGUoaXRlbSk7XG4gICAgICAgICAgdGhpcy5fZXhlYyhtZXRob2QsIGl0ZW1SZWcsIGl0ZW0pO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuICBfZXhlYyhtZXRob2QsIHJlZ2lzdHJ5LCBjb21wb25lbnQpIHtcbiAgICBjb25zdCBjYW1lbE1ldGhvZCA9IF9jYXBpdGFsaXplKG1ldGhvZCk7XG4gICAgY2FsbGJhY2soY29tcG9uZW50WydiZWZvcmUnICsgY2FtZWxNZXRob2RdLCBbXSwgY29tcG9uZW50KTtcbiAgICByZWdpc3RyeVttZXRob2RdKGNvbXBvbmVudCk7XG4gICAgY2FsbGJhY2soY29tcG9uZW50WydhZnRlcicgKyBjYW1lbE1ldGhvZF0sIFtdLCBjb21wb25lbnQpO1xuICB9XG4gIF9nZXRSZWdpc3RyeUZvclR5cGUodHlwZSkge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5fdHlwZWRSZWdpc3RyaWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBjb25zdCByZWcgPSB0aGlzLl90eXBlZFJlZ2lzdHJpZXNbaV07XG4gICAgICBpZiAocmVnLmlzRm9yVHlwZSh0eXBlKSkge1xuICAgICAgICByZXR1cm4gcmVnO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdGhpcy5wbHVnaW5zO1xuICB9XG4gIF9nZXQoaWQsIHR5cGVkUmVnaXN0cnksIHR5cGUpIHtcbiAgICBjb25zdCBpdGVtID0gdHlwZWRSZWdpc3RyeS5nZXQoaWQpO1xuICAgIGlmIChpdGVtID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignXCInICsgaWQgKyAnXCIgaXMgbm90IGEgcmVnaXN0ZXJlZCAnICsgdHlwZSArICcuJyk7XG4gICAgfVxuICAgIHJldHVybiBpdGVtO1xuICB9XG59XG52YXIgcmVnaXN0cnkgPSBuZXcgUmVnaXN0cnkoKTtcblxuY2xhc3MgUGx1Z2luU2VydmljZSB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuX2luaXQgPSBbXTtcbiAgfVxuICBub3RpZnkoY2hhcnQsIGhvb2ssIGFyZ3MsIGZpbHRlcikge1xuICAgIGlmIChob29rID09PSAnYmVmb3JlSW5pdCcpIHtcbiAgICAgIHRoaXMuX2luaXQgPSB0aGlzLl9jcmVhdGVEZXNjcmlwdG9ycyhjaGFydCwgdHJ1ZSk7XG4gICAgICB0aGlzLl9ub3RpZnkodGhpcy5faW5pdCwgY2hhcnQsICdpbnN0YWxsJyk7XG4gICAgfVxuICAgIGNvbnN0IGRlc2NyaXB0b3JzID0gZmlsdGVyID8gdGhpcy5fZGVzY3JpcHRvcnMoY2hhcnQpLmZpbHRlcihmaWx0ZXIpIDogdGhpcy5fZGVzY3JpcHRvcnMoY2hhcnQpO1xuICAgIGNvbnN0IHJlc3VsdCA9IHRoaXMuX25vdGlmeShkZXNjcmlwdG9ycywgY2hhcnQsIGhvb2ssIGFyZ3MpO1xuICAgIGlmIChob29rID09PSAnYWZ0ZXJEZXN0cm95Jykge1xuICAgICAgdGhpcy5fbm90aWZ5KGRlc2NyaXB0b3JzLCBjaGFydCwgJ3N0b3AnKTtcbiAgICAgIHRoaXMuX25vdGlmeSh0aGlzLl9pbml0LCBjaGFydCwgJ3VuaW5zdGFsbCcpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG4gIF9ub3RpZnkoZGVzY3JpcHRvcnMsIGNoYXJ0LCBob29rLCBhcmdzKSB7XG4gICAgYXJncyA9IGFyZ3MgfHwge307XG4gICAgZm9yIChjb25zdCBkZXNjcmlwdG9yIG9mIGRlc2NyaXB0b3JzKSB7XG4gICAgICBjb25zdCBwbHVnaW4gPSBkZXNjcmlwdG9yLnBsdWdpbjtcbiAgICAgIGNvbnN0IG1ldGhvZCA9IHBsdWdpbltob29rXTtcbiAgICAgIGNvbnN0IHBhcmFtcyA9IFtjaGFydCwgYXJncywgZGVzY3JpcHRvci5vcHRpb25zXTtcbiAgICAgIGlmIChjYWxsYmFjayhtZXRob2QsIHBhcmFtcywgcGx1Z2luKSA9PT0gZmFsc2UgJiYgYXJncy5jYW5jZWxhYmxlKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgaW52YWxpZGF0ZSgpIHtcbiAgICBpZiAoIWlzTnVsbE9yVW5kZWYodGhpcy5fY2FjaGUpKSB7XG4gICAgICB0aGlzLl9vbGRDYWNoZSA9IHRoaXMuX2NhY2hlO1xuICAgICAgdGhpcy5fY2FjaGUgPSB1bmRlZmluZWQ7XG4gICAgfVxuICB9XG4gIF9kZXNjcmlwdG9ycyhjaGFydCkge1xuICAgIGlmICh0aGlzLl9jYWNoZSkge1xuICAgICAgcmV0dXJuIHRoaXMuX2NhY2hlO1xuICAgIH1cbiAgICBjb25zdCBkZXNjcmlwdG9ycyA9IHRoaXMuX2NhY2hlID0gdGhpcy5fY3JlYXRlRGVzY3JpcHRvcnMoY2hhcnQpO1xuICAgIHRoaXMuX25vdGlmeVN0YXRlQ2hhbmdlcyhjaGFydCk7XG4gICAgcmV0dXJuIGRlc2NyaXB0b3JzO1xuICB9XG4gIF9jcmVhdGVEZXNjcmlwdG9ycyhjaGFydCwgYWxsKSB7XG4gICAgY29uc3QgY29uZmlnID0gY2hhcnQgJiYgY2hhcnQuY29uZmlnO1xuICAgIGNvbnN0IG9wdGlvbnMgPSB2YWx1ZU9yRGVmYXVsdChjb25maWcub3B0aW9ucyAmJiBjb25maWcub3B0aW9ucy5wbHVnaW5zLCB7fSk7XG4gICAgY29uc3QgcGx1Z2lucyA9IGFsbFBsdWdpbnMoY29uZmlnKTtcbiAgICByZXR1cm4gb3B0aW9ucyA9PT0gZmFsc2UgJiYgIWFsbCA/IFtdIDogY3JlYXRlRGVzY3JpcHRvcnMoY2hhcnQsIHBsdWdpbnMsIG9wdGlvbnMsIGFsbCk7XG4gIH1cbiAgX25vdGlmeVN0YXRlQ2hhbmdlcyhjaGFydCkge1xuICAgIGNvbnN0IHByZXZpb3VzRGVzY3JpcHRvcnMgPSB0aGlzLl9vbGRDYWNoZSB8fCBbXTtcbiAgICBjb25zdCBkZXNjcmlwdG9ycyA9IHRoaXMuX2NhY2hlO1xuICAgIGNvbnN0IGRpZmYgPSAoYSwgYikgPT4gYS5maWx0ZXIoeCA9PiAhYi5zb21lKHkgPT4geC5wbHVnaW4uaWQgPT09IHkucGx1Z2luLmlkKSk7XG4gICAgdGhpcy5fbm90aWZ5KGRpZmYocHJldmlvdXNEZXNjcmlwdG9ycywgZGVzY3JpcHRvcnMpLCBjaGFydCwgJ3N0b3AnKTtcbiAgICB0aGlzLl9ub3RpZnkoZGlmZihkZXNjcmlwdG9ycywgcHJldmlvdXNEZXNjcmlwdG9ycyksIGNoYXJ0LCAnc3RhcnQnKTtcbiAgfVxufVxuZnVuY3Rpb24gYWxsUGx1Z2lucyhjb25maWcpIHtcbiAgY29uc3QgcGx1Z2lucyA9IFtdO1xuICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXMocmVnaXN0cnkucGx1Z2lucy5pdGVtcyk7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7IGkrKykge1xuICAgIHBsdWdpbnMucHVzaChyZWdpc3RyeS5nZXRQbHVnaW4oa2V5c1tpXSkpO1xuICB9XG4gIGNvbnN0IGxvY2FsID0gY29uZmlnLnBsdWdpbnMgfHwgW107XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgbG9jYWwubGVuZ3RoOyBpKyspIHtcbiAgICBjb25zdCBwbHVnaW4gPSBsb2NhbFtpXTtcbiAgICBpZiAocGx1Z2lucy5pbmRleE9mKHBsdWdpbikgPT09IC0xKSB7XG4gICAgICBwbHVnaW5zLnB1c2gocGx1Z2luKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHBsdWdpbnM7XG59XG5mdW5jdGlvbiBnZXRPcHRzKG9wdGlvbnMsIGFsbCkge1xuICBpZiAoIWFsbCAmJiBvcHRpb25zID09PSBmYWxzZSkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIGlmIChvcHRpb25zID09PSB0cnVlKSB7XG4gICAgcmV0dXJuIHt9O1xuICB9XG4gIHJldHVybiBvcHRpb25zO1xufVxuZnVuY3Rpb24gY3JlYXRlRGVzY3JpcHRvcnMoY2hhcnQsIHBsdWdpbnMsIG9wdGlvbnMsIGFsbCkge1xuICBjb25zdCByZXN1bHQgPSBbXTtcbiAgY29uc3QgY29udGV4dCA9IGNoYXJ0LmdldENvbnRleHQoKTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBwbHVnaW5zLmxlbmd0aDsgaSsrKSB7XG4gICAgY29uc3QgcGx1Z2luID0gcGx1Z2luc1tpXTtcbiAgICBjb25zdCBpZCA9IHBsdWdpbi5pZDtcbiAgICBjb25zdCBvcHRzID0gZ2V0T3B0cyhvcHRpb25zW2lkXSwgYWxsKTtcbiAgICBpZiAob3B0cyA9PT0gbnVsbCkge1xuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIHJlc3VsdC5wdXNoKHtcbiAgICAgIHBsdWdpbixcbiAgICAgIG9wdGlvbnM6IHBsdWdpbk9wdHMoY2hhcnQuY29uZmlnLCBwbHVnaW4sIG9wdHMsIGNvbnRleHQpXG4gICAgfSk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cbmZ1bmN0aW9uIHBsdWdpbk9wdHMoY29uZmlnLCBwbHVnaW4sIG9wdHMsIGNvbnRleHQpIHtcbiAgY29uc3Qga2V5cyA9IGNvbmZpZy5wbHVnaW5TY29wZUtleXMocGx1Z2luKTtcbiAgY29uc3Qgc2NvcGVzID0gY29uZmlnLmdldE9wdGlvblNjb3BlcyhvcHRzLCBrZXlzKTtcbiAgcmV0dXJuIGNvbmZpZy5jcmVhdGVSZXNvbHZlcihzY29wZXMsIGNvbnRleHQsIFsnJ10sIHtzY3JpcHRhYmxlOiBmYWxzZSwgaW5kZXhhYmxlOiBmYWxzZSwgYWxsS2V5czogdHJ1ZX0pO1xufVxuXG5mdW5jdGlvbiBnZXRJbmRleEF4aXModHlwZSwgb3B0aW9ucykge1xuICBjb25zdCBkYXRhc2V0RGVmYXVsdHMgPSBkZWZhdWx0cy5kYXRhc2V0c1t0eXBlXSB8fCB7fTtcbiAgY29uc3QgZGF0YXNldE9wdGlvbnMgPSAob3B0aW9ucy5kYXRhc2V0cyB8fCB7fSlbdHlwZV0gfHwge307XG4gIHJldHVybiBkYXRhc2V0T3B0aW9ucy5pbmRleEF4aXMgfHwgb3B0aW9ucy5pbmRleEF4aXMgfHwgZGF0YXNldERlZmF1bHRzLmluZGV4QXhpcyB8fCAneCc7XG59XG5mdW5jdGlvbiBnZXRBeGlzRnJvbURlZmF1bHRTY2FsZUlEKGlkLCBpbmRleEF4aXMpIHtcbiAgbGV0IGF4aXMgPSBpZDtcbiAgaWYgKGlkID09PSAnX2luZGV4XycpIHtcbiAgICBheGlzID0gaW5kZXhBeGlzO1xuICB9IGVsc2UgaWYgKGlkID09PSAnX3ZhbHVlXycpIHtcbiAgICBheGlzID0gaW5kZXhBeGlzID09PSAneCcgPyAneScgOiAneCc7XG4gIH1cbiAgcmV0dXJuIGF4aXM7XG59XG5mdW5jdGlvbiBnZXREZWZhdWx0U2NhbGVJREZyb21BeGlzKGF4aXMsIGluZGV4QXhpcykge1xuICByZXR1cm4gYXhpcyA9PT0gaW5kZXhBeGlzID8gJ19pbmRleF8nIDogJ192YWx1ZV8nO1xufVxuZnVuY3Rpb24gYXhpc0Zyb21Qb3NpdGlvbihwb3NpdGlvbikge1xuICBpZiAocG9zaXRpb24gPT09ICd0b3AnIHx8IHBvc2l0aW9uID09PSAnYm90dG9tJykge1xuICAgIHJldHVybiAneCc7XG4gIH1cbiAgaWYgKHBvc2l0aW9uID09PSAnbGVmdCcgfHwgcG9zaXRpb24gPT09ICdyaWdodCcpIHtcbiAgICByZXR1cm4gJ3knO1xuICB9XG59XG5mdW5jdGlvbiBkZXRlcm1pbmVBeGlzKGlkLCBzY2FsZU9wdGlvbnMpIHtcbiAgaWYgKGlkID09PSAneCcgfHwgaWQgPT09ICd5Jykge1xuICAgIHJldHVybiBpZDtcbiAgfVxuICByZXR1cm4gc2NhbGVPcHRpb25zLmF4aXMgfHwgYXhpc0Zyb21Qb3NpdGlvbihzY2FsZU9wdGlvbnMucG9zaXRpb24pIHx8IGlkLmNoYXJBdCgwKS50b0xvd2VyQ2FzZSgpO1xufVxuZnVuY3Rpb24gbWVyZ2VTY2FsZUNvbmZpZyhjb25maWcsIG9wdGlvbnMpIHtcbiAgY29uc3QgY2hhcnREZWZhdWx0cyA9IG92ZXJyaWRlc1tjb25maWcudHlwZV0gfHwge3NjYWxlczoge319O1xuICBjb25zdCBjb25maWdTY2FsZXMgPSBvcHRpb25zLnNjYWxlcyB8fCB7fTtcbiAgY29uc3QgY2hhcnRJbmRleEF4aXMgPSBnZXRJbmRleEF4aXMoY29uZmlnLnR5cGUsIG9wdGlvbnMpO1xuICBjb25zdCBmaXJzdElEcyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIGNvbnN0IHNjYWxlcyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIE9iamVjdC5rZXlzKGNvbmZpZ1NjYWxlcykuZm9yRWFjaChpZCA9PiB7XG4gICAgY29uc3Qgc2NhbGVDb25mID0gY29uZmlnU2NhbGVzW2lkXTtcbiAgICBpZiAoIWlzT2JqZWN0KHNjYWxlQ29uZikpIHtcbiAgICAgIHJldHVybiBjb25zb2xlLmVycm9yKGBJbnZhbGlkIHNjYWxlIGNvbmZpZ3VyYXRpb24gZm9yIHNjYWxlOiAke2lkfWApO1xuICAgIH1cbiAgICBpZiAoc2NhbGVDb25mLl9wcm94eSkge1xuICAgICAgcmV0dXJuIGNvbnNvbGUud2FybihgSWdub3JpbmcgcmVzb2x2ZXIgcGFzc2VkIGFzIG9wdGlvbnMgZm9yIHNjYWxlOiAke2lkfWApO1xuICAgIH1cbiAgICBjb25zdCBheGlzID0gZGV0ZXJtaW5lQXhpcyhpZCwgc2NhbGVDb25mKTtcbiAgICBjb25zdCBkZWZhdWx0SWQgPSBnZXREZWZhdWx0U2NhbGVJREZyb21BeGlzKGF4aXMsIGNoYXJ0SW5kZXhBeGlzKTtcbiAgICBjb25zdCBkZWZhdWx0U2NhbGVPcHRpb25zID0gY2hhcnREZWZhdWx0cy5zY2FsZXMgfHwge307XG4gICAgZmlyc3RJRHNbYXhpc10gPSBmaXJzdElEc1theGlzXSB8fCBpZDtcbiAgICBzY2FsZXNbaWRdID0gbWVyZ2VJZihPYmplY3QuY3JlYXRlKG51bGwpLCBbe2F4aXN9LCBzY2FsZUNvbmYsIGRlZmF1bHRTY2FsZU9wdGlvbnNbYXhpc10sIGRlZmF1bHRTY2FsZU9wdGlvbnNbZGVmYXVsdElkXV0pO1xuICB9KTtcbiAgY29uZmlnLmRhdGEuZGF0YXNldHMuZm9yRWFjaChkYXRhc2V0ID0+IHtcbiAgICBjb25zdCB0eXBlID0gZGF0YXNldC50eXBlIHx8IGNvbmZpZy50eXBlO1xuICAgIGNvbnN0IGluZGV4QXhpcyA9IGRhdGFzZXQuaW5kZXhBeGlzIHx8IGdldEluZGV4QXhpcyh0eXBlLCBvcHRpb25zKTtcbiAgICBjb25zdCBkYXRhc2V0RGVmYXVsdHMgPSBvdmVycmlkZXNbdHlwZV0gfHwge307XG4gICAgY29uc3QgZGVmYXVsdFNjYWxlT3B0aW9ucyA9IGRhdGFzZXREZWZhdWx0cy5zY2FsZXMgfHwge307XG4gICAgT2JqZWN0LmtleXMoZGVmYXVsdFNjYWxlT3B0aW9ucykuZm9yRWFjaChkZWZhdWx0SUQgPT4ge1xuICAgICAgY29uc3QgYXhpcyA9IGdldEF4aXNGcm9tRGVmYXVsdFNjYWxlSUQoZGVmYXVsdElELCBpbmRleEF4aXMpO1xuICAgICAgY29uc3QgaWQgPSBkYXRhc2V0W2F4aXMgKyAnQXhpc0lEJ10gfHwgZmlyc3RJRHNbYXhpc10gfHwgYXhpcztcbiAgICAgIHNjYWxlc1tpZF0gPSBzY2FsZXNbaWRdIHx8IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgICBtZXJnZUlmKHNjYWxlc1tpZF0sIFt7YXhpc30sIGNvbmZpZ1NjYWxlc1tpZF0sIGRlZmF1bHRTY2FsZU9wdGlvbnNbZGVmYXVsdElEXV0pO1xuICAgIH0pO1xuICB9KTtcbiAgT2JqZWN0LmtleXMoc2NhbGVzKS5mb3JFYWNoKGtleSA9PiB7XG4gICAgY29uc3Qgc2NhbGUgPSBzY2FsZXNba2V5XTtcbiAgICBtZXJnZUlmKHNjYWxlLCBbZGVmYXVsdHMuc2NhbGVzW3NjYWxlLnR5cGVdLCBkZWZhdWx0cy5zY2FsZV0pO1xuICB9KTtcbiAgcmV0dXJuIHNjYWxlcztcbn1cbmZ1bmN0aW9uIGluaXRPcHRpb25zKGNvbmZpZykge1xuICBjb25zdCBvcHRpb25zID0gY29uZmlnLm9wdGlvbnMgfHwgKGNvbmZpZy5vcHRpb25zID0ge30pO1xuICBvcHRpb25zLnBsdWdpbnMgPSB2YWx1ZU9yRGVmYXVsdChvcHRpb25zLnBsdWdpbnMsIHt9KTtcbiAgb3B0aW9ucy5zY2FsZXMgPSBtZXJnZVNjYWxlQ29uZmlnKGNvbmZpZywgb3B0aW9ucyk7XG59XG5mdW5jdGlvbiBpbml0RGF0YShkYXRhKSB7XG4gIGRhdGEgPSBkYXRhIHx8IHt9O1xuICBkYXRhLmRhdGFzZXRzID0gZGF0YS5kYXRhc2V0cyB8fCBbXTtcbiAgZGF0YS5sYWJlbHMgPSBkYXRhLmxhYmVscyB8fCBbXTtcbiAgcmV0dXJuIGRhdGE7XG59XG5mdW5jdGlvbiBpbml0Q29uZmlnKGNvbmZpZykge1xuICBjb25maWcgPSBjb25maWcgfHwge307XG4gIGNvbmZpZy5kYXRhID0gaW5pdERhdGEoY29uZmlnLmRhdGEpO1xuICBpbml0T3B0aW9ucyhjb25maWcpO1xuICByZXR1cm4gY29uZmlnO1xufVxuY29uc3Qga2V5Q2FjaGUgPSBuZXcgTWFwKCk7XG5jb25zdCBrZXlzQ2FjaGVkID0gbmV3IFNldCgpO1xuZnVuY3Rpb24gY2FjaGVkS2V5cyhjYWNoZUtleSwgZ2VuZXJhdGUpIHtcbiAgbGV0IGtleXMgPSBrZXlDYWNoZS5nZXQoY2FjaGVLZXkpO1xuICBpZiAoIWtleXMpIHtcbiAgICBrZXlzID0gZ2VuZXJhdGUoKTtcbiAgICBrZXlDYWNoZS5zZXQoY2FjaGVLZXksIGtleXMpO1xuICAgIGtleXNDYWNoZWQuYWRkKGtleXMpO1xuICB9XG4gIHJldHVybiBrZXlzO1xufVxuY29uc3QgYWRkSWZGb3VuZCA9IChzZXQsIG9iaiwga2V5KSA9PiB7XG4gIGNvbnN0IG9wdHMgPSByZXNvbHZlT2JqZWN0S2V5KG9iaiwga2V5KTtcbiAgaWYgKG9wdHMgIT09IHVuZGVmaW5lZCkge1xuICAgIHNldC5hZGQob3B0cyk7XG4gIH1cbn07XG5jbGFzcyBDb25maWcge1xuICBjb25zdHJ1Y3Rvcihjb25maWcpIHtcbiAgICB0aGlzLl9jb25maWcgPSBpbml0Q29uZmlnKGNvbmZpZyk7XG4gICAgdGhpcy5fc2NvcGVDYWNoZSA9IG5ldyBNYXAoKTtcbiAgICB0aGlzLl9yZXNvbHZlckNhY2hlID0gbmV3IE1hcCgpO1xuICB9XG4gIGdldCBwbGF0Zm9ybSgpIHtcbiAgICByZXR1cm4gdGhpcy5fY29uZmlnLnBsYXRmb3JtO1xuICB9XG4gIGdldCB0eXBlKCkge1xuICAgIHJldHVybiB0aGlzLl9jb25maWcudHlwZTtcbiAgfVxuICBzZXQgdHlwZSh0eXBlKSB7XG4gICAgdGhpcy5fY29uZmlnLnR5cGUgPSB0eXBlO1xuICB9XG4gIGdldCBkYXRhKCkge1xuICAgIHJldHVybiB0aGlzLl9jb25maWcuZGF0YTtcbiAgfVxuICBzZXQgZGF0YShkYXRhKSB7XG4gICAgdGhpcy5fY29uZmlnLmRhdGEgPSBpbml0RGF0YShkYXRhKTtcbiAgfVxuICBnZXQgb3B0aW9ucygpIHtcbiAgICByZXR1cm4gdGhpcy5fY29uZmlnLm9wdGlvbnM7XG4gIH1cbiAgc2V0IG9wdGlvbnMob3B0aW9ucykge1xuICAgIHRoaXMuX2NvbmZpZy5vcHRpb25zID0gb3B0aW9ucztcbiAgfVxuICBnZXQgcGx1Z2lucygpIHtcbiAgICByZXR1cm4gdGhpcy5fY29uZmlnLnBsdWdpbnM7XG4gIH1cbiAgdXBkYXRlKCkge1xuICAgIGNvbnN0IGNvbmZpZyA9IHRoaXMuX2NvbmZpZztcbiAgICB0aGlzLmNsZWFyQ2FjaGUoKTtcbiAgICBpbml0T3B0aW9ucyhjb25maWcpO1xuICB9XG4gIGNsZWFyQ2FjaGUoKSB7XG4gICAgdGhpcy5fc2NvcGVDYWNoZS5jbGVhcigpO1xuICAgIHRoaXMuX3Jlc29sdmVyQ2FjaGUuY2xlYXIoKTtcbiAgfVxuICBkYXRhc2V0U2NvcGVLZXlzKGRhdGFzZXRUeXBlKSB7XG4gICAgcmV0dXJuIGNhY2hlZEtleXMoZGF0YXNldFR5cGUsXG4gICAgICAoKSA9PiBbW1xuICAgICAgICBgZGF0YXNldHMuJHtkYXRhc2V0VHlwZX1gLFxuICAgICAgICAnJ1xuICAgICAgXV0pO1xuICB9XG4gIGRhdGFzZXRBbmltYXRpb25TY29wZUtleXMoZGF0YXNldFR5cGUsIHRyYW5zaXRpb24pIHtcbiAgICByZXR1cm4gY2FjaGVkS2V5cyhgJHtkYXRhc2V0VHlwZX0udHJhbnNpdGlvbi4ke3RyYW5zaXRpb259YCxcbiAgICAgICgpID0+IFtcbiAgICAgICAgW1xuICAgICAgICAgIGBkYXRhc2V0cy4ke2RhdGFzZXRUeXBlfS50cmFuc2l0aW9ucy4ke3RyYW5zaXRpb259YCxcbiAgICAgICAgICBgdHJhbnNpdGlvbnMuJHt0cmFuc2l0aW9ufWAsXG4gICAgICAgIF0sXG4gICAgICAgIFtcbiAgICAgICAgICBgZGF0YXNldHMuJHtkYXRhc2V0VHlwZX1gLFxuICAgICAgICAgICcnXG4gICAgICAgIF1cbiAgICAgIF0pO1xuICB9XG4gIGRhdGFzZXRFbGVtZW50U2NvcGVLZXlzKGRhdGFzZXRUeXBlLCBlbGVtZW50VHlwZSkge1xuICAgIHJldHVybiBjYWNoZWRLZXlzKGAke2RhdGFzZXRUeXBlfS0ke2VsZW1lbnRUeXBlfWAsXG4gICAgICAoKSA9PiBbW1xuICAgICAgICBgZGF0YXNldHMuJHtkYXRhc2V0VHlwZX0uZWxlbWVudHMuJHtlbGVtZW50VHlwZX1gLFxuICAgICAgICBgZGF0YXNldHMuJHtkYXRhc2V0VHlwZX1gLFxuICAgICAgICBgZWxlbWVudHMuJHtlbGVtZW50VHlwZX1gLFxuICAgICAgICAnJ1xuICAgICAgXV0pO1xuICB9XG4gIHBsdWdpblNjb3BlS2V5cyhwbHVnaW4pIHtcbiAgICBjb25zdCBpZCA9IHBsdWdpbi5pZDtcbiAgICBjb25zdCB0eXBlID0gdGhpcy50eXBlO1xuICAgIHJldHVybiBjYWNoZWRLZXlzKGAke3R5cGV9LXBsdWdpbi0ke2lkfWAsXG4gICAgICAoKSA9PiBbW1xuICAgICAgICBgcGx1Z2lucy4ke2lkfWAsXG4gICAgICAgIC4uLnBsdWdpbi5hZGRpdGlvbmFsT3B0aW9uU2NvcGVzIHx8IFtdLFxuICAgICAgXV0pO1xuICB9XG4gIF9jYWNoZWRTY29wZXMobWFpblNjb3BlLCByZXNldENhY2hlKSB7XG4gICAgY29uc3QgX3Njb3BlQ2FjaGUgPSB0aGlzLl9zY29wZUNhY2hlO1xuICAgIGxldCBjYWNoZSA9IF9zY29wZUNhY2hlLmdldChtYWluU2NvcGUpO1xuICAgIGlmICghY2FjaGUgfHwgcmVzZXRDYWNoZSkge1xuICAgICAgY2FjaGUgPSBuZXcgTWFwKCk7XG4gICAgICBfc2NvcGVDYWNoZS5zZXQobWFpblNjb3BlLCBjYWNoZSk7XG4gICAgfVxuICAgIHJldHVybiBjYWNoZTtcbiAgfVxuICBnZXRPcHRpb25TY29wZXMobWFpblNjb3BlLCBrZXlMaXN0cywgcmVzZXRDYWNoZSkge1xuICAgIGNvbnN0IHtvcHRpb25zLCB0eXBlfSA9IHRoaXM7XG4gICAgY29uc3QgY2FjaGUgPSB0aGlzLl9jYWNoZWRTY29wZXMobWFpblNjb3BlLCByZXNldENhY2hlKTtcbiAgICBjb25zdCBjYWNoZWQgPSBjYWNoZS5nZXQoa2V5TGlzdHMpO1xuICAgIGlmIChjYWNoZWQpIHtcbiAgICAgIHJldHVybiBjYWNoZWQ7XG4gICAgfVxuICAgIGNvbnN0IHNjb3BlcyA9IG5ldyBTZXQoKTtcbiAgICBrZXlMaXN0cy5mb3JFYWNoKGtleXMgPT4ge1xuICAgICAgaWYgKG1haW5TY29wZSkge1xuICAgICAgICBzY29wZXMuYWRkKG1haW5TY29wZSk7XG4gICAgICAgIGtleXMuZm9yRWFjaChrZXkgPT4gYWRkSWZGb3VuZChzY29wZXMsIG1haW5TY29wZSwga2V5KSk7XG4gICAgICB9XG4gICAgICBrZXlzLmZvckVhY2goa2V5ID0+IGFkZElmRm91bmQoc2NvcGVzLCBvcHRpb25zLCBrZXkpKTtcbiAgICAgIGtleXMuZm9yRWFjaChrZXkgPT4gYWRkSWZGb3VuZChzY29wZXMsIG92ZXJyaWRlc1t0eXBlXSB8fCB7fSwga2V5KSk7XG4gICAgICBrZXlzLmZvckVhY2goa2V5ID0+IGFkZElmRm91bmQoc2NvcGVzLCBkZWZhdWx0cywga2V5KSk7XG4gICAgICBrZXlzLmZvckVhY2goa2V5ID0+IGFkZElmRm91bmQoc2NvcGVzLCBkZXNjcmlwdG9ycywga2V5KSk7XG4gICAgfSk7XG4gICAgY29uc3QgYXJyYXkgPSBBcnJheS5mcm9tKHNjb3Blcyk7XG4gICAgaWYgKGFycmF5Lmxlbmd0aCA9PT0gMCkge1xuICAgICAgYXJyYXkucHVzaChPYmplY3QuY3JlYXRlKG51bGwpKTtcbiAgICB9XG4gICAgaWYgKGtleXNDYWNoZWQuaGFzKGtleUxpc3RzKSkge1xuICAgICAgY2FjaGUuc2V0KGtleUxpc3RzLCBhcnJheSk7XG4gICAgfVxuICAgIHJldHVybiBhcnJheTtcbiAgfVxuICBjaGFydE9wdGlvblNjb3BlcygpIHtcbiAgICBjb25zdCB7b3B0aW9ucywgdHlwZX0gPSB0aGlzO1xuICAgIHJldHVybiBbXG4gICAgICBvcHRpb25zLFxuICAgICAgb3ZlcnJpZGVzW3R5cGVdIHx8IHt9LFxuICAgICAgZGVmYXVsdHMuZGF0YXNldHNbdHlwZV0gfHwge30sXG4gICAgICB7dHlwZX0sXG4gICAgICBkZWZhdWx0cyxcbiAgICAgIGRlc2NyaXB0b3JzXG4gICAgXTtcbiAgfVxuICByZXNvbHZlTmFtZWRPcHRpb25zKHNjb3BlcywgbmFtZXMsIGNvbnRleHQsIHByZWZpeGVzID0gWycnXSkge1xuICAgIGNvbnN0IHJlc3VsdCA9IHskc2hhcmVkOiB0cnVlfTtcbiAgICBjb25zdCB7cmVzb2x2ZXIsIHN1YlByZWZpeGVzfSA9IGdldFJlc29sdmVyKHRoaXMuX3Jlc29sdmVyQ2FjaGUsIHNjb3BlcywgcHJlZml4ZXMpO1xuICAgIGxldCBvcHRpb25zID0gcmVzb2x2ZXI7XG4gICAgaWYgKG5lZWRDb250ZXh0KHJlc29sdmVyLCBuYW1lcykpIHtcbiAgICAgIHJlc3VsdC4kc2hhcmVkID0gZmFsc2U7XG4gICAgICBjb250ZXh0ID0gaXNGdW5jdGlvbihjb250ZXh0KSA/IGNvbnRleHQoKSA6IGNvbnRleHQ7XG4gICAgICBjb25zdCBzdWJSZXNvbHZlciA9IHRoaXMuY3JlYXRlUmVzb2x2ZXIoc2NvcGVzLCBjb250ZXh0LCBzdWJQcmVmaXhlcyk7XG4gICAgICBvcHRpb25zID0gX2F0dGFjaENvbnRleHQocmVzb2x2ZXIsIGNvbnRleHQsIHN1YlJlc29sdmVyKTtcbiAgICB9XG4gICAgZm9yIChjb25zdCBwcm9wIG9mIG5hbWVzKSB7XG4gICAgICByZXN1bHRbcHJvcF0gPSBvcHRpb25zW3Byb3BdO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG4gIGNyZWF0ZVJlc29sdmVyKHNjb3BlcywgY29udGV4dCwgcHJlZml4ZXMgPSBbJyddLCBkZXNjcmlwdG9yRGVmYXVsdHMpIHtcbiAgICBjb25zdCB7cmVzb2x2ZXJ9ID0gZ2V0UmVzb2x2ZXIodGhpcy5fcmVzb2x2ZXJDYWNoZSwgc2NvcGVzLCBwcmVmaXhlcyk7XG4gICAgcmV0dXJuIGlzT2JqZWN0KGNvbnRleHQpXG4gICAgICA/IF9hdHRhY2hDb250ZXh0KHJlc29sdmVyLCBjb250ZXh0LCB1bmRlZmluZWQsIGRlc2NyaXB0b3JEZWZhdWx0cylcbiAgICAgIDogcmVzb2x2ZXI7XG4gIH1cbn1cbmZ1bmN0aW9uIGdldFJlc29sdmVyKHJlc29sdmVyQ2FjaGUsIHNjb3BlcywgcHJlZml4ZXMpIHtcbiAgbGV0IGNhY2hlID0gcmVzb2x2ZXJDYWNoZS5nZXQoc2NvcGVzKTtcbiAgaWYgKCFjYWNoZSkge1xuICAgIGNhY2hlID0gbmV3IE1hcCgpO1xuICAgIHJlc29sdmVyQ2FjaGUuc2V0KHNjb3BlcywgY2FjaGUpO1xuICB9XG4gIGNvbnN0IGNhY2hlS2V5ID0gcHJlZml4ZXMuam9pbigpO1xuICBsZXQgY2FjaGVkID0gY2FjaGUuZ2V0KGNhY2hlS2V5KTtcbiAgaWYgKCFjYWNoZWQpIHtcbiAgICBjb25zdCByZXNvbHZlciA9IF9jcmVhdGVSZXNvbHZlcihzY29wZXMsIHByZWZpeGVzKTtcbiAgICBjYWNoZWQgPSB7XG4gICAgICByZXNvbHZlcixcbiAgICAgIHN1YlByZWZpeGVzOiBwcmVmaXhlcy5maWx0ZXIocCA9PiAhcC50b0xvd2VyQ2FzZSgpLmluY2x1ZGVzKCdob3ZlcicpKVxuICAgIH07XG4gICAgY2FjaGUuc2V0KGNhY2hlS2V5LCBjYWNoZWQpO1xuICB9XG4gIHJldHVybiBjYWNoZWQ7XG59XG5jb25zdCBoYXNGdW5jdGlvbiA9IHZhbHVlID0+IGlzT2JqZWN0KHZhbHVlKVxuICAmJiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh2YWx1ZSkucmVkdWNlKChhY2MsIGtleSkgPT4gYWNjIHx8IGlzRnVuY3Rpb24odmFsdWVba2V5XSksIGZhbHNlKTtcbmZ1bmN0aW9uIG5lZWRDb250ZXh0KHByb3h5LCBuYW1lcykge1xuICBjb25zdCB7aXNTY3JpcHRhYmxlLCBpc0luZGV4YWJsZX0gPSBfZGVzY3JpcHRvcnMocHJveHkpO1xuICBmb3IgKGNvbnN0IHByb3Agb2YgbmFtZXMpIHtcbiAgICBjb25zdCBzY3JpcHRhYmxlID0gaXNTY3JpcHRhYmxlKHByb3ApO1xuICAgIGNvbnN0IGluZGV4YWJsZSA9IGlzSW5kZXhhYmxlKHByb3ApO1xuICAgIGNvbnN0IHZhbHVlID0gKGluZGV4YWJsZSB8fCBzY3JpcHRhYmxlKSAmJiBwcm94eVtwcm9wXTtcbiAgICBpZiAoKHNjcmlwdGFibGUgJiYgKGlzRnVuY3Rpb24odmFsdWUpIHx8IGhhc0Z1bmN0aW9uKHZhbHVlKSkpXG4gICAgICB8fCAoaW5kZXhhYmxlICYmIGlzQXJyYXkodmFsdWUpKSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9XG4gIHJldHVybiBmYWxzZTtcbn1cblxudmFyIHZlcnNpb24gPSBcIjMuNy4xXCI7XG5cbmNvbnN0IEtOT1dOX1BPU0lUSU9OUyA9IFsndG9wJywgJ2JvdHRvbScsICdsZWZ0JywgJ3JpZ2h0JywgJ2NoYXJ0QXJlYSddO1xuZnVuY3Rpb24gcG9zaXRpb25Jc0hvcml6b250YWwocG9zaXRpb24sIGF4aXMpIHtcbiAgcmV0dXJuIHBvc2l0aW9uID09PSAndG9wJyB8fCBwb3NpdGlvbiA9PT0gJ2JvdHRvbScgfHwgKEtOT1dOX1BPU0lUSU9OUy5pbmRleE9mKHBvc2l0aW9uKSA9PT0gLTEgJiYgYXhpcyA9PT0gJ3gnKTtcbn1cbmZ1bmN0aW9uIGNvbXBhcmUyTGV2ZWwobDEsIGwyKSB7XG4gIHJldHVybiBmdW5jdGlvbihhLCBiKSB7XG4gICAgcmV0dXJuIGFbbDFdID09PSBiW2wxXVxuICAgICAgPyBhW2wyXSAtIGJbbDJdXG4gICAgICA6IGFbbDFdIC0gYltsMV07XG4gIH07XG59XG5mdW5jdGlvbiBvbkFuaW1hdGlvbnNDb21wbGV0ZShjb250ZXh0KSB7XG4gIGNvbnN0IGNoYXJ0ID0gY29udGV4dC5jaGFydDtcbiAgY29uc3QgYW5pbWF0aW9uT3B0aW9ucyA9IGNoYXJ0Lm9wdGlvbnMuYW5pbWF0aW9uO1xuICBjaGFydC5ub3RpZnlQbHVnaW5zKCdhZnRlclJlbmRlcicpO1xuICBjYWxsYmFjayhhbmltYXRpb25PcHRpb25zICYmIGFuaW1hdGlvbk9wdGlvbnMub25Db21wbGV0ZSwgW2NvbnRleHRdLCBjaGFydCk7XG59XG5mdW5jdGlvbiBvbkFuaW1hdGlvblByb2dyZXNzKGNvbnRleHQpIHtcbiAgY29uc3QgY2hhcnQgPSBjb250ZXh0LmNoYXJ0O1xuICBjb25zdCBhbmltYXRpb25PcHRpb25zID0gY2hhcnQub3B0aW9ucy5hbmltYXRpb247XG4gIGNhbGxiYWNrKGFuaW1hdGlvbk9wdGlvbnMgJiYgYW5pbWF0aW9uT3B0aW9ucy5vblByb2dyZXNzLCBbY29udGV4dF0sIGNoYXJ0KTtcbn1cbmZ1bmN0aW9uIGdldENhbnZhcyhpdGVtKSB7XG4gIGlmIChfaXNEb21TdXBwb3J0ZWQoKSAmJiB0eXBlb2YgaXRlbSA9PT0gJ3N0cmluZycpIHtcbiAgICBpdGVtID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoaXRlbSk7XG4gIH0gZWxzZSBpZiAoaXRlbSAmJiBpdGVtLmxlbmd0aCkge1xuICAgIGl0ZW0gPSBpdGVtWzBdO1xuICB9XG4gIGlmIChpdGVtICYmIGl0ZW0uY2FudmFzKSB7XG4gICAgaXRlbSA9IGl0ZW0uY2FudmFzO1xuICB9XG4gIHJldHVybiBpdGVtO1xufVxuY29uc3QgaW5zdGFuY2VzID0ge307XG5jb25zdCBnZXRDaGFydCA9IChrZXkpID0+IHtcbiAgY29uc3QgY2FudmFzID0gZ2V0Q2FudmFzKGtleSk7XG4gIHJldHVybiBPYmplY3QudmFsdWVzKGluc3RhbmNlcykuZmlsdGVyKChjKSA9PiBjLmNhbnZhcyA9PT0gY2FudmFzKS5wb3AoKTtcbn07XG5mdW5jdGlvbiBtb3ZlTnVtZXJpY0tleXMob2JqLCBzdGFydCwgbW92ZSkge1xuICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXMob2JqKTtcbiAgZm9yIChjb25zdCBrZXkgb2Yga2V5cykge1xuICAgIGNvbnN0IGludEtleSA9ICtrZXk7XG4gICAgaWYgKGludEtleSA+PSBzdGFydCkge1xuICAgICAgY29uc3QgdmFsdWUgPSBvYmpba2V5XTtcbiAgICAgIGRlbGV0ZSBvYmpba2V5XTtcbiAgICAgIGlmIChtb3ZlID4gMCB8fCBpbnRLZXkgPiBzdGFydCkge1xuICAgICAgICBvYmpbaW50S2V5ICsgbW92ZV0gPSB2YWx1ZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cbmZ1bmN0aW9uIGRldGVybWluZUxhc3RFdmVudChlLCBsYXN0RXZlbnQsIGluQ2hhcnRBcmVhLCBpc0NsaWNrKSB7XG4gIGlmICghaW5DaGFydEFyZWEgfHwgZS50eXBlID09PSAnbW91c2VvdXQnKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgaWYgKGlzQ2xpY2spIHtcbiAgICByZXR1cm4gbGFzdEV2ZW50O1xuICB9XG4gIHJldHVybiBlO1xufVxuY2xhc3MgQ2hhcnQge1xuICBjb25zdHJ1Y3RvcihpdGVtLCB1c2VyQ29uZmlnKSB7XG4gICAgY29uc3QgY29uZmlnID0gdGhpcy5jb25maWcgPSBuZXcgQ29uZmlnKHVzZXJDb25maWcpO1xuICAgIGNvbnN0IGluaXRpYWxDYW52YXMgPSBnZXRDYW52YXMoaXRlbSk7XG4gICAgY29uc3QgZXhpc3RpbmdDaGFydCA9IGdldENoYXJ0KGluaXRpYWxDYW52YXMpO1xuICAgIGlmIChleGlzdGluZ0NoYXJ0KSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICdDYW52YXMgaXMgYWxyZWFkeSBpbiB1c2UuIENoYXJ0IHdpdGggSUQgXFwnJyArIGV4aXN0aW5nQ2hhcnQuaWQgKyAnXFwnJyArXG5cdFx0XHRcdCcgbXVzdCBiZSBkZXN0cm95ZWQgYmVmb3JlIHRoZSBjYW52YXMgY2FuIGJlIHJldXNlZC4nXG4gICAgICApO1xuICAgIH1cbiAgICBjb25zdCBvcHRpb25zID0gY29uZmlnLmNyZWF0ZVJlc29sdmVyKGNvbmZpZy5jaGFydE9wdGlvblNjb3BlcygpLCB0aGlzLmdldENvbnRleHQoKSk7XG4gICAgdGhpcy5wbGF0Zm9ybSA9IG5ldyAoY29uZmlnLnBsYXRmb3JtIHx8IF9kZXRlY3RQbGF0Zm9ybShpbml0aWFsQ2FudmFzKSkoKTtcbiAgICB0aGlzLnBsYXRmb3JtLnVwZGF0ZUNvbmZpZyhjb25maWcpO1xuICAgIGNvbnN0IGNvbnRleHQgPSB0aGlzLnBsYXRmb3JtLmFjcXVpcmVDb250ZXh0KGluaXRpYWxDYW52YXMsIG9wdGlvbnMuYXNwZWN0UmF0aW8pO1xuICAgIGNvbnN0IGNhbnZhcyA9IGNvbnRleHQgJiYgY29udGV4dC5jYW52YXM7XG4gICAgY29uc3QgaGVpZ2h0ID0gY2FudmFzICYmIGNhbnZhcy5oZWlnaHQ7XG4gICAgY29uc3Qgd2lkdGggPSBjYW52YXMgJiYgY2FudmFzLndpZHRoO1xuICAgIHRoaXMuaWQgPSB1aWQoKTtcbiAgICB0aGlzLmN0eCA9IGNvbnRleHQ7XG4gICAgdGhpcy5jYW52YXMgPSBjYW52YXM7XG4gICAgdGhpcy53aWR0aCA9IHdpZHRoO1xuICAgIHRoaXMuaGVpZ2h0ID0gaGVpZ2h0O1xuICAgIHRoaXMuX29wdGlvbnMgPSBvcHRpb25zO1xuICAgIHRoaXMuX2FzcGVjdFJhdGlvID0gdGhpcy5hc3BlY3RSYXRpbztcbiAgICB0aGlzLl9sYXllcnMgPSBbXTtcbiAgICB0aGlzLl9tZXRhc2V0cyA9IFtdO1xuICAgIHRoaXMuX3N0YWNrcyA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLmJveGVzID0gW107XG4gICAgdGhpcy5jdXJyZW50RGV2aWNlUGl4ZWxSYXRpbyA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLmNoYXJ0QXJlYSA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLl9hY3RpdmUgPSBbXTtcbiAgICB0aGlzLl9sYXN0RXZlbnQgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5fbGlzdGVuZXJzID0ge307XG4gICAgdGhpcy5fcmVzcG9uc2l2ZUxpc3RlbmVycyA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLl9zb3J0ZWRNZXRhc2V0cyA9IFtdO1xuICAgIHRoaXMuc2NhbGVzID0ge307XG4gICAgdGhpcy5fcGx1Z2lucyA9IG5ldyBQbHVnaW5TZXJ2aWNlKCk7XG4gICAgdGhpcy4kcHJveGllcyA9IHt9O1xuICAgIHRoaXMuX2hpZGRlbkluZGljZXMgPSB7fTtcbiAgICB0aGlzLmF0dGFjaGVkID0gZmFsc2U7XG4gICAgdGhpcy5fYW5pbWF0aW9uc0Rpc2FibGVkID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuJGNvbnRleHQgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5fZG9SZXNpemUgPSBkZWJvdW5jZShtb2RlID0+IHRoaXMudXBkYXRlKG1vZGUpLCBvcHRpb25zLnJlc2l6ZURlbGF5IHx8IDApO1xuICAgIHRoaXMuX2RhdGFDaGFuZ2VzID0gW107XG4gICAgaW5zdGFuY2VzW3RoaXMuaWRdID0gdGhpcztcbiAgICBpZiAoIWNvbnRleHQgfHwgIWNhbnZhcykge1xuICAgICAgY29uc29sZS5lcnJvcihcIkZhaWxlZCB0byBjcmVhdGUgY2hhcnQ6IGNhbid0IGFjcXVpcmUgY29udGV4dCBmcm9tIHRoZSBnaXZlbiBpdGVtXCIpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBhbmltYXRvci5saXN0ZW4odGhpcywgJ2NvbXBsZXRlJywgb25BbmltYXRpb25zQ29tcGxldGUpO1xuICAgIGFuaW1hdG9yLmxpc3Rlbih0aGlzLCAncHJvZ3Jlc3MnLCBvbkFuaW1hdGlvblByb2dyZXNzKTtcbiAgICB0aGlzLl9pbml0aWFsaXplKCk7XG4gICAgaWYgKHRoaXMuYXR0YWNoZWQpIHtcbiAgICAgIHRoaXMudXBkYXRlKCk7XG4gICAgfVxuICB9XG4gIGdldCBhc3BlY3RSYXRpbygpIHtcbiAgICBjb25zdCB7b3B0aW9uczoge2FzcGVjdFJhdGlvLCBtYWludGFpbkFzcGVjdFJhdGlvfSwgd2lkdGgsIGhlaWdodCwgX2FzcGVjdFJhdGlvfSA9IHRoaXM7XG4gICAgaWYgKCFpc051bGxPclVuZGVmKGFzcGVjdFJhdGlvKSkge1xuICAgICAgcmV0dXJuIGFzcGVjdFJhdGlvO1xuICAgIH1cbiAgICBpZiAobWFpbnRhaW5Bc3BlY3RSYXRpbyAmJiBfYXNwZWN0UmF0aW8pIHtcbiAgICAgIHJldHVybiBfYXNwZWN0UmF0aW87XG4gICAgfVxuICAgIHJldHVybiBoZWlnaHQgPyB3aWR0aCAvIGhlaWdodCA6IG51bGw7XG4gIH1cbiAgZ2V0IGRhdGEoKSB7XG4gICAgcmV0dXJuIHRoaXMuY29uZmlnLmRhdGE7XG4gIH1cbiAgc2V0IGRhdGEoZGF0YSkge1xuICAgIHRoaXMuY29uZmlnLmRhdGEgPSBkYXRhO1xuICB9XG4gIGdldCBvcHRpb25zKCkge1xuICAgIHJldHVybiB0aGlzLl9vcHRpb25zO1xuICB9XG4gIHNldCBvcHRpb25zKG9wdGlvbnMpIHtcbiAgICB0aGlzLmNvbmZpZy5vcHRpb25zID0gb3B0aW9ucztcbiAgfVxuICBfaW5pdGlhbGl6ZSgpIHtcbiAgICB0aGlzLm5vdGlmeVBsdWdpbnMoJ2JlZm9yZUluaXQnKTtcbiAgICBpZiAodGhpcy5vcHRpb25zLnJlc3BvbnNpdmUpIHtcbiAgICAgIHRoaXMucmVzaXplKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldGluYVNjYWxlKHRoaXMsIHRoaXMub3B0aW9ucy5kZXZpY2VQaXhlbFJhdGlvKTtcbiAgICB9XG4gICAgdGhpcy5iaW5kRXZlbnRzKCk7XG4gICAgdGhpcy5ub3RpZnlQbHVnaW5zKCdhZnRlckluaXQnKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICBjbGVhcigpIHtcbiAgICBjbGVhckNhbnZhcyh0aGlzLmNhbnZhcywgdGhpcy5jdHgpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIHN0b3AoKSB7XG4gICAgYW5pbWF0b3Iuc3RvcCh0aGlzKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICByZXNpemUod2lkdGgsIGhlaWdodCkge1xuICAgIGlmICghYW5pbWF0b3IucnVubmluZyh0aGlzKSkge1xuICAgICAgdGhpcy5fcmVzaXplKHdpZHRoLCBoZWlnaHQpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl9yZXNpemVCZWZvcmVEcmF3ID0ge3dpZHRoLCBoZWlnaHR9O1xuICAgIH1cbiAgfVxuICBfcmVzaXplKHdpZHRoLCBoZWlnaHQpIHtcbiAgICBjb25zdCBvcHRpb25zID0gdGhpcy5vcHRpb25zO1xuICAgIGNvbnN0IGNhbnZhcyA9IHRoaXMuY2FudmFzO1xuICAgIGNvbnN0IGFzcGVjdFJhdGlvID0gb3B0aW9ucy5tYWludGFpbkFzcGVjdFJhdGlvICYmIHRoaXMuYXNwZWN0UmF0aW87XG4gICAgY29uc3QgbmV3U2l6ZSA9IHRoaXMucGxhdGZvcm0uZ2V0TWF4aW11bVNpemUoY2FudmFzLCB3aWR0aCwgaGVpZ2h0LCBhc3BlY3RSYXRpbyk7XG4gICAgY29uc3QgbmV3UmF0aW8gPSBvcHRpb25zLmRldmljZVBpeGVsUmF0aW8gfHwgdGhpcy5wbGF0Zm9ybS5nZXREZXZpY2VQaXhlbFJhdGlvKCk7XG4gICAgY29uc3QgbW9kZSA9IHRoaXMud2lkdGggPyAncmVzaXplJyA6ICdhdHRhY2gnO1xuICAgIHRoaXMud2lkdGggPSBuZXdTaXplLndpZHRoO1xuICAgIHRoaXMuaGVpZ2h0ID0gbmV3U2l6ZS5oZWlnaHQ7XG4gICAgdGhpcy5fYXNwZWN0UmF0aW8gPSB0aGlzLmFzcGVjdFJhdGlvO1xuICAgIGlmICghcmV0aW5hU2NhbGUodGhpcywgbmV3UmF0aW8sIHRydWUpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMubm90aWZ5UGx1Z2lucygncmVzaXplJywge3NpemU6IG5ld1NpemV9KTtcbiAgICBjYWxsYmFjayhvcHRpb25zLm9uUmVzaXplLCBbdGhpcywgbmV3U2l6ZV0sIHRoaXMpO1xuICAgIGlmICh0aGlzLmF0dGFjaGVkKSB7XG4gICAgICBpZiAodGhpcy5fZG9SZXNpemUobW9kZSkpIHtcbiAgICAgICAgdGhpcy5yZW5kZXIoKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgZW5zdXJlU2NhbGVzSGF2ZUlEcygpIHtcbiAgICBjb25zdCBvcHRpb25zID0gdGhpcy5vcHRpb25zO1xuICAgIGNvbnN0IHNjYWxlc09wdGlvbnMgPSBvcHRpb25zLnNjYWxlcyB8fCB7fTtcbiAgICBlYWNoKHNjYWxlc09wdGlvbnMsIChheGlzT3B0aW9ucywgYXhpc0lEKSA9PiB7XG4gICAgICBheGlzT3B0aW9ucy5pZCA9IGF4aXNJRDtcbiAgICB9KTtcbiAgfVxuICBidWlsZE9yVXBkYXRlU2NhbGVzKCkge1xuICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG4gICAgY29uc3Qgc2NhbGVPcHRzID0gb3B0aW9ucy5zY2FsZXM7XG4gICAgY29uc3Qgc2NhbGVzID0gdGhpcy5zY2FsZXM7XG4gICAgY29uc3QgdXBkYXRlZCA9IE9iamVjdC5rZXlzKHNjYWxlcykucmVkdWNlKChvYmosIGlkKSA9PiB7XG4gICAgICBvYmpbaWRdID0gZmFsc2U7XG4gICAgICByZXR1cm4gb2JqO1xuICAgIH0sIHt9KTtcbiAgICBsZXQgaXRlbXMgPSBbXTtcbiAgICBpZiAoc2NhbGVPcHRzKSB7XG4gICAgICBpdGVtcyA9IGl0ZW1zLmNvbmNhdChcbiAgICAgICAgT2JqZWN0LmtleXMoc2NhbGVPcHRzKS5tYXAoKGlkKSA9PiB7XG4gICAgICAgICAgY29uc3Qgc2NhbGVPcHRpb25zID0gc2NhbGVPcHRzW2lkXTtcbiAgICAgICAgICBjb25zdCBheGlzID0gZGV0ZXJtaW5lQXhpcyhpZCwgc2NhbGVPcHRpb25zKTtcbiAgICAgICAgICBjb25zdCBpc1JhZGlhbCA9IGF4aXMgPT09ICdyJztcbiAgICAgICAgICBjb25zdCBpc0hvcml6b250YWwgPSBheGlzID09PSAneCc7XG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIG9wdGlvbnM6IHNjYWxlT3B0aW9ucyxcbiAgICAgICAgICAgIGRwb3NpdGlvbjogaXNSYWRpYWwgPyAnY2hhcnRBcmVhJyA6IGlzSG9yaXpvbnRhbCA/ICdib3R0b20nIDogJ2xlZnQnLFxuICAgICAgICAgICAgZHR5cGU6IGlzUmFkaWFsID8gJ3JhZGlhbExpbmVhcicgOiBpc0hvcml6b250YWwgPyAnY2F0ZWdvcnknIDogJ2xpbmVhcidcbiAgICAgICAgICB9O1xuICAgICAgICB9KVxuICAgICAgKTtcbiAgICB9XG4gICAgZWFjaChpdGVtcywgKGl0ZW0pID0+IHtcbiAgICAgIGNvbnN0IHNjYWxlT3B0aW9ucyA9IGl0ZW0ub3B0aW9ucztcbiAgICAgIGNvbnN0IGlkID0gc2NhbGVPcHRpb25zLmlkO1xuICAgICAgY29uc3QgYXhpcyA9IGRldGVybWluZUF4aXMoaWQsIHNjYWxlT3B0aW9ucyk7XG4gICAgICBjb25zdCBzY2FsZVR5cGUgPSB2YWx1ZU9yRGVmYXVsdChzY2FsZU9wdGlvbnMudHlwZSwgaXRlbS5kdHlwZSk7XG4gICAgICBpZiAoc2NhbGVPcHRpb25zLnBvc2l0aW9uID09PSB1bmRlZmluZWQgfHwgcG9zaXRpb25Jc0hvcml6b250YWwoc2NhbGVPcHRpb25zLnBvc2l0aW9uLCBheGlzKSAhPT0gcG9zaXRpb25Jc0hvcml6b250YWwoaXRlbS5kcG9zaXRpb24pKSB7XG4gICAgICAgIHNjYWxlT3B0aW9ucy5wb3NpdGlvbiA9IGl0ZW0uZHBvc2l0aW9uO1xuICAgICAgfVxuICAgICAgdXBkYXRlZFtpZF0gPSB0cnVlO1xuICAgICAgbGV0IHNjYWxlID0gbnVsbDtcbiAgICAgIGlmIChpZCBpbiBzY2FsZXMgJiYgc2NhbGVzW2lkXS50eXBlID09PSBzY2FsZVR5cGUpIHtcbiAgICAgICAgc2NhbGUgPSBzY2FsZXNbaWRdO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc3Qgc2NhbGVDbGFzcyA9IHJlZ2lzdHJ5LmdldFNjYWxlKHNjYWxlVHlwZSk7XG4gICAgICAgIHNjYWxlID0gbmV3IHNjYWxlQ2xhc3Moe1xuICAgICAgICAgIGlkLFxuICAgICAgICAgIHR5cGU6IHNjYWxlVHlwZSxcbiAgICAgICAgICBjdHg6IHRoaXMuY3R4LFxuICAgICAgICAgIGNoYXJ0OiB0aGlzXG4gICAgICAgIH0pO1xuICAgICAgICBzY2FsZXNbc2NhbGUuaWRdID0gc2NhbGU7XG4gICAgICB9XG4gICAgICBzY2FsZS5pbml0KHNjYWxlT3B0aW9ucywgb3B0aW9ucyk7XG4gICAgfSk7XG4gICAgZWFjaCh1cGRhdGVkLCAoaGFzVXBkYXRlZCwgaWQpID0+IHtcbiAgICAgIGlmICghaGFzVXBkYXRlZCkge1xuICAgICAgICBkZWxldGUgc2NhbGVzW2lkXTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBlYWNoKHNjYWxlcywgKHNjYWxlKSA9PiB7XG4gICAgICBsYXlvdXRzLmNvbmZpZ3VyZSh0aGlzLCBzY2FsZSwgc2NhbGUub3B0aW9ucyk7XG4gICAgICBsYXlvdXRzLmFkZEJveCh0aGlzLCBzY2FsZSk7XG4gICAgfSk7XG4gIH1cbiAgX3VwZGF0ZU1ldGFzZXRzKCkge1xuICAgIGNvbnN0IG1ldGFzZXRzID0gdGhpcy5fbWV0YXNldHM7XG4gICAgY29uc3QgbnVtRGF0YSA9IHRoaXMuZGF0YS5kYXRhc2V0cy5sZW5ndGg7XG4gICAgY29uc3QgbnVtTWV0YSA9IG1ldGFzZXRzLmxlbmd0aDtcbiAgICBtZXRhc2V0cy5zb3J0KChhLCBiKSA9PiBhLmluZGV4IC0gYi5pbmRleCk7XG4gICAgaWYgKG51bU1ldGEgPiBudW1EYXRhKSB7XG4gICAgICBmb3IgKGxldCBpID0gbnVtRGF0YTsgaSA8IG51bU1ldGE7ICsraSkge1xuICAgICAgICB0aGlzLl9kZXN0cm95RGF0YXNldE1ldGEoaSk7XG4gICAgICB9XG4gICAgICBtZXRhc2V0cy5zcGxpY2UobnVtRGF0YSwgbnVtTWV0YSAtIG51bURhdGEpO1xuICAgIH1cbiAgICB0aGlzLl9zb3J0ZWRNZXRhc2V0cyA9IG1ldGFzZXRzLnNsaWNlKDApLnNvcnQoY29tcGFyZTJMZXZlbCgnb3JkZXInLCAnaW5kZXgnKSk7XG4gIH1cbiAgX3JlbW92ZVVucmVmZXJlbmNlZE1ldGFzZXRzKCkge1xuICAgIGNvbnN0IHtfbWV0YXNldHM6IG1ldGFzZXRzLCBkYXRhOiB7ZGF0YXNldHN9fSA9IHRoaXM7XG4gICAgaWYgKG1ldGFzZXRzLmxlbmd0aCA+IGRhdGFzZXRzLmxlbmd0aCkge1xuICAgICAgZGVsZXRlIHRoaXMuX3N0YWNrcztcbiAgICB9XG4gICAgbWV0YXNldHMuZm9yRWFjaCgobWV0YSwgaW5kZXgpID0+IHtcbiAgICAgIGlmIChkYXRhc2V0cy5maWx0ZXIoeCA9PiB4ID09PSBtZXRhLl9kYXRhc2V0KS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgdGhpcy5fZGVzdHJveURhdGFzZXRNZXRhKGluZGV4KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuICBidWlsZE9yVXBkYXRlQ29udHJvbGxlcnMoKSB7XG4gICAgY29uc3QgbmV3Q29udHJvbGxlcnMgPSBbXTtcbiAgICBjb25zdCBkYXRhc2V0cyA9IHRoaXMuZGF0YS5kYXRhc2V0cztcbiAgICBsZXQgaSwgaWxlbjtcbiAgICB0aGlzLl9yZW1vdmVVbnJlZmVyZW5jZWRNZXRhc2V0cygpO1xuICAgIGZvciAoaSA9IDAsIGlsZW4gPSBkYXRhc2V0cy5sZW5ndGg7IGkgPCBpbGVuOyBpKyspIHtcbiAgICAgIGNvbnN0IGRhdGFzZXQgPSBkYXRhc2V0c1tpXTtcbiAgICAgIGxldCBtZXRhID0gdGhpcy5nZXREYXRhc2V0TWV0YShpKTtcbiAgICAgIGNvbnN0IHR5cGUgPSBkYXRhc2V0LnR5cGUgfHwgdGhpcy5jb25maWcudHlwZTtcbiAgICAgIGlmIChtZXRhLnR5cGUgJiYgbWV0YS50eXBlICE9PSB0eXBlKSB7XG4gICAgICAgIHRoaXMuX2Rlc3Ryb3lEYXRhc2V0TWV0YShpKTtcbiAgICAgICAgbWV0YSA9IHRoaXMuZ2V0RGF0YXNldE1ldGEoaSk7XG4gICAgICB9XG4gICAgICBtZXRhLnR5cGUgPSB0eXBlO1xuICAgICAgbWV0YS5pbmRleEF4aXMgPSBkYXRhc2V0LmluZGV4QXhpcyB8fCBnZXRJbmRleEF4aXModHlwZSwgdGhpcy5vcHRpb25zKTtcbiAgICAgIG1ldGEub3JkZXIgPSBkYXRhc2V0Lm9yZGVyIHx8IDA7XG4gICAgICBtZXRhLmluZGV4ID0gaTtcbiAgICAgIG1ldGEubGFiZWwgPSAnJyArIGRhdGFzZXQubGFiZWw7XG4gICAgICBtZXRhLnZpc2libGUgPSB0aGlzLmlzRGF0YXNldFZpc2libGUoaSk7XG4gICAgICBpZiAobWV0YS5jb250cm9sbGVyKSB7XG4gICAgICAgIG1ldGEuY29udHJvbGxlci51cGRhdGVJbmRleChpKTtcbiAgICAgICAgbWV0YS5jb250cm9sbGVyLmxpbmtTY2FsZXMoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnN0IENvbnRyb2xsZXJDbGFzcyA9IHJlZ2lzdHJ5LmdldENvbnRyb2xsZXIodHlwZSk7XG4gICAgICAgIGNvbnN0IHtkYXRhc2V0RWxlbWVudFR5cGUsIGRhdGFFbGVtZW50VHlwZX0gPSBkZWZhdWx0cy5kYXRhc2V0c1t0eXBlXTtcbiAgICAgICAgT2JqZWN0LmFzc2lnbihDb250cm9sbGVyQ2xhc3MucHJvdG90eXBlLCB7XG4gICAgICAgICAgZGF0YUVsZW1lbnRUeXBlOiByZWdpc3RyeS5nZXRFbGVtZW50KGRhdGFFbGVtZW50VHlwZSksXG4gICAgICAgICAgZGF0YXNldEVsZW1lbnRUeXBlOiBkYXRhc2V0RWxlbWVudFR5cGUgJiYgcmVnaXN0cnkuZ2V0RWxlbWVudChkYXRhc2V0RWxlbWVudFR5cGUpXG4gICAgICAgIH0pO1xuICAgICAgICBtZXRhLmNvbnRyb2xsZXIgPSBuZXcgQ29udHJvbGxlckNsYXNzKHRoaXMsIGkpO1xuICAgICAgICBuZXdDb250cm9sbGVycy5wdXNoKG1ldGEuY29udHJvbGxlcik7XG4gICAgICB9XG4gICAgfVxuICAgIHRoaXMuX3VwZGF0ZU1ldGFzZXRzKCk7XG4gICAgcmV0dXJuIG5ld0NvbnRyb2xsZXJzO1xuICB9XG4gIF9yZXNldEVsZW1lbnRzKCkge1xuICAgIGVhY2godGhpcy5kYXRhLmRhdGFzZXRzLCAoZGF0YXNldCwgZGF0YXNldEluZGV4KSA9PiB7XG4gICAgICB0aGlzLmdldERhdGFzZXRNZXRhKGRhdGFzZXRJbmRleCkuY29udHJvbGxlci5yZXNldCgpO1xuICAgIH0sIHRoaXMpO1xuICB9XG4gIHJlc2V0KCkge1xuICAgIHRoaXMuX3Jlc2V0RWxlbWVudHMoKTtcbiAgICB0aGlzLm5vdGlmeVBsdWdpbnMoJ3Jlc2V0Jyk7XG4gIH1cbiAgdXBkYXRlKG1vZGUpIHtcbiAgICBjb25zdCBjb25maWcgPSB0aGlzLmNvbmZpZztcbiAgICBjb25maWcudXBkYXRlKCk7XG4gICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMuX29wdGlvbnMgPSBjb25maWcuY3JlYXRlUmVzb2x2ZXIoY29uZmlnLmNoYXJ0T3B0aW9uU2NvcGVzKCksIHRoaXMuZ2V0Q29udGV4dCgpKTtcbiAgICBjb25zdCBhbmltc0Rpc2FibGVkID0gdGhpcy5fYW5pbWF0aW9uc0Rpc2FibGVkID0gIW9wdGlvbnMuYW5pbWF0aW9uO1xuICAgIHRoaXMuX3VwZGF0ZVNjYWxlcygpO1xuICAgIHRoaXMuX2NoZWNrRXZlbnRCaW5kaW5ncygpO1xuICAgIHRoaXMuX3VwZGF0ZUhpZGRlbkluZGljZXMoKTtcbiAgICB0aGlzLl9wbHVnaW5zLmludmFsaWRhdGUoKTtcbiAgICBpZiAodGhpcy5ub3RpZnlQbHVnaW5zKCdiZWZvcmVVcGRhdGUnLCB7bW9kZSwgY2FuY2VsYWJsZTogdHJ1ZX0pID09PSBmYWxzZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBuZXdDb250cm9sbGVycyA9IHRoaXMuYnVpbGRPclVwZGF0ZUNvbnRyb2xsZXJzKCk7XG4gICAgdGhpcy5ub3RpZnlQbHVnaW5zKCdiZWZvcmVFbGVtZW50c1VwZGF0ZScpO1xuICAgIGxldCBtaW5QYWRkaW5nID0gMDtcbiAgICBmb3IgKGxldCBpID0gMCwgaWxlbiA9IHRoaXMuZGF0YS5kYXRhc2V0cy5sZW5ndGg7IGkgPCBpbGVuOyBpKyspIHtcbiAgICAgIGNvbnN0IHtjb250cm9sbGVyfSA9IHRoaXMuZ2V0RGF0YXNldE1ldGEoaSk7XG4gICAgICBjb25zdCByZXNldCA9ICFhbmltc0Rpc2FibGVkICYmIG5ld0NvbnRyb2xsZXJzLmluZGV4T2YoY29udHJvbGxlcikgPT09IC0xO1xuICAgICAgY29udHJvbGxlci5idWlsZE9yVXBkYXRlRWxlbWVudHMocmVzZXQpO1xuICAgICAgbWluUGFkZGluZyA9IE1hdGgubWF4KCtjb250cm9sbGVyLmdldE1heE92ZXJmbG93KCksIG1pblBhZGRpbmcpO1xuICAgIH1cbiAgICBtaW5QYWRkaW5nID0gdGhpcy5fbWluUGFkZGluZyA9IG9wdGlvbnMubGF5b3V0LmF1dG9QYWRkaW5nID8gbWluUGFkZGluZyA6IDA7XG4gICAgdGhpcy5fdXBkYXRlTGF5b3V0KG1pblBhZGRpbmcpO1xuICAgIGlmICghYW5pbXNEaXNhYmxlZCkge1xuICAgICAgZWFjaChuZXdDb250cm9sbGVycywgKGNvbnRyb2xsZXIpID0+IHtcbiAgICAgICAgY29udHJvbGxlci5yZXNldCgpO1xuICAgICAgfSk7XG4gICAgfVxuICAgIHRoaXMuX3VwZGF0ZURhdGFzZXRzKG1vZGUpO1xuICAgIHRoaXMubm90aWZ5UGx1Z2lucygnYWZ0ZXJVcGRhdGUnLCB7bW9kZX0pO1xuICAgIHRoaXMuX2xheWVycy5zb3J0KGNvbXBhcmUyTGV2ZWwoJ3onLCAnX2lkeCcpKTtcbiAgICBjb25zdCB7X2FjdGl2ZSwgX2xhc3RFdmVudH0gPSB0aGlzO1xuICAgIGlmIChfbGFzdEV2ZW50KSB7XG4gICAgICB0aGlzLl9ldmVudEhhbmRsZXIoX2xhc3RFdmVudCwgdHJ1ZSk7XG4gICAgfSBlbHNlIGlmIChfYWN0aXZlLmxlbmd0aCkge1xuICAgICAgdGhpcy5fdXBkYXRlSG92ZXJTdHlsZXMoX2FjdGl2ZSwgX2FjdGl2ZSwgdHJ1ZSk7XG4gICAgfVxuICAgIHRoaXMucmVuZGVyKCk7XG4gIH1cbiAgX3VwZGF0ZVNjYWxlcygpIHtcbiAgICBlYWNoKHRoaXMuc2NhbGVzLCAoc2NhbGUpID0+IHtcbiAgICAgIGxheW91dHMucmVtb3ZlQm94KHRoaXMsIHNjYWxlKTtcbiAgICB9KTtcbiAgICB0aGlzLmVuc3VyZVNjYWxlc0hhdmVJRHMoKTtcbiAgICB0aGlzLmJ1aWxkT3JVcGRhdGVTY2FsZXMoKTtcbiAgfVxuICBfY2hlY2tFdmVudEJpbmRpbmdzKCkge1xuICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG4gICAgY29uc3QgZXhpc3RpbmdFdmVudHMgPSBuZXcgU2V0KE9iamVjdC5rZXlzKHRoaXMuX2xpc3RlbmVycykpO1xuICAgIGNvbnN0IG5ld0V2ZW50cyA9IG5ldyBTZXQob3B0aW9ucy5ldmVudHMpO1xuICAgIGlmICghc2V0c0VxdWFsKGV4aXN0aW5nRXZlbnRzLCBuZXdFdmVudHMpIHx8ICEhdGhpcy5fcmVzcG9uc2l2ZUxpc3RlbmVycyAhPT0gb3B0aW9ucy5yZXNwb25zaXZlKSB7XG4gICAgICB0aGlzLnVuYmluZEV2ZW50cygpO1xuICAgICAgdGhpcy5iaW5kRXZlbnRzKCk7XG4gICAgfVxuICB9XG4gIF91cGRhdGVIaWRkZW5JbmRpY2VzKCkge1xuICAgIGNvbnN0IHtfaGlkZGVuSW5kaWNlc30gPSB0aGlzO1xuICAgIGNvbnN0IGNoYW5nZXMgPSB0aGlzLl9nZXRVbmlmb3JtRGF0YUNoYW5nZXMoKSB8fCBbXTtcbiAgICBmb3IgKGNvbnN0IHttZXRob2QsIHN0YXJ0LCBjb3VudH0gb2YgY2hhbmdlcykge1xuICAgICAgY29uc3QgbW92ZSA9IG1ldGhvZCA9PT0gJ19yZW1vdmVFbGVtZW50cycgPyAtY291bnQgOiBjb3VudDtcbiAgICAgIG1vdmVOdW1lcmljS2V5cyhfaGlkZGVuSW5kaWNlcywgc3RhcnQsIG1vdmUpO1xuICAgIH1cbiAgfVxuICBfZ2V0VW5pZm9ybURhdGFDaGFuZ2VzKCkge1xuICAgIGNvbnN0IF9kYXRhQ2hhbmdlcyA9IHRoaXMuX2RhdGFDaGFuZ2VzO1xuICAgIGlmICghX2RhdGFDaGFuZ2VzIHx8ICFfZGF0YUNoYW5nZXMubGVuZ3RoKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMuX2RhdGFDaGFuZ2VzID0gW107XG4gICAgY29uc3QgZGF0YXNldENvdW50ID0gdGhpcy5kYXRhLmRhdGFzZXRzLmxlbmd0aDtcbiAgICBjb25zdCBtYWtlU2V0ID0gKGlkeCkgPT4gbmV3IFNldChcbiAgICAgIF9kYXRhQ2hhbmdlc1xuICAgICAgICAuZmlsdGVyKGMgPT4gY1swXSA9PT0gaWR4KVxuICAgICAgICAubWFwKChjLCBpKSA9PiBpICsgJywnICsgYy5zcGxpY2UoMSkuam9pbignLCcpKVxuICAgICk7XG4gICAgY29uc3QgY2hhbmdlU2V0ID0gbWFrZVNldCgwKTtcbiAgICBmb3IgKGxldCBpID0gMTsgaSA8IGRhdGFzZXRDb3VudDsgaSsrKSB7XG4gICAgICBpZiAoIXNldHNFcXVhbChjaGFuZ2VTZXQsIG1ha2VTZXQoaSkpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIEFycmF5LmZyb20oY2hhbmdlU2V0KVxuICAgICAgLm1hcChjID0+IGMuc3BsaXQoJywnKSlcbiAgICAgIC5tYXAoYSA9PiAoe21ldGhvZDogYVsxXSwgc3RhcnQ6ICthWzJdLCBjb3VudDogK2FbM119KSk7XG4gIH1cbiAgX3VwZGF0ZUxheW91dChtaW5QYWRkaW5nKSB7XG4gICAgaWYgKHRoaXMubm90aWZ5UGx1Z2lucygnYmVmb3JlTGF5b3V0Jywge2NhbmNlbGFibGU6IHRydWV9KSA9PT0gZmFsc2UpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgbGF5b3V0cy51cGRhdGUodGhpcywgdGhpcy53aWR0aCwgdGhpcy5oZWlnaHQsIG1pblBhZGRpbmcpO1xuICAgIGNvbnN0IGFyZWEgPSB0aGlzLmNoYXJ0QXJlYTtcbiAgICBjb25zdCBub0FyZWEgPSBhcmVhLndpZHRoIDw9IDAgfHwgYXJlYS5oZWlnaHQgPD0gMDtcbiAgICB0aGlzLl9sYXllcnMgPSBbXTtcbiAgICBlYWNoKHRoaXMuYm94ZXMsIChib3gpID0+IHtcbiAgICAgIGlmIChub0FyZWEgJiYgYm94LnBvc2l0aW9uID09PSAnY2hhcnRBcmVhJykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBpZiAoYm94LmNvbmZpZ3VyZSkge1xuICAgICAgICBib3guY29uZmlndXJlKCk7XG4gICAgICB9XG4gICAgICB0aGlzLl9sYXllcnMucHVzaCguLi5ib3guX2xheWVycygpKTtcbiAgICB9LCB0aGlzKTtcbiAgICB0aGlzLl9sYXllcnMuZm9yRWFjaCgoaXRlbSwgaW5kZXgpID0+IHtcbiAgICAgIGl0ZW0uX2lkeCA9IGluZGV4O1xuICAgIH0pO1xuICAgIHRoaXMubm90aWZ5UGx1Z2lucygnYWZ0ZXJMYXlvdXQnKTtcbiAgfVxuICBfdXBkYXRlRGF0YXNldHMobW9kZSkge1xuICAgIGlmICh0aGlzLm5vdGlmeVBsdWdpbnMoJ2JlZm9yZURhdGFzZXRzVXBkYXRlJywge21vZGUsIGNhbmNlbGFibGU6IHRydWV9KSA9PT0gZmFsc2UpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZm9yIChsZXQgaSA9IDAsIGlsZW4gPSB0aGlzLmRhdGEuZGF0YXNldHMubGVuZ3RoOyBpIDwgaWxlbjsgKytpKSB7XG4gICAgICB0aGlzLmdldERhdGFzZXRNZXRhKGkpLmNvbnRyb2xsZXIuY29uZmlndXJlKCk7XG4gICAgfVxuICAgIGZvciAobGV0IGkgPSAwLCBpbGVuID0gdGhpcy5kYXRhLmRhdGFzZXRzLmxlbmd0aDsgaSA8IGlsZW47ICsraSkge1xuICAgICAgdGhpcy5fdXBkYXRlRGF0YXNldChpLCBpc0Z1bmN0aW9uKG1vZGUpID8gbW9kZSh7ZGF0YXNldEluZGV4OiBpfSkgOiBtb2RlKTtcbiAgICB9XG4gICAgdGhpcy5ub3RpZnlQbHVnaW5zKCdhZnRlckRhdGFzZXRzVXBkYXRlJywge21vZGV9KTtcbiAgfVxuICBfdXBkYXRlRGF0YXNldChpbmRleCwgbW9kZSkge1xuICAgIGNvbnN0IG1ldGEgPSB0aGlzLmdldERhdGFzZXRNZXRhKGluZGV4KTtcbiAgICBjb25zdCBhcmdzID0ge21ldGEsIGluZGV4LCBtb2RlLCBjYW5jZWxhYmxlOiB0cnVlfTtcbiAgICBpZiAodGhpcy5ub3RpZnlQbHVnaW5zKCdiZWZvcmVEYXRhc2V0VXBkYXRlJywgYXJncykgPT09IGZhbHNlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIG1ldGEuY29udHJvbGxlci5fdXBkYXRlKG1vZGUpO1xuICAgIGFyZ3MuY2FuY2VsYWJsZSA9IGZhbHNlO1xuICAgIHRoaXMubm90aWZ5UGx1Z2lucygnYWZ0ZXJEYXRhc2V0VXBkYXRlJywgYXJncyk7XG4gIH1cbiAgcmVuZGVyKCkge1xuICAgIGlmICh0aGlzLm5vdGlmeVBsdWdpbnMoJ2JlZm9yZVJlbmRlcicsIHtjYW5jZWxhYmxlOiB0cnVlfSkgPT09IGZhbHNlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChhbmltYXRvci5oYXModGhpcykpIHtcbiAgICAgIGlmICh0aGlzLmF0dGFjaGVkICYmICFhbmltYXRvci5ydW5uaW5nKHRoaXMpKSB7XG4gICAgICAgIGFuaW1hdG9yLnN0YXJ0KHRoaXMpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmRyYXcoKTtcbiAgICAgIG9uQW5pbWF0aW9uc0NvbXBsZXRlKHtjaGFydDogdGhpc30pO1xuICAgIH1cbiAgfVxuICBkcmF3KCkge1xuICAgIGxldCBpO1xuICAgIGlmICh0aGlzLl9yZXNpemVCZWZvcmVEcmF3KSB7XG4gICAgICBjb25zdCB7d2lkdGgsIGhlaWdodH0gPSB0aGlzLl9yZXNpemVCZWZvcmVEcmF3O1xuICAgICAgdGhpcy5fcmVzaXplKHdpZHRoLCBoZWlnaHQpO1xuICAgICAgdGhpcy5fcmVzaXplQmVmb3JlRHJhdyA9IG51bGw7XG4gICAgfVxuICAgIHRoaXMuY2xlYXIoKTtcbiAgICBpZiAodGhpcy53aWR0aCA8PSAwIHx8IHRoaXMuaGVpZ2h0IDw9IDApIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKHRoaXMubm90aWZ5UGx1Z2lucygnYmVmb3JlRHJhdycsIHtjYW5jZWxhYmxlOiB0cnVlfSkgPT09IGZhbHNlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IGxheWVycyA9IHRoaXMuX2xheWVycztcbiAgICBmb3IgKGkgPSAwOyBpIDwgbGF5ZXJzLmxlbmd0aCAmJiBsYXllcnNbaV0ueiA8PSAwOyArK2kpIHtcbiAgICAgIGxheWVyc1tpXS5kcmF3KHRoaXMuY2hhcnRBcmVhKTtcbiAgICB9XG4gICAgdGhpcy5fZHJhd0RhdGFzZXRzKCk7XG4gICAgZm9yICg7IGkgPCBsYXllcnMubGVuZ3RoOyArK2kpIHtcbiAgICAgIGxheWVyc1tpXS5kcmF3KHRoaXMuY2hhcnRBcmVhKTtcbiAgICB9XG4gICAgdGhpcy5ub3RpZnlQbHVnaW5zKCdhZnRlckRyYXcnKTtcbiAgfVxuICBfZ2V0U29ydGVkRGF0YXNldE1ldGFzKGZpbHRlclZpc2libGUpIHtcbiAgICBjb25zdCBtZXRhc2V0cyA9IHRoaXMuX3NvcnRlZE1ldGFzZXRzO1xuICAgIGNvbnN0IHJlc3VsdCA9IFtdO1xuICAgIGxldCBpLCBpbGVuO1xuICAgIGZvciAoaSA9IDAsIGlsZW4gPSBtZXRhc2V0cy5sZW5ndGg7IGkgPCBpbGVuOyArK2kpIHtcbiAgICAgIGNvbnN0IG1ldGEgPSBtZXRhc2V0c1tpXTtcbiAgICAgIGlmICghZmlsdGVyVmlzaWJsZSB8fCBtZXRhLnZpc2libGUpIHtcbiAgICAgICAgcmVzdWx0LnB1c2gobWV0YSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbiAgZ2V0U29ydGVkVmlzaWJsZURhdGFzZXRNZXRhcygpIHtcbiAgICByZXR1cm4gdGhpcy5fZ2V0U29ydGVkRGF0YXNldE1ldGFzKHRydWUpO1xuICB9XG4gIF9kcmF3RGF0YXNldHMoKSB7XG4gICAgaWYgKHRoaXMubm90aWZ5UGx1Z2lucygnYmVmb3JlRGF0YXNldHNEcmF3Jywge2NhbmNlbGFibGU6IHRydWV9KSA9PT0gZmFsc2UpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgbWV0YXNldHMgPSB0aGlzLmdldFNvcnRlZFZpc2libGVEYXRhc2V0TWV0YXMoKTtcbiAgICBmb3IgKGxldCBpID0gbWV0YXNldHMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgIHRoaXMuX2RyYXdEYXRhc2V0KG1ldGFzZXRzW2ldKTtcbiAgICB9XG4gICAgdGhpcy5ub3RpZnlQbHVnaW5zKCdhZnRlckRhdGFzZXRzRHJhdycpO1xuICB9XG4gIF9kcmF3RGF0YXNldChtZXRhKSB7XG4gICAgY29uc3QgY3R4ID0gdGhpcy5jdHg7XG4gICAgY29uc3QgY2xpcCA9IG1ldGEuX2NsaXA7XG4gICAgY29uc3QgdXNlQ2xpcCA9ICFjbGlwLmRpc2FibGVkO1xuICAgIGNvbnN0IGFyZWEgPSB0aGlzLmNoYXJ0QXJlYTtcbiAgICBjb25zdCBhcmdzID0ge1xuICAgICAgbWV0YSxcbiAgICAgIGluZGV4OiBtZXRhLmluZGV4LFxuICAgICAgY2FuY2VsYWJsZTogdHJ1ZVxuICAgIH07XG4gICAgaWYgKHRoaXMubm90aWZ5UGx1Z2lucygnYmVmb3JlRGF0YXNldERyYXcnLCBhcmdzKSA9PT0gZmFsc2UpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKHVzZUNsaXApIHtcbiAgICAgIGNsaXBBcmVhKGN0eCwge1xuICAgICAgICBsZWZ0OiBjbGlwLmxlZnQgPT09IGZhbHNlID8gMCA6IGFyZWEubGVmdCAtIGNsaXAubGVmdCxcbiAgICAgICAgcmlnaHQ6IGNsaXAucmlnaHQgPT09IGZhbHNlID8gdGhpcy53aWR0aCA6IGFyZWEucmlnaHQgKyBjbGlwLnJpZ2h0LFxuICAgICAgICB0b3A6IGNsaXAudG9wID09PSBmYWxzZSA/IDAgOiBhcmVhLnRvcCAtIGNsaXAudG9wLFxuICAgICAgICBib3R0b206IGNsaXAuYm90dG9tID09PSBmYWxzZSA/IHRoaXMuaGVpZ2h0IDogYXJlYS5ib3R0b20gKyBjbGlwLmJvdHRvbVxuICAgICAgfSk7XG4gICAgfVxuICAgIG1ldGEuY29udHJvbGxlci5kcmF3KCk7XG4gICAgaWYgKHVzZUNsaXApIHtcbiAgICAgIHVuY2xpcEFyZWEoY3R4KTtcbiAgICB9XG4gICAgYXJncy5jYW5jZWxhYmxlID0gZmFsc2U7XG4gICAgdGhpcy5ub3RpZnlQbHVnaW5zKCdhZnRlckRhdGFzZXREcmF3JywgYXJncyk7XG4gIH1cbiAgZ2V0RWxlbWVudHNBdEV2ZW50Rm9yTW9kZShlLCBtb2RlLCBvcHRpb25zLCB1c2VGaW5hbFBvc2l0aW9uKSB7XG4gICAgY29uc3QgbWV0aG9kID0gSW50ZXJhY3Rpb24ubW9kZXNbbW9kZV07XG4gICAgaWYgKHR5cGVvZiBtZXRob2QgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHJldHVybiBtZXRob2QodGhpcywgZSwgb3B0aW9ucywgdXNlRmluYWxQb3NpdGlvbik7XG4gICAgfVxuICAgIHJldHVybiBbXTtcbiAgfVxuICBnZXREYXRhc2V0TWV0YShkYXRhc2V0SW5kZXgpIHtcbiAgICBjb25zdCBkYXRhc2V0ID0gdGhpcy5kYXRhLmRhdGFzZXRzW2RhdGFzZXRJbmRleF07XG4gICAgY29uc3QgbWV0YXNldHMgPSB0aGlzLl9tZXRhc2V0cztcbiAgICBsZXQgbWV0YSA9IG1ldGFzZXRzLmZpbHRlcih4ID0+IHggJiYgeC5fZGF0YXNldCA9PT0gZGF0YXNldCkucG9wKCk7XG4gICAgaWYgKCFtZXRhKSB7XG4gICAgICBtZXRhID0ge1xuICAgICAgICB0eXBlOiBudWxsLFxuICAgICAgICBkYXRhOiBbXSxcbiAgICAgICAgZGF0YXNldDogbnVsbCxcbiAgICAgICAgY29udHJvbGxlcjogbnVsbCxcbiAgICAgICAgaGlkZGVuOiBudWxsLFxuICAgICAgICB4QXhpc0lEOiBudWxsLFxuICAgICAgICB5QXhpc0lEOiBudWxsLFxuICAgICAgICBvcmRlcjogZGF0YXNldCAmJiBkYXRhc2V0Lm9yZGVyIHx8IDAsXG4gICAgICAgIGluZGV4OiBkYXRhc2V0SW5kZXgsXG4gICAgICAgIF9kYXRhc2V0OiBkYXRhc2V0LFxuICAgICAgICBfcGFyc2VkOiBbXSxcbiAgICAgICAgX3NvcnRlZDogZmFsc2VcbiAgICAgIH07XG4gICAgICBtZXRhc2V0cy5wdXNoKG1ldGEpO1xuICAgIH1cbiAgICByZXR1cm4gbWV0YTtcbiAgfVxuICBnZXRDb250ZXh0KCkge1xuICAgIHJldHVybiB0aGlzLiRjb250ZXh0IHx8ICh0aGlzLiRjb250ZXh0ID0gY3JlYXRlQ29udGV4dChudWxsLCB7Y2hhcnQ6IHRoaXMsIHR5cGU6ICdjaGFydCd9KSk7XG4gIH1cbiAgZ2V0VmlzaWJsZURhdGFzZXRDb3VudCgpIHtcbiAgICByZXR1cm4gdGhpcy5nZXRTb3J0ZWRWaXNpYmxlRGF0YXNldE1ldGFzKCkubGVuZ3RoO1xuICB9XG4gIGlzRGF0YXNldFZpc2libGUoZGF0YXNldEluZGV4KSB7XG4gICAgY29uc3QgZGF0YXNldCA9IHRoaXMuZGF0YS5kYXRhc2V0c1tkYXRhc2V0SW5kZXhdO1xuICAgIGlmICghZGF0YXNldCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBjb25zdCBtZXRhID0gdGhpcy5nZXREYXRhc2V0TWV0YShkYXRhc2V0SW5kZXgpO1xuICAgIHJldHVybiB0eXBlb2YgbWV0YS5oaWRkZW4gPT09ICdib29sZWFuJyA/ICFtZXRhLmhpZGRlbiA6ICFkYXRhc2V0LmhpZGRlbjtcbiAgfVxuICBzZXREYXRhc2V0VmlzaWJpbGl0eShkYXRhc2V0SW5kZXgsIHZpc2libGUpIHtcbiAgICBjb25zdCBtZXRhID0gdGhpcy5nZXREYXRhc2V0TWV0YShkYXRhc2V0SW5kZXgpO1xuICAgIG1ldGEuaGlkZGVuID0gIXZpc2libGU7XG4gIH1cbiAgdG9nZ2xlRGF0YVZpc2liaWxpdHkoaW5kZXgpIHtcbiAgICB0aGlzLl9oaWRkZW5JbmRpY2VzW2luZGV4XSA9ICF0aGlzLl9oaWRkZW5JbmRpY2VzW2luZGV4XTtcbiAgfVxuICBnZXREYXRhVmlzaWJpbGl0eShpbmRleCkge1xuICAgIHJldHVybiAhdGhpcy5faGlkZGVuSW5kaWNlc1tpbmRleF07XG4gIH1cbiAgX3VwZGF0ZVZpc2liaWxpdHkoZGF0YXNldEluZGV4LCBkYXRhSW5kZXgsIHZpc2libGUpIHtcbiAgICBjb25zdCBtb2RlID0gdmlzaWJsZSA/ICdzaG93JyA6ICdoaWRlJztcbiAgICBjb25zdCBtZXRhID0gdGhpcy5nZXREYXRhc2V0TWV0YShkYXRhc2V0SW5kZXgpO1xuICAgIGNvbnN0IGFuaW1zID0gbWV0YS5jb250cm9sbGVyLl9yZXNvbHZlQW5pbWF0aW9ucyh1bmRlZmluZWQsIG1vZGUpO1xuICAgIGlmIChkZWZpbmVkKGRhdGFJbmRleCkpIHtcbiAgICAgIG1ldGEuZGF0YVtkYXRhSW5kZXhdLmhpZGRlbiA9ICF2aXNpYmxlO1xuICAgICAgdGhpcy51cGRhdGUoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5zZXREYXRhc2V0VmlzaWJpbGl0eShkYXRhc2V0SW5kZXgsIHZpc2libGUpO1xuICAgICAgYW5pbXMudXBkYXRlKG1ldGEsIHt2aXNpYmxlfSk7XG4gICAgICB0aGlzLnVwZGF0ZSgoY3R4KSA9PiBjdHguZGF0YXNldEluZGV4ID09PSBkYXRhc2V0SW5kZXggPyBtb2RlIDogdW5kZWZpbmVkKTtcbiAgICB9XG4gIH1cbiAgaGlkZShkYXRhc2V0SW5kZXgsIGRhdGFJbmRleCkge1xuICAgIHRoaXMuX3VwZGF0ZVZpc2liaWxpdHkoZGF0YXNldEluZGV4LCBkYXRhSW5kZXgsIGZhbHNlKTtcbiAgfVxuICBzaG93KGRhdGFzZXRJbmRleCwgZGF0YUluZGV4KSB7XG4gICAgdGhpcy5fdXBkYXRlVmlzaWJpbGl0eShkYXRhc2V0SW5kZXgsIGRhdGFJbmRleCwgdHJ1ZSk7XG4gIH1cbiAgX2Rlc3Ryb3lEYXRhc2V0TWV0YShkYXRhc2V0SW5kZXgpIHtcbiAgICBjb25zdCBtZXRhID0gdGhpcy5fbWV0YXNldHNbZGF0YXNldEluZGV4XTtcbiAgICBpZiAobWV0YSAmJiBtZXRhLmNvbnRyb2xsZXIpIHtcbiAgICAgIG1ldGEuY29udHJvbGxlci5fZGVzdHJveSgpO1xuICAgIH1cbiAgICBkZWxldGUgdGhpcy5fbWV0YXNldHNbZGF0YXNldEluZGV4XTtcbiAgfVxuICBfc3RvcCgpIHtcbiAgICBsZXQgaSwgaWxlbjtcbiAgICB0aGlzLnN0b3AoKTtcbiAgICBhbmltYXRvci5yZW1vdmUodGhpcyk7XG4gICAgZm9yIChpID0gMCwgaWxlbiA9IHRoaXMuZGF0YS5kYXRhc2V0cy5sZW5ndGg7IGkgPCBpbGVuOyArK2kpIHtcbiAgICAgIHRoaXMuX2Rlc3Ryb3lEYXRhc2V0TWV0YShpKTtcbiAgICB9XG4gIH1cbiAgZGVzdHJveSgpIHtcbiAgICB0aGlzLm5vdGlmeVBsdWdpbnMoJ2JlZm9yZURlc3Ryb3knKTtcbiAgICBjb25zdCB7Y2FudmFzLCBjdHh9ID0gdGhpcztcbiAgICB0aGlzLl9zdG9wKCk7XG4gICAgdGhpcy5jb25maWcuY2xlYXJDYWNoZSgpO1xuICAgIGlmIChjYW52YXMpIHtcbiAgICAgIHRoaXMudW5iaW5kRXZlbnRzKCk7XG4gICAgICBjbGVhckNhbnZhcyhjYW52YXMsIGN0eCk7XG4gICAgICB0aGlzLnBsYXRmb3JtLnJlbGVhc2VDb250ZXh0KGN0eCk7XG4gICAgICB0aGlzLmNhbnZhcyA9IG51bGw7XG4gICAgICB0aGlzLmN0eCA9IG51bGw7XG4gICAgfVxuICAgIHRoaXMubm90aWZ5UGx1Z2lucygnZGVzdHJveScpO1xuICAgIGRlbGV0ZSBpbnN0YW5jZXNbdGhpcy5pZF07XG4gICAgdGhpcy5ub3RpZnlQbHVnaW5zKCdhZnRlckRlc3Ryb3knKTtcbiAgfVxuICB0b0Jhc2U2NEltYWdlKC4uLmFyZ3MpIHtcbiAgICByZXR1cm4gdGhpcy5jYW52YXMudG9EYXRhVVJMKC4uLmFyZ3MpO1xuICB9XG4gIGJpbmRFdmVudHMoKSB7XG4gICAgdGhpcy5iaW5kVXNlckV2ZW50cygpO1xuICAgIGlmICh0aGlzLm9wdGlvbnMucmVzcG9uc2l2ZSkge1xuICAgICAgdGhpcy5iaW5kUmVzcG9uc2l2ZUV2ZW50cygpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmF0dGFjaGVkID0gdHJ1ZTtcbiAgICB9XG4gIH1cbiAgYmluZFVzZXJFdmVudHMoKSB7XG4gICAgY29uc3QgbGlzdGVuZXJzID0gdGhpcy5fbGlzdGVuZXJzO1xuICAgIGNvbnN0IHBsYXRmb3JtID0gdGhpcy5wbGF0Zm9ybTtcbiAgICBjb25zdCBfYWRkID0gKHR5cGUsIGxpc3RlbmVyKSA9PiB7XG4gICAgICBwbGF0Zm9ybS5hZGRFdmVudExpc3RlbmVyKHRoaXMsIHR5cGUsIGxpc3RlbmVyKTtcbiAgICAgIGxpc3RlbmVyc1t0eXBlXSA9IGxpc3RlbmVyO1xuICAgIH07XG4gICAgY29uc3QgbGlzdGVuZXIgPSAoZSwgeCwgeSkgPT4ge1xuICAgICAgZS5vZmZzZXRYID0geDtcbiAgICAgIGUub2Zmc2V0WSA9IHk7XG4gICAgICB0aGlzLl9ldmVudEhhbmRsZXIoZSk7XG4gICAgfTtcbiAgICBlYWNoKHRoaXMub3B0aW9ucy5ldmVudHMsICh0eXBlKSA9PiBfYWRkKHR5cGUsIGxpc3RlbmVyKSk7XG4gIH1cbiAgYmluZFJlc3BvbnNpdmVFdmVudHMoKSB7XG4gICAgaWYgKCF0aGlzLl9yZXNwb25zaXZlTGlzdGVuZXJzKSB7XG4gICAgICB0aGlzLl9yZXNwb25zaXZlTGlzdGVuZXJzID0ge307XG4gICAgfVxuICAgIGNvbnN0IGxpc3RlbmVycyA9IHRoaXMuX3Jlc3BvbnNpdmVMaXN0ZW5lcnM7XG4gICAgY29uc3QgcGxhdGZvcm0gPSB0aGlzLnBsYXRmb3JtO1xuICAgIGNvbnN0IF9hZGQgPSAodHlwZSwgbGlzdGVuZXIpID0+IHtcbiAgICAgIHBsYXRmb3JtLmFkZEV2ZW50TGlzdGVuZXIodGhpcywgdHlwZSwgbGlzdGVuZXIpO1xuICAgICAgbGlzdGVuZXJzW3R5cGVdID0gbGlzdGVuZXI7XG4gICAgfTtcbiAgICBjb25zdCBfcmVtb3ZlID0gKHR5cGUsIGxpc3RlbmVyKSA9PiB7XG4gICAgICBpZiAobGlzdGVuZXJzW3R5cGVdKSB7XG4gICAgICAgIHBsYXRmb3JtLnJlbW92ZUV2ZW50TGlzdGVuZXIodGhpcywgdHlwZSwgbGlzdGVuZXIpO1xuICAgICAgICBkZWxldGUgbGlzdGVuZXJzW3R5cGVdO1xuICAgICAgfVxuICAgIH07XG4gICAgY29uc3QgbGlzdGVuZXIgPSAod2lkdGgsIGhlaWdodCkgPT4ge1xuICAgICAgaWYgKHRoaXMuY2FudmFzKSB7XG4gICAgICAgIHRoaXMucmVzaXplKHdpZHRoLCBoZWlnaHQpO1xuICAgICAgfVxuICAgIH07XG4gICAgbGV0IGRldGFjaGVkO1xuICAgIGNvbnN0IGF0dGFjaGVkID0gKCkgPT4ge1xuICAgICAgX3JlbW92ZSgnYXR0YWNoJywgYXR0YWNoZWQpO1xuICAgICAgdGhpcy5hdHRhY2hlZCA9IHRydWU7XG4gICAgICB0aGlzLnJlc2l6ZSgpO1xuICAgICAgX2FkZCgncmVzaXplJywgbGlzdGVuZXIpO1xuICAgICAgX2FkZCgnZGV0YWNoJywgZGV0YWNoZWQpO1xuICAgIH07XG4gICAgZGV0YWNoZWQgPSAoKSA9PiB7XG4gICAgICB0aGlzLmF0dGFjaGVkID0gZmFsc2U7XG4gICAgICBfcmVtb3ZlKCdyZXNpemUnLCBsaXN0ZW5lcik7XG4gICAgICB0aGlzLl9zdG9wKCk7XG4gICAgICB0aGlzLl9yZXNpemUoMCwgMCk7XG4gICAgICBfYWRkKCdhdHRhY2gnLCBhdHRhY2hlZCk7XG4gICAgfTtcbiAgICBpZiAocGxhdGZvcm0uaXNBdHRhY2hlZCh0aGlzLmNhbnZhcykpIHtcbiAgICAgIGF0dGFjaGVkKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGRldGFjaGVkKCk7XG4gICAgfVxuICB9XG4gIHVuYmluZEV2ZW50cygpIHtcbiAgICBlYWNoKHRoaXMuX2xpc3RlbmVycywgKGxpc3RlbmVyLCB0eXBlKSA9PiB7XG4gICAgICB0aGlzLnBsYXRmb3JtLnJlbW92ZUV2ZW50TGlzdGVuZXIodGhpcywgdHlwZSwgbGlzdGVuZXIpO1xuICAgIH0pO1xuICAgIHRoaXMuX2xpc3RlbmVycyA9IHt9O1xuICAgIGVhY2godGhpcy5fcmVzcG9uc2l2ZUxpc3RlbmVycywgKGxpc3RlbmVyLCB0eXBlKSA9PiB7XG4gICAgICB0aGlzLnBsYXRmb3JtLnJlbW92ZUV2ZW50TGlzdGVuZXIodGhpcywgdHlwZSwgbGlzdGVuZXIpO1xuICAgIH0pO1xuICAgIHRoaXMuX3Jlc3BvbnNpdmVMaXN0ZW5lcnMgPSB1bmRlZmluZWQ7XG4gIH1cbiAgdXBkYXRlSG92ZXJTdHlsZShpdGVtcywgbW9kZSwgZW5hYmxlZCkge1xuICAgIGNvbnN0IHByZWZpeCA9IGVuYWJsZWQgPyAnc2V0JyA6ICdyZW1vdmUnO1xuICAgIGxldCBtZXRhLCBpdGVtLCBpLCBpbGVuO1xuICAgIGlmIChtb2RlID09PSAnZGF0YXNldCcpIHtcbiAgICAgIG1ldGEgPSB0aGlzLmdldERhdGFzZXRNZXRhKGl0ZW1zWzBdLmRhdGFzZXRJbmRleCk7XG4gICAgICBtZXRhLmNvbnRyb2xsZXJbJ18nICsgcHJlZml4ICsgJ0RhdGFzZXRIb3ZlclN0eWxlJ10oKTtcbiAgICB9XG4gICAgZm9yIChpID0gMCwgaWxlbiA9IGl0ZW1zLmxlbmd0aDsgaSA8IGlsZW47ICsraSkge1xuICAgICAgaXRlbSA9IGl0ZW1zW2ldO1xuICAgICAgY29uc3QgY29udHJvbGxlciA9IGl0ZW0gJiYgdGhpcy5nZXREYXRhc2V0TWV0YShpdGVtLmRhdGFzZXRJbmRleCkuY29udHJvbGxlcjtcbiAgICAgIGlmIChjb250cm9sbGVyKSB7XG4gICAgICAgIGNvbnRyb2xsZXJbcHJlZml4ICsgJ0hvdmVyU3R5bGUnXShpdGVtLmVsZW1lbnQsIGl0ZW0uZGF0YXNldEluZGV4LCBpdGVtLmluZGV4KTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgZ2V0QWN0aXZlRWxlbWVudHMoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2FjdGl2ZSB8fCBbXTtcbiAgfVxuICBzZXRBY3RpdmVFbGVtZW50cyhhY3RpdmVFbGVtZW50cykge1xuICAgIGNvbnN0IGxhc3RBY3RpdmUgPSB0aGlzLl9hY3RpdmUgfHwgW107XG4gICAgY29uc3QgYWN0aXZlID0gYWN0aXZlRWxlbWVudHMubWFwKCh7ZGF0YXNldEluZGV4LCBpbmRleH0pID0+IHtcbiAgICAgIGNvbnN0IG1ldGEgPSB0aGlzLmdldERhdGFzZXRNZXRhKGRhdGFzZXRJbmRleCk7XG4gICAgICBpZiAoIW1ldGEpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdObyBkYXRhc2V0IGZvdW5kIGF0IGluZGV4ICcgKyBkYXRhc2V0SW5kZXgpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgZGF0YXNldEluZGV4LFxuICAgICAgICBlbGVtZW50OiBtZXRhLmRhdGFbaW5kZXhdLFxuICAgICAgICBpbmRleCxcbiAgICAgIH07XG4gICAgfSk7XG4gICAgY29uc3QgY2hhbmdlZCA9ICFfZWxlbWVudHNFcXVhbChhY3RpdmUsIGxhc3RBY3RpdmUpO1xuICAgIGlmIChjaGFuZ2VkKSB7XG4gICAgICB0aGlzLl9hY3RpdmUgPSBhY3RpdmU7XG4gICAgICB0aGlzLl9sYXN0RXZlbnQgPSBudWxsO1xuICAgICAgdGhpcy5fdXBkYXRlSG92ZXJTdHlsZXMoYWN0aXZlLCBsYXN0QWN0aXZlKTtcbiAgICB9XG4gIH1cbiAgbm90aWZ5UGx1Z2lucyhob29rLCBhcmdzLCBmaWx0ZXIpIHtcbiAgICByZXR1cm4gdGhpcy5fcGx1Z2lucy5ub3RpZnkodGhpcywgaG9vaywgYXJncywgZmlsdGVyKTtcbiAgfVxuICBfdXBkYXRlSG92ZXJTdHlsZXMoYWN0aXZlLCBsYXN0QWN0aXZlLCByZXBsYXkpIHtcbiAgICBjb25zdCBob3Zlck9wdGlvbnMgPSB0aGlzLm9wdGlvbnMuaG92ZXI7XG4gICAgY29uc3QgZGlmZiA9IChhLCBiKSA9PiBhLmZpbHRlcih4ID0+ICFiLnNvbWUoeSA9PiB4LmRhdGFzZXRJbmRleCA9PT0geS5kYXRhc2V0SW5kZXggJiYgeC5pbmRleCA9PT0geS5pbmRleCkpO1xuICAgIGNvbnN0IGRlYWN0aXZhdGVkID0gZGlmZihsYXN0QWN0aXZlLCBhY3RpdmUpO1xuICAgIGNvbnN0IGFjdGl2YXRlZCA9IHJlcGxheSA/IGFjdGl2ZSA6IGRpZmYoYWN0aXZlLCBsYXN0QWN0aXZlKTtcbiAgICBpZiAoZGVhY3RpdmF0ZWQubGVuZ3RoKSB7XG4gICAgICB0aGlzLnVwZGF0ZUhvdmVyU3R5bGUoZGVhY3RpdmF0ZWQsIGhvdmVyT3B0aW9ucy5tb2RlLCBmYWxzZSk7XG4gICAgfVxuICAgIGlmIChhY3RpdmF0ZWQubGVuZ3RoICYmIGhvdmVyT3B0aW9ucy5tb2RlKSB7XG4gICAgICB0aGlzLnVwZGF0ZUhvdmVyU3R5bGUoYWN0aXZhdGVkLCBob3Zlck9wdGlvbnMubW9kZSwgdHJ1ZSk7XG4gICAgfVxuICB9XG4gIF9ldmVudEhhbmRsZXIoZSwgcmVwbGF5KSB7XG4gICAgY29uc3QgYXJncyA9IHtcbiAgICAgIGV2ZW50OiBlLFxuICAgICAgcmVwbGF5LFxuICAgICAgY2FuY2VsYWJsZTogdHJ1ZSxcbiAgICAgIGluQ2hhcnRBcmVhOiBfaXNQb2ludEluQXJlYShlLCB0aGlzLmNoYXJ0QXJlYSwgdGhpcy5fbWluUGFkZGluZylcbiAgICB9O1xuICAgIGNvbnN0IGV2ZW50RmlsdGVyID0gKHBsdWdpbikgPT4gKHBsdWdpbi5vcHRpb25zLmV2ZW50cyB8fCB0aGlzLm9wdGlvbnMuZXZlbnRzKS5pbmNsdWRlcyhlLm5hdGl2ZS50eXBlKTtcbiAgICBpZiAodGhpcy5ub3RpZnlQbHVnaW5zKCdiZWZvcmVFdmVudCcsIGFyZ3MsIGV2ZW50RmlsdGVyKSA9PT0gZmFsc2UpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgY2hhbmdlZCA9IHRoaXMuX2hhbmRsZUV2ZW50KGUsIHJlcGxheSwgYXJncy5pbkNoYXJ0QXJlYSk7XG4gICAgYXJncy5jYW5jZWxhYmxlID0gZmFsc2U7XG4gICAgdGhpcy5ub3RpZnlQbHVnaW5zKCdhZnRlckV2ZW50JywgYXJncywgZXZlbnRGaWx0ZXIpO1xuICAgIGlmIChjaGFuZ2VkIHx8IGFyZ3MuY2hhbmdlZCkge1xuICAgICAgdGhpcy5yZW5kZXIoKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbiAgX2hhbmRsZUV2ZW50KGUsIHJlcGxheSwgaW5DaGFydEFyZWEpIHtcbiAgICBjb25zdCB7X2FjdGl2ZTogbGFzdEFjdGl2ZSA9IFtdLCBvcHRpb25zfSA9IHRoaXM7XG4gICAgY29uc3QgdXNlRmluYWxQb3NpdGlvbiA9IHJlcGxheTtcbiAgICBjb25zdCBhY3RpdmUgPSB0aGlzLl9nZXRBY3RpdmVFbGVtZW50cyhlLCBsYXN0QWN0aXZlLCBpbkNoYXJ0QXJlYSwgdXNlRmluYWxQb3NpdGlvbik7XG4gICAgY29uc3QgaXNDbGljayA9IF9pc0NsaWNrRXZlbnQoZSk7XG4gICAgY29uc3QgbGFzdEV2ZW50ID0gZGV0ZXJtaW5lTGFzdEV2ZW50KGUsIHRoaXMuX2xhc3RFdmVudCwgaW5DaGFydEFyZWEsIGlzQ2xpY2spO1xuICAgIGlmIChpbkNoYXJ0QXJlYSkge1xuICAgICAgdGhpcy5fbGFzdEV2ZW50ID0gbnVsbDtcbiAgICAgIGNhbGxiYWNrKG9wdGlvbnMub25Ib3ZlciwgW2UsIGFjdGl2ZSwgdGhpc10sIHRoaXMpO1xuICAgICAgaWYgKGlzQ2xpY2spIHtcbiAgICAgICAgY2FsbGJhY2sob3B0aW9ucy5vbkNsaWNrLCBbZSwgYWN0aXZlLCB0aGlzXSwgdGhpcyk7XG4gICAgICB9XG4gICAgfVxuICAgIGNvbnN0IGNoYW5nZWQgPSAhX2VsZW1lbnRzRXF1YWwoYWN0aXZlLCBsYXN0QWN0aXZlKTtcbiAgICBpZiAoY2hhbmdlZCB8fCByZXBsYXkpIHtcbiAgICAgIHRoaXMuX2FjdGl2ZSA9IGFjdGl2ZTtcbiAgICAgIHRoaXMuX3VwZGF0ZUhvdmVyU3R5bGVzKGFjdGl2ZSwgbGFzdEFjdGl2ZSwgcmVwbGF5KTtcbiAgICB9XG4gICAgdGhpcy5fbGFzdEV2ZW50ID0gbGFzdEV2ZW50O1xuICAgIHJldHVybiBjaGFuZ2VkO1xuICB9XG4gIF9nZXRBY3RpdmVFbGVtZW50cyhlLCBsYXN0QWN0aXZlLCBpbkNoYXJ0QXJlYSwgdXNlRmluYWxQb3NpdGlvbikge1xuICAgIGlmIChlLnR5cGUgPT09ICdtb3VzZW91dCcpIHtcbiAgICAgIHJldHVybiBbXTtcbiAgICB9XG4gICAgaWYgKCFpbkNoYXJ0QXJlYSkge1xuICAgICAgcmV0dXJuIGxhc3RBY3RpdmU7XG4gICAgfVxuICAgIGNvbnN0IGhvdmVyT3B0aW9ucyA9IHRoaXMub3B0aW9ucy5ob3ZlcjtcbiAgICByZXR1cm4gdGhpcy5nZXRFbGVtZW50c0F0RXZlbnRGb3JNb2RlKGUsIGhvdmVyT3B0aW9ucy5tb2RlLCBob3Zlck9wdGlvbnMsIHVzZUZpbmFsUG9zaXRpb24pO1xuICB9XG59XG5jb25zdCBpbnZhbGlkYXRlUGx1Z2lucyA9ICgpID0+IGVhY2goQ2hhcnQuaW5zdGFuY2VzLCAoY2hhcnQpID0+IGNoYXJ0Ll9wbHVnaW5zLmludmFsaWRhdGUoKSk7XG5jb25zdCBlbnVtZXJhYmxlID0gdHJ1ZTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKENoYXJ0LCB7XG4gIGRlZmF1bHRzOiB7XG4gICAgZW51bWVyYWJsZSxcbiAgICB2YWx1ZTogZGVmYXVsdHNcbiAgfSxcbiAgaW5zdGFuY2VzOiB7XG4gICAgZW51bWVyYWJsZSxcbiAgICB2YWx1ZTogaW5zdGFuY2VzXG4gIH0sXG4gIG92ZXJyaWRlczoge1xuICAgIGVudW1lcmFibGUsXG4gICAgdmFsdWU6IG92ZXJyaWRlc1xuICB9LFxuICByZWdpc3RyeToge1xuICAgIGVudW1lcmFibGUsXG4gICAgdmFsdWU6IHJlZ2lzdHJ5XG4gIH0sXG4gIHZlcnNpb246IHtcbiAgICBlbnVtZXJhYmxlLFxuICAgIHZhbHVlOiB2ZXJzaW9uXG4gIH0sXG4gIGdldENoYXJ0OiB7XG4gICAgZW51bWVyYWJsZSxcbiAgICB2YWx1ZTogZ2V0Q2hhcnRcbiAgfSxcbiAgcmVnaXN0ZXI6IHtcbiAgICBlbnVtZXJhYmxlLFxuICAgIHZhbHVlOiAoLi4uaXRlbXMpID0+IHtcbiAgICAgIHJlZ2lzdHJ5LmFkZCguLi5pdGVtcyk7XG4gICAgICBpbnZhbGlkYXRlUGx1Z2lucygpO1xuICAgIH1cbiAgfSxcbiAgdW5yZWdpc3Rlcjoge1xuICAgIGVudW1lcmFibGUsXG4gICAgdmFsdWU6ICguLi5pdGVtcykgPT4ge1xuICAgICAgcmVnaXN0cnkucmVtb3ZlKC4uLml0ZW1zKTtcbiAgICAgIGludmFsaWRhdGVQbHVnaW5zKCk7XG4gICAgfVxuICB9XG59KTtcblxuZnVuY3Rpb24gY2xpcEFyYyhjdHgsIGVsZW1lbnQsIGVuZEFuZ2xlKSB7XG4gIGNvbnN0IHtzdGFydEFuZ2xlLCBwaXhlbE1hcmdpbiwgeCwgeSwgb3V0ZXJSYWRpdXMsIGlubmVyUmFkaXVzfSA9IGVsZW1lbnQ7XG4gIGxldCBhbmdsZU1hcmdpbiA9IHBpeGVsTWFyZ2luIC8gb3V0ZXJSYWRpdXM7XG4gIGN0eC5iZWdpblBhdGgoKTtcbiAgY3R4LmFyYyh4LCB5LCBvdXRlclJhZGl1cywgc3RhcnRBbmdsZSAtIGFuZ2xlTWFyZ2luLCBlbmRBbmdsZSArIGFuZ2xlTWFyZ2luKTtcbiAgaWYgKGlubmVyUmFkaXVzID4gcGl4ZWxNYXJnaW4pIHtcbiAgICBhbmdsZU1hcmdpbiA9IHBpeGVsTWFyZ2luIC8gaW5uZXJSYWRpdXM7XG4gICAgY3R4LmFyYyh4LCB5LCBpbm5lclJhZGl1cywgZW5kQW5nbGUgKyBhbmdsZU1hcmdpbiwgc3RhcnRBbmdsZSAtIGFuZ2xlTWFyZ2luLCB0cnVlKTtcbiAgfSBlbHNlIHtcbiAgICBjdHguYXJjKHgsIHksIHBpeGVsTWFyZ2luLCBlbmRBbmdsZSArIEhBTEZfUEksIHN0YXJ0QW5nbGUgLSBIQUxGX1BJKTtcbiAgfVxuICBjdHguY2xvc2VQYXRoKCk7XG4gIGN0eC5jbGlwKCk7XG59XG5mdW5jdGlvbiB0b1JhZGl1c0Nvcm5lcnModmFsdWUpIHtcbiAgcmV0dXJuIF9yZWFkVmFsdWVUb1Byb3BzKHZhbHVlLCBbJ291dGVyU3RhcnQnLCAnb3V0ZXJFbmQnLCAnaW5uZXJTdGFydCcsICdpbm5lckVuZCddKTtcbn1cbmZ1bmN0aW9uIHBhcnNlQm9yZGVyUmFkaXVzJDEoYXJjLCBpbm5lclJhZGl1cywgb3V0ZXJSYWRpdXMsIGFuZ2xlRGVsdGEpIHtcbiAgY29uc3QgbyA9IHRvUmFkaXVzQ29ybmVycyhhcmMub3B0aW9ucy5ib3JkZXJSYWRpdXMpO1xuICBjb25zdCBoYWxmVGhpY2tuZXNzID0gKG91dGVyUmFkaXVzIC0gaW5uZXJSYWRpdXMpIC8gMjtcbiAgY29uc3QgaW5uZXJMaW1pdCA9IE1hdGgubWluKGhhbGZUaGlja25lc3MsIGFuZ2xlRGVsdGEgKiBpbm5lclJhZGl1cyAvIDIpO1xuICBjb25zdCBjb21wdXRlT3V0ZXJMaW1pdCA9ICh2YWwpID0+IHtcbiAgICBjb25zdCBvdXRlckFyY0xpbWl0ID0gKG91dGVyUmFkaXVzIC0gTWF0aC5taW4oaGFsZlRoaWNrbmVzcywgdmFsKSkgKiBhbmdsZURlbHRhIC8gMjtcbiAgICByZXR1cm4gX2xpbWl0VmFsdWUodmFsLCAwLCBNYXRoLm1pbihoYWxmVGhpY2tuZXNzLCBvdXRlckFyY0xpbWl0KSk7XG4gIH07XG4gIHJldHVybiB7XG4gICAgb3V0ZXJTdGFydDogY29tcHV0ZU91dGVyTGltaXQoby5vdXRlclN0YXJ0KSxcbiAgICBvdXRlckVuZDogY29tcHV0ZU91dGVyTGltaXQoby5vdXRlckVuZCksXG4gICAgaW5uZXJTdGFydDogX2xpbWl0VmFsdWUoby5pbm5lclN0YXJ0LCAwLCBpbm5lckxpbWl0KSxcbiAgICBpbm5lckVuZDogX2xpbWl0VmFsdWUoby5pbm5lckVuZCwgMCwgaW5uZXJMaW1pdCksXG4gIH07XG59XG5mdW5jdGlvbiByVGhldGFUb1hZKHIsIHRoZXRhLCB4LCB5KSB7XG4gIHJldHVybiB7XG4gICAgeDogeCArIHIgKiBNYXRoLmNvcyh0aGV0YSksXG4gICAgeTogeSArIHIgKiBNYXRoLnNpbih0aGV0YSksXG4gIH07XG59XG5mdW5jdGlvbiBwYXRoQXJjKGN0eCwgZWxlbWVudCwgb2Zmc2V0LCBzcGFjaW5nLCBlbmQpIHtcbiAgY29uc3Qge3gsIHksIHN0YXJ0QW5nbGU6IHN0YXJ0LCBwaXhlbE1hcmdpbiwgaW5uZXJSYWRpdXM6IGlubmVyUn0gPSBlbGVtZW50O1xuICBjb25zdCBvdXRlclJhZGl1cyA9IE1hdGgubWF4KGVsZW1lbnQub3V0ZXJSYWRpdXMgKyBzcGFjaW5nICsgb2Zmc2V0IC0gcGl4ZWxNYXJnaW4sIDApO1xuICBjb25zdCBpbm5lclJhZGl1cyA9IGlubmVyUiA+IDAgPyBpbm5lclIgKyBzcGFjaW5nICsgb2Zmc2V0ICsgcGl4ZWxNYXJnaW4gOiAwO1xuICBsZXQgc3BhY2luZ09mZnNldCA9IDA7XG4gIGNvbnN0IGFscGhhID0gZW5kIC0gc3RhcnQ7XG4gIGlmIChzcGFjaW5nKSB7XG4gICAgY29uc3Qgbm9TcGFjaW5nSW5uZXJSYWRpdXMgPSBpbm5lclIgPiAwID8gaW5uZXJSIC0gc3BhY2luZyA6IDA7XG4gICAgY29uc3Qgbm9TcGFjaW5nT3V0ZXJSYWRpdXMgPSBvdXRlclJhZGl1cyA+IDAgPyBvdXRlclJhZGl1cyAtIHNwYWNpbmcgOiAwO1xuICAgIGNvbnN0IGF2Tm9nU3BhY2luZ1JhZGl1cyA9IChub1NwYWNpbmdJbm5lclJhZGl1cyArIG5vU3BhY2luZ091dGVyUmFkaXVzKSAvIDI7XG4gICAgY29uc3QgYWRqdXN0ZWRBbmdsZSA9IGF2Tm9nU3BhY2luZ1JhZGl1cyAhPT0gMCA/IChhbHBoYSAqIGF2Tm9nU3BhY2luZ1JhZGl1cykgLyAoYXZOb2dTcGFjaW5nUmFkaXVzICsgc3BhY2luZykgOiBhbHBoYTtcbiAgICBzcGFjaW5nT2Zmc2V0ID0gKGFscGhhIC0gYWRqdXN0ZWRBbmdsZSkgLyAyO1xuICB9XG4gIGNvbnN0IGJldGEgPSBNYXRoLm1heCgwLjAwMSwgYWxwaGEgKiBvdXRlclJhZGl1cyAtIG9mZnNldCAvIFBJKSAvIG91dGVyUmFkaXVzO1xuICBjb25zdCBhbmdsZU9mZnNldCA9IChhbHBoYSAtIGJldGEpIC8gMjtcbiAgY29uc3Qgc3RhcnRBbmdsZSA9IHN0YXJ0ICsgYW5nbGVPZmZzZXQgKyBzcGFjaW5nT2Zmc2V0O1xuICBjb25zdCBlbmRBbmdsZSA9IGVuZCAtIGFuZ2xlT2Zmc2V0IC0gc3BhY2luZ09mZnNldDtcbiAgY29uc3Qge291dGVyU3RhcnQsIG91dGVyRW5kLCBpbm5lclN0YXJ0LCBpbm5lckVuZH0gPSBwYXJzZUJvcmRlclJhZGl1cyQxKGVsZW1lbnQsIGlubmVyUmFkaXVzLCBvdXRlclJhZGl1cywgZW5kQW5nbGUgLSBzdGFydEFuZ2xlKTtcbiAgY29uc3Qgb3V0ZXJTdGFydEFkanVzdGVkUmFkaXVzID0gb3V0ZXJSYWRpdXMgLSBvdXRlclN0YXJ0O1xuICBjb25zdCBvdXRlckVuZEFkanVzdGVkUmFkaXVzID0gb3V0ZXJSYWRpdXMgLSBvdXRlckVuZDtcbiAgY29uc3Qgb3V0ZXJTdGFydEFkanVzdGVkQW5nbGUgPSBzdGFydEFuZ2xlICsgb3V0ZXJTdGFydCAvIG91dGVyU3RhcnRBZGp1c3RlZFJhZGl1cztcbiAgY29uc3Qgb3V0ZXJFbmRBZGp1c3RlZEFuZ2xlID0gZW5kQW5nbGUgLSBvdXRlckVuZCAvIG91dGVyRW5kQWRqdXN0ZWRSYWRpdXM7XG4gIGNvbnN0IGlubmVyU3RhcnRBZGp1c3RlZFJhZGl1cyA9IGlubmVyUmFkaXVzICsgaW5uZXJTdGFydDtcbiAgY29uc3QgaW5uZXJFbmRBZGp1c3RlZFJhZGl1cyA9IGlubmVyUmFkaXVzICsgaW5uZXJFbmQ7XG4gIGNvbnN0IGlubmVyU3RhcnRBZGp1c3RlZEFuZ2xlID0gc3RhcnRBbmdsZSArIGlubmVyU3RhcnQgLyBpbm5lclN0YXJ0QWRqdXN0ZWRSYWRpdXM7XG4gIGNvbnN0IGlubmVyRW5kQWRqdXN0ZWRBbmdsZSA9IGVuZEFuZ2xlIC0gaW5uZXJFbmQgLyBpbm5lckVuZEFkanVzdGVkUmFkaXVzO1xuICBjdHguYmVnaW5QYXRoKCk7XG4gIGN0eC5hcmMoeCwgeSwgb3V0ZXJSYWRpdXMsIG91dGVyU3RhcnRBZGp1c3RlZEFuZ2xlLCBvdXRlckVuZEFkanVzdGVkQW5nbGUpO1xuICBpZiAob3V0ZXJFbmQgPiAwKSB7XG4gICAgY29uc3QgcENlbnRlciA9IHJUaGV0YVRvWFkob3V0ZXJFbmRBZGp1c3RlZFJhZGl1cywgb3V0ZXJFbmRBZGp1c3RlZEFuZ2xlLCB4LCB5KTtcbiAgICBjdHguYXJjKHBDZW50ZXIueCwgcENlbnRlci55LCBvdXRlckVuZCwgb3V0ZXJFbmRBZGp1c3RlZEFuZ2xlLCBlbmRBbmdsZSArIEhBTEZfUEkpO1xuICB9XG4gIGNvbnN0IHA0ID0gclRoZXRhVG9YWShpbm5lckVuZEFkanVzdGVkUmFkaXVzLCBlbmRBbmdsZSwgeCwgeSk7XG4gIGN0eC5saW5lVG8ocDQueCwgcDQueSk7XG4gIGlmIChpbm5lckVuZCA+IDApIHtcbiAgICBjb25zdCBwQ2VudGVyID0gclRoZXRhVG9YWShpbm5lckVuZEFkanVzdGVkUmFkaXVzLCBpbm5lckVuZEFkanVzdGVkQW5nbGUsIHgsIHkpO1xuICAgIGN0eC5hcmMocENlbnRlci54LCBwQ2VudGVyLnksIGlubmVyRW5kLCBlbmRBbmdsZSArIEhBTEZfUEksIGlubmVyRW5kQWRqdXN0ZWRBbmdsZSArIE1hdGguUEkpO1xuICB9XG4gIGN0eC5hcmMoeCwgeSwgaW5uZXJSYWRpdXMsIGVuZEFuZ2xlIC0gKGlubmVyRW5kIC8gaW5uZXJSYWRpdXMpLCBzdGFydEFuZ2xlICsgKGlubmVyU3RhcnQgLyBpbm5lclJhZGl1cyksIHRydWUpO1xuICBpZiAoaW5uZXJTdGFydCA+IDApIHtcbiAgICBjb25zdCBwQ2VudGVyID0gclRoZXRhVG9YWShpbm5lclN0YXJ0QWRqdXN0ZWRSYWRpdXMsIGlubmVyU3RhcnRBZGp1c3RlZEFuZ2xlLCB4LCB5KTtcbiAgICBjdHguYXJjKHBDZW50ZXIueCwgcENlbnRlci55LCBpbm5lclN0YXJ0LCBpbm5lclN0YXJ0QWRqdXN0ZWRBbmdsZSArIE1hdGguUEksIHN0YXJ0QW5nbGUgLSBIQUxGX1BJKTtcbiAgfVxuICBjb25zdCBwOCA9IHJUaGV0YVRvWFkob3V0ZXJTdGFydEFkanVzdGVkUmFkaXVzLCBzdGFydEFuZ2xlLCB4LCB5KTtcbiAgY3R4LmxpbmVUbyhwOC54LCBwOC55KTtcbiAgaWYgKG91dGVyU3RhcnQgPiAwKSB7XG4gICAgY29uc3QgcENlbnRlciA9IHJUaGV0YVRvWFkob3V0ZXJTdGFydEFkanVzdGVkUmFkaXVzLCBvdXRlclN0YXJ0QWRqdXN0ZWRBbmdsZSwgeCwgeSk7XG4gICAgY3R4LmFyYyhwQ2VudGVyLngsIHBDZW50ZXIueSwgb3V0ZXJTdGFydCwgc3RhcnRBbmdsZSAtIEhBTEZfUEksIG91dGVyU3RhcnRBZGp1c3RlZEFuZ2xlKTtcbiAgfVxuICBjdHguY2xvc2VQYXRoKCk7XG59XG5mdW5jdGlvbiBkcmF3QXJjKGN0eCwgZWxlbWVudCwgb2Zmc2V0LCBzcGFjaW5nKSB7XG4gIGNvbnN0IHtmdWxsQ2lyY2xlcywgc3RhcnRBbmdsZSwgY2lyY3VtZmVyZW5jZX0gPSBlbGVtZW50O1xuICBsZXQgZW5kQW5nbGUgPSBlbGVtZW50LmVuZEFuZ2xlO1xuICBpZiAoZnVsbENpcmNsZXMpIHtcbiAgICBwYXRoQXJjKGN0eCwgZWxlbWVudCwgb2Zmc2V0LCBzcGFjaW5nLCBzdGFydEFuZ2xlICsgVEFVKTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGZ1bGxDaXJjbGVzOyArK2kpIHtcbiAgICAgIGN0eC5maWxsKCk7XG4gICAgfVxuICAgIGlmICghaXNOYU4oY2lyY3VtZmVyZW5jZSkpIHtcbiAgICAgIGVuZEFuZ2xlID0gc3RhcnRBbmdsZSArIGNpcmN1bWZlcmVuY2UgJSBUQVU7XG4gICAgICBpZiAoY2lyY3VtZmVyZW5jZSAlIFRBVSA9PT0gMCkge1xuICAgICAgICBlbmRBbmdsZSArPSBUQVU7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHBhdGhBcmMoY3R4LCBlbGVtZW50LCBvZmZzZXQsIHNwYWNpbmcsIGVuZEFuZ2xlKTtcbiAgY3R4LmZpbGwoKTtcbiAgcmV0dXJuIGVuZEFuZ2xlO1xufVxuZnVuY3Rpb24gZHJhd0Z1bGxDaXJjbGVCb3JkZXJzKGN0eCwgZWxlbWVudCwgaW5uZXIpIHtcbiAgY29uc3Qge3gsIHksIHN0YXJ0QW5nbGUsIHBpeGVsTWFyZ2luLCBmdWxsQ2lyY2xlc30gPSBlbGVtZW50O1xuICBjb25zdCBvdXRlclJhZGl1cyA9IE1hdGgubWF4KGVsZW1lbnQub3V0ZXJSYWRpdXMgLSBwaXhlbE1hcmdpbiwgMCk7XG4gIGNvbnN0IGlubmVyUmFkaXVzID0gZWxlbWVudC5pbm5lclJhZGl1cyArIHBpeGVsTWFyZ2luO1xuICBsZXQgaTtcbiAgaWYgKGlubmVyKSB7XG4gICAgY2xpcEFyYyhjdHgsIGVsZW1lbnQsIHN0YXJ0QW5nbGUgKyBUQVUpO1xuICB9XG4gIGN0eC5iZWdpblBhdGgoKTtcbiAgY3R4LmFyYyh4LCB5LCBpbm5lclJhZGl1cywgc3RhcnRBbmdsZSArIFRBVSwgc3RhcnRBbmdsZSwgdHJ1ZSk7XG4gIGZvciAoaSA9IDA7IGkgPCBmdWxsQ2lyY2xlczsgKytpKSB7XG4gICAgY3R4LnN0cm9rZSgpO1xuICB9XG4gIGN0eC5iZWdpblBhdGgoKTtcbiAgY3R4LmFyYyh4LCB5LCBvdXRlclJhZGl1cywgc3RhcnRBbmdsZSwgc3RhcnRBbmdsZSArIFRBVSk7XG4gIGZvciAoaSA9IDA7IGkgPCBmdWxsQ2lyY2xlczsgKytpKSB7XG4gICAgY3R4LnN0cm9rZSgpO1xuICB9XG59XG5mdW5jdGlvbiBkcmF3Qm9yZGVyKGN0eCwgZWxlbWVudCwgb2Zmc2V0LCBzcGFjaW5nLCBlbmRBbmdsZSkge1xuICBjb25zdCB7b3B0aW9uc30gPSBlbGVtZW50O1xuICBjb25zdCB7Ym9yZGVyV2lkdGgsIGJvcmRlckpvaW5TdHlsZX0gPSBvcHRpb25zO1xuICBjb25zdCBpbm5lciA9IG9wdGlvbnMuYm9yZGVyQWxpZ24gPT09ICdpbm5lcic7XG4gIGlmICghYm9yZGVyV2lkdGgpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKGlubmVyKSB7XG4gICAgY3R4LmxpbmVXaWR0aCA9IGJvcmRlcldpZHRoICogMjtcbiAgICBjdHgubGluZUpvaW4gPSBib3JkZXJKb2luU3R5bGUgfHwgJ3JvdW5kJztcbiAgfSBlbHNlIHtcbiAgICBjdHgubGluZVdpZHRoID0gYm9yZGVyV2lkdGg7XG4gICAgY3R4LmxpbmVKb2luID0gYm9yZGVySm9pblN0eWxlIHx8ICdiZXZlbCc7XG4gIH1cbiAgaWYgKGVsZW1lbnQuZnVsbENpcmNsZXMpIHtcbiAgICBkcmF3RnVsbENpcmNsZUJvcmRlcnMoY3R4LCBlbGVtZW50LCBpbm5lcik7XG4gIH1cbiAgaWYgKGlubmVyKSB7XG4gICAgY2xpcEFyYyhjdHgsIGVsZW1lbnQsIGVuZEFuZ2xlKTtcbiAgfVxuICBwYXRoQXJjKGN0eCwgZWxlbWVudCwgb2Zmc2V0LCBzcGFjaW5nLCBlbmRBbmdsZSk7XG4gIGN0eC5zdHJva2UoKTtcbn1cbmNsYXNzIEFyY0VsZW1lbnQgZXh0ZW5kcyBFbGVtZW50IHtcbiAgY29uc3RydWN0b3IoY2ZnKSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLm9wdGlvbnMgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5jaXJjdW1mZXJlbmNlID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuc3RhcnRBbmdsZSA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLmVuZEFuZ2xlID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuaW5uZXJSYWRpdXMgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5vdXRlclJhZGl1cyA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLnBpeGVsTWFyZ2luID0gMDtcbiAgICB0aGlzLmZ1bGxDaXJjbGVzID0gMDtcbiAgICBpZiAoY2ZnKSB7XG4gICAgICBPYmplY3QuYXNzaWduKHRoaXMsIGNmZyk7XG4gICAgfVxuICB9XG4gIGluUmFuZ2UoY2hhcnRYLCBjaGFydFksIHVzZUZpbmFsUG9zaXRpb24pIHtcbiAgICBjb25zdCBwb2ludCA9IHRoaXMuZ2V0UHJvcHMoWyd4JywgJ3knXSwgdXNlRmluYWxQb3NpdGlvbik7XG4gICAgY29uc3Qge2FuZ2xlLCBkaXN0YW5jZX0gPSBnZXRBbmdsZUZyb21Qb2ludChwb2ludCwge3g6IGNoYXJ0WCwgeTogY2hhcnRZfSk7XG4gICAgY29uc3Qge3N0YXJ0QW5nbGUsIGVuZEFuZ2xlLCBpbm5lclJhZGl1cywgb3V0ZXJSYWRpdXMsIGNpcmN1bWZlcmVuY2V9ID0gdGhpcy5nZXRQcm9wcyhbXG4gICAgICAnc3RhcnRBbmdsZScsXG4gICAgICAnZW5kQW5nbGUnLFxuICAgICAgJ2lubmVyUmFkaXVzJyxcbiAgICAgICdvdXRlclJhZGl1cycsXG4gICAgICAnY2lyY3VtZmVyZW5jZSdcbiAgICBdLCB1c2VGaW5hbFBvc2l0aW9uKTtcbiAgICBjb25zdCByQWRqdXN0ID0gdGhpcy5vcHRpb25zLnNwYWNpbmcgLyAyO1xuICAgIGNvbnN0IF9jaXJjdW1mZXJlbmNlID0gdmFsdWVPckRlZmF1bHQoY2lyY3VtZmVyZW5jZSwgZW5kQW5nbGUgLSBzdGFydEFuZ2xlKTtcbiAgICBjb25zdCBiZXR3ZWVuQW5nbGVzID0gX2NpcmN1bWZlcmVuY2UgPj0gVEFVIHx8IF9hbmdsZUJldHdlZW4oYW5nbGUsIHN0YXJ0QW5nbGUsIGVuZEFuZ2xlKTtcbiAgICBjb25zdCB3aXRoaW5SYWRpdXMgPSBfaXNCZXR3ZWVuKGRpc3RhbmNlLCBpbm5lclJhZGl1cyArIHJBZGp1c3QsIG91dGVyUmFkaXVzICsgckFkanVzdCk7XG4gICAgcmV0dXJuIChiZXR3ZWVuQW5nbGVzICYmIHdpdGhpblJhZGl1cyk7XG4gIH1cbiAgZ2V0Q2VudGVyUG9pbnQodXNlRmluYWxQb3NpdGlvbikge1xuICAgIGNvbnN0IHt4LCB5LCBzdGFydEFuZ2xlLCBlbmRBbmdsZSwgaW5uZXJSYWRpdXMsIG91dGVyUmFkaXVzfSA9IHRoaXMuZ2V0UHJvcHMoW1xuICAgICAgJ3gnLFxuICAgICAgJ3knLFxuICAgICAgJ3N0YXJ0QW5nbGUnLFxuICAgICAgJ2VuZEFuZ2xlJyxcbiAgICAgICdpbm5lclJhZGl1cycsXG4gICAgICAnb3V0ZXJSYWRpdXMnLFxuICAgICAgJ2NpcmN1bWZlcmVuY2UnLFxuICAgIF0sIHVzZUZpbmFsUG9zaXRpb24pO1xuICAgIGNvbnN0IHtvZmZzZXQsIHNwYWNpbmd9ID0gdGhpcy5vcHRpb25zO1xuICAgIGNvbnN0IGhhbGZBbmdsZSA9IChzdGFydEFuZ2xlICsgZW5kQW5nbGUpIC8gMjtcbiAgICBjb25zdCBoYWxmUmFkaXVzID0gKGlubmVyUmFkaXVzICsgb3V0ZXJSYWRpdXMgKyBzcGFjaW5nICsgb2Zmc2V0KSAvIDI7XG4gICAgcmV0dXJuIHtcbiAgICAgIHg6IHggKyBNYXRoLmNvcyhoYWxmQW5nbGUpICogaGFsZlJhZGl1cyxcbiAgICAgIHk6IHkgKyBNYXRoLnNpbihoYWxmQW5nbGUpICogaGFsZlJhZGl1c1xuICAgIH07XG4gIH1cbiAgdG9vbHRpcFBvc2l0aW9uKHVzZUZpbmFsUG9zaXRpb24pIHtcbiAgICByZXR1cm4gdGhpcy5nZXRDZW50ZXJQb2ludCh1c2VGaW5hbFBvc2l0aW9uKTtcbiAgfVxuICBkcmF3KGN0eCkge1xuICAgIGNvbnN0IHtvcHRpb25zLCBjaXJjdW1mZXJlbmNlfSA9IHRoaXM7XG4gICAgY29uc3Qgb2Zmc2V0ID0gKG9wdGlvbnMub2Zmc2V0IHx8IDApIC8gMjtcbiAgICBjb25zdCBzcGFjaW5nID0gKG9wdGlvbnMuc3BhY2luZyB8fCAwKSAvIDI7XG4gICAgdGhpcy5waXhlbE1hcmdpbiA9IChvcHRpb25zLmJvcmRlckFsaWduID09PSAnaW5uZXInKSA/IDAuMzMgOiAwO1xuICAgIHRoaXMuZnVsbENpcmNsZXMgPSBjaXJjdW1mZXJlbmNlID4gVEFVID8gTWF0aC5mbG9vcihjaXJjdW1mZXJlbmNlIC8gVEFVKSA6IDA7XG4gICAgaWYgKGNpcmN1bWZlcmVuY2UgPT09IDAgfHwgdGhpcy5pbm5lclJhZGl1cyA8IDAgfHwgdGhpcy5vdXRlclJhZGl1cyA8IDApIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY3R4LnNhdmUoKTtcbiAgICBsZXQgcmFkaXVzT2Zmc2V0ID0gMDtcbiAgICBpZiAob2Zmc2V0KSB7XG4gICAgICByYWRpdXNPZmZzZXQgPSBvZmZzZXQgLyAyO1xuICAgICAgY29uc3QgaGFsZkFuZ2xlID0gKHRoaXMuc3RhcnRBbmdsZSArIHRoaXMuZW5kQW5nbGUpIC8gMjtcbiAgICAgIGN0eC50cmFuc2xhdGUoTWF0aC5jb3MoaGFsZkFuZ2xlKSAqIHJhZGl1c09mZnNldCwgTWF0aC5zaW4oaGFsZkFuZ2xlKSAqIHJhZGl1c09mZnNldCk7XG4gICAgICBpZiAodGhpcy5jaXJjdW1mZXJlbmNlID49IFBJKSB7XG4gICAgICAgIHJhZGl1c09mZnNldCA9IG9mZnNldDtcbiAgICAgIH1cbiAgICB9XG4gICAgY3R4LmZpbGxTdHlsZSA9IG9wdGlvbnMuYmFja2dyb3VuZENvbG9yO1xuICAgIGN0eC5zdHJva2VTdHlsZSA9IG9wdGlvbnMuYm9yZGVyQ29sb3I7XG4gICAgY29uc3QgZW5kQW5nbGUgPSBkcmF3QXJjKGN0eCwgdGhpcywgcmFkaXVzT2Zmc2V0LCBzcGFjaW5nKTtcbiAgICBkcmF3Qm9yZGVyKGN0eCwgdGhpcywgcmFkaXVzT2Zmc2V0LCBzcGFjaW5nLCBlbmRBbmdsZSk7XG4gICAgY3R4LnJlc3RvcmUoKTtcbiAgfVxufVxuQXJjRWxlbWVudC5pZCA9ICdhcmMnO1xuQXJjRWxlbWVudC5kZWZhdWx0cyA9IHtcbiAgYm9yZGVyQWxpZ246ICdjZW50ZXInLFxuICBib3JkZXJDb2xvcjogJyNmZmYnLFxuICBib3JkZXJKb2luU3R5bGU6IHVuZGVmaW5lZCxcbiAgYm9yZGVyUmFkaXVzOiAwLFxuICBib3JkZXJXaWR0aDogMixcbiAgb2Zmc2V0OiAwLFxuICBzcGFjaW5nOiAwLFxuICBhbmdsZTogdW5kZWZpbmVkLFxufTtcbkFyY0VsZW1lbnQuZGVmYXVsdFJvdXRlcyA9IHtcbiAgYmFja2dyb3VuZENvbG9yOiAnYmFja2dyb3VuZENvbG9yJ1xufTtcblxuZnVuY3Rpb24gc2V0U3R5bGUoY3R4LCBvcHRpb25zLCBzdHlsZSA9IG9wdGlvbnMpIHtcbiAgY3R4LmxpbmVDYXAgPSB2YWx1ZU9yRGVmYXVsdChzdHlsZS5ib3JkZXJDYXBTdHlsZSwgb3B0aW9ucy5ib3JkZXJDYXBTdHlsZSk7XG4gIGN0eC5zZXRMaW5lRGFzaCh2YWx1ZU9yRGVmYXVsdChzdHlsZS5ib3JkZXJEYXNoLCBvcHRpb25zLmJvcmRlckRhc2gpKTtcbiAgY3R4LmxpbmVEYXNoT2Zmc2V0ID0gdmFsdWVPckRlZmF1bHQoc3R5bGUuYm9yZGVyRGFzaE9mZnNldCwgb3B0aW9ucy5ib3JkZXJEYXNoT2Zmc2V0KTtcbiAgY3R4LmxpbmVKb2luID0gdmFsdWVPckRlZmF1bHQoc3R5bGUuYm9yZGVySm9pblN0eWxlLCBvcHRpb25zLmJvcmRlckpvaW5TdHlsZSk7XG4gIGN0eC5saW5lV2lkdGggPSB2YWx1ZU9yRGVmYXVsdChzdHlsZS5ib3JkZXJXaWR0aCwgb3B0aW9ucy5ib3JkZXJXaWR0aCk7XG4gIGN0eC5zdHJva2VTdHlsZSA9IHZhbHVlT3JEZWZhdWx0KHN0eWxlLmJvcmRlckNvbG9yLCBvcHRpb25zLmJvcmRlckNvbG9yKTtcbn1cbmZ1bmN0aW9uIGxpbmVUbyhjdHgsIHByZXZpb3VzLCB0YXJnZXQpIHtcbiAgY3R4LmxpbmVUbyh0YXJnZXQueCwgdGFyZ2V0LnkpO1xufVxuZnVuY3Rpb24gZ2V0TGluZU1ldGhvZChvcHRpb25zKSB7XG4gIGlmIChvcHRpb25zLnN0ZXBwZWQpIHtcbiAgICByZXR1cm4gX3N0ZXBwZWRMaW5lVG87XG4gIH1cbiAgaWYgKG9wdGlvbnMudGVuc2lvbiB8fCBvcHRpb25zLmN1YmljSW50ZXJwb2xhdGlvbk1vZGUgPT09ICdtb25vdG9uZScpIHtcbiAgICByZXR1cm4gX2JlemllckN1cnZlVG87XG4gIH1cbiAgcmV0dXJuIGxpbmVUbztcbn1cbmZ1bmN0aW9uIHBhdGhWYXJzKHBvaW50cywgc2VnbWVudCwgcGFyYW1zID0ge30pIHtcbiAgY29uc3QgY291bnQgPSBwb2ludHMubGVuZ3RoO1xuICBjb25zdCB7c3RhcnQ6IHBhcmFtc1N0YXJ0ID0gMCwgZW5kOiBwYXJhbXNFbmQgPSBjb3VudCAtIDF9ID0gcGFyYW1zO1xuICBjb25zdCB7c3RhcnQ6IHNlZ21lbnRTdGFydCwgZW5kOiBzZWdtZW50RW5kfSA9IHNlZ21lbnQ7XG4gIGNvbnN0IHN0YXJ0ID0gTWF0aC5tYXgocGFyYW1zU3RhcnQsIHNlZ21lbnRTdGFydCk7XG4gIGNvbnN0IGVuZCA9IE1hdGgubWluKHBhcmFtc0VuZCwgc2VnbWVudEVuZCk7XG4gIGNvbnN0IG91dHNpZGUgPSBwYXJhbXNTdGFydCA8IHNlZ21lbnRTdGFydCAmJiBwYXJhbXNFbmQgPCBzZWdtZW50U3RhcnQgfHwgcGFyYW1zU3RhcnQgPiBzZWdtZW50RW5kICYmIHBhcmFtc0VuZCA+IHNlZ21lbnRFbmQ7XG4gIHJldHVybiB7XG4gICAgY291bnQsXG4gICAgc3RhcnQsXG4gICAgbG9vcDogc2VnbWVudC5sb29wLFxuICAgIGlsZW46IGVuZCA8IHN0YXJ0ICYmICFvdXRzaWRlID8gY291bnQgKyBlbmQgLSBzdGFydCA6IGVuZCAtIHN0YXJ0XG4gIH07XG59XG5mdW5jdGlvbiBwYXRoU2VnbWVudChjdHgsIGxpbmUsIHNlZ21lbnQsIHBhcmFtcykge1xuICBjb25zdCB7cG9pbnRzLCBvcHRpb25zfSA9IGxpbmU7XG4gIGNvbnN0IHtjb3VudCwgc3RhcnQsIGxvb3AsIGlsZW59ID0gcGF0aFZhcnMocG9pbnRzLCBzZWdtZW50LCBwYXJhbXMpO1xuICBjb25zdCBsaW5lTWV0aG9kID0gZ2V0TGluZU1ldGhvZChvcHRpb25zKTtcbiAgbGV0IHttb3ZlID0gdHJ1ZSwgcmV2ZXJzZX0gPSBwYXJhbXMgfHwge307XG4gIGxldCBpLCBwb2ludCwgcHJldjtcbiAgZm9yIChpID0gMDsgaSA8PSBpbGVuOyArK2kpIHtcbiAgICBwb2ludCA9IHBvaW50c1soc3RhcnQgKyAocmV2ZXJzZSA/IGlsZW4gLSBpIDogaSkpICUgY291bnRdO1xuICAgIGlmIChwb2ludC5za2lwKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9IGVsc2UgaWYgKG1vdmUpIHtcbiAgICAgIGN0eC5tb3ZlVG8ocG9pbnQueCwgcG9pbnQueSk7XG4gICAgICBtb3ZlID0gZmFsc2U7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxpbmVNZXRob2QoY3R4LCBwcmV2LCBwb2ludCwgcmV2ZXJzZSwgb3B0aW9ucy5zdGVwcGVkKTtcbiAgICB9XG4gICAgcHJldiA9IHBvaW50O1xuICB9XG4gIGlmIChsb29wKSB7XG4gICAgcG9pbnQgPSBwb2ludHNbKHN0YXJ0ICsgKHJldmVyc2UgPyBpbGVuIDogMCkpICUgY291bnRdO1xuICAgIGxpbmVNZXRob2QoY3R4LCBwcmV2LCBwb2ludCwgcmV2ZXJzZSwgb3B0aW9ucy5zdGVwcGVkKTtcbiAgfVxuICByZXR1cm4gISFsb29wO1xufVxuZnVuY3Rpb24gZmFzdFBhdGhTZWdtZW50KGN0eCwgbGluZSwgc2VnbWVudCwgcGFyYW1zKSB7XG4gIGNvbnN0IHBvaW50cyA9IGxpbmUucG9pbnRzO1xuICBjb25zdCB7Y291bnQsIHN0YXJ0LCBpbGVufSA9IHBhdGhWYXJzKHBvaW50cywgc2VnbWVudCwgcGFyYW1zKTtcbiAgY29uc3Qge21vdmUgPSB0cnVlLCByZXZlcnNlfSA9IHBhcmFtcyB8fCB7fTtcbiAgbGV0IGF2Z1ggPSAwO1xuICBsZXQgY291bnRYID0gMDtcbiAgbGV0IGksIHBvaW50LCBwcmV2WCwgbWluWSwgbWF4WSwgbGFzdFk7XG4gIGNvbnN0IHBvaW50SW5kZXggPSAoaW5kZXgpID0+IChzdGFydCArIChyZXZlcnNlID8gaWxlbiAtIGluZGV4IDogaW5kZXgpKSAlIGNvdW50O1xuICBjb25zdCBkcmF3WCA9ICgpID0+IHtcbiAgICBpZiAobWluWSAhPT0gbWF4WSkge1xuICAgICAgY3R4LmxpbmVUbyhhdmdYLCBtYXhZKTtcbiAgICAgIGN0eC5saW5lVG8oYXZnWCwgbWluWSk7XG4gICAgICBjdHgubGluZVRvKGF2Z1gsIGxhc3RZKTtcbiAgICB9XG4gIH07XG4gIGlmIChtb3ZlKSB7XG4gICAgcG9pbnQgPSBwb2ludHNbcG9pbnRJbmRleCgwKV07XG4gICAgY3R4Lm1vdmVUbyhwb2ludC54LCBwb2ludC55KTtcbiAgfVxuICBmb3IgKGkgPSAwOyBpIDw9IGlsZW47ICsraSkge1xuICAgIHBvaW50ID0gcG9pbnRzW3BvaW50SW5kZXgoaSldO1xuICAgIGlmIChwb2ludC5za2lwKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgY29uc3QgeCA9IHBvaW50Lng7XG4gICAgY29uc3QgeSA9IHBvaW50Lnk7XG4gICAgY29uc3QgdHJ1bmNYID0geCB8IDA7XG4gICAgaWYgKHRydW5jWCA9PT0gcHJldlgpIHtcbiAgICAgIGlmICh5IDwgbWluWSkge1xuICAgICAgICBtaW5ZID0geTtcbiAgICAgIH0gZWxzZSBpZiAoeSA+IG1heFkpIHtcbiAgICAgICAgbWF4WSA9IHk7XG4gICAgICB9XG4gICAgICBhdmdYID0gKGNvdW50WCAqIGF2Z1ggKyB4KSAvICsrY291bnRYO1xuICAgIH0gZWxzZSB7XG4gICAgICBkcmF3WCgpO1xuICAgICAgY3R4LmxpbmVUbyh4LCB5KTtcbiAgICAgIHByZXZYID0gdHJ1bmNYO1xuICAgICAgY291bnRYID0gMDtcbiAgICAgIG1pblkgPSBtYXhZID0geTtcbiAgICB9XG4gICAgbGFzdFkgPSB5O1xuICB9XG4gIGRyYXdYKCk7XG59XG5mdW5jdGlvbiBfZ2V0U2VnbWVudE1ldGhvZChsaW5lKSB7XG4gIGNvbnN0IG9wdHMgPSBsaW5lLm9wdGlvbnM7XG4gIGNvbnN0IGJvcmRlckRhc2ggPSBvcHRzLmJvcmRlckRhc2ggJiYgb3B0cy5ib3JkZXJEYXNoLmxlbmd0aDtcbiAgY29uc3QgdXNlRmFzdFBhdGggPSAhbGluZS5fZGVjaW1hdGVkICYmICFsaW5lLl9sb29wICYmICFvcHRzLnRlbnNpb24gJiYgb3B0cy5jdWJpY0ludGVycG9sYXRpb25Nb2RlICE9PSAnbW9ub3RvbmUnICYmICFvcHRzLnN0ZXBwZWQgJiYgIWJvcmRlckRhc2g7XG4gIHJldHVybiB1c2VGYXN0UGF0aCA/IGZhc3RQYXRoU2VnbWVudCA6IHBhdGhTZWdtZW50O1xufVxuZnVuY3Rpb24gX2dldEludGVycG9sYXRpb25NZXRob2Qob3B0aW9ucykge1xuICBpZiAob3B0aW9ucy5zdGVwcGVkKSB7XG4gICAgcmV0dXJuIF9zdGVwcGVkSW50ZXJwb2xhdGlvbjtcbiAgfVxuICBpZiAob3B0aW9ucy50ZW5zaW9uIHx8IG9wdGlvbnMuY3ViaWNJbnRlcnBvbGF0aW9uTW9kZSA9PT0gJ21vbm90b25lJykge1xuICAgIHJldHVybiBfYmV6aWVySW50ZXJwb2xhdGlvbjtcbiAgfVxuICByZXR1cm4gX3BvaW50SW5MaW5lO1xufVxuZnVuY3Rpb24gc3Ryb2tlUGF0aFdpdGhDYWNoZShjdHgsIGxpbmUsIHN0YXJ0LCBjb3VudCkge1xuICBsZXQgcGF0aCA9IGxpbmUuX3BhdGg7XG4gIGlmICghcGF0aCkge1xuICAgIHBhdGggPSBsaW5lLl9wYXRoID0gbmV3IFBhdGgyRCgpO1xuICAgIGlmIChsaW5lLnBhdGgocGF0aCwgc3RhcnQsIGNvdW50KSkge1xuICAgICAgcGF0aC5jbG9zZVBhdGgoKTtcbiAgICB9XG4gIH1cbiAgc2V0U3R5bGUoY3R4LCBsaW5lLm9wdGlvbnMpO1xuICBjdHguc3Ryb2tlKHBhdGgpO1xufVxuZnVuY3Rpb24gc3Ryb2tlUGF0aERpcmVjdChjdHgsIGxpbmUsIHN0YXJ0LCBjb3VudCkge1xuICBjb25zdCB7c2VnbWVudHMsIG9wdGlvbnN9ID0gbGluZTtcbiAgY29uc3Qgc2VnbWVudE1ldGhvZCA9IF9nZXRTZWdtZW50TWV0aG9kKGxpbmUpO1xuICBmb3IgKGNvbnN0IHNlZ21lbnQgb2Ygc2VnbWVudHMpIHtcbiAgICBzZXRTdHlsZShjdHgsIG9wdGlvbnMsIHNlZ21lbnQuc3R5bGUpO1xuICAgIGN0eC5iZWdpblBhdGgoKTtcbiAgICBpZiAoc2VnbWVudE1ldGhvZChjdHgsIGxpbmUsIHNlZ21lbnQsIHtzdGFydCwgZW5kOiBzdGFydCArIGNvdW50IC0gMX0pKSB7XG4gICAgICBjdHguY2xvc2VQYXRoKCk7XG4gICAgfVxuICAgIGN0eC5zdHJva2UoKTtcbiAgfVxufVxuY29uc3QgdXNlUGF0aDJEID0gdHlwZW9mIFBhdGgyRCA9PT0gJ2Z1bmN0aW9uJztcbmZ1bmN0aW9uIGRyYXcoY3R4LCBsaW5lLCBzdGFydCwgY291bnQpIHtcbiAgaWYgKHVzZVBhdGgyRCAmJiAhbGluZS5vcHRpb25zLnNlZ21lbnQpIHtcbiAgICBzdHJva2VQYXRoV2l0aENhY2hlKGN0eCwgbGluZSwgc3RhcnQsIGNvdW50KTtcbiAgfSBlbHNlIHtcbiAgICBzdHJva2VQYXRoRGlyZWN0KGN0eCwgbGluZSwgc3RhcnQsIGNvdW50KTtcbiAgfVxufVxuY2xhc3MgTGluZUVsZW1lbnQgZXh0ZW5kcyBFbGVtZW50IHtcbiAgY29uc3RydWN0b3IoY2ZnKSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLmFuaW1hdGVkID0gdHJ1ZTtcbiAgICB0aGlzLm9wdGlvbnMgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5fY2hhcnQgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5fbG9vcCA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLl9mdWxsTG9vcCA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLl9wYXRoID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuX3BvaW50cyA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLl9zZWdtZW50cyA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLl9kZWNpbWF0ZWQgPSBmYWxzZTtcbiAgICB0aGlzLl9wb2ludHNVcGRhdGVkID0gZmFsc2U7XG4gICAgdGhpcy5fZGF0YXNldEluZGV4ID0gdW5kZWZpbmVkO1xuICAgIGlmIChjZmcpIHtcbiAgICAgIE9iamVjdC5hc3NpZ24odGhpcywgY2ZnKTtcbiAgICB9XG4gIH1cbiAgdXBkYXRlQ29udHJvbFBvaW50cyhjaGFydEFyZWEsIGluZGV4QXhpcykge1xuICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG4gICAgaWYgKChvcHRpb25zLnRlbnNpb24gfHwgb3B0aW9ucy5jdWJpY0ludGVycG9sYXRpb25Nb2RlID09PSAnbW9ub3RvbmUnKSAmJiAhb3B0aW9ucy5zdGVwcGVkICYmICF0aGlzLl9wb2ludHNVcGRhdGVkKSB7XG4gICAgICBjb25zdCBsb29wID0gb3B0aW9ucy5zcGFuR2FwcyA/IHRoaXMuX2xvb3AgOiB0aGlzLl9mdWxsTG9vcDtcbiAgICAgIF91cGRhdGVCZXppZXJDb250cm9sUG9pbnRzKHRoaXMuX3BvaW50cywgb3B0aW9ucywgY2hhcnRBcmVhLCBsb29wLCBpbmRleEF4aXMpO1xuICAgICAgdGhpcy5fcG9pbnRzVXBkYXRlZCA9IHRydWU7XG4gICAgfVxuICB9XG4gIHNldCBwb2ludHMocG9pbnRzKSB7XG4gICAgdGhpcy5fcG9pbnRzID0gcG9pbnRzO1xuICAgIGRlbGV0ZSB0aGlzLl9zZWdtZW50cztcbiAgICBkZWxldGUgdGhpcy5fcGF0aDtcbiAgICB0aGlzLl9wb2ludHNVcGRhdGVkID0gZmFsc2U7XG4gIH1cbiAgZ2V0IHBvaW50cygpIHtcbiAgICByZXR1cm4gdGhpcy5fcG9pbnRzO1xuICB9XG4gIGdldCBzZWdtZW50cygpIHtcbiAgICByZXR1cm4gdGhpcy5fc2VnbWVudHMgfHwgKHRoaXMuX3NlZ21lbnRzID0gX2NvbXB1dGVTZWdtZW50cyh0aGlzLCB0aGlzLm9wdGlvbnMuc2VnbWVudCkpO1xuICB9XG4gIGZpcnN0KCkge1xuICAgIGNvbnN0IHNlZ21lbnRzID0gdGhpcy5zZWdtZW50cztcbiAgICBjb25zdCBwb2ludHMgPSB0aGlzLnBvaW50cztcbiAgICByZXR1cm4gc2VnbWVudHMubGVuZ3RoICYmIHBvaW50c1tzZWdtZW50c1swXS5zdGFydF07XG4gIH1cbiAgbGFzdCgpIHtcbiAgICBjb25zdCBzZWdtZW50cyA9IHRoaXMuc2VnbWVudHM7XG4gICAgY29uc3QgcG9pbnRzID0gdGhpcy5wb2ludHM7XG4gICAgY29uc3QgY291bnQgPSBzZWdtZW50cy5sZW5ndGg7XG4gICAgcmV0dXJuIGNvdW50ICYmIHBvaW50c1tzZWdtZW50c1tjb3VudCAtIDFdLmVuZF07XG4gIH1cbiAgaW50ZXJwb2xhdGUocG9pbnQsIHByb3BlcnR5KSB7XG4gICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMub3B0aW9ucztcbiAgICBjb25zdCB2YWx1ZSA9IHBvaW50W3Byb3BlcnR5XTtcbiAgICBjb25zdCBwb2ludHMgPSB0aGlzLnBvaW50cztcbiAgICBjb25zdCBzZWdtZW50cyA9IF9ib3VuZFNlZ21lbnRzKHRoaXMsIHtwcm9wZXJ0eSwgc3RhcnQ6IHZhbHVlLCBlbmQ6IHZhbHVlfSk7XG4gICAgaWYgKCFzZWdtZW50cy5sZW5ndGgpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgcmVzdWx0ID0gW107XG4gICAgY29uc3QgX2ludGVycG9sYXRlID0gX2dldEludGVycG9sYXRpb25NZXRob2Qob3B0aW9ucyk7XG4gICAgbGV0IGksIGlsZW47XG4gICAgZm9yIChpID0gMCwgaWxlbiA9IHNlZ21lbnRzLmxlbmd0aDsgaSA8IGlsZW47ICsraSkge1xuICAgICAgY29uc3Qge3N0YXJ0LCBlbmR9ID0gc2VnbWVudHNbaV07XG4gICAgICBjb25zdCBwMSA9IHBvaW50c1tzdGFydF07XG4gICAgICBjb25zdCBwMiA9IHBvaW50c1tlbmRdO1xuICAgICAgaWYgKHAxID09PSBwMikge1xuICAgICAgICByZXN1bHQucHVzaChwMSk7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgY29uc3QgdCA9IE1hdGguYWJzKCh2YWx1ZSAtIHAxW3Byb3BlcnR5XSkgLyAocDJbcHJvcGVydHldIC0gcDFbcHJvcGVydHldKSk7XG4gICAgICBjb25zdCBpbnRlcnBvbGF0ZWQgPSBfaW50ZXJwb2xhdGUocDEsIHAyLCB0LCBvcHRpb25zLnN0ZXBwZWQpO1xuICAgICAgaW50ZXJwb2xhdGVkW3Byb3BlcnR5XSA9IHBvaW50W3Byb3BlcnR5XTtcbiAgICAgIHJlc3VsdC5wdXNoKGludGVycG9sYXRlZCk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQubGVuZ3RoID09PSAxID8gcmVzdWx0WzBdIDogcmVzdWx0O1xuICB9XG4gIHBhdGhTZWdtZW50KGN0eCwgc2VnbWVudCwgcGFyYW1zKSB7XG4gICAgY29uc3Qgc2VnbWVudE1ldGhvZCA9IF9nZXRTZWdtZW50TWV0aG9kKHRoaXMpO1xuICAgIHJldHVybiBzZWdtZW50TWV0aG9kKGN0eCwgdGhpcywgc2VnbWVudCwgcGFyYW1zKTtcbiAgfVxuICBwYXRoKGN0eCwgc3RhcnQsIGNvdW50KSB7XG4gICAgY29uc3Qgc2VnbWVudHMgPSB0aGlzLnNlZ21lbnRzO1xuICAgIGNvbnN0IHNlZ21lbnRNZXRob2QgPSBfZ2V0U2VnbWVudE1ldGhvZCh0aGlzKTtcbiAgICBsZXQgbG9vcCA9IHRoaXMuX2xvb3A7XG4gICAgc3RhcnQgPSBzdGFydCB8fCAwO1xuICAgIGNvdW50ID0gY291bnQgfHwgKHRoaXMucG9pbnRzLmxlbmd0aCAtIHN0YXJ0KTtcbiAgICBmb3IgKGNvbnN0IHNlZ21lbnQgb2Ygc2VnbWVudHMpIHtcbiAgICAgIGxvb3AgJj0gc2VnbWVudE1ldGhvZChjdHgsIHRoaXMsIHNlZ21lbnQsIHtzdGFydCwgZW5kOiBzdGFydCArIGNvdW50IC0gMX0pO1xuICAgIH1cbiAgICByZXR1cm4gISFsb29wO1xuICB9XG4gIGRyYXcoY3R4LCBjaGFydEFyZWEsIHN0YXJ0LCBjb3VudCkge1xuICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLm9wdGlvbnMgfHwge307XG4gICAgY29uc3QgcG9pbnRzID0gdGhpcy5wb2ludHMgfHwgW107XG4gICAgaWYgKHBvaW50cy5sZW5ndGggJiYgb3B0aW9ucy5ib3JkZXJXaWR0aCkge1xuICAgICAgY3R4LnNhdmUoKTtcbiAgICAgIGRyYXcoY3R4LCB0aGlzLCBzdGFydCwgY291bnQpO1xuICAgICAgY3R4LnJlc3RvcmUoKTtcbiAgICB9XG4gICAgaWYgKHRoaXMuYW5pbWF0ZWQpIHtcbiAgICAgIHRoaXMuX3BvaW50c1VwZGF0ZWQgPSBmYWxzZTtcbiAgICAgIHRoaXMuX3BhdGggPSB1bmRlZmluZWQ7XG4gICAgfVxuICB9XG59XG5MaW5lRWxlbWVudC5pZCA9ICdsaW5lJztcbkxpbmVFbGVtZW50LmRlZmF1bHRzID0ge1xuICBib3JkZXJDYXBTdHlsZTogJ2J1dHQnLFxuICBib3JkZXJEYXNoOiBbXSxcbiAgYm9yZGVyRGFzaE9mZnNldDogMCxcbiAgYm9yZGVySm9pblN0eWxlOiAnbWl0ZXInLFxuICBib3JkZXJXaWR0aDogMyxcbiAgY2FwQmV6aWVyUG9pbnRzOiB0cnVlLFxuICBjdWJpY0ludGVycG9sYXRpb25Nb2RlOiAnZGVmYXVsdCcsXG4gIGZpbGw6IGZhbHNlLFxuICBzcGFuR2FwczogZmFsc2UsXG4gIHN0ZXBwZWQ6IGZhbHNlLFxuICB0ZW5zaW9uOiAwLFxufTtcbkxpbmVFbGVtZW50LmRlZmF1bHRSb3V0ZXMgPSB7XG4gIGJhY2tncm91bmRDb2xvcjogJ2JhY2tncm91bmRDb2xvcicsXG4gIGJvcmRlckNvbG9yOiAnYm9yZGVyQ29sb3InXG59O1xuTGluZUVsZW1lbnQuZGVzY3JpcHRvcnMgPSB7XG4gIF9zY3JpcHRhYmxlOiB0cnVlLFxuICBfaW5kZXhhYmxlOiAobmFtZSkgPT4gbmFtZSAhPT0gJ2JvcmRlckRhc2gnICYmIG5hbWUgIT09ICdmaWxsJyxcbn07XG5cbmZ1bmN0aW9uIGluUmFuZ2UkMShlbCwgcG9zLCBheGlzLCB1c2VGaW5hbFBvc2l0aW9uKSB7XG4gIGNvbnN0IG9wdGlvbnMgPSBlbC5vcHRpb25zO1xuICBjb25zdCB7W2F4aXNdOiB2YWx1ZX0gPSBlbC5nZXRQcm9wcyhbYXhpc10sIHVzZUZpbmFsUG9zaXRpb24pO1xuICByZXR1cm4gKE1hdGguYWJzKHBvcyAtIHZhbHVlKSA8IG9wdGlvbnMucmFkaXVzICsgb3B0aW9ucy5oaXRSYWRpdXMpO1xufVxuY2xhc3MgUG9pbnRFbGVtZW50IGV4dGVuZHMgRWxlbWVudCB7XG4gIGNvbnN0cnVjdG9yKGNmZykge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5vcHRpb25zID0gdW5kZWZpbmVkO1xuICAgIHRoaXMucGFyc2VkID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuc2tpcCA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLnN0b3AgPSB1bmRlZmluZWQ7XG4gICAgaWYgKGNmZykge1xuICAgICAgT2JqZWN0LmFzc2lnbih0aGlzLCBjZmcpO1xuICAgIH1cbiAgfVxuICBpblJhbmdlKG1vdXNlWCwgbW91c2VZLCB1c2VGaW5hbFBvc2l0aW9uKSB7XG4gICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMub3B0aW9ucztcbiAgICBjb25zdCB7eCwgeX0gPSB0aGlzLmdldFByb3BzKFsneCcsICd5J10sIHVzZUZpbmFsUG9zaXRpb24pO1xuICAgIHJldHVybiAoKE1hdGgucG93KG1vdXNlWCAtIHgsIDIpICsgTWF0aC5wb3cobW91c2VZIC0geSwgMikpIDwgTWF0aC5wb3cob3B0aW9ucy5oaXRSYWRpdXMgKyBvcHRpb25zLnJhZGl1cywgMikpO1xuICB9XG4gIGluWFJhbmdlKG1vdXNlWCwgdXNlRmluYWxQb3NpdGlvbikge1xuICAgIHJldHVybiBpblJhbmdlJDEodGhpcywgbW91c2VYLCAneCcsIHVzZUZpbmFsUG9zaXRpb24pO1xuICB9XG4gIGluWVJhbmdlKG1vdXNlWSwgdXNlRmluYWxQb3NpdGlvbikge1xuICAgIHJldHVybiBpblJhbmdlJDEodGhpcywgbW91c2VZLCAneScsIHVzZUZpbmFsUG9zaXRpb24pO1xuICB9XG4gIGdldENlbnRlclBvaW50KHVzZUZpbmFsUG9zaXRpb24pIHtcbiAgICBjb25zdCB7eCwgeX0gPSB0aGlzLmdldFByb3BzKFsneCcsICd5J10sIHVzZUZpbmFsUG9zaXRpb24pO1xuICAgIHJldHVybiB7eCwgeX07XG4gIH1cbiAgc2l6ZShvcHRpb25zKSB7XG4gICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwgdGhpcy5vcHRpb25zIHx8IHt9O1xuICAgIGxldCByYWRpdXMgPSBvcHRpb25zLnJhZGl1cyB8fCAwO1xuICAgIHJhZGl1cyA9IE1hdGgubWF4KHJhZGl1cywgcmFkaXVzICYmIG9wdGlvbnMuaG92ZXJSYWRpdXMgfHwgMCk7XG4gICAgY29uc3QgYm9yZGVyV2lkdGggPSByYWRpdXMgJiYgb3B0aW9ucy5ib3JkZXJXaWR0aCB8fCAwO1xuICAgIHJldHVybiAocmFkaXVzICsgYm9yZGVyV2lkdGgpICogMjtcbiAgfVxuICBkcmF3KGN0eCwgYXJlYSkge1xuICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG4gICAgaWYgKHRoaXMuc2tpcCB8fCBvcHRpb25zLnJhZGl1cyA8IDAuMSB8fCAhX2lzUG9pbnRJbkFyZWEodGhpcywgYXJlYSwgdGhpcy5zaXplKG9wdGlvbnMpIC8gMikpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY3R4LnN0cm9rZVN0eWxlID0gb3B0aW9ucy5ib3JkZXJDb2xvcjtcbiAgICBjdHgubGluZVdpZHRoID0gb3B0aW9ucy5ib3JkZXJXaWR0aDtcbiAgICBjdHguZmlsbFN0eWxlID0gb3B0aW9ucy5iYWNrZ3JvdW5kQ29sb3I7XG4gICAgZHJhd1BvaW50KGN0eCwgb3B0aW9ucywgdGhpcy54LCB0aGlzLnkpO1xuICB9XG4gIGdldFJhbmdlKCkge1xuICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLm9wdGlvbnMgfHwge307XG4gICAgcmV0dXJuIG9wdGlvbnMucmFkaXVzICsgb3B0aW9ucy5oaXRSYWRpdXM7XG4gIH1cbn1cblBvaW50RWxlbWVudC5pZCA9ICdwb2ludCc7XG5Qb2ludEVsZW1lbnQuZGVmYXVsdHMgPSB7XG4gIGJvcmRlcldpZHRoOiAxLFxuICBoaXRSYWRpdXM6IDEsXG4gIGhvdmVyQm9yZGVyV2lkdGg6IDEsXG4gIGhvdmVyUmFkaXVzOiA0LFxuICBwb2ludFN0eWxlOiAnY2lyY2xlJyxcbiAgcmFkaXVzOiAzLFxuICByb3RhdGlvbjogMFxufTtcblBvaW50RWxlbWVudC5kZWZhdWx0Um91dGVzID0ge1xuICBiYWNrZ3JvdW5kQ29sb3I6ICdiYWNrZ3JvdW5kQ29sb3InLFxuICBib3JkZXJDb2xvcjogJ2JvcmRlckNvbG9yJ1xufTtcblxuZnVuY3Rpb24gZ2V0QmFyQm91bmRzKGJhciwgdXNlRmluYWxQb3NpdGlvbikge1xuICBjb25zdCB7eCwgeSwgYmFzZSwgd2lkdGgsIGhlaWdodH0gPSBiYXIuZ2V0UHJvcHMoWyd4JywgJ3knLCAnYmFzZScsICd3aWR0aCcsICdoZWlnaHQnXSwgdXNlRmluYWxQb3NpdGlvbik7XG4gIGxldCBsZWZ0LCByaWdodCwgdG9wLCBib3R0b20sIGhhbGY7XG4gIGlmIChiYXIuaG9yaXpvbnRhbCkge1xuICAgIGhhbGYgPSBoZWlnaHQgLyAyO1xuICAgIGxlZnQgPSBNYXRoLm1pbih4LCBiYXNlKTtcbiAgICByaWdodCA9IE1hdGgubWF4KHgsIGJhc2UpO1xuICAgIHRvcCA9IHkgLSBoYWxmO1xuICAgIGJvdHRvbSA9IHkgKyBoYWxmO1xuICB9IGVsc2Uge1xuICAgIGhhbGYgPSB3aWR0aCAvIDI7XG4gICAgbGVmdCA9IHggLSBoYWxmO1xuICAgIHJpZ2h0ID0geCArIGhhbGY7XG4gICAgdG9wID0gTWF0aC5taW4oeSwgYmFzZSk7XG4gICAgYm90dG9tID0gTWF0aC5tYXgoeSwgYmFzZSk7XG4gIH1cbiAgcmV0dXJuIHtsZWZ0LCB0b3AsIHJpZ2h0LCBib3R0b219O1xufVxuZnVuY3Rpb24gc2tpcE9yTGltaXQoc2tpcCwgdmFsdWUsIG1pbiwgbWF4KSB7XG4gIHJldHVybiBza2lwID8gMCA6IF9saW1pdFZhbHVlKHZhbHVlLCBtaW4sIG1heCk7XG59XG5mdW5jdGlvbiBwYXJzZUJvcmRlcldpZHRoKGJhciwgbWF4VywgbWF4SCkge1xuICBjb25zdCB2YWx1ZSA9IGJhci5vcHRpb25zLmJvcmRlcldpZHRoO1xuICBjb25zdCBza2lwID0gYmFyLmJvcmRlclNraXBwZWQ7XG4gIGNvbnN0IG8gPSB0b1RSQkwodmFsdWUpO1xuICByZXR1cm4ge1xuICAgIHQ6IHNraXBPckxpbWl0KHNraXAudG9wLCBvLnRvcCwgMCwgbWF4SCksXG4gICAgcjogc2tpcE9yTGltaXQoc2tpcC5yaWdodCwgby5yaWdodCwgMCwgbWF4VyksXG4gICAgYjogc2tpcE9yTGltaXQoc2tpcC5ib3R0b20sIG8uYm90dG9tLCAwLCBtYXhIKSxcbiAgICBsOiBza2lwT3JMaW1pdChza2lwLmxlZnQsIG8ubGVmdCwgMCwgbWF4VylcbiAgfTtcbn1cbmZ1bmN0aW9uIHBhcnNlQm9yZGVyUmFkaXVzKGJhciwgbWF4VywgbWF4SCkge1xuICBjb25zdCB7ZW5hYmxlQm9yZGVyUmFkaXVzfSA9IGJhci5nZXRQcm9wcyhbJ2VuYWJsZUJvcmRlclJhZGl1cyddKTtcbiAgY29uc3QgdmFsdWUgPSBiYXIub3B0aW9ucy5ib3JkZXJSYWRpdXM7XG4gIGNvbnN0IG8gPSB0b1RSQkxDb3JuZXJzKHZhbHVlKTtcbiAgY29uc3QgbWF4UiA9IE1hdGgubWluKG1heFcsIG1heEgpO1xuICBjb25zdCBza2lwID0gYmFyLmJvcmRlclNraXBwZWQ7XG4gIGNvbnN0IGVuYWJsZUJvcmRlciA9IGVuYWJsZUJvcmRlclJhZGl1cyB8fCBpc09iamVjdCh2YWx1ZSk7XG4gIHJldHVybiB7XG4gICAgdG9wTGVmdDogc2tpcE9yTGltaXQoIWVuYWJsZUJvcmRlciB8fCBza2lwLnRvcCB8fCBza2lwLmxlZnQsIG8udG9wTGVmdCwgMCwgbWF4UiksXG4gICAgdG9wUmlnaHQ6IHNraXBPckxpbWl0KCFlbmFibGVCb3JkZXIgfHwgc2tpcC50b3AgfHwgc2tpcC5yaWdodCwgby50b3BSaWdodCwgMCwgbWF4UiksXG4gICAgYm90dG9tTGVmdDogc2tpcE9yTGltaXQoIWVuYWJsZUJvcmRlciB8fCBza2lwLmJvdHRvbSB8fCBza2lwLmxlZnQsIG8uYm90dG9tTGVmdCwgMCwgbWF4UiksXG4gICAgYm90dG9tUmlnaHQ6IHNraXBPckxpbWl0KCFlbmFibGVCb3JkZXIgfHwgc2tpcC5ib3R0b20gfHwgc2tpcC5yaWdodCwgby5ib3R0b21SaWdodCwgMCwgbWF4UilcbiAgfTtcbn1cbmZ1bmN0aW9uIGJvdW5kaW5nUmVjdHMoYmFyKSB7XG4gIGNvbnN0IGJvdW5kcyA9IGdldEJhckJvdW5kcyhiYXIpO1xuICBjb25zdCB3aWR0aCA9IGJvdW5kcy5yaWdodCAtIGJvdW5kcy5sZWZ0O1xuICBjb25zdCBoZWlnaHQgPSBib3VuZHMuYm90dG9tIC0gYm91bmRzLnRvcDtcbiAgY29uc3QgYm9yZGVyID0gcGFyc2VCb3JkZXJXaWR0aChiYXIsIHdpZHRoIC8gMiwgaGVpZ2h0IC8gMik7XG4gIGNvbnN0IHJhZGl1cyA9IHBhcnNlQm9yZGVyUmFkaXVzKGJhciwgd2lkdGggLyAyLCBoZWlnaHQgLyAyKTtcbiAgcmV0dXJuIHtcbiAgICBvdXRlcjoge1xuICAgICAgeDogYm91bmRzLmxlZnQsXG4gICAgICB5OiBib3VuZHMudG9wLFxuICAgICAgdzogd2lkdGgsXG4gICAgICBoOiBoZWlnaHQsXG4gICAgICByYWRpdXNcbiAgICB9LFxuICAgIGlubmVyOiB7XG4gICAgICB4OiBib3VuZHMubGVmdCArIGJvcmRlci5sLFxuICAgICAgeTogYm91bmRzLnRvcCArIGJvcmRlci50LFxuICAgICAgdzogd2lkdGggLSBib3JkZXIubCAtIGJvcmRlci5yLFxuICAgICAgaDogaGVpZ2h0IC0gYm9yZGVyLnQgLSBib3JkZXIuYixcbiAgICAgIHJhZGl1czoge1xuICAgICAgICB0b3BMZWZ0OiBNYXRoLm1heCgwLCByYWRpdXMudG9wTGVmdCAtIE1hdGgubWF4KGJvcmRlci50LCBib3JkZXIubCkpLFxuICAgICAgICB0b3BSaWdodDogTWF0aC5tYXgoMCwgcmFkaXVzLnRvcFJpZ2h0IC0gTWF0aC5tYXgoYm9yZGVyLnQsIGJvcmRlci5yKSksXG4gICAgICAgIGJvdHRvbUxlZnQ6IE1hdGgubWF4KDAsIHJhZGl1cy5ib3R0b21MZWZ0IC0gTWF0aC5tYXgoYm9yZGVyLmIsIGJvcmRlci5sKSksXG4gICAgICAgIGJvdHRvbVJpZ2h0OiBNYXRoLm1heCgwLCByYWRpdXMuYm90dG9tUmlnaHQgLSBNYXRoLm1heChib3JkZXIuYiwgYm9yZGVyLnIpKSxcbiAgICAgIH1cbiAgICB9XG4gIH07XG59XG5mdW5jdGlvbiBpblJhbmdlKGJhciwgeCwgeSwgdXNlRmluYWxQb3NpdGlvbikge1xuICBjb25zdCBza2lwWCA9IHggPT09IG51bGw7XG4gIGNvbnN0IHNraXBZID0geSA9PT0gbnVsbDtcbiAgY29uc3Qgc2tpcEJvdGggPSBza2lwWCAmJiBza2lwWTtcbiAgY29uc3QgYm91bmRzID0gYmFyICYmICFza2lwQm90aCAmJiBnZXRCYXJCb3VuZHMoYmFyLCB1c2VGaW5hbFBvc2l0aW9uKTtcbiAgcmV0dXJuIGJvdW5kc1xuXHRcdCYmIChza2lwWCB8fCBfaXNCZXR3ZWVuKHgsIGJvdW5kcy5sZWZ0LCBib3VuZHMucmlnaHQpKVxuXHRcdCYmIChza2lwWSB8fCBfaXNCZXR3ZWVuKHksIGJvdW5kcy50b3AsIGJvdW5kcy5ib3R0b20pKTtcbn1cbmZ1bmN0aW9uIGhhc1JhZGl1cyhyYWRpdXMpIHtcbiAgcmV0dXJuIHJhZGl1cy50b3BMZWZ0IHx8IHJhZGl1cy50b3BSaWdodCB8fCByYWRpdXMuYm90dG9tTGVmdCB8fCByYWRpdXMuYm90dG9tUmlnaHQ7XG59XG5mdW5jdGlvbiBhZGROb3JtYWxSZWN0UGF0aChjdHgsIHJlY3QpIHtcbiAgY3R4LnJlY3QocmVjdC54LCByZWN0LnksIHJlY3QudywgcmVjdC5oKTtcbn1cbmZ1bmN0aW9uIGluZmxhdGVSZWN0KHJlY3QsIGFtb3VudCwgcmVmUmVjdCA9IHt9KSB7XG4gIGNvbnN0IHggPSByZWN0LnggIT09IHJlZlJlY3QueCA/IC1hbW91bnQgOiAwO1xuICBjb25zdCB5ID0gcmVjdC55ICE9PSByZWZSZWN0LnkgPyAtYW1vdW50IDogMDtcbiAgY29uc3QgdyA9IChyZWN0LnggKyByZWN0LncgIT09IHJlZlJlY3QueCArIHJlZlJlY3QudyA/IGFtb3VudCA6IDApIC0geDtcbiAgY29uc3QgaCA9IChyZWN0LnkgKyByZWN0LmggIT09IHJlZlJlY3QueSArIHJlZlJlY3QuaCA/IGFtb3VudCA6IDApIC0geTtcbiAgcmV0dXJuIHtcbiAgICB4OiByZWN0LnggKyB4LFxuICAgIHk6IHJlY3QueSArIHksXG4gICAgdzogcmVjdC53ICsgdyxcbiAgICBoOiByZWN0LmggKyBoLFxuICAgIHJhZGl1czogcmVjdC5yYWRpdXNcbiAgfTtcbn1cbmNsYXNzIEJhckVsZW1lbnQgZXh0ZW5kcyBFbGVtZW50IHtcbiAgY29uc3RydWN0b3IoY2ZnKSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLm9wdGlvbnMgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5ob3Jpem9udGFsID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuYmFzZSA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLndpZHRoID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuaGVpZ2h0ID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuaW5mbGF0ZUFtb3VudCA9IHVuZGVmaW5lZDtcbiAgICBpZiAoY2ZnKSB7XG4gICAgICBPYmplY3QuYXNzaWduKHRoaXMsIGNmZyk7XG4gICAgfVxuICB9XG4gIGRyYXcoY3R4KSB7XG4gICAgY29uc3Qge2luZmxhdGVBbW91bnQsIG9wdGlvbnM6IHtib3JkZXJDb2xvciwgYmFja2dyb3VuZENvbG9yfX0gPSB0aGlzO1xuICAgIGNvbnN0IHtpbm5lciwgb3V0ZXJ9ID0gYm91bmRpbmdSZWN0cyh0aGlzKTtcbiAgICBjb25zdCBhZGRSZWN0UGF0aCA9IGhhc1JhZGl1cyhvdXRlci5yYWRpdXMpID8gYWRkUm91bmRlZFJlY3RQYXRoIDogYWRkTm9ybWFsUmVjdFBhdGg7XG4gICAgY3R4LnNhdmUoKTtcbiAgICBpZiAob3V0ZXIudyAhPT0gaW5uZXIudyB8fCBvdXRlci5oICE9PSBpbm5lci5oKSB7XG4gICAgICBjdHguYmVnaW5QYXRoKCk7XG4gICAgICBhZGRSZWN0UGF0aChjdHgsIGluZmxhdGVSZWN0KG91dGVyLCBpbmZsYXRlQW1vdW50LCBpbm5lcikpO1xuICAgICAgY3R4LmNsaXAoKTtcbiAgICAgIGFkZFJlY3RQYXRoKGN0eCwgaW5mbGF0ZVJlY3QoaW5uZXIsIC1pbmZsYXRlQW1vdW50LCBvdXRlcikpO1xuICAgICAgY3R4LmZpbGxTdHlsZSA9IGJvcmRlckNvbG9yO1xuICAgICAgY3R4LmZpbGwoJ2V2ZW5vZGQnKTtcbiAgICB9XG4gICAgY3R4LmJlZ2luUGF0aCgpO1xuICAgIGFkZFJlY3RQYXRoKGN0eCwgaW5mbGF0ZVJlY3QoaW5uZXIsIGluZmxhdGVBbW91bnQpKTtcbiAgICBjdHguZmlsbFN0eWxlID0gYmFja2dyb3VuZENvbG9yO1xuICAgIGN0eC5maWxsKCk7XG4gICAgY3R4LnJlc3RvcmUoKTtcbiAgfVxuICBpblJhbmdlKG1vdXNlWCwgbW91c2VZLCB1c2VGaW5hbFBvc2l0aW9uKSB7XG4gICAgcmV0dXJuIGluUmFuZ2UodGhpcywgbW91c2VYLCBtb3VzZVksIHVzZUZpbmFsUG9zaXRpb24pO1xuICB9XG4gIGluWFJhbmdlKG1vdXNlWCwgdXNlRmluYWxQb3NpdGlvbikge1xuICAgIHJldHVybiBpblJhbmdlKHRoaXMsIG1vdXNlWCwgbnVsbCwgdXNlRmluYWxQb3NpdGlvbik7XG4gIH1cbiAgaW5ZUmFuZ2UobW91c2VZLCB1c2VGaW5hbFBvc2l0aW9uKSB7XG4gICAgcmV0dXJuIGluUmFuZ2UodGhpcywgbnVsbCwgbW91c2VZLCB1c2VGaW5hbFBvc2l0aW9uKTtcbiAgfVxuICBnZXRDZW50ZXJQb2ludCh1c2VGaW5hbFBvc2l0aW9uKSB7XG4gICAgY29uc3Qge3gsIHksIGJhc2UsIGhvcml6b250YWx9ID0gdGhpcy5nZXRQcm9wcyhbJ3gnLCAneScsICdiYXNlJywgJ2hvcml6b250YWwnXSwgdXNlRmluYWxQb3NpdGlvbik7XG4gICAgcmV0dXJuIHtcbiAgICAgIHg6IGhvcml6b250YWwgPyAoeCArIGJhc2UpIC8gMiA6IHgsXG4gICAgICB5OiBob3Jpem9udGFsID8geSA6ICh5ICsgYmFzZSkgLyAyXG4gICAgfTtcbiAgfVxuICBnZXRSYW5nZShheGlzKSB7XG4gICAgcmV0dXJuIGF4aXMgPT09ICd4JyA/IHRoaXMud2lkdGggLyAyIDogdGhpcy5oZWlnaHQgLyAyO1xuICB9XG59XG5CYXJFbGVtZW50LmlkID0gJ2Jhcic7XG5CYXJFbGVtZW50LmRlZmF1bHRzID0ge1xuICBib3JkZXJTa2lwcGVkOiAnc3RhcnQnLFxuICBib3JkZXJXaWR0aDogMCxcbiAgYm9yZGVyUmFkaXVzOiAwLFxuICBpbmZsYXRlQW1vdW50OiAnYXV0bycsXG4gIHBvaW50U3R5bGU6IHVuZGVmaW5lZFxufTtcbkJhckVsZW1lbnQuZGVmYXVsdFJvdXRlcyA9IHtcbiAgYmFja2dyb3VuZENvbG9yOiAnYmFja2dyb3VuZENvbG9yJyxcbiAgYm9yZGVyQ29sb3I6ICdib3JkZXJDb2xvcidcbn07XG5cbnZhciBlbGVtZW50cyA9IC8qI19fUFVSRV9fKi9PYmplY3QuZnJlZXplKHtcbl9fcHJvdG9fXzogbnVsbCxcbkFyY0VsZW1lbnQ6IEFyY0VsZW1lbnQsXG5MaW5lRWxlbWVudDogTGluZUVsZW1lbnQsXG5Qb2ludEVsZW1lbnQ6IFBvaW50RWxlbWVudCxcbkJhckVsZW1lbnQ6IEJhckVsZW1lbnRcbn0pO1xuXG5mdW5jdGlvbiBsdHRiRGVjaW1hdGlvbihkYXRhLCBzdGFydCwgY291bnQsIGF2YWlsYWJsZVdpZHRoLCBvcHRpb25zKSB7XG4gIGNvbnN0IHNhbXBsZXMgPSBvcHRpb25zLnNhbXBsZXMgfHwgYXZhaWxhYmxlV2lkdGg7XG4gIGlmIChzYW1wbGVzID49IGNvdW50KSB7XG4gICAgcmV0dXJuIGRhdGEuc2xpY2Uoc3RhcnQsIHN0YXJ0ICsgY291bnQpO1xuICB9XG4gIGNvbnN0IGRlY2ltYXRlZCA9IFtdO1xuICBjb25zdCBidWNrZXRXaWR0aCA9IChjb3VudCAtIDIpIC8gKHNhbXBsZXMgLSAyKTtcbiAgbGV0IHNhbXBsZWRJbmRleCA9IDA7XG4gIGNvbnN0IGVuZEluZGV4ID0gc3RhcnQgKyBjb3VudCAtIDE7XG4gIGxldCBhID0gc3RhcnQ7XG4gIGxldCBpLCBtYXhBcmVhUG9pbnQsIG1heEFyZWEsIGFyZWEsIG5leHRBO1xuICBkZWNpbWF0ZWRbc2FtcGxlZEluZGV4KytdID0gZGF0YVthXTtcbiAgZm9yIChpID0gMDsgaSA8IHNhbXBsZXMgLSAyOyBpKyspIHtcbiAgICBsZXQgYXZnWCA9IDA7XG4gICAgbGV0IGF2Z1kgPSAwO1xuICAgIGxldCBqO1xuICAgIGNvbnN0IGF2Z1JhbmdlU3RhcnQgPSBNYXRoLmZsb29yKChpICsgMSkgKiBidWNrZXRXaWR0aCkgKyAxICsgc3RhcnQ7XG4gICAgY29uc3QgYXZnUmFuZ2VFbmQgPSBNYXRoLm1pbihNYXRoLmZsb29yKChpICsgMikgKiBidWNrZXRXaWR0aCkgKyAxLCBjb3VudCkgKyBzdGFydDtcbiAgICBjb25zdCBhdmdSYW5nZUxlbmd0aCA9IGF2Z1JhbmdlRW5kIC0gYXZnUmFuZ2VTdGFydDtcbiAgICBmb3IgKGogPSBhdmdSYW5nZVN0YXJ0OyBqIDwgYXZnUmFuZ2VFbmQ7IGorKykge1xuICAgICAgYXZnWCArPSBkYXRhW2pdLng7XG4gICAgICBhdmdZICs9IGRhdGFbal0ueTtcbiAgICB9XG4gICAgYXZnWCAvPSBhdmdSYW5nZUxlbmd0aDtcbiAgICBhdmdZIC89IGF2Z1JhbmdlTGVuZ3RoO1xuICAgIGNvbnN0IHJhbmdlT2ZmcyA9IE1hdGguZmxvb3IoaSAqIGJ1Y2tldFdpZHRoKSArIDEgKyBzdGFydDtcbiAgICBjb25zdCByYW5nZVRvID0gTWF0aC5taW4oTWF0aC5mbG9vcigoaSArIDEpICogYnVja2V0V2lkdGgpICsgMSwgY291bnQpICsgc3RhcnQ7XG4gICAgY29uc3Qge3g6IHBvaW50QXgsIHk6IHBvaW50QXl9ID0gZGF0YVthXTtcbiAgICBtYXhBcmVhID0gYXJlYSA9IC0xO1xuICAgIGZvciAoaiA9IHJhbmdlT2ZmczsgaiA8IHJhbmdlVG87IGorKykge1xuICAgICAgYXJlYSA9IDAuNSAqIE1hdGguYWJzKFxuICAgICAgICAocG9pbnRBeCAtIGF2Z1gpICogKGRhdGFbal0ueSAtIHBvaW50QXkpIC1cbiAgICAgICAgKHBvaW50QXggLSBkYXRhW2pdLngpICogKGF2Z1kgLSBwb2ludEF5KVxuICAgICAgKTtcbiAgICAgIGlmIChhcmVhID4gbWF4QXJlYSkge1xuICAgICAgICBtYXhBcmVhID0gYXJlYTtcbiAgICAgICAgbWF4QXJlYVBvaW50ID0gZGF0YVtqXTtcbiAgICAgICAgbmV4dEEgPSBqO1xuICAgICAgfVxuICAgIH1cbiAgICBkZWNpbWF0ZWRbc2FtcGxlZEluZGV4KytdID0gbWF4QXJlYVBvaW50O1xuICAgIGEgPSBuZXh0QTtcbiAgfVxuICBkZWNpbWF0ZWRbc2FtcGxlZEluZGV4KytdID0gZGF0YVtlbmRJbmRleF07XG4gIHJldHVybiBkZWNpbWF0ZWQ7XG59XG5mdW5jdGlvbiBtaW5NYXhEZWNpbWF0aW9uKGRhdGEsIHN0YXJ0LCBjb3VudCwgYXZhaWxhYmxlV2lkdGgpIHtcbiAgbGV0IGF2Z1ggPSAwO1xuICBsZXQgY291bnRYID0gMDtcbiAgbGV0IGksIHBvaW50LCB4LCB5LCBwcmV2WCwgbWluSW5kZXgsIG1heEluZGV4LCBzdGFydEluZGV4LCBtaW5ZLCBtYXhZO1xuICBjb25zdCBkZWNpbWF0ZWQgPSBbXTtcbiAgY29uc3QgZW5kSW5kZXggPSBzdGFydCArIGNvdW50IC0gMTtcbiAgY29uc3QgeE1pbiA9IGRhdGFbc3RhcnRdLng7XG4gIGNvbnN0IHhNYXggPSBkYXRhW2VuZEluZGV4XS54O1xuICBjb25zdCBkeCA9IHhNYXggLSB4TWluO1xuICBmb3IgKGkgPSBzdGFydDsgaSA8IHN0YXJ0ICsgY291bnQ7ICsraSkge1xuICAgIHBvaW50ID0gZGF0YVtpXTtcbiAgICB4ID0gKHBvaW50LnggLSB4TWluKSAvIGR4ICogYXZhaWxhYmxlV2lkdGg7XG4gICAgeSA9IHBvaW50Lnk7XG4gICAgY29uc3QgdHJ1bmNYID0geCB8IDA7XG4gICAgaWYgKHRydW5jWCA9PT0gcHJldlgpIHtcbiAgICAgIGlmICh5IDwgbWluWSkge1xuICAgICAgICBtaW5ZID0geTtcbiAgICAgICAgbWluSW5kZXggPSBpO1xuICAgICAgfSBlbHNlIGlmICh5ID4gbWF4WSkge1xuICAgICAgICBtYXhZID0geTtcbiAgICAgICAgbWF4SW5kZXggPSBpO1xuICAgICAgfVxuICAgICAgYXZnWCA9IChjb3VudFggKiBhdmdYICsgcG9pbnQueCkgLyArK2NvdW50WDtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgbGFzdEluZGV4ID0gaSAtIDE7XG4gICAgICBpZiAoIWlzTnVsbE9yVW5kZWYobWluSW5kZXgpICYmICFpc051bGxPclVuZGVmKG1heEluZGV4KSkge1xuICAgICAgICBjb25zdCBpbnRlcm1lZGlhdGVJbmRleDEgPSBNYXRoLm1pbihtaW5JbmRleCwgbWF4SW5kZXgpO1xuICAgICAgICBjb25zdCBpbnRlcm1lZGlhdGVJbmRleDIgPSBNYXRoLm1heChtaW5JbmRleCwgbWF4SW5kZXgpO1xuICAgICAgICBpZiAoaW50ZXJtZWRpYXRlSW5kZXgxICE9PSBzdGFydEluZGV4ICYmIGludGVybWVkaWF0ZUluZGV4MSAhPT0gbGFzdEluZGV4KSB7XG4gICAgICAgICAgZGVjaW1hdGVkLnB1c2goe1xuICAgICAgICAgICAgLi4uZGF0YVtpbnRlcm1lZGlhdGVJbmRleDFdLFxuICAgICAgICAgICAgeDogYXZnWCxcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaW50ZXJtZWRpYXRlSW5kZXgyICE9PSBzdGFydEluZGV4ICYmIGludGVybWVkaWF0ZUluZGV4MiAhPT0gbGFzdEluZGV4KSB7XG4gICAgICAgICAgZGVjaW1hdGVkLnB1c2goe1xuICAgICAgICAgICAgLi4uZGF0YVtpbnRlcm1lZGlhdGVJbmRleDJdLFxuICAgICAgICAgICAgeDogYXZnWFxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoaSA+IDAgJiYgbGFzdEluZGV4ICE9PSBzdGFydEluZGV4KSB7XG4gICAgICAgIGRlY2ltYXRlZC5wdXNoKGRhdGFbbGFzdEluZGV4XSk7XG4gICAgICB9XG4gICAgICBkZWNpbWF0ZWQucHVzaChwb2ludCk7XG4gICAgICBwcmV2WCA9IHRydW5jWDtcbiAgICAgIGNvdW50WCA9IDA7XG4gICAgICBtaW5ZID0gbWF4WSA9IHk7XG4gICAgICBtaW5JbmRleCA9IG1heEluZGV4ID0gc3RhcnRJbmRleCA9IGk7XG4gICAgfVxuICB9XG4gIHJldHVybiBkZWNpbWF0ZWQ7XG59XG5mdW5jdGlvbiBjbGVhbkRlY2ltYXRlZERhdGFzZXQoZGF0YXNldCkge1xuICBpZiAoZGF0YXNldC5fZGVjaW1hdGVkKSB7XG4gICAgY29uc3QgZGF0YSA9IGRhdGFzZXQuX2RhdGE7XG4gICAgZGVsZXRlIGRhdGFzZXQuX2RlY2ltYXRlZDtcbiAgICBkZWxldGUgZGF0YXNldC5fZGF0YTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZGF0YXNldCwgJ2RhdGEnLCB7dmFsdWU6IGRhdGF9KTtcbiAgfVxufVxuZnVuY3Rpb24gY2xlYW5EZWNpbWF0ZWREYXRhKGNoYXJ0KSB7XG4gIGNoYXJ0LmRhdGEuZGF0YXNldHMuZm9yRWFjaCgoZGF0YXNldCkgPT4ge1xuICAgIGNsZWFuRGVjaW1hdGVkRGF0YXNldChkYXRhc2V0KTtcbiAgfSk7XG59XG5mdW5jdGlvbiBnZXRTdGFydEFuZENvdW50T2ZWaXNpYmxlUG9pbnRzU2ltcGxpZmllZChtZXRhLCBwb2ludHMpIHtcbiAgY29uc3QgcG9pbnRDb3VudCA9IHBvaW50cy5sZW5ndGg7XG4gIGxldCBzdGFydCA9IDA7XG4gIGxldCBjb3VudDtcbiAgY29uc3Qge2lTY2FsZX0gPSBtZXRhO1xuICBjb25zdCB7bWluLCBtYXgsIG1pbkRlZmluZWQsIG1heERlZmluZWR9ID0gaVNjYWxlLmdldFVzZXJCb3VuZHMoKTtcbiAgaWYgKG1pbkRlZmluZWQpIHtcbiAgICBzdGFydCA9IF9saW1pdFZhbHVlKF9sb29rdXBCeUtleShwb2ludHMsIGlTY2FsZS5heGlzLCBtaW4pLmxvLCAwLCBwb2ludENvdW50IC0gMSk7XG4gIH1cbiAgaWYgKG1heERlZmluZWQpIHtcbiAgICBjb3VudCA9IF9saW1pdFZhbHVlKF9sb29rdXBCeUtleShwb2ludHMsIGlTY2FsZS5heGlzLCBtYXgpLmhpICsgMSwgc3RhcnQsIHBvaW50Q291bnQpIC0gc3RhcnQ7XG4gIH0gZWxzZSB7XG4gICAgY291bnQgPSBwb2ludENvdW50IC0gc3RhcnQ7XG4gIH1cbiAgcmV0dXJuIHtzdGFydCwgY291bnR9O1xufVxudmFyIHBsdWdpbl9kZWNpbWF0aW9uID0ge1xuICBpZDogJ2RlY2ltYXRpb24nLFxuICBkZWZhdWx0czoge1xuICAgIGFsZ29yaXRobTogJ21pbi1tYXgnLFxuICAgIGVuYWJsZWQ6IGZhbHNlLFxuICB9LFxuICBiZWZvcmVFbGVtZW50c1VwZGF0ZTogKGNoYXJ0LCBhcmdzLCBvcHRpb25zKSA9PiB7XG4gICAgaWYgKCFvcHRpb25zLmVuYWJsZWQpIHtcbiAgICAgIGNsZWFuRGVjaW1hdGVkRGF0YShjaGFydCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IGF2YWlsYWJsZVdpZHRoID0gY2hhcnQud2lkdGg7XG4gICAgY2hhcnQuZGF0YS5kYXRhc2V0cy5mb3JFYWNoKChkYXRhc2V0LCBkYXRhc2V0SW5kZXgpID0+IHtcbiAgICAgIGNvbnN0IHtfZGF0YSwgaW5kZXhBeGlzfSA9IGRhdGFzZXQ7XG4gICAgICBjb25zdCBtZXRhID0gY2hhcnQuZ2V0RGF0YXNldE1ldGEoZGF0YXNldEluZGV4KTtcbiAgICAgIGNvbnN0IGRhdGEgPSBfZGF0YSB8fCBkYXRhc2V0LmRhdGE7XG4gICAgICBpZiAocmVzb2x2ZShbaW5kZXhBeGlzLCBjaGFydC5vcHRpb25zLmluZGV4QXhpc10pID09PSAneScpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYgKG1ldGEudHlwZSAhPT0gJ2xpbmUnKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGNvbnN0IHhBeGlzID0gY2hhcnQuc2NhbGVzW21ldGEueEF4aXNJRF07XG4gICAgICBpZiAoeEF4aXMudHlwZSAhPT0gJ2xpbmVhcicgJiYgeEF4aXMudHlwZSAhPT0gJ3RpbWUnKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmIChjaGFydC5vcHRpb25zLnBhcnNpbmcpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgbGV0IHtzdGFydCwgY291bnR9ID0gZ2V0U3RhcnRBbmRDb3VudE9mVmlzaWJsZVBvaW50c1NpbXBsaWZpZWQobWV0YSwgZGF0YSk7XG4gICAgICBjb25zdCB0aHJlc2hvbGQgPSBvcHRpb25zLnRocmVzaG9sZCB8fCA0ICogYXZhaWxhYmxlV2lkdGg7XG4gICAgICBpZiAoY291bnQgPD0gdGhyZXNob2xkKSB7XG4gICAgICAgIGNsZWFuRGVjaW1hdGVkRGF0YXNldChkYXRhc2V0KTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYgKGlzTnVsbE9yVW5kZWYoX2RhdGEpKSB7XG4gICAgICAgIGRhdGFzZXQuX2RhdGEgPSBkYXRhO1xuICAgICAgICBkZWxldGUgZGF0YXNldC5kYXRhO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZGF0YXNldCwgJ2RhdGEnLCB7XG4gICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9kZWNpbWF0ZWQ7XG4gICAgICAgICAgfSxcbiAgICAgICAgICBzZXQ6IGZ1bmN0aW9uKGQpIHtcbiAgICAgICAgICAgIHRoaXMuX2RhdGEgPSBkO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICBsZXQgZGVjaW1hdGVkO1xuICAgICAgc3dpdGNoIChvcHRpb25zLmFsZ29yaXRobSkge1xuICAgICAgY2FzZSAnbHR0Yic6XG4gICAgICAgIGRlY2ltYXRlZCA9IGx0dGJEZWNpbWF0aW9uKGRhdGEsIHN0YXJ0LCBjb3VudCwgYXZhaWxhYmxlV2lkdGgsIG9wdGlvbnMpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ21pbi1tYXgnOlxuICAgICAgICBkZWNpbWF0ZWQgPSBtaW5NYXhEZWNpbWF0aW9uKGRhdGEsIHN0YXJ0LCBjb3VudCwgYXZhaWxhYmxlV2lkdGgpO1xuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgVW5zdXBwb3J0ZWQgZGVjaW1hdGlvbiBhbGdvcml0aG0gJyR7b3B0aW9ucy5hbGdvcml0aG19J2ApO1xuICAgICAgfVxuICAgICAgZGF0YXNldC5fZGVjaW1hdGVkID0gZGVjaW1hdGVkO1xuICAgIH0pO1xuICB9LFxuICBkZXN0cm95KGNoYXJ0KSB7XG4gICAgY2xlYW5EZWNpbWF0ZWREYXRhKGNoYXJ0KTtcbiAgfVxufTtcblxuZnVuY3Rpb24gZ2V0TGluZUJ5SW5kZXgoY2hhcnQsIGluZGV4KSB7XG4gIGNvbnN0IG1ldGEgPSBjaGFydC5nZXREYXRhc2V0TWV0YShpbmRleCk7XG4gIGNvbnN0IHZpc2libGUgPSBtZXRhICYmIGNoYXJ0LmlzRGF0YXNldFZpc2libGUoaW5kZXgpO1xuICByZXR1cm4gdmlzaWJsZSA/IG1ldGEuZGF0YXNldCA6IG51bGw7XG59XG5mdW5jdGlvbiBwYXJzZUZpbGxPcHRpb24obGluZSkge1xuICBjb25zdCBvcHRpb25zID0gbGluZS5vcHRpb25zO1xuICBjb25zdCBmaWxsT3B0aW9uID0gb3B0aW9ucy5maWxsO1xuICBsZXQgZmlsbCA9IHZhbHVlT3JEZWZhdWx0KGZpbGxPcHRpb24gJiYgZmlsbE9wdGlvbi50YXJnZXQsIGZpbGxPcHRpb24pO1xuICBpZiAoZmlsbCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgZmlsbCA9ICEhb3B0aW9ucy5iYWNrZ3JvdW5kQ29sb3I7XG4gIH1cbiAgaWYgKGZpbGwgPT09IGZhbHNlIHx8IGZpbGwgPT09IG51bGwpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgaWYgKGZpbGwgPT09IHRydWUpIHtcbiAgICByZXR1cm4gJ29yaWdpbic7XG4gIH1cbiAgcmV0dXJuIGZpbGw7XG59XG5mdW5jdGlvbiBkZWNvZGVGaWxsKGxpbmUsIGluZGV4LCBjb3VudCkge1xuICBjb25zdCBmaWxsID0gcGFyc2VGaWxsT3B0aW9uKGxpbmUpO1xuICBpZiAoaXNPYmplY3QoZmlsbCkpIHtcbiAgICByZXR1cm4gaXNOYU4oZmlsbC52YWx1ZSkgPyBmYWxzZSA6IGZpbGw7XG4gIH1cbiAgbGV0IHRhcmdldCA9IHBhcnNlRmxvYXQoZmlsbCk7XG4gIGlmIChpc051bWJlckZpbml0ZSh0YXJnZXQpICYmIE1hdGguZmxvb3IodGFyZ2V0KSA9PT0gdGFyZ2V0KSB7XG4gICAgaWYgKGZpbGxbMF0gPT09ICctJyB8fCBmaWxsWzBdID09PSAnKycpIHtcbiAgICAgIHRhcmdldCA9IGluZGV4ICsgdGFyZ2V0O1xuICAgIH1cbiAgICBpZiAodGFyZ2V0ID09PSBpbmRleCB8fCB0YXJnZXQgPCAwIHx8IHRhcmdldCA+PSBjb3VudCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gdGFyZ2V0O1xuICB9XG4gIHJldHVybiBbJ29yaWdpbicsICdzdGFydCcsICdlbmQnLCAnc3RhY2snLCAnc2hhcGUnXS5pbmRleE9mKGZpbGwpID49IDAgJiYgZmlsbDtcbn1cbmZ1bmN0aW9uIGNvbXB1dGVMaW5lYXJCb3VuZGFyeShzb3VyY2UpIHtcbiAgY29uc3Qge3NjYWxlID0ge30sIGZpbGx9ID0gc291cmNlO1xuICBsZXQgdGFyZ2V0ID0gbnVsbDtcbiAgbGV0IGhvcml6b250YWw7XG4gIGlmIChmaWxsID09PSAnc3RhcnQnKSB7XG4gICAgdGFyZ2V0ID0gc2NhbGUuYm90dG9tO1xuICB9IGVsc2UgaWYgKGZpbGwgPT09ICdlbmQnKSB7XG4gICAgdGFyZ2V0ID0gc2NhbGUudG9wO1xuICB9IGVsc2UgaWYgKGlzT2JqZWN0KGZpbGwpKSB7XG4gICAgdGFyZ2V0ID0gc2NhbGUuZ2V0UGl4ZWxGb3JWYWx1ZShmaWxsLnZhbHVlKTtcbiAgfSBlbHNlIGlmIChzY2FsZS5nZXRCYXNlUGl4ZWwpIHtcbiAgICB0YXJnZXQgPSBzY2FsZS5nZXRCYXNlUGl4ZWwoKTtcbiAgfVxuICBpZiAoaXNOdW1iZXJGaW5pdGUodGFyZ2V0KSkge1xuICAgIGhvcml6b250YWwgPSBzY2FsZS5pc0hvcml6b250YWwoKTtcbiAgICByZXR1cm4ge1xuICAgICAgeDogaG9yaXpvbnRhbCA/IHRhcmdldCA6IG51bGwsXG4gICAgICB5OiBob3Jpem9udGFsID8gbnVsbCA6IHRhcmdldFxuICAgIH07XG4gIH1cbiAgcmV0dXJuIG51bGw7XG59XG5jbGFzcyBzaW1wbGVBcmMge1xuICBjb25zdHJ1Y3RvcihvcHRzKSB7XG4gICAgdGhpcy54ID0gb3B0cy54O1xuICAgIHRoaXMueSA9IG9wdHMueTtcbiAgICB0aGlzLnJhZGl1cyA9IG9wdHMucmFkaXVzO1xuICB9XG4gIHBhdGhTZWdtZW50KGN0eCwgYm91bmRzLCBvcHRzKSB7XG4gICAgY29uc3Qge3gsIHksIHJhZGl1c30gPSB0aGlzO1xuICAgIGJvdW5kcyA9IGJvdW5kcyB8fCB7c3RhcnQ6IDAsIGVuZDogVEFVfTtcbiAgICBjdHguYXJjKHgsIHksIHJhZGl1cywgYm91bmRzLmVuZCwgYm91bmRzLnN0YXJ0LCB0cnVlKTtcbiAgICByZXR1cm4gIW9wdHMuYm91bmRzO1xuICB9XG4gIGludGVycG9sYXRlKHBvaW50KSB7XG4gICAgY29uc3Qge3gsIHksIHJhZGl1c30gPSB0aGlzO1xuICAgIGNvbnN0IGFuZ2xlID0gcG9pbnQuYW5nbGU7XG4gICAgcmV0dXJuIHtcbiAgICAgIHg6IHggKyBNYXRoLmNvcyhhbmdsZSkgKiByYWRpdXMsXG4gICAgICB5OiB5ICsgTWF0aC5zaW4oYW5nbGUpICogcmFkaXVzLFxuICAgICAgYW5nbGVcbiAgICB9O1xuICB9XG59XG5mdW5jdGlvbiBjb21wdXRlQ2lyY3VsYXJCb3VuZGFyeShzb3VyY2UpIHtcbiAgY29uc3Qge3NjYWxlLCBmaWxsfSA9IHNvdXJjZTtcbiAgY29uc3Qgb3B0aW9ucyA9IHNjYWxlLm9wdGlvbnM7XG4gIGNvbnN0IGxlbmd0aCA9IHNjYWxlLmdldExhYmVscygpLmxlbmd0aDtcbiAgY29uc3QgdGFyZ2V0ID0gW107XG4gIGNvbnN0IHN0YXJ0ID0gb3B0aW9ucy5yZXZlcnNlID8gc2NhbGUubWF4IDogc2NhbGUubWluO1xuICBjb25zdCBlbmQgPSBvcHRpb25zLnJldmVyc2UgPyBzY2FsZS5taW4gOiBzY2FsZS5tYXg7XG4gIGxldCBpLCBjZW50ZXIsIHZhbHVlO1xuICBpZiAoZmlsbCA9PT0gJ3N0YXJ0Jykge1xuICAgIHZhbHVlID0gc3RhcnQ7XG4gIH0gZWxzZSBpZiAoZmlsbCA9PT0gJ2VuZCcpIHtcbiAgICB2YWx1ZSA9IGVuZDtcbiAgfSBlbHNlIGlmIChpc09iamVjdChmaWxsKSkge1xuICAgIHZhbHVlID0gZmlsbC52YWx1ZTtcbiAgfSBlbHNlIHtcbiAgICB2YWx1ZSA9IHNjYWxlLmdldEJhc2VWYWx1ZSgpO1xuICB9XG4gIGlmIChvcHRpb25zLmdyaWQuY2lyY3VsYXIpIHtcbiAgICBjZW50ZXIgPSBzY2FsZS5nZXRQb2ludFBvc2l0aW9uRm9yVmFsdWUoMCwgc3RhcnQpO1xuICAgIHJldHVybiBuZXcgc2ltcGxlQXJjKHtcbiAgICAgIHg6IGNlbnRlci54LFxuICAgICAgeTogY2VudGVyLnksXG4gICAgICByYWRpdXM6IHNjYWxlLmdldERpc3RhbmNlRnJvbUNlbnRlckZvclZhbHVlKHZhbHVlKVxuICAgIH0pO1xuICB9XG4gIGZvciAoaSA9IDA7IGkgPCBsZW5ndGg7ICsraSkge1xuICAgIHRhcmdldC5wdXNoKHNjYWxlLmdldFBvaW50UG9zaXRpb25Gb3JWYWx1ZShpLCB2YWx1ZSkpO1xuICB9XG4gIHJldHVybiB0YXJnZXQ7XG59XG5mdW5jdGlvbiBjb21wdXRlQm91bmRhcnkoc291cmNlKSB7XG4gIGNvbnN0IHNjYWxlID0gc291cmNlLnNjYWxlIHx8IHt9O1xuICBpZiAoc2NhbGUuZ2V0UG9pbnRQb3NpdGlvbkZvclZhbHVlKSB7XG4gICAgcmV0dXJuIGNvbXB1dGVDaXJjdWxhckJvdW5kYXJ5KHNvdXJjZSk7XG4gIH1cbiAgcmV0dXJuIGNvbXB1dGVMaW5lYXJCb3VuZGFyeShzb3VyY2UpO1xufVxuZnVuY3Rpb24gZmluZFNlZ21lbnRFbmQoc3RhcnQsIGVuZCwgcG9pbnRzKSB7XG4gIGZvciAoO2VuZCA+IHN0YXJ0OyBlbmQtLSkge1xuICAgIGNvbnN0IHBvaW50ID0gcG9pbnRzW2VuZF07XG4gICAgaWYgKCFpc05hTihwb2ludC54KSAmJiAhaXNOYU4ocG9pbnQueSkpIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuICByZXR1cm4gZW5kO1xufVxuZnVuY3Rpb24gcG9pbnRzRnJvbVNlZ21lbnRzKGJvdW5kYXJ5LCBsaW5lKSB7XG4gIGNvbnN0IHt4ID0gbnVsbCwgeSA9IG51bGx9ID0gYm91bmRhcnkgfHwge307XG4gIGNvbnN0IGxpbmVQb2ludHMgPSBsaW5lLnBvaW50cztcbiAgY29uc3QgcG9pbnRzID0gW107XG4gIGxpbmUuc2VnbWVudHMuZm9yRWFjaCgoe3N0YXJ0LCBlbmR9KSA9PiB7XG4gICAgZW5kID0gZmluZFNlZ21lbnRFbmQoc3RhcnQsIGVuZCwgbGluZVBvaW50cyk7XG4gICAgY29uc3QgZmlyc3QgPSBsaW5lUG9pbnRzW3N0YXJ0XTtcbiAgICBjb25zdCBsYXN0ID0gbGluZVBvaW50c1tlbmRdO1xuICAgIGlmICh5ICE9PSBudWxsKSB7XG4gICAgICBwb2ludHMucHVzaCh7eDogZmlyc3QueCwgeX0pO1xuICAgICAgcG9pbnRzLnB1c2goe3g6IGxhc3QueCwgeX0pO1xuICAgIH0gZWxzZSBpZiAoeCAhPT0gbnVsbCkge1xuICAgICAgcG9pbnRzLnB1c2goe3gsIHk6IGZpcnN0Lnl9KTtcbiAgICAgIHBvaW50cy5wdXNoKHt4LCB5OiBsYXN0Lnl9KTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gcG9pbnRzO1xufVxuZnVuY3Rpb24gYnVpbGRTdGFja0xpbmUoc291cmNlKSB7XG4gIGNvbnN0IHtzY2FsZSwgaW5kZXgsIGxpbmV9ID0gc291cmNlO1xuICBjb25zdCBwb2ludHMgPSBbXTtcbiAgY29uc3Qgc2VnbWVudHMgPSBsaW5lLnNlZ21lbnRzO1xuICBjb25zdCBzb3VyY2VQb2ludHMgPSBsaW5lLnBvaW50cztcbiAgY29uc3QgbGluZXNCZWxvdyA9IGdldExpbmVzQmVsb3coc2NhbGUsIGluZGV4KTtcbiAgbGluZXNCZWxvdy5wdXNoKGNyZWF0ZUJvdW5kYXJ5TGluZSh7eDogbnVsbCwgeTogc2NhbGUuYm90dG9tfSwgbGluZSkpO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IHNlZ21lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgY29uc3Qgc2VnbWVudCA9IHNlZ21lbnRzW2ldO1xuICAgIGZvciAobGV0IGogPSBzZWdtZW50LnN0YXJ0OyBqIDw9IHNlZ21lbnQuZW5kOyBqKyspIHtcbiAgICAgIGFkZFBvaW50c0JlbG93KHBvaW50cywgc291cmNlUG9pbnRzW2pdLCBsaW5lc0JlbG93KTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG5ldyBMaW5lRWxlbWVudCh7cG9pbnRzLCBvcHRpb25zOiB7fX0pO1xufVxuZnVuY3Rpb24gZ2V0TGluZXNCZWxvdyhzY2FsZSwgaW5kZXgpIHtcbiAgY29uc3QgYmVsb3cgPSBbXTtcbiAgY29uc3QgbWV0YXMgPSBzY2FsZS5nZXRNYXRjaGluZ1Zpc2libGVNZXRhcygnbGluZScpO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IG1ldGFzLmxlbmd0aDsgaSsrKSB7XG4gICAgY29uc3QgbWV0YSA9IG1ldGFzW2ldO1xuICAgIGlmIChtZXRhLmluZGV4ID09PSBpbmRleCkge1xuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIGlmICghbWV0YS5oaWRkZW4pIHtcbiAgICAgIGJlbG93LnVuc2hpZnQobWV0YS5kYXRhc2V0KTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGJlbG93O1xufVxuZnVuY3Rpb24gYWRkUG9pbnRzQmVsb3cocG9pbnRzLCBzb3VyY2VQb2ludCwgbGluZXNCZWxvdykge1xuICBjb25zdCBwb3N0cG9uZWQgPSBbXTtcbiAgZm9yIChsZXQgaiA9IDA7IGogPCBsaW5lc0JlbG93Lmxlbmd0aDsgaisrKSB7XG4gICAgY29uc3QgbGluZSA9IGxpbmVzQmVsb3dbal07XG4gICAgY29uc3Qge2ZpcnN0LCBsYXN0LCBwb2ludH0gPSBmaW5kUG9pbnQobGluZSwgc291cmNlUG9pbnQsICd4Jyk7XG4gICAgaWYgKCFwb2ludCB8fCAoZmlyc3QgJiYgbGFzdCkpIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICBpZiAoZmlyc3QpIHtcbiAgICAgIHBvc3Rwb25lZC51bnNoaWZ0KHBvaW50KTtcbiAgICB9IGVsc2Uge1xuICAgICAgcG9pbnRzLnB1c2gocG9pbnQpO1xuICAgICAgaWYgKCFsYXN0KSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBwb2ludHMucHVzaCguLi5wb3N0cG9uZWQpO1xufVxuZnVuY3Rpb24gZmluZFBvaW50KGxpbmUsIHNvdXJjZVBvaW50LCBwcm9wZXJ0eSkge1xuICBjb25zdCBwb2ludCA9IGxpbmUuaW50ZXJwb2xhdGUoc291cmNlUG9pbnQsIHByb3BlcnR5KTtcbiAgaWYgKCFwb2ludCkge1xuICAgIHJldHVybiB7fTtcbiAgfVxuICBjb25zdCBwb2ludFZhbHVlID0gcG9pbnRbcHJvcGVydHldO1xuICBjb25zdCBzZWdtZW50cyA9IGxpbmUuc2VnbWVudHM7XG4gIGNvbnN0IGxpbmVQb2ludHMgPSBsaW5lLnBvaW50cztcbiAgbGV0IGZpcnN0ID0gZmFsc2U7XG4gIGxldCBsYXN0ID0gZmFsc2U7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgc2VnbWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICBjb25zdCBzZWdtZW50ID0gc2VnbWVudHNbaV07XG4gICAgY29uc3QgZmlyc3RWYWx1ZSA9IGxpbmVQb2ludHNbc2VnbWVudC5zdGFydF1bcHJvcGVydHldO1xuICAgIGNvbnN0IGxhc3RWYWx1ZSA9IGxpbmVQb2ludHNbc2VnbWVudC5lbmRdW3Byb3BlcnR5XTtcbiAgICBpZiAoX2lzQmV0d2Vlbihwb2ludFZhbHVlLCBmaXJzdFZhbHVlLCBsYXN0VmFsdWUpKSB7XG4gICAgICBmaXJzdCA9IHBvaW50VmFsdWUgPT09IGZpcnN0VmFsdWU7XG4gICAgICBsYXN0ID0gcG9pbnRWYWx1ZSA9PT0gbGFzdFZhbHVlO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG4gIHJldHVybiB7Zmlyc3QsIGxhc3QsIHBvaW50fTtcbn1cbmZ1bmN0aW9uIGdldFRhcmdldChzb3VyY2UpIHtcbiAgY29uc3Qge2NoYXJ0LCBmaWxsLCBsaW5lfSA9IHNvdXJjZTtcbiAgaWYgKGlzTnVtYmVyRmluaXRlKGZpbGwpKSB7XG4gICAgcmV0dXJuIGdldExpbmVCeUluZGV4KGNoYXJ0LCBmaWxsKTtcbiAgfVxuICBpZiAoZmlsbCA9PT0gJ3N0YWNrJykge1xuICAgIHJldHVybiBidWlsZFN0YWNrTGluZShzb3VyY2UpO1xuICB9XG4gIGlmIChmaWxsID09PSAnc2hhcGUnKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgY29uc3QgYm91bmRhcnkgPSBjb21wdXRlQm91bmRhcnkoc291cmNlKTtcbiAgaWYgKGJvdW5kYXJ5IGluc3RhbmNlb2Ygc2ltcGxlQXJjKSB7XG4gICAgcmV0dXJuIGJvdW5kYXJ5O1xuICB9XG4gIHJldHVybiBjcmVhdGVCb3VuZGFyeUxpbmUoYm91bmRhcnksIGxpbmUpO1xufVxuZnVuY3Rpb24gY3JlYXRlQm91bmRhcnlMaW5lKGJvdW5kYXJ5LCBsaW5lKSB7XG4gIGxldCBwb2ludHMgPSBbXTtcbiAgbGV0IF9sb29wID0gZmFsc2U7XG4gIGlmIChpc0FycmF5KGJvdW5kYXJ5KSkge1xuICAgIF9sb29wID0gdHJ1ZTtcbiAgICBwb2ludHMgPSBib3VuZGFyeTtcbiAgfSBlbHNlIHtcbiAgICBwb2ludHMgPSBwb2ludHNGcm9tU2VnbWVudHMoYm91bmRhcnksIGxpbmUpO1xuICB9XG4gIHJldHVybiBwb2ludHMubGVuZ3RoID8gbmV3IExpbmVFbGVtZW50KHtcbiAgICBwb2ludHMsXG4gICAgb3B0aW9uczoge3RlbnNpb246IDB9LFxuICAgIF9sb29wLFxuICAgIF9mdWxsTG9vcDogX2xvb3BcbiAgfSkgOiBudWxsO1xufVxuZnVuY3Rpb24gcmVzb2x2ZVRhcmdldChzb3VyY2VzLCBpbmRleCwgcHJvcGFnYXRlKSB7XG4gIGNvbnN0IHNvdXJjZSA9IHNvdXJjZXNbaW5kZXhdO1xuICBsZXQgZmlsbCA9IHNvdXJjZS5maWxsO1xuICBjb25zdCB2aXNpdGVkID0gW2luZGV4XTtcbiAgbGV0IHRhcmdldDtcbiAgaWYgKCFwcm9wYWdhdGUpIHtcbiAgICByZXR1cm4gZmlsbDtcbiAgfVxuICB3aGlsZSAoZmlsbCAhPT0gZmFsc2UgJiYgdmlzaXRlZC5pbmRleE9mKGZpbGwpID09PSAtMSkge1xuICAgIGlmICghaXNOdW1iZXJGaW5pdGUoZmlsbCkpIHtcbiAgICAgIHJldHVybiBmaWxsO1xuICAgIH1cbiAgICB0YXJnZXQgPSBzb3VyY2VzW2ZpbGxdO1xuICAgIGlmICghdGFyZ2V0KSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGlmICh0YXJnZXQudmlzaWJsZSkge1xuICAgICAgcmV0dXJuIGZpbGw7XG4gICAgfVxuICAgIHZpc2l0ZWQucHVzaChmaWxsKTtcbiAgICBmaWxsID0gdGFyZ2V0LmZpbGw7XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxuZnVuY3Rpb24gX2NsaXAoY3R4LCB0YXJnZXQsIGNsaXBZKSB7XG4gIGNvbnN0IHtzZWdtZW50cywgcG9pbnRzfSA9IHRhcmdldDtcbiAgbGV0IGZpcnN0ID0gdHJ1ZTtcbiAgbGV0IGxpbmVMb29wID0gZmFsc2U7XG4gIGN0eC5iZWdpblBhdGgoKTtcbiAgZm9yIChjb25zdCBzZWdtZW50IG9mIHNlZ21lbnRzKSB7XG4gICAgY29uc3Qge3N0YXJ0LCBlbmR9ID0gc2VnbWVudDtcbiAgICBjb25zdCBmaXJzdFBvaW50ID0gcG9pbnRzW3N0YXJ0XTtcbiAgICBjb25zdCBsYXN0UG9pbnQgPSBwb2ludHNbZmluZFNlZ21lbnRFbmQoc3RhcnQsIGVuZCwgcG9pbnRzKV07XG4gICAgaWYgKGZpcnN0KSB7XG4gICAgICBjdHgubW92ZVRvKGZpcnN0UG9pbnQueCwgZmlyc3RQb2ludC55KTtcbiAgICAgIGZpcnN0ID0gZmFsc2U7XG4gICAgfSBlbHNlIHtcbiAgICAgIGN0eC5saW5lVG8oZmlyc3RQb2ludC54LCBjbGlwWSk7XG4gICAgICBjdHgubGluZVRvKGZpcnN0UG9pbnQueCwgZmlyc3RQb2ludC55KTtcbiAgICB9XG4gICAgbGluZUxvb3AgPSAhIXRhcmdldC5wYXRoU2VnbWVudChjdHgsIHNlZ21lbnQsIHttb3ZlOiBsaW5lTG9vcH0pO1xuICAgIGlmIChsaW5lTG9vcCkge1xuICAgICAgY3R4LmNsb3NlUGF0aCgpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjdHgubGluZVRvKGxhc3RQb2ludC54LCBjbGlwWSk7XG4gICAgfVxuICB9XG4gIGN0eC5saW5lVG8odGFyZ2V0LmZpcnN0KCkueCwgY2xpcFkpO1xuICBjdHguY2xvc2VQYXRoKCk7XG4gIGN0eC5jbGlwKCk7XG59XG5mdW5jdGlvbiBnZXRCb3VuZHMocHJvcGVydHksIGZpcnN0LCBsYXN0LCBsb29wKSB7XG4gIGlmIChsb29wKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGxldCBzdGFydCA9IGZpcnN0W3Byb3BlcnR5XTtcbiAgbGV0IGVuZCA9IGxhc3RbcHJvcGVydHldO1xuICBpZiAocHJvcGVydHkgPT09ICdhbmdsZScpIHtcbiAgICBzdGFydCA9IF9ub3JtYWxpemVBbmdsZShzdGFydCk7XG4gICAgZW5kID0gX25vcm1hbGl6ZUFuZ2xlKGVuZCk7XG4gIH1cbiAgcmV0dXJuIHtwcm9wZXJ0eSwgc3RhcnQsIGVuZH07XG59XG5mdW5jdGlvbiBfZ2V0RWRnZShhLCBiLCBwcm9wLCBmbikge1xuICBpZiAoYSAmJiBiKSB7XG4gICAgcmV0dXJuIGZuKGFbcHJvcF0sIGJbcHJvcF0pO1xuICB9XG4gIHJldHVybiBhID8gYVtwcm9wXSA6IGIgPyBiW3Byb3BdIDogMDtcbn1cbmZ1bmN0aW9uIF9zZWdtZW50cyhsaW5lLCB0YXJnZXQsIHByb3BlcnR5KSB7XG4gIGNvbnN0IHNlZ21lbnRzID0gbGluZS5zZWdtZW50cztcbiAgY29uc3QgcG9pbnRzID0gbGluZS5wb2ludHM7XG4gIGNvbnN0IHRwb2ludHMgPSB0YXJnZXQucG9pbnRzO1xuICBjb25zdCBwYXJ0cyA9IFtdO1xuICBmb3IgKGNvbnN0IHNlZ21lbnQgb2Ygc2VnbWVudHMpIHtcbiAgICBsZXQge3N0YXJ0LCBlbmR9ID0gc2VnbWVudDtcbiAgICBlbmQgPSBmaW5kU2VnbWVudEVuZChzdGFydCwgZW5kLCBwb2ludHMpO1xuICAgIGNvbnN0IGJvdW5kcyA9IGdldEJvdW5kcyhwcm9wZXJ0eSwgcG9pbnRzW3N0YXJ0XSwgcG9pbnRzW2VuZF0sIHNlZ21lbnQubG9vcCk7XG4gICAgaWYgKCF0YXJnZXQuc2VnbWVudHMpIHtcbiAgICAgIHBhcnRzLnB1c2goe1xuICAgICAgICBzb3VyY2U6IHNlZ21lbnQsXG4gICAgICAgIHRhcmdldDogYm91bmRzLFxuICAgICAgICBzdGFydDogcG9pbnRzW3N0YXJ0XSxcbiAgICAgICAgZW5kOiBwb2ludHNbZW5kXVxuICAgICAgfSk7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgY29uc3QgdGFyZ2V0U2VnbWVudHMgPSBfYm91bmRTZWdtZW50cyh0YXJnZXQsIGJvdW5kcyk7XG4gICAgZm9yIChjb25zdCB0Z3Qgb2YgdGFyZ2V0U2VnbWVudHMpIHtcbiAgICAgIGNvbnN0IHN1YkJvdW5kcyA9IGdldEJvdW5kcyhwcm9wZXJ0eSwgdHBvaW50c1t0Z3Quc3RhcnRdLCB0cG9pbnRzW3RndC5lbmRdLCB0Z3QubG9vcCk7XG4gICAgICBjb25zdCBmaWxsU291cmNlcyA9IF9ib3VuZFNlZ21lbnQoc2VnbWVudCwgcG9pbnRzLCBzdWJCb3VuZHMpO1xuICAgICAgZm9yIChjb25zdCBmaWxsU291cmNlIG9mIGZpbGxTb3VyY2VzKSB7XG4gICAgICAgIHBhcnRzLnB1c2goe1xuICAgICAgICAgIHNvdXJjZTogZmlsbFNvdXJjZSxcbiAgICAgICAgICB0YXJnZXQ6IHRndCxcbiAgICAgICAgICBzdGFydDoge1xuICAgICAgICAgICAgW3Byb3BlcnR5XTogX2dldEVkZ2UoYm91bmRzLCBzdWJCb3VuZHMsICdzdGFydCcsIE1hdGgubWF4KVxuICAgICAgICAgIH0sXG4gICAgICAgICAgZW5kOiB7XG4gICAgICAgICAgICBbcHJvcGVydHldOiBfZ2V0RWRnZShib3VuZHMsIHN1YkJvdW5kcywgJ2VuZCcsIE1hdGgubWluKVxuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiBwYXJ0cztcbn1cbmZ1bmN0aW9uIGNsaXBCb3VuZHMoY3R4LCBzY2FsZSwgYm91bmRzKSB7XG4gIGNvbnN0IHt0b3AsIGJvdHRvbX0gPSBzY2FsZS5jaGFydC5jaGFydEFyZWE7XG4gIGNvbnN0IHtwcm9wZXJ0eSwgc3RhcnQsIGVuZH0gPSBib3VuZHMgfHwge307XG4gIGlmIChwcm9wZXJ0eSA9PT0gJ3gnKSB7XG4gICAgY3R4LmJlZ2luUGF0aCgpO1xuICAgIGN0eC5yZWN0KHN0YXJ0LCB0b3AsIGVuZCAtIHN0YXJ0LCBib3R0b20gLSB0b3ApO1xuICAgIGN0eC5jbGlwKCk7XG4gIH1cbn1cbmZ1bmN0aW9uIGludGVycG9sYXRlZExpbmVUbyhjdHgsIHRhcmdldCwgcG9pbnQsIHByb3BlcnR5KSB7XG4gIGNvbnN0IGludGVycG9sYXRlZFBvaW50ID0gdGFyZ2V0LmludGVycG9sYXRlKHBvaW50LCBwcm9wZXJ0eSk7XG4gIGlmIChpbnRlcnBvbGF0ZWRQb2ludCkge1xuICAgIGN0eC5saW5lVG8oaW50ZXJwb2xhdGVkUG9pbnQueCwgaW50ZXJwb2xhdGVkUG9pbnQueSk7XG4gIH1cbn1cbmZ1bmN0aW9uIF9maWxsKGN0eCwgY2ZnKSB7XG4gIGNvbnN0IHtsaW5lLCB0YXJnZXQsIHByb3BlcnR5LCBjb2xvciwgc2NhbGV9ID0gY2ZnO1xuICBjb25zdCBzZWdtZW50cyA9IF9zZWdtZW50cyhsaW5lLCB0YXJnZXQsIHByb3BlcnR5KTtcbiAgZm9yIChjb25zdCB7c291cmNlOiBzcmMsIHRhcmdldDogdGd0LCBzdGFydCwgZW5kfSBvZiBzZWdtZW50cykge1xuICAgIGNvbnN0IHtzdHlsZToge2JhY2tncm91bmRDb2xvciA9IGNvbG9yfSA9IHt9fSA9IHNyYztcbiAgICBjb25zdCBub3RTaGFwZSA9IHRhcmdldCAhPT0gdHJ1ZTtcbiAgICBjdHguc2F2ZSgpO1xuICAgIGN0eC5maWxsU3R5bGUgPSBiYWNrZ3JvdW5kQ29sb3I7XG4gICAgY2xpcEJvdW5kcyhjdHgsIHNjYWxlLCBub3RTaGFwZSAmJiBnZXRCb3VuZHMocHJvcGVydHksIHN0YXJ0LCBlbmQpKTtcbiAgICBjdHguYmVnaW5QYXRoKCk7XG4gICAgY29uc3QgbGluZUxvb3AgPSAhIWxpbmUucGF0aFNlZ21lbnQoY3R4LCBzcmMpO1xuICAgIGxldCBsb29wO1xuICAgIGlmIChub3RTaGFwZSkge1xuICAgICAgaWYgKGxpbmVMb29wKSB7XG4gICAgICAgIGN0eC5jbG9zZVBhdGgoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGludGVycG9sYXRlZExpbmVUbyhjdHgsIHRhcmdldCwgZW5kLCBwcm9wZXJ0eSk7XG4gICAgICB9XG4gICAgICBjb25zdCB0YXJnZXRMb29wID0gISF0YXJnZXQucGF0aFNlZ21lbnQoY3R4LCB0Z3QsIHttb3ZlOiBsaW5lTG9vcCwgcmV2ZXJzZTogdHJ1ZX0pO1xuICAgICAgbG9vcCA9IGxpbmVMb29wICYmIHRhcmdldExvb3A7XG4gICAgICBpZiAoIWxvb3ApIHtcbiAgICAgICAgaW50ZXJwb2xhdGVkTGluZVRvKGN0eCwgdGFyZ2V0LCBzdGFydCwgcHJvcGVydHkpO1xuICAgICAgfVxuICAgIH1cbiAgICBjdHguY2xvc2VQYXRoKCk7XG4gICAgY3R4LmZpbGwobG9vcCA/ICdldmVub2RkJyA6ICdub256ZXJvJyk7XG4gICAgY3R4LnJlc3RvcmUoKTtcbiAgfVxufVxuZnVuY3Rpb24gZG9GaWxsKGN0eCwgY2ZnKSB7XG4gIGNvbnN0IHtsaW5lLCB0YXJnZXQsIGFib3ZlLCBiZWxvdywgYXJlYSwgc2NhbGV9ID0gY2ZnO1xuICBjb25zdCBwcm9wZXJ0eSA9IGxpbmUuX2xvb3AgPyAnYW5nbGUnIDogY2ZnLmF4aXM7XG4gIGN0eC5zYXZlKCk7XG4gIGlmIChwcm9wZXJ0eSA9PT0gJ3gnICYmIGJlbG93ICE9PSBhYm92ZSkge1xuICAgIF9jbGlwKGN0eCwgdGFyZ2V0LCBhcmVhLnRvcCk7XG4gICAgX2ZpbGwoY3R4LCB7bGluZSwgdGFyZ2V0LCBjb2xvcjogYWJvdmUsIHNjYWxlLCBwcm9wZXJ0eX0pO1xuICAgIGN0eC5yZXN0b3JlKCk7XG4gICAgY3R4LnNhdmUoKTtcbiAgICBfY2xpcChjdHgsIHRhcmdldCwgYXJlYS5ib3R0b20pO1xuICB9XG4gIF9maWxsKGN0eCwge2xpbmUsIHRhcmdldCwgY29sb3I6IGJlbG93LCBzY2FsZSwgcHJvcGVydHl9KTtcbiAgY3R4LnJlc3RvcmUoKTtcbn1cbmZ1bmN0aW9uIGRyYXdmaWxsKGN0eCwgc291cmNlLCBhcmVhKSB7XG4gIGNvbnN0IHRhcmdldCA9IGdldFRhcmdldChzb3VyY2UpO1xuICBjb25zdCB7bGluZSwgc2NhbGUsIGF4aXN9ID0gc291cmNlO1xuICBjb25zdCBsaW5lT3B0cyA9IGxpbmUub3B0aW9ucztcbiAgY29uc3QgZmlsbE9wdGlvbiA9IGxpbmVPcHRzLmZpbGw7XG4gIGNvbnN0IGNvbG9yID0gbGluZU9wdHMuYmFja2dyb3VuZENvbG9yO1xuICBjb25zdCB7YWJvdmUgPSBjb2xvciwgYmVsb3cgPSBjb2xvcn0gPSBmaWxsT3B0aW9uIHx8IHt9O1xuICBpZiAodGFyZ2V0ICYmIGxpbmUucG9pbnRzLmxlbmd0aCkge1xuICAgIGNsaXBBcmVhKGN0eCwgYXJlYSk7XG4gICAgZG9GaWxsKGN0eCwge2xpbmUsIHRhcmdldCwgYWJvdmUsIGJlbG93LCBhcmVhLCBzY2FsZSwgYXhpc30pO1xuICAgIHVuY2xpcEFyZWEoY3R4KTtcbiAgfVxufVxudmFyIHBsdWdpbl9maWxsZXIgPSB7XG4gIGlkOiAnZmlsbGVyJyxcbiAgYWZ0ZXJEYXRhc2V0c1VwZGF0ZShjaGFydCwgX2FyZ3MsIG9wdGlvbnMpIHtcbiAgICBjb25zdCBjb3VudCA9IChjaGFydC5kYXRhLmRhdGFzZXRzIHx8IFtdKS5sZW5ndGg7XG4gICAgY29uc3Qgc291cmNlcyA9IFtdO1xuICAgIGxldCBtZXRhLCBpLCBsaW5lLCBzb3VyY2U7XG4gICAgZm9yIChpID0gMDsgaSA8IGNvdW50OyArK2kpIHtcbiAgICAgIG1ldGEgPSBjaGFydC5nZXREYXRhc2V0TWV0YShpKTtcbiAgICAgIGxpbmUgPSBtZXRhLmRhdGFzZXQ7XG4gICAgICBzb3VyY2UgPSBudWxsO1xuICAgICAgaWYgKGxpbmUgJiYgbGluZS5vcHRpb25zICYmIGxpbmUgaW5zdGFuY2VvZiBMaW5lRWxlbWVudCkge1xuICAgICAgICBzb3VyY2UgPSB7XG4gICAgICAgICAgdmlzaWJsZTogY2hhcnQuaXNEYXRhc2V0VmlzaWJsZShpKSxcbiAgICAgICAgICBpbmRleDogaSxcbiAgICAgICAgICBmaWxsOiBkZWNvZGVGaWxsKGxpbmUsIGksIGNvdW50KSxcbiAgICAgICAgICBjaGFydCxcbiAgICAgICAgICBheGlzOiBtZXRhLmNvbnRyb2xsZXIub3B0aW9ucy5pbmRleEF4aXMsXG4gICAgICAgICAgc2NhbGU6IG1ldGEudlNjYWxlLFxuICAgICAgICAgIGxpbmUsXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgICBtZXRhLiRmaWxsZXIgPSBzb3VyY2U7XG4gICAgICBzb3VyY2VzLnB1c2goc291cmNlKTtcbiAgICB9XG4gICAgZm9yIChpID0gMDsgaSA8IGNvdW50OyArK2kpIHtcbiAgICAgIHNvdXJjZSA9IHNvdXJjZXNbaV07XG4gICAgICBpZiAoIXNvdXJjZSB8fCBzb3VyY2UuZmlsbCA9PT0gZmFsc2UpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICBzb3VyY2UuZmlsbCA9IHJlc29sdmVUYXJnZXQoc291cmNlcywgaSwgb3B0aW9ucy5wcm9wYWdhdGUpO1xuICAgIH1cbiAgfSxcbiAgYmVmb3JlRHJhdyhjaGFydCwgX2FyZ3MsIG9wdGlvbnMpIHtcbiAgICBjb25zdCBkcmF3ID0gb3B0aW9ucy5kcmF3VGltZSA9PT0gJ2JlZm9yZURyYXcnO1xuICAgIGNvbnN0IG1ldGFzZXRzID0gY2hhcnQuZ2V0U29ydGVkVmlzaWJsZURhdGFzZXRNZXRhcygpO1xuICAgIGNvbnN0IGFyZWEgPSBjaGFydC5jaGFydEFyZWE7XG4gICAgZm9yIChsZXQgaSA9IG1ldGFzZXRzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICBjb25zdCBzb3VyY2UgPSBtZXRhc2V0c1tpXS4kZmlsbGVyO1xuICAgICAgaWYgKCFzb3VyY2UpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICBzb3VyY2UubGluZS51cGRhdGVDb250cm9sUG9pbnRzKGFyZWEsIHNvdXJjZS5heGlzKTtcbiAgICAgIGlmIChkcmF3KSB7XG4gICAgICAgIGRyYXdmaWxsKGNoYXJ0LmN0eCwgc291cmNlLCBhcmVhKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sXG4gIGJlZm9yZURhdGFzZXRzRHJhdyhjaGFydCwgX2FyZ3MsIG9wdGlvbnMpIHtcbiAgICBpZiAob3B0aW9ucy5kcmF3VGltZSAhPT0gJ2JlZm9yZURhdGFzZXRzRHJhdycpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgbWV0YXNldHMgPSBjaGFydC5nZXRTb3J0ZWRWaXNpYmxlRGF0YXNldE1ldGFzKCk7XG4gICAgZm9yIChsZXQgaSA9IG1ldGFzZXRzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICBjb25zdCBzb3VyY2UgPSBtZXRhc2V0c1tpXS4kZmlsbGVyO1xuICAgICAgaWYgKHNvdXJjZSkge1xuICAgICAgICBkcmF3ZmlsbChjaGFydC5jdHgsIHNvdXJjZSwgY2hhcnQuY2hhcnRBcmVhKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sXG4gIGJlZm9yZURhdGFzZXREcmF3KGNoYXJ0LCBhcmdzLCBvcHRpb25zKSB7XG4gICAgY29uc3Qgc291cmNlID0gYXJncy5tZXRhLiRmaWxsZXI7XG4gICAgaWYgKCFzb3VyY2UgfHwgc291cmNlLmZpbGwgPT09IGZhbHNlIHx8IG9wdGlvbnMuZHJhd1RpbWUgIT09ICdiZWZvcmVEYXRhc2V0RHJhdycpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZHJhd2ZpbGwoY2hhcnQuY3R4LCBzb3VyY2UsIGNoYXJ0LmNoYXJ0QXJlYSk7XG4gIH0sXG4gIGRlZmF1bHRzOiB7XG4gICAgcHJvcGFnYXRlOiB0cnVlLFxuICAgIGRyYXdUaW1lOiAnYmVmb3JlRGF0YXNldERyYXcnXG4gIH1cbn07XG5cbmNvbnN0IGdldEJveFNpemUgPSAobGFiZWxPcHRzLCBmb250U2l6ZSkgPT4ge1xuICBsZXQge2JveEhlaWdodCA9IGZvbnRTaXplLCBib3hXaWR0aCA9IGZvbnRTaXplfSA9IGxhYmVsT3B0cztcbiAgaWYgKGxhYmVsT3B0cy51c2VQb2ludFN0eWxlKSB7XG4gICAgYm94SGVpZ2h0ID0gTWF0aC5taW4oYm94SGVpZ2h0LCBmb250U2l6ZSk7XG4gICAgYm94V2lkdGggPSBNYXRoLm1pbihib3hXaWR0aCwgZm9udFNpemUpO1xuICB9XG4gIHJldHVybiB7XG4gICAgYm94V2lkdGgsXG4gICAgYm94SGVpZ2h0LFxuICAgIGl0ZW1IZWlnaHQ6IE1hdGgubWF4KGZvbnRTaXplLCBib3hIZWlnaHQpXG4gIH07XG59O1xuY29uc3QgaXRlbXNFcXVhbCA9IChhLCBiKSA9PiBhICE9PSBudWxsICYmIGIgIT09IG51bGwgJiYgYS5kYXRhc2V0SW5kZXggPT09IGIuZGF0YXNldEluZGV4ICYmIGEuaW5kZXggPT09IGIuaW5kZXg7XG5jbGFzcyBMZWdlbmQgZXh0ZW5kcyBFbGVtZW50IHtcbiAgY29uc3RydWN0b3IoY29uZmlnKSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLl9hZGRlZCA9IGZhbHNlO1xuICAgIHRoaXMubGVnZW5kSGl0Qm94ZXMgPSBbXTtcbiAgICB0aGlzLl9ob3ZlcmVkSXRlbSA9IG51bGw7XG4gICAgdGhpcy5kb3VnaG51dE1vZGUgPSBmYWxzZTtcbiAgICB0aGlzLmNoYXJ0ID0gY29uZmlnLmNoYXJ0O1xuICAgIHRoaXMub3B0aW9ucyA9IGNvbmZpZy5vcHRpb25zO1xuICAgIHRoaXMuY3R4ID0gY29uZmlnLmN0eDtcbiAgICB0aGlzLmxlZ2VuZEl0ZW1zID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuY29sdW1uU2l6ZXMgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5saW5lV2lkdGhzID0gdW5kZWZpbmVkO1xuICAgIHRoaXMubWF4SGVpZ2h0ID0gdW5kZWZpbmVkO1xuICAgIHRoaXMubWF4V2lkdGggPSB1bmRlZmluZWQ7XG4gICAgdGhpcy50b3AgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5ib3R0b20gPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5sZWZ0ID0gdW5kZWZpbmVkO1xuICAgIHRoaXMucmlnaHQgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5oZWlnaHQgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy53aWR0aCA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLl9tYXJnaW5zID0gdW5kZWZpbmVkO1xuICAgIHRoaXMucG9zaXRpb24gPSB1bmRlZmluZWQ7XG4gICAgdGhpcy53ZWlnaHQgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5mdWxsU2l6ZSA9IHVuZGVmaW5lZDtcbiAgfVxuICB1cGRhdGUobWF4V2lkdGgsIG1heEhlaWdodCwgbWFyZ2lucykge1xuICAgIHRoaXMubWF4V2lkdGggPSBtYXhXaWR0aDtcbiAgICB0aGlzLm1heEhlaWdodCA9IG1heEhlaWdodDtcbiAgICB0aGlzLl9tYXJnaW5zID0gbWFyZ2lucztcbiAgICB0aGlzLnNldERpbWVuc2lvbnMoKTtcbiAgICB0aGlzLmJ1aWxkTGFiZWxzKCk7XG4gICAgdGhpcy5maXQoKTtcbiAgfVxuICBzZXREaW1lbnNpb25zKCkge1xuICAgIGlmICh0aGlzLmlzSG9yaXpvbnRhbCgpKSB7XG4gICAgICB0aGlzLndpZHRoID0gdGhpcy5tYXhXaWR0aDtcbiAgICAgIHRoaXMubGVmdCA9IHRoaXMuX21hcmdpbnMubGVmdDtcbiAgICAgIHRoaXMucmlnaHQgPSB0aGlzLndpZHRoO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmhlaWdodCA9IHRoaXMubWF4SGVpZ2h0O1xuICAgICAgdGhpcy50b3AgPSB0aGlzLl9tYXJnaW5zLnRvcDtcbiAgICAgIHRoaXMuYm90dG9tID0gdGhpcy5oZWlnaHQ7XG4gICAgfVxuICB9XG4gIGJ1aWxkTGFiZWxzKCkge1xuICAgIGNvbnN0IGxhYmVsT3B0cyA9IHRoaXMub3B0aW9ucy5sYWJlbHMgfHwge307XG4gICAgbGV0IGxlZ2VuZEl0ZW1zID0gY2FsbGJhY2sobGFiZWxPcHRzLmdlbmVyYXRlTGFiZWxzLCBbdGhpcy5jaGFydF0sIHRoaXMpIHx8IFtdO1xuICAgIGlmIChsYWJlbE9wdHMuZmlsdGVyKSB7XG4gICAgICBsZWdlbmRJdGVtcyA9IGxlZ2VuZEl0ZW1zLmZpbHRlcigoaXRlbSkgPT4gbGFiZWxPcHRzLmZpbHRlcihpdGVtLCB0aGlzLmNoYXJ0LmRhdGEpKTtcbiAgICB9XG4gICAgaWYgKGxhYmVsT3B0cy5zb3J0KSB7XG4gICAgICBsZWdlbmRJdGVtcyA9IGxlZ2VuZEl0ZW1zLnNvcnQoKGEsIGIpID0+IGxhYmVsT3B0cy5zb3J0KGEsIGIsIHRoaXMuY2hhcnQuZGF0YSkpO1xuICAgIH1cbiAgICBpZiAodGhpcy5vcHRpb25zLnJldmVyc2UpIHtcbiAgICAgIGxlZ2VuZEl0ZW1zLnJldmVyc2UoKTtcbiAgICB9XG4gICAgdGhpcy5sZWdlbmRJdGVtcyA9IGxlZ2VuZEl0ZW1zO1xuICB9XG4gIGZpdCgpIHtcbiAgICBjb25zdCB7b3B0aW9ucywgY3R4fSA9IHRoaXM7XG4gICAgaWYgKCFvcHRpb25zLmRpc3BsYXkpIHtcbiAgICAgIHRoaXMud2lkdGggPSB0aGlzLmhlaWdodCA9IDA7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IGxhYmVsT3B0cyA9IG9wdGlvbnMubGFiZWxzO1xuICAgIGNvbnN0IGxhYmVsRm9udCA9IHRvRm9udChsYWJlbE9wdHMuZm9udCk7XG4gICAgY29uc3QgZm9udFNpemUgPSBsYWJlbEZvbnQuc2l6ZTtcbiAgICBjb25zdCB0aXRsZUhlaWdodCA9IHRoaXMuX2NvbXB1dGVUaXRsZUhlaWdodCgpO1xuICAgIGNvbnN0IHtib3hXaWR0aCwgaXRlbUhlaWdodH0gPSBnZXRCb3hTaXplKGxhYmVsT3B0cywgZm9udFNpemUpO1xuICAgIGxldCB3aWR0aCwgaGVpZ2h0O1xuICAgIGN0eC5mb250ID0gbGFiZWxGb250LnN0cmluZztcbiAgICBpZiAodGhpcy5pc0hvcml6b250YWwoKSkge1xuICAgICAgd2lkdGggPSB0aGlzLm1heFdpZHRoO1xuICAgICAgaGVpZ2h0ID0gdGhpcy5fZml0Um93cyh0aXRsZUhlaWdodCwgZm9udFNpemUsIGJveFdpZHRoLCBpdGVtSGVpZ2h0KSArIDEwO1xuICAgIH0gZWxzZSB7XG4gICAgICBoZWlnaHQgPSB0aGlzLm1heEhlaWdodDtcbiAgICAgIHdpZHRoID0gdGhpcy5fZml0Q29scyh0aXRsZUhlaWdodCwgZm9udFNpemUsIGJveFdpZHRoLCBpdGVtSGVpZ2h0KSArIDEwO1xuICAgIH1cbiAgICB0aGlzLndpZHRoID0gTWF0aC5taW4od2lkdGgsIG9wdGlvbnMubWF4V2lkdGggfHwgdGhpcy5tYXhXaWR0aCk7XG4gICAgdGhpcy5oZWlnaHQgPSBNYXRoLm1pbihoZWlnaHQsIG9wdGlvbnMubWF4SGVpZ2h0IHx8IHRoaXMubWF4SGVpZ2h0KTtcbiAgfVxuICBfZml0Um93cyh0aXRsZUhlaWdodCwgZm9udFNpemUsIGJveFdpZHRoLCBpdGVtSGVpZ2h0KSB7XG4gICAgY29uc3Qge2N0eCwgbWF4V2lkdGgsIG9wdGlvbnM6IHtsYWJlbHM6IHtwYWRkaW5nfX19ID0gdGhpcztcbiAgICBjb25zdCBoaXRib3hlcyA9IHRoaXMubGVnZW5kSGl0Qm94ZXMgPSBbXTtcbiAgICBjb25zdCBsaW5lV2lkdGhzID0gdGhpcy5saW5lV2lkdGhzID0gWzBdO1xuICAgIGNvbnN0IGxpbmVIZWlnaHQgPSBpdGVtSGVpZ2h0ICsgcGFkZGluZztcbiAgICBsZXQgdG90YWxIZWlnaHQgPSB0aXRsZUhlaWdodDtcbiAgICBjdHgudGV4dEFsaWduID0gJ2xlZnQnO1xuICAgIGN0eC50ZXh0QmFzZWxpbmUgPSAnbWlkZGxlJztcbiAgICBsZXQgcm93ID0gLTE7XG4gICAgbGV0IHRvcCA9IC1saW5lSGVpZ2h0O1xuICAgIHRoaXMubGVnZW5kSXRlbXMuZm9yRWFjaCgobGVnZW5kSXRlbSwgaSkgPT4ge1xuICAgICAgY29uc3QgaXRlbVdpZHRoID0gYm94V2lkdGggKyAoZm9udFNpemUgLyAyKSArIGN0eC5tZWFzdXJlVGV4dChsZWdlbmRJdGVtLnRleHQpLndpZHRoO1xuICAgICAgaWYgKGkgPT09IDAgfHwgbGluZVdpZHRoc1tsaW5lV2lkdGhzLmxlbmd0aCAtIDFdICsgaXRlbVdpZHRoICsgMiAqIHBhZGRpbmcgPiBtYXhXaWR0aCkge1xuICAgICAgICB0b3RhbEhlaWdodCArPSBsaW5lSGVpZ2h0O1xuICAgICAgICBsaW5lV2lkdGhzW2xpbmVXaWR0aHMubGVuZ3RoIC0gKGkgPiAwID8gMCA6IDEpXSA9IDA7XG4gICAgICAgIHRvcCArPSBsaW5lSGVpZ2h0O1xuICAgICAgICByb3crKztcbiAgICAgIH1cbiAgICAgIGhpdGJveGVzW2ldID0ge2xlZnQ6IDAsIHRvcCwgcm93LCB3aWR0aDogaXRlbVdpZHRoLCBoZWlnaHQ6IGl0ZW1IZWlnaHR9O1xuICAgICAgbGluZVdpZHRoc1tsaW5lV2lkdGhzLmxlbmd0aCAtIDFdICs9IGl0ZW1XaWR0aCArIHBhZGRpbmc7XG4gICAgfSk7XG4gICAgcmV0dXJuIHRvdGFsSGVpZ2h0O1xuICB9XG4gIF9maXRDb2xzKHRpdGxlSGVpZ2h0LCBmb250U2l6ZSwgYm94V2lkdGgsIGl0ZW1IZWlnaHQpIHtcbiAgICBjb25zdCB7Y3R4LCBtYXhIZWlnaHQsIG9wdGlvbnM6IHtsYWJlbHM6IHtwYWRkaW5nfX19ID0gdGhpcztcbiAgICBjb25zdCBoaXRib3hlcyA9IHRoaXMubGVnZW5kSGl0Qm94ZXMgPSBbXTtcbiAgICBjb25zdCBjb2x1bW5TaXplcyA9IHRoaXMuY29sdW1uU2l6ZXMgPSBbXTtcbiAgICBjb25zdCBoZWlnaHRMaW1pdCA9IG1heEhlaWdodCAtIHRpdGxlSGVpZ2h0O1xuICAgIGxldCB0b3RhbFdpZHRoID0gcGFkZGluZztcbiAgICBsZXQgY3VycmVudENvbFdpZHRoID0gMDtcbiAgICBsZXQgY3VycmVudENvbEhlaWdodCA9IDA7XG4gICAgbGV0IGxlZnQgPSAwO1xuICAgIGxldCBjb2wgPSAwO1xuICAgIHRoaXMubGVnZW5kSXRlbXMuZm9yRWFjaCgobGVnZW5kSXRlbSwgaSkgPT4ge1xuICAgICAgY29uc3QgaXRlbVdpZHRoID0gYm94V2lkdGggKyAoZm9udFNpemUgLyAyKSArIGN0eC5tZWFzdXJlVGV4dChsZWdlbmRJdGVtLnRleHQpLndpZHRoO1xuICAgICAgaWYgKGkgPiAwICYmIGN1cnJlbnRDb2xIZWlnaHQgKyBpdGVtSGVpZ2h0ICsgMiAqIHBhZGRpbmcgPiBoZWlnaHRMaW1pdCkge1xuICAgICAgICB0b3RhbFdpZHRoICs9IGN1cnJlbnRDb2xXaWR0aCArIHBhZGRpbmc7XG4gICAgICAgIGNvbHVtblNpemVzLnB1c2goe3dpZHRoOiBjdXJyZW50Q29sV2lkdGgsIGhlaWdodDogY3VycmVudENvbEhlaWdodH0pO1xuICAgICAgICBsZWZ0ICs9IGN1cnJlbnRDb2xXaWR0aCArIHBhZGRpbmc7XG4gICAgICAgIGNvbCsrO1xuICAgICAgICBjdXJyZW50Q29sV2lkdGggPSBjdXJyZW50Q29sSGVpZ2h0ID0gMDtcbiAgICAgIH1cbiAgICAgIGhpdGJveGVzW2ldID0ge2xlZnQsIHRvcDogY3VycmVudENvbEhlaWdodCwgY29sLCB3aWR0aDogaXRlbVdpZHRoLCBoZWlnaHQ6IGl0ZW1IZWlnaHR9O1xuICAgICAgY3VycmVudENvbFdpZHRoID0gTWF0aC5tYXgoY3VycmVudENvbFdpZHRoLCBpdGVtV2lkdGgpO1xuICAgICAgY3VycmVudENvbEhlaWdodCArPSBpdGVtSGVpZ2h0ICsgcGFkZGluZztcbiAgICB9KTtcbiAgICB0b3RhbFdpZHRoICs9IGN1cnJlbnRDb2xXaWR0aDtcbiAgICBjb2x1bW5TaXplcy5wdXNoKHt3aWR0aDogY3VycmVudENvbFdpZHRoLCBoZWlnaHQ6IGN1cnJlbnRDb2xIZWlnaHR9KTtcbiAgICByZXR1cm4gdG90YWxXaWR0aDtcbiAgfVxuICBhZGp1c3RIaXRCb3hlcygpIHtcbiAgICBpZiAoIXRoaXMub3B0aW9ucy5kaXNwbGF5KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IHRpdGxlSGVpZ2h0ID0gdGhpcy5fY29tcHV0ZVRpdGxlSGVpZ2h0KCk7XG4gICAgY29uc3Qge2xlZ2VuZEhpdEJveGVzOiBoaXRib3hlcywgb3B0aW9uczoge2FsaWduLCBsYWJlbHM6IHtwYWRkaW5nfSwgcnRsfX0gPSB0aGlzO1xuICAgIGNvbnN0IHJ0bEhlbHBlciA9IGdldFJ0bEFkYXB0ZXIocnRsLCB0aGlzLmxlZnQsIHRoaXMud2lkdGgpO1xuICAgIGlmICh0aGlzLmlzSG9yaXpvbnRhbCgpKSB7XG4gICAgICBsZXQgcm93ID0gMDtcbiAgICAgIGxldCBsZWZ0ID0gX2FsaWduU3RhcnRFbmQoYWxpZ24sIHRoaXMubGVmdCArIHBhZGRpbmcsIHRoaXMucmlnaHQgLSB0aGlzLmxpbmVXaWR0aHNbcm93XSk7XG4gICAgICBmb3IgKGNvbnN0IGhpdGJveCBvZiBoaXRib3hlcykge1xuICAgICAgICBpZiAocm93ICE9PSBoaXRib3gucm93KSB7XG4gICAgICAgICAgcm93ID0gaGl0Ym94LnJvdztcbiAgICAgICAgICBsZWZ0ID0gX2FsaWduU3RhcnRFbmQoYWxpZ24sIHRoaXMubGVmdCArIHBhZGRpbmcsIHRoaXMucmlnaHQgLSB0aGlzLmxpbmVXaWR0aHNbcm93XSk7XG4gICAgICAgIH1cbiAgICAgICAgaGl0Ym94LnRvcCArPSB0aGlzLnRvcCArIHRpdGxlSGVpZ2h0ICsgcGFkZGluZztcbiAgICAgICAgaGl0Ym94LmxlZnQgPSBydGxIZWxwZXIubGVmdEZvckx0cihydGxIZWxwZXIueChsZWZ0KSwgaGl0Ym94LndpZHRoKTtcbiAgICAgICAgbGVmdCArPSBoaXRib3gud2lkdGggKyBwYWRkaW5nO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBsZXQgY29sID0gMDtcbiAgICAgIGxldCB0b3AgPSBfYWxpZ25TdGFydEVuZChhbGlnbiwgdGhpcy50b3AgKyB0aXRsZUhlaWdodCArIHBhZGRpbmcsIHRoaXMuYm90dG9tIC0gdGhpcy5jb2x1bW5TaXplc1tjb2xdLmhlaWdodCk7XG4gICAgICBmb3IgKGNvbnN0IGhpdGJveCBvZiBoaXRib3hlcykge1xuICAgICAgICBpZiAoaGl0Ym94LmNvbCAhPT0gY29sKSB7XG4gICAgICAgICAgY29sID0gaGl0Ym94LmNvbDtcbiAgICAgICAgICB0b3AgPSBfYWxpZ25TdGFydEVuZChhbGlnbiwgdGhpcy50b3AgKyB0aXRsZUhlaWdodCArIHBhZGRpbmcsIHRoaXMuYm90dG9tIC0gdGhpcy5jb2x1bW5TaXplc1tjb2xdLmhlaWdodCk7XG4gICAgICAgIH1cbiAgICAgICAgaGl0Ym94LnRvcCA9IHRvcDtcbiAgICAgICAgaGl0Ym94LmxlZnQgKz0gdGhpcy5sZWZ0ICsgcGFkZGluZztcbiAgICAgICAgaGl0Ym94LmxlZnQgPSBydGxIZWxwZXIubGVmdEZvckx0cihydGxIZWxwZXIueChoaXRib3gubGVmdCksIGhpdGJveC53aWR0aCk7XG4gICAgICAgIHRvcCArPSBoaXRib3guaGVpZ2h0ICsgcGFkZGluZztcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgaXNIb3Jpem9udGFsKCkge1xuICAgIHJldHVybiB0aGlzLm9wdGlvbnMucG9zaXRpb24gPT09ICd0b3AnIHx8IHRoaXMub3B0aW9ucy5wb3NpdGlvbiA9PT0gJ2JvdHRvbSc7XG4gIH1cbiAgZHJhdygpIHtcbiAgICBpZiAodGhpcy5vcHRpb25zLmRpc3BsYXkpIHtcbiAgICAgIGNvbnN0IGN0eCA9IHRoaXMuY3R4O1xuICAgICAgY2xpcEFyZWEoY3R4LCB0aGlzKTtcbiAgICAgIHRoaXMuX2RyYXcoKTtcbiAgICAgIHVuY2xpcEFyZWEoY3R4KTtcbiAgICB9XG4gIH1cbiAgX2RyYXcoKSB7XG4gICAgY29uc3Qge29wdGlvbnM6IG9wdHMsIGNvbHVtblNpemVzLCBsaW5lV2lkdGhzLCBjdHh9ID0gdGhpcztcbiAgICBjb25zdCB7YWxpZ24sIGxhYmVsczogbGFiZWxPcHRzfSA9IG9wdHM7XG4gICAgY29uc3QgZGVmYXVsdENvbG9yID0gZGVmYXVsdHMuY29sb3I7XG4gICAgY29uc3QgcnRsSGVscGVyID0gZ2V0UnRsQWRhcHRlcihvcHRzLnJ0bCwgdGhpcy5sZWZ0LCB0aGlzLndpZHRoKTtcbiAgICBjb25zdCBsYWJlbEZvbnQgPSB0b0ZvbnQobGFiZWxPcHRzLmZvbnQpO1xuICAgIGNvbnN0IHtjb2xvcjogZm9udENvbG9yLCBwYWRkaW5nfSA9IGxhYmVsT3B0cztcbiAgICBjb25zdCBmb250U2l6ZSA9IGxhYmVsRm9udC5zaXplO1xuICAgIGNvbnN0IGhhbGZGb250U2l6ZSA9IGZvbnRTaXplIC8gMjtcbiAgICBsZXQgY3Vyc29yO1xuICAgIHRoaXMuZHJhd1RpdGxlKCk7XG4gICAgY3R4LnRleHRBbGlnbiA9IHJ0bEhlbHBlci50ZXh0QWxpZ24oJ2xlZnQnKTtcbiAgICBjdHgudGV4dEJhc2VsaW5lID0gJ21pZGRsZSc7XG4gICAgY3R4LmxpbmVXaWR0aCA9IDAuNTtcbiAgICBjdHguZm9udCA9IGxhYmVsRm9udC5zdHJpbmc7XG4gICAgY29uc3Qge2JveFdpZHRoLCBib3hIZWlnaHQsIGl0ZW1IZWlnaHR9ID0gZ2V0Qm94U2l6ZShsYWJlbE9wdHMsIGZvbnRTaXplKTtcbiAgICBjb25zdCBkcmF3TGVnZW5kQm94ID0gZnVuY3Rpb24oeCwgeSwgbGVnZW5kSXRlbSkge1xuICAgICAgaWYgKGlzTmFOKGJveFdpZHRoKSB8fCBib3hXaWR0aCA8PSAwIHx8IGlzTmFOKGJveEhlaWdodCkgfHwgYm94SGVpZ2h0IDwgMCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBjdHguc2F2ZSgpO1xuICAgICAgY29uc3QgbGluZVdpZHRoID0gdmFsdWVPckRlZmF1bHQobGVnZW5kSXRlbS5saW5lV2lkdGgsIDEpO1xuICAgICAgY3R4LmZpbGxTdHlsZSA9IHZhbHVlT3JEZWZhdWx0KGxlZ2VuZEl0ZW0uZmlsbFN0eWxlLCBkZWZhdWx0Q29sb3IpO1xuICAgICAgY3R4LmxpbmVDYXAgPSB2YWx1ZU9yRGVmYXVsdChsZWdlbmRJdGVtLmxpbmVDYXAsICdidXR0Jyk7XG4gICAgICBjdHgubGluZURhc2hPZmZzZXQgPSB2YWx1ZU9yRGVmYXVsdChsZWdlbmRJdGVtLmxpbmVEYXNoT2Zmc2V0LCAwKTtcbiAgICAgIGN0eC5saW5lSm9pbiA9IHZhbHVlT3JEZWZhdWx0KGxlZ2VuZEl0ZW0ubGluZUpvaW4sICdtaXRlcicpO1xuICAgICAgY3R4LmxpbmVXaWR0aCA9IGxpbmVXaWR0aDtcbiAgICAgIGN0eC5zdHJva2VTdHlsZSA9IHZhbHVlT3JEZWZhdWx0KGxlZ2VuZEl0ZW0uc3Ryb2tlU3R5bGUsIGRlZmF1bHRDb2xvcik7XG4gICAgICBjdHguc2V0TGluZURhc2godmFsdWVPckRlZmF1bHQobGVnZW5kSXRlbS5saW5lRGFzaCwgW10pKTtcbiAgICAgIGlmIChsYWJlbE9wdHMudXNlUG9pbnRTdHlsZSkge1xuICAgICAgICBjb25zdCBkcmF3T3B0aW9ucyA9IHtcbiAgICAgICAgICByYWRpdXM6IGJveFdpZHRoICogTWF0aC5TUVJUMiAvIDIsXG4gICAgICAgICAgcG9pbnRTdHlsZTogbGVnZW5kSXRlbS5wb2ludFN0eWxlLFxuICAgICAgICAgIHJvdGF0aW9uOiBsZWdlbmRJdGVtLnJvdGF0aW9uLFxuICAgICAgICAgIGJvcmRlcldpZHRoOiBsaW5lV2lkdGhcbiAgICAgICAgfTtcbiAgICAgICAgY29uc3QgY2VudGVyWCA9IHJ0bEhlbHBlci54UGx1cyh4LCBib3hXaWR0aCAvIDIpO1xuICAgICAgICBjb25zdCBjZW50ZXJZID0geSArIGhhbGZGb250U2l6ZTtcbiAgICAgICAgZHJhd1BvaW50KGN0eCwgZHJhd09wdGlvbnMsIGNlbnRlclgsIGNlbnRlclkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc3QgeUJveFRvcCA9IHkgKyBNYXRoLm1heCgoZm9udFNpemUgLSBib3hIZWlnaHQpIC8gMiwgMCk7XG4gICAgICAgIGNvbnN0IHhCb3hMZWZ0ID0gcnRsSGVscGVyLmxlZnRGb3JMdHIoeCwgYm94V2lkdGgpO1xuICAgICAgICBjb25zdCBib3JkZXJSYWRpdXMgPSB0b1RSQkxDb3JuZXJzKGxlZ2VuZEl0ZW0uYm9yZGVyUmFkaXVzKTtcbiAgICAgICAgY3R4LmJlZ2luUGF0aCgpO1xuICAgICAgICBpZiAoT2JqZWN0LnZhbHVlcyhib3JkZXJSYWRpdXMpLnNvbWUodiA9PiB2ICE9PSAwKSkge1xuICAgICAgICAgIGFkZFJvdW5kZWRSZWN0UGF0aChjdHgsIHtcbiAgICAgICAgICAgIHg6IHhCb3hMZWZ0LFxuICAgICAgICAgICAgeTogeUJveFRvcCxcbiAgICAgICAgICAgIHc6IGJveFdpZHRoLFxuICAgICAgICAgICAgaDogYm94SGVpZ2h0LFxuICAgICAgICAgICAgcmFkaXVzOiBib3JkZXJSYWRpdXMsXG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY3R4LnJlY3QoeEJveExlZnQsIHlCb3hUb3AsIGJveFdpZHRoLCBib3hIZWlnaHQpO1xuICAgICAgICB9XG4gICAgICAgIGN0eC5maWxsKCk7XG4gICAgICAgIGlmIChsaW5lV2lkdGggIT09IDApIHtcbiAgICAgICAgICBjdHguc3Ryb2tlKCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGN0eC5yZXN0b3JlKCk7XG4gICAgfTtcbiAgICBjb25zdCBmaWxsVGV4dCA9IGZ1bmN0aW9uKHgsIHksIGxlZ2VuZEl0ZW0pIHtcbiAgICAgIHJlbmRlclRleHQoY3R4LCBsZWdlbmRJdGVtLnRleHQsIHgsIHkgKyAoaXRlbUhlaWdodCAvIDIpLCBsYWJlbEZvbnQsIHtcbiAgICAgICAgc3RyaWtldGhyb3VnaDogbGVnZW5kSXRlbS5oaWRkZW4sXG4gICAgICAgIHRleHRBbGlnbjogcnRsSGVscGVyLnRleHRBbGlnbihsZWdlbmRJdGVtLnRleHRBbGlnbilcbiAgICAgIH0pO1xuICAgIH07XG4gICAgY29uc3QgaXNIb3Jpem9udGFsID0gdGhpcy5pc0hvcml6b250YWwoKTtcbiAgICBjb25zdCB0aXRsZUhlaWdodCA9IHRoaXMuX2NvbXB1dGVUaXRsZUhlaWdodCgpO1xuICAgIGlmIChpc0hvcml6b250YWwpIHtcbiAgICAgIGN1cnNvciA9IHtcbiAgICAgICAgeDogX2FsaWduU3RhcnRFbmQoYWxpZ24sIHRoaXMubGVmdCArIHBhZGRpbmcsIHRoaXMucmlnaHQgLSBsaW5lV2lkdGhzWzBdKSxcbiAgICAgICAgeTogdGhpcy50b3AgKyBwYWRkaW5nICsgdGl0bGVIZWlnaHQsXG4gICAgICAgIGxpbmU6IDBcbiAgICAgIH07XG4gICAgfSBlbHNlIHtcbiAgICAgIGN1cnNvciA9IHtcbiAgICAgICAgeDogdGhpcy5sZWZ0ICsgcGFkZGluZyxcbiAgICAgICAgeTogX2FsaWduU3RhcnRFbmQoYWxpZ24sIHRoaXMudG9wICsgdGl0bGVIZWlnaHQgKyBwYWRkaW5nLCB0aGlzLmJvdHRvbSAtIGNvbHVtblNpemVzWzBdLmhlaWdodCksXG4gICAgICAgIGxpbmU6IDBcbiAgICAgIH07XG4gICAgfVxuICAgIG92ZXJyaWRlVGV4dERpcmVjdGlvbih0aGlzLmN0eCwgb3B0cy50ZXh0RGlyZWN0aW9uKTtcbiAgICBjb25zdCBsaW5lSGVpZ2h0ID0gaXRlbUhlaWdodCArIHBhZGRpbmc7XG4gICAgdGhpcy5sZWdlbmRJdGVtcy5mb3JFYWNoKChsZWdlbmRJdGVtLCBpKSA9PiB7XG4gICAgICBjdHguc3Ryb2tlU3R5bGUgPSBsZWdlbmRJdGVtLmZvbnRDb2xvciB8fCBmb250Q29sb3I7XG4gICAgICBjdHguZmlsbFN0eWxlID0gbGVnZW5kSXRlbS5mb250Q29sb3IgfHwgZm9udENvbG9yO1xuICAgICAgY29uc3QgdGV4dFdpZHRoID0gY3R4Lm1lYXN1cmVUZXh0KGxlZ2VuZEl0ZW0udGV4dCkud2lkdGg7XG4gICAgICBjb25zdCB0ZXh0QWxpZ24gPSBydGxIZWxwZXIudGV4dEFsaWduKGxlZ2VuZEl0ZW0udGV4dEFsaWduIHx8IChsZWdlbmRJdGVtLnRleHRBbGlnbiA9IGxhYmVsT3B0cy50ZXh0QWxpZ24pKTtcbiAgICAgIGNvbnN0IHdpZHRoID0gYm94V2lkdGggKyBoYWxmRm9udFNpemUgKyB0ZXh0V2lkdGg7XG4gICAgICBsZXQgeCA9IGN1cnNvci54O1xuICAgICAgbGV0IHkgPSBjdXJzb3IueTtcbiAgICAgIHJ0bEhlbHBlci5zZXRXaWR0aCh0aGlzLndpZHRoKTtcbiAgICAgIGlmIChpc0hvcml6b250YWwpIHtcbiAgICAgICAgaWYgKGkgPiAwICYmIHggKyB3aWR0aCArIHBhZGRpbmcgPiB0aGlzLnJpZ2h0KSB7XG4gICAgICAgICAgeSA9IGN1cnNvci55ICs9IGxpbmVIZWlnaHQ7XG4gICAgICAgICAgY3Vyc29yLmxpbmUrKztcbiAgICAgICAgICB4ID0gY3Vyc29yLnggPSBfYWxpZ25TdGFydEVuZChhbGlnbiwgdGhpcy5sZWZ0ICsgcGFkZGluZywgdGhpcy5yaWdodCAtIGxpbmVXaWR0aHNbY3Vyc29yLmxpbmVdKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChpID4gMCAmJiB5ICsgbGluZUhlaWdodCA+IHRoaXMuYm90dG9tKSB7XG4gICAgICAgIHggPSBjdXJzb3IueCA9IHggKyBjb2x1bW5TaXplc1tjdXJzb3IubGluZV0ud2lkdGggKyBwYWRkaW5nO1xuICAgICAgICBjdXJzb3IubGluZSsrO1xuICAgICAgICB5ID0gY3Vyc29yLnkgPSBfYWxpZ25TdGFydEVuZChhbGlnbiwgdGhpcy50b3AgKyB0aXRsZUhlaWdodCArIHBhZGRpbmcsIHRoaXMuYm90dG9tIC0gY29sdW1uU2l6ZXNbY3Vyc29yLmxpbmVdLmhlaWdodCk7XG4gICAgICB9XG4gICAgICBjb25zdCByZWFsWCA9IHJ0bEhlbHBlci54KHgpO1xuICAgICAgZHJhd0xlZ2VuZEJveChyZWFsWCwgeSwgbGVnZW5kSXRlbSk7XG4gICAgICB4ID0gX3RleHRYKHRleHRBbGlnbiwgeCArIGJveFdpZHRoICsgaGFsZkZvbnRTaXplLCBpc0hvcml6b250YWwgPyB4ICsgd2lkdGggOiB0aGlzLnJpZ2h0LCBvcHRzLnJ0bCk7XG4gICAgICBmaWxsVGV4dChydGxIZWxwZXIueCh4KSwgeSwgbGVnZW5kSXRlbSk7XG4gICAgICBpZiAoaXNIb3Jpem9udGFsKSB7XG4gICAgICAgIGN1cnNvci54ICs9IHdpZHRoICsgcGFkZGluZztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGN1cnNvci55ICs9IGxpbmVIZWlnaHQ7XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmVzdG9yZVRleHREaXJlY3Rpb24odGhpcy5jdHgsIG9wdHMudGV4dERpcmVjdGlvbik7XG4gIH1cbiAgZHJhd1RpdGxlKCkge1xuICAgIGNvbnN0IG9wdHMgPSB0aGlzLm9wdGlvbnM7XG4gICAgY29uc3QgdGl0bGVPcHRzID0gb3B0cy50aXRsZTtcbiAgICBjb25zdCB0aXRsZUZvbnQgPSB0b0ZvbnQodGl0bGVPcHRzLmZvbnQpO1xuICAgIGNvbnN0IHRpdGxlUGFkZGluZyA9IHRvUGFkZGluZyh0aXRsZU9wdHMucGFkZGluZyk7XG4gICAgaWYgKCF0aXRsZU9wdHMuZGlzcGxheSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBydGxIZWxwZXIgPSBnZXRSdGxBZGFwdGVyKG9wdHMucnRsLCB0aGlzLmxlZnQsIHRoaXMud2lkdGgpO1xuICAgIGNvbnN0IGN0eCA9IHRoaXMuY3R4O1xuICAgIGNvbnN0IHBvc2l0aW9uID0gdGl0bGVPcHRzLnBvc2l0aW9uO1xuICAgIGNvbnN0IGhhbGZGb250U2l6ZSA9IHRpdGxlRm9udC5zaXplIC8gMjtcbiAgICBjb25zdCB0b3BQYWRkaW5nUGx1c0hhbGZGb250U2l6ZSA9IHRpdGxlUGFkZGluZy50b3AgKyBoYWxmRm9udFNpemU7XG4gICAgbGV0IHk7XG4gICAgbGV0IGxlZnQgPSB0aGlzLmxlZnQ7XG4gICAgbGV0IG1heFdpZHRoID0gdGhpcy53aWR0aDtcbiAgICBpZiAodGhpcy5pc0hvcml6b250YWwoKSkge1xuICAgICAgbWF4V2lkdGggPSBNYXRoLm1heCguLi50aGlzLmxpbmVXaWR0aHMpO1xuICAgICAgeSA9IHRoaXMudG9wICsgdG9wUGFkZGluZ1BsdXNIYWxmRm9udFNpemU7XG4gICAgICBsZWZ0ID0gX2FsaWduU3RhcnRFbmQob3B0cy5hbGlnbiwgbGVmdCwgdGhpcy5yaWdodCAtIG1heFdpZHRoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgbWF4SGVpZ2h0ID0gdGhpcy5jb2x1bW5TaXplcy5yZWR1Y2UoKGFjYywgc2l6ZSkgPT4gTWF0aC5tYXgoYWNjLCBzaXplLmhlaWdodCksIDApO1xuICAgICAgeSA9IHRvcFBhZGRpbmdQbHVzSGFsZkZvbnRTaXplICsgX2FsaWduU3RhcnRFbmQob3B0cy5hbGlnbiwgdGhpcy50b3AsIHRoaXMuYm90dG9tIC0gbWF4SGVpZ2h0IC0gb3B0cy5sYWJlbHMucGFkZGluZyAtIHRoaXMuX2NvbXB1dGVUaXRsZUhlaWdodCgpKTtcbiAgICB9XG4gICAgY29uc3QgeCA9IF9hbGlnblN0YXJ0RW5kKHBvc2l0aW9uLCBsZWZ0LCBsZWZ0ICsgbWF4V2lkdGgpO1xuICAgIGN0eC50ZXh0QWxpZ24gPSBydGxIZWxwZXIudGV4dEFsaWduKF90b0xlZnRSaWdodENlbnRlcihwb3NpdGlvbikpO1xuICAgIGN0eC50ZXh0QmFzZWxpbmUgPSAnbWlkZGxlJztcbiAgICBjdHguc3Ryb2tlU3R5bGUgPSB0aXRsZU9wdHMuY29sb3I7XG4gICAgY3R4LmZpbGxTdHlsZSA9IHRpdGxlT3B0cy5jb2xvcjtcbiAgICBjdHguZm9udCA9IHRpdGxlRm9udC5zdHJpbmc7XG4gICAgcmVuZGVyVGV4dChjdHgsIHRpdGxlT3B0cy50ZXh0LCB4LCB5LCB0aXRsZUZvbnQpO1xuICB9XG4gIF9jb21wdXRlVGl0bGVIZWlnaHQoKSB7XG4gICAgY29uc3QgdGl0bGVPcHRzID0gdGhpcy5vcHRpb25zLnRpdGxlO1xuICAgIGNvbnN0IHRpdGxlRm9udCA9IHRvRm9udCh0aXRsZU9wdHMuZm9udCk7XG4gICAgY29uc3QgdGl0bGVQYWRkaW5nID0gdG9QYWRkaW5nKHRpdGxlT3B0cy5wYWRkaW5nKTtcbiAgICByZXR1cm4gdGl0bGVPcHRzLmRpc3BsYXkgPyB0aXRsZUZvbnQubGluZUhlaWdodCArIHRpdGxlUGFkZGluZy5oZWlnaHQgOiAwO1xuICB9XG4gIF9nZXRMZWdlbmRJdGVtQXQoeCwgeSkge1xuICAgIGxldCBpLCBoaXRCb3gsIGxoO1xuICAgIGlmIChfaXNCZXR3ZWVuKHgsIHRoaXMubGVmdCwgdGhpcy5yaWdodClcbiAgICAgICYmIF9pc0JldHdlZW4oeSwgdGhpcy50b3AsIHRoaXMuYm90dG9tKSkge1xuICAgICAgbGggPSB0aGlzLmxlZ2VuZEhpdEJveGVzO1xuICAgICAgZm9yIChpID0gMDsgaSA8IGxoLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIGhpdEJveCA9IGxoW2ldO1xuICAgICAgICBpZiAoX2lzQmV0d2Vlbih4LCBoaXRCb3gubGVmdCwgaGl0Qm94LmxlZnQgKyBoaXRCb3gud2lkdGgpXG4gICAgICAgICAgJiYgX2lzQmV0d2Vlbih5LCBoaXRCb3gudG9wLCBoaXRCb3gudG9wICsgaGl0Qm94LmhlaWdodCkpIHtcbiAgICAgICAgICByZXR1cm4gdGhpcy5sZWdlbmRJdGVtc1tpXTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICBoYW5kbGVFdmVudChlKSB7XG4gICAgY29uc3Qgb3B0cyA9IHRoaXMub3B0aW9ucztcbiAgICBpZiAoIWlzTGlzdGVuZWQoZS50eXBlLCBvcHRzKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBob3ZlcmVkSXRlbSA9IHRoaXMuX2dldExlZ2VuZEl0ZW1BdChlLngsIGUueSk7XG4gICAgaWYgKGUudHlwZSA9PT0gJ21vdXNlbW92ZScpIHtcbiAgICAgIGNvbnN0IHByZXZpb3VzID0gdGhpcy5faG92ZXJlZEl0ZW07XG4gICAgICBjb25zdCBzYW1lSXRlbSA9IGl0ZW1zRXF1YWwocHJldmlvdXMsIGhvdmVyZWRJdGVtKTtcbiAgICAgIGlmIChwcmV2aW91cyAmJiAhc2FtZUl0ZW0pIHtcbiAgICAgICAgY2FsbGJhY2sob3B0cy5vbkxlYXZlLCBbZSwgcHJldmlvdXMsIHRoaXNdLCB0aGlzKTtcbiAgICAgIH1cbiAgICAgIHRoaXMuX2hvdmVyZWRJdGVtID0gaG92ZXJlZEl0ZW07XG4gICAgICBpZiAoaG92ZXJlZEl0ZW0gJiYgIXNhbWVJdGVtKSB7XG4gICAgICAgIGNhbGxiYWNrKG9wdHMub25Ib3ZlciwgW2UsIGhvdmVyZWRJdGVtLCB0aGlzXSwgdGhpcyk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChob3ZlcmVkSXRlbSkge1xuICAgICAgY2FsbGJhY2sob3B0cy5vbkNsaWNrLCBbZSwgaG92ZXJlZEl0ZW0sIHRoaXNdLCB0aGlzKTtcbiAgICB9XG4gIH1cbn1cbmZ1bmN0aW9uIGlzTGlzdGVuZWQodHlwZSwgb3B0cykge1xuICBpZiAodHlwZSA9PT0gJ21vdXNlbW92ZScgJiYgKG9wdHMub25Ib3ZlciB8fCBvcHRzLm9uTGVhdmUpKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgaWYgKG9wdHMub25DbGljayAmJiAodHlwZSA9PT0gJ2NsaWNrJyB8fCB0eXBlID09PSAnbW91c2V1cCcpKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxudmFyIHBsdWdpbl9sZWdlbmQgPSB7XG4gIGlkOiAnbGVnZW5kJyxcbiAgX2VsZW1lbnQ6IExlZ2VuZCxcbiAgc3RhcnQoY2hhcnQsIF9hcmdzLCBvcHRpb25zKSB7XG4gICAgY29uc3QgbGVnZW5kID0gY2hhcnQubGVnZW5kID0gbmV3IExlZ2VuZCh7Y3R4OiBjaGFydC5jdHgsIG9wdGlvbnMsIGNoYXJ0fSk7XG4gICAgbGF5b3V0cy5jb25maWd1cmUoY2hhcnQsIGxlZ2VuZCwgb3B0aW9ucyk7XG4gICAgbGF5b3V0cy5hZGRCb3goY2hhcnQsIGxlZ2VuZCk7XG4gIH0sXG4gIHN0b3AoY2hhcnQpIHtcbiAgICBsYXlvdXRzLnJlbW92ZUJveChjaGFydCwgY2hhcnQubGVnZW5kKTtcbiAgICBkZWxldGUgY2hhcnQubGVnZW5kO1xuICB9LFxuICBiZWZvcmVVcGRhdGUoY2hhcnQsIF9hcmdzLCBvcHRpb25zKSB7XG4gICAgY29uc3QgbGVnZW5kID0gY2hhcnQubGVnZW5kO1xuICAgIGxheW91dHMuY29uZmlndXJlKGNoYXJ0LCBsZWdlbmQsIG9wdGlvbnMpO1xuICAgIGxlZ2VuZC5vcHRpb25zID0gb3B0aW9ucztcbiAgfSxcbiAgYWZ0ZXJVcGRhdGUoY2hhcnQpIHtcbiAgICBjb25zdCBsZWdlbmQgPSBjaGFydC5sZWdlbmQ7XG4gICAgbGVnZW5kLmJ1aWxkTGFiZWxzKCk7XG4gICAgbGVnZW5kLmFkanVzdEhpdEJveGVzKCk7XG4gIH0sXG4gIGFmdGVyRXZlbnQoY2hhcnQsIGFyZ3MpIHtcbiAgICBpZiAoIWFyZ3MucmVwbGF5KSB7XG4gICAgICBjaGFydC5sZWdlbmQuaGFuZGxlRXZlbnQoYXJncy5ldmVudCk7XG4gICAgfVxuICB9LFxuICBkZWZhdWx0czoge1xuICAgIGRpc3BsYXk6IHRydWUsXG4gICAgcG9zaXRpb246ICd0b3AnLFxuICAgIGFsaWduOiAnY2VudGVyJyxcbiAgICBmdWxsU2l6ZTogdHJ1ZSxcbiAgICByZXZlcnNlOiBmYWxzZSxcbiAgICB3ZWlnaHQ6IDEwMDAsXG4gICAgb25DbGljayhlLCBsZWdlbmRJdGVtLCBsZWdlbmQpIHtcbiAgICAgIGNvbnN0IGluZGV4ID0gbGVnZW5kSXRlbS5kYXRhc2V0SW5kZXg7XG4gICAgICBjb25zdCBjaSA9IGxlZ2VuZC5jaGFydDtcbiAgICAgIGlmIChjaS5pc0RhdGFzZXRWaXNpYmxlKGluZGV4KSkge1xuICAgICAgICBjaS5oaWRlKGluZGV4KTtcbiAgICAgICAgbGVnZW5kSXRlbS5oaWRkZW4gPSB0cnVlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY2kuc2hvdyhpbmRleCk7XG4gICAgICAgIGxlZ2VuZEl0ZW0uaGlkZGVuID0gZmFsc2U7XG4gICAgICB9XG4gICAgfSxcbiAgICBvbkhvdmVyOiBudWxsLFxuICAgIG9uTGVhdmU6IG51bGwsXG4gICAgbGFiZWxzOiB7XG4gICAgICBjb2xvcjogKGN0eCkgPT4gY3R4LmNoYXJ0Lm9wdGlvbnMuY29sb3IsXG4gICAgICBib3hXaWR0aDogNDAsXG4gICAgICBwYWRkaW5nOiAxMCxcbiAgICAgIGdlbmVyYXRlTGFiZWxzKGNoYXJ0KSB7XG4gICAgICAgIGNvbnN0IGRhdGFzZXRzID0gY2hhcnQuZGF0YS5kYXRhc2V0cztcbiAgICAgICAgY29uc3Qge2xhYmVsczoge3VzZVBvaW50U3R5bGUsIHBvaW50U3R5bGUsIHRleHRBbGlnbiwgY29sb3J9fSA9IGNoYXJ0LmxlZ2VuZC5vcHRpb25zO1xuICAgICAgICByZXR1cm4gY2hhcnQuX2dldFNvcnRlZERhdGFzZXRNZXRhcygpLm1hcCgobWV0YSkgPT4ge1xuICAgICAgICAgIGNvbnN0IHN0eWxlID0gbWV0YS5jb250cm9sbGVyLmdldFN0eWxlKHVzZVBvaW50U3R5bGUgPyAwIDogdW5kZWZpbmVkKTtcbiAgICAgICAgICBjb25zdCBib3JkZXJXaWR0aCA9IHRvUGFkZGluZyhzdHlsZS5ib3JkZXJXaWR0aCk7XG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHRleHQ6IGRhdGFzZXRzW21ldGEuaW5kZXhdLmxhYmVsLFxuICAgICAgICAgICAgZmlsbFN0eWxlOiBzdHlsZS5iYWNrZ3JvdW5kQ29sb3IsXG4gICAgICAgICAgICBmb250Q29sb3I6IGNvbG9yLFxuICAgICAgICAgICAgaGlkZGVuOiAhbWV0YS52aXNpYmxlLFxuICAgICAgICAgICAgbGluZUNhcDogc3R5bGUuYm9yZGVyQ2FwU3R5bGUsXG4gICAgICAgICAgICBsaW5lRGFzaDogc3R5bGUuYm9yZGVyRGFzaCxcbiAgICAgICAgICAgIGxpbmVEYXNoT2Zmc2V0OiBzdHlsZS5ib3JkZXJEYXNoT2Zmc2V0LFxuICAgICAgICAgICAgbGluZUpvaW46IHN0eWxlLmJvcmRlckpvaW5TdHlsZSxcbiAgICAgICAgICAgIGxpbmVXaWR0aDogKGJvcmRlcldpZHRoLndpZHRoICsgYm9yZGVyV2lkdGguaGVpZ2h0KSAvIDQsXG4gICAgICAgICAgICBzdHJva2VTdHlsZTogc3R5bGUuYm9yZGVyQ29sb3IsXG4gICAgICAgICAgICBwb2ludFN0eWxlOiBwb2ludFN0eWxlIHx8IHN0eWxlLnBvaW50U3R5bGUsXG4gICAgICAgICAgICByb3RhdGlvbjogc3R5bGUucm90YXRpb24sXG4gICAgICAgICAgICB0ZXh0QWxpZ246IHRleHRBbGlnbiB8fCBzdHlsZS50ZXh0QWxpZ24sXG4gICAgICAgICAgICBib3JkZXJSYWRpdXM6IDAsXG4gICAgICAgICAgICBkYXRhc2V0SW5kZXg6IG1ldGEuaW5kZXhcbiAgICAgICAgICB9O1xuICAgICAgICB9LCB0aGlzKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIHRpdGxlOiB7XG4gICAgICBjb2xvcjogKGN0eCkgPT4gY3R4LmNoYXJ0Lm9wdGlvbnMuY29sb3IsXG4gICAgICBkaXNwbGF5OiBmYWxzZSxcbiAgICAgIHBvc2l0aW9uOiAnY2VudGVyJyxcbiAgICAgIHRleHQ6ICcnLFxuICAgIH1cbiAgfSxcbiAgZGVzY3JpcHRvcnM6IHtcbiAgICBfc2NyaXB0YWJsZTogKG5hbWUpID0+ICFuYW1lLnN0YXJ0c1dpdGgoJ29uJyksXG4gICAgbGFiZWxzOiB7XG4gICAgICBfc2NyaXB0YWJsZTogKG5hbWUpID0+ICFbJ2dlbmVyYXRlTGFiZWxzJywgJ2ZpbHRlcicsICdzb3J0J10uaW5jbHVkZXMobmFtZSksXG4gICAgfVxuICB9LFxufTtcblxuY2xhc3MgVGl0bGUgZXh0ZW5kcyBFbGVtZW50IHtcbiAgY29uc3RydWN0b3IoY29uZmlnKSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLmNoYXJ0ID0gY29uZmlnLmNoYXJ0O1xuICAgIHRoaXMub3B0aW9ucyA9IGNvbmZpZy5vcHRpb25zO1xuICAgIHRoaXMuY3R4ID0gY29uZmlnLmN0eDtcbiAgICB0aGlzLl9wYWRkaW5nID0gdW5kZWZpbmVkO1xuICAgIHRoaXMudG9wID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuYm90dG9tID0gdW5kZWZpbmVkO1xuICAgIHRoaXMubGVmdCA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLnJpZ2h0ID0gdW5kZWZpbmVkO1xuICAgIHRoaXMud2lkdGggPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5oZWlnaHQgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5wb3NpdGlvbiA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLndlaWdodCA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLmZ1bGxTaXplID0gdW5kZWZpbmVkO1xuICB9XG4gIHVwZGF0ZShtYXhXaWR0aCwgbWF4SGVpZ2h0KSB7XG4gICAgY29uc3Qgb3B0cyA9IHRoaXMub3B0aW9ucztcbiAgICB0aGlzLmxlZnQgPSAwO1xuICAgIHRoaXMudG9wID0gMDtcbiAgICBpZiAoIW9wdHMuZGlzcGxheSkge1xuICAgICAgdGhpcy53aWR0aCA9IHRoaXMuaGVpZ2h0ID0gdGhpcy5yaWdodCA9IHRoaXMuYm90dG9tID0gMDtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy53aWR0aCA9IHRoaXMucmlnaHQgPSBtYXhXaWR0aDtcbiAgICB0aGlzLmhlaWdodCA9IHRoaXMuYm90dG9tID0gbWF4SGVpZ2h0O1xuICAgIGNvbnN0IGxpbmVDb3VudCA9IGlzQXJyYXkob3B0cy50ZXh0KSA/IG9wdHMudGV4dC5sZW5ndGggOiAxO1xuICAgIHRoaXMuX3BhZGRpbmcgPSB0b1BhZGRpbmcob3B0cy5wYWRkaW5nKTtcbiAgICBjb25zdCB0ZXh0U2l6ZSA9IGxpbmVDb3VudCAqIHRvRm9udChvcHRzLmZvbnQpLmxpbmVIZWlnaHQgKyB0aGlzLl9wYWRkaW5nLmhlaWdodDtcbiAgICBpZiAodGhpcy5pc0hvcml6b250YWwoKSkge1xuICAgICAgdGhpcy5oZWlnaHQgPSB0ZXh0U2l6ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy53aWR0aCA9IHRleHRTaXplO1xuICAgIH1cbiAgfVxuICBpc0hvcml6b250YWwoKSB7XG4gICAgY29uc3QgcG9zID0gdGhpcy5vcHRpb25zLnBvc2l0aW9uO1xuICAgIHJldHVybiBwb3MgPT09ICd0b3AnIHx8IHBvcyA9PT0gJ2JvdHRvbSc7XG4gIH1cbiAgX2RyYXdBcmdzKG9mZnNldCkge1xuICAgIGNvbnN0IHt0b3AsIGxlZnQsIGJvdHRvbSwgcmlnaHQsIG9wdGlvbnN9ID0gdGhpcztcbiAgICBjb25zdCBhbGlnbiA9IG9wdGlvbnMuYWxpZ247XG4gICAgbGV0IHJvdGF0aW9uID0gMDtcbiAgICBsZXQgbWF4V2lkdGgsIHRpdGxlWCwgdGl0bGVZO1xuICAgIGlmICh0aGlzLmlzSG9yaXpvbnRhbCgpKSB7XG4gICAgICB0aXRsZVggPSBfYWxpZ25TdGFydEVuZChhbGlnbiwgbGVmdCwgcmlnaHQpO1xuICAgICAgdGl0bGVZID0gdG9wICsgb2Zmc2V0O1xuICAgICAgbWF4V2lkdGggPSByaWdodCAtIGxlZnQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChvcHRpb25zLnBvc2l0aW9uID09PSAnbGVmdCcpIHtcbiAgICAgICAgdGl0bGVYID0gbGVmdCArIG9mZnNldDtcbiAgICAgICAgdGl0bGVZID0gX2FsaWduU3RhcnRFbmQoYWxpZ24sIGJvdHRvbSwgdG9wKTtcbiAgICAgICAgcm90YXRpb24gPSBQSSAqIC0wLjU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aXRsZVggPSByaWdodCAtIG9mZnNldDtcbiAgICAgICAgdGl0bGVZID0gX2FsaWduU3RhcnRFbmQoYWxpZ24sIHRvcCwgYm90dG9tKTtcbiAgICAgICAgcm90YXRpb24gPSBQSSAqIDAuNTtcbiAgICAgIH1cbiAgICAgIG1heFdpZHRoID0gYm90dG9tIC0gdG9wO1xuICAgIH1cbiAgICByZXR1cm4ge3RpdGxlWCwgdGl0bGVZLCBtYXhXaWR0aCwgcm90YXRpb259O1xuICB9XG4gIGRyYXcoKSB7XG4gICAgY29uc3QgY3R4ID0gdGhpcy5jdHg7XG4gICAgY29uc3Qgb3B0cyA9IHRoaXMub3B0aW9ucztcbiAgICBpZiAoIW9wdHMuZGlzcGxheSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBmb250T3B0cyA9IHRvRm9udChvcHRzLmZvbnQpO1xuICAgIGNvbnN0IGxpbmVIZWlnaHQgPSBmb250T3B0cy5saW5lSGVpZ2h0O1xuICAgIGNvbnN0IG9mZnNldCA9IGxpbmVIZWlnaHQgLyAyICsgdGhpcy5fcGFkZGluZy50b3A7XG4gICAgY29uc3Qge3RpdGxlWCwgdGl0bGVZLCBtYXhXaWR0aCwgcm90YXRpb259ID0gdGhpcy5fZHJhd0FyZ3Mob2Zmc2V0KTtcbiAgICByZW5kZXJUZXh0KGN0eCwgb3B0cy50ZXh0LCAwLCAwLCBmb250T3B0cywge1xuICAgICAgY29sb3I6IG9wdHMuY29sb3IsXG4gICAgICBtYXhXaWR0aCxcbiAgICAgIHJvdGF0aW9uLFxuICAgICAgdGV4dEFsaWduOiBfdG9MZWZ0UmlnaHRDZW50ZXIob3B0cy5hbGlnbiksXG4gICAgICB0ZXh0QmFzZWxpbmU6ICdtaWRkbGUnLFxuICAgICAgdHJhbnNsYXRpb246IFt0aXRsZVgsIHRpdGxlWV0sXG4gICAgfSk7XG4gIH1cbn1cbmZ1bmN0aW9uIGNyZWF0ZVRpdGxlKGNoYXJ0LCB0aXRsZU9wdHMpIHtcbiAgY29uc3QgdGl0bGUgPSBuZXcgVGl0bGUoe1xuICAgIGN0eDogY2hhcnQuY3R4LFxuICAgIG9wdGlvbnM6IHRpdGxlT3B0cyxcbiAgICBjaGFydFxuICB9KTtcbiAgbGF5b3V0cy5jb25maWd1cmUoY2hhcnQsIHRpdGxlLCB0aXRsZU9wdHMpO1xuICBsYXlvdXRzLmFkZEJveChjaGFydCwgdGl0bGUpO1xuICBjaGFydC50aXRsZUJsb2NrID0gdGl0bGU7XG59XG52YXIgcGx1Z2luX3RpdGxlID0ge1xuICBpZDogJ3RpdGxlJyxcbiAgX2VsZW1lbnQ6IFRpdGxlLFxuICBzdGFydChjaGFydCwgX2FyZ3MsIG9wdGlvbnMpIHtcbiAgICBjcmVhdGVUaXRsZShjaGFydCwgb3B0aW9ucyk7XG4gIH0sXG4gIHN0b3AoY2hhcnQpIHtcbiAgICBjb25zdCB0aXRsZUJsb2NrID0gY2hhcnQudGl0bGVCbG9jaztcbiAgICBsYXlvdXRzLnJlbW92ZUJveChjaGFydCwgdGl0bGVCbG9jayk7XG4gICAgZGVsZXRlIGNoYXJ0LnRpdGxlQmxvY2s7XG4gIH0sXG4gIGJlZm9yZVVwZGF0ZShjaGFydCwgX2FyZ3MsIG9wdGlvbnMpIHtcbiAgICBjb25zdCB0aXRsZSA9IGNoYXJ0LnRpdGxlQmxvY2s7XG4gICAgbGF5b3V0cy5jb25maWd1cmUoY2hhcnQsIHRpdGxlLCBvcHRpb25zKTtcbiAgICB0aXRsZS5vcHRpb25zID0gb3B0aW9ucztcbiAgfSxcbiAgZGVmYXVsdHM6IHtcbiAgICBhbGlnbjogJ2NlbnRlcicsXG4gICAgZGlzcGxheTogZmFsc2UsXG4gICAgZm9udDoge1xuICAgICAgd2VpZ2h0OiAnYm9sZCcsXG4gICAgfSxcbiAgICBmdWxsU2l6ZTogdHJ1ZSxcbiAgICBwYWRkaW5nOiAxMCxcbiAgICBwb3NpdGlvbjogJ3RvcCcsXG4gICAgdGV4dDogJycsXG4gICAgd2VpZ2h0OiAyMDAwXG4gIH0sXG4gIGRlZmF1bHRSb3V0ZXM6IHtcbiAgICBjb2xvcjogJ2NvbG9yJ1xuICB9LFxuICBkZXNjcmlwdG9yczoge1xuICAgIF9zY3JpcHRhYmxlOiB0cnVlLFxuICAgIF9pbmRleGFibGU6IGZhbHNlLFxuICB9LFxufTtcblxuY29uc3QgbWFwID0gbmV3IFdlYWtNYXAoKTtcbnZhciBwbHVnaW5fc3VidGl0bGUgPSB7XG4gIGlkOiAnc3VidGl0bGUnLFxuICBzdGFydChjaGFydCwgX2FyZ3MsIG9wdGlvbnMpIHtcbiAgICBjb25zdCB0aXRsZSA9IG5ldyBUaXRsZSh7XG4gICAgICBjdHg6IGNoYXJ0LmN0eCxcbiAgICAgIG9wdGlvbnMsXG4gICAgICBjaGFydFxuICAgIH0pO1xuICAgIGxheW91dHMuY29uZmlndXJlKGNoYXJ0LCB0aXRsZSwgb3B0aW9ucyk7XG4gICAgbGF5b3V0cy5hZGRCb3goY2hhcnQsIHRpdGxlKTtcbiAgICBtYXAuc2V0KGNoYXJ0LCB0aXRsZSk7XG4gIH0sXG4gIHN0b3AoY2hhcnQpIHtcbiAgICBsYXlvdXRzLnJlbW92ZUJveChjaGFydCwgbWFwLmdldChjaGFydCkpO1xuICAgIG1hcC5kZWxldGUoY2hhcnQpO1xuICB9LFxuICBiZWZvcmVVcGRhdGUoY2hhcnQsIF9hcmdzLCBvcHRpb25zKSB7XG4gICAgY29uc3QgdGl0bGUgPSBtYXAuZ2V0KGNoYXJ0KTtcbiAgICBsYXlvdXRzLmNvbmZpZ3VyZShjaGFydCwgdGl0bGUsIG9wdGlvbnMpO1xuICAgIHRpdGxlLm9wdGlvbnMgPSBvcHRpb25zO1xuICB9LFxuICBkZWZhdWx0czoge1xuICAgIGFsaWduOiAnY2VudGVyJyxcbiAgICBkaXNwbGF5OiBmYWxzZSxcbiAgICBmb250OiB7XG4gICAgICB3ZWlnaHQ6ICdub3JtYWwnLFxuICAgIH0sXG4gICAgZnVsbFNpemU6IHRydWUsXG4gICAgcGFkZGluZzogMCxcbiAgICBwb3NpdGlvbjogJ3RvcCcsXG4gICAgdGV4dDogJycsXG4gICAgd2VpZ2h0OiAxNTAwXG4gIH0sXG4gIGRlZmF1bHRSb3V0ZXM6IHtcbiAgICBjb2xvcjogJ2NvbG9yJ1xuICB9LFxuICBkZXNjcmlwdG9yczoge1xuICAgIF9zY3JpcHRhYmxlOiB0cnVlLFxuICAgIF9pbmRleGFibGU6IGZhbHNlLFxuICB9LFxufTtcblxuY29uc3QgcG9zaXRpb25lcnMgPSB7XG4gIGF2ZXJhZ2UoaXRlbXMpIHtcbiAgICBpZiAoIWl0ZW1zLmxlbmd0aCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBsZXQgaSwgbGVuO1xuICAgIGxldCB4ID0gMDtcbiAgICBsZXQgeSA9IDA7XG4gICAgbGV0IGNvdW50ID0gMDtcbiAgICBmb3IgKGkgPSAwLCBsZW4gPSBpdGVtcy5sZW5ndGg7IGkgPCBsZW47ICsraSkge1xuICAgICAgY29uc3QgZWwgPSBpdGVtc1tpXS5lbGVtZW50O1xuICAgICAgaWYgKGVsICYmIGVsLmhhc1ZhbHVlKCkpIHtcbiAgICAgICAgY29uc3QgcG9zID0gZWwudG9vbHRpcFBvc2l0aW9uKCk7XG4gICAgICAgIHggKz0gcG9zLng7XG4gICAgICAgIHkgKz0gcG9zLnk7XG4gICAgICAgICsrY291bnQ7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICB4OiB4IC8gY291bnQsXG4gICAgICB5OiB5IC8gY291bnRcbiAgICB9O1xuICB9LFxuICBuZWFyZXN0KGl0ZW1zLCBldmVudFBvc2l0aW9uKSB7XG4gICAgaWYgKCFpdGVtcy5sZW5ndGgpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgbGV0IHggPSBldmVudFBvc2l0aW9uLng7XG4gICAgbGV0IHkgPSBldmVudFBvc2l0aW9uLnk7XG4gICAgbGV0IG1pbkRpc3RhbmNlID0gTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZO1xuICAgIGxldCBpLCBsZW4sIG5lYXJlc3RFbGVtZW50O1xuICAgIGZvciAoaSA9IDAsIGxlbiA9IGl0ZW1zLmxlbmd0aDsgaSA8IGxlbjsgKytpKSB7XG4gICAgICBjb25zdCBlbCA9IGl0ZW1zW2ldLmVsZW1lbnQ7XG4gICAgICBpZiAoZWwgJiYgZWwuaGFzVmFsdWUoKSkge1xuICAgICAgICBjb25zdCBjZW50ZXIgPSBlbC5nZXRDZW50ZXJQb2ludCgpO1xuICAgICAgICBjb25zdCBkID0gZGlzdGFuY2VCZXR3ZWVuUG9pbnRzKGV2ZW50UG9zaXRpb24sIGNlbnRlcik7XG4gICAgICAgIGlmIChkIDwgbWluRGlzdGFuY2UpIHtcbiAgICAgICAgICBtaW5EaXN0YW5jZSA9IGQ7XG4gICAgICAgICAgbmVhcmVzdEVsZW1lbnQgPSBlbDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBpZiAobmVhcmVzdEVsZW1lbnQpIHtcbiAgICAgIGNvbnN0IHRwID0gbmVhcmVzdEVsZW1lbnQudG9vbHRpcFBvc2l0aW9uKCk7XG4gICAgICB4ID0gdHAueDtcbiAgICAgIHkgPSB0cC55O1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgeCxcbiAgICAgIHlcbiAgICB9O1xuICB9XG59O1xuZnVuY3Rpb24gcHVzaE9yQ29uY2F0KGJhc2UsIHRvUHVzaCkge1xuICBpZiAodG9QdXNoKSB7XG4gICAgaWYgKGlzQXJyYXkodG9QdXNoKSkge1xuICAgICAgQXJyYXkucHJvdG90eXBlLnB1c2guYXBwbHkoYmFzZSwgdG9QdXNoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYmFzZS5wdXNoKHRvUHVzaCk7XG4gICAgfVxuICB9XG4gIHJldHVybiBiYXNlO1xufVxuZnVuY3Rpb24gc3BsaXROZXdsaW5lcyhzdHIpIHtcbiAgaWYgKCh0eXBlb2Ygc3RyID09PSAnc3RyaW5nJyB8fCBzdHIgaW5zdGFuY2VvZiBTdHJpbmcpICYmIHN0ci5pbmRleE9mKCdcXG4nKSA+IC0xKSB7XG4gICAgcmV0dXJuIHN0ci5zcGxpdCgnXFxuJyk7XG4gIH1cbiAgcmV0dXJuIHN0cjtcbn1cbmZ1bmN0aW9uIGNyZWF0ZVRvb2x0aXBJdGVtKGNoYXJ0LCBpdGVtKSB7XG4gIGNvbnN0IHtlbGVtZW50LCBkYXRhc2V0SW5kZXgsIGluZGV4fSA9IGl0ZW07XG4gIGNvbnN0IGNvbnRyb2xsZXIgPSBjaGFydC5nZXREYXRhc2V0TWV0YShkYXRhc2V0SW5kZXgpLmNvbnRyb2xsZXI7XG4gIGNvbnN0IHtsYWJlbCwgdmFsdWV9ID0gY29udHJvbGxlci5nZXRMYWJlbEFuZFZhbHVlKGluZGV4KTtcbiAgcmV0dXJuIHtcbiAgICBjaGFydCxcbiAgICBsYWJlbCxcbiAgICBwYXJzZWQ6IGNvbnRyb2xsZXIuZ2V0UGFyc2VkKGluZGV4KSxcbiAgICByYXc6IGNoYXJ0LmRhdGEuZGF0YXNldHNbZGF0YXNldEluZGV4XS5kYXRhW2luZGV4XSxcbiAgICBmb3JtYXR0ZWRWYWx1ZTogdmFsdWUsXG4gICAgZGF0YXNldDogY29udHJvbGxlci5nZXREYXRhc2V0KCksXG4gICAgZGF0YUluZGV4OiBpbmRleCxcbiAgICBkYXRhc2V0SW5kZXgsXG4gICAgZWxlbWVudFxuICB9O1xufVxuZnVuY3Rpb24gZ2V0VG9vbHRpcFNpemUodG9vbHRpcCwgb3B0aW9ucykge1xuICBjb25zdCBjdHggPSB0b29sdGlwLmNoYXJ0LmN0eDtcbiAgY29uc3Qge2JvZHksIGZvb3RlciwgdGl0bGV9ID0gdG9vbHRpcDtcbiAgY29uc3Qge2JveFdpZHRoLCBib3hIZWlnaHR9ID0gb3B0aW9ucztcbiAgY29uc3QgYm9keUZvbnQgPSB0b0ZvbnQob3B0aW9ucy5ib2R5Rm9udCk7XG4gIGNvbnN0IHRpdGxlRm9udCA9IHRvRm9udChvcHRpb25zLnRpdGxlRm9udCk7XG4gIGNvbnN0IGZvb3RlckZvbnQgPSB0b0ZvbnQob3B0aW9ucy5mb290ZXJGb250KTtcbiAgY29uc3QgdGl0bGVMaW5lQ291bnQgPSB0aXRsZS5sZW5ndGg7XG4gIGNvbnN0IGZvb3RlckxpbmVDb3VudCA9IGZvb3Rlci5sZW5ndGg7XG4gIGNvbnN0IGJvZHlMaW5lSXRlbUNvdW50ID0gYm9keS5sZW5ndGg7XG4gIGNvbnN0IHBhZGRpbmcgPSB0b1BhZGRpbmcob3B0aW9ucy5wYWRkaW5nKTtcbiAgbGV0IGhlaWdodCA9IHBhZGRpbmcuaGVpZ2h0O1xuICBsZXQgd2lkdGggPSAwO1xuICBsZXQgY29tYmluZWRCb2R5TGVuZ3RoID0gYm9keS5yZWR1Y2UoKGNvdW50LCBib2R5SXRlbSkgPT4gY291bnQgKyBib2R5SXRlbS5iZWZvcmUubGVuZ3RoICsgYm9keUl0ZW0ubGluZXMubGVuZ3RoICsgYm9keUl0ZW0uYWZ0ZXIubGVuZ3RoLCAwKTtcbiAgY29tYmluZWRCb2R5TGVuZ3RoICs9IHRvb2x0aXAuYmVmb3JlQm9keS5sZW5ndGggKyB0b29sdGlwLmFmdGVyQm9keS5sZW5ndGg7XG4gIGlmICh0aXRsZUxpbmVDb3VudCkge1xuICAgIGhlaWdodCArPSB0aXRsZUxpbmVDb3VudCAqIHRpdGxlRm9udC5saW5lSGVpZ2h0XG5cdFx0XHQrICh0aXRsZUxpbmVDb3VudCAtIDEpICogb3B0aW9ucy50aXRsZVNwYWNpbmdcblx0XHRcdCsgb3B0aW9ucy50aXRsZU1hcmdpbkJvdHRvbTtcbiAgfVxuICBpZiAoY29tYmluZWRCb2R5TGVuZ3RoKSB7XG4gICAgY29uc3QgYm9keUxpbmVIZWlnaHQgPSBvcHRpb25zLmRpc3BsYXlDb2xvcnMgPyBNYXRoLm1heChib3hIZWlnaHQsIGJvZHlGb250LmxpbmVIZWlnaHQpIDogYm9keUZvbnQubGluZUhlaWdodDtcbiAgICBoZWlnaHQgKz0gYm9keUxpbmVJdGVtQ291bnQgKiBib2R5TGluZUhlaWdodFxuXHRcdFx0KyAoY29tYmluZWRCb2R5TGVuZ3RoIC0gYm9keUxpbmVJdGVtQ291bnQpICogYm9keUZvbnQubGluZUhlaWdodFxuXHRcdFx0KyAoY29tYmluZWRCb2R5TGVuZ3RoIC0gMSkgKiBvcHRpb25zLmJvZHlTcGFjaW5nO1xuICB9XG4gIGlmIChmb290ZXJMaW5lQ291bnQpIHtcbiAgICBoZWlnaHQgKz0gb3B0aW9ucy5mb290ZXJNYXJnaW5Ub3Bcblx0XHRcdCsgZm9vdGVyTGluZUNvdW50ICogZm9vdGVyRm9udC5saW5lSGVpZ2h0XG5cdFx0XHQrIChmb290ZXJMaW5lQ291bnQgLSAxKSAqIG9wdGlvbnMuZm9vdGVyU3BhY2luZztcbiAgfVxuICBsZXQgd2lkdGhQYWRkaW5nID0gMDtcbiAgY29uc3QgbWF4TGluZVdpZHRoID0gZnVuY3Rpb24obGluZSkge1xuICAgIHdpZHRoID0gTWF0aC5tYXgod2lkdGgsIGN0eC5tZWFzdXJlVGV4dChsaW5lKS53aWR0aCArIHdpZHRoUGFkZGluZyk7XG4gIH07XG4gIGN0eC5zYXZlKCk7XG4gIGN0eC5mb250ID0gdGl0bGVGb250LnN0cmluZztcbiAgZWFjaCh0b29sdGlwLnRpdGxlLCBtYXhMaW5lV2lkdGgpO1xuICBjdHguZm9udCA9IGJvZHlGb250LnN0cmluZztcbiAgZWFjaCh0b29sdGlwLmJlZm9yZUJvZHkuY29uY2F0KHRvb2x0aXAuYWZ0ZXJCb2R5KSwgbWF4TGluZVdpZHRoKTtcbiAgd2lkdGhQYWRkaW5nID0gb3B0aW9ucy5kaXNwbGF5Q29sb3JzID8gKGJveFdpZHRoICsgMiArIG9wdGlvbnMuYm94UGFkZGluZykgOiAwO1xuICBlYWNoKGJvZHksIChib2R5SXRlbSkgPT4ge1xuICAgIGVhY2goYm9keUl0ZW0uYmVmb3JlLCBtYXhMaW5lV2lkdGgpO1xuICAgIGVhY2goYm9keUl0ZW0ubGluZXMsIG1heExpbmVXaWR0aCk7XG4gICAgZWFjaChib2R5SXRlbS5hZnRlciwgbWF4TGluZVdpZHRoKTtcbiAgfSk7XG4gIHdpZHRoUGFkZGluZyA9IDA7XG4gIGN0eC5mb250ID0gZm9vdGVyRm9udC5zdHJpbmc7XG4gIGVhY2godG9vbHRpcC5mb290ZXIsIG1heExpbmVXaWR0aCk7XG4gIGN0eC5yZXN0b3JlKCk7XG4gIHdpZHRoICs9IHBhZGRpbmcud2lkdGg7XG4gIHJldHVybiB7d2lkdGgsIGhlaWdodH07XG59XG5mdW5jdGlvbiBkZXRlcm1pbmVZQWxpZ24oY2hhcnQsIHNpemUpIHtcbiAgY29uc3Qge3ksIGhlaWdodH0gPSBzaXplO1xuICBpZiAoeSA8IGhlaWdodCAvIDIpIHtcbiAgICByZXR1cm4gJ3RvcCc7XG4gIH0gZWxzZSBpZiAoeSA+IChjaGFydC5oZWlnaHQgLSBoZWlnaHQgLyAyKSkge1xuICAgIHJldHVybiAnYm90dG9tJztcbiAgfVxuICByZXR1cm4gJ2NlbnRlcic7XG59XG5mdW5jdGlvbiBkb2VzTm90Rml0V2l0aEFsaWduKHhBbGlnbiwgY2hhcnQsIG9wdGlvbnMsIHNpemUpIHtcbiAgY29uc3Qge3gsIHdpZHRofSA9IHNpemU7XG4gIGNvbnN0IGNhcmV0ID0gb3B0aW9ucy5jYXJldFNpemUgKyBvcHRpb25zLmNhcmV0UGFkZGluZztcbiAgaWYgKHhBbGlnbiA9PT0gJ2xlZnQnICYmIHggKyB3aWR0aCArIGNhcmV0ID4gY2hhcnQud2lkdGgpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICBpZiAoeEFsaWduID09PSAncmlnaHQnICYmIHggLSB3aWR0aCAtIGNhcmV0IDwgMCkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG59XG5mdW5jdGlvbiBkZXRlcm1pbmVYQWxpZ24oY2hhcnQsIG9wdGlvbnMsIHNpemUsIHlBbGlnbikge1xuICBjb25zdCB7eCwgd2lkdGh9ID0gc2l6ZTtcbiAgY29uc3Qge3dpZHRoOiBjaGFydFdpZHRoLCBjaGFydEFyZWE6IHtsZWZ0LCByaWdodH19ID0gY2hhcnQ7XG4gIGxldCB4QWxpZ24gPSAnY2VudGVyJztcbiAgaWYgKHlBbGlnbiA9PT0gJ2NlbnRlcicpIHtcbiAgICB4QWxpZ24gPSB4IDw9IChsZWZ0ICsgcmlnaHQpIC8gMiA/ICdsZWZ0JyA6ICdyaWdodCc7XG4gIH0gZWxzZSBpZiAoeCA8PSB3aWR0aCAvIDIpIHtcbiAgICB4QWxpZ24gPSAnbGVmdCc7XG4gIH0gZWxzZSBpZiAoeCA+PSBjaGFydFdpZHRoIC0gd2lkdGggLyAyKSB7XG4gICAgeEFsaWduID0gJ3JpZ2h0JztcbiAgfVxuICBpZiAoZG9lc05vdEZpdFdpdGhBbGlnbih4QWxpZ24sIGNoYXJ0LCBvcHRpb25zLCBzaXplKSkge1xuICAgIHhBbGlnbiA9ICdjZW50ZXInO1xuICB9XG4gIHJldHVybiB4QWxpZ247XG59XG5mdW5jdGlvbiBkZXRlcm1pbmVBbGlnbm1lbnQoY2hhcnQsIG9wdGlvbnMsIHNpemUpIHtcbiAgY29uc3QgeUFsaWduID0gc2l6ZS55QWxpZ24gfHwgb3B0aW9ucy55QWxpZ24gfHwgZGV0ZXJtaW5lWUFsaWduKGNoYXJ0LCBzaXplKTtcbiAgcmV0dXJuIHtcbiAgICB4QWxpZ246IHNpemUueEFsaWduIHx8IG9wdGlvbnMueEFsaWduIHx8IGRldGVybWluZVhBbGlnbihjaGFydCwgb3B0aW9ucywgc2l6ZSwgeUFsaWduKSxcbiAgICB5QWxpZ25cbiAgfTtcbn1cbmZ1bmN0aW9uIGFsaWduWChzaXplLCB4QWxpZ24pIHtcbiAgbGV0IHt4LCB3aWR0aH0gPSBzaXplO1xuICBpZiAoeEFsaWduID09PSAncmlnaHQnKSB7XG4gICAgeCAtPSB3aWR0aDtcbiAgfSBlbHNlIGlmICh4QWxpZ24gPT09ICdjZW50ZXInKSB7XG4gICAgeCAtPSAod2lkdGggLyAyKTtcbiAgfVxuICByZXR1cm4geDtcbn1cbmZ1bmN0aW9uIGFsaWduWShzaXplLCB5QWxpZ24sIHBhZGRpbmdBbmRTaXplKSB7XG4gIGxldCB7eSwgaGVpZ2h0fSA9IHNpemU7XG4gIGlmICh5QWxpZ24gPT09ICd0b3AnKSB7XG4gICAgeSArPSBwYWRkaW5nQW5kU2l6ZTtcbiAgfSBlbHNlIGlmICh5QWxpZ24gPT09ICdib3R0b20nKSB7XG4gICAgeSAtPSBoZWlnaHQgKyBwYWRkaW5nQW5kU2l6ZTtcbiAgfSBlbHNlIHtcbiAgICB5IC09IChoZWlnaHQgLyAyKTtcbiAgfVxuICByZXR1cm4geTtcbn1cbmZ1bmN0aW9uIGdldEJhY2tncm91bmRQb2ludChvcHRpb25zLCBzaXplLCBhbGlnbm1lbnQsIGNoYXJ0KSB7XG4gIGNvbnN0IHtjYXJldFNpemUsIGNhcmV0UGFkZGluZywgY29ybmVyUmFkaXVzfSA9IG9wdGlvbnM7XG4gIGNvbnN0IHt4QWxpZ24sIHlBbGlnbn0gPSBhbGlnbm1lbnQ7XG4gIGNvbnN0IHBhZGRpbmdBbmRTaXplID0gY2FyZXRTaXplICsgY2FyZXRQYWRkaW5nO1xuICBjb25zdCB7dG9wTGVmdCwgdG9wUmlnaHQsIGJvdHRvbUxlZnQsIGJvdHRvbVJpZ2h0fSA9IHRvVFJCTENvcm5lcnMoY29ybmVyUmFkaXVzKTtcbiAgbGV0IHggPSBhbGlnblgoc2l6ZSwgeEFsaWduKTtcbiAgY29uc3QgeSA9IGFsaWduWShzaXplLCB5QWxpZ24sIHBhZGRpbmdBbmRTaXplKTtcbiAgaWYgKHlBbGlnbiA9PT0gJ2NlbnRlcicpIHtcbiAgICBpZiAoeEFsaWduID09PSAnbGVmdCcpIHtcbiAgICAgIHggKz0gcGFkZGluZ0FuZFNpemU7XG4gICAgfSBlbHNlIGlmICh4QWxpZ24gPT09ICdyaWdodCcpIHtcbiAgICAgIHggLT0gcGFkZGluZ0FuZFNpemU7XG4gICAgfVxuICB9IGVsc2UgaWYgKHhBbGlnbiA9PT0gJ2xlZnQnKSB7XG4gICAgeCAtPSBNYXRoLm1heCh0b3BMZWZ0LCBib3R0b21MZWZ0KSArIGNhcmV0U2l6ZTtcbiAgfSBlbHNlIGlmICh4QWxpZ24gPT09ICdyaWdodCcpIHtcbiAgICB4ICs9IE1hdGgubWF4KHRvcFJpZ2h0LCBib3R0b21SaWdodCkgKyBjYXJldFNpemU7XG4gIH1cbiAgcmV0dXJuIHtcbiAgICB4OiBfbGltaXRWYWx1ZSh4LCAwLCBjaGFydC53aWR0aCAtIHNpemUud2lkdGgpLFxuICAgIHk6IF9saW1pdFZhbHVlKHksIDAsIGNoYXJ0LmhlaWdodCAtIHNpemUuaGVpZ2h0KVxuICB9O1xufVxuZnVuY3Rpb24gZ2V0QWxpZ25lZFgodG9vbHRpcCwgYWxpZ24sIG9wdGlvbnMpIHtcbiAgY29uc3QgcGFkZGluZyA9IHRvUGFkZGluZyhvcHRpb25zLnBhZGRpbmcpO1xuICByZXR1cm4gYWxpZ24gPT09ICdjZW50ZXInXG4gICAgPyB0b29sdGlwLnggKyB0b29sdGlwLndpZHRoIC8gMlxuICAgIDogYWxpZ24gPT09ICdyaWdodCdcbiAgICAgID8gdG9vbHRpcC54ICsgdG9vbHRpcC53aWR0aCAtIHBhZGRpbmcucmlnaHRcbiAgICAgIDogdG9vbHRpcC54ICsgcGFkZGluZy5sZWZ0O1xufVxuZnVuY3Rpb24gZ2V0QmVmb3JlQWZ0ZXJCb2R5TGluZXMoY2FsbGJhY2spIHtcbiAgcmV0dXJuIHB1c2hPckNvbmNhdChbXSwgc3BsaXROZXdsaW5lcyhjYWxsYmFjaykpO1xufVxuZnVuY3Rpb24gY3JlYXRlVG9vbHRpcENvbnRleHQocGFyZW50LCB0b29sdGlwLCB0b29sdGlwSXRlbXMpIHtcbiAgcmV0dXJuIGNyZWF0ZUNvbnRleHQocGFyZW50LCB7XG4gICAgdG9vbHRpcCxcbiAgICB0b29sdGlwSXRlbXMsXG4gICAgdHlwZTogJ3Rvb2x0aXAnXG4gIH0pO1xufVxuZnVuY3Rpb24gb3ZlcnJpZGVDYWxsYmFja3MoY2FsbGJhY2tzLCBjb250ZXh0KSB7XG4gIGNvbnN0IG92ZXJyaWRlID0gY29udGV4dCAmJiBjb250ZXh0LmRhdGFzZXQgJiYgY29udGV4dC5kYXRhc2V0LnRvb2x0aXAgJiYgY29udGV4dC5kYXRhc2V0LnRvb2x0aXAuY2FsbGJhY2tzO1xuICByZXR1cm4gb3ZlcnJpZGUgPyBjYWxsYmFja3Mub3ZlcnJpZGUob3ZlcnJpZGUpIDogY2FsbGJhY2tzO1xufVxuY2xhc3MgVG9vbHRpcCBleHRlbmRzIEVsZW1lbnQge1xuICBjb25zdHJ1Y3Rvcihjb25maWcpIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMub3BhY2l0eSA9IDA7XG4gICAgdGhpcy5fYWN0aXZlID0gW107XG4gICAgdGhpcy5fZXZlbnRQb3NpdGlvbiA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLl9zaXplID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuX2NhY2hlZEFuaW1hdGlvbnMgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5fdG9vbHRpcEl0ZW1zID0gW107XG4gICAgdGhpcy4kYW5pbWF0aW9ucyA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLiRjb250ZXh0ID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuY2hhcnQgPSBjb25maWcuY2hhcnQgfHwgY29uZmlnLl9jaGFydDtcbiAgICB0aGlzLl9jaGFydCA9IHRoaXMuY2hhcnQ7XG4gICAgdGhpcy5vcHRpb25zID0gY29uZmlnLm9wdGlvbnM7XG4gICAgdGhpcy5kYXRhUG9pbnRzID0gdW5kZWZpbmVkO1xuICAgIHRoaXMudGl0bGUgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5iZWZvcmVCb2R5ID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuYm9keSA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLmFmdGVyQm9keSA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLmZvb3RlciA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLnhBbGlnbiA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLnlBbGlnbiA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLnggPSB1bmRlZmluZWQ7XG4gICAgdGhpcy55ID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuaGVpZ2h0ID0gdW5kZWZpbmVkO1xuICAgIHRoaXMud2lkdGggPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5jYXJldFggPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5jYXJldFkgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5sYWJlbENvbG9ycyA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLmxhYmVsUG9pbnRTdHlsZXMgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5sYWJlbFRleHRDb2xvcnMgPSB1bmRlZmluZWQ7XG4gIH1cbiAgaW5pdGlhbGl6ZShvcHRpb25zKSB7XG4gICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICB0aGlzLl9jYWNoZWRBbmltYXRpb25zID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuJGNvbnRleHQgPSB1bmRlZmluZWQ7XG4gIH1cbiAgX3Jlc29sdmVBbmltYXRpb25zKCkge1xuICAgIGNvbnN0IGNhY2hlZCA9IHRoaXMuX2NhY2hlZEFuaW1hdGlvbnM7XG4gICAgaWYgKGNhY2hlZCkge1xuICAgICAgcmV0dXJuIGNhY2hlZDtcbiAgICB9XG4gICAgY29uc3QgY2hhcnQgPSB0aGlzLmNoYXJ0O1xuICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLm9wdGlvbnMuc2V0Q29udGV4dCh0aGlzLmdldENvbnRleHQoKSk7XG4gICAgY29uc3Qgb3B0cyA9IG9wdGlvbnMuZW5hYmxlZCAmJiBjaGFydC5vcHRpb25zLmFuaW1hdGlvbiAmJiBvcHRpb25zLmFuaW1hdGlvbnM7XG4gICAgY29uc3QgYW5pbWF0aW9ucyA9IG5ldyBBbmltYXRpb25zKHRoaXMuY2hhcnQsIG9wdHMpO1xuICAgIGlmIChvcHRzLl9jYWNoZWFibGUpIHtcbiAgICAgIHRoaXMuX2NhY2hlZEFuaW1hdGlvbnMgPSBPYmplY3QuZnJlZXplKGFuaW1hdGlvbnMpO1xuICAgIH1cbiAgICByZXR1cm4gYW5pbWF0aW9ucztcbiAgfVxuICBnZXRDb250ZXh0KCkge1xuICAgIHJldHVybiB0aGlzLiRjb250ZXh0IHx8XG5cdFx0XHQodGhpcy4kY29udGV4dCA9IGNyZWF0ZVRvb2x0aXBDb250ZXh0KHRoaXMuY2hhcnQuZ2V0Q29udGV4dCgpLCB0aGlzLCB0aGlzLl90b29sdGlwSXRlbXMpKTtcbiAgfVxuICBnZXRUaXRsZShjb250ZXh0LCBvcHRpb25zKSB7XG4gICAgY29uc3Qge2NhbGxiYWNrc30gPSBvcHRpb25zO1xuICAgIGNvbnN0IGJlZm9yZVRpdGxlID0gY2FsbGJhY2tzLmJlZm9yZVRpdGxlLmFwcGx5KHRoaXMsIFtjb250ZXh0XSk7XG4gICAgY29uc3QgdGl0bGUgPSBjYWxsYmFja3MudGl0bGUuYXBwbHkodGhpcywgW2NvbnRleHRdKTtcbiAgICBjb25zdCBhZnRlclRpdGxlID0gY2FsbGJhY2tzLmFmdGVyVGl0bGUuYXBwbHkodGhpcywgW2NvbnRleHRdKTtcbiAgICBsZXQgbGluZXMgPSBbXTtcbiAgICBsaW5lcyA9IHB1c2hPckNvbmNhdChsaW5lcywgc3BsaXROZXdsaW5lcyhiZWZvcmVUaXRsZSkpO1xuICAgIGxpbmVzID0gcHVzaE9yQ29uY2F0KGxpbmVzLCBzcGxpdE5ld2xpbmVzKHRpdGxlKSk7XG4gICAgbGluZXMgPSBwdXNoT3JDb25jYXQobGluZXMsIHNwbGl0TmV3bGluZXMoYWZ0ZXJUaXRsZSkpO1xuICAgIHJldHVybiBsaW5lcztcbiAgfVxuICBnZXRCZWZvcmVCb2R5KHRvb2x0aXBJdGVtcywgb3B0aW9ucykge1xuICAgIHJldHVybiBnZXRCZWZvcmVBZnRlckJvZHlMaW5lcyhvcHRpb25zLmNhbGxiYWNrcy5iZWZvcmVCb2R5LmFwcGx5KHRoaXMsIFt0b29sdGlwSXRlbXNdKSk7XG4gIH1cbiAgZ2V0Qm9keSh0b29sdGlwSXRlbXMsIG9wdGlvbnMpIHtcbiAgICBjb25zdCB7Y2FsbGJhY2tzfSA9IG9wdGlvbnM7XG4gICAgY29uc3QgYm9keUl0ZW1zID0gW107XG4gICAgZWFjaCh0b29sdGlwSXRlbXMsIChjb250ZXh0KSA9PiB7XG4gICAgICBjb25zdCBib2R5SXRlbSA9IHtcbiAgICAgICAgYmVmb3JlOiBbXSxcbiAgICAgICAgbGluZXM6IFtdLFxuICAgICAgICBhZnRlcjogW11cbiAgICAgIH07XG4gICAgICBjb25zdCBzY29wZWQgPSBvdmVycmlkZUNhbGxiYWNrcyhjYWxsYmFja3MsIGNvbnRleHQpO1xuICAgICAgcHVzaE9yQ29uY2F0KGJvZHlJdGVtLmJlZm9yZSwgc3BsaXROZXdsaW5lcyhzY29wZWQuYmVmb3JlTGFiZWwuY2FsbCh0aGlzLCBjb250ZXh0KSkpO1xuICAgICAgcHVzaE9yQ29uY2F0KGJvZHlJdGVtLmxpbmVzLCBzY29wZWQubGFiZWwuY2FsbCh0aGlzLCBjb250ZXh0KSk7XG4gICAgICBwdXNoT3JDb25jYXQoYm9keUl0ZW0uYWZ0ZXIsIHNwbGl0TmV3bGluZXMoc2NvcGVkLmFmdGVyTGFiZWwuY2FsbCh0aGlzLCBjb250ZXh0KSkpO1xuICAgICAgYm9keUl0ZW1zLnB1c2goYm9keUl0ZW0pO1xuICAgIH0pO1xuICAgIHJldHVybiBib2R5SXRlbXM7XG4gIH1cbiAgZ2V0QWZ0ZXJCb2R5KHRvb2x0aXBJdGVtcywgb3B0aW9ucykge1xuICAgIHJldHVybiBnZXRCZWZvcmVBZnRlckJvZHlMaW5lcyhvcHRpb25zLmNhbGxiYWNrcy5hZnRlckJvZHkuYXBwbHkodGhpcywgW3Rvb2x0aXBJdGVtc10pKTtcbiAgfVxuICBnZXRGb290ZXIodG9vbHRpcEl0ZW1zLCBvcHRpb25zKSB7XG4gICAgY29uc3Qge2NhbGxiYWNrc30gPSBvcHRpb25zO1xuICAgIGNvbnN0IGJlZm9yZUZvb3RlciA9IGNhbGxiYWNrcy5iZWZvcmVGb290ZXIuYXBwbHkodGhpcywgW3Rvb2x0aXBJdGVtc10pO1xuICAgIGNvbnN0IGZvb3RlciA9IGNhbGxiYWNrcy5mb290ZXIuYXBwbHkodGhpcywgW3Rvb2x0aXBJdGVtc10pO1xuICAgIGNvbnN0IGFmdGVyRm9vdGVyID0gY2FsbGJhY2tzLmFmdGVyRm9vdGVyLmFwcGx5KHRoaXMsIFt0b29sdGlwSXRlbXNdKTtcbiAgICBsZXQgbGluZXMgPSBbXTtcbiAgICBsaW5lcyA9IHB1c2hPckNvbmNhdChsaW5lcywgc3BsaXROZXdsaW5lcyhiZWZvcmVGb290ZXIpKTtcbiAgICBsaW5lcyA9IHB1c2hPckNvbmNhdChsaW5lcywgc3BsaXROZXdsaW5lcyhmb290ZXIpKTtcbiAgICBsaW5lcyA9IHB1c2hPckNvbmNhdChsaW5lcywgc3BsaXROZXdsaW5lcyhhZnRlckZvb3RlcikpO1xuICAgIHJldHVybiBsaW5lcztcbiAgfVxuICBfY3JlYXRlSXRlbXMob3B0aW9ucykge1xuICAgIGNvbnN0IGFjdGl2ZSA9IHRoaXMuX2FjdGl2ZTtcbiAgICBjb25zdCBkYXRhID0gdGhpcy5jaGFydC5kYXRhO1xuICAgIGNvbnN0IGxhYmVsQ29sb3JzID0gW107XG4gICAgY29uc3QgbGFiZWxQb2ludFN0eWxlcyA9IFtdO1xuICAgIGNvbnN0IGxhYmVsVGV4dENvbG9ycyA9IFtdO1xuICAgIGxldCB0b29sdGlwSXRlbXMgPSBbXTtcbiAgICBsZXQgaSwgbGVuO1xuICAgIGZvciAoaSA9IDAsIGxlbiA9IGFjdGl2ZS5sZW5ndGg7IGkgPCBsZW47ICsraSkge1xuICAgICAgdG9vbHRpcEl0ZW1zLnB1c2goY3JlYXRlVG9vbHRpcEl0ZW0odGhpcy5jaGFydCwgYWN0aXZlW2ldKSk7XG4gICAgfVxuICAgIGlmIChvcHRpb25zLmZpbHRlcikge1xuICAgICAgdG9vbHRpcEl0ZW1zID0gdG9vbHRpcEl0ZW1zLmZpbHRlcigoZWxlbWVudCwgaW5kZXgsIGFycmF5KSA9PiBvcHRpb25zLmZpbHRlcihlbGVtZW50LCBpbmRleCwgYXJyYXksIGRhdGEpKTtcbiAgICB9XG4gICAgaWYgKG9wdGlvbnMuaXRlbVNvcnQpIHtcbiAgICAgIHRvb2x0aXBJdGVtcyA9IHRvb2x0aXBJdGVtcy5zb3J0KChhLCBiKSA9PiBvcHRpb25zLml0ZW1Tb3J0KGEsIGIsIGRhdGEpKTtcbiAgICB9XG4gICAgZWFjaCh0b29sdGlwSXRlbXMsIChjb250ZXh0KSA9PiB7XG4gICAgICBjb25zdCBzY29wZWQgPSBvdmVycmlkZUNhbGxiYWNrcyhvcHRpb25zLmNhbGxiYWNrcywgY29udGV4dCk7XG4gICAgICBsYWJlbENvbG9ycy5wdXNoKHNjb3BlZC5sYWJlbENvbG9yLmNhbGwodGhpcywgY29udGV4dCkpO1xuICAgICAgbGFiZWxQb2ludFN0eWxlcy5wdXNoKHNjb3BlZC5sYWJlbFBvaW50U3R5bGUuY2FsbCh0aGlzLCBjb250ZXh0KSk7XG4gICAgICBsYWJlbFRleHRDb2xvcnMucHVzaChzY29wZWQubGFiZWxUZXh0Q29sb3IuY2FsbCh0aGlzLCBjb250ZXh0KSk7XG4gICAgfSk7XG4gICAgdGhpcy5sYWJlbENvbG9ycyA9IGxhYmVsQ29sb3JzO1xuICAgIHRoaXMubGFiZWxQb2ludFN0eWxlcyA9IGxhYmVsUG9pbnRTdHlsZXM7XG4gICAgdGhpcy5sYWJlbFRleHRDb2xvcnMgPSBsYWJlbFRleHRDb2xvcnM7XG4gICAgdGhpcy5kYXRhUG9pbnRzID0gdG9vbHRpcEl0ZW1zO1xuICAgIHJldHVybiB0b29sdGlwSXRlbXM7XG4gIH1cbiAgdXBkYXRlKGNoYW5nZWQsIHJlcGxheSkge1xuICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLm9wdGlvbnMuc2V0Q29udGV4dCh0aGlzLmdldENvbnRleHQoKSk7XG4gICAgY29uc3QgYWN0aXZlID0gdGhpcy5fYWN0aXZlO1xuICAgIGxldCBwcm9wZXJ0aWVzO1xuICAgIGxldCB0b29sdGlwSXRlbXMgPSBbXTtcbiAgICBpZiAoIWFjdGl2ZS5sZW5ndGgpIHtcbiAgICAgIGlmICh0aGlzLm9wYWNpdHkgIT09IDApIHtcbiAgICAgICAgcHJvcGVydGllcyA9IHtcbiAgICAgICAgICBvcGFjaXR5OiAwXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IHBvc2l0aW9uID0gcG9zaXRpb25lcnNbb3B0aW9ucy5wb3NpdGlvbl0uY2FsbCh0aGlzLCBhY3RpdmUsIHRoaXMuX2V2ZW50UG9zaXRpb24pO1xuICAgICAgdG9vbHRpcEl0ZW1zID0gdGhpcy5fY3JlYXRlSXRlbXMob3B0aW9ucyk7XG4gICAgICB0aGlzLnRpdGxlID0gdGhpcy5nZXRUaXRsZSh0b29sdGlwSXRlbXMsIG9wdGlvbnMpO1xuICAgICAgdGhpcy5iZWZvcmVCb2R5ID0gdGhpcy5nZXRCZWZvcmVCb2R5KHRvb2x0aXBJdGVtcywgb3B0aW9ucyk7XG4gICAgICB0aGlzLmJvZHkgPSB0aGlzLmdldEJvZHkodG9vbHRpcEl0ZW1zLCBvcHRpb25zKTtcbiAgICAgIHRoaXMuYWZ0ZXJCb2R5ID0gdGhpcy5nZXRBZnRlckJvZHkodG9vbHRpcEl0ZW1zLCBvcHRpb25zKTtcbiAgICAgIHRoaXMuZm9vdGVyID0gdGhpcy5nZXRGb290ZXIodG9vbHRpcEl0ZW1zLCBvcHRpb25zKTtcbiAgICAgIGNvbnN0IHNpemUgPSB0aGlzLl9zaXplID0gZ2V0VG9vbHRpcFNpemUodGhpcywgb3B0aW9ucyk7XG4gICAgICBjb25zdCBwb3NpdGlvbkFuZFNpemUgPSBPYmplY3QuYXNzaWduKHt9LCBwb3NpdGlvbiwgc2l6ZSk7XG4gICAgICBjb25zdCBhbGlnbm1lbnQgPSBkZXRlcm1pbmVBbGlnbm1lbnQodGhpcy5jaGFydCwgb3B0aW9ucywgcG9zaXRpb25BbmRTaXplKTtcbiAgICAgIGNvbnN0IGJhY2tncm91bmRQb2ludCA9IGdldEJhY2tncm91bmRQb2ludChvcHRpb25zLCBwb3NpdGlvbkFuZFNpemUsIGFsaWdubWVudCwgdGhpcy5jaGFydCk7XG4gICAgICB0aGlzLnhBbGlnbiA9IGFsaWdubWVudC54QWxpZ247XG4gICAgICB0aGlzLnlBbGlnbiA9IGFsaWdubWVudC55QWxpZ247XG4gICAgICBwcm9wZXJ0aWVzID0ge1xuICAgICAgICBvcGFjaXR5OiAxLFxuICAgICAgICB4OiBiYWNrZ3JvdW5kUG9pbnQueCxcbiAgICAgICAgeTogYmFja2dyb3VuZFBvaW50LnksXG4gICAgICAgIHdpZHRoOiBzaXplLndpZHRoLFxuICAgICAgICBoZWlnaHQ6IHNpemUuaGVpZ2h0LFxuICAgICAgICBjYXJldFg6IHBvc2l0aW9uLngsXG4gICAgICAgIGNhcmV0WTogcG9zaXRpb24ueVxuICAgICAgfTtcbiAgICB9XG4gICAgdGhpcy5fdG9vbHRpcEl0ZW1zID0gdG9vbHRpcEl0ZW1zO1xuICAgIHRoaXMuJGNvbnRleHQgPSB1bmRlZmluZWQ7XG4gICAgaWYgKHByb3BlcnRpZXMpIHtcbiAgICAgIHRoaXMuX3Jlc29sdmVBbmltYXRpb25zKCkudXBkYXRlKHRoaXMsIHByb3BlcnRpZXMpO1xuICAgIH1cbiAgICBpZiAoY2hhbmdlZCAmJiBvcHRpb25zLmV4dGVybmFsKSB7XG4gICAgICBvcHRpb25zLmV4dGVybmFsLmNhbGwodGhpcywge2NoYXJ0OiB0aGlzLmNoYXJ0LCB0b29sdGlwOiB0aGlzLCByZXBsYXl9KTtcbiAgICB9XG4gIH1cbiAgZHJhd0NhcmV0KHRvb2x0aXBQb2ludCwgY3R4LCBzaXplLCBvcHRpb25zKSB7XG4gICAgY29uc3QgY2FyZXRQb3NpdGlvbiA9IHRoaXMuZ2V0Q2FyZXRQb3NpdGlvbih0b29sdGlwUG9pbnQsIHNpemUsIG9wdGlvbnMpO1xuICAgIGN0eC5saW5lVG8oY2FyZXRQb3NpdGlvbi54MSwgY2FyZXRQb3NpdGlvbi55MSk7XG4gICAgY3R4LmxpbmVUbyhjYXJldFBvc2l0aW9uLngyLCBjYXJldFBvc2l0aW9uLnkyKTtcbiAgICBjdHgubGluZVRvKGNhcmV0UG9zaXRpb24ueDMsIGNhcmV0UG9zaXRpb24ueTMpO1xuICB9XG4gIGdldENhcmV0UG9zaXRpb24odG9vbHRpcFBvaW50LCBzaXplLCBvcHRpb25zKSB7XG4gICAgY29uc3Qge3hBbGlnbiwgeUFsaWdufSA9IHRoaXM7XG4gICAgY29uc3Qge2NhcmV0U2l6ZSwgY29ybmVyUmFkaXVzfSA9IG9wdGlvbnM7XG4gICAgY29uc3Qge3RvcExlZnQsIHRvcFJpZ2h0LCBib3R0b21MZWZ0LCBib3R0b21SaWdodH0gPSB0b1RSQkxDb3JuZXJzKGNvcm5lclJhZGl1cyk7XG4gICAgY29uc3Qge3g6IHB0WCwgeTogcHRZfSA9IHRvb2x0aXBQb2ludDtcbiAgICBjb25zdCB7d2lkdGgsIGhlaWdodH0gPSBzaXplO1xuICAgIGxldCB4MSwgeDIsIHgzLCB5MSwgeTIsIHkzO1xuICAgIGlmICh5QWxpZ24gPT09ICdjZW50ZXInKSB7XG4gICAgICB5MiA9IHB0WSArIChoZWlnaHQgLyAyKTtcbiAgICAgIGlmICh4QWxpZ24gPT09ICdsZWZ0Jykge1xuICAgICAgICB4MSA9IHB0WDtcbiAgICAgICAgeDIgPSB4MSAtIGNhcmV0U2l6ZTtcbiAgICAgICAgeTEgPSB5MiArIGNhcmV0U2l6ZTtcbiAgICAgICAgeTMgPSB5MiAtIGNhcmV0U2l6ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHgxID0gcHRYICsgd2lkdGg7XG4gICAgICAgIHgyID0geDEgKyBjYXJldFNpemU7XG4gICAgICAgIHkxID0geTIgLSBjYXJldFNpemU7XG4gICAgICAgIHkzID0geTIgKyBjYXJldFNpemU7XG4gICAgICB9XG4gICAgICB4MyA9IHgxO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoeEFsaWduID09PSAnbGVmdCcpIHtcbiAgICAgICAgeDIgPSBwdFggKyBNYXRoLm1heCh0b3BMZWZ0LCBib3R0b21MZWZ0KSArIChjYXJldFNpemUpO1xuICAgICAgfSBlbHNlIGlmICh4QWxpZ24gPT09ICdyaWdodCcpIHtcbiAgICAgICAgeDIgPSBwdFggKyB3aWR0aCAtIE1hdGgubWF4KHRvcFJpZ2h0LCBib3R0b21SaWdodCkgLSBjYXJldFNpemU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB4MiA9IHRoaXMuY2FyZXRYO1xuICAgICAgfVxuICAgICAgaWYgKHlBbGlnbiA9PT0gJ3RvcCcpIHtcbiAgICAgICAgeTEgPSBwdFk7XG4gICAgICAgIHkyID0geTEgLSBjYXJldFNpemU7XG4gICAgICAgIHgxID0geDIgLSBjYXJldFNpemU7XG4gICAgICAgIHgzID0geDIgKyBjYXJldFNpemU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB5MSA9IHB0WSArIGhlaWdodDtcbiAgICAgICAgeTIgPSB5MSArIGNhcmV0U2l6ZTtcbiAgICAgICAgeDEgPSB4MiArIGNhcmV0U2l6ZTtcbiAgICAgICAgeDMgPSB4MiAtIGNhcmV0U2l6ZTtcbiAgICAgIH1cbiAgICAgIHkzID0geTE7XG4gICAgfVxuICAgIHJldHVybiB7eDEsIHgyLCB4MywgeTEsIHkyLCB5M307XG4gIH1cbiAgZHJhd1RpdGxlKHB0LCBjdHgsIG9wdGlvbnMpIHtcbiAgICBjb25zdCB0aXRsZSA9IHRoaXMudGl0bGU7XG4gICAgY29uc3QgbGVuZ3RoID0gdGl0bGUubGVuZ3RoO1xuICAgIGxldCB0aXRsZUZvbnQsIHRpdGxlU3BhY2luZywgaTtcbiAgICBpZiAobGVuZ3RoKSB7XG4gICAgICBjb25zdCBydGxIZWxwZXIgPSBnZXRSdGxBZGFwdGVyKG9wdGlvbnMucnRsLCB0aGlzLngsIHRoaXMud2lkdGgpO1xuICAgICAgcHQueCA9IGdldEFsaWduZWRYKHRoaXMsIG9wdGlvbnMudGl0bGVBbGlnbiwgb3B0aW9ucyk7XG4gICAgICBjdHgudGV4dEFsaWduID0gcnRsSGVscGVyLnRleHRBbGlnbihvcHRpb25zLnRpdGxlQWxpZ24pO1xuICAgICAgY3R4LnRleHRCYXNlbGluZSA9ICdtaWRkbGUnO1xuICAgICAgdGl0bGVGb250ID0gdG9Gb250KG9wdGlvbnMudGl0bGVGb250KTtcbiAgICAgIHRpdGxlU3BhY2luZyA9IG9wdGlvbnMudGl0bGVTcGFjaW5nO1xuICAgICAgY3R4LmZpbGxTdHlsZSA9IG9wdGlvbnMudGl0bGVDb2xvcjtcbiAgICAgIGN0eC5mb250ID0gdGl0bGVGb250LnN0cmluZztcbiAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW5ndGg7ICsraSkge1xuICAgICAgICBjdHguZmlsbFRleHQodGl0bGVbaV0sIHJ0bEhlbHBlci54KHB0LngpLCBwdC55ICsgdGl0bGVGb250LmxpbmVIZWlnaHQgLyAyKTtcbiAgICAgICAgcHQueSArPSB0aXRsZUZvbnQubGluZUhlaWdodCArIHRpdGxlU3BhY2luZztcbiAgICAgICAgaWYgKGkgKyAxID09PSBsZW5ndGgpIHtcbiAgICAgICAgICBwdC55ICs9IG9wdGlvbnMudGl0bGVNYXJnaW5Cb3R0b20gLSB0aXRsZVNwYWNpbmc7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgX2RyYXdDb2xvckJveChjdHgsIHB0LCBpLCBydGxIZWxwZXIsIG9wdGlvbnMpIHtcbiAgICBjb25zdCBsYWJlbENvbG9ycyA9IHRoaXMubGFiZWxDb2xvcnNbaV07XG4gICAgY29uc3QgbGFiZWxQb2ludFN0eWxlID0gdGhpcy5sYWJlbFBvaW50U3R5bGVzW2ldO1xuICAgIGNvbnN0IHtib3hIZWlnaHQsIGJveFdpZHRoLCBib3hQYWRkaW5nfSA9IG9wdGlvbnM7XG4gICAgY29uc3QgYm9keUZvbnQgPSB0b0ZvbnQob3B0aW9ucy5ib2R5Rm9udCk7XG4gICAgY29uc3QgY29sb3JYID0gZ2V0QWxpZ25lZFgodGhpcywgJ2xlZnQnLCBvcHRpb25zKTtcbiAgICBjb25zdCBydGxDb2xvclggPSBydGxIZWxwZXIueChjb2xvclgpO1xuICAgIGNvbnN0IHlPZmZTZXQgPSBib3hIZWlnaHQgPCBib2R5Rm9udC5saW5lSGVpZ2h0ID8gKGJvZHlGb250LmxpbmVIZWlnaHQgLSBib3hIZWlnaHQpIC8gMiA6IDA7XG4gICAgY29uc3QgY29sb3JZID0gcHQueSArIHlPZmZTZXQ7XG4gICAgaWYgKG9wdGlvbnMudXNlUG9pbnRTdHlsZSkge1xuICAgICAgY29uc3QgZHJhd09wdGlvbnMgPSB7XG4gICAgICAgIHJhZGl1czogTWF0aC5taW4oYm94V2lkdGgsIGJveEhlaWdodCkgLyAyLFxuICAgICAgICBwb2ludFN0eWxlOiBsYWJlbFBvaW50U3R5bGUucG9pbnRTdHlsZSxcbiAgICAgICAgcm90YXRpb246IGxhYmVsUG9pbnRTdHlsZS5yb3RhdGlvbixcbiAgICAgICAgYm9yZGVyV2lkdGg6IDFcbiAgICAgIH07XG4gICAgICBjb25zdCBjZW50ZXJYID0gcnRsSGVscGVyLmxlZnRGb3JMdHIocnRsQ29sb3JYLCBib3hXaWR0aCkgKyBib3hXaWR0aCAvIDI7XG4gICAgICBjb25zdCBjZW50ZXJZID0gY29sb3JZICsgYm94SGVpZ2h0IC8gMjtcbiAgICAgIGN0eC5zdHJva2VTdHlsZSA9IG9wdGlvbnMubXVsdGlLZXlCYWNrZ3JvdW5kO1xuICAgICAgY3R4LmZpbGxTdHlsZSA9IG9wdGlvbnMubXVsdGlLZXlCYWNrZ3JvdW5kO1xuICAgICAgZHJhd1BvaW50KGN0eCwgZHJhd09wdGlvbnMsIGNlbnRlclgsIGNlbnRlclkpO1xuICAgICAgY3R4LnN0cm9rZVN0eWxlID0gbGFiZWxDb2xvcnMuYm9yZGVyQ29sb3I7XG4gICAgICBjdHguZmlsbFN0eWxlID0gbGFiZWxDb2xvcnMuYmFja2dyb3VuZENvbG9yO1xuICAgICAgZHJhd1BvaW50KGN0eCwgZHJhd09wdGlvbnMsIGNlbnRlclgsIGNlbnRlclkpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjdHgubGluZVdpZHRoID0gbGFiZWxDb2xvcnMuYm9yZGVyV2lkdGggfHwgMTtcbiAgICAgIGN0eC5zdHJva2VTdHlsZSA9IGxhYmVsQ29sb3JzLmJvcmRlckNvbG9yO1xuICAgICAgY3R4LnNldExpbmVEYXNoKGxhYmVsQ29sb3JzLmJvcmRlckRhc2ggfHwgW10pO1xuICAgICAgY3R4LmxpbmVEYXNoT2Zmc2V0ID0gbGFiZWxDb2xvcnMuYm9yZGVyRGFzaE9mZnNldCB8fCAwO1xuICAgICAgY29uc3Qgb3V0ZXJYID0gcnRsSGVscGVyLmxlZnRGb3JMdHIocnRsQ29sb3JYLCBib3hXaWR0aCAtIGJveFBhZGRpbmcpO1xuICAgICAgY29uc3QgaW5uZXJYID0gcnRsSGVscGVyLmxlZnRGb3JMdHIocnRsSGVscGVyLnhQbHVzKHJ0bENvbG9yWCwgMSksIGJveFdpZHRoIC0gYm94UGFkZGluZyAtIDIpO1xuICAgICAgY29uc3QgYm9yZGVyUmFkaXVzID0gdG9UUkJMQ29ybmVycyhsYWJlbENvbG9ycy5ib3JkZXJSYWRpdXMpO1xuICAgICAgaWYgKE9iamVjdC52YWx1ZXMoYm9yZGVyUmFkaXVzKS5zb21lKHYgPT4gdiAhPT0gMCkpIHtcbiAgICAgICAgY3R4LmJlZ2luUGF0aCgpO1xuICAgICAgICBjdHguZmlsbFN0eWxlID0gb3B0aW9ucy5tdWx0aUtleUJhY2tncm91bmQ7XG4gICAgICAgIGFkZFJvdW5kZWRSZWN0UGF0aChjdHgsIHtcbiAgICAgICAgICB4OiBvdXRlclgsXG4gICAgICAgICAgeTogY29sb3JZLFxuICAgICAgICAgIHc6IGJveFdpZHRoLFxuICAgICAgICAgIGg6IGJveEhlaWdodCxcbiAgICAgICAgICByYWRpdXM6IGJvcmRlclJhZGl1cyxcbiAgICAgICAgfSk7XG4gICAgICAgIGN0eC5maWxsKCk7XG4gICAgICAgIGN0eC5zdHJva2UoKTtcbiAgICAgICAgY3R4LmZpbGxTdHlsZSA9IGxhYmVsQ29sb3JzLmJhY2tncm91bmRDb2xvcjtcbiAgICAgICAgY3R4LmJlZ2luUGF0aCgpO1xuICAgICAgICBhZGRSb3VuZGVkUmVjdFBhdGgoY3R4LCB7XG4gICAgICAgICAgeDogaW5uZXJYLFxuICAgICAgICAgIHk6IGNvbG9yWSArIDEsXG4gICAgICAgICAgdzogYm94V2lkdGggLSAyLFxuICAgICAgICAgIGg6IGJveEhlaWdodCAtIDIsXG4gICAgICAgICAgcmFkaXVzOiBib3JkZXJSYWRpdXMsXG4gICAgICAgIH0pO1xuICAgICAgICBjdHguZmlsbCgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY3R4LmZpbGxTdHlsZSA9IG9wdGlvbnMubXVsdGlLZXlCYWNrZ3JvdW5kO1xuICAgICAgICBjdHguZmlsbFJlY3Qob3V0ZXJYLCBjb2xvclksIGJveFdpZHRoLCBib3hIZWlnaHQpO1xuICAgICAgICBjdHguc3Ryb2tlUmVjdChvdXRlclgsIGNvbG9yWSwgYm94V2lkdGgsIGJveEhlaWdodCk7XG4gICAgICAgIGN0eC5maWxsU3R5bGUgPSBsYWJlbENvbG9ycy5iYWNrZ3JvdW5kQ29sb3I7XG4gICAgICAgIGN0eC5maWxsUmVjdChpbm5lclgsIGNvbG9yWSArIDEsIGJveFdpZHRoIC0gMiwgYm94SGVpZ2h0IC0gMik7XG4gICAgICB9XG4gICAgfVxuICAgIGN0eC5maWxsU3R5bGUgPSB0aGlzLmxhYmVsVGV4dENvbG9yc1tpXTtcbiAgfVxuICBkcmF3Qm9keShwdCwgY3R4LCBvcHRpb25zKSB7XG4gICAgY29uc3Qge2JvZHl9ID0gdGhpcztcbiAgICBjb25zdCB7Ym9keVNwYWNpbmcsIGJvZHlBbGlnbiwgZGlzcGxheUNvbG9ycywgYm94SGVpZ2h0LCBib3hXaWR0aCwgYm94UGFkZGluZ30gPSBvcHRpb25zO1xuICAgIGNvbnN0IGJvZHlGb250ID0gdG9Gb250KG9wdGlvbnMuYm9keUZvbnQpO1xuICAgIGxldCBib2R5TGluZUhlaWdodCA9IGJvZHlGb250LmxpbmVIZWlnaHQ7XG4gICAgbGV0IHhMaW5lUGFkZGluZyA9IDA7XG4gICAgY29uc3QgcnRsSGVscGVyID0gZ2V0UnRsQWRhcHRlcihvcHRpb25zLnJ0bCwgdGhpcy54LCB0aGlzLndpZHRoKTtcbiAgICBjb25zdCBmaWxsTGluZU9mVGV4dCA9IGZ1bmN0aW9uKGxpbmUpIHtcbiAgICAgIGN0eC5maWxsVGV4dChsaW5lLCBydGxIZWxwZXIueChwdC54ICsgeExpbmVQYWRkaW5nKSwgcHQueSArIGJvZHlMaW5lSGVpZ2h0IC8gMik7XG4gICAgICBwdC55ICs9IGJvZHlMaW5lSGVpZ2h0ICsgYm9keVNwYWNpbmc7XG4gICAgfTtcbiAgICBjb25zdCBib2R5QWxpZ25Gb3JDYWxjdWxhdGlvbiA9IHJ0bEhlbHBlci50ZXh0QWxpZ24oYm9keUFsaWduKTtcbiAgICBsZXQgYm9keUl0ZW0sIHRleHRDb2xvciwgbGluZXMsIGksIGosIGlsZW4sIGpsZW47XG4gICAgY3R4LnRleHRBbGlnbiA9IGJvZHlBbGlnbjtcbiAgICBjdHgudGV4dEJhc2VsaW5lID0gJ21pZGRsZSc7XG4gICAgY3R4LmZvbnQgPSBib2R5Rm9udC5zdHJpbmc7XG4gICAgcHQueCA9IGdldEFsaWduZWRYKHRoaXMsIGJvZHlBbGlnbkZvckNhbGN1bGF0aW9uLCBvcHRpb25zKTtcbiAgICBjdHguZmlsbFN0eWxlID0gb3B0aW9ucy5ib2R5Q29sb3I7XG4gICAgZWFjaCh0aGlzLmJlZm9yZUJvZHksIGZpbGxMaW5lT2ZUZXh0KTtcbiAgICB4TGluZVBhZGRpbmcgPSBkaXNwbGF5Q29sb3JzICYmIGJvZHlBbGlnbkZvckNhbGN1bGF0aW9uICE9PSAncmlnaHQnXG4gICAgICA/IGJvZHlBbGlnbiA9PT0gJ2NlbnRlcicgPyAoYm94V2lkdGggLyAyICsgYm94UGFkZGluZykgOiAoYm94V2lkdGggKyAyICsgYm94UGFkZGluZylcbiAgICAgIDogMDtcbiAgICBmb3IgKGkgPSAwLCBpbGVuID0gYm9keS5sZW5ndGg7IGkgPCBpbGVuOyArK2kpIHtcbiAgICAgIGJvZHlJdGVtID0gYm9keVtpXTtcbiAgICAgIHRleHRDb2xvciA9IHRoaXMubGFiZWxUZXh0Q29sb3JzW2ldO1xuICAgICAgY3R4LmZpbGxTdHlsZSA9IHRleHRDb2xvcjtcbiAgICAgIGVhY2goYm9keUl0ZW0uYmVmb3JlLCBmaWxsTGluZU9mVGV4dCk7XG4gICAgICBsaW5lcyA9IGJvZHlJdGVtLmxpbmVzO1xuICAgICAgaWYgKGRpc3BsYXlDb2xvcnMgJiYgbGluZXMubGVuZ3RoKSB7XG4gICAgICAgIHRoaXMuX2RyYXdDb2xvckJveChjdHgsIHB0LCBpLCBydGxIZWxwZXIsIG9wdGlvbnMpO1xuICAgICAgICBib2R5TGluZUhlaWdodCA9IE1hdGgubWF4KGJvZHlGb250LmxpbmVIZWlnaHQsIGJveEhlaWdodCk7XG4gICAgICB9XG4gICAgICBmb3IgKGogPSAwLCBqbGVuID0gbGluZXMubGVuZ3RoOyBqIDwgamxlbjsgKytqKSB7XG4gICAgICAgIGZpbGxMaW5lT2ZUZXh0KGxpbmVzW2pdKTtcbiAgICAgICAgYm9keUxpbmVIZWlnaHQgPSBib2R5Rm9udC5saW5lSGVpZ2h0O1xuICAgICAgfVxuICAgICAgZWFjaChib2R5SXRlbS5hZnRlciwgZmlsbExpbmVPZlRleHQpO1xuICAgIH1cbiAgICB4TGluZVBhZGRpbmcgPSAwO1xuICAgIGJvZHlMaW5lSGVpZ2h0ID0gYm9keUZvbnQubGluZUhlaWdodDtcbiAgICBlYWNoKHRoaXMuYWZ0ZXJCb2R5LCBmaWxsTGluZU9mVGV4dCk7XG4gICAgcHQueSAtPSBib2R5U3BhY2luZztcbiAgfVxuICBkcmF3Rm9vdGVyKHB0LCBjdHgsIG9wdGlvbnMpIHtcbiAgICBjb25zdCBmb290ZXIgPSB0aGlzLmZvb3RlcjtcbiAgICBjb25zdCBsZW5ndGggPSBmb290ZXIubGVuZ3RoO1xuICAgIGxldCBmb290ZXJGb250LCBpO1xuICAgIGlmIChsZW5ndGgpIHtcbiAgICAgIGNvbnN0IHJ0bEhlbHBlciA9IGdldFJ0bEFkYXB0ZXIob3B0aW9ucy5ydGwsIHRoaXMueCwgdGhpcy53aWR0aCk7XG4gICAgICBwdC54ID0gZ2V0QWxpZ25lZFgodGhpcywgb3B0aW9ucy5mb290ZXJBbGlnbiwgb3B0aW9ucyk7XG4gICAgICBwdC55ICs9IG9wdGlvbnMuZm9vdGVyTWFyZ2luVG9wO1xuICAgICAgY3R4LnRleHRBbGlnbiA9IHJ0bEhlbHBlci50ZXh0QWxpZ24ob3B0aW9ucy5mb290ZXJBbGlnbik7XG4gICAgICBjdHgudGV4dEJhc2VsaW5lID0gJ21pZGRsZSc7XG4gICAgICBmb290ZXJGb250ID0gdG9Gb250KG9wdGlvbnMuZm9vdGVyRm9udCk7XG4gICAgICBjdHguZmlsbFN0eWxlID0gb3B0aW9ucy5mb290ZXJDb2xvcjtcbiAgICAgIGN0eC5mb250ID0gZm9vdGVyRm9udC5zdHJpbmc7XG4gICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHtcbiAgICAgICAgY3R4LmZpbGxUZXh0KGZvb3RlcltpXSwgcnRsSGVscGVyLngocHQueCksIHB0LnkgKyBmb290ZXJGb250LmxpbmVIZWlnaHQgLyAyKTtcbiAgICAgICAgcHQueSArPSBmb290ZXJGb250LmxpbmVIZWlnaHQgKyBvcHRpb25zLmZvb3RlclNwYWNpbmc7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGRyYXdCYWNrZ3JvdW5kKHB0LCBjdHgsIHRvb2x0aXBTaXplLCBvcHRpb25zKSB7XG4gICAgY29uc3Qge3hBbGlnbiwgeUFsaWdufSA9IHRoaXM7XG4gICAgY29uc3Qge3gsIHl9ID0gcHQ7XG4gICAgY29uc3Qge3dpZHRoLCBoZWlnaHR9ID0gdG9vbHRpcFNpemU7XG4gICAgY29uc3Qge3RvcExlZnQsIHRvcFJpZ2h0LCBib3R0b21MZWZ0LCBib3R0b21SaWdodH0gPSB0b1RSQkxDb3JuZXJzKG9wdGlvbnMuY29ybmVyUmFkaXVzKTtcbiAgICBjdHguZmlsbFN0eWxlID0gb3B0aW9ucy5iYWNrZ3JvdW5kQ29sb3I7XG4gICAgY3R4LnN0cm9rZVN0eWxlID0gb3B0aW9ucy5ib3JkZXJDb2xvcjtcbiAgICBjdHgubGluZVdpZHRoID0gb3B0aW9ucy5ib3JkZXJXaWR0aDtcbiAgICBjdHguYmVnaW5QYXRoKCk7XG4gICAgY3R4Lm1vdmVUbyh4ICsgdG9wTGVmdCwgeSk7XG4gICAgaWYgKHlBbGlnbiA9PT0gJ3RvcCcpIHtcbiAgICAgIHRoaXMuZHJhd0NhcmV0KHB0LCBjdHgsIHRvb2x0aXBTaXplLCBvcHRpb25zKTtcbiAgICB9XG4gICAgY3R4LmxpbmVUbyh4ICsgd2lkdGggLSB0b3BSaWdodCwgeSk7XG4gICAgY3R4LnF1YWRyYXRpY0N1cnZlVG8oeCArIHdpZHRoLCB5LCB4ICsgd2lkdGgsIHkgKyB0b3BSaWdodCk7XG4gICAgaWYgKHlBbGlnbiA9PT0gJ2NlbnRlcicgJiYgeEFsaWduID09PSAncmlnaHQnKSB7XG4gICAgICB0aGlzLmRyYXdDYXJldChwdCwgY3R4LCB0b29sdGlwU2l6ZSwgb3B0aW9ucyk7XG4gICAgfVxuICAgIGN0eC5saW5lVG8oeCArIHdpZHRoLCB5ICsgaGVpZ2h0IC0gYm90dG9tUmlnaHQpO1xuICAgIGN0eC5xdWFkcmF0aWNDdXJ2ZVRvKHggKyB3aWR0aCwgeSArIGhlaWdodCwgeCArIHdpZHRoIC0gYm90dG9tUmlnaHQsIHkgKyBoZWlnaHQpO1xuICAgIGlmICh5QWxpZ24gPT09ICdib3R0b20nKSB7XG4gICAgICB0aGlzLmRyYXdDYXJldChwdCwgY3R4LCB0b29sdGlwU2l6ZSwgb3B0aW9ucyk7XG4gICAgfVxuICAgIGN0eC5saW5lVG8oeCArIGJvdHRvbUxlZnQsIHkgKyBoZWlnaHQpO1xuICAgIGN0eC5xdWFkcmF0aWNDdXJ2ZVRvKHgsIHkgKyBoZWlnaHQsIHgsIHkgKyBoZWlnaHQgLSBib3R0b21MZWZ0KTtcbiAgICBpZiAoeUFsaWduID09PSAnY2VudGVyJyAmJiB4QWxpZ24gPT09ICdsZWZ0Jykge1xuICAgICAgdGhpcy5kcmF3Q2FyZXQocHQsIGN0eCwgdG9vbHRpcFNpemUsIG9wdGlvbnMpO1xuICAgIH1cbiAgICBjdHgubGluZVRvKHgsIHkgKyB0b3BMZWZ0KTtcbiAgICBjdHgucXVhZHJhdGljQ3VydmVUbyh4LCB5LCB4ICsgdG9wTGVmdCwgeSk7XG4gICAgY3R4LmNsb3NlUGF0aCgpO1xuICAgIGN0eC5maWxsKCk7XG4gICAgaWYgKG9wdGlvbnMuYm9yZGVyV2lkdGggPiAwKSB7XG4gICAgICBjdHguc3Ryb2tlKCk7XG4gICAgfVxuICB9XG4gIF91cGRhdGVBbmltYXRpb25UYXJnZXQob3B0aW9ucykge1xuICAgIGNvbnN0IGNoYXJ0ID0gdGhpcy5jaGFydDtcbiAgICBjb25zdCBhbmltcyA9IHRoaXMuJGFuaW1hdGlvbnM7XG4gICAgY29uc3QgYW5pbVggPSBhbmltcyAmJiBhbmltcy54O1xuICAgIGNvbnN0IGFuaW1ZID0gYW5pbXMgJiYgYW5pbXMueTtcbiAgICBpZiAoYW5pbVggfHwgYW5pbVkpIHtcbiAgICAgIGNvbnN0IHBvc2l0aW9uID0gcG9zaXRpb25lcnNbb3B0aW9ucy5wb3NpdGlvbl0uY2FsbCh0aGlzLCB0aGlzLl9hY3RpdmUsIHRoaXMuX2V2ZW50UG9zaXRpb24pO1xuICAgICAgaWYgKCFwb3NpdGlvbikge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBjb25zdCBzaXplID0gdGhpcy5fc2l6ZSA9IGdldFRvb2x0aXBTaXplKHRoaXMsIG9wdGlvbnMpO1xuICAgICAgY29uc3QgcG9zaXRpb25BbmRTaXplID0gT2JqZWN0LmFzc2lnbih7fSwgcG9zaXRpb24sIHRoaXMuX3NpemUpO1xuICAgICAgY29uc3QgYWxpZ25tZW50ID0gZGV0ZXJtaW5lQWxpZ25tZW50KGNoYXJ0LCBvcHRpb25zLCBwb3NpdGlvbkFuZFNpemUpO1xuICAgICAgY29uc3QgcG9pbnQgPSBnZXRCYWNrZ3JvdW5kUG9pbnQob3B0aW9ucywgcG9zaXRpb25BbmRTaXplLCBhbGlnbm1lbnQsIGNoYXJ0KTtcbiAgICAgIGlmIChhbmltWC5fdG8gIT09IHBvaW50LnggfHwgYW5pbVkuX3RvICE9PSBwb2ludC55KSB7XG4gICAgICAgIHRoaXMueEFsaWduID0gYWxpZ25tZW50LnhBbGlnbjtcbiAgICAgICAgdGhpcy55QWxpZ24gPSBhbGlnbm1lbnQueUFsaWduO1xuICAgICAgICB0aGlzLndpZHRoID0gc2l6ZS53aWR0aDtcbiAgICAgICAgdGhpcy5oZWlnaHQgPSBzaXplLmhlaWdodDtcbiAgICAgICAgdGhpcy5jYXJldFggPSBwb3NpdGlvbi54O1xuICAgICAgICB0aGlzLmNhcmV0WSA9IHBvc2l0aW9uLnk7XG4gICAgICAgIHRoaXMuX3Jlc29sdmVBbmltYXRpb25zKCkudXBkYXRlKHRoaXMsIHBvaW50KTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgZHJhdyhjdHgpIHtcbiAgICBjb25zdCBvcHRpb25zID0gdGhpcy5vcHRpb25zLnNldENvbnRleHQodGhpcy5nZXRDb250ZXh0KCkpO1xuICAgIGxldCBvcGFjaXR5ID0gdGhpcy5vcGFjaXR5O1xuICAgIGlmICghb3BhY2l0eSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLl91cGRhdGVBbmltYXRpb25UYXJnZXQob3B0aW9ucyk7XG4gICAgY29uc3QgdG9vbHRpcFNpemUgPSB7XG4gICAgICB3aWR0aDogdGhpcy53aWR0aCxcbiAgICAgIGhlaWdodDogdGhpcy5oZWlnaHRcbiAgICB9O1xuICAgIGNvbnN0IHB0ID0ge1xuICAgICAgeDogdGhpcy54LFxuICAgICAgeTogdGhpcy55XG4gICAgfTtcbiAgICBvcGFjaXR5ID0gTWF0aC5hYnMob3BhY2l0eSkgPCAxZS0zID8gMCA6IG9wYWNpdHk7XG4gICAgY29uc3QgcGFkZGluZyA9IHRvUGFkZGluZyhvcHRpb25zLnBhZGRpbmcpO1xuICAgIGNvbnN0IGhhc1Rvb2x0aXBDb250ZW50ID0gdGhpcy50aXRsZS5sZW5ndGggfHwgdGhpcy5iZWZvcmVCb2R5Lmxlbmd0aCB8fCB0aGlzLmJvZHkubGVuZ3RoIHx8IHRoaXMuYWZ0ZXJCb2R5Lmxlbmd0aCB8fCB0aGlzLmZvb3Rlci5sZW5ndGg7XG4gICAgaWYgKG9wdGlvbnMuZW5hYmxlZCAmJiBoYXNUb29sdGlwQ29udGVudCkge1xuICAgICAgY3R4LnNhdmUoKTtcbiAgICAgIGN0eC5nbG9iYWxBbHBoYSA9IG9wYWNpdHk7XG4gICAgICB0aGlzLmRyYXdCYWNrZ3JvdW5kKHB0LCBjdHgsIHRvb2x0aXBTaXplLCBvcHRpb25zKTtcbiAgICAgIG92ZXJyaWRlVGV4dERpcmVjdGlvbihjdHgsIG9wdGlvbnMudGV4dERpcmVjdGlvbik7XG4gICAgICBwdC55ICs9IHBhZGRpbmcudG9wO1xuICAgICAgdGhpcy5kcmF3VGl0bGUocHQsIGN0eCwgb3B0aW9ucyk7XG4gICAgICB0aGlzLmRyYXdCb2R5KHB0LCBjdHgsIG9wdGlvbnMpO1xuICAgICAgdGhpcy5kcmF3Rm9vdGVyKHB0LCBjdHgsIG9wdGlvbnMpO1xuICAgICAgcmVzdG9yZVRleHREaXJlY3Rpb24oY3R4LCBvcHRpb25zLnRleHREaXJlY3Rpb24pO1xuICAgICAgY3R4LnJlc3RvcmUoKTtcbiAgICB9XG4gIH1cbiAgZ2V0QWN0aXZlRWxlbWVudHMoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2FjdGl2ZSB8fCBbXTtcbiAgfVxuICBzZXRBY3RpdmVFbGVtZW50cyhhY3RpdmVFbGVtZW50cywgZXZlbnRQb3NpdGlvbikge1xuICAgIGNvbnN0IGxhc3RBY3RpdmUgPSB0aGlzLl9hY3RpdmU7XG4gICAgY29uc3QgYWN0aXZlID0gYWN0aXZlRWxlbWVudHMubWFwKCh7ZGF0YXNldEluZGV4LCBpbmRleH0pID0+IHtcbiAgICAgIGNvbnN0IG1ldGEgPSB0aGlzLmNoYXJ0LmdldERhdGFzZXRNZXRhKGRhdGFzZXRJbmRleCk7XG4gICAgICBpZiAoIW1ldGEpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdDYW5ub3QgZmluZCBhIGRhdGFzZXQgYXQgaW5kZXggJyArIGRhdGFzZXRJbmRleCk7XG4gICAgICB9XG4gICAgICByZXR1cm4ge1xuICAgICAgICBkYXRhc2V0SW5kZXgsXG4gICAgICAgIGVsZW1lbnQ6IG1ldGEuZGF0YVtpbmRleF0sXG4gICAgICAgIGluZGV4LFxuICAgICAgfTtcbiAgICB9KTtcbiAgICBjb25zdCBjaGFuZ2VkID0gIV9lbGVtZW50c0VxdWFsKGxhc3RBY3RpdmUsIGFjdGl2ZSk7XG4gICAgY29uc3QgcG9zaXRpb25DaGFuZ2VkID0gdGhpcy5fcG9zaXRpb25DaGFuZ2VkKGFjdGl2ZSwgZXZlbnRQb3NpdGlvbik7XG4gICAgaWYgKGNoYW5nZWQgfHwgcG9zaXRpb25DaGFuZ2VkKSB7XG4gICAgICB0aGlzLl9hY3RpdmUgPSBhY3RpdmU7XG4gICAgICB0aGlzLl9ldmVudFBvc2l0aW9uID0gZXZlbnRQb3NpdGlvbjtcbiAgICAgIHRoaXMuX2lnbm9yZVJlcGxheUV2ZW50cyA9IHRydWU7XG4gICAgICB0aGlzLnVwZGF0ZSh0cnVlKTtcbiAgICB9XG4gIH1cbiAgaGFuZGxlRXZlbnQoZSwgcmVwbGF5LCBpbkNoYXJ0QXJlYSA9IHRydWUpIHtcbiAgICBpZiAocmVwbGF5ICYmIHRoaXMuX2lnbm9yZVJlcGxheUV2ZW50cykge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICB0aGlzLl9pZ25vcmVSZXBsYXlFdmVudHMgPSBmYWxzZTtcbiAgICBjb25zdCBvcHRpb25zID0gdGhpcy5vcHRpb25zO1xuICAgIGNvbnN0IGxhc3RBY3RpdmUgPSB0aGlzLl9hY3RpdmUgfHwgW107XG4gICAgY29uc3QgYWN0aXZlID0gdGhpcy5fZ2V0QWN0aXZlRWxlbWVudHMoZSwgbGFzdEFjdGl2ZSwgcmVwbGF5LCBpbkNoYXJ0QXJlYSk7XG4gICAgY29uc3QgcG9zaXRpb25DaGFuZ2VkID0gdGhpcy5fcG9zaXRpb25DaGFuZ2VkKGFjdGl2ZSwgZSk7XG4gICAgY29uc3QgY2hhbmdlZCA9IHJlcGxheSB8fCAhX2VsZW1lbnRzRXF1YWwoYWN0aXZlLCBsYXN0QWN0aXZlKSB8fCBwb3NpdGlvbkNoYW5nZWQ7XG4gICAgaWYgKGNoYW5nZWQpIHtcbiAgICAgIHRoaXMuX2FjdGl2ZSA9IGFjdGl2ZTtcbiAgICAgIGlmIChvcHRpb25zLmVuYWJsZWQgfHwgb3B0aW9ucy5leHRlcm5hbCkge1xuICAgICAgICB0aGlzLl9ldmVudFBvc2l0aW9uID0ge1xuICAgICAgICAgIHg6IGUueCxcbiAgICAgICAgICB5OiBlLnlcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy51cGRhdGUodHJ1ZSwgcmVwbGF5KTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGNoYW5nZWQ7XG4gIH1cbiAgX2dldEFjdGl2ZUVsZW1lbnRzKGUsIGxhc3RBY3RpdmUsIHJlcGxheSwgaW5DaGFydEFyZWEpIHtcbiAgICBjb25zdCBvcHRpb25zID0gdGhpcy5vcHRpb25zO1xuICAgIGlmIChlLnR5cGUgPT09ICdtb3VzZW91dCcpIHtcbiAgICAgIHJldHVybiBbXTtcbiAgICB9XG4gICAgaWYgKCFpbkNoYXJ0QXJlYSkge1xuICAgICAgcmV0dXJuIGxhc3RBY3RpdmU7XG4gICAgfVxuICAgIGNvbnN0IGFjdGl2ZSA9IHRoaXMuY2hhcnQuZ2V0RWxlbWVudHNBdEV2ZW50Rm9yTW9kZShlLCBvcHRpb25zLm1vZGUsIG9wdGlvbnMsIHJlcGxheSk7XG4gICAgaWYgKG9wdGlvbnMucmV2ZXJzZSkge1xuICAgICAgYWN0aXZlLnJldmVyc2UoKTtcbiAgICB9XG4gICAgcmV0dXJuIGFjdGl2ZTtcbiAgfVxuICBfcG9zaXRpb25DaGFuZ2VkKGFjdGl2ZSwgZSkge1xuICAgIGNvbnN0IHtjYXJldFgsIGNhcmV0WSwgb3B0aW9uc30gPSB0aGlzO1xuICAgIGNvbnN0IHBvc2l0aW9uID0gcG9zaXRpb25lcnNbb3B0aW9ucy5wb3NpdGlvbl0uY2FsbCh0aGlzLCBhY3RpdmUsIGUpO1xuICAgIHJldHVybiBwb3NpdGlvbiAhPT0gZmFsc2UgJiYgKGNhcmV0WCAhPT0gcG9zaXRpb24ueCB8fCBjYXJldFkgIT09IHBvc2l0aW9uLnkpO1xuICB9XG59XG5Ub29sdGlwLnBvc2l0aW9uZXJzID0gcG9zaXRpb25lcnM7XG52YXIgcGx1Z2luX3Rvb2x0aXAgPSB7XG4gIGlkOiAndG9vbHRpcCcsXG4gIF9lbGVtZW50OiBUb29sdGlwLFxuICBwb3NpdGlvbmVycyxcbiAgYWZ0ZXJJbml0KGNoYXJ0LCBfYXJncywgb3B0aW9ucykge1xuICAgIGlmIChvcHRpb25zKSB7XG4gICAgICBjaGFydC50b29sdGlwID0gbmV3IFRvb2x0aXAoe2NoYXJ0LCBvcHRpb25zfSk7XG4gICAgfVxuICB9LFxuICBiZWZvcmVVcGRhdGUoY2hhcnQsIF9hcmdzLCBvcHRpb25zKSB7XG4gICAgaWYgKGNoYXJ0LnRvb2x0aXApIHtcbiAgICAgIGNoYXJ0LnRvb2x0aXAuaW5pdGlhbGl6ZShvcHRpb25zKTtcbiAgICB9XG4gIH0sXG4gIHJlc2V0KGNoYXJ0LCBfYXJncywgb3B0aW9ucykge1xuICAgIGlmIChjaGFydC50b29sdGlwKSB7XG4gICAgICBjaGFydC50b29sdGlwLmluaXRpYWxpemUob3B0aW9ucyk7XG4gICAgfVxuICB9LFxuICBhZnRlckRyYXcoY2hhcnQpIHtcbiAgICBjb25zdCB0b29sdGlwID0gY2hhcnQudG9vbHRpcDtcbiAgICBjb25zdCBhcmdzID0ge1xuICAgICAgdG9vbHRpcFxuICAgIH07XG4gICAgaWYgKGNoYXJ0Lm5vdGlmeVBsdWdpbnMoJ2JlZm9yZVRvb2x0aXBEcmF3JywgYXJncykgPT09IGZhbHNlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmICh0b29sdGlwKSB7XG4gICAgICB0b29sdGlwLmRyYXcoY2hhcnQuY3R4KTtcbiAgICB9XG4gICAgY2hhcnQubm90aWZ5UGx1Z2lucygnYWZ0ZXJUb29sdGlwRHJhdycsIGFyZ3MpO1xuICB9LFxuICBhZnRlckV2ZW50KGNoYXJ0LCBhcmdzKSB7XG4gICAgaWYgKGNoYXJ0LnRvb2x0aXApIHtcbiAgICAgIGNvbnN0IHVzZUZpbmFsUG9zaXRpb24gPSBhcmdzLnJlcGxheTtcbiAgICAgIGlmIChjaGFydC50b29sdGlwLmhhbmRsZUV2ZW50KGFyZ3MuZXZlbnQsIHVzZUZpbmFsUG9zaXRpb24sIGFyZ3MuaW5DaGFydEFyZWEpKSB7XG4gICAgICAgIGFyZ3MuY2hhbmdlZCA9IHRydWU7XG4gICAgICB9XG4gICAgfVxuICB9LFxuICBkZWZhdWx0czoge1xuICAgIGVuYWJsZWQ6IHRydWUsXG4gICAgZXh0ZXJuYWw6IG51bGwsXG4gICAgcG9zaXRpb246ICdhdmVyYWdlJyxcbiAgICBiYWNrZ3JvdW5kQ29sb3I6ICdyZ2JhKDAsMCwwLDAuOCknLFxuICAgIHRpdGxlQ29sb3I6ICcjZmZmJyxcbiAgICB0aXRsZUZvbnQ6IHtcbiAgICAgIHdlaWdodDogJ2JvbGQnLFxuICAgIH0sXG4gICAgdGl0bGVTcGFjaW5nOiAyLFxuICAgIHRpdGxlTWFyZ2luQm90dG9tOiA2LFxuICAgIHRpdGxlQWxpZ246ICdsZWZ0JyxcbiAgICBib2R5Q29sb3I6ICcjZmZmJyxcbiAgICBib2R5U3BhY2luZzogMixcbiAgICBib2R5Rm9udDoge1xuICAgIH0sXG4gICAgYm9keUFsaWduOiAnbGVmdCcsXG4gICAgZm9vdGVyQ29sb3I6ICcjZmZmJyxcbiAgICBmb290ZXJTcGFjaW5nOiAyLFxuICAgIGZvb3Rlck1hcmdpblRvcDogNixcbiAgICBmb290ZXJGb250OiB7XG4gICAgICB3ZWlnaHQ6ICdib2xkJyxcbiAgICB9LFxuICAgIGZvb3RlckFsaWduOiAnbGVmdCcsXG4gICAgcGFkZGluZzogNixcbiAgICBjYXJldFBhZGRpbmc6IDIsXG4gICAgY2FyZXRTaXplOiA1LFxuICAgIGNvcm5lclJhZGl1czogNixcbiAgICBib3hIZWlnaHQ6IChjdHgsIG9wdHMpID0+IG9wdHMuYm9keUZvbnQuc2l6ZSxcbiAgICBib3hXaWR0aDogKGN0eCwgb3B0cykgPT4gb3B0cy5ib2R5Rm9udC5zaXplLFxuICAgIG11bHRpS2V5QmFja2dyb3VuZDogJyNmZmYnLFxuICAgIGRpc3BsYXlDb2xvcnM6IHRydWUsXG4gICAgYm94UGFkZGluZzogMCxcbiAgICBib3JkZXJDb2xvcjogJ3JnYmEoMCwwLDAsMCknLFxuICAgIGJvcmRlcldpZHRoOiAwLFxuICAgIGFuaW1hdGlvbjoge1xuICAgICAgZHVyYXRpb246IDQwMCxcbiAgICAgIGVhc2luZzogJ2Vhc2VPdXRRdWFydCcsXG4gICAgfSxcbiAgICBhbmltYXRpb25zOiB7XG4gICAgICBudW1iZXJzOiB7XG4gICAgICAgIHR5cGU6ICdudW1iZXInLFxuICAgICAgICBwcm9wZXJ0aWVzOiBbJ3gnLCAneScsICd3aWR0aCcsICdoZWlnaHQnLCAnY2FyZXRYJywgJ2NhcmV0WSddLFxuICAgICAgfSxcbiAgICAgIG9wYWNpdHk6IHtcbiAgICAgICAgZWFzaW5nOiAnbGluZWFyJyxcbiAgICAgICAgZHVyYXRpb246IDIwMFxuICAgICAgfVxuICAgIH0sXG4gICAgY2FsbGJhY2tzOiB7XG4gICAgICBiZWZvcmVUaXRsZTogbm9vcCxcbiAgICAgIHRpdGxlKHRvb2x0aXBJdGVtcykge1xuICAgICAgICBpZiAodG9vbHRpcEl0ZW1zLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICBjb25zdCBpdGVtID0gdG9vbHRpcEl0ZW1zWzBdO1xuICAgICAgICAgIGNvbnN0IGxhYmVscyA9IGl0ZW0uY2hhcnQuZGF0YS5sYWJlbHM7XG4gICAgICAgICAgY29uc3QgbGFiZWxDb3VudCA9IGxhYmVscyA/IGxhYmVscy5sZW5ndGggOiAwO1xuICAgICAgICAgIGlmICh0aGlzICYmIHRoaXMub3B0aW9ucyAmJiB0aGlzLm9wdGlvbnMubW9kZSA9PT0gJ2RhdGFzZXQnKSB7XG4gICAgICAgICAgICByZXR1cm4gaXRlbS5kYXRhc2V0LmxhYmVsIHx8ICcnO1xuICAgICAgICAgIH0gZWxzZSBpZiAoaXRlbS5sYWJlbCkge1xuICAgICAgICAgICAgcmV0dXJuIGl0ZW0ubGFiZWw7XG4gICAgICAgICAgfSBlbHNlIGlmIChsYWJlbENvdW50ID4gMCAmJiBpdGVtLmRhdGFJbmRleCA8IGxhYmVsQ291bnQpIHtcbiAgICAgICAgICAgIHJldHVybiBsYWJlbHNbaXRlbS5kYXRhSW5kZXhdO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gJyc7XG4gICAgICB9LFxuICAgICAgYWZ0ZXJUaXRsZTogbm9vcCxcbiAgICAgIGJlZm9yZUJvZHk6IG5vb3AsXG4gICAgICBiZWZvcmVMYWJlbDogbm9vcCxcbiAgICAgIGxhYmVsKHRvb2x0aXBJdGVtKSB7XG4gICAgICAgIGlmICh0aGlzICYmIHRoaXMub3B0aW9ucyAmJiB0aGlzLm9wdGlvbnMubW9kZSA9PT0gJ2RhdGFzZXQnKSB7XG4gICAgICAgICAgcmV0dXJuIHRvb2x0aXBJdGVtLmxhYmVsICsgJzogJyArIHRvb2x0aXBJdGVtLmZvcm1hdHRlZFZhbHVlIHx8IHRvb2x0aXBJdGVtLmZvcm1hdHRlZFZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIGxldCBsYWJlbCA9IHRvb2x0aXBJdGVtLmRhdGFzZXQubGFiZWwgfHwgJyc7XG4gICAgICAgIGlmIChsYWJlbCkge1xuICAgICAgICAgIGxhYmVsICs9ICc6ICc7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgdmFsdWUgPSB0b29sdGlwSXRlbS5mb3JtYXR0ZWRWYWx1ZTtcbiAgICAgICAgaWYgKCFpc051bGxPclVuZGVmKHZhbHVlKSkge1xuICAgICAgICAgIGxhYmVsICs9IHZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBsYWJlbDtcbiAgICAgIH0sXG4gICAgICBsYWJlbENvbG9yKHRvb2x0aXBJdGVtKSB7XG4gICAgICAgIGNvbnN0IG1ldGEgPSB0b29sdGlwSXRlbS5jaGFydC5nZXREYXRhc2V0TWV0YSh0b29sdGlwSXRlbS5kYXRhc2V0SW5kZXgpO1xuICAgICAgICBjb25zdCBvcHRpb25zID0gbWV0YS5jb250cm9sbGVyLmdldFN0eWxlKHRvb2x0aXBJdGVtLmRhdGFJbmRleCk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgYm9yZGVyQ29sb3I6IG9wdGlvbnMuYm9yZGVyQ29sb3IsXG4gICAgICAgICAgYmFja2dyb3VuZENvbG9yOiBvcHRpb25zLmJhY2tncm91bmRDb2xvcixcbiAgICAgICAgICBib3JkZXJXaWR0aDogb3B0aW9ucy5ib3JkZXJXaWR0aCxcbiAgICAgICAgICBib3JkZXJEYXNoOiBvcHRpb25zLmJvcmRlckRhc2gsXG4gICAgICAgICAgYm9yZGVyRGFzaE9mZnNldDogb3B0aW9ucy5ib3JkZXJEYXNoT2Zmc2V0LFxuICAgICAgICAgIGJvcmRlclJhZGl1czogMCxcbiAgICAgICAgfTtcbiAgICAgIH0sXG4gICAgICBsYWJlbFRleHRDb2xvcigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMub3B0aW9ucy5ib2R5Q29sb3I7XG4gICAgICB9LFxuICAgICAgbGFiZWxQb2ludFN0eWxlKHRvb2x0aXBJdGVtKSB7XG4gICAgICAgIGNvbnN0IG1ldGEgPSB0b29sdGlwSXRlbS5jaGFydC5nZXREYXRhc2V0TWV0YSh0b29sdGlwSXRlbS5kYXRhc2V0SW5kZXgpO1xuICAgICAgICBjb25zdCBvcHRpb25zID0gbWV0YS5jb250cm9sbGVyLmdldFN0eWxlKHRvb2x0aXBJdGVtLmRhdGFJbmRleCk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgcG9pbnRTdHlsZTogb3B0aW9ucy5wb2ludFN0eWxlLFxuICAgICAgICAgIHJvdGF0aW9uOiBvcHRpb25zLnJvdGF0aW9uLFxuICAgICAgICB9O1xuICAgICAgfSxcbiAgICAgIGFmdGVyTGFiZWw6IG5vb3AsXG4gICAgICBhZnRlckJvZHk6IG5vb3AsXG4gICAgICBiZWZvcmVGb290ZXI6IG5vb3AsXG4gICAgICBmb290ZXI6IG5vb3AsXG4gICAgICBhZnRlckZvb3Rlcjogbm9vcFxuICAgIH1cbiAgfSxcbiAgZGVmYXVsdFJvdXRlczoge1xuICAgIGJvZHlGb250OiAnZm9udCcsXG4gICAgZm9vdGVyRm9udDogJ2ZvbnQnLFxuICAgIHRpdGxlRm9udDogJ2ZvbnQnXG4gIH0sXG4gIGRlc2NyaXB0b3JzOiB7XG4gICAgX3NjcmlwdGFibGU6IChuYW1lKSA9PiBuYW1lICE9PSAnZmlsdGVyJyAmJiBuYW1lICE9PSAnaXRlbVNvcnQnICYmIG5hbWUgIT09ICdleHRlcm5hbCcsXG4gICAgX2luZGV4YWJsZTogZmFsc2UsXG4gICAgY2FsbGJhY2tzOiB7XG4gICAgICBfc2NyaXB0YWJsZTogZmFsc2UsXG4gICAgICBfaW5kZXhhYmxlOiBmYWxzZSxcbiAgICB9LFxuICAgIGFuaW1hdGlvbjoge1xuICAgICAgX2ZhbGxiYWNrOiBmYWxzZVxuICAgIH0sXG4gICAgYW5pbWF0aW9uczoge1xuICAgICAgX2ZhbGxiYWNrOiAnYW5pbWF0aW9uJ1xuICAgIH1cbiAgfSxcbiAgYWRkaXRpb25hbE9wdGlvblNjb3BlczogWydpbnRlcmFjdGlvbiddXG59O1xuXG52YXIgcGx1Z2lucyA9IC8qI19fUFVSRV9fKi9PYmplY3QuZnJlZXplKHtcbl9fcHJvdG9fXzogbnVsbCxcbkRlY2ltYXRpb246IHBsdWdpbl9kZWNpbWF0aW9uLFxuRmlsbGVyOiBwbHVnaW5fZmlsbGVyLFxuTGVnZW5kOiBwbHVnaW5fbGVnZW5kLFxuU3ViVGl0bGU6IHBsdWdpbl9zdWJ0aXRsZSxcblRpdGxlOiBwbHVnaW5fdGl0bGUsXG5Ub29sdGlwOiBwbHVnaW5fdG9vbHRpcFxufSk7XG5cbmNvbnN0IGFkZElmU3RyaW5nID0gKGxhYmVscywgcmF3LCBpbmRleCwgYWRkZWRMYWJlbHMpID0+IHtcbiAgaWYgKHR5cGVvZiByYXcgPT09ICdzdHJpbmcnKSB7XG4gICAgaW5kZXggPSBsYWJlbHMucHVzaChyYXcpIC0gMTtcbiAgICBhZGRlZExhYmVscy51bnNoaWZ0KHtpbmRleCwgbGFiZWw6IHJhd30pO1xuICB9IGVsc2UgaWYgKGlzTmFOKHJhdykpIHtcbiAgICBpbmRleCA9IG51bGw7XG4gIH1cbiAgcmV0dXJuIGluZGV4O1xufTtcbmZ1bmN0aW9uIGZpbmRPckFkZExhYmVsKGxhYmVscywgcmF3LCBpbmRleCwgYWRkZWRMYWJlbHMpIHtcbiAgY29uc3QgZmlyc3QgPSBsYWJlbHMuaW5kZXhPZihyYXcpO1xuICBpZiAoZmlyc3QgPT09IC0xKSB7XG4gICAgcmV0dXJuIGFkZElmU3RyaW5nKGxhYmVscywgcmF3LCBpbmRleCwgYWRkZWRMYWJlbHMpO1xuICB9XG4gIGNvbnN0IGxhc3QgPSBsYWJlbHMubGFzdEluZGV4T2YocmF3KTtcbiAgcmV0dXJuIGZpcnN0ICE9PSBsYXN0ID8gaW5kZXggOiBmaXJzdDtcbn1cbmNvbnN0IHZhbGlkSW5kZXggPSAoaW5kZXgsIG1heCkgPT4gaW5kZXggPT09IG51bGwgPyBudWxsIDogX2xpbWl0VmFsdWUoTWF0aC5yb3VuZChpbmRleCksIDAsIG1heCk7XG5jbGFzcyBDYXRlZ29yeVNjYWxlIGV4dGVuZHMgU2NhbGUge1xuICBjb25zdHJ1Y3RvcihjZmcpIHtcbiAgICBzdXBlcihjZmcpO1xuICAgIHRoaXMuX3N0YXJ0VmFsdWUgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5fdmFsdWVSYW5nZSA9IDA7XG4gICAgdGhpcy5fYWRkZWRMYWJlbHMgPSBbXTtcbiAgfVxuICBpbml0KHNjYWxlT3B0aW9ucykge1xuICAgIGNvbnN0IGFkZGVkID0gdGhpcy5fYWRkZWRMYWJlbHM7XG4gICAgaWYgKGFkZGVkLmxlbmd0aCkge1xuICAgICAgY29uc3QgbGFiZWxzID0gdGhpcy5nZXRMYWJlbHMoKTtcbiAgICAgIGZvciAoY29uc3Qge2luZGV4LCBsYWJlbH0gb2YgYWRkZWQpIHtcbiAgICAgICAgaWYgKGxhYmVsc1tpbmRleF0gPT09IGxhYmVsKSB7XG4gICAgICAgICAgbGFiZWxzLnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHRoaXMuX2FkZGVkTGFiZWxzID0gW107XG4gICAgfVxuICAgIHN1cGVyLmluaXQoc2NhbGVPcHRpb25zKTtcbiAgfVxuICBwYXJzZShyYXcsIGluZGV4KSB7XG4gICAgaWYgKGlzTnVsbE9yVW5kZWYocmF3KSkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIGNvbnN0IGxhYmVscyA9IHRoaXMuZ2V0TGFiZWxzKCk7XG4gICAgaW5kZXggPSBpc0Zpbml0ZShpbmRleCkgJiYgbGFiZWxzW2luZGV4XSA9PT0gcmF3ID8gaW5kZXhcbiAgICAgIDogZmluZE9yQWRkTGFiZWwobGFiZWxzLCByYXcsIHZhbHVlT3JEZWZhdWx0KGluZGV4LCByYXcpLCB0aGlzLl9hZGRlZExhYmVscyk7XG4gICAgcmV0dXJuIHZhbGlkSW5kZXgoaW5kZXgsIGxhYmVscy5sZW5ndGggLSAxKTtcbiAgfVxuICBkZXRlcm1pbmVEYXRhTGltaXRzKCkge1xuICAgIGNvbnN0IHttaW5EZWZpbmVkLCBtYXhEZWZpbmVkfSA9IHRoaXMuZ2V0VXNlckJvdW5kcygpO1xuICAgIGxldCB7bWluLCBtYXh9ID0gdGhpcy5nZXRNaW5NYXgodHJ1ZSk7XG4gICAgaWYgKHRoaXMub3B0aW9ucy5ib3VuZHMgPT09ICd0aWNrcycpIHtcbiAgICAgIGlmICghbWluRGVmaW5lZCkge1xuICAgICAgICBtaW4gPSAwO1xuICAgICAgfVxuICAgICAgaWYgKCFtYXhEZWZpbmVkKSB7XG4gICAgICAgIG1heCA9IHRoaXMuZ2V0TGFiZWxzKCkubGVuZ3RoIC0gMTtcbiAgICAgIH1cbiAgICB9XG4gICAgdGhpcy5taW4gPSBtaW47XG4gICAgdGhpcy5tYXggPSBtYXg7XG4gIH1cbiAgYnVpbGRUaWNrcygpIHtcbiAgICBjb25zdCBtaW4gPSB0aGlzLm1pbjtcbiAgICBjb25zdCBtYXggPSB0aGlzLm1heDtcbiAgICBjb25zdCBvZmZzZXQgPSB0aGlzLm9wdGlvbnMub2Zmc2V0O1xuICAgIGNvbnN0IHRpY2tzID0gW107XG4gICAgbGV0IGxhYmVscyA9IHRoaXMuZ2V0TGFiZWxzKCk7XG4gICAgbGFiZWxzID0gKG1pbiA9PT0gMCAmJiBtYXggPT09IGxhYmVscy5sZW5ndGggLSAxKSA/IGxhYmVscyA6IGxhYmVscy5zbGljZShtaW4sIG1heCArIDEpO1xuICAgIHRoaXMuX3ZhbHVlUmFuZ2UgPSBNYXRoLm1heChsYWJlbHMubGVuZ3RoIC0gKG9mZnNldCA/IDAgOiAxKSwgMSk7XG4gICAgdGhpcy5fc3RhcnRWYWx1ZSA9IHRoaXMubWluIC0gKG9mZnNldCA/IDAuNSA6IDApO1xuICAgIGZvciAobGV0IHZhbHVlID0gbWluOyB2YWx1ZSA8PSBtYXg7IHZhbHVlKyspIHtcbiAgICAgIHRpY2tzLnB1c2goe3ZhbHVlfSk7XG4gICAgfVxuICAgIHJldHVybiB0aWNrcztcbiAgfVxuICBnZXRMYWJlbEZvclZhbHVlKHZhbHVlKSB7XG4gICAgY29uc3QgbGFiZWxzID0gdGhpcy5nZXRMYWJlbHMoKTtcbiAgICBpZiAodmFsdWUgPj0gMCAmJiB2YWx1ZSA8IGxhYmVscy5sZW5ndGgpIHtcbiAgICAgIHJldHVybiBsYWJlbHNbdmFsdWVdO1xuICAgIH1cbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cbiAgY29uZmlndXJlKCkge1xuICAgIHN1cGVyLmNvbmZpZ3VyZSgpO1xuICAgIGlmICghdGhpcy5pc0hvcml6b250YWwoKSkge1xuICAgICAgdGhpcy5fcmV2ZXJzZVBpeGVscyA9ICF0aGlzLl9yZXZlcnNlUGl4ZWxzO1xuICAgIH1cbiAgfVxuICBnZXRQaXhlbEZvclZhbHVlKHZhbHVlKSB7XG4gICAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ251bWJlcicpIHtcbiAgICAgIHZhbHVlID0gdGhpcy5wYXJzZSh2YWx1ZSk7XG4gICAgfVxuICAgIHJldHVybiB2YWx1ZSA9PT0gbnVsbCA/IE5hTiA6IHRoaXMuZ2V0UGl4ZWxGb3JEZWNpbWFsKCh2YWx1ZSAtIHRoaXMuX3N0YXJ0VmFsdWUpIC8gdGhpcy5fdmFsdWVSYW5nZSk7XG4gIH1cbiAgZ2V0UGl4ZWxGb3JUaWNrKGluZGV4KSB7XG4gICAgY29uc3QgdGlja3MgPSB0aGlzLnRpY2tzO1xuICAgIGlmIChpbmRleCA8IDAgfHwgaW5kZXggPiB0aWNrcy5sZW5ndGggLSAxKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuZ2V0UGl4ZWxGb3JWYWx1ZSh0aWNrc1tpbmRleF0udmFsdWUpO1xuICB9XG4gIGdldFZhbHVlRm9yUGl4ZWwocGl4ZWwpIHtcbiAgICByZXR1cm4gTWF0aC5yb3VuZCh0aGlzLl9zdGFydFZhbHVlICsgdGhpcy5nZXREZWNpbWFsRm9yUGl4ZWwocGl4ZWwpICogdGhpcy5fdmFsdWVSYW5nZSk7XG4gIH1cbiAgZ2V0QmFzZVBpeGVsKCkge1xuICAgIHJldHVybiB0aGlzLmJvdHRvbTtcbiAgfVxufVxuQ2F0ZWdvcnlTY2FsZS5pZCA9ICdjYXRlZ29yeSc7XG5DYXRlZ29yeVNjYWxlLmRlZmF1bHRzID0ge1xuICB0aWNrczoge1xuICAgIGNhbGxiYWNrOiBDYXRlZ29yeVNjYWxlLnByb3RvdHlwZS5nZXRMYWJlbEZvclZhbHVlXG4gIH1cbn07XG5cbmZ1bmN0aW9uIGdlbmVyYXRlVGlja3MkMShnZW5lcmF0aW9uT3B0aW9ucywgZGF0YVJhbmdlKSB7XG4gIGNvbnN0IHRpY2tzID0gW107XG4gIGNvbnN0IE1JTl9TUEFDSU5HID0gMWUtMTQ7XG4gIGNvbnN0IHtib3VuZHMsIHN0ZXAsIG1pbiwgbWF4LCBwcmVjaXNpb24sIGNvdW50LCBtYXhUaWNrcywgbWF4RGlnaXRzLCBpbmNsdWRlQm91bmRzfSA9IGdlbmVyYXRpb25PcHRpb25zO1xuICBjb25zdCB1bml0ID0gc3RlcCB8fCAxO1xuICBjb25zdCBtYXhTcGFjZXMgPSBtYXhUaWNrcyAtIDE7XG4gIGNvbnN0IHttaW46IHJtaW4sIG1heDogcm1heH0gPSBkYXRhUmFuZ2U7XG4gIGNvbnN0IG1pbkRlZmluZWQgPSAhaXNOdWxsT3JVbmRlZihtaW4pO1xuICBjb25zdCBtYXhEZWZpbmVkID0gIWlzTnVsbE9yVW5kZWYobWF4KTtcbiAgY29uc3QgY291bnREZWZpbmVkID0gIWlzTnVsbE9yVW5kZWYoY291bnQpO1xuICBjb25zdCBtaW5TcGFjaW5nID0gKHJtYXggLSBybWluKSAvIChtYXhEaWdpdHMgKyAxKTtcbiAgbGV0IHNwYWNpbmcgPSBuaWNlTnVtKChybWF4IC0gcm1pbikgLyBtYXhTcGFjZXMgLyB1bml0KSAqIHVuaXQ7XG4gIGxldCBmYWN0b3IsIG5pY2VNaW4sIG5pY2VNYXgsIG51bVNwYWNlcztcbiAgaWYgKHNwYWNpbmcgPCBNSU5fU1BBQ0lORyAmJiAhbWluRGVmaW5lZCAmJiAhbWF4RGVmaW5lZCkge1xuICAgIHJldHVybiBbe3ZhbHVlOiBybWlufSwge3ZhbHVlOiBybWF4fV07XG4gIH1cbiAgbnVtU3BhY2VzID0gTWF0aC5jZWlsKHJtYXggLyBzcGFjaW5nKSAtIE1hdGguZmxvb3Iocm1pbiAvIHNwYWNpbmcpO1xuICBpZiAobnVtU3BhY2VzID4gbWF4U3BhY2VzKSB7XG4gICAgc3BhY2luZyA9IG5pY2VOdW0obnVtU3BhY2VzICogc3BhY2luZyAvIG1heFNwYWNlcyAvIHVuaXQpICogdW5pdDtcbiAgfVxuICBpZiAoIWlzTnVsbE9yVW5kZWYocHJlY2lzaW9uKSkge1xuICAgIGZhY3RvciA9IE1hdGgucG93KDEwLCBwcmVjaXNpb24pO1xuICAgIHNwYWNpbmcgPSBNYXRoLmNlaWwoc3BhY2luZyAqIGZhY3RvcikgLyBmYWN0b3I7XG4gIH1cbiAgaWYgKGJvdW5kcyA9PT0gJ3RpY2tzJykge1xuICAgIG5pY2VNaW4gPSBNYXRoLmZsb29yKHJtaW4gLyBzcGFjaW5nKSAqIHNwYWNpbmc7XG4gICAgbmljZU1heCA9IE1hdGguY2VpbChybWF4IC8gc3BhY2luZykgKiBzcGFjaW5nO1xuICB9IGVsc2Uge1xuICAgIG5pY2VNaW4gPSBybWluO1xuICAgIG5pY2VNYXggPSBybWF4O1xuICB9XG4gIGlmIChtaW5EZWZpbmVkICYmIG1heERlZmluZWQgJiYgc3RlcCAmJiBhbG1vc3RXaG9sZSgobWF4IC0gbWluKSAvIHN0ZXAsIHNwYWNpbmcgLyAxMDAwKSkge1xuICAgIG51bVNwYWNlcyA9IE1hdGgucm91bmQoTWF0aC5taW4oKG1heCAtIG1pbikgLyBzcGFjaW5nLCBtYXhUaWNrcykpO1xuICAgIHNwYWNpbmcgPSAobWF4IC0gbWluKSAvIG51bVNwYWNlcztcbiAgICBuaWNlTWluID0gbWluO1xuICAgIG5pY2VNYXggPSBtYXg7XG4gIH0gZWxzZSBpZiAoY291bnREZWZpbmVkKSB7XG4gICAgbmljZU1pbiA9IG1pbkRlZmluZWQgPyBtaW4gOiBuaWNlTWluO1xuICAgIG5pY2VNYXggPSBtYXhEZWZpbmVkID8gbWF4IDogbmljZU1heDtcbiAgICBudW1TcGFjZXMgPSBjb3VudCAtIDE7XG4gICAgc3BhY2luZyA9IChuaWNlTWF4IC0gbmljZU1pbikgLyBudW1TcGFjZXM7XG4gIH0gZWxzZSB7XG4gICAgbnVtU3BhY2VzID0gKG5pY2VNYXggLSBuaWNlTWluKSAvIHNwYWNpbmc7XG4gICAgaWYgKGFsbW9zdEVxdWFscyhudW1TcGFjZXMsIE1hdGgucm91bmQobnVtU3BhY2VzKSwgc3BhY2luZyAvIDEwMDApKSB7XG4gICAgICBudW1TcGFjZXMgPSBNYXRoLnJvdW5kKG51bVNwYWNlcyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG51bVNwYWNlcyA9IE1hdGguY2VpbChudW1TcGFjZXMpO1xuICAgIH1cbiAgfVxuICBjb25zdCBkZWNpbWFsUGxhY2VzID0gTWF0aC5tYXgoXG4gICAgX2RlY2ltYWxQbGFjZXMoc3BhY2luZyksXG4gICAgX2RlY2ltYWxQbGFjZXMobmljZU1pbilcbiAgKTtcbiAgZmFjdG9yID0gTWF0aC5wb3coMTAsIGlzTnVsbE9yVW5kZWYocHJlY2lzaW9uKSA/IGRlY2ltYWxQbGFjZXMgOiBwcmVjaXNpb24pO1xuICBuaWNlTWluID0gTWF0aC5yb3VuZChuaWNlTWluICogZmFjdG9yKSAvIGZhY3RvcjtcbiAgbmljZU1heCA9IE1hdGgucm91bmQobmljZU1heCAqIGZhY3RvcikgLyBmYWN0b3I7XG4gIGxldCBqID0gMDtcbiAgaWYgKG1pbkRlZmluZWQpIHtcbiAgICBpZiAoaW5jbHVkZUJvdW5kcyAmJiBuaWNlTWluICE9PSBtaW4pIHtcbiAgICAgIHRpY2tzLnB1c2goe3ZhbHVlOiBtaW59KTtcbiAgICAgIGlmIChuaWNlTWluIDwgbWluKSB7XG4gICAgICAgIGorKztcbiAgICAgIH1cbiAgICAgIGlmIChhbG1vc3RFcXVhbHMoTWF0aC5yb3VuZCgobmljZU1pbiArIGogKiBzcGFjaW5nKSAqIGZhY3RvcikgLyBmYWN0b3IsIG1pbiwgcmVsYXRpdmVMYWJlbFNpemUobWluLCBtaW5TcGFjaW5nLCBnZW5lcmF0aW9uT3B0aW9ucykpKSB7XG4gICAgICAgIGorKztcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKG5pY2VNaW4gPCBtaW4pIHtcbiAgICAgIGorKztcbiAgICB9XG4gIH1cbiAgZm9yICg7IGogPCBudW1TcGFjZXM7ICsraikge1xuICAgIHRpY2tzLnB1c2goe3ZhbHVlOiBNYXRoLnJvdW5kKChuaWNlTWluICsgaiAqIHNwYWNpbmcpICogZmFjdG9yKSAvIGZhY3Rvcn0pO1xuICB9XG4gIGlmIChtYXhEZWZpbmVkICYmIGluY2x1ZGVCb3VuZHMgJiYgbmljZU1heCAhPT0gbWF4KSB7XG4gICAgaWYgKHRpY2tzLmxlbmd0aCAmJiBhbG1vc3RFcXVhbHModGlja3NbdGlja3MubGVuZ3RoIC0gMV0udmFsdWUsIG1heCwgcmVsYXRpdmVMYWJlbFNpemUobWF4LCBtaW5TcGFjaW5nLCBnZW5lcmF0aW9uT3B0aW9ucykpKSB7XG4gICAgICB0aWNrc1t0aWNrcy5sZW5ndGggLSAxXS52YWx1ZSA9IG1heDtcbiAgICB9IGVsc2Uge1xuICAgICAgdGlja3MucHVzaCh7dmFsdWU6IG1heH0pO1xuICAgIH1cbiAgfSBlbHNlIGlmICghbWF4RGVmaW5lZCB8fCBuaWNlTWF4ID09PSBtYXgpIHtcbiAgICB0aWNrcy5wdXNoKHt2YWx1ZTogbmljZU1heH0pO1xuICB9XG4gIHJldHVybiB0aWNrcztcbn1cbmZ1bmN0aW9uIHJlbGF0aXZlTGFiZWxTaXplKHZhbHVlLCBtaW5TcGFjaW5nLCB7aG9yaXpvbnRhbCwgbWluUm90YXRpb259KSB7XG4gIGNvbnN0IHJhZCA9IHRvUmFkaWFucyhtaW5Sb3RhdGlvbik7XG4gIGNvbnN0IHJhdGlvID0gKGhvcml6b250YWwgPyBNYXRoLnNpbihyYWQpIDogTWF0aC5jb3MocmFkKSkgfHwgMC4wMDE7XG4gIGNvbnN0IGxlbmd0aCA9IDAuNzUgKiBtaW5TcGFjaW5nICogKCcnICsgdmFsdWUpLmxlbmd0aDtcbiAgcmV0dXJuIE1hdGgubWluKG1pblNwYWNpbmcgLyByYXRpbywgbGVuZ3RoKTtcbn1cbmNsYXNzIExpbmVhclNjYWxlQmFzZSBleHRlbmRzIFNjYWxlIHtcbiAgY29uc3RydWN0b3IoY2ZnKSB7XG4gICAgc3VwZXIoY2ZnKTtcbiAgICB0aGlzLnN0YXJ0ID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuZW5kID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuX3N0YXJ0VmFsdWUgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5fZW5kVmFsdWUgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5fdmFsdWVSYW5nZSA9IDA7XG4gIH1cbiAgcGFyc2UocmF3LCBpbmRleCkge1xuICAgIGlmIChpc051bGxPclVuZGVmKHJhdykpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBpZiAoKHR5cGVvZiByYXcgPT09ICdudW1iZXInIHx8IHJhdyBpbnN0YW5jZW9mIE51bWJlcikgJiYgIWlzRmluaXRlKCtyYXcpKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgcmV0dXJuICtyYXc7XG4gIH1cbiAgaGFuZGxlVGlja1JhbmdlT3B0aW9ucygpIHtcbiAgICBjb25zdCB7YmVnaW5BdFplcm99ID0gdGhpcy5vcHRpb25zO1xuICAgIGNvbnN0IHttaW5EZWZpbmVkLCBtYXhEZWZpbmVkfSA9IHRoaXMuZ2V0VXNlckJvdW5kcygpO1xuICAgIGxldCB7bWluLCBtYXh9ID0gdGhpcztcbiAgICBjb25zdCBzZXRNaW4gPSB2ID0+IChtaW4gPSBtaW5EZWZpbmVkID8gbWluIDogdik7XG4gICAgY29uc3Qgc2V0TWF4ID0gdiA9PiAobWF4ID0gbWF4RGVmaW5lZCA/IG1heCA6IHYpO1xuICAgIGlmIChiZWdpbkF0WmVybykge1xuICAgICAgY29uc3QgbWluU2lnbiA9IHNpZ24obWluKTtcbiAgICAgIGNvbnN0IG1heFNpZ24gPSBzaWduKG1heCk7XG4gICAgICBpZiAobWluU2lnbiA8IDAgJiYgbWF4U2lnbiA8IDApIHtcbiAgICAgICAgc2V0TWF4KDApO1xuICAgICAgfSBlbHNlIGlmIChtaW5TaWduID4gMCAmJiBtYXhTaWduID4gMCkge1xuICAgICAgICBzZXRNaW4oMCk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChtaW4gPT09IG1heCkge1xuICAgICAgbGV0IG9mZnNldCA9IDE7XG4gICAgICBpZiAobWF4ID49IE51bWJlci5NQVhfU0FGRV9JTlRFR0VSIHx8IG1pbiA8PSBOdW1iZXIuTUlOX1NBRkVfSU5URUdFUikge1xuICAgICAgICBvZmZzZXQgPSBNYXRoLmFicyhtYXggKiAwLjA1KTtcbiAgICAgIH1cbiAgICAgIHNldE1heChtYXggKyBvZmZzZXQpO1xuICAgICAgaWYgKCFiZWdpbkF0WmVybykge1xuICAgICAgICBzZXRNaW4obWluIC0gb2Zmc2V0KTtcbiAgICAgIH1cbiAgICB9XG4gICAgdGhpcy5taW4gPSBtaW47XG4gICAgdGhpcy5tYXggPSBtYXg7XG4gIH1cbiAgZ2V0VGlja0xpbWl0KCkge1xuICAgIGNvbnN0IHRpY2tPcHRzID0gdGhpcy5vcHRpb25zLnRpY2tzO1xuICAgIGxldCB7bWF4VGlja3NMaW1pdCwgc3RlcFNpemV9ID0gdGlja09wdHM7XG4gICAgbGV0IG1heFRpY2tzO1xuICAgIGlmIChzdGVwU2l6ZSkge1xuICAgICAgbWF4VGlja3MgPSBNYXRoLmNlaWwodGhpcy5tYXggLyBzdGVwU2l6ZSkgLSBNYXRoLmZsb29yKHRoaXMubWluIC8gc3RlcFNpemUpICsgMTtcbiAgICAgIGlmIChtYXhUaWNrcyA+IDEwMDApIHtcbiAgICAgICAgY29uc29sZS53YXJuKGBzY2FsZXMuJHt0aGlzLmlkfS50aWNrcy5zdGVwU2l6ZTogJHtzdGVwU2l6ZX0gd291bGQgcmVzdWx0IGdlbmVyYXRpbmcgdXAgdG8gJHttYXhUaWNrc30gdGlja3MuIExpbWl0aW5nIHRvIDEwMDAuYCk7XG4gICAgICAgIG1heFRpY2tzID0gMTAwMDtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgbWF4VGlja3MgPSB0aGlzLmNvbXB1dGVUaWNrTGltaXQoKTtcbiAgICAgIG1heFRpY2tzTGltaXQgPSBtYXhUaWNrc0xpbWl0IHx8IDExO1xuICAgIH1cbiAgICBpZiAobWF4VGlja3NMaW1pdCkge1xuICAgICAgbWF4VGlja3MgPSBNYXRoLm1pbihtYXhUaWNrc0xpbWl0LCBtYXhUaWNrcyk7XG4gICAgfVxuICAgIHJldHVybiBtYXhUaWNrcztcbiAgfVxuICBjb21wdXRlVGlja0xpbWl0KCkge1xuICAgIHJldHVybiBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFk7XG4gIH1cbiAgYnVpbGRUaWNrcygpIHtcbiAgICBjb25zdCBvcHRzID0gdGhpcy5vcHRpb25zO1xuICAgIGNvbnN0IHRpY2tPcHRzID0gb3B0cy50aWNrcztcbiAgICBsZXQgbWF4VGlja3MgPSB0aGlzLmdldFRpY2tMaW1pdCgpO1xuICAgIG1heFRpY2tzID0gTWF0aC5tYXgoMiwgbWF4VGlja3MpO1xuICAgIGNvbnN0IG51bWVyaWNHZW5lcmF0b3JPcHRpb25zID0ge1xuICAgICAgbWF4VGlja3MsXG4gICAgICBib3VuZHM6IG9wdHMuYm91bmRzLFxuICAgICAgbWluOiBvcHRzLm1pbixcbiAgICAgIG1heDogb3B0cy5tYXgsXG4gICAgICBwcmVjaXNpb246IHRpY2tPcHRzLnByZWNpc2lvbixcbiAgICAgIHN0ZXA6IHRpY2tPcHRzLnN0ZXBTaXplLFxuICAgICAgY291bnQ6IHRpY2tPcHRzLmNvdW50LFxuICAgICAgbWF4RGlnaXRzOiB0aGlzLl9tYXhEaWdpdHMoKSxcbiAgICAgIGhvcml6b250YWw6IHRoaXMuaXNIb3Jpem9udGFsKCksXG4gICAgICBtaW5Sb3RhdGlvbjogdGlja09wdHMubWluUm90YXRpb24gfHwgMCxcbiAgICAgIGluY2x1ZGVCb3VuZHM6IHRpY2tPcHRzLmluY2x1ZGVCb3VuZHMgIT09IGZhbHNlXG4gICAgfTtcbiAgICBjb25zdCBkYXRhUmFuZ2UgPSB0aGlzLl9yYW5nZSB8fCB0aGlzO1xuICAgIGNvbnN0IHRpY2tzID0gZ2VuZXJhdGVUaWNrcyQxKG51bWVyaWNHZW5lcmF0b3JPcHRpb25zLCBkYXRhUmFuZ2UpO1xuICAgIGlmIChvcHRzLmJvdW5kcyA9PT0gJ3RpY2tzJykge1xuICAgICAgX3NldE1pbkFuZE1heEJ5S2V5KHRpY2tzLCB0aGlzLCAndmFsdWUnKTtcbiAgICB9XG4gICAgaWYgKG9wdHMucmV2ZXJzZSkge1xuICAgICAgdGlja3MucmV2ZXJzZSgpO1xuICAgICAgdGhpcy5zdGFydCA9IHRoaXMubWF4O1xuICAgICAgdGhpcy5lbmQgPSB0aGlzLm1pbjtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5zdGFydCA9IHRoaXMubWluO1xuICAgICAgdGhpcy5lbmQgPSB0aGlzLm1heDtcbiAgICB9XG4gICAgcmV0dXJuIHRpY2tzO1xuICB9XG4gIGNvbmZpZ3VyZSgpIHtcbiAgICBjb25zdCB0aWNrcyA9IHRoaXMudGlja3M7XG4gICAgbGV0IHN0YXJ0ID0gdGhpcy5taW47XG4gICAgbGV0IGVuZCA9IHRoaXMubWF4O1xuICAgIHN1cGVyLmNvbmZpZ3VyZSgpO1xuICAgIGlmICh0aGlzLm9wdGlvbnMub2Zmc2V0ICYmIHRpY2tzLmxlbmd0aCkge1xuICAgICAgY29uc3Qgb2Zmc2V0ID0gKGVuZCAtIHN0YXJ0KSAvIE1hdGgubWF4KHRpY2tzLmxlbmd0aCAtIDEsIDEpIC8gMjtcbiAgICAgIHN0YXJ0IC09IG9mZnNldDtcbiAgICAgIGVuZCArPSBvZmZzZXQ7XG4gICAgfVxuICAgIHRoaXMuX3N0YXJ0VmFsdWUgPSBzdGFydDtcbiAgICB0aGlzLl9lbmRWYWx1ZSA9IGVuZDtcbiAgICB0aGlzLl92YWx1ZVJhbmdlID0gZW5kIC0gc3RhcnQ7XG4gIH1cbiAgZ2V0TGFiZWxGb3JWYWx1ZSh2YWx1ZSkge1xuICAgIHJldHVybiBmb3JtYXROdW1iZXIodmFsdWUsIHRoaXMuY2hhcnQub3B0aW9ucy5sb2NhbGUsIHRoaXMub3B0aW9ucy50aWNrcy5mb3JtYXQpO1xuICB9XG59XG5cbmNsYXNzIExpbmVhclNjYWxlIGV4dGVuZHMgTGluZWFyU2NhbGVCYXNlIHtcbiAgZGV0ZXJtaW5lRGF0YUxpbWl0cygpIHtcbiAgICBjb25zdCB7bWluLCBtYXh9ID0gdGhpcy5nZXRNaW5NYXgodHJ1ZSk7XG4gICAgdGhpcy5taW4gPSBpc051bWJlckZpbml0ZShtaW4pID8gbWluIDogMDtcbiAgICB0aGlzLm1heCA9IGlzTnVtYmVyRmluaXRlKG1heCkgPyBtYXggOiAxO1xuICAgIHRoaXMuaGFuZGxlVGlja1JhbmdlT3B0aW9ucygpO1xuICB9XG4gIGNvbXB1dGVUaWNrTGltaXQoKSB7XG4gICAgY29uc3QgaG9yaXpvbnRhbCA9IHRoaXMuaXNIb3Jpem9udGFsKCk7XG4gICAgY29uc3QgbGVuZ3RoID0gaG9yaXpvbnRhbCA/IHRoaXMud2lkdGggOiB0aGlzLmhlaWdodDtcbiAgICBjb25zdCBtaW5Sb3RhdGlvbiA9IHRvUmFkaWFucyh0aGlzLm9wdGlvbnMudGlja3MubWluUm90YXRpb24pO1xuICAgIGNvbnN0IHJhdGlvID0gKGhvcml6b250YWwgPyBNYXRoLnNpbihtaW5Sb3RhdGlvbikgOiBNYXRoLmNvcyhtaW5Sb3RhdGlvbikpIHx8IDAuMDAxO1xuICAgIGNvbnN0IHRpY2tGb250ID0gdGhpcy5fcmVzb2x2ZVRpY2tGb250T3B0aW9ucygwKTtcbiAgICByZXR1cm4gTWF0aC5jZWlsKGxlbmd0aCAvIE1hdGgubWluKDQwLCB0aWNrRm9udC5saW5lSGVpZ2h0IC8gcmF0aW8pKTtcbiAgfVxuICBnZXRQaXhlbEZvclZhbHVlKHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlID09PSBudWxsID8gTmFOIDogdGhpcy5nZXRQaXhlbEZvckRlY2ltYWwoKHZhbHVlIC0gdGhpcy5fc3RhcnRWYWx1ZSkgLyB0aGlzLl92YWx1ZVJhbmdlKTtcbiAgfVxuICBnZXRWYWx1ZUZvclBpeGVsKHBpeGVsKSB7XG4gICAgcmV0dXJuIHRoaXMuX3N0YXJ0VmFsdWUgKyB0aGlzLmdldERlY2ltYWxGb3JQaXhlbChwaXhlbCkgKiB0aGlzLl92YWx1ZVJhbmdlO1xuICB9XG59XG5MaW5lYXJTY2FsZS5pZCA9ICdsaW5lYXInO1xuTGluZWFyU2NhbGUuZGVmYXVsdHMgPSB7XG4gIHRpY2tzOiB7XG4gICAgY2FsbGJhY2s6IFRpY2tzLmZvcm1hdHRlcnMubnVtZXJpY1xuICB9XG59O1xuXG5mdW5jdGlvbiBpc01ham9yKHRpY2tWYWwpIHtcbiAgY29uc3QgcmVtYWluID0gdGlja1ZhbCAvIChNYXRoLnBvdygxMCwgTWF0aC5mbG9vcihsb2cxMCh0aWNrVmFsKSkpKTtcbiAgcmV0dXJuIHJlbWFpbiA9PT0gMTtcbn1cbmZ1bmN0aW9uIGdlbmVyYXRlVGlja3MoZ2VuZXJhdGlvbk9wdGlvbnMsIGRhdGFSYW5nZSkge1xuICBjb25zdCBlbmRFeHAgPSBNYXRoLmZsb29yKGxvZzEwKGRhdGFSYW5nZS5tYXgpKTtcbiAgY29uc3QgZW5kU2lnbmlmaWNhbmQgPSBNYXRoLmNlaWwoZGF0YVJhbmdlLm1heCAvIE1hdGgucG93KDEwLCBlbmRFeHApKTtcbiAgY29uc3QgdGlja3MgPSBbXTtcbiAgbGV0IHRpY2tWYWwgPSBmaW5pdGVPckRlZmF1bHQoZ2VuZXJhdGlvbk9wdGlvbnMubWluLCBNYXRoLnBvdygxMCwgTWF0aC5mbG9vcihsb2cxMChkYXRhUmFuZ2UubWluKSkpKTtcbiAgbGV0IGV4cCA9IE1hdGguZmxvb3IobG9nMTAodGlja1ZhbCkpO1xuICBsZXQgc2lnbmlmaWNhbmQgPSBNYXRoLmZsb29yKHRpY2tWYWwgLyBNYXRoLnBvdygxMCwgZXhwKSk7XG4gIGxldCBwcmVjaXNpb24gPSBleHAgPCAwID8gTWF0aC5wb3coMTAsIE1hdGguYWJzKGV4cCkpIDogMTtcbiAgZG8ge1xuICAgIHRpY2tzLnB1c2goe3ZhbHVlOiB0aWNrVmFsLCBtYWpvcjogaXNNYWpvcih0aWNrVmFsKX0pO1xuICAgICsrc2lnbmlmaWNhbmQ7XG4gICAgaWYgKHNpZ25pZmljYW5kID09PSAxMCkge1xuICAgICAgc2lnbmlmaWNhbmQgPSAxO1xuICAgICAgKytleHA7XG4gICAgICBwcmVjaXNpb24gPSBleHAgPj0gMCA/IDEgOiBwcmVjaXNpb247XG4gICAgfVxuICAgIHRpY2tWYWwgPSBNYXRoLnJvdW5kKHNpZ25pZmljYW5kICogTWF0aC5wb3coMTAsIGV4cCkgKiBwcmVjaXNpb24pIC8gcHJlY2lzaW9uO1xuICB9IHdoaWxlIChleHAgPCBlbmRFeHAgfHwgKGV4cCA9PT0gZW5kRXhwICYmIHNpZ25pZmljYW5kIDwgZW5kU2lnbmlmaWNhbmQpKTtcbiAgY29uc3QgbGFzdFRpY2sgPSBmaW5pdGVPckRlZmF1bHQoZ2VuZXJhdGlvbk9wdGlvbnMubWF4LCB0aWNrVmFsKTtcbiAgdGlja3MucHVzaCh7dmFsdWU6IGxhc3RUaWNrLCBtYWpvcjogaXNNYWpvcih0aWNrVmFsKX0pO1xuICByZXR1cm4gdGlja3M7XG59XG5jbGFzcyBMb2dhcml0aG1pY1NjYWxlIGV4dGVuZHMgU2NhbGUge1xuICBjb25zdHJ1Y3RvcihjZmcpIHtcbiAgICBzdXBlcihjZmcpO1xuICAgIHRoaXMuc3RhcnQgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5lbmQgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5fc3RhcnRWYWx1ZSA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLl92YWx1ZVJhbmdlID0gMDtcbiAgfVxuICBwYXJzZShyYXcsIGluZGV4KSB7XG4gICAgY29uc3QgdmFsdWUgPSBMaW5lYXJTY2FsZUJhc2UucHJvdG90eXBlLnBhcnNlLmFwcGx5KHRoaXMsIFtyYXcsIGluZGV4XSk7XG4gICAgaWYgKHZhbHVlID09PSAwKSB7XG4gICAgICB0aGlzLl96ZXJvID0gdHJ1ZTtcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuICAgIHJldHVybiBpc051bWJlckZpbml0ZSh2YWx1ZSkgJiYgdmFsdWUgPiAwID8gdmFsdWUgOiBudWxsO1xuICB9XG4gIGRldGVybWluZURhdGFMaW1pdHMoKSB7XG4gICAgY29uc3Qge21pbiwgbWF4fSA9IHRoaXMuZ2V0TWluTWF4KHRydWUpO1xuICAgIHRoaXMubWluID0gaXNOdW1iZXJGaW5pdGUobWluKSA/IE1hdGgubWF4KDAsIG1pbikgOiBudWxsO1xuICAgIHRoaXMubWF4ID0gaXNOdW1iZXJGaW5pdGUobWF4KSA/IE1hdGgubWF4KDAsIG1heCkgOiBudWxsO1xuICAgIGlmICh0aGlzLm9wdGlvbnMuYmVnaW5BdFplcm8pIHtcbiAgICAgIHRoaXMuX3plcm8gPSB0cnVlO1xuICAgIH1cbiAgICB0aGlzLmhhbmRsZVRpY2tSYW5nZU9wdGlvbnMoKTtcbiAgfVxuICBoYW5kbGVUaWNrUmFuZ2VPcHRpb25zKCkge1xuICAgIGNvbnN0IHttaW5EZWZpbmVkLCBtYXhEZWZpbmVkfSA9IHRoaXMuZ2V0VXNlckJvdW5kcygpO1xuICAgIGxldCBtaW4gPSB0aGlzLm1pbjtcbiAgICBsZXQgbWF4ID0gdGhpcy5tYXg7XG4gICAgY29uc3Qgc2V0TWluID0gdiA9PiAobWluID0gbWluRGVmaW5lZCA/IG1pbiA6IHYpO1xuICAgIGNvbnN0IHNldE1heCA9IHYgPT4gKG1heCA9IG1heERlZmluZWQgPyBtYXggOiB2KTtcbiAgICBjb25zdCBleHAgPSAodiwgbSkgPT4gTWF0aC5wb3coMTAsIE1hdGguZmxvb3IobG9nMTAodikpICsgbSk7XG4gICAgaWYgKG1pbiA9PT0gbWF4KSB7XG4gICAgICBpZiAobWluIDw9IDApIHtcbiAgICAgICAgc2V0TWluKDEpO1xuICAgICAgICBzZXRNYXgoMTApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc2V0TWluKGV4cChtaW4sIC0xKSk7XG4gICAgICAgIHNldE1heChleHAobWF4LCArMSkpO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAobWluIDw9IDApIHtcbiAgICAgIHNldE1pbihleHAobWF4LCAtMSkpO1xuICAgIH1cbiAgICBpZiAobWF4IDw9IDApIHtcbiAgICAgIHNldE1heChleHAobWluLCArMSkpO1xuICAgIH1cbiAgICBpZiAodGhpcy5femVybyAmJiB0aGlzLm1pbiAhPT0gdGhpcy5fc3VnZ2VzdGVkTWluICYmIG1pbiA9PT0gZXhwKHRoaXMubWluLCAwKSkge1xuICAgICAgc2V0TWluKGV4cChtaW4sIC0xKSk7XG4gICAgfVxuICAgIHRoaXMubWluID0gbWluO1xuICAgIHRoaXMubWF4ID0gbWF4O1xuICB9XG4gIGJ1aWxkVGlja3MoKSB7XG4gICAgY29uc3Qgb3B0cyA9IHRoaXMub3B0aW9ucztcbiAgICBjb25zdCBnZW5lcmF0aW9uT3B0aW9ucyA9IHtcbiAgICAgIG1pbjogdGhpcy5fdXNlck1pbixcbiAgICAgIG1heDogdGhpcy5fdXNlck1heFxuICAgIH07XG4gICAgY29uc3QgdGlja3MgPSBnZW5lcmF0ZVRpY2tzKGdlbmVyYXRpb25PcHRpb25zLCB0aGlzKTtcbiAgICBpZiAob3B0cy5ib3VuZHMgPT09ICd0aWNrcycpIHtcbiAgICAgIF9zZXRNaW5BbmRNYXhCeUtleSh0aWNrcywgdGhpcywgJ3ZhbHVlJyk7XG4gICAgfVxuICAgIGlmIChvcHRzLnJldmVyc2UpIHtcbiAgICAgIHRpY2tzLnJldmVyc2UoKTtcbiAgICAgIHRoaXMuc3RhcnQgPSB0aGlzLm1heDtcbiAgICAgIHRoaXMuZW5kID0gdGhpcy5taW47XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuc3RhcnQgPSB0aGlzLm1pbjtcbiAgICAgIHRoaXMuZW5kID0gdGhpcy5tYXg7XG4gICAgfVxuICAgIHJldHVybiB0aWNrcztcbiAgfVxuICBnZXRMYWJlbEZvclZhbHVlKHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlID09PSB1bmRlZmluZWRcbiAgICAgID8gJzAnXG4gICAgICA6IGZvcm1hdE51bWJlcih2YWx1ZSwgdGhpcy5jaGFydC5vcHRpb25zLmxvY2FsZSwgdGhpcy5vcHRpb25zLnRpY2tzLmZvcm1hdCk7XG4gIH1cbiAgY29uZmlndXJlKCkge1xuICAgIGNvbnN0IHN0YXJ0ID0gdGhpcy5taW47XG4gICAgc3VwZXIuY29uZmlndXJlKCk7XG4gICAgdGhpcy5fc3RhcnRWYWx1ZSA9IGxvZzEwKHN0YXJ0KTtcbiAgICB0aGlzLl92YWx1ZVJhbmdlID0gbG9nMTAodGhpcy5tYXgpIC0gbG9nMTAoc3RhcnQpO1xuICB9XG4gIGdldFBpeGVsRm9yVmFsdWUodmFsdWUpIHtcbiAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCB8fCB2YWx1ZSA9PT0gMCkge1xuICAgICAgdmFsdWUgPSB0aGlzLm1pbjtcbiAgICB9XG4gICAgaWYgKHZhbHVlID09PSBudWxsIHx8IGlzTmFOKHZhbHVlKSkge1xuICAgICAgcmV0dXJuIE5hTjtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuZ2V0UGl4ZWxGb3JEZWNpbWFsKHZhbHVlID09PSB0aGlzLm1pblxuICAgICAgPyAwXG4gICAgICA6IChsb2cxMCh2YWx1ZSkgLSB0aGlzLl9zdGFydFZhbHVlKSAvIHRoaXMuX3ZhbHVlUmFuZ2UpO1xuICB9XG4gIGdldFZhbHVlRm9yUGl4ZWwocGl4ZWwpIHtcbiAgICBjb25zdCBkZWNpbWFsID0gdGhpcy5nZXREZWNpbWFsRm9yUGl4ZWwocGl4ZWwpO1xuICAgIHJldHVybiBNYXRoLnBvdygxMCwgdGhpcy5fc3RhcnRWYWx1ZSArIGRlY2ltYWwgKiB0aGlzLl92YWx1ZVJhbmdlKTtcbiAgfVxufVxuTG9nYXJpdGhtaWNTY2FsZS5pZCA9ICdsb2dhcml0aG1pYyc7XG5Mb2dhcml0aG1pY1NjYWxlLmRlZmF1bHRzID0ge1xuICB0aWNrczoge1xuICAgIGNhbGxiYWNrOiBUaWNrcy5mb3JtYXR0ZXJzLmxvZ2FyaXRobWljLFxuICAgIG1ham9yOiB7XG4gICAgICBlbmFibGVkOiB0cnVlXG4gICAgfVxuICB9XG59O1xuXG5mdW5jdGlvbiBnZXRUaWNrQmFja2Ryb3BIZWlnaHQob3B0cykge1xuICBjb25zdCB0aWNrT3B0cyA9IG9wdHMudGlja3M7XG4gIGlmICh0aWNrT3B0cy5kaXNwbGF5ICYmIG9wdHMuZGlzcGxheSkge1xuICAgIGNvbnN0IHBhZGRpbmcgPSB0b1BhZGRpbmcodGlja09wdHMuYmFja2Ryb3BQYWRkaW5nKTtcbiAgICByZXR1cm4gdmFsdWVPckRlZmF1bHQodGlja09wdHMuZm9udCAmJiB0aWNrT3B0cy5mb250LnNpemUsIGRlZmF1bHRzLmZvbnQuc2l6ZSkgKyBwYWRkaW5nLmhlaWdodDtcbiAgfVxuICByZXR1cm4gMDtcbn1cbmZ1bmN0aW9uIG1lYXN1cmVMYWJlbFNpemUoY3R4LCBmb250LCBsYWJlbCkge1xuICBsYWJlbCA9IGlzQXJyYXkobGFiZWwpID8gbGFiZWwgOiBbbGFiZWxdO1xuICByZXR1cm4ge1xuICAgIHc6IF9sb25nZXN0VGV4dChjdHgsIGZvbnQuc3RyaW5nLCBsYWJlbCksXG4gICAgaDogbGFiZWwubGVuZ3RoICogZm9udC5saW5lSGVpZ2h0XG4gIH07XG59XG5mdW5jdGlvbiBkZXRlcm1pbmVMaW1pdHMoYW5nbGUsIHBvcywgc2l6ZSwgbWluLCBtYXgpIHtcbiAgaWYgKGFuZ2xlID09PSBtaW4gfHwgYW5nbGUgPT09IG1heCkge1xuICAgIHJldHVybiB7XG4gICAgICBzdGFydDogcG9zIC0gKHNpemUgLyAyKSxcbiAgICAgIGVuZDogcG9zICsgKHNpemUgLyAyKVxuICAgIH07XG4gIH0gZWxzZSBpZiAoYW5nbGUgPCBtaW4gfHwgYW5nbGUgPiBtYXgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgc3RhcnQ6IHBvcyAtIHNpemUsXG4gICAgICBlbmQ6IHBvc1xuICAgIH07XG4gIH1cbiAgcmV0dXJuIHtcbiAgICBzdGFydDogcG9zLFxuICAgIGVuZDogcG9zICsgc2l6ZVxuICB9O1xufVxuZnVuY3Rpb24gZml0V2l0aFBvaW50TGFiZWxzKHNjYWxlKSB7XG4gIGNvbnN0IG9yaWcgPSB7XG4gICAgbDogc2NhbGUubGVmdCArIHNjYWxlLl9wYWRkaW5nLmxlZnQsXG4gICAgcjogc2NhbGUucmlnaHQgLSBzY2FsZS5fcGFkZGluZy5yaWdodCxcbiAgICB0OiBzY2FsZS50b3AgKyBzY2FsZS5fcGFkZGluZy50b3AsXG4gICAgYjogc2NhbGUuYm90dG9tIC0gc2NhbGUuX3BhZGRpbmcuYm90dG9tXG4gIH07XG4gIGNvbnN0IGxpbWl0cyA9IE9iamVjdC5hc3NpZ24oe30sIG9yaWcpO1xuICBjb25zdCBsYWJlbFNpemVzID0gW107XG4gIGNvbnN0IHBhZGRpbmcgPSBbXTtcbiAgY29uc3QgdmFsdWVDb3VudCA9IHNjYWxlLl9wb2ludExhYmVscy5sZW5ndGg7XG4gIGNvbnN0IHBvaW50TGFiZWxPcHRzID0gc2NhbGUub3B0aW9ucy5wb2ludExhYmVscztcbiAgY29uc3QgYWRkaXRpb25hbEFuZ2xlID0gcG9pbnRMYWJlbE9wdHMuY2VudGVyUG9pbnRMYWJlbHMgPyBQSSAvIHZhbHVlQ291bnQgOiAwO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IHZhbHVlQ291bnQ7IGkrKykge1xuICAgIGNvbnN0IG9wdHMgPSBwb2ludExhYmVsT3B0cy5zZXRDb250ZXh0KHNjYWxlLmdldFBvaW50TGFiZWxDb250ZXh0KGkpKTtcbiAgICBwYWRkaW5nW2ldID0gb3B0cy5wYWRkaW5nO1xuICAgIGNvbnN0IHBvaW50UG9zaXRpb24gPSBzY2FsZS5nZXRQb2ludFBvc2l0aW9uKGksIHNjYWxlLmRyYXdpbmdBcmVhICsgcGFkZGluZ1tpXSwgYWRkaXRpb25hbEFuZ2xlKTtcbiAgICBjb25zdCBwbEZvbnQgPSB0b0ZvbnQob3B0cy5mb250KTtcbiAgICBjb25zdCB0ZXh0U2l6ZSA9IG1lYXN1cmVMYWJlbFNpemUoc2NhbGUuY3R4LCBwbEZvbnQsIHNjYWxlLl9wb2ludExhYmVsc1tpXSk7XG4gICAgbGFiZWxTaXplc1tpXSA9IHRleHRTaXplO1xuICAgIGNvbnN0IGFuZ2xlUmFkaWFucyA9IF9ub3JtYWxpemVBbmdsZShzY2FsZS5nZXRJbmRleEFuZ2xlKGkpICsgYWRkaXRpb25hbEFuZ2xlKTtcbiAgICBjb25zdCBhbmdsZSA9IE1hdGgucm91bmQodG9EZWdyZWVzKGFuZ2xlUmFkaWFucykpO1xuICAgIGNvbnN0IGhMaW1pdHMgPSBkZXRlcm1pbmVMaW1pdHMoYW5nbGUsIHBvaW50UG9zaXRpb24ueCwgdGV4dFNpemUudywgMCwgMTgwKTtcbiAgICBjb25zdCB2TGltaXRzID0gZGV0ZXJtaW5lTGltaXRzKGFuZ2xlLCBwb2ludFBvc2l0aW9uLnksIHRleHRTaXplLmgsIDkwLCAyNzApO1xuICAgIHVwZGF0ZUxpbWl0cyhsaW1pdHMsIG9yaWcsIGFuZ2xlUmFkaWFucywgaExpbWl0cywgdkxpbWl0cyk7XG4gIH1cbiAgc2NhbGUuc2V0Q2VudGVyUG9pbnQoXG4gICAgb3JpZy5sIC0gbGltaXRzLmwsXG4gICAgbGltaXRzLnIgLSBvcmlnLnIsXG4gICAgb3JpZy50IC0gbGltaXRzLnQsXG4gICAgbGltaXRzLmIgLSBvcmlnLmJcbiAgKTtcbiAgc2NhbGUuX3BvaW50TGFiZWxJdGVtcyA9IGJ1aWxkUG9pbnRMYWJlbEl0ZW1zKHNjYWxlLCBsYWJlbFNpemVzLCBwYWRkaW5nKTtcbn1cbmZ1bmN0aW9uIHVwZGF0ZUxpbWl0cyhsaW1pdHMsIG9yaWcsIGFuZ2xlLCBoTGltaXRzLCB2TGltaXRzKSB7XG4gIGNvbnN0IHNpbiA9IE1hdGguYWJzKE1hdGguc2luKGFuZ2xlKSk7XG4gIGNvbnN0IGNvcyA9IE1hdGguYWJzKE1hdGguY29zKGFuZ2xlKSk7XG4gIGxldCB4ID0gMDtcbiAgbGV0IHkgPSAwO1xuICBpZiAoaExpbWl0cy5zdGFydCA8IG9yaWcubCkge1xuICAgIHggPSAob3JpZy5sIC0gaExpbWl0cy5zdGFydCkgLyBzaW47XG4gICAgbGltaXRzLmwgPSBNYXRoLm1pbihsaW1pdHMubCwgb3JpZy5sIC0geCk7XG4gIH0gZWxzZSBpZiAoaExpbWl0cy5lbmQgPiBvcmlnLnIpIHtcbiAgICB4ID0gKGhMaW1pdHMuZW5kIC0gb3JpZy5yKSAvIHNpbjtcbiAgICBsaW1pdHMuciA9IE1hdGgubWF4KGxpbWl0cy5yLCBvcmlnLnIgKyB4KTtcbiAgfVxuICBpZiAodkxpbWl0cy5zdGFydCA8IG9yaWcudCkge1xuICAgIHkgPSAob3JpZy50IC0gdkxpbWl0cy5zdGFydCkgLyBjb3M7XG4gICAgbGltaXRzLnQgPSBNYXRoLm1pbihsaW1pdHMudCwgb3JpZy50IC0geSk7XG4gIH0gZWxzZSBpZiAodkxpbWl0cy5lbmQgPiBvcmlnLmIpIHtcbiAgICB5ID0gKHZMaW1pdHMuZW5kIC0gb3JpZy5iKSAvIGNvcztcbiAgICBsaW1pdHMuYiA9IE1hdGgubWF4KGxpbWl0cy5iLCBvcmlnLmIgKyB5KTtcbiAgfVxufVxuZnVuY3Rpb24gYnVpbGRQb2ludExhYmVsSXRlbXMoc2NhbGUsIGxhYmVsU2l6ZXMsIHBhZGRpbmcpIHtcbiAgY29uc3QgaXRlbXMgPSBbXTtcbiAgY29uc3QgdmFsdWVDb3VudCA9IHNjYWxlLl9wb2ludExhYmVscy5sZW5ndGg7XG4gIGNvbnN0IG9wdHMgPSBzY2FsZS5vcHRpb25zO1xuICBjb25zdCBleHRyYSA9IGdldFRpY2tCYWNrZHJvcEhlaWdodChvcHRzKSAvIDI7XG4gIGNvbnN0IG91dGVyRGlzdGFuY2UgPSBzY2FsZS5kcmF3aW5nQXJlYTtcbiAgY29uc3QgYWRkaXRpb25hbEFuZ2xlID0gb3B0cy5wb2ludExhYmVscy5jZW50ZXJQb2ludExhYmVscyA/IFBJIC8gdmFsdWVDb3VudCA6IDA7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgdmFsdWVDb3VudDsgaSsrKSB7XG4gICAgY29uc3QgcG9pbnRMYWJlbFBvc2l0aW9uID0gc2NhbGUuZ2V0UG9pbnRQb3NpdGlvbihpLCBvdXRlckRpc3RhbmNlICsgZXh0cmEgKyBwYWRkaW5nW2ldLCBhZGRpdGlvbmFsQW5nbGUpO1xuICAgIGNvbnN0IGFuZ2xlID0gTWF0aC5yb3VuZCh0b0RlZ3JlZXMoX25vcm1hbGl6ZUFuZ2xlKHBvaW50TGFiZWxQb3NpdGlvbi5hbmdsZSArIEhBTEZfUEkpKSk7XG4gICAgY29uc3Qgc2l6ZSA9IGxhYmVsU2l6ZXNbaV07XG4gICAgY29uc3QgeSA9IHlGb3JBbmdsZShwb2ludExhYmVsUG9zaXRpb24ueSwgc2l6ZS5oLCBhbmdsZSk7XG4gICAgY29uc3QgdGV4dEFsaWduID0gZ2V0VGV4dEFsaWduRm9yQW5nbGUoYW5nbGUpO1xuICAgIGNvbnN0IGxlZnQgPSBsZWZ0Rm9yVGV4dEFsaWduKHBvaW50TGFiZWxQb3NpdGlvbi54LCBzaXplLncsIHRleHRBbGlnbik7XG4gICAgaXRlbXMucHVzaCh7XG4gICAgICB4OiBwb2ludExhYmVsUG9zaXRpb24ueCxcbiAgICAgIHksXG4gICAgICB0ZXh0QWxpZ24sXG4gICAgICBsZWZ0LFxuICAgICAgdG9wOiB5LFxuICAgICAgcmlnaHQ6IGxlZnQgKyBzaXplLncsXG4gICAgICBib3R0b206IHkgKyBzaXplLmhcbiAgICB9KTtcbiAgfVxuICByZXR1cm4gaXRlbXM7XG59XG5mdW5jdGlvbiBnZXRUZXh0QWxpZ25Gb3JBbmdsZShhbmdsZSkge1xuICBpZiAoYW5nbGUgPT09IDAgfHwgYW5nbGUgPT09IDE4MCkge1xuICAgIHJldHVybiAnY2VudGVyJztcbiAgfSBlbHNlIGlmIChhbmdsZSA8IDE4MCkge1xuICAgIHJldHVybiAnbGVmdCc7XG4gIH1cbiAgcmV0dXJuICdyaWdodCc7XG59XG5mdW5jdGlvbiBsZWZ0Rm9yVGV4dEFsaWduKHgsIHcsIGFsaWduKSB7XG4gIGlmIChhbGlnbiA9PT0gJ3JpZ2h0Jykge1xuICAgIHggLT0gdztcbiAgfSBlbHNlIGlmIChhbGlnbiA9PT0gJ2NlbnRlcicpIHtcbiAgICB4IC09ICh3IC8gMik7XG4gIH1cbiAgcmV0dXJuIHg7XG59XG5mdW5jdGlvbiB5Rm9yQW5nbGUoeSwgaCwgYW5nbGUpIHtcbiAgaWYgKGFuZ2xlID09PSA5MCB8fCBhbmdsZSA9PT0gMjcwKSB7XG4gICAgeSAtPSAoaCAvIDIpO1xuICB9IGVsc2UgaWYgKGFuZ2xlID4gMjcwIHx8IGFuZ2xlIDwgOTApIHtcbiAgICB5IC09IGg7XG4gIH1cbiAgcmV0dXJuIHk7XG59XG5mdW5jdGlvbiBkcmF3UG9pbnRMYWJlbHMoc2NhbGUsIGxhYmVsQ291bnQpIHtcbiAgY29uc3Qge2N0eCwgb3B0aW9uczoge3BvaW50TGFiZWxzfX0gPSBzY2FsZTtcbiAgZm9yIChsZXQgaSA9IGxhYmVsQ291bnQgLSAxOyBpID49IDA7IGktLSkge1xuICAgIGNvbnN0IG9wdHNBdEluZGV4ID0gcG9pbnRMYWJlbHMuc2V0Q29udGV4dChzY2FsZS5nZXRQb2ludExhYmVsQ29udGV4dChpKSk7XG4gICAgY29uc3QgcGxGb250ID0gdG9Gb250KG9wdHNBdEluZGV4LmZvbnQpO1xuICAgIGNvbnN0IHt4LCB5LCB0ZXh0QWxpZ24sIGxlZnQsIHRvcCwgcmlnaHQsIGJvdHRvbX0gPSBzY2FsZS5fcG9pbnRMYWJlbEl0ZW1zW2ldO1xuICAgIGNvbnN0IHtiYWNrZHJvcENvbG9yfSA9IG9wdHNBdEluZGV4O1xuICAgIGlmICghaXNOdWxsT3JVbmRlZihiYWNrZHJvcENvbG9yKSkge1xuICAgICAgY29uc3QgcGFkZGluZyA9IHRvUGFkZGluZyhvcHRzQXRJbmRleC5iYWNrZHJvcFBhZGRpbmcpO1xuICAgICAgY3R4LmZpbGxTdHlsZSA9IGJhY2tkcm9wQ29sb3I7XG4gICAgICBjdHguZmlsbFJlY3QobGVmdCAtIHBhZGRpbmcubGVmdCwgdG9wIC0gcGFkZGluZy50b3AsIHJpZ2h0IC0gbGVmdCArIHBhZGRpbmcud2lkdGgsIGJvdHRvbSAtIHRvcCArIHBhZGRpbmcuaGVpZ2h0KTtcbiAgICB9XG4gICAgcmVuZGVyVGV4dChcbiAgICAgIGN0eCxcbiAgICAgIHNjYWxlLl9wb2ludExhYmVsc1tpXSxcbiAgICAgIHgsXG4gICAgICB5ICsgKHBsRm9udC5saW5lSGVpZ2h0IC8gMiksXG4gICAgICBwbEZvbnQsXG4gICAgICB7XG4gICAgICAgIGNvbG9yOiBvcHRzQXRJbmRleC5jb2xvcixcbiAgICAgICAgdGV4dEFsaWduOiB0ZXh0QWxpZ24sXG4gICAgICAgIHRleHRCYXNlbGluZTogJ21pZGRsZSdcbiAgICAgIH1cbiAgICApO1xuICB9XG59XG5mdW5jdGlvbiBwYXRoUmFkaXVzTGluZShzY2FsZSwgcmFkaXVzLCBjaXJjdWxhciwgbGFiZWxDb3VudCkge1xuICBjb25zdCB7Y3R4fSA9IHNjYWxlO1xuICBpZiAoY2lyY3VsYXIpIHtcbiAgICBjdHguYXJjKHNjYWxlLnhDZW50ZXIsIHNjYWxlLnlDZW50ZXIsIHJhZGl1cywgMCwgVEFVKTtcbiAgfSBlbHNlIHtcbiAgICBsZXQgcG9pbnRQb3NpdGlvbiA9IHNjYWxlLmdldFBvaW50UG9zaXRpb24oMCwgcmFkaXVzKTtcbiAgICBjdHgubW92ZVRvKHBvaW50UG9zaXRpb24ueCwgcG9pbnRQb3NpdGlvbi55KTtcbiAgICBmb3IgKGxldCBpID0gMTsgaSA8IGxhYmVsQ291bnQ7IGkrKykge1xuICAgICAgcG9pbnRQb3NpdGlvbiA9IHNjYWxlLmdldFBvaW50UG9zaXRpb24oaSwgcmFkaXVzKTtcbiAgICAgIGN0eC5saW5lVG8ocG9pbnRQb3NpdGlvbi54LCBwb2ludFBvc2l0aW9uLnkpO1xuICAgIH1cbiAgfVxufVxuZnVuY3Rpb24gZHJhd1JhZGl1c0xpbmUoc2NhbGUsIGdyaWRMaW5lT3B0cywgcmFkaXVzLCBsYWJlbENvdW50KSB7XG4gIGNvbnN0IGN0eCA9IHNjYWxlLmN0eDtcbiAgY29uc3QgY2lyY3VsYXIgPSBncmlkTGluZU9wdHMuY2lyY3VsYXI7XG4gIGNvbnN0IHtjb2xvciwgbGluZVdpZHRofSA9IGdyaWRMaW5lT3B0cztcbiAgaWYgKCghY2lyY3VsYXIgJiYgIWxhYmVsQ291bnQpIHx8ICFjb2xvciB8fCAhbGluZVdpZHRoIHx8IHJhZGl1cyA8IDApIHtcbiAgICByZXR1cm47XG4gIH1cbiAgY3R4LnNhdmUoKTtcbiAgY3R4LnN0cm9rZVN0eWxlID0gY29sb3I7XG4gIGN0eC5saW5lV2lkdGggPSBsaW5lV2lkdGg7XG4gIGN0eC5zZXRMaW5lRGFzaChncmlkTGluZU9wdHMuYm9yZGVyRGFzaCk7XG4gIGN0eC5saW5lRGFzaE9mZnNldCA9IGdyaWRMaW5lT3B0cy5ib3JkZXJEYXNoT2Zmc2V0O1xuICBjdHguYmVnaW5QYXRoKCk7XG4gIHBhdGhSYWRpdXNMaW5lKHNjYWxlLCByYWRpdXMsIGNpcmN1bGFyLCBsYWJlbENvdW50KTtcbiAgY3R4LmNsb3NlUGF0aCgpO1xuICBjdHguc3Ryb2tlKCk7XG4gIGN0eC5yZXN0b3JlKCk7XG59XG5mdW5jdGlvbiBjcmVhdGVQb2ludExhYmVsQ29udGV4dChwYXJlbnQsIGluZGV4LCBsYWJlbCkge1xuICByZXR1cm4gY3JlYXRlQ29udGV4dChwYXJlbnQsIHtcbiAgICBsYWJlbCxcbiAgICBpbmRleCxcbiAgICB0eXBlOiAncG9pbnRMYWJlbCdcbiAgfSk7XG59XG5jbGFzcyBSYWRpYWxMaW5lYXJTY2FsZSBleHRlbmRzIExpbmVhclNjYWxlQmFzZSB7XG4gIGNvbnN0cnVjdG9yKGNmZykge1xuICAgIHN1cGVyKGNmZyk7XG4gICAgdGhpcy54Q2VudGVyID0gdW5kZWZpbmVkO1xuICAgIHRoaXMueUNlbnRlciA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLmRyYXdpbmdBcmVhID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuX3BvaW50TGFiZWxzID0gW107XG4gICAgdGhpcy5fcG9pbnRMYWJlbEl0ZW1zID0gW107XG4gIH1cbiAgc2V0RGltZW5zaW9ucygpIHtcbiAgICBjb25zdCBwYWRkaW5nID0gdGhpcy5fcGFkZGluZyA9IHRvUGFkZGluZyhnZXRUaWNrQmFja2Ryb3BIZWlnaHQodGhpcy5vcHRpb25zKSAvIDIpO1xuICAgIGNvbnN0IHcgPSB0aGlzLndpZHRoID0gdGhpcy5tYXhXaWR0aCAtIHBhZGRpbmcud2lkdGg7XG4gICAgY29uc3QgaCA9IHRoaXMuaGVpZ2h0ID0gdGhpcy5tYXhIZWlnaHQgLSBwYWRkaW5nLmhlaWdodDtcbiAgICB0aGlzLnhDZW50ZXIgPSBNYXRoLmZsb29yKHRoaXMubGVmdCArIHcgLyAyICsgcGFkZGluZy5sZWZ0KTtcbiAgICB0aGlzLnlDZW50ZXIgPSBNYXRoLmZsb29yKHRoaXMudG9wICsgaCAvIDIgKyBwYWRkaW5nLnRvcCk7XG4gICAgdGhpcy5kcmF3aW5nQXJlYSA9IE1hdGguZmxvb3IoTWF0aC5taW4odywgaCkgLyAyKTtcbiAgfVxuICBkZXRlcm1pbmVEYXRhTGltaXRzKCkge1xuICAgIGNvbnN0IHttaW4sIG1heH0gPSB0aGlzLmdldE1pbk1heChmYWxzZSk7XG4gICAgdGhpcy5taW4gPSBpc051bWJlckZpbml0ZShtaW4pICYmICFpc05hTihtaW4pID8gbWluIDogMDtcbiAgICB0aGlzLm1heCA9IGlzTnVtYmVyRmluaXRlKG1heCkgJiYgIWlzTmFOKG1heCkgPyBtYXggOiAwO1xuICAgIHRoaXMuaGFuZGxlVGlja1JhbmdlT3B0aW9ucygpO1xuICB9XG4gIGNvbXB1dGVUaWNrTGltaXQoKSB7XG4gICAgcmV0dXJuIE1hdGguY2VpbCh0aGlzLmRyYXdpbmdBcmVhIC8gZ2V0VGlja0JhY2tkcm9wSGVpZ2h0KHRoaXMub3B0aW9ucykpO1xuICB9XG4gIGdlbmVyYXRlVGlja0xhYmVscyh0aWNrcykge1xuICAgIExpbmVhclNjYWxlQmFzZS5wcm90b3R5cGUuZ2VuZXJhdGVUaWNrTGFiZWxzLmNhbGwodGhpcywgdGlja3MpO1xuICAgIHRoaXMuX3BvaW50TGFiZWxzID0gdGhpcy5nZXRMYWJlbHMoKVxuICAgICAgLm1hcCgodmFsdWUsIGluZGV4KSA9PiB7XG4gICAgICAgIGNvbnN0IGxhYmVsID0gY2FsbGJhY2sodGhpcy5vcHRpb25zLnBvaW50TGFiZWxzLmNhbGxiYWNrLCBbdmFsdWUsIGluZGV4XSwgdGhpcyk7XG4gICAgICAgIHJldHVybiBsYWJlbCB8fCBsYWJlbCA9PT0gMCA/IGxhYmVsIDogJyc7XG4gICAgICB9KVxuICAgICAgLmZpbHRlcigodiwgaSkgPT4gdGhpcy5jaGFydC5nZXREYXRhVmlzaWJpbGl0eShpKSk7XG4gIH1cbiAgZml0KCkge1xuICAgIGNvbnN0IG9wdHMgPSB0aGlzLm9wdGlvbnM7XG4gICAgaWYgKG9wdHMuZGlzcGxheSAmJiBvcHRzLnBvaW50TGFiZWxzLmRpc3BsYXkpIHtcbiAgICAgIGZpdFdpdGhQb2ludExhYmVscyh0aGlzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5zZXRDZW50ZXJQb2ludCgwLCAwLCAwLCAwKTtcbiAgICB9XG4gIH1cbiAgc2V0Q2VudGVyUG9pbnQobGVmdE1vdmVtZW50LCByaWdodE1vdmVtZW50LCB0b3BNb3ZlbWVudCwgYm90dG9tTW92ZW1lbnQpIHtcbiAgICB0aGlzLnhDZW50ZXIgKz0gTWF0aC5mbG9vcigobGVmdE1vdmVtZW50IC0gcmlnaHRNb3ZlbWVudCkgLyAyKTtcbiAgICB0aGlzLnlDZW50ZXIgKz0gTWF0aC5mbG9vcigodG9wTW92ZW1lbnQgLSBib3R0b21Nb3ZlbWVudCkgLyAyKTtcbiAgICB0aGlzLmRyYXdpbmdBcmVhIC09IE1hdGgubWluKHRoaXMuZHJhd2luZ0FyZWEgLyAyLCBNYXRoLm1heChsZWZ0TW92ZW1lbnQsIHJpZ2h0TW92ZW1lbnQsIHRvcE1vdmVtZW50LCBib3R0b21Nb3ZlbWVudCkpO1xuICB9XG4gIGdldEluZGV4QW5nbGUoaW5kZXgpIHtcbiAgICBjb25zdCBhbmdsZU11bHRpcGxpZXIgPSBUQVUgLyAodGhpcy5fcG9pbnRMYWJlbHMubGVuZ3RoIHx8IDEpO1xuICAgIGNvbnN0IHN0YXJ0QW5nbGUgPSB0aGlzLm9wdGlvbnMuc3RhcnRBbmdsZSB8fCAwO1xuICAgIHJldHVybiBfbm9ybWFsaXplQW5nbGUoaW5kZXggKiBhbmdsZU11bHRpcGxpZXIgKyB0b1JhZGlhbnMoc3RhcnRBbmdsZSkpO1xuICB9XG4gIGdldERpc3RhbmNlRnJvbUNlbnRlckZvclZhbHVlKHZhbHVlKSB7XG4gICAgaWYgKGlzTnVsbE9yVW5kZWYodmFsdWUpKSB7XG4gICAgICByZXR1cm4gTmFOO1xuICAgIH1cbiAgICBjb25zdCBzY2FsaW5nRmFjdG9yID0gdGhpcy5kcmF3aW5nQXJlYSAvICh0aGlzLm1heCAtIHRoaXMubWluKTtcbiAgICBpZiAodGhpcy5vcHRpb25zLnJldmVyc2UpIHtcbiAgICAgIHJldHVybiAodGhpcy5tYXggLSB2YWx1ZSkgKiBzY2FsaW5nRmFjdG9yO1xuICAgIH1cbiAgICByZXR1cm4gKHZhbHVlIC0gdGhpcy5taW4pICogc2NhbGluZ0ZhY3RvcjtcbiAgfVxuICBnZXRWYWx1ZUZvckRpc3RhbmNlRnJvbUNlbnRlcihkaXN0YW5jZSkge1xuICAgIGlmIChpc051bGxPclVuZGVmKGRpc3RhbmNlKSkge1xuICAgICAgcmV0dXJuIE5hTjtcbiAgICB9XG4gICAgY29uc3Qgc2NhbGVkRGlzdGFuY2UgPSBkaXN0YW5jZSAvICh0aGlzLmRyYXdpbmdBcmVhIC8gKHRoaXMubWF4IC0gdGhpcy5taW4pKTtcbiAgICByZXR1cm4gdGhpcy5vcHRpb25zLnJldmVyc2UgPyB0aGlzLm1heCAtIHNjYWxlZERpc3RhbmNlIDogdGhpcy5taW4gKyBzY2FsZWREaXN0YW5jZTtcbiAgfVxuICBnZXRQb2ludExhYmVsQ29udGV4dChpbmRleCkge1xuICAgIGNvbnN0IHBvaW50TGFiZWxzID0gdGhpcy5fcG9pbnRMYWJlbHMgfHwgW107XG4gICAgaWYgKGluZGV4ID49IDAgJiYgaW5kZXggPCBwb2ludExhYmVscy5sZW5ndGgpIHtcbiAgICAgIGNvbnN0IHBvaW50TGFiZWwgPSBwb2ludExhYmVsc1tpbmRleF07XG4gICAgICByZXR1cm4gY3JlYXRlUG9pbnRMYWJlbENvbnRleHQodGhpcy5nZXRDb250ZXh0KCksIGluZGV4LCBwb2ludExhYmVsKTtcbiAgICB9XG4gIH1cbiAgZ2V0UG9pbnRQb3NpdGlvbihpbmRleCwgZGlzdGFuY2VGcm9tQ2VudGVyLCBhZGRpdGlvbmFsQW5nbGUgPSAwKSB7XG4gICAgY29uc3QgYW5nbGUgPSB0aGlzLmdldEluZGV4QW5nbGUoaW5kZXgpIC0gSEFMRl9QSSArIGFkZGl0aW9uYWxBbmdsZTtcbiAgICByZXR1cm4ge1xuICAgICAgeDogTWF0aC5jb3MoYW5nbGUpICogZGlzdGFuY2VGcm9tQ2VudGVyICsgdGhpcy54Q2VudGVyLFxuICAgICAgeTogTWF0aC5zaW4oYW5nbGUpICogZGlzdGFuY2VGcm9tQ2VudGVyICsgdGhpcy55Q2VudGVyLFxuICAgICAgYW5nbGVcbiAgICB9O1xuICB9XG4gIGdldFBvaW50UG9zaXRpb25Gb3JWYWx1ZShpbmRleCwgdmFsdWUpIHtcbiAgICByZXR1cm4gdGhpcy5nZXRQb2ludFBvc2l0aW9uKGluZGV4LCB0aGlzLmdldERpc3RhbmNlRnJvbUNlbnRlckZvclZhbHVlKHZhbHVlKSk7XG4gIH1cbiAgZ2V0QmFzZVBvc2l0aW9uKGluZGV4KSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0UG9pbnRQb3NpdGlvbkZvclZhbHVlKGluZGV4IHx8IDAsIHRoaXMuZ2V0QmFzZVZhbHVlKCkpO1xuICB9XG4gIGdldFBvaW50TGFiZWxQb3NpdGlvbihpbmRleCkge1xuICAgIGNvbnN0IHtsZWZ0LCB0b3AsIHJpZ2h0LCBib3R0b219ID0gdGhpcy5fcG9pbnRMYWJlbEl0ZW1zW2luZGV4XTtcbiAgICByZXR1cm4ge1xuICAgICAgbGVmdCxcbiAgICAgIHRvcCxcbiAgICAgIHJpZ2h0LFxuICAgICAgYm90dG9tLFxuICAgIH07XG4gIH1cbiAgZHJhd0JhY2tncm91bmQoKSB7XG4gICAgY29uc3Qge2JhY2tncm91bmRDb2xvciwgZ3JpZDoge2NpcmN1bGFyfX0gPSB0aGlzLm9wdGlvbnM7XG4gICAgaWYgKGJhY2tncm91bmRDb2xvcikge1xuICAgICAgY29uc3QgY3R4ID0gdGhpcy5jdHg7XG4gICAgICBjdHguc2F2ZSgpO1xuICAgICAgY3R4LmJlZ2luUGF0aCgpO1xuICAgICAgcGF0aFJhZGl1c0xpbmUodGhpcywgdGhpcy5nZXREaXN0YW5jZUZyb21DZW50ZXJGb3JWYWx1ZSh0aGlzLl9lbmRWYWx1ZSksIGNpcmN1bGFyLCB0aGlzLl9wb2ludExhYmVscy5sZW5ndGgpO1xuICAgICAgY3R4LmNsb3NlUGF0aCgpO1xuICAgICAgY3R4LmZpbGxTdHlsZSA9IGJhY2tncm91bmRDb2xvcjtcbiAgICAgIGN0eC5maWxsKCk7XG4gICAgICBjdHgucmVzdG9yZSgpO1xuICAgIH1cbiAgfVxuICBkcmF3R3JpZCgpIHtcbiAgICBjb25zdCBjdHggPSB0aGlzLmN0eDtcbiAgICBjb25zdCBvcHRzID0gdGhpcy5vcHRpb25zO1xuICAgIGNvbnN0IHthbmdsZUxpbmVzLCBncmlkfSA9IG9wdHM7XG4gICAgY29uc3QgbGFiZWxDb3VudCA9IHRoaXMuX3BvaW50TGFiZWxzLmxlbmd0aDtcbiAgICBsZXQgaSwgb2Zmc2V0LCBwb3NpdGlvbjtcbiAgICBpZiAob3B0cy5wb2ludExhYmVscy5kaXNwbGF5KSB7XG4gICAgICBkcmF3UG9pbnRMYWJlbHModGhpcywgbGFiZWxDb3VudCk7XG4gICAgfVxuICAgIGlmIChncmlkLmRpc3BsYXkpIHtcbiAgICAgIHRoaXMudGlja3MuZm9yRWFjaCgodGljaywgaW5kZXgpID0+IHtcbiAgICAgICAgaWYgKGluZGV4ICE9PSAwKSB7XG4gICAgICAgICAgb2Zmc2V0ID0gdGhpcy5nZXREaXN0YW5jZUZyb21DZW50ZXJGb3JWYWx1ZSh0aWNrLnZhbHVlKTtcbiAgICAgICAgICBjb25zdCBvcHRzQXRJbmRleCA9IGdyaWQuc2V0Q29udGV4dCh0aGlzLmdldENvbnRleHQoaW5kZXggLSAxKSk7XG4gICAgICAgICAgZHJhd1JhZGl1c0xpbmUodGhpcywgb3B0c0F0SW5kZXgsIG9mZnNldCwgbGFiZWxDb3VudCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgICBpZiAoYW5nbGVMaW5lcy5kaXNwbGF5KSB7XG4gICAgICBjdHguc2F2ZSgpO1xuICAgICAgZm9yIChpID0gbGFiZWxDb3VudCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgIGNvbnN0IG9wdHNBdEluZGV4ID0gYW5nbGVMaW5lcy5zZXRDb250ZXh0KHRoaXMuZ2V0UG9pbnRMYWJlbENvbnRleHQoaSkpO1xuICAgICAgICBjb25zdCB7Y29sb3IsIGxpbmVXaWR0aH0gPSBvcHRzQXRJbmRleDtcbiAgICAgICAgaWYgKCFsaW5lV2lkdGggfHwgIWNvbG9yKSB7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgY3R4LmxpbmVXaWR0aCA9IGxpbmVXaWR0aDtcbiAgICAgICAgY3R4LnN0cm9rZVN0eWxlID0gY29sb3I7XG4gICAgICAgIGN0eC5zZXRMaW5lRGFzaChvcHRzQXRJbmRleC5ib3JkZXJEYXNoKTtcbiAgICAgICAgY3R4LmxpbmVEYXNoT2Zmc2V0ID0gb3B0c0F0SW5kZXguYm9yZGVyRGFzaE9mZnNldDtcbiAgICAgICAgb2Zmc2V0ID0gdGhpcy5nZXREaXN0YW5jZUZyb21DZW50ZXJGb3JWYWx1ZShvcHRzLnRpY2tzLnJldmVyc2UgPyB0aGlzLm1pbiA6IHRoaXMubWF4KTtcbiAgICAgICAgcG9zaXRpb24gPSB0aGlzLmdldFBvaW50UG9zaXRpb24oaSwgb2Zmc2V0KTtcbiAgICAgICAgY3R4LmJlZ2luUGF0aCgpO1xuICAgICAgICBjdHgubW92ZVRvKHRoaXMueENlbnRlciwgdGhpcy55Q2VudGVyKTtcbiAgICAgICAgY3R4LmxpbmVUbyhwb3NpdGlvbi54LCBwb3NpdGlvbi55KTtcbiAgICAgICAgY3R4LnN0cm9rZSgpO1xuICAgICAgfVxuICAgICAgY3R4LnJlc3RvcmUoKTtcbiAgICB9XG4gIH1cbiAgZHJhd0JvcmRlcigpIHt9XG4gIGRyYXdMYWJlbHMoKSB7XG4gICAgY29uc3QgY3R4ID0gdGhpcy5jdHg7XG4gICAgY29uc3Qgb3B0cyA9IHRoaXMub3B0aW9ucztcbiAgICBjb25zdCB0aWNrT3B0cyA9IG9wdHMudGlja3M7XG4gICAgaWYgKCF0aWNrT3B0cy5kaXNwbGF5KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IHN0YXJ0QW5nbGUgPSB0aGlzLmdldEluZGV4QW5nbGUoMCk7XG4gICAgbGV0IG9mZnNldCwgd2lkdGg7XG4gICAgY3R4LnNhdmUoKTtcbiAgICBjdHgudHJhbnNsYXRlKHRoaXMueENlbnRlciwgdGhpcy55Q2VudGVyKTtcbiAgICBjdHgucm90YXRlKHN0YXJ0QW5nbGUpO1xuICAgIGN0eC50ZXh0QWxpZ24gPSAnY2VudGVyJztcbiAgICBjdHgudGV4dEJhc2VsaW5lID0gJ21pZGRsZSc7XG4gICAgdGhpcy50aWNrcy5mb3JFYWNoKCh0aWNrLCBpbmRleCkgPT4ge1xuICAgICAgaWYgKGluZGV4ID09PSAwICYmICFvcHRzLnJldmVyc2UpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgY29uc3Qgb3B0c0F0SW5kZXggPSB0aWNrT3B0cy5zZXRDb250ZXh0KHRoaXMuZ2V0Q29udGV4dChpbmRleCkpO1xuICAgICAgY29uc3QgdGlja0ZvbnQgPSB0b0ZvbnQob3B0c0F0SW5kZXguZm9udCk7XG4gICAgICBvZmZzZXQgPSB0aGlzLmdldERpc3RhbmNlRnJvbUNlbnRlckZvclZhbHVlKHRoaXMudGlja3NbaW5kZXhdLnZhbHVlKTtcbiAgICAgIGlmIChvcHRzQXRJbmRleC5zaG93TGFiZWxCYWNrZHJvcCkge1xuICAgICAgICBjdHguZm9udCA9IHRpY2tGb250LnN0cmluZztcbiAgICAgICAgd2lkdGggPSBjdHgubWVhc3VyZVRleHQodGljay5sYWJlbCkud2lkdGg7XG4gICAgICAgIGN0eC5maWxsU3R5bGUgPSBvcHRzQXRJbmRleC5iYWNrZHJvcENvbG9yO1xuICAgICAgICBjb25zdCBwYWRkaW5nID0gdG9QYWRkaW5nKG9wdHNBdEluZGV4LmJhY2tkcm9wUGFkZGluZyk7XG4gICAgICAgIGN0eC5maWxsUmVjdChcbiAgICAgICAgICAtd2lkdGggLyAyIC0gcGFkZGluZy5sZWZ0LFxuICAgICAgICAgIC1vZmZzZXQgLSB0aWNrRm9udC5zaXplIC8gMiAtIHBhZGRpbmcudG9wLFxuICAgICAgICAgIHdpZHRoICsgcGFkZGluZy53aWR0aCxcbiAgICAgICAgICB0aWNrRm9udC5zaXplICsgcGFkZGluZy5oZWlnaHRcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIHJlbmRlclRleHQoY3R4LCB0aWNrLmxhYmVsLCAwLCAtb2Zmc2V0LCB0aWNrRm9udCwge1xuICAgICAgICBjb2xvcjogb3B0c0F0SW5kZXguY29sb3IsXG4gICAgICB9KTtcbiAgICB9KTtcbiAgICBjdHgucmVzdG9yZSgpO1xuICB9XG4gIGRyYXdUaXRsZSgpIHt9XG59XG5SYWRpYWxMaW5lYXJTY2FsZS5pZCA9ICdyYWRpYWxMaW5lYXInO1xuUmFkaWFsTGluZWFyU2NhbGUuZGVmYXVsdHMgPSB7XG4gIGRpc3BsYXk6IHRydWUsXG4gIGFuaW1hdGU6IHRydWUsXG4gIHBvc2l0aW9uOiAnY2hhcnRBcmVhJyxcbiAgYW5nbGVMaW5lczoge1xuICAgIGRpc3BsYXk6IHRydWUsXG4gICAgbGluZVdpZHRoOiAxLFxuICAgIGJvcmRlckRhc2g6IFtdLFxuICAgIGJvcmRlckRhc2hPZmZzZXQ6IDAuMFxuICB9LFxuICBncmlkOiB7XG4gICAgY2lyY3VsYXI6IGZhbHNlXG4gIH0sXG4gIHN0YXJ0QW5nbGU6IDAsXG4gIHRpY2tzOiB7XG4gICAgc2hvd0xhYmVsQmFja2Ryb3A6IHRydWUsXG4gICAgY2FsbGJhY2s6IFRpY2tzLmZvcm1hdHRlcnMubnVtZXJpY1xuICB9LFxuICBwb2ludExhYmVsczoge1xuICAgIGJhY2tkcm9wQ29sb3I6IHVuZGVmaW5lZCxcbiAgICBiYWNrZHJvcFBhZGRpbmc6IDIsXG4gICAgZGlzcGxheTogdHJ1ZSxcbiAgICBmb250OiB7XG4gICAgICBzaXplOiAxMFxuICAgIH0sXG4gICAgY2FsbGJhY2sobGFiZWwpIHtcbiAgICAgIHJldHVybiBsYWJlbDtcbiAgICB9LFxuICAgIHBhZGRpbmc6IDUsXG4gICAgY2VudGVyUG9pbnRMYWJlbHM6IGZhbHNlXG4gIH1cbn07XG5SYWRpYWxMaW5lYXJTY2FsZS5kZWZhdWx0Um91dGVzID0ge1xuICAnYW5nbGVMaW5lcy5jb2xvcic6ICdib3JkZXJDb2xvcicsXG4gICdwb2ludExhYmVscy5jb2xvcic6ICdjb2xvcicsXG4gICd0aWNrcy5jb2xvcic6ICdjb2xvcidcbn07XG5SYWRpYWxMaW5lYXJTY2FsZS5kZXNjcmlwdG9ycyA9IHtcbiAgYW5nbGVMaW5lczoge1xuICAgIF9mYWxsYmFjazogJ2dyaWQnXG4gIH1cbn07XG5cbmNvbnN0IElOVEVSVkFMUyA9IHtcbiAgbWlsbGlzZWNvbmQ6IHtjb21tb246IHRydWUsIHNpemU6IDEsIHN0ZXBzOiAxMDAwfSxcbiAgc2Vjb25kOiB7Y29tbW9uOiB0cnVlLCBzaXplOiAxMDAwLCBzdGVwczogNjB9LFxuICBtaW51dGU6IHtjb21tb246IHRydWUsIHNpemU6IDYwMDAwLCBzdGVwczogNjB9LFxuICBob3VyOiB7Y29tbW9uOiB0cnVlLCBzaXplOiAzNjAwMDAwLCBzdGVwczogMjR9LFxuICBkYXk6IHtjb21tb246IHRydWUsIHNpemU6IDg2NDAwMDAwLCBzdGVwczogMzB9LFxuICB3ZWVrOiB7Y29tbW9uOiBmYWxzZSwgc2l6ZTogNjA0ODAwMDAwLCBzdGVwczogNH0sXG4gIG1vbnRoOiB7Y29tbW9uOiB0cnVlLCBzaXplOiAyLjYyOGU5LCBzdGVwczogMTJ9LFxuICBxdWFydGVyOiB7Y29tbW9uOiBmYWxzZSwgc2l6ZTogNy44ODRlOSwgc3RlcHM6IDR9LFxuICB5ZWFyOiB7Y29tbW9uOiB0cnVlLCBzaXplOiAzLjE1NGUxMH1cbn07XG5jb25zdCBVTklUUyA9IChPYmplY3Qua2V5cyhJTlRFUlZBTFMpKTtcbmZ1bmN0aW9uIHNvcnRlcihhLCBiKSB7XG4gIHJldHVybiBhIC0gYjtcbn1cbmZ1bmN0aW9uIHBhcnNlKHNjYWxlLCBpbnB1dCkge1xuICBpZiAoaXNOdWxsT3JVbmRlZihpbnB1dCkpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICBjb25zdCBhZGFwdGVyID0gc2NhbGUuX2FkYXB0ZXI7XG4gIGNvbnN0IHtwYXJzZXIsIHJvdW5kLCBpc29XZWVrZGF5fSA9IHNjYWxlLl9wYXJzZU9wdHM7XG4gIGxldCB2YWx1ZSA9IGlucHV0O1xuICBpZiAodHlwZW9mIHBhcnNlciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHZhbHVlID0gcGFyc2VyKHZhbHVlKTtcbiAgfVxuICBpZiAoIWlzTnVtYmVyRmluaXRlKHZhbHVlKSkge1xuICAgIHZhbHVlID0gdHlwZW9mIHBhcnNlciA9PT0gJ3N0cmluZydcbiAgICAgID8gYWRhcHRlci5wYXJzZSh2YWx1ZSwgcGFyc2VyKVxuICAgICAgOiBhZGFwdGVyLnBhcnNlKHZhbHVlKTtcbiAgfVxuICBpZiAodmFsdWUgPT09IG51bGwpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICBpZiAocm91bmQpIHtcbiAgICB2YWx1ZSA9IHJvdW5kID09PSAnd2VlaycgJiYgKGlzTnVtYmVyKGlzb1dlZWtkYXkpIHx8IGlzb1dlZWtkYXkgPT09IHRydWUpXG4gICAgICA/IGFkYXB0ZXIuc3RhcnRPZih2YWx1ZSwgJ2lzb1dlZWsnLCBpc29XZWVrZGF5KVxuICAgICAgOiBhZGFwdGVyLnN0YXJ0T2YodmFsdWUsIHJvdW5kKTtcbiAgfVxuICByZXR1cm4gK3ZhbHVlO1xufVxuZnVuY3Rpb24gZGV0ZXJtaW5lVW5pdEZvckF1dG9UaWNrcyhtaW5Vbml0LCBtaW4sIG1heCwgY2FwYWNpdHkpIHtcbiAgY29uc3QgaWxlbiA9IFVOSVRTLmxlbmd0aDtcbiAgZm9yIChsZXQgaSA9IFVOSVRTLmluZGV4T2YobWluVW5pdCk7IGkgPCBpbGVuIC0gMTsgKytpKSB7XG4gICAgY29uc3QgaW50ZXJ2YWwgPSBJTlRFUlZBTFNbVU5JVFNbaV1dO1xuICAgIGNvbnN0IGZhY3RvciA9IGludGVydmFsLnN0ZXBzID8gaW50ZXJ2YWwuc3RlcHMgOiBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUjtcbiAgICBpZiAoaW50ZXJ2YWwuY29tbW9uICYmIE1hdGguY2VpbCgobWF4IC0gbWluKSAvIChmYWN0b3IgKiBpbnRlcnZhbC5zaXplKSkgPD0gY2FwYWNpdHkpIHtcbiAgICAgIHJldHVybiBVTklUU1tpXTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIFVOSVRTW2lsZW4gLSAxXTtcbn1cbmZ1bmN0aW9uIGRldGVybWluZVVuaXRGb3JGb3JtYXR0aW5nKHNjYWxlLCBudW1UaWNrcywgbWluVW5pdCwgbWluLCBtYXgpIHtcbiAgZm9yIChsZXQgaSA9IFVOSVRTLmxlbmd0aCAtIDE7IGkgPj0gVU5JVFMuaW5kZXhPZihtaW5Vbml0KTsgaS0tKSB7XG4gICAgY29uc3QgdW5pdCA9IFVOSVRTW2ldO1xuICAgIGlmIChJTlRFUlZBTFNbdW5pdF0uY29tbW9uICYmIHNjYWxlLl9hZGFwdGVyLmRpZmYobWF4LCBtaW4sIHVuaXQpID49IG51bVRpY2tzIC0gMSkge1xuICAgICAgcmV0dXJuIHVuaXQ7XG4gICAgfVxuICB9XG4gIHJldHVybiBVTklUU1ttaW5Vbml0ID8gVU5JVFMuaW5kZXhPZihtaW5Vbml0KSA6IDBdO1xufVxuZnVuY3Rpb24gZGV0ZXJtaW5lTWFqb3JVbml0KHVuaXQpIHtcbiAgZm9yIChsZXQgaSA9IFVOSVRTLmluZGV4T2YodW5pdCkgKyAxLCBpbGVuID0gVU5JVFMubGVuZ3RoOyBpIDwgaWxlbjsgKytpKSB7XG4gICAgaWYgKElOVEVSVkFMU1tVTklUU1tpXV0uY29tbW9uKSB7XG4gICAgICByZXR1cm4gVU5JVFNbaV07XG4gICAgfVxuICB9XG59XG5mdW5jdGlvbiBhZGRUaWNrKHRpY2tzLCB0aW1lLCB0aW1lc3RhbXBzKSB7XG4gIGlmICghdGltZXN0YW1wcykge1xuICAgIHRpY2tzW3RpbWVdID0gdHJ1ZTtcbiAgfSBlbHNlIGlmICh0aW1lc3RhbXBzLmxlbmd0aCkge1xuICAgIGNvbnN0IHtsbywgaGl9ID0gX2xvb2t1cCh0aW1lc3RhbXBzLCB0aW1lKTtcbiAgICBjb25zdCB0aW1lc3RhbXAgPSB0aW1lc3RhbXBzW2xvXSA+PSB0aW1lID8gdGltZXN0YW1wc1tsb10gOiB0aW1lc3RhbXBzW2hpXTtcbiAgICB0aWNrc1t0aW1lc3RhbXBdID0gdHJ1ZTtcbiAgfVxufVxuZnVuY3Rpb24gc2V0TWFqb3JUaWNrcyhzY2FsZSwgdGlja3MsIG1hcCwgbWFqb3JVbml0KSB7XG4gIGNvbnN0IGFkYXB0ZXIgPSBzY2FsZS5fYWRhcHRlcjtcbiAgY29uc3QgZmlyc3QgPSArYWRhcHRlci5zdGFydE9mKHRpY2tzWzBdLnZhbHVlLCBtYWpvclVuaXQpO1xuICBjb25zdCBsYXN0ID0gdGlja3NbdGlja3MubGVuZ3RoIC0gMV0udmFsdWU7XG4gIGxldCBtYWpvciwgaW5kZXg7XG4gIGZvciAobWFqb3IgPSBmaXJzdDsgbWFqb3IgPD0gbGFzdDsgbWFqb3IgPSArYWRhcHRlci5hZGQobWFqb3IsIDEsIG1ham9yVW5pdCkpIHtcbiAgICBpbmRleCA9IG1hcFttYWpvcl07XG4gICAgaWYgKGluZGV4ID49IDApIHtcbiAgICAgIHRpY2tzW2luZGV4XS5tYWpvciA9IHRydWU7XG4gICAgfVxuICB9XG4gIHJldHVybiB0aWNrcztcbn1cbmZ1bmN0aW9uIHRpY2tzRnJvbVRpbWVzdGFtcHMoc2NhbGUsIHZhbHVlcywgbWFqb3JVbml0KSB7XG4gIGNvbnN0IHRpY2tzID0gW107XG4gIGNvbnN0IG1hcCA9IHt9O1xuICBjb25zdCBpbGVuID0gdmFsdWVzLmxlbmd0aDtcbiAgbGV0IGksIHZhbHVlO1xuICBmb3IgKGkgPSAwOyBpIDwgaWxlbjsgKytpKSB7XG4gICAgdmFsdWUgPSB2YWx1ZXNbaV07XG4gICAgbWFwW3ZhbHVlXSA9IGk7XG4gICAgdGlja3MucHVzaCh7XG4gICAgICB2YWx1ZSxcbiAgICAgIG1ham9yOiBmYWxzZVxuICAgIH0pO1xuICB9XG4gIHJldHVybiAoaWxlbiA9PT0gMCB8fCAhbWFqb3JVbml0KSA/IHRpY2tzIDogc2V0TWFqb3JUaWNrcyhzY2FsZSwgdGlja3MsIG1hcCwgbWFqb3JVbml0KTtcbn1cbmNsYXNzIFRpbWVTY2FsZSBleHRlbmRzIFNjYWxlIHtcbiAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcyk7XG4gICAgdGhpcy5fY2FjaGUgPSB7XG4gICAgICBkYXRhOiBbXSxcbiAgICAgIGxhYmVsczogW10sXG4gICAgICBhbGw6IFtdXG4gICAgfTtcbiAgICB0aGlzLl91bml0ID0gJ2RheSc7XG4gICAgdGhpcy5fbWFqb3JVbml0ID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuX29mZnNldHMgPSB7fTtcbiAgICB0aGlzLl9ub3JtYWxpemVkID0gZmFsc2U7XG4gICAgdGhpcy5fcGFyc2VPcHRzID0gdW5kZWZpbmVkO1xuICB9XG4gIGluaXQoc2NhbGVPcHRzLCBvcHRzKSB7XG4gICAgY29uc3QgdGltZSA9IHNjYWxlT3B0cy50aW1lIHx8IChzY2FsZU9wdHMudGltZSA9IHt9KTtcbiAgICBjb25zdCBhZGFwdGVyID0gdGhpcy5fYWRhcHRlciA9IG5ldyBhZGFwdGVycy5fZGF0ZShzY2FsZU9wdHMuYWRhcHRlcnMuZGF0ZSk7XG4gICAgbWVyZ2VJZih0aW1lLmRpc3BsYXlGb3JtYXRzLCBhZGFwdGVyLmZvcm1hdHMoKSk7XG4gICAgdGhpcy5fcGFyc2VPcHRzID0ge1xuICAgICAgcGFyc2VyOiB0aW1lLnBhcnNlcixcbiAgICAgIHJvdW5kOiB0aW1lLnJvdW5kLFxuICAgICAgaXNvV2Vla2RheTogdGltZS5pc29XZWVrZGF5XG4gICAgfTtcbiAgICBzdXBlci5pbml0KHNjYWxlT3B0cyk7XG4gICAgdGhpcy5fbm9ybWFsaXplZCA9IG9wdHMubm9ybWFsaXplZDtcbiAgfVxuICBwYXJzZShyYXcsIGluZGV4KSB7XG4gICAgaWYgKHJhdyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgcmV0dXJuIHBhcnNlKHRoaXMsIHJhdyk7XG4gIH1cbiAgYmVmb3JlTGF5b3V0KCkge1xuICAgIHN1cGVyLmJlZm9yZUxheW91dCgpO1xuICAgIHRoaXMuX2NhY2hlID0ge1xuICAgICAgZGF0YTogW10sXG4gICAgICBsYWJlbHM6IFtdLFxuICAgICAgYWxsOiBbXVxuICAgIH07XG4gIH1cbiAgZGV0ZXJtaW5lRGF0YUxpbWl0cygpIHtcbiAgICBjb25zdCBvcHRpb25zID0gdGhpcy5vcHRpb25zO1xuICAgIGNvbnN0IGFkYXB0ZXIgPSB0aGlzLl9hZGFwdGVyO1xuICAgIGNvbnN0IHVuaXQgPSBvcHRpb25zLnRpbWUudW5pdCB8fCAnZGF5JztcbiAgICBsZXQge21pbiwgbWF4LCBtaW5EZWZpbmVkLCBtYXhEZWZpbmVkfSA9IHRoaXMuZ2V0VXNlckJvdW5kcygpO1xuICAgIGZ1bmN0aW9uIF9hcHBseUJvdW5kcyhib3VuZHMpIHtcbiAgICAgIGlmICghbWluRGVmaW5lZCAmJiAhaXNOYU4oYm91bmRzLm1pbikpIHtcbiAgICAgICAgbWluID0gTWF0aC5taW4obWluLCBib3VuZHMubWluKTtcbiAgICAgIH1cbiAgICAgIGlmICghbWF4RGVmaW5lZCAmJiAhaXNOYU4oYm91bmRzLm1heCkpIHtcbiAgICAgICAgbWF4ID0gTWF0aC5tYXgobWF4LCBib3VuZHMubWF4KTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKCFtaW5EZWZpbmVkIHx8ICFtYXhEZWZpbmVkKSB7XG4gICAgICBfYXBwbHlCb3VuZHModGhpcy5fZ2V0TGFiZWxCb3VuZHMoKSk7XG4gICAgICBpZiAob3B0aW9ucy5ib3VuZHMgIT09ICd0aWNrcycgfHwgb3B0aW9ucy50aWNrcy5zb3VyY2UgIT09ICdsYWJlbHMnKSB7XG4gICAgICAgIF9hcHBseUJvdW5kcyh0aGlzLmdldE1pbk1heChmYWxzZSkpO1xuICAgICAgfVxuICAgIH1cbiAgICBtaW4gPSBpc051bWJlckZpbml0ZShtaW4pICYmICFpc05hTihtaW4pID8gbWluIDogK2FkYXB0ZXIuc3RhcnRPZihEYXRlLm5vdygpLCB1bml0KTtcbiAgICBtYXggPSBpc051bWJlckZpbml0ZShtYXgpICYmICFpc05hTihtYXgpID8gbWF4IDogK2FkYXB0ZXIuZW5kT2YoRGF0ZS5ub3coKSwgdW5pdCkgKyAxO1xuICAgIHRoaXMubWluID0gTWF0aC5taW4obWluLCBtYXggLSAxKTtcbiAgICB0aGlzLm1heCA9IE1hdGgubWF4KG1pbiArIDEsIG1heCk7XG4gIH1cbiAgX2dldExhYmVsQm91bmRzKCkge1xuICAgIGNvbnN0IGFyciA9IHRoaXMuZ2V0TGFiZWxUaW1lc3RhbXBzKCk7XG4gICAgbGV0IG1pbiA9IE51bWJlci5QT1NJVElWRV9JTkZJTklUWTtcbiAgICBsZXQgbWF4ID0gTnVtYmVyLk5FR0FUSVZFX0lORklOSVRZO1xuICAgIGlmIChhcnIubGVuZ3RoKSB7XG4gICAgICBtaW4gPSBhcnJbMF07XG4gICAgICBtYXggPSBhcnJbYXJyLmxlbmd0aCAtIDFdO1xuICAgIH1cbiAgICByZXR1cm4ge21pbiwgbWF4fTtcbiAgfVxuICBidWlsZFRpY2tzKCkge1xuICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG4gICAgY29uc3QgdGltZU9wdHMgPSBvcHRpb25zLnRpbWU7XG4gICAgY29uc3QgdGlja09wdHMgPSBvcHRpb25zLnRpY2tzO1xuICAgIGNvbnN0IHRpbWVzdGFtcHMgPSB0aWNrT3B0cy5zb3VyY2UgPT09ICdsYWJlbHMnID8gdGhpcy5nZXRMYWJlbFRpbWVzdGFtcHMoKSA6IHRoaXMuX2dlbmVyYXRlKCk7XG4gICAgaWYgKG9wdGlvbnMuYm91bmRzID09PSAndGlja3MnICYmIHRpbWVzdGFtcHMubGVuZ3RoKSB7XG4gICAgICB0aGlzLm1pbiA9IHRoaXMuX3VzZXJNaW4gfHwgdGltZXN0YW1wc1swXTtcbiAgICAgIHRoaXMubWF4ID0gdGhpcy5fdXNlck1heCB8fCB0aW1lc3RhbXBzW3RpbWVzdGFtcHMubGVuZ3RoIC0gMV07XG4gICAgfVxuICAgIGNvbnN0IG1pbiA9IHRoaXMubWluO1xuICAgIGNvbnN0IG1heCA9IHRoaXMubWF4O1xuICAgIGNvbnN0IHRpY2tzID0gX2ZpbHRlckJldHdlZW4odGltZXN0YW1wcywgbWluLCBtYXgpO1xuICAgIHRoaXMuX3VuaXQgPSB0aW1lT3B0cy51bml0IHx8ICh0aWNrT3B0cy5hdXRvU2tpcFxuICAgICAgPyBkZXRlcm1pbmVVbml0Rm9yQXV0b1RpY2tzKHRpbWVPcHRzLm1pblVuaXQsIHRoaXMubWluLCB0aGlzLm1heCwgdGhpcy5fZ2V0TGFiZWxDYXBhY2l0eShtaW4pKVxuICAgICAgOiBkZXRlcm1pbmVVbml0Rm9yRm9ybWF0dGluZyh0aGlzLCB0aWNrcy5sZW5ndGgsIHRpbWVPcHRzLm1pblVuaXQsIHRoaXMubWluLCB0aGlzLm1heCkpO1xuICAgIHRoaXMuX21ham9yVW5pdCA9ICF0aWNrT3B0cy5tYWpvci5lbmFibGVkIHx8IHRoaXMuX3VuaXQgPT09ICd5ZWFyJyA/IHVuZGVmaW5lZFxuICAgICAgOiBkZXRlcm1pbmVNYWpvclVuaXQodGhpcy5fdW5pdCk7XG4gICAgdGhpcy5pbml0T2Zmc2V0cyh0aW1lc3RhbXBzKTtcbiAgICBpZiAob3B0aW9ucy5yZXZlcnNlKSB7XG4gICAgICB0aWNrcy5yZXZlcnNlKCk7XG4gICAgfVxuICAgIHJldHVybiB0aWNrc0Zyb21UaW1lc3RhbXBzKHRoaXMsIHRpY2tzLCB0aGlzLl9tYWpvclVuaXQpO1xuICB9XG4gIGluaXRPZmZzZXRzKHRpbWVzdGFtcHMpIHtcbiAgICBsZXQgc3RhcnQgPSAwO1xuICAgIGxldCBlbmQgPSAwO1xuICAgIGxldCBmaXJzdCwgbGFzdDtcbiAgICBpZiAodGhpcy5vcHRpb25zLm9mZnNldCAmJiB0aW1lc3RhbXBzLmxlbmd0aCkge1xuICAgICAgZmlyc3QgPSB0aGlzLmdldERlY2ltYWxGb3JWYWx1ZSh0aW1lc3RhbXBzWzBdKTtcbiAgICAgIGlmICh0aW1lc3RhbXBzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICBzdGFydCA9IDEgLSBmaXJzdDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHN0YXJ0ID0gKHRoaXMuZ2V0RGVjaW1hbEZvclZhbHVlKHRpbWVzdGFtcHNbMV0pIC0gZmlyc3QpIC8gMjtcbiAgICAgIH1cbiAgICAgIGxhc3QgPSB0aGlzLmdldERlY2ltYWxGb3JWYWx1ZSh0aW1lc3RhbXBzW3RpbWVzdGFtcHMubGVuZ3RoIC0gMV0pO1xuICAgICAgaWYgKHRpbWVzdGFtcHMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgIGVuZCA9IGxhc3Q7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBlbmQgPSAobGFzdCAtIHRoaXMuZ2V0RGVjaW1hbEZvclZhbHVlKHRpbWVzdGFtcHNbdGltZXN0YW1wcy5sZW5ndGggLSAyXSkpIC8gMjtcbiAgICAgIH1cbiAgICB9XG4gICAgY29uc3QgbGltaXQgPSB0aW1lc3RhbXBzLmxlbmd0aCA8IDMgPyAwLjUgOiAwLjI1O1xuICAgIHN0YXJ0ID0gX2xpbWl0VmFsdWUoc3RhcnQsIDAsIGxpbWl0KTtcbiAgICBlbmQgPSBfbGltaXRWYWx1ZShlbmQsIDAsIGxpbWl0KTtcbiAgICB0aGlzLl9vZmZzZXRzID0ge3N0YXJ0LCBlbmQsIGZhY3RvcjogMSAvIChzdGFydCArIDEgKyBlbmQpfTtcbiAgfVxuICBfZ2VuZXJhdGUoKSB7XG4gICAgY29uc3QgYWRhcHRlciA9IHRoaXMuX2FkYXB0ZXI7XG4gICAgY29uc3QgbWluID0gdGhpcy5taW47XG4gICAgY29uc3QgbWF4ID0gdGhpcy5tYXg7XG4gICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMub3B0aW9ucztcbiAgICBjb25zdCB0aW1lT3B0cyA9IG9wdGlvbnMudGltZTtcbiAgICBjb25zdCBtaW5vciA9IHRpbWVPcHRzLnVuaXQgfHwgZGV0ZXJtaW5lVW5pdEZvckF1dG9UaWNrcyh0aW1lT3B0cy5taW5Vbml0LCBtaW4sIG1heCwgdGhpcy5fZ2V0TGFiZWxDYXBhY2l0eShtaW4pKTtcbiAgICBjb25zdCBzdGVwU2l6ZSA9IHZhbHVlT3JEZWZhdWx0KHRpbWVPcHRzLnN0ZXBTaXplLCAxKTtcbiAgICBjb25zdCB3ZWVrZGF5ID0gbWlub3IgPT09ICd3ZWVrJyA/IHRpbWVPcHRzLmlzb1dlZWtkYXkgOiBmYWxzZTtcbiAgICBjb25zdCBoYXNXZWVrZGF5ID0gaXNOdW1iZXIod2Vla2RheSkgfHwgd2Vla2RheSA9PT0gdHJ1ZTtcbiAgICBjb25zdCB0aWNrcyA9IHt9O1xuICAgIGxldCBmaXJzdCA9IG1pbjtcbiAgICBsZXQgdGltZSwgY291bnQ7XG4gICAgaWYgKGhhc1dlZWtkYXkpIHtcbiAgICAgIGZpcnN0ID0gK2FkYXB0ZXIuc3RhcnRPZihmaXJzdCwgJ2lzb1dlZWsnLCB3ZWVrZGF5KTtcbiAgICB9XG4gICAgZmlyc3QgPSArYWRhcHRlci5zdGFydE9mKGZpcnN0LCBoYXNXZWVrZGF5ID8gJ2RheScgOiBtaW5vcik7XG4gICAgaWYgKGFkYXB0ZXIuZGlmZihtYXgsIG1pbiwgbWlub3IpID4gMTAwMDAwICogc3RlcFNpemUpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihtaW4gKyAnIGFuZCAnICsgbWF4ICsgJyBhcmUgdG9vIGZhciBhcGFydCB3aXRoIHN0ZXBTaXplIG9mICcgKyBzdGVwU2l6ZSArICcgJyArIG1pbm9yKTtcbiAgICB9XG4gICAgY29uc3QgdGltZXN0YW1wcyA9IG9wdGlvbnMudGlja3Muc291cmNlID09PSAnZGF0YScgJiYgdGhpcy5nZXREYXRhVGltZXN0YW1wcygpO1xuICAgIGZvciAodGltZSA9IGZpcnN0LCBjb3VudCA9IDA7IHRpbWUgPCBtYXg7IHRpbWUgPSArYWRhcHRlci5hZGQodGltZSwgc3RlcFNpemUsIG1pbm9yKSwgY291bnQrKykge1xuICAgICAgYWRkVGljayh0aWNrcywgdGltZSwgdGltZXN0YW1wcyk7XG4gICAgfVxuICAgIGlmICh0aW1lID09PSBtYXggfHwgb3B0aW9ucy5ib3VuZHMgPT09ICd0aWNrcycgfHwgY291bnQgPT09IDEpIHtcbiAgICAgIGFkZFRpY2sodGlja3MsIHRpbWUsIHRpbWVzdGFtcHMpO1xuICAgIH1cbiAgICByZXR1cm4gT2JqZWN0LmtleXModGlja3MpLnNvcnQoKGEsIGIpID0+IGEgLSBiKS5tYXAoeCA9PiAreCk7XG4gIH1cbiAgZ2V0TGFiZWxGb3JWYWx1ZSh2YWx1ZSkge1xuICAgIGNvbnN0IGFkYXB0ZXIgPSB0aGlzLl9hZGFwdGVyO1xuICAgIGNvbnN0IHRpbWVPcHRzID0gdGhpcy5vcHRpb25zLnRpbWU7XG4gICAgaWYgKHRpbWVPcHRzLnRvb2x0aXBGb3JtYXQpIHtcbiAgICAgIHJldHVybiBhZGFwdGVyLmZvcm1hdCh2YWx1ZSwgdGltZU9wdHMudG9vbHRpcEZvcm1hdCk7XG4gICAgfVxuICAgIHJldHVybiBhZGFwdGVyLmZvcm1hdCh2YWx1ZSwgdGltZU9wdHMuZGlzcGxheUZvcm1hdHMuZGF0ZXRpbWUpO1xuICB9XG4gIF90aWNrRm9ybWF0RnVuY3Rpb24odGltZSwgaW5kZXgsIHRpY2tzLCBmb3JtYXQpIHtcbiAgICBjb25zdCBvcHRpb25zID0gdGhpcy5vcHRpb25zO1xuICAgIGNvbnN0IGZvcm1hdHMgPSBvcHRpb25zLnRpbWUuZGlzcGxheUZvcm1hdHM7XG4gICAgY29uc3QgdW5pdCA9IHRoaXMuX3VuaXQ7XG4gICAgY29uc3QgbWFqb3JVbml0ID0gdGhpcy5fbWFqb3JVbml0O1xuICAgIGNvbnN0IG1pbm9yRm9ybWF0ID0gdW5pdCAmJiBmb3JtYXRzW3VuaXRdO1xuICAgIGNvbnN0IG1ham9yRm9ybWF0ID0gbWFqb3JVbml0ICYmIGZvcm1hdHNbbWFqb3JVbml0XTtcbiAgICBjb25zdCB0aWNrID0gdGlja3NbaW5kZXhdO1xuICAgIGNvbnN0IG1ham9yID0gbWFqb3JVbml0ICYmIG1ham9yRm9ybWF0ICYmIHRpY2sgJiYgdGljay5tYWpvcjtcbiAgICBjb25zdCBsYWJlbCA9IHRoaXMuX2FkYXB0ZXIuZm9ybWF0KHRpbWUsIGZvcm1hdCB8fCAobWFqb3IgPyBtYWpvckZvcm1hdCA6IG1pbm9yRm9ybWF0KSk7XG4gICAgY29uc3QgZm9ybWF0dGVyID0gb3B0aW9ucy50aWNrcy5jYWxsYmFjaztcbiAgICByZXR1cm4gZm9ybWF0dGVyID8gY2FsbGJhY2soZm9ybWF0dGVyLCBbbGFiZWwsIGluZGV4LCB0aWNrc10sIHRoaXMpIDogbGFiZWw7XG4gIH1cbiAgZ2VuZXJhdGVUaWNrTGFiZWxzKHRpY2tzKSB7XG4gICAgbGV0IGksIGlsZW4sIHRpY2s7XG4gICAgZm9yIChpID0gMCwgaWxlbiA9IHRpY2tzLmxlbmd0aDsgaSA8IGlsZW47ICsraSkge1xuICAgICAgdGljayA9IHRpY2tzW2ldO1xuICAgICAgdGljay5sYWJlbCA9IHRoaXMuX3RpY2tGb3JtYXRGdW5jdGlvbih0aWNrLnZhbHVlLCBpLCB0aWNrcyk7XG4gICAgfVxuICB9XG4gIGdldERlY2ltYWxGb3JWYWx1ZSh2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZSA9PT0gbnVsbCA/IE5hTiA6ICh2YWx1ZSAtIHRoaXMubWluKSAvICh0aGlzLm1heCAtIHRoaXMubWluKTtcbiAgfVxuICBnZXRQaXhlbEZvclZhbHVlKHZhbHVlKSB7XG4gICAgY29uc3Qgb2Zmc2V0cyA9IHRoaXMuX29mZnNldHM7XG4gICAgY29uc3QgcG9zID0gdGhpcy5nZXREZWNpbWFsRm9yVmFsdWUodmFsdWUpO1xuICAgIHJldHVybiB0aGlzLmdldFBpeGVsRm9yRGVjaW1hbCgob2Zmc2V0cy5zdGFydCArIHBvcykgKiBvZmZzZXRzLmZhY3Rvcik7XG4gIH1cbiAgZ2V0VmFsdWVGb3JQaXhlbChwaXhlbCkge1xuICAgIGNvbnN0IG9mZnNldHMgPSB0aGlzLl9vZmZzZXRzO1xuICAgIGNvbnN0IHBvcyA9IHRoaXMuZ2V0RGVjaW1hbEZvclBpeGVsKHBpeGVsKSAvIG9mZnNldHMuZmFjdG9yIC0gb2Zmc2V0cy5lbmQ7XG4gICAgcmV0dXJuIHRoaXMubWluICsgcG9zICogKHRoaXMubWF4IC0gdGhpcy5taW4pO1xuICB9XG4gIF9nZXRMYWJlbFNpemUobGFiZWwpIHtcbiAgICBjb25zdCB0aWNrc09wdHMgPSB0aGlzLm9wdGlvbnMudGlja3M7XG4gICAgY29uc3QgdGlja0xhYmVsV2lkdGggPSB0aGlzLmN0eC5tZWFzdXJlVGV4dChsYWJlbCkud2lkdGg7XG4gICAgY29uc3QgYW5nbGUgPSB0b1JhZGlhbnModGhpcy5pc0hvcml6b250YWwoKSA/IHRpY2tzT3B0cy5tYXhSb3RhdGlvbiA6IHRpY2tzT3B0cy5taW5Sb3RhdGlvbik7XG4gICAgY29uc3QgY29zUm90YXRpb24gPSBNYXRoLmNvcyhhbmdsZSk7XG4gICAgY29uc3Qgc2luUm90YXRpb24gPSBNYXRoLnNpbihhbmdsZSk7XG4gICAgY29uc3QgdGlja0ZvbnRTaXplID0gdGhpcy5fcmVzb2x2ZVRpY2tGb250T3B0aW9ucygwKS5zaXplO1xuICAgIHJldHVybiB7XG4gICAgICB3OiAodGlja0xhYmVsV2lkdGggKiBjb3NSb3RhdGlvbikgKyAodGlja0ZvbnRTaXplICogc2luUm90YXRpb24pLFxuICAgICAgaDogKHRpY2tMYWJlbFdpZHRoICogc2luUm90YXRpb24pICsgKHRpY2tGb250U2l6ZSAqIGNvc1JvdGF0aW9uKVxuICAgIH07XG4gIH1cbiAgX2dldExhYmVsQ2FwYWNpdHkoZXhhbXBsZVRpbWUpIHtcbiAgICBjb25zdCB0aW1lT3B0cyA9IHRoaXMub3B0aW9ucy50aW1lO1xuICAgIGNvbnN0IGRpc3BsYXlGb3JtYXRzID0gdGltZU9wdHMuZGlzcGxheUZvcm1hdHM7XG4gICAgY29uc3QgZm9ybWF0ID0gZGlzcGxheUZvcm1hdHNbdGltZU9wdHMudW5pdF0gfHwgZGlzcGxheUZvcm1hdHMubWlsbGlzZWNvbmQ7XG4gICAgY29uc3QgZXhhbXBsZUxhYmVsID0gdGhpcy5fdGlja0Zvcm1hdEZ1bmN0aW9uKGV4YW1wbGVUaW1lLCAwLCB0aWNrc0Zyb21UaW1lc3RhbXBzKHRoaXMsIFtleGFtcGxlVGltZV0sIHRoaXMuX21ham9yVW5pdCksIGZvcm1hdCk7XG4gICAgY29uc3Qgc2l6ZSA9IHRoaXMuX2dldExhYmVsU2l6ZShleGFtcGxlTGFiZWwpO1xuICAgIGNvbnN0IGNhcGFjaXR5ID0gTWF0aC5mbG9vcih0aGlzLmlzSG9yaXpvbnRhbCgpID8gdGhpcy53aWR0aCAvIHNpemUudyA6IHRoaXMuaGVpZ2h0IC8gc2l6ZS5oKSAtIDE7XG4gICAgcmV0dXJuIGNhcGFjaXR5ID4gMCA/IGNhcGFjaXR5IDogMTtcbiAgfVxuICBnZXREYXRhVGltZXN0YW1wcygpIHtcbiAgICBsZXQgdGltZXN0YW1wcyA9IHRoaXMuX2NhY2hlLmRhdGEgfHwgW107XG4gICAgbGV0IGksIGlsZW47XG4gICAgaWYgKHRpbWVzdGFtcHMubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gdGltZXN0YW1wcztcbiAgICB9XG4gICAgY29uc3QgbWV0YXMgPSB0aGlzLmdldE1hdGNoaW5nVmlzaWJsZU1ldGFzKCk7XG4gICAgaWYgKHRoaXMuX25vcm1hbGl6ZWQgJiYgbWV0YXMubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gKHRoaXMuX2NhY2hlLmRhdGEgPSBtZXRhc1swXS5jb250cm9sbGVyLmdldEFsbFBhcnNlZFZhbHVlcyh0aGlzKSk7XG4gICAgfVxuICAgIGZvciAoaSA9IDAsIGlsZW4gPSBtZXRhcy5sZW5ndGg7IGkgPCBpbGVuOyArK2kpIHtcbiAgICAgIHRpbWVzdGFtcHMgPSB0aW1lc3RhbXBzLmNvbmNhdChtZXRhc1tpXS5jb250cm9sbGVyLmdldEFsbFBhcnNlZFZhbHVlcyh0aGlzKSk7XG4gICAgfVxuICAgIHJldHVybiAodGhpcy5fY2FjaGUuZGF0YSA9IHRoaXMubm9ybWFsaXplKHRpbWVzdGFtcHMpKTtcbiAgfVxuICBnZXRMYWJlbFRpbWVzdGFtcHMoKSB7XG4gICAgY29uc3QgdGltZXN0YW1wcyA9IHRoaXMuX2NhY2hlLmxhYmVscyB8fCBbXTtcbiAgICBsZXQgaSwgaWxlbjtcbiAgICBpZiAodGltZXN0YW1wcy5sZW5ndGgpIHtcbiAgICAgIHJldHVybiB0aW1lc3RhbXBzO1xuICAgIH1cbiAgICBjb25zdCBsYWJlbHMgPSB0aGlzLmdldExhYmVscygpO1xuICAgIGZvciAoaSA9IDAsIGlsZW4gPSBsYWJlbHMubGVuZ3RoOyBpIDwgaWxlbjsgKytpKSB7XG4gICAgICB0aW1lc3RhbXBzLnB1c2gocGFyc2UodGhpcywgbGFiZWxzW2ldKSk7XG4gICAgfVxuICAgIHJldHVybiAodGhpcy5fY2FjaGUubGFiZWxzID0gdGhpcy5fbm9ybWFsaXplZCA/IHRpbWVzdGFtcHMgOiB0aGlzLm5vcm1hbGl6ZSh0aW1lc3RhbXBzKSk7XG4gIH1cbiAgbm9ybWFsaXplKHZhbHVlcykge1xuICAgIHJldHVybiBfYXJyYXlVbmlxdWUodmFsdWVzLnNvcnQoc29ydGVyKSk7XG4gIH1cbn1cblRpbWVTY2FsZS5pZCA9ICd0aW1lJztcblRpbWVTY2FsZS5kZWZhdWx0cyA9IHtcbiAgYm91bmRzOiAnZGF0YScsXG4gIGFkYXB0ZXJzOiB7fSxcbiAgdGltZToge1xuICAgIHBhcnNlcjogZmFsc2UsXG4gICAgdW5pdDogZmFsc2UsXG4gICAgcm91bmQ6IGZhbHNlLFxuICAgIGlzb1dlZWtkYXk6IGZhbHNlLFxuICAgIG1pblVuaXQ6ICdtaWxsaXNlY29uZCcsXG4gICAgZGlzcGxheUZvcm1hdHM6IHt9XG4gIH0sXG4gIHRpY2tzOiB7XG4gICAgc291cmNlOiAnYXV0bycsXG4gICAgbWFqb3I6IHtcbiAgICAgIGVuYWJsZWQ6IGZhbHNlXG4gICAgfVxuICB9XG59O1xuXG5mdW5jdGlvbiBpbnRlcnBvbGF0ZSh0YWJsZSwgdmFsLCByZXZlcnNlKSB7XG4gIGxldCBsbyA9IDA7XG4gIGxldCBoaSA9IHRhYmxlLmxlbmd0aCAtIDE7XG4gIGxldCBwcmV2U291cmNlLCBuZXh0U291cmNlLCBwcmV2VGFyZ2V0LCBuZXh0VGFyZ2V0O1xuICBpZiAocmV2ZXJzZSkge1xuICAgIGlmICh2YWwgPj0gdGFibGVbbG9dLnBvcyAmJiB2YWwgPD0gdGFibGVbaGldLnBvcykge1xuICAgICAgKHtsbywgaGl9ID0gX2xvb2t1cEJ5S2V5KHRhYmxlLCAncG9zJywgdmFsKSk7XG4gICAgfVxuICAgICh7cG9zOiBwcmV2U291cmNlLCB0aW1lOiBwcmV2VGFyZ2V0fSA9IHRhYmxlW2xvXSk7XG4gICAgKHtwb3M6IG5leHRTb3VyY2UsIHRpbWU6IG5leHRUYXJnZXR9ID0gdGFibGVbaGldKTtcbiAgfSBlbHNlIHtcbiAgICBpZiAodmFsID49IHRhYmxlW2xvXS50aW1lICYmIHZhbCA8PSB0YWJsZVtoaV0udGltZSkge1xuICAgICAgKHtsbywgaGl9ID0gX2xvb2t1cEJ5S2V5KHRhYmxlLCAndGltZScsIHZhbCkpO1xuICAgIH1cbiAgICAoe3RpbWU6IHByZXZTb3VyY2UsIHBvczogcHJldlRhcmdldH0gPSB0YWJsZVtsb10pO1xuICAgICh7dGltZTogbmV4dFNvdXJjZSwgcG9zOiBuZXh0VGFyZ2V0fSA9IHRhYmxlW2hpXSk7XG4gIH1cbiAgY29uc3Qgc3BhbiA9IG5leHRTb3VyY2UgLSBwcmV2U291cmNlO1xuICByZXR1cm4gc3BhbiA/IHByZXZUYXJnZXQgKyAobmV4dFRhcmdldCAtIHByZXZUYXJnZXQpICogKHZhbCAtIHByZXZTb3VyY2UpIC8gc3BhbiA6IHByZXZUYXJnZXQ7XG59XG5jbGFzcyBUaW1lU2VyaWVzU2NhbGUgZXh0ZW5kcyBUaW1lU2NhbGUge1xuICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgIHN1cGVyKHByb3BzKTtcbiAgICB0aGlzLl90YWJsZSA9IFtdO1xuICAgIHRoaXMuX21pblBvcyA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLl90YWJsZVJhbmdlID0gdW5kZWZpbmVkO1xuICB9XG4gIGluaXRPZmZzZXRzKCkge1xuICAgIGNvbnN0IHRpbWVzdGFtcHMgPSB0aGlzLl9nZXRUaW1lc3RhbXBzRm9yVGFibGUoKTtcbiAgICBjb25zdCB0YWJsZSA9IHRoaXMuX3RhYmxlID0gdGhpcy5idWlsZExvb2t1cFRhYmxlKHRpbWVzdGFtcHMpO1xuICAgIHRoaXMuX21pblBvcyA9IGludGVycG9sYXRlKHRhYmxlLCB0aGlzLm1pbik7XG4gICAgdGhpcy5fdGFibGVSYW5nZSA9IGludGVycG9sYXRlKHRhYmxlLCB0aGlzLm1heCkgLSB0aGlzLl9taW5Qb3M7XG4gICAgc3VwZXIuaW5pdE9mZnNldHModGltZXN0YW1wcyk7XG4gIH1cbiAgYnVpbGRMb29rdXBUYWJsZSh0aW1lc3RhbXBzKSB7XG4gICAgY29uc3Qge21pbiwgbWF4fSA9IHRoaXM7XG4gICAgY29uc3QgaXRlbXMgPSBbXTtcbiAgICBjb25zdCB0YWJsZSA9IFtdO1xuICAgIGxldCBpLCBpbGVuLCBwcmV2LCBjdXJyLCBuZXh0O1xuICAgIGZvciAoaSA9IDAsIGlsZW4gPSB0aW1lc3RhbXBzLmxlbmd0aDsgaSA8IGlsZW47ICsraSkge1xuICAgICAgY3VyciA9IHRpbWVzdGFtcHNbaV07XG4gICAgICBpZiAoY3VyciA+PSBtaW4gJiYgY3VyciA8PSBtYXgpIHtcbiAgICAgICAgaXRlbXMucHVzaChjdXJyKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGl0ZW1zLmxlbmd0aCA8IDIpIHtcbiAgICAgIHJldHVybiBbXG4gICAgICAgIHt0aW1lOiBtaW4sIHBvczogMH0sXG4gICAgICAgIHt0aW1lOiBtYXgsIHBvczogMX1cbiAgICAgIF07XG4gICAgfVxuICAgIGZvciAoaSA9IDAsIGlsZW4gPSBpdGVtcy5sZW5ndGg7IGkgPCBpbGVuOyArK2kpIHtcbiAgICAgIG5leHQgPSBpdGVtc1tpICsgMV07XG4gICAgICBwcmV2ID0gaXRlbXNbaSAtIDFdO1xuICAgICAgY3VyciA9IGl0ZW1zW2ldO1xuICAgICAgaWYgKE1hdGgucm91bmQoKG5leHQgKyBwcmV2KSAvIDIpICE9PSBjdXJyKSB7XG4gICAgICAgIHRhYmxlLnB1c2goe3RpbWU6IGN1cnIsIHBvczogaSAvIChpbGVuIC0gMSl9KTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRhYmxlO1xuICB9XG4gIF9nZXRUaW1lc3RhbXBzRm9yVGFibGUoKSB7XG4gICAgbGV0IHRpbWVzdGFtcHMgPSB0aGlzLl9jYWNoZS5hbGwgfHwgW107XG4gICAgaWYgKHRpbWVzdGFtcHMubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gdGltZXN0YW1wcztcbiAgICB9XG4gICAgY29uc3QgZGF0YSA9IHRoaXMuZ2V0RGF0YVRpbWVzdGFtcHMoKTtcbiAgICBjb25zdCBsYWJlbCA9IHRoaXMuZ2V0TGFiZWxUaW1lc3RhbXBzKCk7XG4gICAgaWYgKGRhdGEubGVuZ3RoICYmIGxhYmVsLmxlbmd0aCkge1xuICAgICAgdGltZXN0YW1wcyA9IHRoaXMubm9ybWFsaXplKGRhdGEuY29uY2F0KGxhYmVsKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRpbWVzdGFtcHMgPSBkYXRhLmxlbmd0aCA/IGRhdGEgOiBsYWJlbDtcbiAgICB9XG4gICAgdGltZXN0YW1wcyA9IHRoaXMuX2NhY2hlLmFsbCA9IHRpbWVzdGFtcHM7XG4gICAgcmV0dXJuIHRpbWVzdGFtcHM7XG4gIH1cbiAgZ2V0RGVjaW1hbEZvclZhbHVlKHZhbHVlKSB7XG4gICAgcmV0dXJuIChpbnRlcnBvbGF0ZSh0aGlzLl90YWJsZSwgdmFsdWUpIC0gdGhpcy5fbWluUG9zKSAvIHRoaXMuX3RhYmxlUmFuZ2U7XG4gIH1cbiAgZ2V0VmFsdWVGb3JQaXhlbChwaXhlbCkge1xuICAgIGNvbnN0IG9mZnNldHMgPSB0aGlzLl9vZmZzZXRzO1xuICAgIGNvbnN0IGRlY2ltYWwgPSB0aGlzLmdldERlY2ltYWxGb3JQaXhlbChwaXhlbCkgLyBvZmZzZXRzLmZhY3RvciAtIG9mZnNldHMuZW5kO1xuICAgIHJldHVybiBpbnRlcnBvbGF0ZSh0aGlzLl90YWJsZSwgZGVjaW1hbCAqIHRoaXMuX3RhYmxlUmFuZ2UgKyB0aGlzLl9taW5Qb3MsIHRydWUpO1xuICB9XG59XG5UaW1lU2VyaWVzU2NhbGUuaWQgPSAndGltZXNlcmllcyc7XG5UaW1lU2VyaWVzU2NhbGUuZGVmYXVsdHMgPSBUaW1lU2NhbGUuZGVmYXVsdHM7XG5cbnZhciBzY2FsZXMgPSAvKiNfX1BVUkVfXyovT2JqZWN0LmZyZWV6ZSh7XG5fX3Byb3RvX186IG51bGwsXG5DYXRlZ29yeVNjYWxlOiBDYXRlZ29yeVNjYWxlLFxuTGluZWFyU2NhbGU6IExpbmVhclNjYWxlLFxuTG9nYXJpdGhtaWNTY2FsZTogTG9nYXJpdGhtaWNTY2FsZSxcblJhZGlhbExpbmVhclNjYWxlOiBSYWRpYWxMaW5lYXJTY2FsZSxcblRpbWVTY2FsZTogVGltZVNjYWxlLFxuVGltZVNlcmllc1NjYWxlOiBUaW1lU2VyaWVzU2NhbGVcbn0pO1xuXG5jb25zdCByZWdpc3RlcmFibGVzID0gW1xuICBjb250cm9sbGVycyxcbiAgZWxlbWVudHMsXG4gIHBsdWdpbnMsXG4gIHNjYWxlcyxcbl07XG5cbmV4cG9ydCB7IEFuaW1hdGlvbiwgQW5pbWF0aW9ucywgQXJjRWxlbWVudCwgQmFyQ29udHJvbGxlciwgQmFyRWxlbWVudCwgQmFzZVBsYXRmb3JtLCBCYXNpY1BsYXRmb3JtLCBCdWJibGVDb250cm9sbGVyLCBDYXRlZ29yeVNjYWxlLCBDaGFydCwgRGF0YXNldENvbnRyb2xsZXIsIHBsdWdpbl9kZWNpbWF0aW9uIGFzIERlY2ltYXRpb24sIERvbVBsYXRmb3JtLCBEb3VnaG51dENvbnRyb2xsZXIsIEVsZW1lbnQsIHBsdWdpbl9maWxsZXIgYXMgRmlsbGVyLCBJbnRlcmFjdGlvbiwgcGx1Z2luX2xlZ2VuZCBhcyBMZWdlbmQsIExpbmVDb250cm9sbGVyLCBMaW5lRWxlbWVudCwgTGluZWFyU2NhbGUsIExvZ2FyaXRobWljU2NhbGUsIFBpZUNvbnRyb2xsZXIsIFBvaW50RWxlbWVudCwgUG9sYXJBcmVhQ29udHJvbGxlciwgUmFkYXJDb250cm9sbGVyLCBSYWRpYWxMaW5lYXJTY2FsZSwgU2NhbGUsIFNjYXR0ZXJDb250cm9sbGVyLCBwbHVnaW5fc3VidGl0bGUgYXMgU3ViVGl0bGUsIFRpY2tzLCBUaW1lU2NhbGUsIFRpbWVTZXJpZXNTY2FsZSwgcGx1Z2luX3RpdGxlIGFzIFRpdGxlLCBwbHVnaW5fdG9vbHRpcCBhcyBUb29sdGlwLCBhZGFwdGVycyBhcyBfYWRhcHRlcnMsIF9kZXRlY3RQbGF0Zm9ybSwgYW5pbWF0b3IsIGNvbnRyb2xsZXJzLCBlbGVtZW50cywgbGF5b3V0cywgcGx1Z2lucywgcmVnaXN0ZXJhYmxlcywgcmVnaXN0cnksIHNjYWxlcyB9O1xuIiwiaW1wb3J0IHtDaGFydCwgcmVnaXN0ZXJhYmxlc30gZnJvbSAnLi4vZGlzdC9jaGFydC5lc20nO1xuXG5DaGFydC5yZWdpc3RlciguLi5yZWdpc3RlcmFibGVzKTtcblxuZXhwb3J0IGRlZmF1bHQgQ2hhcnQ7XG4iLCJpbXBvcnQgY2xlYXJza3lfZGF5IGZyb20gJy4vaW1hZ2VzL2NsZWFyc2t5X2RheS5zdmcnO1xyXG5pbXBvcnQgY2xlYXJza3lfbmlnaHQgZnJvbSAnLi9pbWFnZXMvY2xlYXJza3lfbmlnaHQuc3ZnJztcclxuaW1wb3J0IGNsZWFyc2t5X3BvbGFydHdpbGlnaHQgZnJvbSAnLi9pbWFnZXMvY2xlYXJza3lfcG9sYXJ0d2lsaWdodC5zdmcnO1xyXG5pbXBvcnQgY2xvdWR5IGZyb20gJy4vaW1hZ2VzL2Nsb3VkeS5zdmcnO1xyXG5pbXBvcnQgZmFpcl9kYXkgZnJvbSAnLi9pbWFnZXMvZmFpcl9kYXkuc3ZnJztcclxuaW1wb3J0IGZhaXJfbmlnaHQgZnJvbSAnLi9pbWFnZXMvZmFpcl9uaWdodC5zdmcnO1xyXG5pbXBvcnQgZmFpcl9wb2xhcnR3aWxpZ2h0IGZyb20gJy4vaW1hZ2VzL2ZhaXJfcG9sYXJ0d2lsaWdodC5zdmcnO1xyXG5pbXBvcnQgZm9nIGZyb20gJy4vaW1hZ2VzL2ZvZy5zdmcnO1xyXG5pbXBvcnQgaGVhdnlyYWluIGZyb20gJy4vaW1hZ2VzL2hlYXZ5cmFpbi5zdmcnO1xyXG5pbXBvcnQgaGVhdnlyYWluYW5kdGh1bmRlciBmcm9tICcuL2ltYWdlcy9oZWF2eXJhaW5hbmR0aHVuZGVyLnN2Zyc7XHJcbmltcG9ydCBoZWF2eXJhaW5zaG93ZXJzYW5kdGh1bmRlcl9kYXkgZnJvbSAnLi9pbWFnZXMvaGVhdnlyYWluc2hvd2Vyc2FuZHRodW5kZXJfZGF5LnN2Zyc7XHJcbmltcG9ydCBoZWF2eXJhaW5zaG93ZXJzYW5kdGh1bmRlcl9uaWdodCBmcm9tICcuL2ltYWdlcy9oZWF2eXJhaW5zaG93ZXJzYW5kdGh1bmRlcl9uaWdodC5zdmcnO1xyXG5pbXBvcnQgaGVhdnlyYWluc2hvd2Vyc2FuZHRodW5kZXJfcG9sYXJ0d2lsaWdodCBmcm9tICcuL2ltYWdlcy9oZWF2eXJhaW5zaG93ZXJzYW5kdGh1bmRlcl9wb2xhcnR3aWxpZ2h0LnN2Zyc7XHJcbmltcG9ydCBoZWF2eXJhaW5zaG93ZXJzX2RheSBmcm9tICcuL2ltYWdlcy9oZWF2eXJhaW5zaG93ZXJzX2RheS5zdmcnO1xyXG5pbXBvcnQgaGVhdnlyYWluc2hvd2Vyc19uaWdodCBmcm9tICcuL2ltYWdlcy9oZWF2eXJhaW5zaG93ZXJzX25pZ2h0LnN2Zyc7XHJcbmltcG9ydCBoZWF2eXJhaW5zaG93ZXJzX3BvbGFydHdpbGlnaHQgZnJvbSAnLi9pbWFnZXMvaGVhdnlyYWluc2hvd2Vyc19wb2xhcnR3aWxpZ2h0LnN2Zyc7XHJcbmltcG9ydCBoZWF2eXNsZWV0IGZyb20gJy4vaW1hZ2VzL2hlYXZ5c2xlZXQuc3ZnJztcclxuaW1wb3J0IGhlYXZ5c2xlZXRhbmR0aHVuZGVyIGZyb20gJy4vaW1hZ2VzL2hlYXZ5c2xlZXRhbmR0aHVuZGVyLnN2Zyc7XHJcbmltcG9ydCBoZWF2eXNsZWV0c2hvd2Vyc2FuZHRodW5kZXJfZGF5IGZyb20gJy4vaW1hZ2VzL2hlYXZ5c2xlZXRzaG93ZXJzYW5kdGh1bmRlcl9kYXkuc3ZnJztcclxuaW1wb3J0IGhlYXZ5c2xlZXRzaG93ZXJzYW5kdGh1bmRlcl9uaWdodCBmcm9tICcuL2ltYWdlcy9oZWF2eXNsZWV0c2hvd2Vyc2FuZHRodW5kZXJfbmlnaHQuc3ZnJztcclxuaW1wb3J0IGhlYXZ5c2xlZXRzaG93ZXJzYW5kdGh1bmRlcl9wb2xhcnR3aWxpZ2h0IGZyb20gJy4vaW1hZ2VzL2hlYXZ5c2xlZXRzaG93ZXJzYW5kdGh1bmRlcl9wb2xhcnR3aWxpZ2h0LnN2Zyc7XHJcbmltcG9ydCBoZWF2eXNsZWV0c2hvd2Vyc19kYXkgZnJvbSAnLi9pbWFnZXMvaGVhdnlzbGVldHNob3dlcnNfZGF5LnN2Zyc7XHJcbmltcG9ydCBoZWF2eXNsZWV0c2hvd2Vyc19uaWdodCBmcm9tICcuL2ltYWdlcy9oZWF2eXNsZWV0c2hvd2Vyc19uaWdodC5zdmcnO1xyXG5pbXBvcnQgaGVhdnlzbGVldHNob3dlcnNfcG9sYXJ0d2lsaWdodCBmcm9tICcuL2ltYWdlcy9oZWF2eXNsZWV0c2hvd2Vyc19wb2xhcnR3aWxpZ2h0LnN2Zyc7XHJcbmltcG9ydCBoZWF2eXNub3cgZnJvbSAnLi9pbWFnZXMvaGVhdnlzbm93LnN2Zyc7XHJcbmltcG9ydCBoZWF2eXNub3dhbmR0aHVuZGVyIGZyb20gJy4vaW1hZ2VzL2hlYXZ5c25vd2FuZHRodW5kZXIuc3ZnJztcclxuaW1wb3J0IGhlYXZ5c25vd3Nob3dlcnNhbmR0aHVuZGVyX2RheSBmcm9tICcuL2ltYWdlcy9oZWF2eXNub3dzaG93ZXJzYW5kdGh1bmRlcl9kYXkuc3ZnJztcclxuaW1wb3J0IGhlYXZ5c25vd3Nob3dlcnNhbmR0aHVuZGVyX25pZ2h0IGZyb20gJy4vaW1hZ2VzL2hlYXZ5c25vd3Nob3dlcnNhbmR0aHVuZGVyX25pZ2h0LnN2Zyc7XHJcbmltcG9ydCBoZWF2eXNub3dzaG93ZXJzYW5kdGh1bmRlcl9wb2xhcnR3aWxpZ2h0IGZyb20gJy4vaW1hZ2VzL2hlYXZ5c25vd3Nob3dlcnNhbmR0aHVuZGVyX3BvbGFydHdpbGlnaHQuc3ZnJztcclxuaW1wb3J0IGhlYXZ5c25vd3Nob3dlcnNfZGF5IGZyb20gJy4vaW1hZ2VzL2hlYXZ5c25vd3Nob3dlcnNfZGF5LnN2Zyc7XHJcbmltcG9ydCBoZWF2eXNub3dzaG93ZXJzX25pZ2h0IGZyb20gJy4vaW1hZ2VzL2hlYXZ5c25vd3Nob3dlcnNfbmlnaHQuc3ZnJztcclxuaW1wb3J0IGhlYXZ5c25vd3Nob3dlcnNfcG9sYXJ0d2lsaWdodCBmcm9tICcuL2ltYWdlcy9oZWF2eXNub3dzaG93ZXJzX3BvbGFydHdpbGlnaHQuc3ZnJztcclxuaW1wb3J0IGxpZ2h0cmFpbiBmcm9tICcuL2ltYWdlcy9saWdodHJhaW4uc3ZnJztcclxuaW1wb3J0IGxpZ2h0cmFpbmFuZHRodW5kZXIgZnJvbSAnLi9pbWFnZXMvbGlnaHRyYWluYW5kdGh1bmRlci5zdmcnO1xyXG5pbXBvcnQgbGlnaHRyYWluc2hvd2Vyc2FuZHRodW5kZXJfZGF5IGZyb20gJy4vaW1hZ2VzL2xpZ2h0cmFpbnNob3dlcnNhbmR0aHVuZGVyX2RheS5zdmcnO1xyXG5pbXBvcnQgbGlnaHRyYWluc2hvd2Vyc2FuZHRodW5kZXJfbmlnaHQgZnJvbSAnLi9pbWFnZXMvbGlnaHRyYWluc2hvd2Vyc2FuZHRodW5kZXJfbmlnaHQuc3ZnJztcclxuaW1wb3J0IGxpZ2h0cmFpbnNob3dlcnNhbmR0aHVuZGVyX3BvbGFydHdpbGlnaHQgZnJvbSAnLi9pbWFnZXMvbGlnaHRyYWluc2hvd2Vyc2FuZHRodW5kZXJfcG9sYXJ0d2lsaWdodC5zdmcnO1xyXG5pbXBvcnQgbGlnaHRyYWluc2hvd2Vyc19kYXkgZnJvbSAnLi9pbWFnZXMvbGlnaHRyYWluc2hvd2Vyc19kYXkuc3ZnJztcclxuaW1wb3J0IGxpZ2h0cmFpbnNob3dlcnNfbmlnaHQgZnJvbSAnLi9pbWFnZXMvbGlnaHRyYWluc2hvd2Vyc19uaWdodC5zdmcnO1xyXG5pbXBvcnQgbGlnaHRyYWluc2hvd2Vyc19wb2xhcnR3aWxpZ2h0IGZyb20gJy4vaW1hZ2VzL2xpZ2h0cmFpbnNob3dlcnNfcG9sYXJ0d2lsaWdodC5zdmcnO1xyXG5pbXBvcnQgbGlnaHRzbGVldCBmcm9tICcuL2ltYWdlcy9saWdodHNsZWV0LnN2Zyc7XHJcbmltcG9ydCBsaWdodHNsZWV0YW5kdGh1bmRlciBmcm9tICcuL2ltYWdlcy9saWdodHNsZWV0YW5kdGh1bmRlci5zdmcnO1xyXG5pbXBvcnQgbGlnaHRzbGVldHNob3dlcnNfZGF5IGZyb20gJy4vaW1hZ2VzL2xpZ2h0c2xlZXRzaG93ZXJzX2RheS5zdmcnO1xyXG5pbXBvcnQgbGlnaHRzbGVldHNob3dlcnNfbmlnaHQgZnJvbSAnLi9pbWFnZXMvbGlnaHRzbGVldHNob3dlcnNfbmlnaHQuc3ZnJztcclxuaW1wb3J0IGxpZ2h0c2xlZXRzaG93ZXJzX3BvbGFydHdpbGlnaHQgZnJvbSAnLi9pbWFnZXMvbGlnaHRzbGVldHNob3dlcnNfcG9sYXJ0d2lsaWdodC5zdmcnO1xyXG5pbXBvcnQgbGlnaHRzbm93IGZyb20gJy4vaW1hZ2VzL2xpZ2h0c25vdy5zdmcnO1xyXG5pbXBvcnQgbGlnaHRzbm93YW5kdGh1bmRlciBmcm9tICcuL2ltYWdlcy9saWdodHNub3dhbmR0aHVuZGVyLnN2Zyc7XHJcbmltcG9ydCBsaWdodHNub3dzaG93ZXJzX2RheSBmcm9tICcuL2ltYWdlcy9saWdodHNub3dzaG93ZXJzX2RheS5zdmcnO1xyXG5pbXBvcnQgbGlnaHRzbm93c2hvd2Vyc19uaWdodCBmcm9tICcuL2ltYWdlcy9saWdodHNub3dzaG93ZXJzX25pZ2h0LnN2Zyc7XHJcbmltcG9ydCBsaWdodHNub3dzaG93ZXJzX3BvbGFydHdpbGlnaHQgZnJvbSAnLi9pbWFnZXMvbGlnaHRzbm93c2hvd2Vyc19wb2xhcnR3aWxpZ2h0LnN2Zyc7XHJcbmltcG9ydCBsaWdodHNzbGVldHNob3dlcnNhbmR0aHVuZGVyX2RheSBmcm9tICcuL2ltYWdlcy9saWdodHNzbGVldHNob3dlcnNhbmR0aHVuZGVyX2RheS5zdmcnO1xyXG5pbXBvcnQgbGlnaHRzc2xlZXRzaG93ZXJzYW5kdGh1bmRlcl9uaWdodCBmcm9tICcuL2ltYWdlcy9saWdodHNzbGVldHNob3dlcnNhbmR0aHVuZGVyX25pZ2h0LnN2Zyc7XHJcbmltcG9ydCBsaWdodHNzbGVldHNob3dlcnNhbmR0aHVuZGVyX3BvbGFydHdpbGlnaHQgZnJvbSAnLi9pbWFnZXMvbGlnaHRzc2xlZXRzaG93ZXJzYW5kdGh1bmRlcl9wb2xhcnR3aWxpZ2h0LnN2Zyc7XHJcbmltcG9ydCBsaWdodHNzbm93c2hvd2Vyc2FuZHRodW5kZXJfZGF5IGZyb20gJy4vaW1hZ2VzL2xpZ2h0c3Nub3dzaG93ZXJzYW5kdGh1bmRlcl9kYXkuc3ZnJztcclxuaW1wb3J0IGxpZ2h0c3Nub3dzaG93ZXJzYW5kdGh1bmRlcl9uaWdodCBmcm9tICcuL2ltYWdlcy9saWdodHNzbm93c2hvd2Vyc2FuZHRodW5kZXJfbmlnaHQuc3ZnJztcclxuaW1wb3J0IGxpZ2h0c3Nub3dzaG93ZXJzYW5kdGh1bmRlcl9wb2xhcnR3aWxpZ2h0IGZyb20gJy4vaW1hZ2VzL2xpZ2h0c3Nub3dzaG93ZXJzYW5kdGh1bmRlcl9wb2xhcnR3aWxpZ2h0LnN2Zyc7XHJcbmltcG9ydCBwYXJ0bHljbG91ZHlfZGF5IGZyb20gJy4vaW1hZ2VzL3BhcnRseWNsb3VkeV9kYXkuc3ZnJztcclxuaW1wb3J0IHBhcnRseWNsb3VkeV9uaWdodCBmcm9tICcuL2ltYWdlcy9wYXJ0bHljbG91ZHlfbmlnaHQuc3ZnJztcclxuaW1wb3J0IHBhcnRseWNsb3VkeV9wb2xhcnR3aWxpZ2h0IGZyb20gJy4vaW1hZ2VzL3BhcnRseWNsb3VkeV9wb2xhcnR3aWxpZ2h0LnN2Zyc7XHJcbmltcG9ydCByYWluIGZyb20gJy4vaW1hZ2VzL3JhaW4uc3ZnJztcclxuaW1wb3J0IHJhaW5hbmR0aHVuZGVyIGZyb20gJy4vaW1hZ2VzL3JhaW5hbmR0aHVuZGVyLnN2Zyc7XHJcbmltcG9ydCByYWluc2hvd2Vyc2FuZHRodW5kZXJfZGF5IGZyb20gJy4vaW1hZ2VzL3JhaW5zaG93ZXJzYW5kdGh1bmRlcl9kYXkuc3ZnJztcclxuaW1wb3J0IHJhaW5zaG93ZXJzYW5kdGh1bmRlcl9uaWdodCBmcm9tICcuL2ltYWdlcy9yYWluc2hvd2Vyc2FuZHRodW5kZXJfbmlnaHQuc3ZnJztcclxuaW1wb3J0IHJhaW5zaG93ZXJzYW5kdGh1bmRlcl9wb2xhcnR3aWxpZ2h0IGZyb20gJy4vaW1hZ2VzL3JhaW5zaG93ZXJzYW5kdGh1bmRlcl9wb2xhcnR3aWxpZ2h0LnN2Zyc7XHJcbmltcG9ydCByYWluc2hvd2Vyc19kYXkgZnJvbSAnLi9pbWFnZXMvcmFpbnNob3dlcnNfZGF5LnN2Zyc7XHJcbmltcG9ydCByYWluc2hvd2Vyc19uaWdodCBmcm9tICcuL2ltYWdlcy9yYWluc2hvd2Vyc19uaWdodC5zdmcnO1xyXG5pbXBvcnQgcmFpbnNob3dlcnNfcG9sYXJ0d2lsaWdodCBmcm9tICcuL2ltYWdlcy9yYWluc2hvd2Vyc19wb2xhcnR3aWxpZ2h0LnN2Zyc7XHJcbmltcG9ydCBzbGVldCBmcm9tICcuL2ltYWdlcy9zbGVldC5zdmcnO1xyXG5pbXBvcnQgc2xlZXRhbmR0aHVuZGVyIGZyb20gJy4vaW1hZ2VzL3NsZWV0YW5kdGh1bmRlci5zdmcnO1xyXG5pbXBvcnQgc2xlZXRzaG93ZXJzYW5kdGh1bmRlcl9kYXkgZnJvbSAnLi9pbWFnZXMvc2xlZXRzaG93ZXJzYW5kdGh1bmRlcl9kYXkuc3ZnJztcclxuaW1wb3J0IHNsZWV0c2hvd2Vyc2FuZHRodW5kZXJfbmlnaHQgZnJvbSAnLi9pbWFnZXMvc2xlZXRzaG93ZXJzYW5kdGh1bmRlcl9uaWdodC5zdmcnO1xyXG5pbXBvcnQgc2xlZXRzaG93ZXJzYW5kdGh1bmRlcl9wb2xhcnR3aWxpZ2h0IGZyb20gJy4vaW1hZ2VzL3NsZWV0c2hvd2Vyc2FuZHRodW5kZXJfcG9sYXJ0d2lsaWdodC5zdmcnO1xyXG5pbXBvcnQgc2xlZXRzaG93ZXJzX2RheSBmcm9tICcuL2ltYWdlcy9zbGVldHNob3dlcnNfZGF5LnN2Zyc7XHJcbmltcG9ydCBzbGVldHNob3dlcnNfbmlnaHQgZnJvbSAnLi9pbWFnZXMvc2xlZXRzaG93ZXJzX25pZ2h0LnN2Zyc7XHJcbmltcG9ydCBzbGVldHNob3dlcnNfcG9sYXJ0d2lsaWdodCBmcm9tICcuL2ltYWdlcy9zbGVldHNob3dlcnNfcG9sYXJ0d2lsaWdodC5zdmcnO1xyXG5pbXBvcnQgc25vdyBmcm9tICcuL2ltYWdlcy9zbm93LnN2Zyc7XHJcbmltcG9ydCBzbm93YW5kdGh1bmRlciBmcm9tICcuL2ltYWdlcy9zbm93YW5kdGh1bmRlci5zdmcnO1xyXG5pbXBvcnQgc25vd3Nob3dlcnNhbmR0aHVuZGVyX2RheSBmcm9tICcuL2ltYWdlcy9zbm93c2hvd2Vyc2FuZHRodW5kZXJfZGF5LnN2Zyc7XHJcbmltcG9ydCBzbm93c2hvd2Vyc2FuZHRodW5kZXJfbmlnaHQgZnJvbSAnLi9pbWFnZXMvc25vd3Nob3dlcnNhbmR0aHVuZGVyX25pZ2h0LnN2Zyc7XHJcbmltcG9ydCBzbm93c2hvd2Vyc2FuZHRodW5kZXJfcG9sYXJ0d2lsaWdodCBmcm9tICcuL2ltYWdlcy9zbm93c2hvd2Vyc2FuZHRodW5kZXJfcG9sYXJ0d2lsaWdodC5zdmcnO1xyXG5pbXBvcnQgc25vd3Nob3dlcnNfZGF5IGZyb20gJy4vaW1hZ2VzL3Nub3dzaG93ZXJzX2RheS5zdmcnO1xyXG5pbXBvcnQgc25vd3Nob3dlcnNfbmlnaHQgZnJvbSAnLi9pbWFnZXMvc25vd3Nob3dlcnNfbmlnaHQuc3ZnJztcclxuaW1wb3J0IHNub3dzaG93ZXJzX3BvbGFydHdpbGlnaHQgZnJvbSAnLi9pbWFnZXMvc25vd3Nob3dlcnNfcG9sYXJ0d2lsaWdodC5zdmcnO1xyXG5pbXBvcnQgaWNvbl9hcnJvdyBmcm9tICcuL2ltYWdlcy9pY29uX2Fycm93LnN2Zyc7XHJcbmltcG9ydCBiYXNlX21hcCBmcm9tICcuL2ltYWdlcy9iYXNlX21hcC5wbmcnO1xyXG5pbXBvcnQgYmFja2dyb3VuZF9pbWcgZnJvbSAnLi9pbWFnZXMvYmFja2dyb3VuZF9pbWcucG5nJztcclxuaW1wb3J0IHJhZGFyX21hcCBmcm9tICcuL2ltYWdlcy9yYWRhcl9tYXAucG5nJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IHtcclxuICBjbGVhcnNreV9kYXk6IGNsZWFyc2t5X2RheSxcclxuICBjbGVhcnNreV9uaWdodDogY2xlYXJza3lfbmlnaHQsXHJcbiAgY2xlYXJza3lfcG9sYXJ0d2lsaWdodDogY2xlYXJza3lfcG9sYXJ0d2lsaWdodCxcclxuICBjbG91ZHk6IGNsb3VkeSxcclxuICBmYWlyX2RheTogZmFpcl9kYXksXHJcbiAgZmFpcl9uaWdodDogZmFpcl9uaWdodCxcclxuICBmYWlyX3BvbGFydHdpbGlnaHQ6IGZhaXJfcG9sYXJ0d2lsaWdodCxcclxuICBmb2c6IGZvZyxcclxuICBoZWF2eXJhaW46IGhlYXZ5cmFpbixcclxuICBoZWF2eXJhaW5hbmR0aHVuZGVyOiBoZWF2eXJhaW5hbmR0aHVuZGVyLFxyXG4gIGhlYXZ5cmFpbnNob3dlcnNhbmR0aHVuZGVyX2RheTogaGVhdnlyYWluc2hvd2Vyc2FuZHRodW5kZXJfZGF5LFxyXG4gIGhlYXZ5cmFpbnNob3dlcnNhbmR0aHVuZGVyX25pZ2h0OiBoZWF2eXJhaW5zaG93ZXJzYW5kdGh1bmRlcl9uaWdodCxcclxuICBoZWF2eXJhaW5zaG93ZXJzYW5kdGh1bmRlcl9wb2xhcnR3aWxpZ2h0OlxyXG4gICAgaGVhdnlyYWluc2hvd2Vyc2FuZHRodW5kZXJfcG9sYXJ0d2lsaWdodCxcclxuICBoZWF2eXJhaW5zaG93ZXJzX2RheTogaGVhdnlyYWluc2hvd2Vyc19kYXksXHJcbiAgaGVhdnlyYWluc2hvd2Vyc19uaWdodDogaGVhdnlyYWluc2hvd2Vyc19uaWdodCxcclxuICBoZWF2eXJhaW5zaG93ZXJzX3BvbGFydHdpbGlnaHQ6IGhlYXZ5cmFpbnNob3dlcnNfcG9sYXJ0d2lsaWdodCxcclxuICBoZWF2eXNsZWV0OiBoZWF2eXNsZWV0LFxyXG4gIGhlYXZ5c2xlZXRhbmR0aHVuZGVyOiBoZWF2eXNsZWV0YW5kdGh1bmRlcixcclxuICBoZWF2eXNsZWV0c2hvd2Vyc2FuZHRodW5kZXJfZGF5OiBoZWF2eXNsZWV0c2hvd2Vyc2FuZHRodW5kZXJfZGF5LFxyXG4gIGhlYXZ5c2xlZXRzaG93ZXJzYW5kdGh1bmRlcl9uaWdodDogaGVhdnlzbGVldHNob3dlcnNhbmR0aHVuZGVyX25pZ2h0LFxyXG4gIGhlYXZ5c2xlZXRzaG93ZXJzYW5kdGh1bmRlcl9wb2xhcnR3aWxpZ2h0OlxyXG4gICAgaGVhdnlzbGVldHNob3dlcnNhbmR0aHVuZGVyX3BvbGFydHdpbGlnaHQsXHJcbiAgaGVhdnlzbGVldHNob3dlcnNfZGF5OiBoZWF2eXNsZWV0c2hvd2Vyc19kYXksXHJcbiAgaGVhdnlzbGVldHNob3dlcnNfbmlnaHQ6IGhlYXZ5c2xlZXRzaG93ZXJzX25pZ2h0LFxyXG4gIGhlYXZ5c2xlZXRzaG93ZXJzX3BvbGFydHdpbGlnaHQ6IGhlYXZ5c2xlZXRzaG93ZXJzX3BvbGFydHdpbGlnaHQsXHJcbiAgaGVhdnlzbm93OiBoZWF2eXNub3csXHJcbiAgaGVhdnlzbm93YW5kdGh1bmRlcjogaGVhdnlzbm93YW5kdGh1bmRlcixcclxuICBoZWF2eXNub3dzaG93ZXJzYW5kdGh1bmRlcl9kYXk6IGhlYXZ5c25vd3Nob3dlcnNhbmR0aHVuZGVyX2RheSxcclxuICBoZWF2eXNub3dzaG93ZXJzYW5kdGh1bmRlcl9uaWdodDogaGVhdnlzbm93c2hvd2Vyc2FuZHRodW5kZXJfbmlnaHQsXHJcbiAgaGVhdnlzbm93c2hvd2Vyc2FuZHRodW5kZXJfcG9sYXJ0d2lsaWdodDpcclxuICAgIGhlYXZ5c25vd3Nob3dlcnNhbmR0aHVuZGVyX3BvbGFydHdpbGlnaHQsXHJcbiAgaGVhdnlzbm93c2hvd2Vyc19kYXk6IGhlYXZ5c25vd3Nob3dlcnNfZGF5LFxyXG4gIGhlYXZ5c25vd3Nob3dlcnNfbmlnaHQ6IGhlYXZ5c25vd3Nob3dlcnNfbmlnaHQsXHJcbiAgaGVhdnlzbm93c2hvd2Vyc19wb2xhcnR3aWxpZ2h0OiBoZWF2eXNub3dzaG93ZXJzX3BvbGFydHdpbGlnaHQsXHJcbiAgbGlnaHRyYWluOiBsaWdodHJhaW4sXHJcbiAgbGlnaHRyYWluYW5kdGh1bmRlcjogbGlnaHRyYWluYW5kdGh1bmRlcixcclxuICBsaWdodHJhaW5zaG93ZXJzYW5kdGh1bmRlcl9kYXk6IGxpZ2h0cmFpbnNob3dlcnNhbmR0aHVuZGVyX2RheSxcclxuICBsaWdodHJhaW5zaG93ZXJzYW5kdGh1bmRlcl9uaWdodDogbGlnaHRyYWluc2hvd2Vyc2FuZHRodW5kZXJfbmlnaHQsXHJcbiAgbGlnaHRyYWluc2hvd2Vyc2FuZHRodW5kZXJfcG9sYXJ0d2lsaWdodDpcclxuICAgIGxpZ2h0cmFpbnNob3dlcnNhbmR0aHVuZGVyX3BvbGFydHdpbGlnaHQsXHJcbiAgbGlnaHRyYWluc2hvd2Vyc19kYXk6IGxpZ2h0cmFpbnNob3dlcnNfZGF5LFxyXG4gIGxpZ2h0cmFpbnNob3dlcnNfbmlnaHQ6IGxpZ2h0cmFpbnNob3dlcnNfbmlnaHQsXHJcbiAgbGlnaHRyYWluc2hvd2Vyc19wb2xhcnR3aWxpZ2h0OiBsaWdodHJhaW5zaG93ZXJzX3BvbGFydHdpbGlnaHQsXHJcbiAgbGlnaHRzbGVldDogbGlnaHRzbGVldCxcclxuICBsaWdodHNsZWV0YW5kdGh1bmRlcjogbGlnaHRzbGVldGFuZHRodW5kZXIsXHJcbiAgbGlnaHRzbGVldHNob3dlcnNfZGF5OiBsaWdodHNsZWV0c2hvd2Vyc19kYXksXHJcbiAgbGlnaHRzbGVldHNob3dlcnNfbmlnaHQ6IGxpZ2h0c2xlZXRzaG93ZXJzX25pZ2h0LFxyXG4gIGxpZ2h0c2xlZXRzaG93ZXJzX3BvbGFydHdpbGlnaHQ6IGxpZ2h0c2xlZXRzaG93ZXJzX3BvbGFydHdpbGlnaHQsXHJcbiAgbGlnaHRzbm93OiBsaWdodHNub3csXHJcbiAgbGlnaHRzbm93YW5kdGh1bmRlcjogbGlnaHRzbm93YW5kdGh1bmRlcixcclxuICBsaWdodHNub3dhbmR0aHVuZGVyOiBsaWdodHNub3dhbmR0aHVuZGVyLFxyXG4gIGxpZ2h0c25vd3Nob3dlcnNfZGF5OiBsaWdodHNub3dzaG93ZXJzX2RheSxcclxuICBsaWdodHNub3dzaG93ZXJzX25pZ2h0OiBsaWdodHNub3dzaG93ZXJzX25pZ2h0LFxyXG4gIGxpZ2h0c25vd3Nob3dlcnNfcG9sYXJ0d2lsaWdodDogbGlnaHRzbm93c2hvd2Vyc19wb2xhcnR3aWxpZ2h0LFxyXG4gIGlnaHRzc2xlZXRzaG93ZXJzYW5kdGh1bmRlcl9kYXk6IGxpZ2h0c3NsZWV0c2hvd2Vyc2FuZHRodW5kZXJfZGF5LFxyXG4gIGxpZ2h0c3NsZWV0c2hvd2Vyc2FuZHRodW5kZXJfbmlnaHQ6IGxpZ2h0c3NsZWV0c2hvd2Vyc2FuZHRodW5kZXJfbmlnaHQsXHJcbiAgbGlnaHRzc2xlZXRzaG93ZXJzYW5kdGh1bmRlcl9wb2xhcnR3aWxpZ2h0OlxyXG4gICAgbGlnaHRzc2xlZXRzaG93ZXJzYW5kdGh1bmRlcl9wb2xhcnR3aWxpZ2h0LFxyXG4gIGxpZ2h0c3Nub3dzaG93ZXJzYW5kdGh1bmRlcl9kYXk6IGxpZ2h0c3Nub3dzaG93ZXJzYW5kdGh1bmRlcl9kYXksXHJcbiAgbGlnaHRzc25vd3Nob3dlcnNhbmR0aHVuZGVyX25pZ2h0OiBsaWdodHNzbm93c2hvd2Vyc2FuZHRodW5kZXJfbmlnaHQsXHJcbiAgbGlnaHRzc25vd3Nob3dlcnNhbmR0aHVuZGVyX3BvbGFydHdpbGlnaHQ6XHJcbiAgICBsaWdodHNzbm93c2hvd2Vyc2FuZHRodW5kZXJfcG9sYXJ0d2lsaWdodCxcclxuICBwYXJ0bHljbG91ZHlfZGF5OiBwYXJ0bHljbG91ZHlfZGF5LFxyXG4gIHBhcnRseWNsb3VkeV9uaWdodDogcGFydGx5Y2xvdWR5X25pZ2h0LFxyXG4gIHBhcnRseWNsb3VkeV9wb2xhcnR3aWxpZ2h0OiBwYXJ0bHljbG91ZHlfcG9sYXJ0d2lsaWdodCxcclxuICByYWluOiByYWluLFxyXG4gIHJhaW5hbmR0aHVuZGVyOiByYWluYW5kdGh1bmRlcixcclxuICByYWluc2hvd2Vyc2FuZHRodW5kZXJfZGF5OiByYWluc2hvd2Vyc2FuZHRodW5kZXJfZGF5LFxyXG4gIHJhaW5zaG93ZXJzYW5kdGh1bmRlcl9uaWdodDogcmFpbnNob3dlcnNhbmR0aHVuZGVyX25pZ2h0LFxyXG4gIHJhaW5zaG93ZXJzYW5kdGh1bmRlcl9wb2xhcnR3aWxpZ2h0OiByYWluc2hvd2Vyc2FuZHRodW5kZXJfcG9sYXJ0d2lsaWdodCxcclxuICByYWluc2hvd2Vyc19kYXk6IHJhaW5zaG93ZXJzX2RheSxcclxuICByYWluc2hvd2Vyc19uaWdodDogcmFpbnNob3dlcnNfbmlnaHQsXHJcbiAgcmFpbnNob3dlcnNfcG9sYXJ0d2lsaWdodDogcmFpbnNob3dlcnNfcG9sYXJ0d2lsaWdodCxcclxuICBzbGVldDogc2xlZXQsXHJcbiAgc2xlZXRhbmR0aHVuZGVyOiBzbGVldGFuZHRodW5kZXIsXHJcbiAgc2xlZXRzaG93ZXJzYW5kdGh1bmRlcl9kYXk6IHNsZWV0c2hvd2Vyc2FuZHRodW5kZXJfZGF5LFxyXG4gIHNsZWV0c2hvd2Vyc2FuZHRodW5kZXJfbmlnaHQ6IHNsZWV0c2hvd2Vyc2FuZHRodW5kZXJfbmlnaHQsXHJcbiAgc2xlZXRzaG93ZXJzYW5kdGh1bmRlcl9wb2xhcnR3aWxpZ2h0OiBzbGVldHNob3dlcnNhbmR0aHVuZGVyX3BvbGFydHdpbGlnaHQsXHJcbiAgc2xlZXRzaG93ZXJzX2RheTogc2xlZXRzaG93ZXJzX2RheSxcclxuICBzbGVldHNob3dlcnNfbmlnaHQ6IHNsZWV0c2hvd2Vyc19uaWdodCxcclxuICBzbGVldHNob3dlcnNfcG9sYXJ0d2lsaWdodDogc2xlZXRzaG93ZXJzX3BvbGFydHdpbGlnaHQsXHJcbiAgc25vdzogc25vdyxcclxuICBzbm93YW5kdGh1bmRlcjogc25vd2FuZHRodW5kZXIsXHJcbiAgc25vd3Nob3dlcnNhbmR0aHVuZGVyX2RheTogc25vd3Nob3dlcnNhbmR0aHVuZGVyX2RheSxcclxuICBzbm93c2hvd2Vyc2FuZHRodW5kZXJfbmlnaHQ6IHNub3dzaG93ZXJzYW5kdGh1bmRlcl9uaWdodCxcclxuICBzbm93c2hvd2Vyc2FuZHRodW5kZXJfcG9sYXJ0d2lsaWdodDogc25vd3Nob3dlcnNhbmR0aHVuZGVyX3BvbGFydHdpbGlnaHQsXHJcbiAgc25vd3Nob3dlcnNfZGF5OiBzbm93c2hvd2Vyc19kYXksXHJcbiAgc25vd3Nob3dlcnNfbmlnaHQ6IHNub3dzaG93ZXJzX25pZ2h0LFxyXG4gIHNub3dzaG93ZXJzX3BvbGFydHdpbGlnaHQ6IHNub3dzaG93ZXJzX3BvbGFydHdpbGlnaHQsXHJcbiAgaWNvbl9hcnJvdzogaWNvbl9hcnJvdyxcclxuICBiYXNlX21hcDogYmFzZV9tYXAsXHJcbiAgYmFja2dyb3VuZF9pbWc6IGJhY2tncm91bmRfaW1nLFxyXG4gIHJhZGFyX21hcDogcmFkYXJfbWFwLFxyXG59O1xyXG4iLCIvL25weCB3ZWJwYWNrIC0td2F0Y2hcclxuLy91c2UgdHJlZSBzaGFraW5nIHdoZW4gbW9yZSBjaGFydHMgYXJlIGRvbmVcclxuaW1wb3J0ICcuL3N0eWxlcy5jc3MnO1xyXG5pbXBvcnQgQ2hhcnQgZnJvbSAnY2hhcnQuanMvYXV0byc7XHJcbmltcG9ydCBpbWFnZXMgZnJvbSAnLi9pbWFnZXMnO1xyXG5cclxuY2xhc3MgQmFyTGluZUNoYXJ0IHtcclxuICBjb25zdHJ1Y3RvcihjdHgpIHtcclxuICAgIHRoaXMuYnVpbGRDaGFydChjdHgpO1xyXG4gIH1cclxuXHJcbiAgYnVpbGRDaGFydChjdHgpIHtcclxuICAgIHRoaXMuY2hhcnQgPSBuZXcgQ2hhcnQoY3R4LCB7XHJcbiAgICAgIGRhdGE6IHtcclxuICAgICAgICBkYXRhc2V0czogdGhpcy5nZXREYXRhc2V0cygpLFxyXG4gICAgICB9LFxyXG4gICAgICBvcHRpb25zOiB0aGlzLmdldE9wdGlvbnMoKSxcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgdXBkYXRlRGF0YShcclxuICAgIGhvdXIsXHJcbiAgICB0ZW1wLFxyXG4gICAgcHJlY2lwaXRhdGlvbixcclxuICAgIHdpbmQsXHJcbiAgICBhaXJQcmVzc3VyZSxcclxuICAgIHdlYXRoZXJJbWcsXHJcbiAgICB3aW5kQXJyb3csXHJcbiAgICB3aW5kRGlyZWN0aW9uXHJcbiAgKSB7XHJcbiAgICB0aGlzLmNoYXJ0LmRhdGEubGFiZWxzID0gaG91cjtcclxuICAgIHRoaXMuY2hhcnQuZGF0YS5kYXRhc2V0c1swXS5kYXRhID0gdGVtcDtcclxuICAgIHRoaXMuY2hhcnQuZGF0YS5kYXRhc2V0c1swXS5wb2ludFN0eWxlID0gd2VhdGhlckltZztcclxuICAgIHRoaXMuY2hhcnQuZGF0YS5kYXRhc2V0c1sxXS5kYXRhID0gcHJlY2lwaXRhdGlvbjtcclxuICAgIHRoaXMuY2hhcnQuZGF0YS5kYXRhc2V0c1syXS5kYXRhID0gd2luZDtcclxuICAgIHRoaXMuY2hhcnQuZGF0YS5kYXRhc2V0c1syXS5wb2ludFN0eWxlID0gd2luZEFycm93O1xyXG4gICAgdGhpcy5jaGFydC5kYXRhLmRhdGFzZXRzWzJdLnBvaW50Um90YXRpb24gPSB3aW5kRGlyZWN0aW9uO1xyXG4gICAgdGhpcy5jaGFydC5kYXRhLmRhdGFzZXRzWzNdLmRhdGEgPSBhaXJQcmVzc3VyZTtcclxuICAgIHRoaXMuY2hhcnQudXBkYXRlKCk7XHJcbiAgfVxyXG5cclxuICBnZXREYXRhc2V0cygpIHtcclxuICAgIHJldHVybiBbXHJcbiAgICAgIHtcclxuICAgICAgICAvL3RlbXBcclxuICAgICAgICBvcmRlcjogMixcclxuICAgICAgICB0eXBlOiAnbGluZScsXHJcbiAgICAgICAgcG9pbnRSYWRpdXM6IDAuMSxcclxuICAgICAgICB0ZW5zaW9uOiAwLjQsXHJcbiAgICAgICAgZmlsbDogdHJ1ZSxcclxuICAgICAgICBib3JkZXJXaWR0aDogMCxcclxuICAgICAgICB5QXhpc0lEOiAneScsXHJcbiAgICAgICAgc2VnbWVudDoge1xyXG4gICAgICAgICAgYmFja2dyb3VuZENvbG9yOiAoY3R4KSA9PlxyXG4gICAgICAgICAgICBjdHgucDAucGFyc2VkLnkgPiAwXHJcbiAgICAgICAgICAgICAgPyAncmdiYSgzNjAsIDYzLCA3MywgMC41KSdcclxuICAgICAgICAgICAgICA6ICdyZ2JhKDE0MSwgMTY2LCAyMjksIDAuNSknLFxyXG4gICAgICAgIH0sXHJcbiAgICAgIH0sXHJcbiAgICAgIHtcclxuICAgICAgICAvL3ByZWNpcGl0YXRpb25cclxuICAgICAgICBvcmRlcjogMSxcclxuICAgICAgICB0eXBlOiAnYmFyJyxcclxuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6ICdyZ2JhKDU0LCAxNjIsIDIzNSwgMC4zKScsXHJcbiAgICAgICAgYm9yZGVyV2lkdGg6IDAsXHJcbiAgICAgICAgeUF4aXNJRDogJ3kyJyxcclxuICAgICAgfSxcclxuICAgICAge1xyXG4gICAgICAgIC8vd2luZFxyXG4gICAgICAgIG9yZGVyOiAzLFxyXG4gICAgICAgIHR5cGU6ICdsaW5lJyxcclxuICAgICAgICBwb2ludFJhZGl1czogMC4xLFxyXG4gICAgICAgIHRlbnNpb246IDAuNCxcclxuICAgICAgICB5QXhpc0lEOiAneScsXHJcbiAgICAgICAgc2VnbWVudDoge1xyXG4gICAgICAgICAgYm9yZGVyQ29sb3I6ICdyZ2JhKDE0MSwgMjI5LCAxNjYsIDAuNSknLFxyXG4gICAgICAgIH0sXHJcbiAgICAgIH0sXHJcbiAgICAgIHtcclxuICAgICAgICAvL2FpclByZXNzdXJlXHJcbiAgICAgICAgb3JkZXI6IDQsXHJcbiAgICAgICAgdHlwZTogJ2xpbmUnLFxyXG4gICAgICAgIHBvaW50UmFkaXVzOiAwLFxyXG4gICAgICAgIHRlbnNpb246IDAuNCxcclxuICAgICAgICBib3JkZXJEYXNoOiBbNSwgNV0sXHJcbiAgICAgICAgeUF4aXNJRDogJ3kzJyxcclxuICAgICAgICBzZWdtZW50OiB7XHJcbiAgICAgICAgICBib3JkZXJDb2xvcjogJ3JnYmEoMTk3LCAyMDEsIDE5OCwgMC45KScsXHJcbiAgICAgICAgfSxcclxuICAgICAgfSxcclxuICAgIF07XHJcbiAgfVxyXG5cclxuICBnZXRPcHRpb25zKCkge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgcmVzcG9uc2l2ZTogdHJ1ZSxcclxuICAgICAgbWFpbnRhaW5Bc3BlY3RSYXRpbzogZmFsc2UsXHJcbiAgICAgIHBsdWdpbnM6IHsgbGVnZW5kOiB7IGRpc3BsYXk6IGZhbHNlIH0gfSxcclxuICAgICAgc2NhbGVzOiB7XHJcbiAgICAgICAgeToge1xyXG4gICAgICAgICAgLy90ZW1wICYgd2luZFxyXG4gICAgICAgICAgbWluOiAtMTUsXHJcbiAgICAgICAgICBtYXg6IDM1LFxyXG4gICAgICAgICAgdHlwZTogJ2xpbmVhcicsXHJcbiAgICAgICAgICBwb3NpdGlvbjogJ2xlZnQnLFxyXG4gICAgICAgICAgdGlja3M6IHtcclxuICAgICAgICAgICAgY29sb3I6ICdibGFjaycsXHJcbiAgICAgICAgICAgIGJlZ2luQXRaZXJvOiB0cnVlLFxyXG4gICAgICAgICAgfSxcclxuICAgICAgICB9LFxyXG4gICAgICAgIHkyOiB7XHJcbiAgICAgICAgICAvL3ByZWNpcGl0YXRpb25cclxuICAgICAgICAgIG1pbjogMCxcclxuICAgICAgICAgIG1heDogMTYsXHJcbiAgICAgICAgICB0eXBlOiAnbGluZWFyJyxcclxuICAgICAgICAgIHBvc2l0aW9uOiAncmlnaHQnLFxyXG4gICAgICAgICAgdGlja3M6IHtcclxuICAgICAgICAgICAgY29sb3I6ICdyZ2JhKDU0LCAxNjIsIDIzNSwgMC44KScsXHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgICAgZ3JpZDoge1xyXG4gICAgICAgICAgICBkcmF3T25DaGFydEFyZWE6IGZhbHNlLFxyXG4gICAgICAgICAgfSxcclxuICAgICAgICB9LFxyXG4gICAgICAgIHkzOiB7XHJcbiAgICAgICAgICAvL2FpclByZXNzdXJlXHJcbiAgICAgICAgICB0eXBlOiAnbGluZWFyJyxcclxuICAgICAgICAgIHBvc2l0aW9uOiAncmlnaHQnLFxyXG4gICAgICAgICAgdGlja3M6IHtcclxuICAgICAgICAgICAgY29sb3I6ICdyZ2JhKDE5NywgMjAxLCAxOTgsIDEpJyxcclxuICAgICAgICAgICAgc3RlcFNpemU6IDUsXHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgICAgZ3JpZDoge1xyXG4gICAgICAgICAgICBkcmF3T25DaGFydEFyZWE6IGZhbHNlLFxyXG4gICAgICAgICAgfSxcclxuICAgICAgICB9LFxyXG4gICAgICB9LFxyXG4gICAgfTtcclxuICB9XHJcbn1cclxuXHJcbmNsYXNzIERpc3BsYXlDb250cm9sbGVyIHtcclxuICBjb25zdHJ1Y3RvcigpIHtcclxuICAgIHRoaXMucmFkYXJJbWFnZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdyYWRhci1tYXAnKTtcclxuICAgIHRoaXMuY2hhcnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY2hhcnQnKTtcclxuICB9XHJcbiAgZ2V0Q2hhcnRFbCgpIHtcclxuICAgIHJldHVybiB0aGlzLmNoYXJ0O1xyXG4gIH1cclxuICB1cGRhdGVSYWRhckltYWdlKHRpbWVTdGFtcCwgaW1hZ2VVUkwpIHtcclxuICAgIGNvbnNvbGUubG9nKHRpbWVTdGFtcCk7XHJcbiAgICB0aGlzLnJhZGFySW1hZ2Uuc3JjID0gaW1hZ2VVUkw7XHJcbiAgfVxyXG59XHJcblxyXG5jbGFzcyBXZWF0aGVyRGF0YSB7XHJcbiAgYXN5bmMgZmV0Y2godXJsKSB7XHJcbiAgICB0cnkge1xyXG4gICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKHVybCwgeyBtb2RlOiAnY29ycycgfSk7XHJcbiAgICAgIHJldHVybiByZXNwb25zZTtcclxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgIGNvbnNvbGUubG9nKGVycm9yKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGFzeW5jIGdldEpTT04ocmVzcG9uc2UpIHtcclxuICAgIHRyeSB7XHJcbiAgICAgIGNvbnN0IGpzb24gPSBhd2FpdCByZXNwb25zZS5qc29uKCk7XHJcbiAgICAgIC8vIGNvbnN0IGpzb24gPSByZXF1aXJlKCcuL2RhdGEuanNvbicpO1xyXG4gICAgICByZXR1cm4ganNvbjtcclxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgIGNvbnNvbGUubG9nKGVycm9yKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGdldFJhZGFySW1hZ2UoanNvbikge1xyXG4gICAgLy8gY29uc3QgeSA9IGpzb24uZmlsZXM7XHJcbiAgICAvLyBjb25zdCBsYXN0WCA9IDM3O1xyXG4gICAgLy8gY29uc3QgcmVzID0geS5maWx0ZXIoKHZhbCwgaW5kZXgsIGFycikgPT4gaW5kZXggPiBhcnIubGVuZ3RoIC0gbGFzdFggLSAxKTtcclxuICAgIC8vIGNvbnNvbGUubG9nKHJlcyk7XHJcbiAgICAvLyBjb25zb2xlLmxvZyhyZXNbMF0uZm9ybWF0c1swXS5saW5rKTtcclxuICAgIC8vIGNvbnN0IHJlcyA9IGF3YWl0IGZldGNoKGpzb24ubGFzdEZpbGVzWzBdLmZvcm1hdHNbMF0ubGluaywge1xyXG4gICAgLy8gICBtb2RlOiAnY29ycycsXHJcbiAgICAvLyB9KTtcclxuICAgIC8vIGNvbnN0IGJsb2IgPSBhd2FpdCByZXMuYmxvYigpO1xyXG4gICAgLy8gY29uc3Qgb2JqZWN0VVJMID0gVVJMLmNyZWF0ZU9iamVjdFVSTChibG9iKTtcclxuICAgIGNvbnN0IHRpbWVTdGFtcCA9IGpzb24ubGFzdEZpbGVzWzBdLmZvcm1hdHNbMF0udXBkYXRlZDtcclxuICAgIGNvbnN0IGltYWdlVVJMID0ganNvbi5sYXN0RmlsZXNbMF0uZm9ybWF0c1swXS5saW5rO1xyXG4gICAgcmV0dXJuIHsgdGltZVN0YW1wLCBpbWFnZVVSTCB9O1xyXG4gIH1cclxuXHJcbiAgZ2V0Q2hhcnREYXRhKGpzb24pIHtcclxuICAgIGNvbnN0IGhvdXIgPSBbXTtcclxuICAgIGNvbnN0IHRlbXAgPSBbXTtcclxuICAgIGNvbnN0IHByZWNpcGl0YXRpb24gPSBbXTtcclxuICAgIGNvbnN0IHdpbmQgPSBbXTtcclxuICAgIGNvbnN0IGFpclByZXNzdXJlID0gW107XHJcbiAgICBjb25zdCB3ZWF0aGVySW1nID0gW107XHJcbiAgICBjb25zdCB3aW5kQXJyb3cgPSBbXTtcclxuICAgIGNvbnN0IHdpbmREaXJlY3Rpb24gPSBbXTtcclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgMTI7IGkrKykge1xyXG4gICAgICAvL2FkZCArMWggZm9yIFVUQ1xyXG4gICAgICBob3VyLnB1c2gocGFyc2VJbnQoanNvbi5wcm9wZXJ0aWVzLnRpbWVzZXJpZXNbaV0udGltZS5zbGljZSgxMSwgMTMpKSArIDEpO1xyXG4gICAgICB0ZW1wLnB1c2goXHJcbiAgICAgICAganNvbi5wcm9wZXJ0aWVzLnRpbWVzZXJpZXNbaV0uZGF0YS5pbnN0YW50LmRldGFpbHMuYWlyX3RlbXBlcmF0dXJlXHJcbiAgICAgICk7XHJcbiAgICAgIHByZWNpcGl0YXRpb24ucHVzaChcclxuICAgICAgICBqc29uLnByb3BlcnRpZXMudGltZXNlcmllc1tpXS5kYXRhLm5leHRfMV9ob3Vycy5kZXRhaWxzXHJcbiAgICAgICAgICAucHJlY2lwaXRhdGlvbl9hbW91bnRcclxuICAgICAgKTtcclxuICAgICAgd2luZC5wdXNoKGpzb24ucHJvcGVydGllcy50aW1lc2VyaWVzW2ldLmRhdGEuaW5zdGFudC5kZXRhaWxzLndpbmRfc3BlZWQpO1xyXG4gICAgICBhaXJQcmVzc3VyZS5wdXNoKFxyXG4gICAgICAgIGpzb24ucHJvcGVydGllcy50aW1lc2VyaWVzW2ldLmRhdGEuaW5zdGFudC5kZXRhaWxzXHJcbiAgICAgICAgICAuYWlyX3ByZXNzdXJlX2F0X3NlYV9sZXZlbFxyXG4gICAgICApO1xyXG4gICAgICBpZiAoaSAlIDIgPT09IDApIHtcclxuICAgICAgICBjb25zdCBpbWcgPSBuZXcgSW1hZ2UoMzUsIDM1KTtcclxuICAgICAgICBpbWcuc3JjID1cclxuICAgICAgICAgIGltYWdlc1tcclxuICAgICAgICAgICAganNvbi5wcm9wZXJ0aWVzLnRpbWVzZXJpZXNbaV0uZGF0YS5uZXh0XzFfaG91cnMuc3VtbWFyeS5zeW1ib2xfY29kZVxyXG4gICAgICAgICAgXTtcclxuICAgICAgICB3ZWF0aGVySW1nLnB1c2goaW1nKTtcclxuICAgICAgICB3aW5kQXJyb3cucHVzaCgnJyk7XHJcbiAgICAgICAgd2luZERpcmVjdGlvbi5wdXNoKCcnKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBjb25zdCBpbWcgPSBuZXcgSW1hZ2UoMjAsIDIwKTtcclxuICAgICAgICB3ZWF0aGVySW1nLnB1c2goJycpO1xyXG4gICAgICAgIGltZy5zcmMgPSBpbWFnZXMuaWNvbl9hcnJvdztcclxuICAgICAgICB3aW5kQXJyb3cucHVzaChpbWcpO1xyXG4gICAgICAgIHdpbmREaXJlY3Rpb24ucHVzaChcclxuICAgICAgICAgIGpzb24ucHJvcGVydGllcy50aW1lc2VyaWVzW2ldLmRhdGEuaW5zdGFudC5kZXRhaWxzLndpbmRfZnJvbV9kaXJlY3Rpb25cclxuICAgICAgICApO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICBob3VyLFxyXG4gICAgICB0ZW1wLFxyXG4gICAgICBwcmVjaXBpdGF0aW9uLFxyXG4gICAgICB3aW5kLFxyXG4gICAgICBhaXJQcmVzc3VyZSxcclxuICAgICAgd2VhdGhlckltZyxcclxuICAgICAgd2luZEFycm93LFxyXG4gICAgICB3aW5kRGlyZWN0aW9uLFxyXG4gICAgfTtcclxuICB9XHJcbn1cclxuXHJcbmNsYXNzIE1haW4ge1xyXG4gIGNvbnN0cnVjdG9yKGNoYXJ0VVJMLCBtYXBVUkwpIHtcclxuICAgIHRoaXMud2VhdGhlckRhdGEgPSBuZXcgV2VhdGhlckRhdGEoKTtcclxuICAgIHRoaXMuZGlzcGxheUNvbnRyb2xsZXIgPSBuZXcgRGlzcGxheUNvbnRyb2xsZXIoKTtcclxuICAgIHRoaXMuY2hhcnQgPSBuZXcgQmFyTGluZUNoYXJ0KHRoaXMuZGlzcGxheUNvbnRyb2xsZXIuZ2V0Q2hhcnRFbCgpKTtcclxuICAgIC8vIHRoaXMudXBkYXRlQ2hhcnQoY2hhcnRVUkwpO1xyXG4gICAgLy8gdGhpcy51cGRhdGVNYXAobWFwVVJMKTtcclxuICB9XHJcblxyXG4gIGFzeW5jIHVwZGF0ZU1hcChtYXBVUkwpIHtcclxuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgdGhpcy53ZWF0aGVyRGF0YS5mZXRjaChtYXBVUkwpO1xyXG4gICAgY29uc3QganNvbiA9IGF3YWl0IHRoaXMud2VhdGhlckRhdGEuZ2V0SlNPTihyZXNwb25zZSk7XHJcbiAgICBjb25zdCBkYXRhID0gdGhpcy53ZWF0aGVyRGF0YS5nZXRSYWRhckltYWdlKGpzb24pO1xyXG4gICAgdGhpcy5kaXNwbGF5Q29udHJvbGxlci51cGRhdGVSYWRhckltYWdlKGRhdGEudGltZVN0YW1wLCBkYXRhLmltYWdlVVJMKTtcclxuICAgIC8vIHNldFRpbWVvdXQodGhpcy51cGRhdGVNYXAuYmluZCh0aGlzKSwgNTAwMCk7XHJcbiAgfVxyXG5cclxuICBhc3luYyB1cGRhdGVDaGFydChjaGFydFVSTCkge1xyXG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCB0aGlzLndlYXRoZXJEYXRhLmZldGNoKGNoYXJ0VVJMKTtcclxuICAgIGNvbnN0IGpzb24gPSBhd2FpdCB0aGlzLndlYXRoZXJEYXRhLmdldEpTT04ocmVzcG9uc2UpO1xyXG4gICAgY29uc3QgZGF0YSA9IHRoaXMud2VhdGhlckRhdGEuZ2V0Q2hhcnREYXRhKGpzb24pO1xyXG4gICAgdGhpcy5jaGFydC51cGRhdGVEYXRhKFxyXG4gICAgICBkYXRhLmhvdXIsXHJcbiAgICAgIGRhdGEudGVtcCxcclxuICAgICAgZGF0YS5wcmVjaXBpdGF0aW9uLFxyXG4gICAgICBkYXRhLndpbmQsXHJcbiAgICAgIGRhdGEuYWlyUHJlc3N1cmUsXHJcbiAgICAgIGRhdGEud2VhdGhlckltZyxcclxuICAgICAgZGF0YS53aW5kQXJyb3csXHJcbiAgICAgIGRhdGEud2luZERpcmVjdGlvblxyXG4gICAgKTtcclxuICAgIC8vIHNldFRpbWVvdXQodGhpcy51cGRhdGVDaGFydC5iaW5kKHRoaXMpLCA1MDAwKTtcclxuICB9XHJcbn1cclxuXHJcbi8vc8OkdHQgdGltZXN0YW1wIMO2dmVyIHNtaGlcclxuLy9nw7ZyIGVnZW4gc2thbGEgZsO2ciByYWRhcmJpbGQ/IGh0dHA6Ly9vcGVuZGF0YS1kb3dubG9hZC1yYWRhci5zbWhpLnNlL2V4cGxvcmUvXHJcblxyXG5jb25zdCBjaGFydFVSTCA9XHJcbiAgJ2h0dHBzOi8vYXBpLm1ldC5uby93ZWF0aGVyYXBpL2xvY2F0aW9uZm9yZWNhc3QvMi4wL2NvbXBsZXRlP2xhdD01OS44NTg2Jmxvbj0xNy42Mzg5JztcclxuY29uc3QgbWFwVVJMID1cclxuICAnaHR0cHM6Ly9vcGVuZGF0YS1kb3dubG9hZC1yYWRhci5zbWhpLnNlL2FwaS92ZXJzaW9uL2xhdGVzdC9hcmVhL3N3ZWRlbi9wcm9kdWN0L2NvbXA/Zm9ybWF0PXBuZyZ0aW1lWm9uZT1FdXJvcGUvU3RvY2tob2xtJztcclxubmV3IE1haW4oY2hhcnRVUkwsIG1hcFVSTCk7XHJcbiJdLCJuYW1lcyI6WyJfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfMF9fXyIsIlVSTCIsIl9fX0NTU19MT0FERVJfRVhQT1JUX19fIiwicHVzaCIsIm1vZHVsZSIsImlkIiwiX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfMF9fXyIsImV4cG9ydHMiLCJjc3NXaXRoTWFwcGluZ1RvU3RyaW5nIiwibGlzdCIsInRvU3RyaW5nIiwidGhpcyIsIm1hcCIsIml0ZW0iLCJjb250ZW50IiwibmVlZExheWVyIiwiY29uY2F0IiwibGVuZ3RoIiwiam9pbiIsImkiLCJtb2R1bGVzIiwibWVkaWEiLCJkZWR1cGUiLCJzdXBwb3J0cyIsImxheWVyIiwidW5kZWZpbmVkIiwiYWxyZWFkeUltcG9ydGVkTW9kdWxlcyIsImsiLCJfayIsInVybCIsIm9wdGlvbnMiLCJTdHJpbmciLCJfX2VzTW9kdWxlIiwiZGVmYXVsdCIsInRlc3QiLCJzbGljZSIsImhhc2giLCJuZWVkUXVvdGVzIiwicmVwbGFjZSIsImNzc01hcHBpbmciLCJidG9hIiwiYmFzZTY0IiwidW5lc2NhcGUiLCJlbmNvZGVVUklDb21wb25lbnQiLCJKU09OIiwic3RyaW5naWZ5IiwiZGF0YSIsInNvdXJjZU1hcHBpbmciLCJzb3VyY2VVUkxzIiwic291cmNlcyIsInNvdXJjZSIsInNvdXJjZVJvb3QiLCJzdHlsZXNJbkRPTSIsImdldEluZGV4QnlJZGVudGlmaWVyIiwiaWRlbnRpZmllciIsInJlc3VsdCIsIm1vZHVsZXNUb0RvbSIsImlkQ291bnRNYXAiLCJpZGVudGlmaWVycyIsImJhc2UiLCJjb3VudCIsImluZGV4QnlJZGVudGlmaWVyIiwib2JqIiwiY3NzIiwic291cmNlTWFwIiwicmVmZXJlbmNlcyIsInVwZGF0ZXIiLCJhZGRFbGVtZW50U3R5bGUiLCJieUluZGV4Iiwic3BsaWNlIiwiYXBpIiwiZG9tQVBJIiwidXBkYXRlIiwibmV3T2JqIiwicmVtb3ZlIiwibGFzdElkZW50aWZpZXJzIiwibmV3TGlzdCIsImluZGV4IiwibmV3TGFzdElkZW50aWZpZXJzIiwiX2kiLCJfaW5kZXgiLCJtZW1vIiwiaW5zZXJ0Iiwic3R5bGUiLCJ0YXJnZXQiLCJzdHlsZVRhcmdldCIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsIndpbmRvdyIsIkhUTUxJRnJhbWVFbGVtZW50IiwiY29udGVudERvY3VtZW50IiwiaGVhZCIsImUiLCJnZXRUYXJnZXQiLCJFcnJvciIsImFwcGVuZENoaWxkIiwiZWxlbWVudCIsImNyZWF0ZUVsZW1lbnQiLCJzZXRBdHRyaWJ1dGVzIiwiYXR0cmlidXRlcyIsInN0eWxlRWxlbWVudCIsIm5vbmNlIiwic2V0QXR0cmlidXRlIiwiaW5zZXJ0U3R5bGVFbGVtZW50Iiwic3R5bGVUYWdUcmFuc2Zvcm0iLCJhcHBseSIsInBhcmVudE5vZGUiLCJyZW1vdmVDaGlsZCIsInJlbW92ZVN0eWxlRWxlbWVudCIsInN0eWxlU2hlZXQiLCJjc3NUZXh0IiwiZmlyc3RDaGlsZCIsImNyZWF0ZVRleHROb2RlIiwiX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiY2FjaGVkTW9kdWxlIiwiX193ZWJwYWNrX21vZHVsZXNfXyIsIm0iLCJuIiwiZ2V0dGVyIiwiZCIsImEiLCJkZWZpbml0aW9uIiwia2V5IiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsImciLCJnbG9iYWxUaGlzIiwiRnVuY3Rpb24iLCJwcm9wIiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwic2NyaXB0VXJsIiwiaW1wb3J0U2NyaXB0cyIsImxvY2F0aW9uIiwiY3VycmVudFNjcmlwdCIsInNyYyIsInNjcmlwdHMiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsInAiLCJiIiwiYmFzZVVSSSIsInNlbGYiLCJocmVmIiwicmVxdWVzdEFuaW1GcmFtZSIsImNhbGxiYWNrIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwidGhyb3R0bGVkIiwiZm4iLCJ0aGlzQXJnIiwidXBkYXRlRm4iLCJ1cGRhdGVBcmdzIiwiYXJncyIsIkFycmF5IiwidGlja2luZyIsInJlc3QiLCJfdG9MZWZ0UmlnaHRDZW50ZXIiLCJhbGlnbiIsIl9hbGlnblN0YXJ0RW5kIiwic3RhcnQiLCJlbmQiLCJub29wIiwidWlkIiwiaXNOdWxsT3JVbmRlZiIsInZhbHVlIiwiaXNBcnJheSIsInR5cGUiLCJzdWJzdHIiLCJpc09iamVjdCIsImlzTnVtYmVyRmluaXRlIiwiTnVtYmVyIiwiaXNGaW5pdGUiLCJmaW5pdGVPckRlZmF1bHQiLCJkZWZhdWx0VmFsdWUiLCJ2YWx1ZU9yRGVmYXVsdCIsInRvRGltZW5zaW9uIiwiZGltZW5zaW9uIiwiZW5kc1dpdGgiLCJwYXJzZUZsb2F0IiwiZWFjaCIsImxvb3BhYmxlIiwicmV2ZXJzZSIsImxlbiIsImtleXMiLCJfZWxlbWVudHNFcXVhbCIsImEwIiwiYTEiLCJpbGVuIiwidjAiLCJ2MSIsImRhdGFzZXRJbmRleCIsImNsb25lJDEiLCJjcmVhdGUiLCJrbGVuIiwiaXNWYWxpZEtleSIsImluZGV4T2YiLCJfbWVyZ2VyIiwidHZhbCIsInN2YWwiLCJtZXJnZSIsIm1lcmdlciIsIm1lcmdlSWYiLCJfbWVyZ2VySWYiLCJpbmRleE9mRG90T3JMZW5ndGgiLCJpZHgiLCJyZXNvbHZlT2JqZWN0S2V5IiwicG9zIiwiX2NhcGl0YWxpemUiLCJzdHIiLCJjaGFyQXQiLCJ0b1VwcGVyQ2FzZSIsImRlZmluZWQiLCJpc0Z1bmN0aW9uIiwic2V0c0VxdWFsIiwic2l6ZSIsImhhcyIsIlBJIiwiTWF0aCIsIlRBVSIsIlBJVEFVIiwiSU5GSU5JVFkiLCJQT1NJVElWRV9JTkZJTklUWSIsIlJBRF9QRVJfREVHIiwiSEFMRl9QSSIsIlFVQVJURVJfUEkiLCJUV09fVEhJUkRTX1BJIiwibG9nMTAiLCJzaWduIiwibmljZU51bSIsInJhbmdlIiwicm91bmRlZFJhbmdlIiwicm91bmQiLCJhbG1vc3RFcXVhbHMiLCJuaWNlUmFuZ2UiLCJwb3ciLCJmbG9vciIsImZyYWN0aW9uIiwiaXNOdW1iZXIiLCJpc05hTiIsIngiLCJ5IiwiZXBzaWxvbiIsImFicyIsIl9zZXRNaW5BbmRNYXhCeUtleSIsImFycmF5IiwicHJvcGVydHkiLCJtaW4iLCJtYXgiLCJ0b1JhZGlhbnMiLCJkZWdyZWVzIiwidG9EZWdyZWVzIiwicmFkaWFucyIsIl9kZWNpbWFsUGxhY2VzIiwiZ2V0QW5nbGVGcm9tUG9pbnQiLCJjZW50cmVQb2ludCIsImFuZ2xlUG9pbnQiLCJkaXN0YW5jZUZyb21YQ2VudGVyIiwiZGlzdGFuY2VGcm9tWUNlbnRlciIsInJhZGlhbERpc3RhbmNlRnJvbUNlbnRlciIsInNxcnQiLCJhbmdsZSIsImF0YW4yIiwiZGlzdGFuY2UiLCJkaXN0YW5jZUJldHdlZW5Qb2ludHMiLCJwdDEiLCJwdDIiLCJfYW5nbGVEaWZmIiwiX25vcm1hbGl6ZUFuZ2xlIiwiX2FuZ2xlQmV0d2VlbiIsInNhbWVBbmdsZUlzRnVsbENpcmNsZSIsInMiLCJhbmdsZVRvU3RhcnQiLCJhbmdsZVRvRW5kIiwic3RhcnRUb0FuZ2xlIiwiZW5kVG9BbmdsZSIsIl9saW1pdFZhbHVlIiwiX2lzQmV0d2VlbiIsImF0RWRnZSIsInQiLCJlbGFzdGljSW4iLCJzaW4iLCJlbGFzdGljT3V0IiwiZWZmZWN0cyIsImxpbmVhciIsImVhc2VJblF1YWQiLCJlYXNlT3V0UXVhZCIsImVhc2VJbk91dFF1YWQiLCJlYXNlSW5DdWJpYyIsImVhc2VPdXRDdWJpYyIsImVhc2VJbk91dEN1YmljIiwiZWFzZUluUXVhcnQiLCJlYXNlT3V0UXVhcnQiLCJlYXNlSW5PdXRRdWFydCIsImVhc2VJblF1aW50IiwiZWFzZU91dFF1aW50IiwiZWFzZUluT3V0UXVpbnQiLCJlYXNlSW5TaW5lIiwiY29zIiwiZWFzZU91dFNpbmUiLCJlYXNlSW5PdXRTaW5lIiwiZWFzZUluRXhwbyIsImVhc2VPdXRFeHBvIiwiZWFzZUluT3V0RXhwbyIsImVhc2VJbkNpcmMiLCJlYXNlT3V0Q2lyYyIsImVhc2VJbk91dENpcmMiLCJlYXNlSW5FbGFzdGljIiwiZWFzZU91dEVsYXN0aWMiLCJlYXNlSW5PdXRFbGFzdGljIiwiZWFzZUluQmFjayIsImVhc2VPdXRCYWNrIiwiZWFzZUluT3V0QmFjayIsImVhc2VJbkJvdW5jZSIsImVhc2VPdXRCb3VuY2UiLCJlYXNlSW5PdXRCb3VuY2UiLCJBIiwiQiIsIkMiLCJEIiwiRSIsIkYiLCJjIiwiZiIsImhleCIsImgxIiwiaDIiLCJlcSIsInYiLCJsaW0iLCJsIiwiaCIsInAyYiIsIm4yYiIsImIybiIsIm4ycCIsIlJHQl9SRSIsIkhVRV9SRSIsImhzbDJyZ2JuIiwiaHN2MnJnYm4iLCJod2IycmdibiIsInciLCJyZ2IiLCJyZ2IyaHNsIiwiciIsImNhbGxuIiwiaHNsMnJnYiIsImh1ZSIsIm1hcCQxIiwiWiIsIlkiLCJYIiwiVyIsIlYiLCJVIiwiVCIsIlMiLCJSIiwiUSIsIlAiLCJPIiwiTiIsIk0iLCJMIiwiSyIsIkciLCJIIiwiSSIsIkoiLCJuYW1lcyIsIk9pY2VYZSIsImFudGlxdWV3RXRlIiwiYXF1YSIsImFxdWFtYXJSZSIsImF6dVkiLCJiZWlnZSIsImJpc3F1ZSIsImJsYWNrIiwiYmxhbktlZE9tb25kIiwiWGUiLCJYZXZpVGV0IiwiYlB3biIsImJ1cmx5d29vZCIsImNhTXRYZSIsIkthcnRZdXNlIiwiS29jVGF0ZSIsImNTTyIsImNTbmZsb3dlclhlIiwiY1Nuc2lsayIsImNyaW1zb24iLCJjeWFuIiwieFhlIiwieGN5YW4iLCJ4Z1RNblBkIiwieFdheSIsInhnWUYiLCJ4Z1l5IiwieGtoYWtpIiwieG1hZ0Z0YSIsInhUaXZlZ1lGIiwieFNhbmdlIiwieFNjRWQiLCJ4WWQiLCJ4c09tb24iLCJ4c0hnWUYiLCJ4VVhlIiwieFVXYXkiLCJ4VWdZeSIsInhRZSIsInh2aVRldCIsImRBcHBSayIsImRBcHNreVhlIiwiZGltV2F5IiwiZGltZ1l5IiwiZG9kZ2VyWGUiLCJmaVlicmljayIsImZsU093RXRlIiwiZm9Zc3RXQW4iLCJmdUtzaWEiLCJnYVJzYlNvIiwiZ2hvc3R3RXRlIiwiZ1RkIiwiZ1RNblBkIiwiV2F5IiwiZ1lGIiwiZ1lGTHciLCJnWXkiLCJob25leU13IiwiaG90cFJrIiwiUmRpYW5ZZCIsIlJkaWdvIiwiaXZTeSIsImtoYWtpIiwibGF2Rk1yIiwibGF2Rk1yWHNoIiwibGF3bmdZRiIsIk5tb25jRWZmb24iLCJaWGUiLCJaY1NPIiwiWmN5YW4iLCJaZ1RNblBkTHciLCJaV2F5IiwiWmdZRiIsIlpnWXkiLCJacFJrIiwiWnNPbW9uIiwiWnNIZ1lGIiwiWnNreVhlIiwiWlVXYXkiLCJaVWdZeSIsIlpzdEFsWGUiLCJaTHciLCJsaW1lIiwibGltZWdZRiIsImxSRiIsIm1hZ0Z0YSIsIm1hUG9uIiwiVmFxdWFtYXJSZSIsIlZYZSIsIlZTY0VkIiwiVnB1cnBOIiwiVnNIZ1lGIiwiVlVYZSIsIlZzcHJSZ2dZRiIsIlZRZSIsIlZ2aVRldFlkIiwibWlkbmlnaHRYZSIsIm1SdGNZYW0iLCJtaXN0eVBzZSIsIm1vY2Nhc1IiLCJuYXZham93RXRlIiwibmF2eSIsIlRkbGFjZSIsIlRpdmUiLCJUaXZlZEJiIiwiU2FuZ2UiLCJTYW5nZVlkIiwiU2NFZCIsInBPZWdUTW5QZCIsInBPZWdZRiIsInBPZVFlIiwicE9ldmlUZXRZZCIsInBhcGF5YXdFcCIsInBIS3B1ZmYiLCJwZXJ1IiwicFJrIiwicGx1bSIsInBvd01yWGUiLCJwdXJwTiIsIlliZWNjYXB1cnBOIiwiWWQiLCJQc3licm93biIsIlB5T1hlIiwic2FkZE5iUHduIiwic09tb24iLCJzYW5keWJQd24iLCJzSGdZRiIsInNIc2hlbGwiLCJzaUZuYSIsInNpbHZlciIsInNreVhlIiwiVVhlIiwiVVdheSIsIlVnWXkiLCJzbm93Iiwic3ByUmdnWUYiLCJzdEFsWGUiLCJ0YW4iLCJ0ZU8iLCJ0RXN0TiIsInRvbWF0byIsIlFlIiwidmlUZXQiLCJKSHQiLCJ3RXRlIiwid0V0ZXNtb2tlIiwiTHciLCJMd2dZRiIsIm5hbWVzJDEiLCJtb2RIU0wiLCJyYXRpbyIsInRtcCIsImNsb25lIiwicHJvdG8iLCJhc3NpZ24iLCJmcm9tT2JqZWN0IiwiaW5wdXQiLCJmdW5jdGlvblBhcnNlIiwiZXhlYyIsInJnYlBhcnNlIiwicDEiLCJwMiIsImh3YjJyZ2IiLCJoc3YycmdiIiwiaHVlUGFyc2UiLCJDb2xvciIsImNvbnN0cnVjdG9yIiwicmV0IiwidW5wYWNrZWQiLCJ0a2V5cyIsImoiLCJvayIsIm5rIiwicGFyc2VJbnQiLCJ1bnBhY2siLCJ0cmFuc3BhcmVudCIsInRvTG93ZXJDYXNlIiwibmFtZVBhcnNlIiwiX3JnYiIsIl92YWxpZCIsInZhbGlkIiwicmdiU3RyaW5nIiwiaGV4U3RyaW5nIiwiaXNTaG9ydCIsImhzbFN0cmluZyIsIm1peCIsImNvbG9yIiwid2VpZ2h0IiwibWUiLCJjMSIsImMyIiwidzIiLCJ3MSIsImFscGhhIiwiY2xlYXJlciIsImdyZXlzY2FsZSIsInZhbCIsIm9wYXF1ZXIiLCJuZWdhdGUiLCJsaWdodGVuIiwiZGFya2VuIiwic2F0dXJhdGUiLCJkZXNhdHVyYXRlIiwicm90YXRlIiwiZGVnIiwiaW5kZXhfZXNtIiwiaXNQYXR0ZXJuT3JHcmFkaWVudCIsIkNhbnZhc0dyYWRpZW50IiwiQ2FudmFzUGF0dGVybiIsImdldEhvdmVyQ29sb3IiLCJvdmVycmlkZXMiLCJkZXNjcmlwdG9ycyIsImdldFNjb3BlJDEiLCJub2RlIiwic3BsaXQiLCJzZXQiLCJyb290Iiwic2NvcGUiLCJ2YWx1ZXMiLCJkZWZhdWx0cyIsIl9kZXNjcmlwdG9ycyIsImFuaW1hdGlvbiIsImJhY2tncm91bmRDb2xvciIsImJvcmRlckNvbG9yIiwiZGF0YXNldHMiLCJkZXZpY2VQaXhlbFJhdGlvIiwiY29udGV4dCIsImNoYXJ0IiwicGxhdGZvcm0iLCJnZXREZXZpY2VQaXhlbFJhdGlvIiwiZWxlbWVudHMiLCJldmVudHMiLCJmb250IiwiZmFtaWx5IiwibGluZUhlaWdodCIsImhvdmVyIiwiaG92ZXJCYWNrZ3JvdW5kQ29sb3IiLCJjdHgiLCJob3ZlckJvcmRlckNvbG9yIiwiaG92ZXJDb2xvciIsImluZGV4QXhpcyIsImludGVyYWN0aW9uIiwibW9kZSIsImludGVyc2VjdCIsIm1haW50YWluQXNwZWN0UmF0aW8iLCJvbkhvdmVyIiwib25DbGljayIsInBhcnNpbmciLCJwbHVnaW5zIiwicmVzcG9uc2l2ZSIsInNjYWxlIiwic2NhbGVzIiwic2hvd0xpbmUiLCJkcmF3QWN0aXZlRWxlbWVudHNPblRvcCIsImRlc2NyaWJlIiwib3ZlcnJpZGUiLCJyb3V0ZSIsIm5hbWUiLCJ0YXJnZXRTY29wZSIsInRhcmdldE5hbWUiLCJzY29wZU9iamVjdCIsInRhcmdldFNjb3BlT2JqZWN0IiwicHJpdmF0ZU5hbWUiLCJkZWZpbmVQcm9wZXJ0aWVzIiwid3JpdGFibGUiLCJsb2NhbCIsIl9zY3JpcHRhYmxlIiwic3RhcnRzV2l0aCIsIl9pbmRleGFibGUiLCJfZmFsbGJhY2siLCJfbWVhc3VyZVRleHQiLCJnYyIsImxvbmdlc3QiLCJzdHJpbmciLCJ0ZXh0V2lkdGgiLCJtZWFzdXJlVGV4dCIsIndpZHRoIiwiX2xvbmdlc3RUZXh0IiwiYXJyYXlPZlRoaW5ncyIsImNhY2hlIiwiZ2FyYmFnZUNvbGxlY3QiLCJzYXZlIiwiamxlbiIsInRoaW5nIiwibmVzdGVkVGhpbmciLCJyZXN0b3JlIiwiZ2NMZW4iLCJfYWxpZ25QaXhlbCIsInBpeGVsIiwiY3VycmVudERldmljZVBpeGVsUmF0aW8iLCJoYWxmV2lkdGgiLCJjbGVhckNhbnZhcyIsImNhbnZhcyIsImdldENvbnRleHQiLCJyZXNldFRyYW5zZm9ybSIsImNsZWFyUmVjdCIsImhlaWdodCIsImRyYXdQb2ludCIsInhPZmZzZXQiLCJ5T2Zmc2V0IiwiY29ybmVyUmFkaXVzIiwicG9pbnRTdHlsZSIsInJvdGF0aW9uIiwicmFkaXVzIiwicmFkIiwidHJhbnNsYXRlIiwiZHJhd0ltYWdlIiwiYmVnaW5QYXRoIiwiYXJjIiwiY2xvc2VQYXRoIiwibW92ZVRvIiwibGluZVRvIiwiU1FSVDFfMiIsInJlY3QiLCJmaWxsIiwiYm9yZGVyV2lkdGgiLCJzdHJva2UiLCJfaXNQb2ludEluQXJlYSIsInBvaW50IiwiYXJlYSIsIm1hcmdpbiIsImxlZnQiLCJyaWdodCIsInRvcCIsImJvdHRvbSIsImNsaXBBcmVhIiwiY2xpcCIsInVuY2xpcEFyZWEiLCJfc3RlcHBlZExpbmVUbyIsInByZXZpb3VzIiwiZmxpcCIsIm1pZHBvaW50IiwiX2JlemllckN1cnZlVG8iLCJiZXppZXJDdXJ2ZVRvIiwiY3AxeCIsImNwMngiLCJjcDF5IiwiY3AyeSIsInJlbmRlclRleHQiLCJ0ZXh0Iiwib3B0cyIsImxpbmVzIiwic3Ryb2tlV2lkdGgiLCJzdHJva2VDb2xvciIsImxpbmUiLCJ0cmFuc2xhdGlvbiIsImZpbGxTdHlsZSIsInRleHRBbGlnbiIsInRleHRCYXNlbGluZSIsInNldFJlbmRlck9wdHMiLCJzdHJva2VTdHlsZSIsImxpbmVXaWR0aCIsInN0cm9rZVRleHQiLCJtYXhXaWR0aCIsImZpbGxUZXh0IiwiZGVjb3JhdGVUZXh0Iiwic3RyaWtldGhyb3VnaCIsInVuZGVybGluZSIsIm1ldHJpY3MiLCJhY3R1YWxCb3VuZGluZ0JveExlZnQiLCJhY3R1YWxCb3VuZGluZ0JveFJpZ2h0IiwiYWN0dWFsQm91bmRpbmdCb3hBc2NlbnQiLCJhY3R1YWxCb3VuZGluZ0JveERlc2NlbnQiLCJ5RGVjb3JhdGlvbiIsImRlY29yYXRpb25XaWR0aCIsImFkZFJvdW5kZWRSZWN0UGF0aCIsInRvcExlZnQiLCJib3R0b21MZWZ0IiwiYm90dG9tUmlnaHQiLCJ0b3BSaWdodCIsIkxJTkVfSEVJR0hUIiwiUmVnRXhwIiwiRk9OVF9TVFlMRSIsInRvTGluZUhlaWdodCIsIm1hdGNoZXMiLCJtYXRjaCIsIl9yZWFkVmFsdWVUb1Byb3BzIiwicHJvcHMiLCJvYmpQcm9wcyIsInJlYWQiLCJ0b1RSQkwiLCJ0b1RSQkxDb3JuZXJzIiwidG9QYWRkaW5nIiwidG9Gb250IiwiZmFsbGJhY2siLCJjb25zb2xlIiwid2FybiIsInRvRm9udFN0cmluZyIsInJlc29sdmUiLCJpbnB1dHMiLCJpbmZvIiwiY2FjaGVhYmxlIiwiY3JlYXRlQ29udGV4dCIsInBhcmVudENvbnRleHQiLCJfbG9va3VwIiwidGFibGUiLCJjbXAiLCJtaWQiLCJoaSIsImxvIiwiX2xvb2t1cEJ5S2V5IiwiX3Jsb29rdXBCeUtleSIsImFycmF5RXZlbnRzIiwidW5saXN0ZW5BcnJheUV2ZW50cyIsImxpc3RlbmVyIiwic3R1YiIsIl9jaGFydGpzIiwibGlzdGVuZXJzIiwiZm9yRWFjaCIsIl9hcnJheVVuaXF1ZSIsIml0ZW1zIiwiU2V0IiwiYWRkIiwiZnJvbSIsIl9jcmVhdGVSZXNvbHZlciIsInNjb3BlcyIsInByZWZpeGVzIiwicm9vdFNjb3BlcyIsIl9yZXNvbHZlIiwiU3ltYm9sIiwidG9TdHJpbmdUYWciLCJfY2FjaGVhYmxlIiwiX3Njb3BlcyIsIl9yb290U2NvcGVzIiwiX2dldFRhcmdldCIsIlByb3h5IiwiZGVsZXRlUHJvcGVydHkiLCJfa2V5cyIsIl9jYWNoZWQiLCJwcm94eSIsInByZWZpeCIsInJlYWRLZXkiLCJuZWVkc1N1YlJlc29sdmVyIiwiY3JlYXRlU3ViUmVzb2x2ZXIiLCJfcmVzb2x2ZVdpdGhQcmVmaXhlcyIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsIlJlZmxlY3QiLCJnZXRQcm90b3R5cGVPZiIsImdldEtleXNGcm9tQWxsU2NvcGVzIiwiaW5jbHVkZXMiLCJvd25LZXlzIiwic3RvcmFnZSIsIl9zdG9yYWdlIiwiX2F0dGFjaENvbnRleHQiLCJzdWJQcm94eSIsImRlc2NyaXB0b3JEZWZhdWx0cyIsIl9wcm94eSIsIl9jb250ZXh0IiwiX3N1YlByb3h5IiwiX3N0YWNrIiwic2V0Q29udGV4dCIsInJlY2VpdmVyIiwiaXNTY3JpcHRhYmxlIiwiZGVsZXRlIiwiX3Jlc29sdmVTY3JpcHRhYmxlIiwiaXNJbmRleGFibGUiLCJhcnIiLCJmaWx0ZXIiLCJyZXNvbHZlciIsIl9yZXNvbHZlQXJyYXkiLCJfcmVzb2x2ZVdpdGhDb250ZXh0IiwiYWxsS2V5cyIsImNvbmZpZ3VyYWJsZSIsInNjcmlwdGFibGUiLCJpbmRleGFibGUiLCJfYWxsS2V5cyIsInJlc29sdmVGYWxsYmFjayIsImdldFNjb3BlIiwicGFyZW50IiwiYWRkU2NvcGVzIiwicGFyZW50U2NvcGVzIiwicGFyZW50RmFsbGJhY2siLCJhbGxTY29wZXMiLCJhZGRTY29wZXNGcm9tS2V5Iiwic3ViR2V0VGFyZ2V0IiwicmVzb2x2ZUtleXNGcm9tQWxsU2NvcGVzIiwiRVBTSUxPTiIsImdldFBvaW50IiwicG9pbnRzIiwic2tpcCIsImdldFZhbHVlQXhpcyIsInNwbGluZUN1cnZlIiwiZmlyc3RQb2ludCIsIm1pZGRsZVBvaW50IiwiYWZ0ZXJQb2ludCIsImN1cnJlbnQiLCJuZXh0IiwiZDAxIiwiZDEyIiwiczAxIiwiczEyIiwiZmEiLCJmYiIsImNhcENvbnRyb2xQb2ludCIsInB0IiwiX3VwZGF0ZUJlemllckNvbnRyb2xQb2ludHMiLCJsb29wIiwiY29udHJvbFBvaW50cyIsInNwYW5HYXBzIiwiY3ViaWNJbnRlcnBvbGF0aW9uTW9kZSIsInZhbHVlQXhpcyIsInBvaW50c0xlbiIsImRlbHRhSyIsIm1LIiwicG9pbnRCZWZvcmUiLCJwb2ludEN1cnJlbnQiLCJwb2ludEFmdGVyIiwic2xvcGVEZWx0YSIsImFscGhhSyIsImJldGFLIiwidGF1SyIsInNxdWFyZWRNYWduaXR1ZGUiLCJtb25vdG9uZUFkanVzdCIsImRlbHRhIiwiaVBpeGVsIiwidlBpeGVsIiwibW9ub3RvbmVDb21wdXRlIiwic3BsaW5lQ3VydmVNb25vdG9uZSIsInByZXYiLCJ0ZW5zaW9uIiwiY2FwQmV6aWVyUG9pbnRzIiwiaW5BcmVhIiwiaW5BcmVhUHJldiIsImluQXJlYU5leHQiLCJfaXNEb21TdXBwb3J0ZWQiLCJfZ2V0UGFyZW50Tm9kZSIsImRvbU5vZGUiLCJob3N0IiwicGFyc2VNYXhTdHlsZSIsInN0eWxlVmFsdWUiLCJwYXJlbnRQcm9wZXJ0eSIsInZhbHVlSW5QaXhlbHMiLCJnZXRDb21wdXRlZFN0eWxlIiwicG9zaXRpb25zIiwiZ2V0UG9zaXRpb25lZFN0eWxlIiwic3R5bGVzIiwic3VmZml4IiwiZ2V0UmVsYXRpdmVQb3NpdGlvbiIsImV2dCIsImJvcmRlckJveCIsImJveFNpemluZyIsInBhZGRpbmdzIiwiYm9yZGVycyIsImJveCIsIm5hdGl2ZSIsInRvdWNoZXMiLCJvZmZzZXRYIiwib2Zmc2V0WSIsInNoYWRvd1Jvb3QiLCJ1c2VPZmZzZXRQb3MiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJjbGllbnRYIiwiY2xpZW50WSIsImdldENhbnZhc1Bvc2l0aW9uIiwicm91bmQxIiwicmV0aW5hU2NhbGUiLCJmb3JjZVJhdGlvIiwiZm9yY2VTdHlsZSIsInBpeGVsUmF0aW8iLCJkZXZpY2VIZWlnaHQiLCJkZXZpY2VXaWR0aCIsInNldFRyYW5zZm9ybSIsInN1cHBvcnRzRXZlbnRMaXN0ZW5lck9wdGlvbnMiLCJwYXNzaXZlU3VwcG9ydGVkIiwicGFzc2l2ZSIsImFkZEV2ZW50TGlzdGVuZXIiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwicmVhZFVzZWRTaXplIiwiZWwiLCJnZXRQcm9wZXJ0eVZhbHVlIiwiZ2V0U3R5bGUiLCJfcG9pbnRJbkxpbmUiLCJfc3RlcHBlZEludGVycG9sYXRpb24iLCJfYmV6aWVySW50ZXJwb2xhdGlvbiIsImNwMSIsImNwMiIsImludGxDYWNoZSIsIk1hcCIsImZvcm1hdE51bWJlciIsIm51bSIsImxvY2FsZSIsImNhY2hlS2V5IiwiZm9ybWF0dGVyIiwiSW50bCIsIk51bWJlckZvcm1hdCIsImdldE51bWJlckZvcm1hdCIsImZvcm1hdCIsImdldFJ0bEFkYXB0ZXIiLCJydGwiLCJyZWN0WCIsInNldFdpZHRoIiwieFBsdXMiLCJsZWZ0Rm9yTHRyIiwiaXRlbVdpZHRoIiwiZ2V0UmlnaHRUb0xlZnRBZGFwdGVyIiwiX2l0ZW1XaWR0aCIsIm92ZXJyaWRlVGV4dERpcmVjdGlvbiIsImRpcmVjdGlvbiIsIm9yaWdpbmFsIiwiZ2V0UHJvcGVydHlQcmlvcml0eSIsInNldFByb3BlcnR5IiwicHJldlRleHREaXJlY3Rpb24iLCJyZXN0b3JlVGV4dERpcmVjdGlvbiIsInByb3BlcnR5Rm4iLCJiZXR3ZWVuIiwiY29tcGFyZSIsIm5vcm1hbGl6ZSIsIm5vcm1hbGl6ZVNlZ21lbnQiLCJfYm91bmRTZWdtZW50Iiwic2VnbWVudCIsImJvdW5kcyIsInN0YXJ0Qm91bmQiLCJlbmRCb3VuZCIsImdldFNlZ21lbnQiLCJwcmV2VmFsdWUiLCJpbnNpZGUiLCJzdWJTdGFydCIsIl9ib3VuZFNlZ21lbnRzIiwic2VnbWVudHMiLCJzdWIiLCJyZWFkU3R5bGUiLCJib3JkZXJDYXBTdHlsZSIsImJvcmRlckRhc2giLCJib3JkZXJEYXNoT2Zmc2V0IiwiYm9yZGVySm9pblN0eWxlIiwic3R5bGVDaGFuZ2VkIiwicHJldlN0eWxlIiwiYW5pbWF0b3IiLCJfcmVxdWVzdCIsIl9jaGFydHMiLCJfcnVubmluZyIsIl9sYXN0RGF0ZSIsIl9ub3RpZnkiLCJhbmltcyIsImRhdGUiLCJjYWxsYmFja3MiLCJudW1TdGVwcyIsImR1cmF0aW9uIiwiaW5pdGlhbCIsImN1cnJlbnRTdGVwIiwiX3JlZnJlc2giLCJfdXBkYXRlIiwiRGF0ZSIsIm5vdyIsInJlbWFpbmluZyIsInJ1bm5pbmciLCJkcmF3IiwiX2FjdGl2ZSIsIl90b3RhbCIsInRpY2siLCJwb3AiLCJfZ2V0QW5pbXMiLCJjaGFydHMiLCJjb21wbGV0ZSIsInByb2dyZXNzIiwibGlzdGVuIiwiZXZlbnQiLCJjYiIsInJlZHVjZSIsImFjYyIsImN1ciIsIl9kdXJhdGlvbiIsInN0b3AiLCJjYW5jZWwiLCJpbnRlcnBvbGF0b3JzIiwiYm9vbGVhbiIsInRvIiwiZmFjdG9yIiwiYzAiLCJudW1iZXIiLCJBbmltYXRpb24iLCJjZmciLCJjdXJyZW50VmFsdWUiLCJfZm4iLCJfZWFzaW5nIiwiZWFzaW5nIiwiX3N0YXJ0IiwiZGVsYXkiLCJfbG9vcCIsIl90YXJnZXQiLCJfcHJvcCIsIl9mcm9tIiwiX3RvIiwiX3Byb21pc2VzIiwiYWN0aXZlIiwiZWxhcHNlZCIsInJlbWFpbiIsIndhaXQiLCJwcm9taXNlcyIsIlByb21pc2UiLCJyZXMiLCJyZWoiLCJyZXNvbHZlZCIsIm1ldGhvZCIsImFuaW1hdGlvbk9wdGlvbnMiLCJjb2xvcnMiLCJwcm9wZXJ0aWVzIiwibnVtYmVycyIsInJlc2l6ZSIsInNob3ciLCJhbmltYXRpb25zIiwidmlzaWJsZSIsImhpZGUiLCJBbmltYXRpb25zIiwiY29uZmlnIiwiX2NoYXJ0IiwiX3Byb3BlcnRpZXMiLCJjb25maWd1cmUiLCJhbmltYXRlZFByb3BzIiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsIm9wdGlvbiIsIl9hbmltYXRlT3B0aW9ucyIsIm5ld09wdGlvbnMiLCIkc2hhcmVkIiwiJGFuaW1hdGlvbnMiLCJyZXNvbHZlVGFyZ2V0T3B0aW9ucyIsIl9jcmVhdGVBbmltYXRpb25zIiwiYW5pbSIsImFsbCIsImF3YWl0QWxsIiwidGhlbiIsInNjYWxlQ2xpcCIsImFsbG93ZWRPdmVyZmxvdyIsImdldFNvcnRlZERhdGFzZXRJbmRpY2VzIiwiZmlsdGVyVmlzaWJsZSIsIm1ldGFzZXRzIiwiX2dldFNvcnRlZERhdGFzZXRNZXRhcyIsImFwcGx5U3RhY2siLCJzdGFjayIsImRzSW5kZXgiLCJzaW5nbGVNb2RlIiwib3RoZXJWYWx1ZSIsImlzU3RhY2tlZCIsIm1ldGEiLCJzdGFja2VkIiwiZ2V0T3JDcmVhdGVTdGFjayIsInN0YWNrcyIsInN0YWNrS2V5IiwiaW5kZXhWYWx1ZSIsInN1YlN0YWNrIiwiZ2V0TGFzdEluZGV4SW5TdGFjayIsInZTY2FsZSIsInBvc2l0aXZlIiwiZ2V0TWF0Y2hpbmdWaXNpYmxlTWV0YXMiLCJ1cGRhdGVTdGFja3MiLCJjb250cm9sbGVyIiwicGFyc2VkIiwiX2NhY2hlZE1ldGEiLCJfc3RhY2tzIiwiaVNjYWxlIiwiaUF4aXMiLCJheGlzIiwidkF4aXMiLCJpbmRleFNjYWxlIiwidmFsdWVTY2FsZSIsImdldFN0YWNrS2V5IiwiX3RvcCIsIl9ib3R0b20iLCJnZXRGaXJzdFNjYWxlSWQiLCJzaGlmdCIsImNsZWFyU3RhY2tzIiwiX3BhcnNlZCIsImlzRGlyZWN0VXBkYXRlTW9kZSIsImNsb25lSWZOb3RTaGFyZWQiLCJjYWNoZWQiLCJzaGFyZWQiLCJEYXRhc2V0Q29udHJvbGxlciIsIl9jdHgiLCJfY2FjaGVkRGF0YU9wdHMiLCJnZXRNZXRhIiwiX3R5cGUiLCJfcGFyc2luZyIsIl9kYXRhIiwiX29iamVjdERhdGEiLCJfc2hhcmVkT3B0aW9ucyIsIl9kcmF3U3RhcnQiLCJfZHJhd0NvdW50IiwiZW5hYmxlT3B0aW9uU2hhcmluZyIsIiRjb250ZXh0IiwiX3N5bmNMaXN0IiwiaW5pdGlhbGl6ZSIsImxpbmtTY2FsZXMiLCJfc3RhY2tlZCIsImFkZEVsZW1lbnRzIiwidXBkYXRlSW5kZXgiLCJkYXRhc2V0IiwiZ2V0RGF0YXNldCIsImNob29zZUlkIiwieGlkIiwieEF4aXNJRCIsInlpZCIsInlBeGlzSUQiLCJyaWQiLCJyQXhpc0lEIiwiaWlkIiwiaUF4aXNJRCIsInZpZCIsInZBeGlzSUQiLCJ4U2NhbGUiLCJnZXRTY2FsZUZvcklkIiwieVNjYWxlIiwiclNjYWxlIiwiZ2V0RGF0YXNldE1ldGEiLCJzY2FsZUlEIiwiX2dldE90aGVyU2NhbGUiLCJyZXNldCIsIl9kZXN0cm95IiwiX2RhdGFDaGVjayIsImFkYXRhIiwiY29udmVydE9iamVjdERhdGFUb0FycmF5IiwiaXNFeHRlbnNpYmxlIiwib2JqZWN0IiwiZGF0YXNldEVsZW1lbnRUeXBlIiwiYnVpbGRPclVwZGF0ZUVsZW1lbnRzIiwicmVzZXROZXdFbGVtZW50cyIsInN0YWNrQ2hhbmdlZCIsIm9sZFN0YWNrZWQiLCJfcmVzeW5jRWxlbWVudHMiLCJzY29wZUtleXMiLCJkYXRhc2V0U2NvcGVLZXlzIiwiZ2V0T3B0aW9uU2NvcGVzIiwiY3JlYXRlUmVzb2x2ZXIiLCJwYXJzZSIsInNvcnRlZCIsIl9zb3J0ZWQiLCJwYXJzZUFycmF5RGF0YSIsInBhcnNlT2JqZWN0RGF0YSIsInBhcnNlUHJpbWl0aXZlRGF0YSIsImlzTm90SW5PcmRlckNvbXBhcmVkVG9QcmV2IiwibGFiZWxzIiwiZ2V0TGFiZWxzIiwic2luZ2xlU2NhbGUiLCJ4QXhpc0tleSIsInlBeGlzS2V5IiwiZ2V0UGFyc2VkIiwiZ2V0RGF0YUVsZW1lbnQiLCJ1cGRhdGVSYW5nZUZyb21QYXJzZWQiLCJwYXJzZWRWYWx1ZSIsIk5hTiIsImdldE1pbk1heCIsImNhblN0YWNrIiwib3RoZXJTY2FsZSIsImhpZGRlbiIsImNyZWF0ZVN0YWNrIiwiTkVHQVRJVkVfSU5GSU5JVFkiLCJvdGhlck1pbiIsIm90aGVyTWF4IiwibWluRGVmaW5lZCIsIm1heERlZmluZWQiLCJnZXRVc2VyQm91bmRzIiwiX3NraXAiLCJnZXRBbGxQYXJzZWRWYWx1ZXMiLCJnZXRNYXhPdmVyZmxvdyIsImdldExhYmVsQW5kVmFsdWUiLCJsYWJlbCIsImdldExhYmVsRm9yVmFsdWUiLCJfY2xpcCIsImRpc2FibGVkIiwidG9DbGlwIiwiZGVmYXVsdENsaXAiLCJjaGFydEFyZWEiLCJyZXNvbHZlRGF0YXNldEVsZW1lbnRPcHRpb25zIiwicmVzb2x2ZURhdGFFbGVtZW50T3B0aW9ucyIsImRhdGFJbmRleCIsInJhdyIsImNyZWF0ZURhdGFDb250ZXh0IiwiY3JlYXRlRGF0YXNldENvbnRleHQiLCJfcmVzb2x2ZUVsZW1lbnRPcHRpb25zIiwiZGF0YUVsZW1lbnRUeXBlIiwiZWxlbWVudFR5cGUiLCJzaGFyaW5nIiwiZGF0YXNldEVsZW1lbnRTY29wZUtleXMiLCJyZXNvbHZlTmFtZWRPcHRpb25zIiwiZnJlZXplIiwiX3Jlc29sdmVBbmltYXRpb25zIiwidHJhbnNpdGlvbiIsImRhdGFzZXRBbmltYXRpb25TY29wZUtleXMiLCJnZXRTaGFyZWRPcHRpb25zIiwiaW5jbHVkZU9wdGlvbnMiLCJzaGFyZWRPcHRpb25zIiwiX2FuaW1hdGlvbnNEaXNhYmxlZCIsInVwZGF0ZUVsZW1lbnQiLCJ1cGRhdGVTaGFyZWRPcHRpb25zIiwiX3NldFN0eWxlIiwicmVtb3ZlSG92ZXJTdHlsZSIsInNldEhvdmVyU3R5bGUiLCJfcmVtb3ZlRGF0YXNldEhvdmVyU3R5bGUiLCJfc2V0RGF0YXNldEhvdmVyU3R5bGUiLCJhcmcxIiwiYXJnMiIsIm51bU1ldGEiLCJudW1EYXRhIiwiX2luc2VydEVsZW1lbnRzIiwiX3JlbW92ZUVsZW1lbnRzIiwibW92ZSIsInVwZGF0ZUVsZW1lbnRzIiwicmVtb3ZlZCIsIl9zeW5jIiwiX2RhdGFDaGFuZ2VzIiwiX29uRGF0YVB1c2giLCJhcmd1bWVudHMiLCJfb25EYXRhUG9wIiwiX29uRGF0YVNoaWZ0IiwiX29uRGF0YVNwbGljZSIsIm5ld0NvdW50IiwiX29uRGF0YVVuc2hpZnQiLCJjb21wdXRlTWluU2FtcGxlU2l6ZSIsIl9jYWNoZSIsIiRiYXIiLCJ2aXNpYmxlTWV0YXMiLCJzb3J0IiwiZ2V0QWxsU2NhbGVWYWx1ZXMiLCJjdXJyIiwiX2xlbmd0aCIsInVwZGF0ZU1pbkFuZFByZXYiLCJnZXRQaXhlbEZvclZhbHVlIiwidGlja3MiLCJnZXRQaXhlbEZvclRpY2siLCJwYXJzZVZhbHVlIiwiZW50cnkiLCJzdGFydFZhbHVlIiwiZW5kVmFsdWUiLCJiYXJTdGFydCIsImJhckVuZCIsIl9jdXN0b20iLCJwYXJzZUZsb2F0QmFyIiwicGFyc2VBcnJheU9yUHJpbWl0aXZlIiwiaXNGbG9hdEJhciIsImN1c3RvbSIsInNldEJvcmRlclNraXBwZWQiLCJlZGdlIiwiYm9yZGVyU2tpcHBlZCIsImhvcml6b250YWwiLCJib3JkZXJQcm9wcyIsImVuYWJsZUJvcmRlclJhZGl1cyIsInBhcnNlRWRnZSIsIm9yaWciLCJ2MiIsInN0YXJ0RW5kIiwic2V0SW5mbGF0ZUFtb3VudCIsImluZmxhdGVBbW91bnQiLCJCYXJDb250cm9sbGVyIiwiaUF4aXNLZXkiLCJ2QXhpc0tleSIsInN1cGVyIiwiYmFycyIsImdldEJhc2VQaXhlbCIsImlzSG9yaXpvbnRhbCIsInJ1bGVyIiwiX2dldFJ1bGVyIiwiZmlyc3RPcHRzIiwidnBpeGVscyIsIl9jYWxjdWxhdGVCYXJWYWx1ZVBpeGVscyIsImlwaXhlbHMiLCJfY2FsY3VsYXRlQmFySW5kZXhQaXhlbHMiLCJjZW50ZXIiLCJfZ2V0U3RhY2tzIiwibGFzdCIsImdyb3VwZWQiLCJfZ2V0U3RhY2tDb3VudCIsIl9nZXRTdGFja0luZGV4IiwicGl4ZWxzIiwiYmFyVGhpY2tuZXNzIiwiX3N0YXJ0UGl4ZWwiLCJfZW5kUGl4ZWwiLCJzdGFja0NvdW50IiwiY2F0ZWdvcnlQZXJjZW50YWdlIiwiYmFyUGVyY2VudGFnZSIsImJhc2VWYWx1ZSIsIm1pbkJhckxlbmd0aCIsImFjdHVhbEJhc2UiLCJmbG9hdGluZyIsImdldERhdGFWaXNpYmlsaXR5IiwiYmFyU2lnbiIsImhhbGZHcmlkIiwiZ2V0TGluZVdpZHRoRm9yVmFsdWUiLCJza2lwTnVsbCIsIm1heEJhclRoaWNrbmVzcyIsIkluZmluaXR5IiwicGVyY2VudCIsImNodW5rIiwiY29tcHV0ZUZsZXhDYXRlZ29yeVRyYWl0cyIsInRoaWNrbmVzcyIsImNvbXB1dGVGaXRDYXRlZ29yeVRyYWl0cyIsInN0YWNrSW5kZXgiLCJyZWN0cyIsIl9pbmRleF8iLCJvZmZzZXQiLCJncmlkIiwiX3ZhbHVlXyIsImJlZ2luQXRaZXJvIiwiQnViYmxlQ29udHJvbGxlciIsImdldFBpeGVsRm9yRGVjaW1hbCIsInRvb2x0aXAiLCJ0aXRsZSIsIkRvdWdobnV0Q29udHJvbGxlciIsImlubmVyUmFkaXVzIiwib3V0ZXJSYWRpdXMiLCJfZ2V0Um90YXRpb24iLCJfZ2V0Q2lyY3VtZmVyZW5jZSIsImNpcmN1bWZlcmVuY2UiLCJfZ2V0Um90YXRpb25FeHRlbnRzIiwiaXNEYXRhc2V0VmlzaWJsZSIsImFyY3MiLCJzcGFjaW5nIiwiZ2V0TWF4Qm9yZGVyV2lkdGgiLCJnZXRNYXhPZmZzZXQiLCJtYXhTaXplIiwiY3V0b3V0IiwiY2hhcnRXZWlnaHQiLCJfZ2V0UmluZ1dlaWdodCIsInJhdGlvWCIsInJhdGlvWSIsInN0YXJ0QW5nbGUiLCJlbmRBbmdsZSIsInN0YXJ0WCIsInN0YXJ0WSIsImVuZFgiLCJlbmRZIiwiY2FsY01heCIsImNhbGNNaW4iLCJtYXhYIiwibWF4WSIsIm1pblgiLCJtaW5ZIiwiZ2V0UmF0aW9BbmRPZmZzZXQiLCJtYXhIZWlnaHQiLCJtYXhSYWRpdXMiLCJyYWRpdXNMZW5ndGgiLCJfZ2V0VmlzaWJsZURhdGFzZXRXZWlnaHRUb3RhbCIsInRvdGFsIiwiY2FsY3VsYXRlVG90YWwiLCJfZ2V0UmluZ1dlaWdodE9mZnNldCIsIl9jaXJjdW1mZXJlbmNlIiwiYW5pbWF0ZVJvdGF0ZSIsImNhbGN1bGF0ZUNpcmN1bWZlcmVuY2UiLCJhbmltYXRpb25PcHRzIiwiY2VudGVyWCIsImNlbnRlclkiLCJhbmltYXRlU2NhbGUiLCJtZXRhRGF0YSIsImJvcmRlckFsaWduIiwiaG92ZXJCb3JkZXJXaWR0aCIsImhvdmVyT2Zmc2V0IiwicmluZ1dlaWdodE9mZnNldCIsImFzcGVjdFJhdGlvIiwibGVnZW5kIiwiZ2VuZXJhdGVMYWJlbHMiLCJsZWdlbmRJdGVtIiwidG9nZ2xlRGF0YVZpc2liaWxpdHkiLCJ0b29sdGlwSXRlbSIsImRhdGFMYWJlbCIsImZvcm1hdHRlZFZhbHVlIiwiTGluZUNvbnRyb2xsZXIiLCJfZGF0YXNldCIsImFuaW1hdGlvbnNEaXNhYmxlZCIsInBvaW50Q291bnQiLCJnZXRTdGFydEFuZENvdW50T2ZWaXNpYmxlUG9pbnRzIiwiX3NjYWxlUmFuZ2VzIiwibmV3UmFuZ2VzIiwieG1pbiIsInhtYXgiLCJ5bWluIiwieW1heCIsImNoYW5nZWQiLCJzY2FsZVJhbmdlc0NoYW5nZWQiLCJfZGF0YXNldEluZGV4IiwiX2RlY2ltYXRlZCIsImFuaW1hdGVkIiwibWF4R2FwTGVuZ3RoIiwiZGlyZWN0VXBkYXRlIiwicHJldlBhcnNlZCIsIm51bGxEYXRhIiwiYm9yZGVyIiwibGFzdFBvaW50IiwidXBkYXRlQ29udHJvbFBvaW50cyIsIlBvbGFyQXJlYUNvbnRyb2xsZXIiLCJfdXBkYXRlUmFkaXVzIiwibWluU2l6ZSIsImN1dG91dFBlcmNlbnRhZ2UiLCJnZXRWaXNpYmxlRGF0YXNldENvdW50IiwieENlbnRlciIsInlDZW50ZXIiLCJkYXRhc2V0U3RhcnRBbmdsZSIsImdldEluZGV4QW5nbGUiLCJkZWZhdWx0QW5nbGUiLCJjb3VudFZpc2libGVFbGVtZW50cyIsIl9jb21wdXRlQW5nbGUiLCJnZXREaXN0YW5jZUZyb21DZW50ZXJGb3JWYWx1ZSIsImFuZ2xlTGluZXMiLCJkaXNwbGF5IiwiY2lyY3VsYXIiLCJwb2ludExhYmVscyIsIlBpZUNvbnRyb2xsZXIiLCJSYWRhckNvbnRyb2xsZXIiLCJfZnVsbExvb3AiLCJwb2ludFBvc2l0aW9uIiwiZ2V0UG9pbnRQb3NpdGlvbkZvclZhbHVlIiwiU2NhdHRlckNvbnRyb2xsZXIiLCJjb250cm9sbGVycyIsIl9fcHJvdG9fXyIsIkRhdGVBZGFwdGVyIiwiZm9ybWF0cyIsInRpbWVzdGFtcCIsImFtb3VudCIsInVuaXQiLCJkaWZmIiwic3RhcnRPZiIsIndlZWtkYXkiLCJlbmRPZiIsIm1lbWJlcnMiLCJhZGFwdGVycyIsIl9kYXRlIiwiYmluYXJ5U2VhcmNoIiwibWV0YXNldCIsImxvb2t1cE1ldGhvZCIsIl9yZXZlcnNlUGl4ZWxzIiwiZ2V0UmFuZ2UiLCJvcHRpbWl6ZWRFdmFsdWF0ZUl0ZW1zIiwicG9zaXRpb24iLCJoYW5kbGVyIiwiZ2V0U29ydGVkVmlzaWJsZURhdGFzZXRNZXRhcyIsImdldEludGVyc2VjdEl0ZW1zIiwidXNlRmluYWxQb3NpdGlvbiIsIl9taW5QYWRkaW5nIiwiaW5SYW5nZSIsImdldE5lYXJlc3RJdGVtcyIsImRpc3RhbmNlTWV0cmljIiwidXNlWCIsInVzZVkiLCJkZWx0YVgiLCJkZWx0YVkiLCJnZXREaXN0YW5jZU1ldHJpY0ZvckF4aXMiLCJtaW5EaXN0YW5jZSIsImdldENlbnRlclBvaW50IiwiZ2V0TmVhcmVzdENhcnRlc2lhbkl0ZW1zIiwiZ2V0UHJvcHMiLCJnZXROZWFyZXN0UmFkaWFsSXRlbXMiLCJnZXRBeGlzSXRlbXMiLCJyYW5nZU1ldGhvZCIsImludGVyc2VjdHNJdGVtIiwiZXZhbHVhdGVBbGxWaXNpYmxlSXRlbXMiLCJJbnRlcmFjdGlvbiIsIm1vZGVzIiwibmVhcmVzdCIsIlNUQVRJQ19QT1NJVElPTlMiLCJmaWx0ZXJCeVBvc2l0aW9uIiwiZmlsdGVyRHluYW1pY1Bvc2l0aW9uQnlBeGlzIiwic29ydEJ5V2VpZ2h0IiwiZ2V0Q29tYmluZWRNYXgiLCJtYXhQYWRkaW5nIiwidXBkYXRlTWF4UGFkZGluZyIsImJveFBhZGRpbmciLCJ1cGRhdGVEaW1zIiwicGFyYW1zIiwibGF5b3V0IiwiZ2V0UGFkZGluZyIsIm5ld1dpZHRoIiwib3V0ZXJXaWR0aCIsIm5ld0hlaWdodCIsIm91dGVySGVpZ2h0Iiwid2lkdGhDaGFuZ2VkIiwiaGVpZ2h0Q2hhbmdlZCIsInNhbWUiLCJvdGhlciIsImdldE1hcmdpbnMiLCJtYXJnaW5Gb3JQb3NpdGlvbnMiLCJmaXRCb3hlcyIsImJveGVzIiwicmVmaXRCb3hlcyIsInJlZml0IiwiZnVsbFNpemUiLCJzZXRCb3hEaW1zIiwicGxhY2VCb3hlcyIsInVzZXJQYWRkaW5nIiwicGFkZGluZyIsInBsYWNlZCIsInN0YWNrV2VpZ2h0IiwiYXV0b1BhZGRpbmciLCJsYXlvdXRzIiwiYWRkQm94IiwiX2xheWVycyIsInoiLCJyZW1vdmVCb3giLCJsYXlvdXRJdGVtIiwibWluUGFkZGluZyIsImF2YWlsYWJsZVdpZHRoIiwiYXZhaWxhYmxlSGVpZ2h0IiwibGF5b3V0Qm94ZXMiLCJ3cmFwQm94ZXMiLCJ3cmFwIiwiY2VudGVySG9yaXpvbnRhbCIsImNlbnRlclZlcnRpY2FsIiwibGVmdEFuZFRvcCIsInJpZ2h0QW5kQm90dG9tIiwidmVydGljYWwiLCJidWlsZExheW91dEJveGVzIiwidmVydGljYWxCb3hlcyIsImhvcml6b250YWxCb3hlcyIsImJlZm9yZUxheW91dCIsInZpc2libGVWZXJ0aWNhbEJveENvdW50IiwidkJveE1heFdpZHRoIiwiaEJveE1heEhlaWdodCIsImJ1aWxkU3RhY2tzIiwic2V0TGF5b3V0RGltcyIsInVwZGF0ZVBvcyIsImNoYW5nZSIsImhhbmRsZU1heFBhZGRpbmciLCJCYXNlUGxhdGZvcm0iLCJhY3F1aXJlQ29udGV4dCIsInJlbGVhc2VDb250ZXh0IiwiZ2V0TWF4aW11bVNpemUiLCJpc0F0dGFjaGVkIiwidXBkYXRlQ29uZmlnIiwiQmFzaWNQbGF0Zm9ybSIsIkVWRU5UX1RZUEVTIiwidG91Y2hzdGFydCIsInRvdWNobW92ZSIsInRvdWNoZW5kIiwicG9pbnRlcmVudGVyIiwicG9pbnRlcmRvd24iLCJwb2ludGVybW92ZSIsInBvaW50ZXJ1cCIsInBvaW50ZXJsZWF2ZSIsInBvaW50ZXJvdXQiLCJpc051bGxPckVtcHR5IiwiZXZlbnRMaXN0ZW5lck9wdGlvbnMiLCJyZW1vdmVMaXN0ZW5lciIsIm5vZGVMaXN0Q29udGFpbnMiLCJub2RlTGlzdCIsImNvbnRhaW5zIiwiY3JlYXRlQXR0YWNoT2JzZXJ2ZXIiLCJvYnNlcnZlciIsIk11dGF0aW9uT2JzZXJ2ZXIiLCJlbnRyaWVzIiwidHJpZ2dlciIsImFkZGVkTm9kZXMiLCJyZW1vdmVkTm9kZXMiLCJvYnNlcnZlIiwiY2hpbGRMaXN0Iiwic3VidHJlZSIsImNyZWF0ZURldGFjaE9ic2VydmVyIiwiZHJwTGlzdGVuaW5nQ2hhcnRzIiwib2xkRGV2aWNlUGl4ZWxSYXRpbyIsIm9uV2luZG93UmVzaXplIiwiZHByIiwiY3JlYXRlUmVzaXplT2JzZXJ2ZXIiLCJjb250YWluZXIiLCJjbGllbnRXaWR0aCIsIlJlc2l6ZU9ic2VydmVyIiwiY29udGVudFJlY3QiLCJsaXN0ZW5EZXZpY2VQaXhlbFJhdGlvQ2hhbmdlcyIsInJlbGVhc2VPYnNlcnZlciIsImRpc2Nvbm5lY3QiLCJ1bmxpc3RlbkRldmljZVBpeGVsUmF0aW9DaGFuZ2VzIiwiY3JlYXRlUHJveHlBbmRMaXN0ZW4iLCJmcm9tTmF0aXZlRXZlbnQiLCJhZGRMaXN0ZW5lciIsIkRvbVBsYXRmb3JtIiwicmVuZGVySGVpZ2h0IiwiZ2V0QXR0cmlidXRlIiwicmVuZGVyV2lkdGgiLCJkaXNwbGF5V2lkdGgiLCJkaXNwbGF5SGVpZ2h0IiwiaW5pdENhbnZhcyIsInJlbW92ZUF0dHJpYnV0ZSIsInByb3hpZXMiLCIkcHJveGllcyIsImF0dGFjaCIsImRldGFjaCIsImJiV2lkdGgiLCJiYkhlaWdodCIsIm1hcmdpbnMiLCJjb250YWluZXJTaXplIiwiY29udGFpbmVyU3R5bGUiLCJjb250YWluZXJCb3JkZXIiLCJjb250YWluZXJQYWRkaW5nIiwiY2xpZW50SGVpZ2h0IiwiZ2V0Q29udGFpbmVyU2l6ZSIsImlzQ29ubmVjdGVkIiwiRWxlbWVudCIsInRvb2x0aXBQb3NpdGlvbiIsImhhc1ZhbHVlIiwiZmluYWwiLCJkZWZhdWx0Um91dGVzIiwiZm9ybWF0dGVycyIsIm51bWVyaWMiLCJ0aWNrVmFsdWUiLCJub3RhdGlvbiIsIm1heFRpY2siLCJjYWxjdWxhdGVEZWx0YSIsImxvZ0RlbHRhIiwibnVtRGVjaW1hbCIsIm1pbmltdW1GcmFjdGlvbkRpZ2l0cyIsIm1heGltdW1GcmFjdGlvbkRpZ2l0cyIsImxvZ2FyaXRobWljIiwiVGlja3MiLCJuZXdUaWNrcyIsIm1ham9yU3RhcnQiLCJtYWpvckVuZCIsImNlaWwiLCJncmFjZSIsImRyYXdCb3JkZXIiLCJkcmF3T25DaGFydEFyZWEiLCJkcmF3VGlja3MiLCJ0aWNrTGVuZ3RoIiwidGlja1dpZHRoIiwidGlja0NvbG9yIiwibWluUm90YXRpb24iLCJtYXhSb3RhdGlvbiIsIm1pcnJvciIsInRleHRTdHJva2VXaWR0aCIsInRleHRTdHJva2VDb2xvciIsImF1dG9Ta2lwIiwiYXV0b1NraXBQYWRkaW5nIiwibGFiZWxPZmZzZXQiLCJtaW5vciIsIm1ham9yIiwiY3Jvc3NBbGlnbiIsInNob3dMYWJlbEJhY2tkcm9wIiwiYmFja2Ryb3BDb2xvciIsImJhY2tkcm9wUGFkZGluZyIsIm9mZnNldEZyb21FZGdlIiwic2FtcGxlIiwibnVtSXRlbXMiLCJpbmNyZW1lbnQiLCJnZXRQaXhlbEZvckdyaWRMaW5lIiwib2Zmc2V0R3JpZExpbmVzIiwidmFsaWRJbmRleCIsImxpbmVWYWx1ZSIsImdldFRpY2tNYXJrTGVuZ3RoIiwiZ2V0VGl0bGVIZWlnaHQiLCJ0aXRsZUFsaWduIiwicmV2ZXJzZUFsaWduIiwiU2NhbGUiLCJfbWFyZ2lucyIsInBhZGRpbmdUb3AiLCJwYWRkaW5nQm90dG9tIiwicGFkZGluZ0xlZnQiLCJwYWRkaW5nUmlnaHQiLCJsYWJlbFJvdGF0aW9uIiwiX3JhbmdlIiwiX2dyaWRMaW5lSXRlbXMiLCJfbGFiZWxJdGVtcyIsIl9sYWJlbFNpemVzIiwiX21heExlbmd0aCIsIl9sb25nZXN0VGV4dENhY2hlIiwiX3VzZXJNYXgiLCJfdXNlck1pbiIsIl9zdWdnZXN0ZWRNYXgiLCJfc3VnZ2VzdGVkTWluIiwiX3RpY2tzTGVuZ3RoIiwiX2JvcmRlclZhbHVlIiwiX2RhdGFMaW1pdHNDYWNoZWQiLCJpbml0Iiwic3VnZ2VzdGVkTWluIiwic3VnZ2VzdGVkTWF4IiwibWV0YXMiLCJnZXRUaWNrcyIsInhMYWJlbHMiLCJ5TGFiZWxzIiwiYmVmb3JlVXBkYXRlIiwidGlja09wdHMiLCJzYW1wbGVTaXplIiwiYmVmb3JlU2V0RGltZW5zaW9ucyIsInNldERpbWVuc2lvbnMiLCJhZnRlclNldERpbWVuc2lvbnMiLCJiZWZvcmVEYXRhTGltaXRzIiwiZGV0ZXJtaW5lRGF0YUxpbWl0cyIsImFmdGVyRGF0YUxpbWl0cyIsIm1pbm1heCIsImtlZXBaZXJvIiwiX2FkZEdyYWNlIiwiYmVmb3JlQnVpbGRUaWNrcyIsImJ1aWxkVGlja3MiLCJhZnRlckJ1aWxkVGlja3MiLCJzYW1wbGluZ0VuYWJsZWQiLCJfY29udmVydFRpY2tzVG9MYWJlbHMiLCJiZWZvcmVDYWxjdWxhdGVMYWJlbFJvdGF0aW9uIiwiY2FsY3VsYXRlTGFiZWxSb3RhdGlvbiIsImFmdGVyQ2FsY3VsYXRlTGFiZWxSb3RhdGlvbiIsInRpY2tzTGltaXQiLCJtYXhUaWNrc0xpbWl0IiwiX3RpY2tTaXplIiwibWF4U2NhbGUiLCJtYXhDaGFydCIsImRldGVybWluZU1heFRpY2tzIiwibWFqb3JJbmRpY2VzIiwiZW5hYmxlZCIsImdldE1ham9ySW5kaWNlcyIsIm51bU1ham9ySW5kaWNlcyIsImZpcnN0Iiwic2tpcE1ham9ycyIsImV2ZW5NYWpvclNwYWNpbmciLCJnZXRFdmVuU3BhY2luZyIsImZhY3RvcnMiLCJfZmFjdG9yaXplIiwiY2FsY3VsYXRlU3BhY2luZyIsImF2Z01ham9yU3BhY2luZyIsImJlZm9yZUZpdCIsImZpdCIsImFmdGVyRml0IiwiYWZ0ZXJVcGRhdGUiLCJzdGFydFBpeGVsIiwiZW5kUGl4ZWwiLCJyZXZlcnNlUGl4ZWxzIiwiX2FsaWduVG9QaXhlbHMiLCJhbGlnblRvUGl4ZWxzIiwiX2NhbGxIb29rcyIsIm5vdGlmeVBsdWdpbnMiLCJiZWZvcmVUaWNrVG9MYWJlbENvbnZlcnNpb24iLCJnZW5lcmF0ZVRpY2tMYWJlbHMiLCJhZnRlclRpY2tUb0xhYmVsQ29udmVyc2lvbiIsIm51bVRpY2tzIiwibWF4TGFiZWxEaWFnb25hbCIsIl9pc1Zpc2libGUiLCJsYWJlbFNpemVzIiwiX2dldExhYmVsU2l6ZXMiLCJtYXhMYWJlbFdpZHRoIiwid2lkZXN0IiwibWF4TGFiZWxIZWlnaHQiLCJoaWdoZXN0IiwiYXNpbiIsInRpdGxlT3B0cyIsImdyaWRPcHRzIiwidGl0bGVIZWlnaHQiLCJ0aWNrUGFkZGluZyIsImFuZ2xlUmFkaWFucyIsImxhYmVsSGVpZ2h0IiwibGFiZWxXaWR0aCIsIl9jYWxjdWxhdGVQYWRkaW5nIiwiX2hhbmRsZU1hcmdpbnMiLCJpc1JvdGF0ZWQiLCJsYWJlbHNCZWxvd1RpY2tzIiwib2Zmc2V0TGVmdCIsIm9mZnNldFJpZ2h0IiwiaXNGdWxsU2l6ZSIsIl9jb21wdXRlTGFiZWxTaXplcyIsImNhY2hlcyIsIndpZHRocyIsImhlaWdodHMiLCJ0aWNrRm9udCIsImZvbnRTdHJpbmciLCJuZXN0ZWRMYWJlbCIsIndpZGVzdExhYmVsU2l6ZSIsImhpZ2hlc3RMYWJlbFNpemUiLCJfcmVzb2x2ZVRpY2tGb250T3B0aW9ucyIsInZhbHVlQXQiLCJnZXRWYWx1ZUZvclBpeGVsIiwiZGVjaW1hbCIsImdldERlY2ltYWxGb3JQaXhlbCIsImdldEJhc2VWYWx1ZSIsImNyZWF0ZVRpY2tDb250ZXh0Iiwib3B0aW9uVGlja3MiLCJyb3QiLCJfY29tcHV0ZUdyaWRMaW5lSXRlbXMiLCJ0aWNrc0xlbmd0aCIsInRsIiwiYm9yZGVyT3B0cyIsImF4aXNXaWR0aCIsImF4aXNIYWxmV2lkdGgiLCJhbGlnbkJvcmRlclZhbHVlIiwiYm9yZGVyVmFsdWUiLCJhbGlnbmVkTGluZVZhbHVlIiwidHgxIiwidHkxIiwidHgyIiwidHkyIiwieDEiLCJ5MSIsIngyIiwieTIiLCJwb3NpdGlvbkF4aXNJRCIsImxpbWl0Iiwic3RlcCIsIm9wdHNBdEluZGV4IiwibGluZUNvbG9yIiwidGlja0JvcmRlckRhc2giLCJ0aWNrQm9yZGVyRGFzaE9mZnNldCIsIl9jb21wdXRlTGFiZWxJdGVtcyIsInRpY2tBbmRQYWRkaW5nIiwiaFRpY2tBbmRQYWRkaW5nIiwibGluZUNvdW50IiwidGV4dE9mZnNldCIsIl9nZXRYQXhpc0xhYmVsQWxpZ25tZW50IiwiX2dldFlBeGlzTGFiZWxBbGlnbm1lbnQiLCJoYWxmQ291bnQiLCJiYWNrZHJvcCIsImxhYmVsUGFkZGluZyIsIl9jb21wdXRlTGFiZWxBcmVhIiwiZHJhd0JhY2tncm91bmQiLCJmaWxsUmVjdCIsImZpbmRJbmRleCIsImRyYXdHcmlkIiwiZHJhd0xpbmUiLCJzZXRMaW5lRGFzaCIsImxpbmVEYXNoT2Zmc2V0IiwibGFzdExpbmVXaWR0aCIsImRyYXdMYWJlbHMiLCJkcmF3VGl0bGUiLCJ0aXRsZVgiLCJ0aXRsZVkiLCJ0aXRsZUFyZ3MiLCJ0eiIsImd6IiwiYXhpc0lEIiwiX21heERpZ2l0cyIsImZvbnRTaXplIiwiVHlwZWRSZWdpc3RyeSIsImlzRm9yVHlwZSIsImlzUHJvdG90eXBlT2YiLCJyZWdpc3RlciIsInBhcmVudFNjb3BlIiwiaXNJQ2hhcnRDb21wb25lbnQiLCJpdGVtRGVmYXVsdHMiLCJyb3V0ZXMiLCJwcm9wZXJ0eVBhcnRzIiwic291cmNlTmFtZSIsInNvdXJjZVNjb3BlIiwicGFydHMiLCJyb3V0ZURlZmF1bHRzIiwicmVnaXN0ZXJEZWZhdWx0cyIsInVucmVnaXN0ZXIiLCJyZWdpc3RyeSIsIl90eXBlZFJlZ2lzdHJpZXMiLCJfZWFjaCIsImFkZENvbnRyb2xsZXJzIiwiYWRkUGx1Z2lucyIsImFkZFNjYWxlcyIsImdldENvbnRyb2xsZXIiLCJfZ2V0IiwiZ2V0RWxlbWVudCIsImdldFBsdWdpbiIsImdldFNjYWxlIiwicmVtb3ZlQ29udHJvbGxlcnMiLCJyZW1vdmVFbGVtZW50cyIsInJlbW92ZVBsdWdpbnMiLCJyZW1vdmVTY2FsZXMiLCJ0eXBlZFJlZ2lzdHJ5IiwiYXJnIiwicmVnIiwiX2dldFJlZ2lzdHJ5Rm9yVHlwZSIsIl9leGVjIiwiaXRlbVJlZyIsImNvbXBvbmVudCIsImNhbWVsTWV0aG9kIiwiUGx1Z2luU2VydmljZSIsIl9pbml0Iiwibm90aWZ5IiwiaG9vayIsIl9jcmVhdGVEZXNjcmlwdG9ycyIsImRlc2NyaXB0b3IiLCJwbHVnaW4iLCJjYW5jZWxhYmxlIiwiaW52YWxpZGF0ZSIsIl9vbGRDYWNoZSIsIl9ub3RpZnlTdGF0ZUNoYW5nZXMiLCJhbGxQbHVnaW5zIiwiZ2V0T3B0cyIsInBsdWdpbk9wdHMiLCJjcmVhdGVEZXNjcmlwdG9ycyIsInByZXZpb3VzRGVzY3JpcHRvcnMiLCJzb21lIiwicGx1Z2luU2NvcGVLZXlzIiwiZ2V0SW5kZXhBeGlzIiwiZGF0YXNldERlZmF1bHRzIiwiZGV0ZXJtaW5lQXhpcyIsInNjYWxlT3B0aW9ucyIsImluaXRPcHRpb25zIiwiY2hhcnREZWZhdWx0cyIsImNvbmZpZ1NjYWxlcyIsImNoYXJ0SW5kZXhBeGlzIiwiZmlyc3RJRHMiLCJzY2FsZUNvbmYiLCJlcnJvciIsImRlZmF1bHRJZCIsImdldERlZmF1bHRTY2FsZUlERnJvbUF4aXMiLCJkZWZhdWx0U2NhbGVPcHRpb25zIiwiZGVmYXVsdElEIiwiZ2V0QXhpc0Zyb21EZWZhdWx0U2NhbGVJRCIsIm1lcmdlU2NhbGVDb25maWciLCJpbml0RGF0YSIsImtleUNhY2hlIiwia2V5c0NhY2hlZCIsImNhY2hlZEtleXMiLCJnZW5lcmF0ZSIsImFkZElmRm91bmQiLCJDb25maWciLCJfY29uZmlnIiwiaW5pdENvbmZpZyIsIl9zY29wZUNhY2hlIiwiX3Jlc29sdmVyQ2FjaGUiLCJjbGVhckNhY2hlIiwiY2xlYXIiLCJkYXRhc2V0VHlwZSIsImFkZGl0aW9uYWxPcHRpb25TY29wZXMiLCJfY2FjaGVkU2NvcGVzIiwibWFpblNjb3BlIiwicmVzZXRDYWNoZSIsImtleUxpc3RzIiwiY2hhcnRPcHRpb25TY29wZXMiLCJzdWJQcmVmaXhlcyIsImdldFJlc29sdmVyIiwiaGFzRnVuY3Rpb24iLCJuZWVkQ29udGV4dCIsInJlc29sdmVyQ2FjaGUiLCJLTk9XTl9QT1NJVElPTlMiLCJwb3NpdGlvbklzSG9yaXpvbnRhbCIsImNvbXBhcmUyTGV2ZWwiLCJsMSIsImwyIiwib25BbmltYXRpb25zQ29tcGxldGUiLCJvbkNvbXBsZXRlIiwib25BbmltYXRpb25Qcm9ncmVzcyIsIm9uUHJvZ3Jlc3MiLCJnZXRDYW52YXMiLCJnZXRFbGVtZW50QnlJZCIsImluc3RhbmNlcyIsImdldENoYXJ0IiwibW92ZU51bWVyaWNLZXlzIiwiaW50S2V5IiwiQ2hhcnQiLCJ1c2VyQ29uZmlnIiwiaW5pdGlhbENhbnZhcyIsImV4aXN0aW5nQ2hhcnQiLCJPZmZzY3JlZW5DYW52YXMiLCJfZGV0ZWN0UGxhdGZvcm0iLCJfb3B0aW9ucyIsIl9hc3BlY3RSYXRpbyIsIl9tZXRhc2V0cyIsIl9sYXN0RXZlbnQiLCJfbGlzdGVuZXJzIiwiX3Jlc3BvbnNpdmVMaXN0ZW5lcnMiLCJfc29ydGVkTWV0YXNldHMiLCJfcGx1Z2lucyIsIl9oaWRkZW5JbmRpY2VzIiwiYXR0YWNoZWQiLCJfZG9SZXNpemUiLCJ0aW1lb3V0IiwiY2xlYXJUaW1lb3V0Iiwic2V0VGltZW91dCIsImRlYm91bmNlIiwicmVzaXplRGVsYXkiLCJfaW5pdGlhbGl6ZSIsImJpbmRFdmVudHMiLCJfcmVzaXplQmVmb3JlRHJhdyIsIl9yZXNpemUiLCJuZXdTaXplIiwibmV3UmF0aW8iLCJvblJlc2l6ZSIsInJlbmRlciIsImVuc3VyZVNjYWxlc0hhdmVJRHMiLCJheGlzT3B0aW9ucyIsImJ1aWxkT3JVcGRhdGVTY2FsZXMiLCJzY2FsZU9wdHMiLCJ1cGRhdGVkIiwiaXNSYWRpYWwiLCJkcG9zaXRpb24iLCJkdHlwZSIsInNjYWxlVHlwZSIsImhhc1VwZGF0ZWQiLCJfdXBkYXRlTWV0YXNldHMiLCJfZGVzdHJveURhdGFzZXRNZXRhIiwiX3JlbW92ZVVucmVmZXJlbmNlZE1ldGFzZXRzIiwiYnVpbGRPclVwZGF0ZUNvbnRyb2xsZXJzIiwibmV3Q29udHJvbGxlcnMiLCJvcmRlciIsIkNvbnRyb2xsZXJDbGFzcyIsIl9yZXNldEVsZW1lbnRzIiwiYW5pbXNEaXNhYmxlZCIsIl91cGRhdGVTY2FsZXMiLCJfY2hlY2tFdmVudEJpbmRpbmdzIiwiX3VwZGF0ZUhpZGRlbkluZGljZXMiLCJfdXBkYXRlTGF5b3V0IiwiX3VwZGF0ZURhdGFzZXRzIiwiX2V2ZW50SGFuZGxlciIsIl91cGRhdGVIb3ZlclN0eWxlcyIsImV4aXN0aW5nRXZlbnRzIiwibmV3RXZlbnRzIiwidW5iaW5kRXZlbnRzIiwiY2hhbmdlcyIsIl9nZXRVbmlmb3JtRGF0YUNoYW5nZXMiLCJkYXRhc2V0Q291bnQiLCJtYWtlU2V0IiwiY2hhbmdlU2V0Iiwibm9BcmVhIiwiX2lkeCIsIl91cGRhdGVEYXRhc2V0IiwibGF5ZXJzIiwiX2RyYXdEYXRhc2V0cyIsIl9kcmF3RGF0YXNldCIsInVzZUNsaXAiLCJnZXRFbGVtZW50c0F0RXZlbnRGb3JNb2RlIiwic2V0RGF0YXNldFZpc2liaWxpdHkiLCJfdXBkYXRlVmlzaWJpbGl0eSIsIl9zdG9wIiwiZGVzdHJveSIsInRvQmFzZTY0SW1hZ2UiLCJ0b0RhdGFVUkwiLCJiaW5kVXNlckV2ZW50cyIsImJpbmRSZXNwb25zaXZlRXZlbnRzIiwiX2FkZCIsIl9yZW1vdmUiLCJkZXRhY2hlZCIsInVwZGF0ZUhvdmVyU3R5bGUiLCJnZXRBY3RpdmVFbGVtZW50cyIsInNldEFjdGl2ZUVsZW1lbnRzIiwiYWN0aXZlRWxlbWVudHMiLCJsYXN0QWN0aXZlIiwicmVwbGF5IiwiaG92ZXJPcHRpb25zIiwiZGVhY3RpdmF0ZWQiLCJhY3RpdmF0ZWQiLCJpbkNoYXJ0QXJlYSIsImV2ZW50RmlsdGVyIiwiX2hhbmRsZUV2ZW50IiwiX2dldEFjdGl2ZUVsZW1lbnRzIiwiaXNDbGljayIsIl9pc0NsaWNrRXZlbnQiLCJsYXN0RXZlbnQiLCJkZXRlcm1pbmVMYXN0RXZlbnQiLCJpbnZhbGlkYXRlUGx1Z2lucyIsImNsaXBBcmMiLCJwaXhlbE1hcmdpbiIsImFuZ2xlTWFyZ2luIiwiclRoZXRhVG9YWSIsInRoZXRhIiwicGF0aEFyYyIsImlubmVyUiIsInNwYWNpbmdPZmZzZXQiLCJhdk5vZ1NwYWNpbmdSYWRpdXMiLCJhbmdsZU9mZnNldCIsIm91dGVyU3RhcnQiLCJvdXRlckVuZCIsImlubmVyU3RhcnQiLCJpbm5lckVuZCIsImFuZ2xlRGVsdGEiLCJib3JkZXJSYWRpdXMiLCJoYWxmVGhpY2tuZXNzIiwiaW5uZXJMaW1pdCIsImNvbXB1dGVPdXRlckxpbWl0Iiwib3V0ZXJBcmNMaW1pdCIsInBhcnNlQm9yZGVyUmFkaXVzJDEiLCJvdXRlclN0YXJ0QWRqdXN0ZWRSYWRpdXMiLCJvdXRlckVuZEFkanVzdGVkUmFkaXVzIiwib3V0ZXJTdGFydEFkanVzdGVkQW5nbGUiLCJvdXRlckVuZEFkanVzdGVkQW5nbGUiLCJpbm5lclN0YXJ0QWRqdXN0ZWRSYWRpdXMiLCJpbm5lckVuZEFkanVzdGVkUmFkaXVzIiwiaW5uZXJTdGFydEFkanVzdGVkQW5nbGUiLCJpbm5lckVuZEFkanVzdGVkQW5nbGUiLCJwQ2VudGVyIiwicDQiLCJwOCIsInZlcnNpb24iLCJBcmNFbGVtZW50IiwiZnVsbENpcmNsZXMiLCJjaGFydFgiLCJjaGFydFkiLCJyQWRqdXN0IiwiYmV0d2VlbkFuZ2xlcyIsIndpdGhpblJhZGl1cyIsImhhbGZBbmdsZSIsImhhbGZSYWRpdXMiLCJyYWRpdXNPZmZzZXQiLCJkcmF3QXJjIiwiaW5uZXIiLCJsaW5lSm9pbiIsImRyYXdGdWxsQ2lyY2xlQm9yZGVycyIsInNldFN0eWxlIiwibGluZUNhcCIsInBhdGhWYXJzIiwicGFyYW1zU3RhcnQiLCJwYXJhbXNFbmQiLCJzZWdtZW50U3RhcnQiLCJzZWdtZW50RW5kIiwib3V0c2lkZSIsInBhdGhTZWdtZW50IiwibGluZU1ldGhvZCIsInN0ZXBwZWQiLCJnZXRMaW5lTWV0aG9kIiwiZmFzdFBhdGhTZWdtZW50IiwicHJldlgiLCJsYXN0WSIsImF2Z1giLCJjb3VudFgiLCJwb2ludEluZGV4IiwiZHJhd1giLCJ0cnVuY1giLCJfZ2V0U2VnbWVudE1ldGhvZCIsInVzZVBhdGgyRCIsIlBhdGgyRCIsIkxpbmVFbGVtZW50IiwiX3BhdGgiLCJfcG9pbnRzIiwiX3NlZ21lbnRzIiwiX3BvaW50c1VwZGF0ZWQiLCJzZWdtZW50T3B0aW9ucyIsImZpbmRTdGFydEFuZEVuZCIsImNoYXJ0Q29udGV4dCIsImJhc2VTdHlsZSIsImFkZFN0eWxlIiwic3QiLCJkaXIiLCJwMCIsInAwRGF0YUluZGV4IiwicDFEYXRhSW5kZXgiLCJkb1NwbGl0QnlTdHlsZXMiLCJzcGxpdEJ5U3R5bGVzIiwic29saWRTZWdtZW50cyIsIl9jb21wdXRlU2VnbWVudHMiLCJpbnRlcnBvbGF0ZSIsIl9pbnRlcnBvbGF0ZSIsIl9nZXRJbnRlcnBvbGF0aW9uTWV0aG9kIiwiaW50ZXJwb2xhdGVkIiwic2VnbWVudE1ldGhvZCIsInBhdGgiLCJzdHJva2VQYXRoV2l0aENhY2hlIiwic3Ryb2tlUGF0aERpcmVjdCIsImluUmFuZ2UkMSIsImhpdFJhZGl1cyIsIlBvaW50RWxlbWVudCIsIm1vdXNlWCIsIm1vdXNlWSIsImluWFJhbmdlIiwiaW5ZUmFuZ2UiLCJob3ZlclJhZGl1cyIsImdldEJhckJvdW5kcyIsImJhciIsImhhbGYiLCJza2lwT3JMaW1pdCIsInNraXBYIiwic2tpcFkiLCJhZGROb3JtYWxSZWN0UGF0aCIsImluZmxhdGVSZWN0IiwicmVmUmVjdCIsIkJhckVsZW1lbnQiLCJvdXRlciIsIm1heFciLCJtYXhIIiwicGFyc2VCb3JkZXJXaWR0aCIsIm1heFIiLCJlbmFibGVCb3JkZXIiLCJwYXJzZUJvcmRlclJhZGl1cyIsImJvdW5kaW5nUmVjdHMiLCJhZGRSZWN0UGF0aCIsImNsZWFuRGVjaW1hdGVkRGF0YXNldCIsImNsZWFuRGVjaW1hdGVkRGF0YSIsInBsdWdpbl9kZWNpbWF0aW9uIiwiYWxnb3JpdGhtIiwiYmVmb3JlRWxlbWVudHNVcGRhdGUiLCJ4QXhpcyIsImRlY2ltYXRlZCIsImdldFN0YXJ0QW5kQ291bnRPZlZpc2libGVQb2ludHNTaW1wbGlmaWVkIiwidGhyZXNob2xkIiwic2FtcGxlcyIsImJ1Y2tldFdpZHRoIiwic2FtcGxlZEluZGV4IiwiZW5kSW5kZXgiLCJtYXhBcmVhUG9pbnQiLCJtYXhBcmVhIiwibmV4dEEiLCJhdmdZIiwiYXZnUmFuZ2VTdGFydCIsImF2Z1JhbmdlRW5kIiwiYXZnUmFuZ2VMZW5ndGgiLCJyYW5nZU9mZnMiLCJyYW5nZVRvIiwicG9pbnRBeCIsInBvaW50QXkiLCJsdHRiRGVjaW1hdGlvbiIsIm1pbkluZGV4IiwibWF4SW5kZXgiLCJzdGFydEluZGV4IiwieE1pbiIsImR4IiwibGFzdEluZGV4IiwiaW50ZXJtZWRpYXRlSW5kZXgxIiwiaW50ZXJtZWRpYXRlSW5kZXgyIiwibWluTWF4RGVjaW1hdGlvbiIsImRlY29kZUZpbGwiLCJmaWxsT3B0aW9uIiwicGFyc2VGaWxsT3B0aW9uIiwic2ltcGxlQXJjIiwiZmluZFNlZ21lbnRFbmQiLCJhZGRQb2ludHNCZWxvdyIsInNvdXJjZVBvaW50IiwibGluZXNCZWxvdyIsInBvc3Rwb25lZCIsImZpbmRQb2ludCIsInVuc2hpZnQiLCJwb2ludFZhbHVlIiwibGluZVBvaW50cyIsImZpcnN0VmFsdWUiLCJsYXN0VmFsdWUiLCJnZXRMaW5lQnlJbmRleCIsInNvdXJjZVBvaW50cyIsImJlbG93IiwiZ2V0TGluZXNCZWxvdyIsImNyZWF0ZUJvdW5kYXJ5TGluZSIsImJ1aWxkU3RhY2tMaW5lIiwiYm91bmRhcnkiLCJjb21wdXRlQ2lyY3VsYXJCb3VuZGFyeSIsImNvbXB1dGVMaW5lYXJCb3VuZGFyeSIsImNvbXB1dGVCb3VuZGFyeSIsInBvaW50c0Zyb21TZWdtZW50cyIsInJlc29sdmVUYXJnZXQiLCJwcm9wYWdhdGUiLCJ2aXNpdGVkIiwiY2xpcFkiLCJsaW5lTG9vcCIsImdldEJvdW5kcyIsIl9nZXRFZGdlIiwiY2xpcEJvdW5kcyIsImludGVycG9sYXRlZExpbmVUbyIsImludGVycG9sYXRlZFBvaW50IiwiX2ZpbGwiLCJ0cG9pbnRzIiwidGFyZ2V0U2VnbWVudHMiLCJ0Z3QiLCJzdWJCb3VuZHMiLCJmaWxsU291cmNlcyIsImZpbGxTb3VyY2UiLCJub3RTaGFwZSIsInRhcmdldExvb3AiLCJkcmF3ZmlsbCIsImxpbmVPcHRzIiwiYWJvdmUiLCJkb0ZpbGwiLCJwbHVnaW5fZmlsbGVyIiwiYWZ0ZXJEYXRhc2V0c1VwZGF0ZSIsIl9hcmdzIiwiJGZpbGxlciIsImJlZm9yZURyYXciLCJkcmF3VGltZSIsImJlZm9yZURhdGFzZXRzRHJhdyIsImJlZm9yZURhdGFzZXREcmF3IiwiZ2V0Qm94U2l6ZSIsImxhYmVsT3B0cyIsImJveEhlaWdodCIsImJveFdpZHRoIiwidXNlUG9pbnRTdHlsZSIsIml0ZW1IZWlnaHQiLCJMZWdlbmQiLCJfYWRkZWQiLCJsZWdlbmRIaXRCb3hlcyIsIl9ob3ZlcmVkSXRlbSIsImRvdWdobnV0TW9kZSIsImxlZ2VuZEl0ZW1zIiwiY29sdW1uU2l6ZXMiLCJsaW5lV2lkdGhzIiwiYnVpbGRMYWJlbHMiLCJsYWJlbEZvbnQiLCJfY29tcHV0ZVRpdGxlSGVpZ2h0IiwiX2ZpdFJvd3MiLCJfZml0Q29scyIsImhpdGJveGVzIiwidG90YWxIZWlnaHQiLCJyb3ciLCJoZWlnaHRMaW1pdCIsInRvdGFsV2lkdGgiLCJjdXJyZW50Q29sV2lkdGgiLCJjdXJyZW50Q29sSGVpZ2h0IiwiY29sIiwiYWRqdXN0SGl0Qm94ZXMiLCJydGxIZWxwZXIiLCJoaXRib3giLCJfZHJhdyIsImRlZmF1bHRDb2xvciIsImZvbnRDb2xvciIsImhhbGZGb250U2l6ZSIsImN1cnNvciIsInRleHREaXJlY3Rpb24iLCJsaW5lRGFzaCIsImRyYXdPcHRpb25zIiwiU1FSVDIiLCJ5Qm94VG9wIiwieEJveExlZnQiLCJkcmF3TGVnZW5kQm94IiwiX3RleHRYIiwidGl0bGVGb250IiwidGl0bGVQYWRkaW5nIiwidG9wUGFkZGluZ1BsdXNIYWxmRm9udFNpemUiLCJfZ2V0TGVnZW5kSXRlbUF0IiwiaGl0Qm94IiwibGgiLCJoYW5kbGVFdmVudCIsIm9uTGVhdmUiLCJpc0xpc3RlbmVkIiwiaG92ZXJlZEl0ZW0iLCJzYW1lSXRlbSIsInBsdWdpbl9sZWdlbmQiLCJfZWxlbWVudCIsImFmdGVyRXZlbnQiLCJjaSIsIlRpdGxlIiwiX3BhZGRpbmciLCJ0ZXh0U2l6ZSIsIl9kcmF3QXJncyIsImZvbnRPcHRzIiwicGx1Z2luX3RpdGxlIiwidGl0bGVCbG9jayIsImNyZWF0ZVRpdGxlIiwiV2Vha01hcCIsInBsdWdpbl9zdWJ0aXRsZSIsInBvc2l0aW9uZXJzIiwiYXZlcmFnZSIsImV2ZW50UG9zaXRpb24iLCJuZWFyZXN0RWxlbWVudCIsInRwIiwicHVzaE9yQ29uY2F0IiwidG9QdXNoIiwic3BsaXROZXdsaW5lcyIsImNyZWF0ZVRvb2x0aXBJdGVtIiwiZ2V0VG9vbHRpcFNpemUiLCJib2R5IiwiZm9vdGVyIiwiYm9keUZvbnQiLCJmb290ZXJGb250IiwidGl0bGVMaW5lQ291bnQiLCJmb290ZXJMaW5lQ291bnQiLCJib2R5TGluZUl0ZW1Db3VudCIsImNvbWJpbmVkQm9keUxlbmd0aCIsImJvZHlJdGVtIiwiYmVmb3JlIiwiYWZ0ZXIiLCJiZWZvcmVCb2R5IiwiYWZ0ZXJCb2R5IiwidGl0bGVTcGFjaW5nIiwidGl0bGVNYXJnaW5Cb3R0b20iLCJkaXNwbGF5Q29sb3JzIiwiYm9keVNwYWNpbmciLCJmb290ZXJNYXJnaW5Ub3AiLCJmb290ZXJTcGFjaW5nIiwid2lkdGhQYWRkaW5nIiwibWF4TGluZVdpZHRoIiwiZGV0ZXJtaW5lWEFsaWduIiwieUFsaWduIiwiY2hhcnRXaWR0aCIsInhBbGlnbiIsImNhcmV0IiwiY2FyZXRTaXplIiwiY2FyZXRQYWRkaW5nIiwiZG9lc05vdEZpdFdpdGhBbGlnbiIsImRldGVybWluZUFsaWdubWVudCIsImRldGVybWluZVlBbGlnbiIsImdldEJhY2tncm91bmRQb2ludCIsImFsaWdubWVudCIsInBhZGRpbmdBbmRTaXplIiwiYWxpZ25YIiwiYWxpZ25ZIiwiZ2V0QWxpZ25lZFgiLCJnZXRCZWZvcmVBZnRlckJvZHlMaW5lcyIsIm92ZXJyaWRlQ2FsbGJhY2tzIiwiVG9vbHRpcCIsIm9wYWNpdHkiLCJfZXZlbnRQb3NpdGlvbiIsIl9zaXplIiwiX2NhY2hlZEFuaW1hdGlvbnMiLCJfdG9vbHRpcEl0ZW1zIiwiZGF0YVBvaW50cyIsImNhcmV0WCIsImNhcmV0WSIsImxhYmVsQ29sb3JzIiwibGFiZWxQb2ludFN0eWxlcyIsImxhYmVsVGV4dENvbG9ycyIsInRvb2x0aXBJdGVtcyIsImdldFRpdGxlIiwiYmVmb3JlVGl0bGUiLCJhZnRlclRpdGxlIiwiZ2V0QmVmb3JlQm9keSIsImdldEJvZHkiLCJib2R5SXRlbXMiLCJzY29wZWQiLCJiZWZvcmVMYWJlbCIsImFmdGVyTGFiZWwiLCJnZXRBZnRlckJvZHkiLCJnZXRGb290ZXIiLCJiZWZvcmVGb290ZXIiLCJhZnRlckZvb3RlciIsIl9jcmVhdGVJdGVtcyIsIml0ZW1Tb3J0IiwibGFiZWxDb2xvciIsImxhYmVsUG9pbnRTdHlsZSIsImxhYmVsVGV4dENvbG9yIiwicG9zaXRpb25BbmRTaXplIiwiYmFja2dyb3VuZFBvaW50IiwiZXh0ZXJuYWwiLCJkcmF3Q2FyZXQiLCJ0b29sdGlwUG9pbnQiLCJjYXJldFBvc2l0aW9uIiwiZ2V0Q2FyZXRQb3NpdGlvbiIsIngzIiwieTMiLCJwdFgiLCJwdFkiLCJ0aXRsZUNvbG9yIiwiX2RyYXdDb2xvckJveCIsImNvbG9yWCIsInJ0bENvbG9yWCIsInlPZmZTZXQiLCJjb2xvclkiLCJtdWx0aUtleUJhY2tncm91bmQiLCJvdXRlclgiLCJpbm5lclgiLCJzdHJva2VSZWN0IiwiZHJhd0JvZHkiLCJib2R5QWxpZ24iLCJib2R5TGluZUhlaWdodCIsInhMaW5lUGFkZGluZyIsImZpbGxMaW5lT2ZUZXh0IiwiYm9keUFsaWduRm9yQ2FsY3VsYXRpb24iLCJ0ZXh0Q29sb3IiLCJib2R5Q29sb3IiLCJkcmF3Rm9vdGVyIiwiZm9vdGVyQWxpZ24iLCJmb290ZXJDb2xvciIsInRvb2x0aXBTaXplIiwicXVhZHJhdGljQ3VydmVUbyIsIl91cGRhdGVBbmltYXRpb25UYXJnZXQiLCJhbmltWCIsImFuaW1ZIiwiaGFzVG9vbHRpcENvbnRlbnQiLCJnbG9iYWxBbHBoYSIsInBvc2l0aW9uQ2hhbmdlZCIsIl9wb3NpdGlvbkNoYW5nZWQiLCJfaWdub3JlUmVwbGF5RXZlbnRzIiwicGx1Z2luX3Rvb2x0aXAiLCJhZnRlckluaXQiLCJhZnRlckRyYXciLCJsYWJlbENvdW50IiwiRGVjaW1hdGlvbiIsIkZpbGxlciIsIlN1YlRpdGxlIiwiQ2F0ZWdvcnlTY2FsZSIsIl9zdGFydFZhbHVlIiwiX3ZhbHVlUmFuZ2UiLCJfYWRkZWRMYWJlbHMiLCJhZGRlZCIsImFkZGVkTGFiZWxzIiwiYWRkSWZTdHJpbmciLCJsYXN0SW5kZXhPZiIsImZpbmRPckFkZExhYmVsIiwicmVsYXRpdmVMYWJlbFNpemUiLCJtaW5TcGFjaW5nIiwiTGluZWFyU2NhbGVCYXNlIiwiX2VuZFZhbHVlIiwiaGFuZGxlVGlja1JhbmdlT3B0aW9ucyIsInNldE1pbiIsInNldE1heCIsIm1pblNpZ24iLCJtYXhTaWduIiwiTUFYX1NBRkVfSU5URUdFUiIsIk1JTl9TQUZFX0lOVEVHRVIiLCJnZXRUaWNrTGltaXQiLCJtYXhUaWNrcyIsInN0ZXBTaXplIiwiY29tcHV0ZVRpY2tMaW1pdCIsImdlbmVyYXRpb25PcHRpb25zIiwiZGF0YVJhbmdlIiwicHJlY2lzaW9uIiwibWF4RGlnaXRzIiwiaW5jbHVkZUJvdW5kcyIsIm1heFNwYWNlcyIsInJtaW4iLCJybWF4IiwiY291bnREZWZpbmVkIiwibmljZU1pbiIsIm5pY2VNYXgiLCJudW1TcGFjZXMiLCJyb3VuZGVkIiwiYWxtb3N0V2hvbGUiLCJkZWNpbWFsUGxhY2VzIiwiZ2VuZXJhdGVUaWNrcyQxIiwiTGluZWFyU2NhbGUiLCJpc01ham9yIiwidGlja1ZhbCIsIkxvZ2FyaXRobWljU2NhbGUiLCJfemVybyIsImV4cCIsImVuZEV4cCIsImVuZFNpZ25pZmljYW5kIiwic2lnbmlmaWNhbmQiLCJsYXN0VGljayIsImdlbmVyYXRlVGlja3MiLCJnZXRUaWNrQmFja2Ryb3BIZWlnaHQiLCJkZXRlcm1pbmVMaW1pdHMiLCJ1cGRhdGVMaW1pdHMiLCJsaW1pdHMiLCJoTGltaXRzIiwidkxpbWl0cyIsImdldFRleHRBbGlnbkZvckFuZ2xlIiwieUZvckFuZ2xlIiwicGF0aFJhZGl1c0xpbmUiLCJnZXRQb2ludFBvc2l0aW9uIiwiUmFkaWFsTGluZWFyU2NhbGUiLCJkcmF3aW5nQXJlYSIsIl9wb2ludExhYmVscyIsIl9wb2ludExhYmVsSXRlbXMiLCJ2YWx1ZUNvdW50IiwicG9pbnRMYWJlbE9wdHMiLCJhZGRpdGlvbmFsQW5nbGUiLCJjZW50ZXJQb2ludExhYmVscyIsImdldFBvaW50TGFiZWxDb250ZXh0IiwicGxGb250Iiwic2V0Q2VudGVyUG9pbnQiLCJleHRyYSIsIm91dGVyRGlzdGFuY2UiLCJwb2ludExhYmVsUG9zaXRpb24iLCJidWlsZFBvaW50TGFiZWxJdGVtcyIsImZpdFdpdGhQb2ludExhYmVscyIsImxlZnRNb3ZlbWVudCIsInJpZ2h0TW92ZW1lbnQiLCJ0b3BNb3ZlbWVudCIsImJvdHRvbU1vdmVtZW50Iiwic2NhbGluZ0ZhY3RvciIsImdldFZhbHVlRm9yRGlzdGFuY2VGcm9tQ2VudGVyIiwic2NhbGVkRGlzdGFuY2UiLCJwb2ludExhYmVsIiwiY3JlYXRlUG9pbnRMYWJlbENvbnRleHQiLCJkaXN0YW5jZUZyb21DZW50ZXIiLCJnZXRCYXNlUG9zaXRpb24iLCJnZXRQb2ludExhYmVsUG9zaXRpb24iLCJkcmF3UG9pbnRMYWJlbHMiLCJncmlkTGluZU9wdHMiLCJkcmF3UmFkaXVzTGluZSIsImFuaW1hdGUiLCJJTlRFUlZBTFMiLCJtaWxsaXNlY29uZCIsImNvbW1vbiIsInN0ZXBzIiwic2Vjb25kIiwibWludXRlIiwiaG91ciIsImRheSIsIndlZWsiLCJtb250aCIsInF1YXJ0ZXIiLCJ5ZWFyIiwiVU5JVFMiLCJzb3J0ZXIiLCJhZGFwdGVyIiwiX2FkYXB0ZXIiLCJwYXJzZXIiLCJpc29XZWVrZGF5IiwiX3BhcnNlT3B0cyIsImRldGVybWluZVVuaXRGb3JBdXRvVGlja3MiLCJtaW5Vbml0IiwiY2FwYWNpdHkiLCJpbnRlcnZhbCIsImFkZFRpY2siLCJ0aW1lIiwidGltZXN0YW1wcyIsInRpY2tzRnJvbVRpbWVzdGFtcHMiLCJtYWpvclVuaXQiLCJzZXRNYWpvclRpY2tzIiwiVGltZVNjYWxlIiwiX3VuaXQiLCJfbWFqb3JVbml0IiwiX29mZnNldHMiLCJfbm9ybWFsaXplZCIsImRpc3BsYXlGb3JtYXRzIiwibm9ybWFsaXplZCIsIl9hcHBseUJvdW5kcyIsIl9nZXRMYWJlbEJvdW5kcyIsImdldExhYmVsVGltZXN0YW1wcyIsInRpbWVPcHRzIiwiX2dlbmVyYXRlIiwiX2ZpbHRlckJldHdlZW4iLCJfZ2V0TGFiZWxDYXBhY2l0eSIsImRldGVybWluZVVuaXRGb3JGb3JtYXR0aW5nIiwiZGV0ZXJtaW5lTWFqb3JVbml0IiwiaW5pdE9mZnNldHMiLCJnZXREZWNpbWFsRm9yVmFsdWUiLCJoYXNXZWVrZGF5IiwiZ2V0RGF0YVRpbWVzdGFtcHMiLCJ0b29sdGlwRm9ybWF0IiwiZGF0ZXRpbWUiLCJfdGlja0Zvcm1hdEZ1bmN0aW9uIiwibWlub3JGb3JtYXQiLCJtYWpvckZvcm1hdCIsIm9mZnNldHMiLCJfZ2V0TGFiZWxTaXplIiwidGlja3NPcHRzIiwidGlja0xhYmVsV2lkdGgiLCJjb3NSb3RhdGlvbiIsInNpblJvdGF0aW9uIiwidGlja0ZvbnRTaXplIiwiZXhhbXBsZVRpbWUiLCJleGFtcGxlTGFiZWwiLCJwcmV2U291cmNlIiwibmV4dFNvdXJjZSIsInByZXZUYXJnZXQiLCJuZXh0VGFyZ2V0Iiwic3BhbiIsIlRpbWVTZXJpZXNTY2FsZSIsIl90YWJsZSIsIl9taW5Qb3MiLCJfdGFibGVSYW5nZSIsIl9nZXRUaW1lc3RhbXBzRm9yVGFibGUiLCJidWlsZExvb2t1cFRhYmxlIiwicmVnaXN0ZXJhYmxlcyIsImNsZWFyc2t5X2RheSIsImNsZWFyc2t5X25pZ2h0IiwiY2xlYXJza3lfcG9sYXJ0d2lsaWdodCIsImNsb3VkeSIsImZhaXJfZGF5IiwiZmFpcl9uaWdodCIsImZhaXJfcG9sYXJ0d2lsaWdodCIsImZvZyIsImhlYXZ5cmFpbiIsImhlYXZ5cmFpbmFuZHRodW5kZXIiLCJoZWF2eXJhaW5zaG93ZXJzYW5kdGh1bmRlcl9kYXkiLCJoZWF2eXJhaW5zaG93ZXJzYW5kdGh1bmRlcl9uaWdodCIsImhlYXZ5cmFpbnNob3dlcnNhbmR0aHVuZGVyX3BvbGFydHdpbGlnaHQiLCJoZWF2eXJhaW5zaG93ZXJzX2RheSIsImhlYXZ5cmFpbnNob3dlcnNfbmlnaHQiLCJoZWF2eXJhaW5zaG93ZXJzX3BvbGFydHdpbGlnaHQiLCJoZWF2eXNsZWV0IiwiaGVhdnlzbGVldGFuZHRodW5kZXIiLCJoZWF2eXNsZWV0c2hvd2Vyc2FuZHRodW5kZXJfZGF5IiwiaGVhdnlzbGVldHNob3dlcnNhbmR0aHVuZGVyX25pZ2h0IiwiaGVhdnlzbGVldHNob3dlcnNhbmR0aHVuZGVyX3BvbGFydHdpbGlnaHQiLCJoZWF2eXNsZWV0c2hvd2Vyc19kYXkiLCJoZWF2eXNsZWV0c2hvd2Vyc19uaWdodCIsImhlYXZ5c2xlZXRzaG93ZXJzX3BvbGFydHdpbGlnaHQiLCJoZWF2eXNub3ciLCJoZWF2eXNub3dhbmR0aHVuZGVyIiwiaGVhdnlzbm93c2hvd2Vyc2FuZHRodW5kZXJfZGF5IiwiaGVhdnlzbm93c2hvd2Vyc2FuZHRodW5kZXJfbmlnaHQiLCJoZWF2eXNub3dzaG93ZXJzYW5kdGh1bmRlcl9wb2xhcnR3aWxpZ2h0IiwiaGVhdnlzbm93c2hvd2Vyc19kYXkiLCJoZWF2eXNub3dzaG93ZXJzX25pZ2h0IiwiaGVhdnlzbm93c2hvd2Vyc19wb2xhcnR3aWxpZ2h0IiwibGlnaHRyYWluIiwibGlnaHRyYWluYW5kdGh1bmRlciIsImxpZ2h0cmFpbnNob3dlcnNhbmR0aHVuZGVyX2RheSIsImxpZ2h0cmFpbnNob3dlcnNhbmR0aHVuZGVyX25pZ2h0IiwibGlnaHRyYWluc2hvd2Vyc2FuZHRodW5kZXJfcG9sYXJ0d2lsaWdodCIsImxpZ2h0cmFpbnNob3dlcnNfZGF5IiwibGlnaHRyYWluc2hvd2Vyc19uaWdodCIsImxpZ2h0cmFpbnNob3dlcnNfcG9sYXJ0d2lsaWdodCIsImxpZ2h0c2xlZXQiLCJsaWdodHNsZWV0YW5kdGh1bmRlciIsImxpZ2h0c2xlZXRzaG93ZXJzX2RheSIsImxpZ2h0c2xlZXRzaG93ZXJzX25pZ2h0IiwibGlnaHRzbGVldHNob3dlcnNfcG9sYXJ0d2lsaWdodCIsImxpZ2h0c25vdyIsImxpZ2h0c25vd2FuZHRodW5kZXIiLCJsaWdodHNub3dzaG93ZXJzX2RheSIsImxpZ2h0c25vd3Nob3dlcnNfbmlnaHQiLCJsaWdodHNub3dzaG93ZXJzX3BvbGFydHdpbGlnaHQiLCJpZ2h0c3NsZWV0c2hvd2Vyc2FuZHRodW5kZXJfZGF5IiwibGlnaHRzc2xlZXRzaG93ZXJzYW5kdGh1bmRlcl9uaWdodCIsImxpZ2h0c3NsZWV0c2hvd2Vyc2FuZHRodW5kZXJfcG9sYXJ0d2lsaWdodCIsImxpZ2h0c3Nub3dzaG93ZXJzYW5kdGh1bmRlcl9kYXkiLCJsaWdodHNzbm93c2hvd2Vyc2FuZHRodW5kZXJfbmlnaHQiLCJsaWdodHNzbm93c2hvd2Vyc2FuZHRodW5kZXJfcG9sYXJ0d2lsaWdodCIsInBhcnRseWNsb3VkeV9kYXkiLCJwYXJ0bHljbG91ZHlfbmlnaHQiLCJwYXJ0bHljbG91ZHlfcG9sYXJ0d2lsaWdodCIsInJhaW4iLCJyYWluYW5kdGh1bmRlciIsInJhaW5zaG93ZXJzYW5kdGh1bmRlcl9kYXkiLCJyYWluc2hvd2Vyc2FuZHRodW5kZXJfbmlnaHQiLCJyYWluc2hvd2Vyc2FuZHRodW5kZXJfcG9sYXJ0d2lsaWdodCIsInJhaW5zaG93ZXJzX2RheSIsInJhaW5zaG93ZXJzX25pZ2h0IiwicmFpbnNob3dlcnNfcG9sYXJ0d2lsaWdodCIsInNsZWV0Iiwic2xlZXRhbmR0aHVuZGVyIiwic2xlZXRzaG93ZXJzYW5kdGh1bmRlcl9kYXkiLCJzbGVldHNob3dlcnNhbmR0aHVuZGVyX25pZ2h0Iiwic2xlZXRzaG93ZXJzYW5kdGh1bmRlcl9wb2xhcnR3aWxpZ2h0Iiwic2xlZXRzaG93ZXJzX2RheSIsInNsZWV0c2hvd2Vyc19uaWdodCIsInNsZWV0c2hvd2Vyc19wb2xhcnR3aWxpZ2h0Iiwic25vd2FuZHRodW5kZXIiLCJzbm93c2hvd2Vyc2FuZHRodW5kZXJfZGF5Iiwic25vd3Nob3dlcnNhbmR0aHVuZGVyX25pZ2h0Iiwic25vd3Nob3dlcnNhbmR0aHVuZGVyX3BvbGFydHdpbGlnaHQiLCJzbm93c2hvd2Vyc19kYXkiLCJzbm93c2hvd2Vyc19uaWdodCIsInNub3dzaG93ZXJzX3BvbGFydHdpbGlnaHQiLCJpY29uX2Fycm93IiwiYmFzZV9tYXAiLCJiYWNrZ3JvdW5kX2ltZyIsInJhZGFyX21hcCIsIkJhckxpbmVDaGFydCIsImJ1aWxkQ2hhcnQiLCJnZXREYXRhc2V0cyIsImdldE9wdGlvbnMiLCJ1cGRhdGVEYXRhIiwidGVtcCIsInByZWNpcGl0YXRpb24iLCJ3aW5kIiwiYWlyUHJlc3N1cmUiLCJ3ZWF0aGVySW1nIiwid2luZEFycm93Iiwid2luZERpcmVjdGlvbiIsInBvaW50Um90YXRpb24iLCJwb2ludFJhZGl1cyIsIkRpc3BsYXlDb250cm9sbGVyIiwicmFkYXJJbWFnZSIsImdldENoYXJ0RWwiLCJ1cGRhdGVSYWRhckltYWdlIiwidGltZVN0YW1wIiwiaW1hZ2VVUkwiLCJsb2ciLCJXZWF0aGVyRGF0YSIsImFzeW5jIiwiZmV0Y2giLCJyZXNwb25zZSIsImpzb24iLCJnZXRSYWRhckltYWdlIiwibGFzdEZpbGVzIiwibGluayIsImdldENoYXJ0RGF0YSIsInRpbWVzZXJpZXMiLCJpbnN0YW50IiwiZGV0YWlscyIsImFpcl90ZW1wZXJhdHVyZSIsIm5leHRfMV9ob3VycyIsInByZWNpcGl0YXRpb25fYW1vdW50Iiwid2luZF9zcGVlZCIsImFpcl9wcmVzc3VyZV9hdF9zZWFfbGV2ZWwiLCJpbWciLCJJbWFnZSIsInN1bW1hcnkiLCJzeW1ib2xfY29kZSIsIndpbmRfZnJvbV9kaXJlY3Rpb24iLCJjaGFydFVSTCIsIm1hcFVSTCIsIndlYXRoZXJEYXRhIiwiZGlzcGxheUNvbnRyb2xsZXIiLCJnZXRKU09OIl0sInNvdXJjZVJvb3QiOiIifQ==