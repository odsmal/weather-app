/*! For license information please see main.js.LICENSE.txt */
(()=>{"use strict";var t={3761:(t,e,i)=>{t.exports=i.p+"9b2d66a41eb245188264.svg"},8287:(t,e,i)=>{t.exports=i.p+"de8410b5be4ad70db196.svg"},1454:(t,e,i)=>{t.exports=i.p+"730bfe55beab95f8a099.svg"},5077:(t,e,i)=>{t.exports=i.p+"f4c494b8b1d37c5de359.svg"},9155:(t,e,i)=>{t.exports=i.p+"0f5e2e50940fd379710d.svg"},8203:(t,e,i)=>{t.exports=i.p+"a28f8ef702f1ff8fd0fe.svg"},8941:(t,e,i)=>{t.exports=i.p+"7b4918679ff5f6cc8f9e.svg"},1549:(t,e,i)=>{t.exports=i.p+"a1cb77cdf4a65b474104.svg"},5783:(t,e,i)=>{t.exports=i.p+"089c7c0ba45475701fe4.svg"},2757:(t,e,i)=>{t.exports=i.p+"b1bb9b2fe75a6642e3de.svg"},7708:(t,e,i)=>{t.exports=i.p+"2bd57e3e2da7ec86bbc4.svg"},965:(t,e,i)=>{t.exports=i.p+"df8ed63dd9e2501a3418.svg"},1936:(t,e,i)=>{t.exports=i.p+"d2b3d4c7708a4e8f5a19.svg"},9195:(t,e,i)=>{t.exports=i.p+"7c408c29d81bf405e206.svg"},752:(t,e,i)=>{t.exports=i.p+"ac72c13887fa3e805a68.svg"},1471:(t,e,i)=>{t.exports=i.p+"f20b436197fab1c3dad9.svg"},2804:(t,e,i)=>{t.exports=i.p+"7209b5f6a71a7ac0bc6e.svg"},8912:(t,e,i)=>{t.exports=i.p+"dfb7aa0dfca946cfcaec.svg"},8612:(t,e,i)=>{t.exports=i.p+"0e22c031e287f7a3f61c.svg"},8851:(t,e,i)=>{t.exports=i.p+"61c862d4e93b89c08591.svg"},9014:(t,e,i)=>{t.exports=i.p+"56b97cabb86f7972e5b9.svg"},3452:(t,e,i)=>{t.exports=i.p+"90f950cd12e7aa73b3d8.svg"},7703:(t,e,i)=>{t.exports=i.p+"dd93d2741761f6c04f53.svg"},5594:(t,e,i)=>{t.exports=i.p+"951e634e652fd1359771.svg"},1958:(t,e,i)=>{t.exports=i.p+"4fb7c021acfa8839ba29.svg"},590:(t,e,i)=>{t.exports=i.p+"c6deb376186155d44e94.svg"},1422:(t,e,i)=>{t.exports=i.p+"d6f14ea455742d118a69.svg"},7848:(t,e,i)=>{t.exports=i.p+"4d290f547c1900d8d239.svg"},1910:(t,e,i)=>{t.exports=i.p+"d20ad74f8ee3e036c8a9.svg"},6048:(t,e,i)=>{t.exports=i.p+"1d44b0d48dc062a43e5c.svg"},8092:(t,e,i)=>{t.exports=i.p+"4e70360f3902bb444a5b.svg"},7943:(t,e,i)=>{t.exports=i.p+"6f398bef6ff1e4659e23.svg"},3446:(t,e,i)=>{t.exports=i.p+"d9073d0940b4044b1cc6.svg"},2343:(t,e,i)=>{t.exports=i.p+"9da9c915654156d14db2.svg"},2268:(t,e,i)=>{t.exports=i.p+"c417bfb0d0b8a4692290.svg"},9208:(t,e,i)=>{t.exports=i.p+"8439c26aa5d3ad7b7e13.svg"},8533:(t,e,i)=>{t.exports=i.p+"57403d605e47b1ef777f.svg"},7151:(t,e,i)=>{t.exports=i.p+"9b476bf2b55a23fa6106.svg"},4938:(t,e,i)=>{t.exports=i.p+"5770a9811b26ef2395bd.svg"},2790:(t,e,i)=>{t.exports=i.p+"80742531c82e1a2fd41d.svg"},822:(t,e,i)=>{t.exports=i.p+"ca57bcd4bf2d51752d5f.svg"},5296:(t,e,i)=>{t.exports=i.p+"1c5c4ee53da79b4f3d7a.svg"},134:(t,e,i)=>{t.exports=i.p+"51b51cca0b6b1f3a7206.svg"},6507:(t,e,i)=>{t.exports=i.p+"442399228fd54713a676.svg"},9065:(t,e,i)=>{t.exports=i.p+"e097129c5ee95a6e86df.svg"},5560:(t,e,i)=>{t.exports=i.p+"9bb124ae9d4cf5fe1378.svg"},9856:(t,e,i)=>{t.exports=i.p+"d3f4d394a81d8a93f15d.svg"},3317:(t,e,i)=>{t.exports=i.p+"be72ca9ded55bb8cb829.svg"},6001:(t,e,i)=>{t.exports=i.p+"4b56431736751ce3f97c.svg"},8282:(t,e,i)=>{t.exports=i.p+"7d826487d89395a11567.svg"},4659:(t,e,i)=>{t.exports=i.p+"b6ac39b4c8987639ec9d.svg"},5518:(t,e,i)=>{t.exports=i.p+"0538c89c0490a67c813c.svg"},2049:(t,e,i)=>{t.exports=i.p+"7340b6568ca80f67eaf2.svg"},9322:(t,e,i)=>{t.exports=i.p+"02e56cdeb6097302ea14.svg"},8587:(t,e,i)=>{t.exports=i.p+"c097ab66c582e9d6fd78.svg"},378:(t,e,i)=>{t.exports=i.p+"5c19564c5b11623741bd.svg"},2496:(t,e,i)=>{t.exports=i.p+"ffb2c91891a03d0cef1b.svg"},8133:(t,e,i)=>{t.exports=i.p+"c5935776698662c6d162.svg"},1793:(t,e,i)=>{t.exports=i.p+"5877456a4768106fc590.svg"},2473:(t,e,i)=>{t.exports=i.p+"372a9293781c2e3e9ab6.svg"},1550:(t,e,i)=>{t.exports=i.p+"c346e04dee848d481274.svg"},8084:(t,e,i)=>{t.exports=i.p+"25c4db965c11a6942a70.svg"},6679:(t,e,i)=>{t.exports=i.p+"d33a32cada0e1d576519.svg"},8749:(t,e,i)=>{t.exports=i.p+"79c0ac54002c7a2737f8.svg"},3148:(t,e,i)=>{t.exports=i.p+"3416eddaf730529b2a9c.svg"},5:(t,e,i)=>{t.exports=i.p+"f00689879f1d7540600f.svg"},4863:(t,e,i)=>{t.exports=i.p+"5224ddc2d3a7642d4d4c.svg"},1467:(t,e,i)=>{t.exports=i.p+"dbf298b1d77cb8a4bac0.svg"},6949:(t,e,i)=>{t.exports=i.p+"19395b05a6c10cc3756f.svg"},662:(t,e,i)=>{t.exports=i.p+"66a8dec8e3ffd26d6922.svg"},5587:(t,e,i)=>{t.exports=i.p+"eeb55fba05b74b284ad9.svg"},3464:(t,e,i)=>{t.exports=i.p+"28f9b323c50dd61fcfd9.svg"},2686:(t,e,i)=>{t.exports=i.p+"e3d5e503b506535c9005.svg"},8200:(t,e,i)=>{t.exports=i.p+"8cb85a2a85c7f0cb99db.svg"},3271:(t,e,i)=>{t.exports=i.p+"fbd0855c9369b58adfce.svg"},8817:(t,e,i)=>{t.exports=i.p+"1bfc1d12c025d53d16b9.svg"},4112:(t,e,i)=>{t.exports=i.p+"c1a8f3d33111f3194d7f.svg"},8902:(t,e,i)=>{t.exports=i.p+"06e008b210b440c973db.svg"},2182:(t,e,i)=>{t.exports=i.p+"6077f3d1f1812a03493b.svg"},625:(t,e,i)=>{t.exports=i.p+"21cca350e5d5e6550d4d.svg"},9292:(t,e,i)=>{t.exports=i.p+"89c910647ebd5cd9f26d.svg"},2957:(t,e,i)=>{t.exports=i.p+"973f97b9180740f4b0dc.svg"},3851:(t,e,i)=>{t.exports=i.p+"2009070e651a249282da.svg"},6508:(t,e,i)=>{t.exports=i.p+"fab8ed37d2f1998742e1.svg"},6218:t=>{t.exports=JSON.parse('{"type":"Feature","geometry":{"type":"Point","coordinates":[17.632,59.8471,31]},"properties":{"meta":{"updated_at":"2022-03-03T14:18:14Z","units":{"air_pressure_at_sea_level":"hPa","air_temperature":"celsius","air_temperature_max":"celsius","air_temperature_min":"celsius","air_temperature_percentile_10":"celsius","air_temperature_percentile_90":"celsius","cloud_area_fraction":"%","cloud_area_fraction_high":"%","cloud_area_fraction_low":"%","cloud_area_fraction_medium":"%","dew_point_temperature":"celsius","fog_area_fraction":"%","precipitation_amount":"mm","precipitation_amount_max":"mm","precipitation_amount_min":"mm","probability_of_precipitation":"%","probability_of_thunder":"%","relative_humidity":"%","ultraviolet_index_clear_sky":"1","wind_from_direction":"degrees","wind_speed":"m/s","wind_speed_of_gust":"m/s","wind_speed_percentile_10":"m/s","wind_speed_percentile_90":"m/s"}},"timeseries":[{"time":"2022-03-03T14:00:00Z","data":{"instant":{"details":{"air_pressure_at_sea_level":1024.5,"air_temperature":3.7,"air_temperature_percentile_10":3,"air_temperature_percentile_90":4.5,"cloud_area_fraction":20,"cloud_area_fraction_high":0,"cloud_area_fraction_low":20.1,"cloud_area_fraction_medium":0,"dew_point_temperature":-1.9,"fog_area_fraction":0,"relative_humidity":68,"ultraviolet_index_clear_sky":0.4,"wind_from_direction":1.5,"wind_speed":4.8,"wind_speed_of_gust":9.1,"wind_speed_percentile_10":4.6,"wind_speed_percentile_90":5.5}},"next_12_hours":{"summary":{"symbol_code":"clearsky_night","symbol_confidence":"certain"},"details":{"probability_of_precipitation":0}},"next_1_hours":{"summary":{"symbol_code":"fair_day"},"details":{"precipitation_amount":4,"precipitation_amount_max":0,"precipitation_amount_min":0,"probability_of_precipitation":0,"probability_of_thunder":0}},"next_6_hours":{"summary":{"symbol_code":"clearsky_night"},"details":{"air_temperature_max":3.2,"air_temperature_min":-0.5,"precipitation_amount":0,"precipitation_amount_max":0,"precipitation_amount_min":0,"probability_of_precipitation":0}}}},{"time":"2022-03-03T15:00:00Z","data":{"instant":{"details":{"air_pressure_at_sea_level":1024.4,"air_temperature":3.2,"air_temperature_percentile_10":2.4,"air_temperature_percentile_90":4,"cloud_area_fraction":0.3,"cloud_area_fraction_high":0,"cloud_area_fraction_low":0.3,"cloud_area_fraction_medium":0,"dew_point_temperature":-2.1,"fog_area_fraction":0,"relative_humidity":69.5,"ultraviolet_index_clear_sky":0.2,"wind_from_direction":357.4,"wind_speed":5.1,"wind_speed_of_gust":9.2,"wind_speed_percentile_10":4,"wind_speed_percentile_90":5.2}},"next_12_hours":{"summary":{"symbol_code":"clearsky_night","symbol_confidence":"certain"},"details":{"probability_of_precipitation":0}},"next_1_hours":{"summary":{"symbol_code":"clearsky_day"},"details":{"precipitation_amount":1,"precipitation_amount_max":0,"precipitation_amount_min":0,"probability_of_precipitation":0,"probability_of_thunder":0}},"next_6_hours":{"summary":{"symbol_code":"clearsky_night"},"details":{"air_temperature_max":2.3,"air_temperature_min":-0.8,"precipitation_amount":0,"precipitation_amount_max":0,"precipitation_amount_min":0,"probability_of_precipitation":0}}}},{"time":"2022-03-03T16:00:00Z","data":{"instant":{"details":{"air_pressure_at_sea_level":1024.5,"air_temperature":2.3,"air_temperature_percentile_10":1.4,"air_temperature_percentile_90":3.1,"cloud_area_fraction":0,"cloud_area_fraction_high":0,"cloud_area_fraction_low":0,"cloud_area_fraction_medium":0,"dew_point_temperature":-1.9,"fog_area_fraction":0,"relative_humidity":74.9,"ultraviolet_index_clear_sky":0,"wind_from_direction":359.3,"wind_speed":3.8,"wind_speed_of_gust":9.1,"wind_speed_percentile_10":3.1,"wind_speed_percentile_90":5}},"next_12_hours":{"summary":{"symbol_code":"clearsky_night","symbol_confidence":"certain"},"details":{"probability_of_precipitation":0}},"next_1_hours":{"summary":{"symbol_code":"clearsky_night"},"details":{"precipitation_amount":2,"precipitation_amount_max":0,"precipitation_amount_min":0,"probability_of_precipitation":0,"probability_of_thunder":0}},"next_6_hours":{"summary":{"symbol_code":"clearsky_night"},"details":{"air_temperature_max":1.3,"air_temperature_min":-1.1,"precipitation_amount":0,"precipitation_amount_max":0,"precipitation_amount_min":0,"probability_of_precipitation":0}}}},{"time":"2022-03-03T17:00:00Z","data":{"instant":{"details":{"air_pressure_at_sea_level":1024.9,"air_temperature":1.3,"air_temperature_percentile_10":0.4,"air_temperature_percentile_90":2,"cloud_area_fraction":0,"cloud_area_fraction_high":0,"cloud_area_fraction_low":0,"cloud_area_fraction_medium":0,"dew_point_temperature":-2.1,"fog_area_fraction":0,"relative_humidity":79.9,"ultraviolet_index_clear_sky":0,"wind_from_direction":354.9,"wind_speed":2.5,"wind_speed_of_gust":6.5,"wind_speed_percentile_10":2.1,"wind_speed_percentile_90":4.3}},"next_12_hours":{"summary":{"symbol_code":"clearsky_night","symbol_confidence":"certain"},"details":{"probability_of_precipitation":0}},"next_1_hours":{"summary":{"symbol_code":"clearsky_night"},"details":{"precipitation_amount":0,"precipitation_amount_max":0,"precipitation_amount_min":0,"probability_of_precipitation":0,"probability_of_thunder":0}},"next_6_hours":{"summary":{"symbol_code":"clearsky_night"},"details":{"air_temperature_max":0.3,"air_temperature_min":-1.3,"precipitation_amount":0,"precipitation_amount_max":0,"precipitation_amount_min":0,"probability_of_precipitation":0}}}},{"time":"2022-03-03T18:00:00Z","data":{"instant":{"details":{"air_pressure_at_sea_level":1025.3,"air_temperature":0.3,"air_temperature_percentile_10":-0.4,"air_temperature_percentile_90":1.1,"cloud_area_fraction":0.1,"cloud_area_fraction_high":0,"cloud_area_fraction_low":0,"cloud_area_fraction_medium":0,"dew_point_temperature":-2.2,"fog_area_fraction":0,"relative_humidity":85.1,"ultraviolet_index_clear_sky":0,"wind_from_direction":351.5,"wind_speed":2.6,"wind_speed_of_gust":4.2,"wind_speed_percentile_10":2.1,"wind_speed_percentile_90":3.8}},"next_12_hours":{"summary":{"symbol_code":"clearsky_night","symbol_confidence":"certain"},"details":{"probability_of_precipitation":0}},"next_1_hours":{"summary":{"symbol_code":"clearsky_night"},"details":{"precipitation_amount":0,"precipitation_amount_max":0,"precipitation_amount_min":0,"probability_of_precipitation":0,"probability_of_thunder":0}},"next_6_hours":{"summary":{"symbol_code":"clearsky_night"},"details":{"air_temperature_max":-0.2,"air_temperature_min":-1.6,"precipitation_amount":0,"precipitation_amount_max":0,"precipitation_amount_min":0,"probability_of_precipitation":0}}}},{"time":"2022-03-03T19:00:00Z","data":{"instant":{"details":{"air_pressure_at_sea_level":1025.6,"air_temperature":-0.2,"air_temperature_percentile_10":-1,"air_temperature_percentile_90":0.5,"cloud_area_fraction":0,"cloud_area_fraction_high":0,"cloud_area_fraction_low":0,"cloud_area_fraction_medium":0,"dew_point_temperature":-2.3,"fog_area_fraction":0,"relative_humidity":87.4,"ultraviolet_index_clear_sky":0,"wind_from_direction":354.2,"wind_speed":3,"wind_speed_of_gust":5.1,"wind_speed_percentile_10":2.2,"wind_speed_percentile_90":3.6}},"next_12_hours":{"summary":{"symbol_code":"clearsky_night","symbol_confidence":"certain"},"details":{"probability_of_precipitation":0}},"next_1_hours":{"summary":{"symbol_code":"clearsky_night"},"details":{"precipitation_amount":0,"precipitation_amount_max":0,"precipitation_amount_min":0,"probability_of_precipitation":0,"probability_of_thunder":0}},"next_6_hours":{"summary":{"symbol_code":"clearsky_night"},"details":{"air_temperature_max":-0.5,"air_temperature_min":-2,"precipitation_amount":0,"precipitation_amount_max":0,"precipitation_amount_min":0,"probability_of_precipitation":0}}}},{"time":"2022-03-03T20:00:00Z","data":{"instant":{"details":{"air_pressure_at_sea_level":1025.9,"air_temperature":-0.5,"air_temperature_percentile_10":-1.4,"air_temperature_percentile_90":0.1,"cloud_area_fraction":0,"cloud_area_fraction_high":0,"cloud_area_fraction_low":0.1,"cloud_area_fraction_medium":0,"dew_point_temperature":-2.1,"fog_area_fraction":0,"relative_humidity":90.6,"ultraviolet_index_clear_sky":0,"wind_from_direction":2.4,"wind_speed":3.1,"wind_speed_of_gust":5.3,"wind_speed_percentile_10":2.4,"wind_speed_percentile_90":3.4}},"next_12_hours":{"summary":{"symbol_code":"clearsky_night","symbol_confidence":"certain"},"details":{"probability_of_precipitation":0}},"next_1_hours":{"summary":{"symbol_code":"clearsky_night"},"details":{"precipitation_amount":0,"precipitation_amount_max":0,"precipitation_amount_min":0,"probability_of_precipitation":0,"probability_of_thunder":0}},"next_6_hours":{"summary":{"symbol_code":"clearsky_night"},"details":{"air_temperature_max":-0.8,"air_temperature_min":-2.5,"precipitation_amount":0,"precipitation_amount_max":0,"precipitation_amount_min":0,"probability_of_precipitation":0}}}},{"time":"2022-03-03T21:00:00Z","data":{"instant":{"details":{"air_pressure_at_sea_level":1026.2,"air_temperature":-0.8,"air_temperature_percentile_10":-1.7,"air_temperature_percentile_90":-0.2,"cloud_area_fraction":0.1,"cloud_area_fraction_high":0,"cloud_area_fraction_low":0,"cloud_area_fraction_medium":0,"dew_point_temperature":-2.1,"fog_area_fraction":0,"relative_humidity":92.8,"ultraviolet_index_clear_sky":0,"wind_from_direction":351.3,"wind_speed":3.1,"wind_speed_of_gust":5.4,"wind_speed_percentile_10":2.5,"wind_speed_percentile_90":3.2}},"next_12_hours":{"summary":{"symbol_code":"clearsky_day","symbol_confidence":"certain"},"details":{"probability_of_precipitation":0}},"next_1_hours":{"summary":{"symbol_code":"clearsky_night"},"details":{"precipitation_amount":0,"precipitation_amount_max":0,"precipitation_amount_min":0,"probability_of_precipitation":0,"probability_of_thunder":0}},"next_6_hours":{"summary":{"symbol_code":"clearsky_night"},"details":{"air_temperature_max":-1.1,"air_temperature_min":-3.1,"precipitation_amount":0,"precipitation_amount_max":0,"precipitation_amount_min":0,"probability_of_precipitation":0}}}},{"time":"2022-03-03T22:00:00Z","data":{"instant":{"details":{"air_pressure_at_sea_level":1026.7,"air_temperature":-1.1,"air_temperature_percentile_10":-1.9,"air_temperature_percentile_90":-0.4,"cloud_area_fraction":0.1,"cloud_area_fraction_high":0,"cloud_area_fraction_low":0.2,"cloud_area_fraction_medium":0,"dew_point_temperature":-2.1,"fog_area_fraction":0,"relative_humidity":94.2,"ultraviolet_index_clear_sky":0,"wind_from_direction":351.7,"wind_speed":2.9,"wind_speed_of_gust":5.4,"wind_speed_percentile_10":2.6,"wind_speed_percentile_90":3.1}},"next_12_hours":{"summary":{"symbol_code":"clearsky_day","symbol_confidence":"certain"},"details":{"probability_of_precipitation":0}},"next_1_hours":{"summary":{"symbol_code":"clearsky_night"},"details":{"precipitation_amount":0,"precipitation_amount_max":0,"precipitation_amount_min":0,"probability_of_precipitation":0,"probability_of_thunder":0}},"next_6_hours":{"summary":{"symbol_code":"clearsky_night"},"details":{"air_temperature_max":-1.3,"air_temperature_min":-3.8,"precipitation_amount":0,"precipitation_amount_max":0,"precipitation_amount_min":0,"probability_of_precipitation":0}}}},{"time":"2022-03-03T23:00:00Z","data":{"instant":{"details":{"air_pressure_at_sea_level":1026.9,"air_temperature":-1.3,"air_temperature_percentile_10":-2.2,"air_temperature_percentile_90":-0.6,"cloud_area_fraction":0.1,"cloud_area_fraction_high":0,"cloud_area_fraction_low":0.2,"cloud_area_fraction_medium":0,"dew_point_temperature":-2.3,"fog_area_fraction":0,"relative_humidity":94.5,"ultraviolet_index_clear_sky":0,"wind_from_direction":149.8,"wind_speed":2.9,"wind_speed_of_gust":4.9,"wind_speed_percentile_10":2.5,"wind_speed_percentile_90":3.2}},"next_12_hours":{"summary":{"symbol_code":"clearsky_day","symbol_confidence":"certain"},"details":{"probability_of_precipitation":0}},"next_1_hours":{"summary":{"symbol_code":"clearsky_night"},"details":{"precipitation_amount":0,"precipitation_amount_max":0,"precipitation_amount_min":0,"probability_of_precipitation":0,"probability_of_thunder":0}},"next_6_hours":{"summary":{"symbol_code":"clearsky_night"},"details":{"air_temperature_max":-1.6,"air_temperature_min":-4.4,"precipitation_amount":0,"precipitation_amount_max":0,"precipitation_amount_min":0,"probability_of_precipitation":0}}}},{"time":"2022-03-04T00:00:00Z","data":{"instant":{"details":{"air_pressure_at_sea_level":1027.3,"air_temperature":-1.6,"air_temperature_percentile_10":-2.5,"air_temperature_percentile_90":-1,"cloud_area_fraction":0,"cloud_area_fraction_high":0,"cloud_area_fraction_low":0.1,"cloud_area_fraction_medium":0,"dew_point_temperature":-2.6,"fog_area_fraction":0,"relative_humidity":94.6,"ultraviolet_index_clear_sky":0,"wind_from_direction":350.1,"wind_speed":2.6,"wind_speed_of_gust":4.9,"wind_speed_percentile_10":2.3,"wind_speed_percentile_90":2.8}},"next_12_hours":{"summary":{"symbol_code":"clearsky_day","symbol_confidence":"certain"},"details":{"probability_of_precipitation":0}},"next_1_hours":{"summary":{"symbol_code":"clearsky_night"},"details":{"precipitation_amount":0,"precipitation_amount_max":0,"precipitation_amount_min":0,"probability_of_precipitation":0,"probability_of_thunder":0}},"next_6_hours":{"summary":{"symbol_code":"clearsky_night"},"details":{"air_temperature_max":-2,"air_temperature_min":-4.6,"precipitation_amount":0,"precipitation_amount_max":0,"precipitation_amount_min":0,"probability_of_precipitation":0}}}},{"time":"2022-03-04T01:00:00Z","data":{"instant":{"details":{"air_pressure_at_sea_level":1027.7,"air_temperature":-2,"air_temperature_percentile_10":-3,"air_temperature_percentile_90":-1.4,"cloud_area_fraction":0.1,"cloud_area_fraction_high":0,"cloud_area_fraction_low":0.1,"cloud_area_fraction_medium":0,"dew_point_temperature":-3,"fog_area_fraction":0,"relative_humidity":95,"ultraviolet_index_clear_sky":0,"wind_from_direction":340.2,"wind_speed":2.6,"wind_speed_of_gust":4.4,"wind_speed_percentile_10":2,"wind_speed_percentile_90":2.6}},"next_12_hours":{"summary":{"symbol_code":"clearsky_day","symbol_confidence":"certain"},"details":{"probability_of_precipitation":0}},"next_1_hours":{"summary":{"symbol_code":"clearsky_night"},"details":{"precipitation_amount":0,"precipitation_amount_max":0,"precipitation_amount_min":0,"probability_of_precipitation":0,"probability_of_thunder":0}},"next_6_hours":{"summary":{"symbol_code":"clearsky_night"},"details":{"air_temperature_max":-2.5,"air_temperature_min":-4.6,"precipitation_amount":0,"precipitation_amount_max":0,"precipitation_amount_min":0,"probability_of_precipitation":0}}}},{"time":"2022-03-04T02:00:00Z","data":{"instant":{"details":{"air_pressure_at_sea_level":1028,"air_temperature":-2.5,"air_temperature_percentile_10":-3.6,"air_temperature_percentile_90":-1.9,"cloud_area_fraction":0,"cloud_area_fraction_high":0,"cloud_area_fraction_low":0.1,"cloud_area_fraction_medium":0,"dew_point_temperature":-3.6,"fog_area_fraction":0,"relative_humidity":94.6,"ultraviolet_index_clear_sky":0,"wind_from_direction":333.1,"wind_speed":2.3,"wind_speed_of_gust":4.3,"wind_speed_percentile_10":1.8,"wind_speed_percentile_90":2.5}},"next_12_hours":{"summary":{"symbol_code":"clearsky_day","symbol_confidence":"certain"},"details":{"probability_of_precipitation":0}},"next_1_hours":{"summary":{"symbol_code":"clearsky_night"},"details":{"precipitation_amount":0,"precipitation_amount_max":0,"precipitation_amount_min":0,"probability_of_precipitation":0,"probability_of_thunder":0}},"next_6_hours":{"summary":{"symbol_code":"clearsky_night"},"details":{"air_temperature_max":-1.3,"air_temperature_min":-4.6,"precipitation_amount":0,"precipitation_amount_max":0,"precipitation_amount_min":0,"probability_of_precipitation":0}}}},{"time":"2022-03-04T03:00:00Z","data":{"instant":{"details":{"air_pressure_at_sea_level":1028,"air_temperature":-3.1,"air_temperature_percentile_10":-4.3,"air_temperature_percentile_90":-2.4,"cloud_area_fraction":0,"cloud_area_fraction_high":0,"cloud_area_fraction_low":0,"cloud_area_fraction_medium":0,"dew_point_temperature":-4.3,"fog_area_fraction":0,"relative_humidity":94,"ultraviolet_index_clear_sky":0,"wind_from_direction":329.7,"wind_speed":2.1,"wind_speed_of_gust":3.8,"wind_speed_percentile_10":1.8,"wind_speed_percentile_90":2.3}},"next_12_hours":{"summary":{"symbol_code":"clearsky_day","symbol_confidence":"certain"},"details":{"probability_of_precipitation":0}},"next_1_hours":{"summary":{"symbol_code":"clearsky_night"},"details":{"precipitation_amount":0,"precipitation_amount_max":0,"precipitation_amount_min":0,"probability_of_precipitation":0,"probability_of_thunder":0}},"next_6_hours":{"summary":{"symbol_code":"clearsky_day"},"details":{"air_temperature_max":1.1,"air_temperature_min":-4.6,"precipitation_amount":0,"precipitation_amount_max":0,"precipitation_amount_min":0,"probability_of_precipitation":0}}}},{"time":"2022-03-04T04:00:00Z","data":{"instant":{"details":{"air_pressure_at_sea_level":1028.2,"air_temperature":-3.8,"air_temperature_percentile_10":-4.9,"air_temperature_percentile_90":-3,"cloud_area_fraction":0,"cloud_area_fraction_high":0,"cloud_area_fraction_low":0,"cloud_area_fraction_medium":0,"dew_point_temperature":-5.1,"fog_area_fraction":0,"relative_humidity":93.3,"ultraviolet_index_clear_sky":0,"wind_from_direction":326.8,"wind_speed":1.7,"wind_speed_of_gust":3.2,"wind_speed_percentile_10":1.4,"wind_speed_percentile_90":2.1}},"next_12_hours":{"summary":{"symbol_code":"clearsky_day","symbol_confidence":"certain"},"details":{"probability_of_precipitation":0}},"next_1_hours":{"summary":{"symbol_code":"clearsky_night"},"details":{"precipitation_amount":0,"precipitation_amount_max":0,"precipitation_amount_min":0,"probability_of_precipitation":0,"probability_of_thunder":0}},"next_6_hours":{"summary":{"symbol_code":"clearsky_day"},"details":{"air_temperature_max":2.7,"air_temperature_min":-4.6,"precipitation_amount":0,"precipitation_amount_max":0,"precipitation_amount_min":0,"probability_of_precipitation":0}}}},{"time":"2022-03-04T05:00:00Z","data":{"instant":{"details":{"air_pressure_at_sea_level":1028.5,"air_temperature":-4.4,"air_temperature_percentile_10":-5.5,"air_temperature_percentile_90":-3.6,"cloud_area_fraction":0,"cloud_area_fraction_high":0,"cloud_area_fraction_low":0,"cloud_area_fraction_medium":0,"dew_point_temperature":-5.8,"fog_area_fraction":0,"relative_humidity":93.1,"ultraviolet_index_clear_sky":0,"wind_from_direction":312.7,"wind_speed":1.3,"wind_speed_of_gust":2.6,"wind_speed_percentile_10":1,"wind_speed_percentile_90":1.6}},"next_12_hours":{"summary":{"symbol_code":"clearsky_day","symbol_confidence":"certain"},"details":{"probability_of_precipitation":0}},"next_1_hours":{"summary":{"symbol_code":"clearsky_night"},"details":{"precipitation_amount":0,"precipitation_amount_max":0,"precipitation_amount_min":0,"probability_of_precipitation":0,"probability_of_thunder":0}},"next_6_hours":{"summary":{"symbol_code":"clearsky_day"},"details":{"air_temperature_max":3.5,"air_temperature_min":-4.6,"precipitation_amount":0,"precipitation_amount_max":0,"precipitation_amount_min":0,"probability_of_precipitation":0}}}},{"time":"2022-03-04T06:00:00Z","data":{"instant":{"details":{"air_pressure_at_sea_level":1028.7,"air_temperature":-4.6,"air_temperature_percentile_10":-5.7,"air_temperature_percentile_90":-3.7,"cloud_area_fraction":0,"cloud_area_fraction_high":0,"cloud_area_fraction_low":0,"cloud_area_fraction_medium":0,"dew_point_temperature":-6.4,"fog_area_fraction":0,"relative_humidity":91.3,"ultraviolet_index_clear_sky":0,"wind_from_direction":293.5,"wind_speed":1.1,"wind_speed_of_gust":2,"wind_speed_percentile_10":1,"wind_speed_percentile_90":1.3}},"next_12_hours":{"summary":{"symbol_code":"clearsky_day","symbol_confidence":"certain"},"details":{"probability_of_precipitation":0}},"next_1_hours":{"summary":{"symbol_code":"clearsky_day"},"details":{"precipitation_amount":0,"precipitation_amount_max":0,"precipitation_amount_min":0,"probability_of_precipitation":0,"probability_of_thunder":0}},"next_6_hours":{"summary":{"symbol_code":"clearsky_day"},"details":{"air_temperature_max":3.9,"air_temperature_min":-3.8,"precipitation_amount":0,"precipitation_amount_max":0,"precipitation_amount_min":0,"probability_of_precipitation":0}}}},{"time":"2022-03-04T07:00:00Z","data":{"instant":{"details":{"air_pressure_at_sea_level":1029.1,"air_temperature":-3.8,"air_temperature_percentile_10":-4.8,"air_temperature_percentile_90":-2.9,"cloud_area_fraction":0,"cloud_area_fraction_high":0,"cloud_area_fraction_low":0,"cloud_area_fraction_medium":0,"dew_point_temperature":-6,"fog_area_fraction":0,"relative_humidity":87.9,"ultraviolet_index_clear_sky":0.2,"wind_from_direction":303.7,"wind_speed":1,"wind_speed_of_gust":1.9,"wind_speed_percentile_10":1,"wind_speed_percentile_90":1.5}},"next_12_hours":{"summary":{"symbol_code":"clearsky_day","symbol_confidence":"certain"},"details":{"probability_of_precipitation":0}},"next_1_hours":{"summary":{"symbol_code":"clearsky_day"},"details":{"precipitation_amount":0,"precipitation_amount_max":0,"precipitation_amount_min":0,"probability_of_precipitation":0,"probability_of_thunder":0}},"next_6_hours":{"summary":{"symbol_code":"clearsky_day"},"details":{"air_temperature_max":4.3,"air_temperature_min":-1.3,"precipitation_amount":0,"precipitation_amount_max":0,"precipitation_amount_min":0,"probability_of_precipitation":0}}}},{"time":"2022-03-04T08:00:00Z","data":{"instant":{"details":{"air_pressure_at_sea_level":1029.4,"air_temperature":-1.3,"air_temperature_percentile_10":-2.4,"air_temperature_percentile_90":-0.7,"cloud_area_fraction":0,"cloud_area_fraction_high":0,"cloud_area_fraction_low":0,"cloud_area_fraction_medium":0,"dew_point_temperature":-4.5,"fog_area_fraction":0,"relative_humidity":79.6,"ultraviolet_index_clear_sky":0.5,"wind_from_direction":335.6,"wind_speed":1.3,"wind_speed_of_gust":2.5,"wind_speed_percentile_10":1,"wind_speed_percentile_90":1.9}},"next_12_hours":{"summary":{"symbol_code":"clearsky_day","symbol_confidence":"certain"},"details":{"probability_of_precipitation":0}},"next_1_hours":{"summary":{"symbol_code":"clearsky_day"},"details":{"precipitation_amount":0,"precipitation_amount_max":0,"precipitation_amount_min":0,"probability_of_precipitation":0,"probability_of_thunder":0}},"next_6_hours":{"summary":{"symbol_code":"clearsky_day"},"details":{"air_temperature_max":4.4,"air_temperature_min":1.1,"precipitation_amount":0,"precipitation_amount_max":0,"precipitation_amount_min":0,"probability_of_precipitation":0}}}},{"time":"2022-03-04T09:00:00Z","data":{"instant":{"details":{"air_pressure_at_sea_level":1029.6,"air_temperature":1.1,"air_temperature_percentile_10":-0.4,"air_temperature_percentile_90":1.7,"cloud_area_fraction":0,"cloud_area_fraction_high":0,"cloud_area_fraction_low":0,"cloud_area_fraction_medium":0,"dew_point_temperature":-3.9,"fog_area_fraction":0,"relative_humidity":69.5,"ultraviolet_index_clear_sky":0.8,"wind_from_direction":344.5,"wind_speed":1.2,"wind_speed_of_gust":2.9,"wind_speed_percentile_10":0.7,"wind_speed_percentile_90":1.9}},"next_12_hours":{"summary":{"symbol_code":"clearsky_day","symbol_confidence":"certain"},"details":{"probability_of_precipitation":0}},"next_1_hours":{"summary":{"symbol_code":"clearsky_day"},"details":{"precipitation_amount":0,"precipitation_amount_max":0,"precipitation_amount_min":0,"probability_of_precipitation":0,"probability_of_thunder":0}},"next_6_hours":{"summary":{"symbol_code":"clearsky_day"},"details":{"air_temperature_max":4.4,"air_temperature_min":2.7,"precipitation_amount":0,"precipitation_amount_max":0,"precipitation_amount_min":0,"probability_of_precipitation":0}}}},{"time":"2022-03-04T10:00:00Z","data":{"instant":{"details":{"air_pressure_at_sea_level":1029.8,"air_temperature":2.7,"air_temperature_percentile_10":1.2,"air_temperature_percentile_90":3.3,"cloud_area_fraction":0.1,"cloud_area_fraction_high":0,"cloud_area_fraction_low":0,"cloud_area_fraction_medium":0,"dew_point_temperature":-4.1,"fog_area_fraction":0,"relative_humidity":60.1,"ultraviolet_index_clear_sky":1,"wind_from_direction":332.2,"wind_speed":1.1,"wind_speed_of_gust":3,"wind_speed_percentile_10":0.8,"wind_speed_percentile_90":1.7}},"next_12_hours":{"summary":{"symbol_code":"clearsky_day","symbol_confidence":"certain"},"details":{"probability_of_precipitation":0}},"next_1_hours":{"summary":{"symbol_code":"clearsky_day"},"details":{"precipitation_amount":0,"precipitation_amount_max":0,"precipitation_amount_min":0,"probability_of_precipitation":0,"probability_of_thunder":0}},"next_6_hours":{"summary":{"symbol_code":"clearsky_day"},"details":{"air_temperature_max":4.4,"air_temperature_min":2.9,"precipitation_amount":0,"precipitation_amount_max":0,"precipitation_amount_min":0,"probability_of_precipitation":0}}}},{"time":"2022-03-04T11:00:00Z","data":{"instant":{"details":{"air_pressure_at_sea_level":1029.8,"air_temperature":3.5,"air_temperature_percentile_10":2.1,"air_temperature_percentile_90":4.2,"cloud_area_fraction":0,"cloud_area_fraction_high":0,"cloud_area_fraction_low":0,"cloud_area_fraction_medium":0,"dew_point_temperature":-6.1,"fog_area_fraction":0,"relative_humidity":50.5,"ultraviolet_index_clear_sky":1.1,"wind_from_direction":312.3,"wind_speed":1.1,"wind_speed_of_gust":3.4,"wind_speed_percentile_10":0.9,"wind_speed_percentile_90":1.7}},"next_12_hours":{"summary":{"symbol_code":"clearsky_day","symbol_confidence":"certain"},"details":{"probability_of_precipitation":0}},"next_1_hours":{"summary":{"symbol_code":"clearsky_day"},"details":{"precipitation_amount":0,"precipitation_amount_max":0,"precipitation_amount_min":0,"probability_of_precipitation":0,"probability_of_thunder":0}},"next_6_hours":{"summary":{"symbol_code":"clearsky_day"},"details":{"air_temperature_max":4.4,"air_temperature_min":1.3,"precipitation_amount":0,"precipitation_amount_max":0,"precipitation_amount_min":0,"probability_of_precipitation":0}}}},{"time":"2022-03-04T12:00:00Z","data":{"instant":{"details":{"air_pressure_at_sea_level":1029.5,"air_temperature":3.9,"air_temperature_percentile_10":2.6,"air_temperature_percentile_90":4.9,"cloud_area_fraction":0.1,"cloud_area_fraction_high":0,"cloud_area_fraction_low":0,"cloud_area_fraction_medium":0,"dew_point_temperature":-6.7,"fog_area_fraction":0,"relative_humidity":47.5,"ultraviolet_index_clear_sky":1,"wind_from_direction":295.1,"wind_speed":1,"wind_speed_of_gust":3.4,"wind_speed_percentile_10":0.9,"wind_speed_percentile_90":1.9}},"next_12_hours":{"summary":{"symbol_code":"clearsky_day","symbol_confidence":"certain"},"details":{"probability_of_precipitation":0}},"next_1_hours":{"summary":{"symbol_code":"clearsky_day"},"details":{"precipitation_amount":0,"precipitation_amount_max":0,"precipitation_amount_min":0,"probability_of_precipitation":0,"probability_of_thunder":0}},"next_6_hours":{"summary":{"symbol_code":"clearsky_day"},"details":{"air_temperature_max":4.4,"air_temperature_min":0.4,"precipitation_amount":0,"precipitation_amount_max":0,"precipitation_amount_min":0,"probability_of_precipitation":0}}}},{"time":"2022-03-04T13:00:00Z","data":{"instant":{"details":{"air_pressure_at_sea_level":1029.3,"air_temperature":4.3,"air_temperature_percentile_10":3.1,"air_temperature_percentile_90":5.5,"cloud_area_fraction":0,"cloud_area_fraction_high":0,"cloud_area_fraction_low":0,"cloud_area_fraction_medium":0,"dew_point_temperature":-6.8,"fog_area_fraction":0,"relative_humidity":46.6,"ultraviolet_index_clear_sky":0.7,"wind_from_direction":251.2,"wind_speed":1,"wind_speed_of_gust":3.4,"wind_speed_percentile_10":1,"wind_speed_percentile_90":1.8}},"next_12_hours":{"summary":{"symbol_code":"clearsky_day","symbol_confidence":"certain"},"details":{"probability_of_precipitation":0}},"next_1_hours":{"summary":{"symbol_code":"clearsky_day"},"details":{"precipitation_amount":0,"precipitation_amount_max":0,"precipitation_amount_min":0,"probability_of_precipitation":0,"probability_of_thunder":0}},"next_6_hours":{"summary":{"symbol_code":"clearsky_day"},"details":{"air_temperature_max":4.4,"air_temperature_min":-0.3,"precipitation_amount":0,"precipitation_amount_max":0,"precipitation_amount_min":0,"probability_of_precipitation":0}}}},{"time":"2022-03-04T14:00:00Z","data":{"instant":{"details":{"air_pressure_at_sea_level":1029.1,"air_temperature":4.4,"air_temperature_percentile_10":3.2,"air_temperature_percentile_90":5.6,"cloud_area_fraction":0,"cloud_area_fraction_high":0,"cloud_area_fraction_low":0,"cloud_area_fraction_medium":0,"dew_point_temperature":-6.3,"fog_area_fraction":0,"relative_humidity":49.7,"ultraviolet_index_clear_sky":0.4,"wind_from_direction":232.8,"wind_speed":2.1,"wind_speed_of_gust":4.7,"wind_speed_percentile_10":0.8,"wind_speed_percentile_90":2.2}},"next_12_hours":{"summary":{"symbol_code":"clearsky_night","symbol_confidence":"certain"},"details":{"probability_of_precipitation":0}},"next_1_hours":{"summary":{"symbol_code":"clearsky_day"},"details":{"precipitation_amount":0,"precipitation_amount_max":0,"precipitation_amount_min":0,"probability_of_precipitation":0,"probability_of_thunder":0}},"next_6_hours":{"summary":{"symbol_code":"clearsky_night"},"details":{"air_temperature_max":4,"air_temperature_min":-0.9,"precipitation_amount":0,"precipitation_amount_max":0,"precipitation_amount_min":0,"probability_of_precipitation":0}}}},{"time":"2022-03-04T15:00:00Z","data":{"instant":{"details":{"air_pressure_at_sea_level":1029,"air_temperature":4,"air_temperature_percentile_10":3,"air_temperature_percentile_90":5.2,"cloud_area_fraction":0.2,"cloud_area_fraction_high":0,"cloud_area_fraction_low":0.1,"cloud_area_fraction_medium":0,"dew_point_temperature":-5.6,"fog_area_fraction":0,"relative_humidity":53.3,"ultraviolet_index_clear_sky":0.2,"wind_from_direction":226,"wind_speed":2.3,"wind_speed_of_gust":4.9,"wind_speed_percentile_10":1.4,"wind_speed_percentile_90":2.5}},"next_12_hours":{"summary":{"symbol_code":"clearsky_night","symbol_confidence":"certain"},"details":{"probability_of_precipitation":0}},"next_1_hours":{"summary":{"symbol_code":"clearsky_day"},"details":{"precipitation_amount":0,"precipitation_amount_max":0,"precipitation_amount_min":0,"probability_of_precipitation":0,"probability_of_thunder":0}},"next_6_hours":{"summary":{"symbol_code":"clearsky_night"},"details":{"air_temperature_max":2.9,"air_temperature_min":-1.2,"precipitation_amount":0,"precipitation_amount_max":0,"precipitation_amount_min":0,"probability_of_precipitation":0}}}},{"time":"2022-03-04T16:00:00Z","data":{"instant":{"details":{"air_pressure_at_sea_level":1028.8,"air_temperature":2.9,"air_temperature_percentile_10":1.8,"air_temperature_percentile_90":3.9,"cloud_area_fraction":0,"cloud_area_fraction_high":0,"cloud_area_fraction_low":0,"cloud_area_fraction_medium":0,"dew_point_temperature":-4.6,"fog_area_fraction":0,"relative_humidity":65.1,"ultraviolet_index_clear_sky":0,"wind_from_direction":227.8,"wind_speed":2.1,"wind_speed_of_gust":4.7,"wind_speed_percentile_10":0.8,"wind_speed_percentile_90":2.2}},"next_12_hours":{"summary":{"symbol_code":"clearsky_night","symbol_confidence":"certain"},"details":{"probability_of_precipitation":0}},"next_1_hours":{"summary":{"symbol_code":"clearsky_night"},"details":{"precipitation_amount":0,"precipitation_amount_max":0,"precipitation_amount_min":0,"probability_of_precipitation":0,"probability_of_thunder":0}},"next_6_hours":{"summary":{"symbol_code":"clearsky_night"},"details":{"air_temperature_max":1.3,"air_temperature_min":-1.6,"precipitation_amount":0,"precipitation_amount_max":0,"precipitation_amount_min":0,"probability_of_precipitation":0}}}},{"time":"2022-03-04T17:00:00Z","data":{"instant":{"details":{"air_pressure_at_sea_level":1028.8,"air_temperature":1.3,"air_temperature_percentile_10":0.3,"air_temperature_percentile_90":2.3,"cloud_area_fraction":0.1,"cloud_area_fraction_high":0.1,"cloud_area_fraction_low":0,"cloud_area_fraction_medium":0,"dew_point_temperature":-4.2,"fog_area_fraction":0,"relative_humidity":74.5,"ultraviolet_index_clear_sky":0,"wind_from_direction":221.5,"wind_speed":2.2,"wind_speed_of_gust":3.5,"wind_speed_percentile_10":1.1,"wind_speed_percentile_90":2.2}},"next_12_hours":{"summary":{"symbol_code":"clearsky_night","symbol_confidence":"certain"},"details":{"probability_of_precipitation":0}},"next_1_hours":{"summary":{"symbol_code":"clearsky_night"},"details":{"precipitation_amount":0,"precipitation_amount_max":0,"precipitation_amount_min":0,"probability_of_precipitation":0,"probability_of_thunder":0}},"next_6_hours":{"summary":{"symbol_code":"clearsky_night"},"details":{"air_temperature_max":0.4,"air_temperature_min":-1.9,"precipitation_amount":0,"precipitation_amount_max":0,"precipitation_amount_min":0,"probability_of_precipitation":0}}}},{"time":"2022-03-04T18:00:00Z","data":{"instant":{"details":{"air_pressure_at_sea_level":1028.7,"air_temperature":0.4,"air_temperature_percentile_10":-0.8,"air_temperature_percentile_90":1.1,"cloud_area_fraction":0,"cloud_area_fraction_high":0,"cloud_area_fraction_low":0,"cloud_area_fraction_medium":0,"dew_point_temperature":-4.2,"fog_area_fraction":0,"relative_humidity":77.8,"ultraviolet_index_clear_sky":0,"wind_from_direction":216.6,"wind_speed":2.2,"wind_speed_of_gust":3.8,"wind_speed_percentile_10":1.4,"wind_speed_percentile_90":2.4}},"next_12_hours":{"summary":{"symbol_code":"clearsky_night","symbol_confidence":"certain"},"details":{"probability_of_precipitation":0}},"next_1_hours":{"summary":{"symbol_code":"clearsky_night"},"details":{"precipitation_amount":0,"precipitation_amount_max":0,"precipitation_amount_min":0,"probability_of_precipitation":0,"probability_of_thunder":0}},"next_6_hours":{"summary":{"symbol_code":"clearsky_night"},"details":{"air_temperature_max":-0.3,"air_temperature_min":-2.2,"precipitation_amount":0,"precipitation_amount_max":0,"precipitation_amount_min":0,"probability_of_precipitation":0}}}},{"time":"2022-03-04T19:00:00Z","data":{"instant":{"details":{"air_pressure_at_sea_level":1028.6,"air_temperature":-0.3,"air_temperature_percentile_10":-1.3,"air_temperature_percentile_90":0.6,"cloud_area_fraction":0.4,"cloud_area_fraction_high":0.3,"cloud_area_fraction_low":0,"cloud_area_fraction_medium":0,"dew_point_temperature":-5.1,"fog_area_fraction":0,"relative_humidity":79.4,"ultraviolet_index_clear_sky":0,"wind_from_direction":212.3,"wind_speed":2,"wind_speed_of_gust":3.6,"wind_speed_percentile_10":1.5,"wind_speed_percentile_90":2.4}},"next_12_hours":{"summary":{"symbol_code":"clearsky_night","symbol_confidence":"certain"},"details":{"probability_of_precipitation":0}},"next_1_hours":{"summary":{"symbol_code":"clearsky_night"},"details":{"precipitation_amount":0,"precipitation_amount_max":0,"precipitation_amount_min":0,"probability_of_precipitation":0,"probability_of_thunder":0}},"next_6_hours":{"summary":{"symbol_code":"clearsky_night"},"details":{"air_temperature_max":-0.9,"air_temperature_min":-2.6,"precipitation_amount":0,"precipitation_amount_max":0,"precipitation_amount_min":0,"probability_of_precipitation":0}}}},{"time":"2022-03-04T20:00:00Z","data":{"instant":{"details":{"air_pressure_at_sea_level":1028.7,"air_temperature":-0.9,"air_temperature_percentile_10":-2,"air_temperature_percentile_90":0.2,"cloud_area_fraction":0,"cloud_area_fraction_high":0,"cloud_area_fraction_low":0,"cloud_area_fraction_medium":0,"dew_point_temperature":-5.5,"fog_area_fraction":0,"relative_humidity":79.4,"ultraviolet_index_clear_sky":0,"wind_from_direction":215.3,"wind_speed":2.2,"wind_speed_of_gust":3.6,"wind_speed_percentile_10":1.4,"wind_speed_percentile_90":2.5}},"next_12_hours":{"summary":{"symbol_code":"clearsky_night","symbol_confidence":"certain"},"details":{"probability_of_precipitation":0}},"next_1_hours":{"summary":{"symbol_code":"clearsky_night"},"details":{"precipitation_amount":0,"precipitation_amount_max":0,"precipitation_amount_min":0,"probability_of_precipitation":0,"probability_of_thunder":0}},"next_6_hours":{"summary":{"symbol_code":"clearsky_night"},"details":{"air_temperature_max":-1.2,"air_temperature_min":-2.9,"precipitation_amount":0,"precipitation_amount_max":0,"precipitation_amount_min":0,"probability_of_precipitation":0}}}},{"time":"2022-03-04T21:00:00Z","data":{"instant":{"details":{"air_pressure_at_sea_level":1028.6,"air_temperature":-1.2,"air_temperature_percentile_10":-2.5,"air_temperature_percentile_90":-0.2,"cloud_area_fraction":0,"cloud_area_fraction_high":0,"cloud_area_fraction_low":0,"cloud_area_fraction_medium":0,"dew_point_temperature":-5.4,"fog_area_fraction":0,"relative_humidity":80.2,"ultraviolet_index_clear_sky":0,"wind_from_direction":218.2,"wind_speed":2.3,"wind_speed_of_gust":3.8,"wind_speed_percentile_10":1.3,"wind_speed_percentile_90":2.4}},"next_12_hours":{"summary":{"symbol_code":"clearsky_day","symbol_confidence":"certain"},"details":{"probability_of_precipitation":0}},"next_1_hours":{"summary":{"symbol_code":"clearsky_night"},"details":{"precipitation_amount":0,"precipitation_amount_max":0,"precipitation_amount_min":0,"probability_of_precipitation":0,"probability_of_thunder":0}},"next_6_hours":{"summary":{"symbol_code":"clearsky_night"},"details":{"air_temperature_max":-1.6,"air_temperature_min":-3.2,"precipitation_amount":0,"precipitation_amount_max":0,"precipitation_amount_min":0,"probability_of_precipitation":0}}}},{"time":"2022-03-04T22:00:00Z","data":{"instant":{"details":{"air_pressure_at_sea_level":1028.5,"air_temperature":-1.6,"air_temperature_percentile_10":-2.7,"air_temperature_percentile_90":-0.6,"cloud_area_fraction":0,"cloud_area_fraction_high":0,"cloud_area_fraction_low":0,"cloud_area_fraction_medium":0,"dew_point_temperature":-5.2,"fog_area_fraction":0,"relative_humidity":83.9,"ultraviolet_index_clear_sky":0,"wind_from_direction":216.9,"wind_speed":2.2,"wind_speed_of_gust":3.7,"wind_speed_percentile_10":1.6,"wind_speed_percentile_90":2.3}},"next_12_hours":{"summary":{"symbol_code":"clearsky_day","symbol_confidence":"certain"},"details":{"probability_of_precipitation":0}},"next_1_hours":{"summary":{"symbol_code":"clearsky_night"},"details":{"precipitation_amount":0,"precipitation_amount_max":0,"precipitation_amount_min":0,"probability_of_precipitation":0,"probability_of_thunder":0}},"next_6_hours":{"summary":{"symbol_code":"clearsky_night"},"details":{"air_temperature_max":-1.9,"air_temperature_min":-3.5,"precipitation_amount":0,"precipitation_amount_max":0,"precipitation_amount_min":0,"probability_of_precipitation":0}}}},{"time":"2022-03-04T23:00:00Z","data":{"instant":{"details":{"air_pressure_at_sea_level":1028.4,"air_temperature":-1.9,"air_temperature_percentile_10":-3,"air_temperature_percentile_90":-0.9,"cloud_area_fraction":0.1,"cloud_area_fraction_high":0,"cloud_area_fraction_low":0,"cloud_area_fraction_medium":0,"dew_point_temperature":-5.2,"fog_area_fraction":0,"relative_humidity":85.8,"ultraviolet_index_clear_sky":0,"wind_from_direction":221.7,"wind_speed":2.3,"wind_speed_of_gust":3.8,"wind_speed_percentile_10":1.8,"wind_speed_percentile_90":2.6}},"next_12_hours":{"summary":{"symbol_code":"clearsky_day","symbol_confidence":"certain"},"details":{"probability_of_precipitation":0}},"next_1_hours":{"summary":{"symbol_code":"clearsky_night"},"details":{"precipitation_amount":0,"precipitation_amount_max":0,"precipitation_amount_min":0,"probability_of_precipitation":0,"probability_of_thunder":0}},"next_6_hours":{"summary":{"symbol_code":"clearsky_night"},"details":{"air_temperature_max":-2.2,"air_temperature_min":-3.7,"precipitation_amount":0,"precipitation_amount_max":0,"precipitation_amount_min":0,"probability_of_precipitation":0}}}},{"time":"2022-03-05T00:00:00Z","data":{"instant":{"details":{"air_pressure_at_sea_level":1028.2,"air_temperature":-2.2,"air_temperature_percentile_10":-3.4,"air_temperature_percentile_90":-1.3,"cloud_area_fraction":0,"cloud_area_fraction_high":0,"cloud_area_fraction_low":0,"cloud_area_fraction_medium":0,"dew_point_temperature":-5.2,"fog_area_fraction":0,"relative_humidity":86.7,"ultraviolet_index_clear_sky":0,"wind_from_direction":220.6,"wind_speed":2.5,"wind_speed_of_gust":4.2,"wind_speed_percentile_10":2.1,"wind_speed_percentile_90":2.7}},"next_12_hours":{"summary":{"symbol_code":"clearsky_day","symbol_confidence":"certain"},"details":{"probability_of_precipitation":0}},"next_1_hours":{"summary":{"symbol_code":"clearsky_night"},"details":{"precipitation_amount":0,"precipitation_amount_max":0,"precipitation_amount_min":0,"probability_of_precipitation":0,"probability_of_thunder":0}},"next_6_hours":{"summary":{"symbol_code":"clearsky_night"},"details":{"air_temperature_max":-2.6,"air_temperature_min":-3.8,"precipitation_amount":0,"precipitation_amount_max":0,"precipitation_amount_min":0,"probability_of_precipitation":0}}}},{"time":"2022-03-05T01:00:00Z","data":{"instant":{"details":{"air_pressure_at_sea_level":1028.1,"air_temperature":-2.6,"air_temperature_percentile_10":-3.6,"air_temperature_percentile_90":-1.5,"cloud_area_fraction":0,"cloud_area_fraction_high":0,"cloud_area_fraction_low":0,"cloud_area_fraction_medium":0,"dew_point_temperature":-5.1,"fog_area_fraction":0,"relative_humidity":88,"ultraviolet_index_clear_sky":0,"wind_from_direction":221.1,"wind_speed":2.6,"wind_speed_of_gust":4.4,"wind_speed_percentile_10":2.2,"wind_speed_percentile_90":3}},"next_12_hours":{"summary":{"symbol_code":"clearsky_day","symbol_confidence":"certain"},"details":{"probability_of_precipitation":0}},"next_1_hours":{"summary":{"symbol_code":"clearsky_night"},"details":{"precipitation_amount":0,"precipitation_amount_max":0,"precipitation_amount_min":0,"probability_of_precipitation":0,"probability_of_thunder":0}},"next_6_hours":{"summary":{"symbol_code":"clearsky_night"},"details":{"air_temperature_max":-2.9,"air_temperature_min":-3.8,"precipitation_amount":0,"precipitation_amount_max":0,"precipitation_amount_min":0,"probability_of_precipitation":0}}}},{"time":"2022-03-05T02:00:00Z","data":{"instant":{"details":{"air_pressure_at_sea_level":1027.9,"air_temperature":-2.9,"air_temperature_percentile_10":-3.8,"air_temperature_percentile_90":-1.8,"cloud_area_fraction":4.5,"cloud_area_fraction_high":4.5,"cloud_area_fraction_low":0,"cloud_area_fraction_medium":0,"dew_point_temperature":-5.3,"fog_area_fraction":0,"relative_humidity":88.3,"ultraviolet_index_clear_sky":0,"wind_from_direction":220,"wind_speed":2.9,"wind_speed_of_gust":4.9,"wind_speed_percentile_10":2.2,"wind_speed_percentile_90":3.1}},"next_12_hours":{"summary":{"symbol_code":"clearsky_day","symbol_confidence":"certain"},"details":{"probability_of_precipitation":0}},"next_1_hours":{"summary":{"symbol_code":"clearsky_night"},"details":{"precipitation_amount":0,"precipitation_amount_max":0,"precipitation_amount_min":0,"probability_of_precipitation":0,"probability_of_thunder":0}},"next_6_hours":{"summary":{"symbol_code":"clearsky_night"},"details":{"air_temperature_max":-1.4,"air_temperature_min":-3.8,"precipitation_amount":0,"precipitation_amount_max":0,"precipitation_amount_min":0,"probability_of_precipitation":0}}}},{"time":"2022-03-05T03:00:00Z","data":{"instant":{"details":{"air_pressure_at_sea_level":1027.7,"air_temperature":-3.2,"air_temperature_percentile_10":-4.2,"air_temperature_percentile_90":-2.1,"cloud_area_fraction":21,"cloud_area_fraction_high":21,"cloud_area_fraction_low":0,"cloud_area_fraction_medium":0,"dew_point_temperature":-5.4,"fog_area_fraction":0,"relative_humidity":88.5,"ultraviolet_index_clear_sky":0,"wind_from_direction":224.2,"wind_speed":2.9,"wind_speed_of_gust":5,"wind_speed_percentile_10":2.3,"wind_speed_percentile_90":3.2}},"next_12_hours":{"summary":{"symbol_code":"clearsky_day","symbol_confidence":"certain"},"details":{"probability_of_precipitation":0}},"next_1_hours":{"summary":{"symbol_code":"fair_night"},"details":{"precipitation_amount":0,"precipitation_amount_max":0,"precipitation_amount_min":0,"probability_of_precipitation":0,"probability_of_thunder":0}},"next_6_hours":{"summary":{"symbol_code":"clearsky_day"},"details":{"air_temperature_max":0.4,"air_temperature_min":-3.8,"precipitation_amount":0,"precipitation_amount_max":0,"precipitation_amount_min":0,"probability_of_precipitation":0}}}},{"time":"2022-03-05T04:00:00Z","data":{"instant":{"details":{"air_pressure_at_sea_level":1027.6,"air_temperature":-3.5,"air_temperature_percentile_10":-4.6,"air_temperature_percentile_90":-2.3,"cloud_area_fraction":8.2,"cloud_area_fraction_high":8.2,"cloud_area_fraction_low":0,"cloud_area_fraction_medium":0,"dew_point_temperature":-5.6,"fog_area_fraction":0,"relative_humidity":88.9,"ultraviolet_index_clear_sky":0,"wind_from_direction":225.8,"wind_speed":2.9,"wind_speed_of_gust":5,"wind_speed_percentile_10":2.5,"wind_speed_percentile_90":3.3}},"next_12_hours":{"summary":{"symbol_code":"clearsky_day","symbol_confidence":"certain"},"details":{"probability_of_precipitation":0}},"next_1_hours":{"summary":{"symbol_code":"clearsky_night"},"details":{"precipitation_amount":0,"precipitation_amount_max":0,"precipitation_amount_min":0,"probability_of_precipitation":0,"probability_of_thunder":0}},"next_6_hours":{"summary":{"symbol_code":"clearsky_day"},"details":{"air_temperature_max":1.9,"air_temperature_min":-3.8,"precipitation_amount":0,"precipitation_amount_max":0,"precipitation_amount_min":0,"probability_of_precipitation":0}}}},{"time":"2022-03-05T05:00:00Z","data":{"instant":{"details":{"air_pressure_at_sea_level":1027.3,"air_temperature":-3.7,"air_temperature_percentile_10":-5,"air_temperature_percentile_90":-2.5,"cloud_area_fraction":8.2,"cloud_area_fraction_high":8.2,"cloud_area_fraction_low":0,"cloud_area_fraction_medium":0,"dew_point_temperature":-5.9,"fog_area_fraction":0,"relative_humidity":88.2,"ultraviolet_index_clear_sky":0,"wind_from_direction":225.5,"wind_speed":3.2,"wind_speed_of_gust":5.5,"wind_speed_percentile_10":2.7,"wind_speed_percentile_90":3.6}},"next_12_hours":{"summary":{"symbol_code":"clearsky_day","symbol_confidence":"certain"},"details":{"probability_of_precipitation":0}},"next_1_hours":{"summary":{"symbol_code":"clearsky_night"},"details":{"precipitation_amount":0,"precipitation_amount_max":0,"precipitation_amount_min":0,"probability_of_precipitation":0,"probability_of_thunder":0}},"next_6_hours":{"summary":{"symbol_code":"clearsky_day"},"details":{"air_temperature_max":2.8,"air_temperature_min":-3.8,"precipitation_amount":0,"precipitation_amount_max":0,"precipitation_amount_min":0,"probability_of_precipitation":0}}}},{"time":"2022-03-05T06:00:00Z","data":{"instant":{"details":{"air_pressure_at_sea_level":1027.1,"air_temperature":-3.8,"air_temperature_percentile_10":-5,"air_temperature_percentile_90":-2.7,"cloud_area_fraction":5.3,"cloud_area_fraction_high":5.3,"cloud_area_fraction_low":0,"cloud_area_fraction_medium":0,"dew_point_temperature":-6.1,"fog_area_fraction":0,"relative_humidity":87.8,"ultraviolet_index_clear_sky":0,"wind_from_direction":224.6,"wind_speed":3.4,"wind_speed_of_gust":5.8,"wind_speed_percentile_10":2.9,"wind_speed_percentile_90":3.8}},"next_12_hours":{"summary":{"symbol_code":"clearsky_day","symbol_confidence":"certain"},"details":{"probability_of_precipitation":0}},"next_1_hours":{"summary":{"symbol_code":"clearsky_day"},"details":{"precipitation_amount":0,"precipitation_amount_max":0,"precipitation_amount_min":0,"probability_of_precipitation":0,"probability_of_thunder":0}},"next_6_hours":{"summary":{"symbol_code":"clearsky_day"},"details":{"air_temperature_max":3.6,"air_temperature_min":-3.1,"precipitation_amount":0,"precipitation_amount_max":0,"precipitation_amount_min":0,"probability_of_precipitation":0}}}},{"time":"2022-03-05T07:00:00Z","data":{"instant":{"details":{"air_pressure_at_sea_level":1027,"air_temperature":-3.1,"air_temperature_percentile_10":-4.1,"air_temperature_percentile_90":-2,"cloud_area_fraction":0.4,"cloud_area_fraction_high":0.4,"cloud_area_fraction_low":0,"cloud_area_fraction_medium":0,"dew_point_temperature":-5.8,"fog_area_fraction":0,"relative_humidity":85.5,"ultraviolet_index_clear_sky":0.2,"wind_from_direction":228.4,"wind_speed":3.4,"wind_speed_of_gust":6.3,"wind_speed_percentile_10":2.8,"wind_speed_percentile_90":3.8}},"next_1_hours":{"summary":{"symbol_code":"clearsky_day"},"details":{"precipitation_amount":0,"precipitation_amount_max":0,"precipitation_amount_min":0,"probability_of_precipitation":0,"probability_of_thunder":0}},"next_6_hours":{"summary":{"symbol_code":"clearsky_day"},"details":{"air_temperature_max":3.8,"air_temperature_min":-1.4,"precipitation_amount":0,"precipitation_amount_max":0,"precipitation_amount_min":0,"probability_of_precipitation":0}}}},{"time":"2022-03-05T08:00:00Z","data":{"instant":{"details":{"air_pressure_at_sea_level":1026.9,"air_temperature":-1.4,"air_temperature_percentile_10":-2.5,"air_temperature_percentile_90":-0.5,"cloud_area_fraction":0,"cloud_area_fraction_high":0,"cloud_area_fraction_low":0,"cloud_area_fraction_medium":0,"dew_point_temperature":-5.3,"fog_area_fraction":0,"relative_humidity":79.2,"ultraviolet_index_clear_sky":0.5,"wind_from_direction":230.7,"wind_speed":3.4,"wind_speed_of_gust":6.4,"wind_speed_percentile_10":3,"wind_speed_percentile_90":3.9}},"next_1_hours":{"summary":{"symbol_code":"clearsky_day"},"details":{"precipitation_amount":0,"precipitation_amount_max":0,"precipitation_amount_min":0,"probability_of_precipitation":0,"probability_of_thunder":0}},"next_6_hours":{"summary":{"symbol_code":"clearsky_day"},"details":{"air_temperature_max":3.9,"air_temperature_min":0.4,"precipitation_amount":0,"precipitation_amount_max":0,"precipitation_amount_min":0,"probability_of_precipitation":0}}}},{"time":"2022-03-05T09:00:00Z","data":{"instant":{"details":{"air_pressure_at_sea_level":1026.8,"air_temperature":0.4,"air_temperature_percentile_10":-0.5,"air_temperature_percentile_90":1.4,"cloud_area_fraction":0.1,"cloud_area_fraction_high":0.1,"cloud_area_fraction_low":0,"cloud_area_fraction_medium":0,"dew_point_temperature":-4.9,"fog_area_fraction":0,"relative_humidity":72.2,"ultraviolet_index_clear_sky":0.9,"wind_from_direction":234.4,"wind_speed":3.6,"wind_speed_of_gust":6.9,"wind_speed_percentile_10":3.2,"wind_speed_percentile_90":4.1}},"next_1_hours":{"summary":{"symbol_code":"clearsky_day"},"details":{"precipitation_amount":0,"precipitation_amount_max":0,"precipitation_amount_min":0,"probability_of_precipitation":0,"probability_of_thunder":0}},"next_6_hours":{"summary":{"symbol_code":"clearsky_day"},"details":{"air_temperature_max":3.9,"air_temperature_min":1.9,"precipitation_amount":0,"precipitation_amount_max":0,"precipitation_amount_min":0,"probability_of_precipitation":0}}}},{"time":"2022-03-05T10:00:00Z","data":{"instant":{"details":{"air_pressure_at_sea_level":1026.5,"air_temperature":1.9,"air_temperature_percentile_10":1.2,"air_temperature_percentile_90":3,"cloud_area_fraction":0.9,"cloud_area_fraction_high":0.9,"cloud_area_fraction_low":0,"cloud_area_fraction_medium":0,"dew_point_temperature":-4.3,"fog_area_fraction":0,"relative_humidity":68,"ultraviolet_index_clear_sky":1.1,"wind_from_direction":235.4,"wind_speed":4,"wind_speed_of_gust":7.6,"wind_speed_percentile_10":3.6,"wind_speed_percentile_90":4.6}},"next_1_hours":{"summary":{"symbol_code":"clearsky_day"},"details":{"precipitation_amount":0,"precipitation_amount_max":0,"precipitation_amount_min":0,"probability_of_precipitation":0,"probability_of_thunder":0}},"next_6_hours":{"summary":{"symbol_code":"clearsky_day"},"details":{"air_temperature_max":3.9,"air_temperature_min":2.8,"precipitation_amount":0,"precipitation_amount_max":0,"precipitation_amount_min":0,"probability_of_precipitation":0}}}},{"time":"2022-03-05T11:00:00Z","data":{"instant":{"details":{"air_pressure_at_sea_level":1025.9,"air_temperature":2.8,"air_temperature_percentile_10":2.2,"air_temperature_percentile_90":4,"cloud_area_fraction":22.9,"cloud_area_fraction_high":22.9,"cloud_area_fraction_low":0,"cloud_area_fraction_medium":0,"dew_point_temperature":-3.8,"fog_area_fraction":0,"relative_humidity":65.3,"ultraviolet_index_clear_sky":1.2,"wind_from_direction":233.9,"wind_speed":4.1,"wind_speed_of_gust":8,"wind_speed_percentile_10":3.9,"wind_speed_percentile_90":4.8}},"next_1_hours":{"summary":{"symbol_code":"fair_day"},"details":{"precipitation_amount":0,"precipitation_amount_max":0,"precipitation_amount_min":0,"probability_of_precipitation":0,"probability_of_thunder":0}},"next_6_hours":{"summary":{"symbol_code":"clearsky_day"},"details":{"air_temperature_max":3.9,"air_temperature_min":1.7,"precipitation_amount":0,"precipitation_amount_max":0,"precipitation_amount_min":0,"probability_of_precipitation":0}}}},{"time":"2022-03-05T12:00:00Z","data":{"instant":{"details":{"air_pressure_at_sea_level":1025.2,"air_temperature":3.6,"air_temperature_percentile_10":2.9,"air_temperature_percentile_90":5,"cloud_area_fraction":11.7,"cloud_area_fraction_high":11.7,"cloud_area_fraction_low":0.1,"cloud_area_fraction_medium":0,"dew_point_temperature":-3.6,"fog_area_fraction":0,"relative_humidity":63,"ultraviolet_index_clear_sky":1.1,"wind_from_direction":240.8,"wind_speed":4.4,"wind_speed_of_gust":8.6,"wind_speed_percentile_10":4.1,"wind_speed_percentile_90":4.9}},"next_12_hours":{"summary":{"symbol_code":"clearsky_day","symbol_confidence":"certain"},"details":{"probability_of_precipitation":5.9}},"next_1_hours":{"summary":{"symbol_code":"clearsky_day"},"details":{"precipitation_amount":0,"precipitation_amount_max":0,"precipitation_amount_min":0,"probability_of_precipitation":0,"probability_of_thunder":0}},"next_6_hours":{"summary":{"symbol_code":"fair_day"},"details":{"air_temperature_max":3.9,"air_temperature_min":0.9,"precipitation_amount":0,"precipitation_amount_max":0,"precipitation_amount_min":0,"probability_of_precipitation":0}}}},{"time":"2022-03-05T13:00:00Z","data":{"instant":{"details":{"air_pressure_at_sea_level":1024.6,"air_temperature":3.8,"air_temperature_percentile_10":3.2,"air_temperature_percentile_90":5.7,"cloud_area_fraction":0.2,"cloud_area_fraction_high":0.1,"cloud_area_fraction_low":0,"cloud_area_fraction_medium":0,"dew_point_temperature":-3.2,"fog_area_fraction":0,"relative_humidity":63.2,"ultraviolet_index_clear_sky":0.8,"wind_from_direction":242.5,"wind_speed":4.7,"wind_speed_of_gust":9,"wind_speed_percentile_10":3.9,"wind_speed_percentile_90":4.8}},"next_1_hours":{"summary":{"symbol_code":"clearsky_day"},"details":{"precipitation_amount":0,"precipitation_amount_max":0,"precipitation_amount_min":0,"probability_of_precipitation":0,"probability_of_thunder":0}}}},{"time":"2022-03-05T14:00:00Z","data":{"instant":{"details":{"air_pressure_at_sea_level":1024,"air_temperature":3.9,"air_temperature_percentile_10":3.3,"air_temperature_percentile_90":6.1,"cloud_area_fraction":0,"cloud_area_fraction_high":0,"cloud_area_fraction_low":0,"cloud_area_fraction_medium":0,"dew_point_temperature":-2.7,"fog_area_fraction":0,"relative_humidity":65.7,"ultraviolet_index_clear_sky":0.5,"wind_from_direction":238.9,"wind_speed":4.8,"wind_speed_of_gust":9.1,"wind_speed_percentile_10":3.3,"wind_speed_percentile_90":4.9}},"next_1_hours":{"summary":{"symbol_code":"clearsky_day"},"details":{"precipitation_amount":0,"precipitation_amount_max":0,"precipitation_amount_min":0,"probability_of_precipitation":0,"probability_of_thunder":0}}}},{"time":"2022-03-05T15:00:00Z","data":{"instant":{"details":{"air_pressure_at_sea_level":1023.4,"air_temperature":3.6,"air_temperature_percentile_10":2.9,"air_temperature_percentile_90":6,"cloud_area_fraction":0,"cloud_area_fraction_high":0,"cloud_area_fraction_low":0,"cloud_area_fraction_medium":0,"dew_point_temperature":-2,"fog_area_fraction":0,"relative_humidity":70.3,"ultraviolet_index_clear_sky":0.2,"wind_from_direction":237.7,"wind_speed":4.5,"wind_speed_of_gust":9,"wind_speed_percentile_10":2.7,"wind_speed_percentile_90":4.8}},"next_1_hours":{"summary":{"symbol_code":"clearsky_day"},"details":{"precipitation_amount":0,"precipitation_amount_max":0,"precipitation_amount_min":0,"probability_of_precipitation":0,"probability_of_thunder":0}}}},{"time":"2022-03-05T16:00:00Z","data":{"instant":{"details":{"air_pressure_at_sea_level":1023,"air_temperature":2.9,"air_temperature_percentile_10":2.2,"air_temperature_percentile_90":5.1,"cloud_area_fraction":1.2,"cloud_area_fraction_high":1.3,"cloud_area_fraction_low":0,"cloud_area_fraction_medium":0,"dew_point_temperature":-1.6,"fog_area_fraction":0,"relative_humidity":76,"ultraviolet_index_clear_sky":0,"wind_from_direction":237.6,"wind_speed":3.9,"wind_speed_of_gust":8.4,"wind_speed_percentile_10":2.3,"wind_speed_percentile_90":4.4}},"next_1_hours":{"summary":{"symbol_code":"clearsky_night"},"details":{"precipitation_amount":0,"precipitation_amount_max":0,"precipitation_amount_min":0,"probability_of_precipitation":0,"probability_of_thunder":0}}}},{"time":"2022-03-05T17:00:00Z","data":{"instant":{"details":{"air_pressure_at_sea_level":1022.7,"air_temperature":1.7,"air_temperature_percentile_10":1,"air_temperature_percentile_90":3.5,"cloud_area_fraction":56.1,"cloud_area_fraction_high":56.1,"cloud_area_fraction_low":0,"cloud_area_fraction_medium":0,"dew_point_temperature":-1.6,"fog_area_fraction":0,"relative_humidity":82.7,"ultraviolet_index_clear_sky":0,"wind_from_direction":231.4,"wind_speed":3.3,"wind_speed_of_gust":6.8,"wind_speed_percentile_10":2.3,"wind_speed_percentile_90":3.4}},"next_1_hours":{"summary":{"symbol_code":"partlycloudy_night"},"details":{"precipitation_amount":0,"precipitation_amount_max":0,"precipitation_amount_min":0,"probability_of_precipitation":0,"probability_of_thunder":0}}}},{"time":"2022-03-05T18:00:00Z","data":{"instant":{"details":{"air_pressure_at_sea_level":1022.5,"air_temperature":0.9,"air_temperature_percentile_10":0.2,"air_temperature_percentile_90":2.6,"cloud_area_fraction":42.1,"cloud_area_fraction_high":42.2,"cloud_area_fraction_low":0,"cloud_area_fraction_medium":0,"dew_point_temperature":-2,"fog_area_fraction":0,"relative_humidity":85.5,"ultraviolet_index_clear_sky":0,"wind_from_direction":238.1,"wind_speed":3.4,"wind_speed_of_gust":5.8,"wind_speed_percentile_10":2.6,"wind_speed_percentile_90":3.9}},"next_12_hours":{"summary":{"symbol_code":"clearsky_night","symbol_confidence":"certain"},"details":{"probability_of_precipitation":3.9}},"next_6_hours":{"summary":{"symbol_code":"clearsky_night"},"details":{"air_temperature_max":0.3,"air_temperature_min":-1,"precipitation_amount":0,"precipitation_amount_max":0,"precipitation_amount_min":0,"probability_of_precipitation":5.9}}}},{"time":"2022-03-06T00:00:00Z","data":{"instant":{"details":{"air_pressure_at_sea_level":1021.2,"air_temperature":-1,"air_temperature_percentile_10":-2,"air_temperature_percentile_90":-0.6,"cloud_area_fraction":0,"cloud_area_fraction_high":0,"cloud_area_fraction_low":0,"cloud_area_fraction_medium":0,"dew_point_temperature":-3.7,"relative_humidity":83.5,"wind_from_direction":294.1,"wind_speed":2.4,"wind_speed_percentile_10":1.7,"wind_speed_percentile_90":2.7}},"next_12_hours":{"summary":{"symbol_code":"fair_day","symbol_confidence":"somewhat certain"},"details":{"probability_of_precipitation":5.9}},"next_6_hours":{"summary":{"symbol_code":"clearsky_night"},"details":{"air_temperature_max":-0.8,"air_temperature_min":-1.8,"precipitation_amount":0,"precipitation_amount_max":0,"precipitation_amount_min":0,"probability_of_precipitation":3.9}}}},{"time":"2022-03-06T06:00:00Z","data":{"instant":{"details":{"air_pressure_at_sea_level":1019.3,"air_temperature":-1.4,"air_temperature_percentile_10":-2,"air_temperature_percentile_90":-0.2,"cloud_area_fraction":0,"cloud_area_fraction_high":0,"cloud_area_fraction_low":0,"cloud_area_fraction_medium":0,"dew_point_temperature":-5.2,"relative_humidity":77.7,"wind_from_direction":287.3,"wind_speed":3,"wind_speed_percentile_10":2.6,"wind_speed_percentile_90":3.7}},"next_12_hours":{"summary":{"symbol_code":"partlycloudy_day","symbol_confidence":"somewhat certain"},"details":{"probability_of_precipitation":19.6}},"next_6_hours":{"summary":{"symbol_code":"fair_day"},"details":{"air_temperature_max":6.4,"air_temperature_min":-2.1,"precipitation_amount":0,"precipitation_amount_max":0,"precipitation_amount_min":0,"probability_of_precipitation":5.9}}}},{"time":"2022-03-06T12:00:00Z","data":{"instant":{"details":{"air_pressure_at_sea_level":1015.4,"air_temperature":6.4,"air_temperature_percentile_10":5.9,"air_temperature_percentile_90":7,"cloud_area_fraction":18,"cloud_area_fraction_high":0,"cloud_area_fraction_low":0,"cloud_area_fraction_medium":16.4,"dew_point_temperature":-5.2,"relative_humidity":44.6,"wind_from_direction":311.5,"wind_speed":4.4,"wind_speed_percentile_10":3.3,"wind_speed_percentile_90":5.4}},"next_12_hours":{"summary":{"symbol_code":"partlycloudy_day","symbol_confidence":"somewhat certain"},"details":{"probability_of_precipitation":25.5}},"next_6_hours":{"summary":{"symbol_code":"partlycloudy_day"},"details":{"air_temperature_max":6.3,"air_temperature_min":2.5,"precipitation_amount":0,"precipitation_amount_max":0,"precipitation_amount_min":0,"probability_of_precipitation":23.5}}}},{"time":"2022-03-06T18:00:00Z","data":{"instant":{"details":{"air_pressure_at_sea_level":1014.2,"air_temperature":2.5,"air_temperature_percentile_10":1.3,"air_temperature_percentile_90":3.6,"cloud_area_fraction":74.2,"cloud_area_fraction_high":0,"cloud_area_fraction_low":19.1,"cloud_area_fraction_medium":53.9,"dew_point_temperature":-2.9,"relative_humidity":70.1,"wind_from_direction":301.7,"wind_speed":4,"wind_speed_percentile_10":3,"wind_speed_percentile_90":5.2}},"next_12_hours":{"summary":{"symbol_code":"cloudy","symbol_confidence":"somewhat certain"},"details":{"probability_of_precipitation":15.7}},"next_6_hours":{"summary":{"symbol_code":"partlycloudy_night"},"details":{"air_temperature_max":2.8,"air_temperature_min":1.3,"precipitation_amount":0,"precipitation_amount_max":0,"precipitation_amount_min":0,"probability_of_precipitation":17.6}}}},{"time":"2022-03-07T00:00:00Z","data":{"instant":{"details":{"air_pressure_at_sea_level":1017,"air_temperature":1.3,"air_temperature_percentile_10":0,"air_temperature_percentile_90":2.3,"cloud_area_fraction":53.1,"cloud_area_fraction_high":0,"cloud_area_fraction_low":46.1,"cloud_area_fraction_medium":0,"dew_point_temperature":-1.7,"relative_humidity":82.5,"wind_from_direction":348,"wind_speed":4,"wind_speed_percentile_10":3.1,"wind_speed_percentile_90":5.7}},"next_12_hours":{"summary":{"symbol_code":"cloudy","symbol_confidence":"certain"},"details":{"probability_of_precipitation":9.8}},"next_6_hours":{"summary":{"symbol_code":"cloudy"},"details":{"air_temperature_max":1.1,"air_temperature_min":-0.1,"precipitation_amount":0,"precipitation_amount_max":0,"precipitation_amount_min":0,"probability_of_precipitation":5.9}}}},{"time":"2022-03-07T06:00:00Z","data":{"instant":{"details":{"air_pressure_at_sea_level":1020.1,"air_temperature":0,"air_temperature_percentile_10":-0.9,"air_temperature_percentile_90":0.7,"cloud_area_fraction":96.1,"cloud_area_fraction_high":0,"cloud_area_fraction_low":56.6,"cloud_area_fraction_medium":0,"dew_point_temperature":-1.9,"relative_humidity":89,"wind_from_direction":339.3,"wind_speed":3.7,"wind_speed_percentile_10":2.7,"wind_speed_percentile_90":4.7}},"next_12_hours":{"summary":{"symbol_code":"cloudy","symbol_confidence":"somewhat certain"},"details":{"probability_of_precipitation":13.7}},"next_6_hours":{"summary":{"symbol_code":"cloudy"},"details":{"air_temperature_max":2.9,"air_temperature_min":-0.3,"precipitation_amount":0,"precipitation_amount_max":0,"precipitation_amount_min":0,"probability_of_precipitation":13.7}}}},{"time":"2022-03-07T12:00:00Z","data":{"instant":{"details":{"air_pressure_at_sea_level":1023,"air_temperature":2.7,"air_temperature_percentile_10":0,"air_temperature_percentile_90":5.5,"cloud_area_fraction":97.7,"cloud_area_fraction_high":0,"cloud_area_fraction_low":87.1,"cloud_area_fraction_medium":0,"dew_point_temperature":-3.9,"relative_humidity":63.5,"wind_from_direction":357.4,"wind_speed":4.5,"wind_speed_percentile_10":2.7,"wind_speed_percentile_90":6.4}},"next_12_hours":{"summary":{"symbol_code":"cloudy","symbol_confidence":"certain"},"details":{"probability_of_precipitation":7.8}},"next_6_hours":{"summary":{"symbol_code":"cloudy"},"details":{"air_temperature_max":2.8,"air_temperature_min":-0.6,"precipitation_amount":0,"precipitation_amount_max":0,"precipitation_amount_min":0,"probability_of_precipitation":9.8}}}},{"time":"2022-03-07T18:00:00Z","data":{"instant":{"details":{"air_pressure_at_sea_level":1025.7,"air_temperature":-0.6,"air_temperature_percentile_10":-2.2,"air_temperature_percentile_90":1.5,"cloud_area_fraction":98.4,"cloud_area_fraction_high":0,"cloud_area_fraction_low":85.9,"cloud_area_fraction_medium":0,"dew_point_temperature":-4.1,"relative_humidity":78.6,"wind_from_direction":31.5,"wind_speed":3.1,"wind_speed_percentile_10":1.3,"wind_speed_percentile_90":4.7}},"next_12_hours":{"summary":{"symbol_code":"cloudy","symbol_confidence":"somewhat certain"},"details":{"probability_of_precipitation":5.9}},"next_6_hours":{"summary":{"symbol_code":"cloudy"},"details":{"air_temperature_max":-0.4,"air_temperature_min":-1.5,"precipitation_amount":0,"precipitation_amount_max":0,"precipitation_amount_min":0,"probability_of_precipitation":7.8}}}},{"time":"2022-03-08T00:00:00Z","data":{"instant":{"details":{"air_pressure_at_sea_level":1027.4,"air_temperature":-1,"air_temperature_percentile_10":-4.8,"air_temperature_percentile_90":0.3,"cloud_area_fraction":98.4,"cloud_area_fraction_high":8.6,"cloud_area_fraction_low":93,"cloud_area_fraction_medium":0,"dew_point_temperature":-4.2,"relative_humidity":81.4,"wind_from_direction":264.6,"wind_speed":1.5,"wind_speed_percentile_10":0.7,"wind_speed_percentile_90":3}},"next_12_hours":{"summary":{"symbol_code":"partlycloudy_day","symbol_confidence":"somewhat certain"},"details":{"probability_of_precipitation":5.9}},"next_6_hours":{"summary":{"symbol_code":"cloudy"},"details":{"air_temperature_max":-0.7,"air_temperature_min":-2.2,"precipitation_amount":0,"precipitation_amount_max":0,"precipitation_amount_min":0,"probability_of_precipitation":3.9}}}},{"time":"2022-03-08T06:00:00Z","data":{"instant":{"details":{"air_pressure_at_sea_level":1028.9,"air_temperature":-1.7,"air_temperature_percentile_10":-6.2,"air_temperature_percentile_90":-0.2,"cloud_area_fraction":98,"cloud_area_fraction_high":15.2,"cloud_area_fraction_low":77,"cloud_area_fraction_medium":0,"dew_point_temperature":-4.5,"relative_humidity":82.8,"wind_from_direction":77.1,"wind_speed":1.9,"wind_speed_percentile_10":0.9,"wind_speed_percentile_90":2.9}},"next_12_hours":{"summary":{"symbol_code":"partlycloudy_day","symbol_confidence":"certain"},"details":{"probability_of_precipitation":7.8}},"next_6_hours":{"summary":{"symbol_code":"partlycloudy_day"},"details":{"air_temperature_max":1,"air_temperature_min":-2.9,"precipitation_amount":0,"precipitation_amount_max":0,"precipitation_amount_min":0,"probability_of_precipitation":5.9}}}},{"time":"2022-03-08T12:00:00Z","data":{"instant":{"details":{"air_pressure_at_sea_level":1030.3,"air_temperature":1,"air_temperature_percentile_10":-2.5,"air_temperature_percentile_90":6,"cloud_area_fraction":84.4,"cloud_area_fraction_high":7.8,"cloud_area_fraction_low":61.7,"cloud_area_fraction_medium":0,"dew_point_temperature":-7,"relative_humidity":56.8,"wind_from_direction":231.4,"wind_speed":2,"wind_speed_percentile_10":1,"wind_speed_percentile_90":3.5}},"next_12_hours":{"summary":{"symbol_code":"cloudy","symbol_confidence":"certain"},"details":{"probability_of_precipitation":7.8}},"next_6_hours":{"summary":{"symbol_code":"partlycloudy_day"},"details":{"air_temperature_max":1.2,"air_temperature_min":-1.9,"precipitation_amount":0,"precipitation_amount_max":0,"precipitation_amount_min":0,"probability_of_precipitation":7.8}}}},{"time":"2022-03-08T18:00:00Z","data":{"instant":{"details":{"air_pressure_at_sea_level":1031.1,"air_temperature":-1.9,"air_temperature_percentile_10":-5.7,"air_temperature_percentile_90":1,"cloud_area_fraction":66.8,"cloud_area_fraction_high":2,"cloud_area_fraction_low":23.4,"cloud_area_fraction_medium":0,"dew_point_temperature":-6.3,"relative_humidity":74.5,"wind_from_direction":128.3,"wind_speed":2.3,"wind_speed_percentile_10":1.8,"wind_speed_percentile_90":3.2}},"next_12_hours":{"summary":{"symbol_code":"cloudy","symbol_confidence":"uncertain"},"details":{"probability_of_precipitation":5.9}},"next_6_hours":{"summary":{"symbol_code":"cloudy"},"details":{"air_temperature_max":-1,"air_temperature_min":-2.6,"precipitation_amount":0,"precipitation_amount_max":0,"precipitation_amount_min":0,"probability_of_precipitation":7.8}}}},{"time":"2022-03-09T00:00:00Z","data":{"instant":{"details":{"air_pressure_at_sea_level":1032.5,"air_temperature":-2.2,"air_temperature_percentile_10":-6.4,"air_temperature_percentile_90":-0.1,"cloud_area_fraction":93.7,"cloud_area_fraction_high":0,"cloud_area_fraction_low":90.6,"cloud_area_fraction_medium":0,"dew_point_temperature":-5.6,"relative_humidity":80.1,"wind_from_direction":173.6,"wind_speed":1.6,"wind_speed_percentile_10":0.7,"wind_speed_percentile_90":2.6}},"next_12_hours":{"summary":{"symbol_code":"clearsky_day","symbol_confidence":"somewhat certain"},"details":{"probability_of_precipitation":5.9}},"next_6_hours":{"summary":{"symbol_code":"cloudy"},"details":{"air_temperature_max":-2.9,"air_temperature_min":-3.7,"precipitation_amount":0,"precipitation_amount_max":0,"precipitation_amount_min":0,"probability_of_precipitation":5.9}}}},{"time":"2022-03-09T06:00:00Z","data":{"instant":{"details":{"air_pressure_at_sea_level":1033.3,"air_temperature":-3.3,"air_temperature_percentile_10":-6.7,"air_temperature_percentile_90":-0.1,"cloud_area_fraction":93.7,"cloud_area_fraction_high":0,"cloud_area_fraction_low":83.6,"cloud_area_fraction_medium":0,"dew_point_temperature":-6.7,"relative_humidity":80,"wind_from_direction":173,"wind_speed":2,"wind_speed_percentile_10":0.8,"wind_speed_percentile_90":3}},"next_12_hours":{"summary":{"symbol_code":"clearsky_day","symbol_confidence":"somewhat certain"},"details":{"probability_of_precipitation":5.9}},"next_6_hours":{"summary":{"symbol_code":"clearsky_day"},"details":{"air_temperature_max":2,"air_temperature_min":-4.8,"precipitation_amount":0,"precipitation_amount_max":0,"precipitation_amount_min":0,"probability_of_precipitation":7.8}}}},{"time":"2022-03-09T12:00:00Z","data":{"instant":{"details":{"air_pressure_at_sea_level":1033.7,"air_temperature":2,"air_temperature_percentile_10":-1.8,"air_temperature_percentile_90":4.8,"cloud_area_fraction":7.4,"cloud_area_fraction_high":0,"cloud_area_fraction_low":1.2,"cloud_area_fraction_medium":0,"dew_point_temperature":-8.5,"relative_humidity":50.1,"wind_from_direction":181.3,"wind_speed":2.3,"wind_speed_percentile_10":1.5,"wind_speed_percentile_90":3.8}},"next_12_hours":{"summary":{"symbol_code":"clearsky_day","symbol_confidence":"uncertain"},"details":{"probability_of_precipitation":5.9}},"next_6_hours":{"summary":{"symbol_code":"clearsky_day"},"details":{"air_temperature_max":2,"air_temperature_min":-2.2,"precipitation_amount":0,"precipitation_amount_max":0,"precipitation_amount_min":0,"probability_of_precipitation":7.8}}}},{"time":"2022-03-09T18:00:00Z","data":{"instant":{"details":{"air_pressure_at_sea_level":1034,"air_temperature":-2.2,"air_temperature_percentile_10":-4.7,"air_temperature_percentile_90":1.3,"cloud_area_fraction":0,"cloud_area_fraction_high":0,"cloud_area_fraction_low":0,"cloud_area_fraction_medium":0,"dew_point_temperature":-6.7,"relative_humidity":73.4,"wind_from_direction":214.1,"wind_speed":2.5,"wind_speed_percentile_10":1.7,"wind_speed_percentile_90":3.4}},"next_12_hours":{"summary":{"symbol_code":"clearsky_night","symbol_confidence":"uncertain"},"details":{"probability_of_precipitation":3.9}},"next_6_hours":{"summary":{"symbol_code":"clearsky_night"},"details":{"air_temperature_max":-1.6,"air_temperature_min":-3.7,"precipitation_amount":0,"precipitation_amount_max":0,"precipitation_amount_min":0,"probability_of_precipitation":7.8}}}},{"time":"2022-03-10T00:00:00Z","data":{"instant":{"details":{"air_pressure_at_sea_level":1035.5,"air_temperature":-3.7,"air_temperature_percentile_10":-6.2,"air_temperature_percentile_90":-0.3,"cloud_area_fraction":0,"cloud_area_fraction_high":0,"cloud_area_fraction_low":0,"cloud_area_fraction_medium":0,"dew_point_temperature":-5.8,"relative_humidity":87.3,"wind_from_direction":152.3,"wind_speed":1.5,"wind_speed_percentile_10":1,"wind_speed_percentile_90":2.5}},"next_12_hours":{"summary":{"symbol_code":"clearsky_day","symbol_confidence":"uncertain"},"details":{"probability_of_precipitation":3.9}},"next_6_hours":{"summary":{"symbol_code":"clearsky_night"},"details":{"air_temperature_max":-3.5,"air_temperature_min":-4.6,"precipitation_amount":0,"precipitation_amount_max":0,"precipitation_amount_min":0,"probability_of_precipitation":3.9}}}},{"time":"2022-03-10T06:00:00Z","data":{"instant":{"details":{"air_pressure_at_sea_level":1035.1,"air_temperature":-4.2,"air_temperature_percentile_10":-5.9,"air_temperature_percentile_90":-0.6,"cloud_area_fraction":0,"cloud_area_fraction_high":0,"cloud_area_fraction_low":0,"cloud_area_fraction_medium":0,"dew_point_temperature":-6.3,"relative_humidity":87.6,"wind_from_direction":228.6,"wind_speed":2,"wind_speed_percentile_10":1.1,"wind_speed_percentile_90":3}},"next_12_hours":{"summary":{"symbol_code":"clearsky_day","symbol_confidence":"uncertain"},"details":{"probability_of_precipitation":7.8}},"next_6_hours":{"summary":{"symbol_code":"clearsky_day"},"details":{"air_temperature_max":2.9,"air_temperature_min":-5.1,"precipitation_amount":0,"precipitation_amount_max":0,"precipitation_amount_min":0,"probability_of_precipitation":5.9}}}},{"time":"2022-03-10T12:00:00Z","data":{"instant":{"details":{"air_pressure_at_sea_level":1035.1,"air_temperature":2.9,"air_temperature_percentile_10":-2.3,"air_temperature_percentile_90":6.9,"cloud_area_fraction":1.6,"cloud_area_fraction_high":0,"cloud_area_fraction_low":0,"cloud_area_fraction_medium":0,"dew_point_temperature":-8.8,"relative_humidity":44.1,"wind_from_direction":194.3,"wind_speed":2.1,"wind_speed_percentile_10":1.8,"wind_speed_percentile_90":4.2}},"next_12_hours":{"summary":{"symbol_code":"clearsky_day","symbol_confidence":"somewhat certain"},"details":{"probability_of_precipitation":9.8}},"next_6_hours":{"summary":{"symbol_code":"clearsky_day"},"details":{"air_temperature_max":3.2,"air_temperature_min":-1.8,"precipitation_amount":0,"precipitation_amount_max":0,"precipitation_amount_min":0,"probability_of_precipitation":7.8}}}},{"time":"2022-03-10T18:00:00Z","data":{"instant":{"details":{"air_pressure_at_sea_level":1033.8,"air_temperature":-1.8,"air_temperature_percentile_10":-4.8,"air_temperature_percentile_90":0.8,"cloud_area_fraction":0,"cloud_area_fraction_high":0,"cloud_area_fraction_low":0,"cloud_area_fraction_medium":0,"dew_point_temperature":-6.2,"relative_humidity":73.8,"wind_from_direction":221.7,"wind_speed":2.8,"wind_speed_percentile_10":2,"wind_speed_percentile_90":3.6}},"next_12_hours":{"summary":{"symbol_code":"clearsky_night","symbol_confidence":"somewhat certain"},"details":{"probability_of_precipitation":5.9}},"next_6_hours":{"summary":{"symbol_code":"clearsky_night"},"details":{"air_temperature_max":-1.5,"air_temperature_min":-3.2,"precipitation_amount":0,"precipitation_amount_max":0,"precipitation_amount_min":0,"probability_of_precipitation":7.8}}}},{"time":"2022-03-11T00:00:00Z","data":{"instant":{"details":{"air_pressure_at_sea_level":1033.9,"air_temperature":-3.1,"air_temperature_percentile_10":-5.3,"air_temperature_percentile_90":-0.9,"cloud_area_fraction":0,"cloud_area_fraction_high":0,"cloud_area_fraction_low":0,"cloud_area_fraction_medium":0,"dew_point_temperature":-5.6,"relative_humidity":85,"wind_from_direction":192.4,"wind_speed":1.8,"wind_speed_percentile_10":1.2,"wind_speed_percentile_90":3}},"next_12_hours":{"summary":{"symbol_code":"clearsky_day","symbol_confidence":"uncertain"},"details":{"probability_of_precipitation":3.9}},"next_6_hours":{"summary":{"symbol_code":"clearsky_night"},"details":{"air_temperature_max":-3,"air_temperature_min":-4.3,"precipitation_amount":0,"precipitation_amount_max":0,"precipitation_amount_min":0,"probability_of_precipitation":3.9}}}},{"time":"2022-03-11T06:00:00Z","data":{"instant":{"details":{"air_pressure_at_sea_level":1033.6,"air_temperature":-3.6,"air_temperature_percentile_10":-6.2,"air_temperature_percentile_90":-1.4,"cloud_area_fraction":0,"cloud_area_fraction_high":0,"cloud_area_fraction_low":0,"cloud_area_fraction_medium":0,"dew_point_temperature":-5.7,"relative_humidity":87.3,"wind_from_direction":242.7,"wind_speed":2.2,"wind_speed_percentile_10":1.7,"wind_speed_percentile_90":3.5}},"next_12_hours":{"summary":{"symbol_code":"clearsky_day","symbol_confidence":"uncertain"},"details":{"probability_of_precipitation":9.8}},"next_6_hours":{"summary":{"symbol_code":"clearsky_day"},"details":{"air_temperature_max":3.7,"air_temperature_min":-4.7,"precipitation_amount":0,"precipitation_amount_max":0,"precipitation_amount_min":0,"probability_of_precipitation":7.8}}}},{"time":"2022-03-11T12:00:00Z","data":{"instant":{"details":{"air_pressure_at_sea_level":1032.5,"air_temperature":3.7,"air_temperature_percentile_10":-1.9,"air_temperature_percentile_90":6.7,"cloud_area_fraction":0,"cloud_area_fraction_high":0,"cloud_area_fraction_low":0,"cloud_area_fraction_medium":0,"dew_point_temperature":-9,"relative_humidity":41.2,"wind_from_direction":215.7,"wind_speed":2.7,"wind_speed_percentile_10":1.6,"wind_speed_percentile_90":4.9}},"next_12_hours":{"summary":{"symbol_code":"clearsky_day","symbol_confidence":"somewhat certain"},"details":{"probability_of_precipitation":11.8}},"next_6_hours":{"summary":{"symbol_code":"clearsky_day"},"details":{"air_temperature_max":4.1,"air_temperature_min":-1.3,"precipitation_amount":0,"precipitation_amount_max":0,"precipitation_amount_min":0,"probability_of_precipitation":9.8}}}},{"time":"2022-03-11T18:00:00Z","data":{"instant":{"details":{"air_pressure_at_sea_level":1030.7,"air_temperature":-1.3,"air_temperature_percentile_10":-4.3,"air_temperature_percentile_90":0.7,"cloud_area_fraction":0,"cloud_area_fraction_high":0,"cloud_area_fraction_low":0,"cloud_area_fraction_medium":0,"dew_point_temperature":-5.7,"relative_humidity":74.5,"wind_from_direction":128.6,"wind_speed":2.5,"wind_speed_percentile_10":1.8,"wind_speed_percentile_90":4.1}},"next_12_hours":{"summary":{"symbol_code":"clearsky_night","symbol_confidence":"uncertain"},"details":{"probability_of_precipitation":11.8}},"next_6_hours":{"summary":{"symbol_code":"clearsky_night"},"details":{"air_temperature_max":-1.2,"air_temperature_min":-2.8,"precipitation_amount":0,"precipitation_amount_max":0,"precipitation_amount_min":0,"probability_of_precipitation":9.8}}}},{"time":"2022-03-12T00:00:00Z","data":{"instant":{"details":{"air_pressure_at_sea_level":1030.9,"air_temperature":-2.6,"air_temperature_percentile_10":-5,"air_temperature_percentile_90":-0.3,"cloud_area_fraction":0,"cloud_area_fraction_high":0,"cloud_area_fraction_low":0,"cloud_area_fraction_medium":0,"dew_point_temperature":-5.7,"relative_humidity":81.2,"wind_from_direction":261.8,"wind_speed":2,"wind_speed_percentile_10":0.6,"wind_speed_percentile_90":3.3}},"next_12_hours":{"summary":{"symbol_code":"clearsky_day","symbol_confidence":"uncertain"},"details":{"probability_of_precipitation":11.8}},"next_6_hours":{"summary":{"symbol_code":"clearsky_night"},"details":{"air_temperature_max":-2.8,"air_temperature_min":-4.1,"precipitation_amount":0,"precipitation_amount_max":0,"precipitation_amount_min":0,"probability_of_precipitation":9.8}}}},{"time":"2022-03-12T06:00:00Z","data":{"instant":{"details":{"air_pressure_at_sea_level":1029.8,"air_temperature":-3.7,"air_temperature_percentile_10":-5.9,"air_temperature_percentile_90":-0.3,"cloud_area_fraction":0,"cloud_area_fraction_high":0,"cloud_area_fraction_low":0,"cloud_area_fraction_medium":0,"dew_point_temperature":-6.8,"relative_humidity":82,"wind_from_direction":109.9,"wind_speed":2.3,"wind_speed_percentile_10":1.5,"wind_speed_percentile_90":3.7}},"next_12_hours":{"summary":{"symbol_code":"clearsky_day","symbol_confidence":"uncertain"},"details":{"probability_of_precipitation":11.8}},"next_6_hours":{"summary":{"symbol_code":"clearsky_day"},"details":{"air_temperature_max":4.3,"air_temperature_min":-4.7,"precipitation_amount":0,"precipitation_amount_max":0,"precipitation_amount_min":0,"probability_of_precipitation":11.8}}}},{"time":"2022-03-12T12:00:00Z","data":{"instant":{"details":{"air_pressure_at_sea_level":1029.4,"air_temperature":4.3,"air_temperature_percentile_10":-1.6,"air_temperature_percentile_90":6.7,"cloud_area_fraction":0,"cloud_area_fraction_high":0,"cloud_area_fraction_low":0,"cloud_area_fraction_medium":0,"dew_point_temperature":-7.9,"relative_humidity":42.6,"wind_from_direction":219.7,"wind_speed":2.7,"wind_speed_percentile_10":1.8,"wind_speed_percentile_90":4.6}},"next_6_hours":{"summary":{"symbol_code":"clearsky_day"},"details":{"air_temperature_max":4,"air_temperature_min":-1.5,"precipitation_amount":0,"precipitation_amount_max":0,"precipitation_amount_min":0,"probability_of_precipitation":11.8}}}},{"time":"2022-03-12T18:00:00Z","data":{"instant":{"details":{"air_pressure_at_sea_level":1029.3,"air_temperature":-1.5,"air_temperature_percentile_10":-3.9,"air_temperature_percentile_90":1.8,"cloud_area_fraction":0,"cloud_area_fraction_high":0,"cloud_area_fraction_low":0,"cloud_area_fraction_medium":0,"dew_point_temperature":-5.8,"relative_humidity":75.9,"wind_from_direction":141.2,"wind_speed":2.7,"wind_speed_percentile_10":2.3,"wind_speed_percentile_90":4.1}}}}]}}')}},e={};function i(a){var r=e[a];if(void 0!==r)return r.exports;var n=e[a]={exports:{}};return t[a](n,n.exports,i),n.exports}i.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),(()=>{var t;i.g.importScripts&&(t=i.g.location+"");var e=i.g.document;if(!t&&e&&(e.currentScript&&(t=e.currentScript.src),!t)){var a=e.getElementsByTagName("script");a.length&&(t=a[a.length-1].src)}if(!t)throw new Error("Automatic publicPath is not supported in this browser");t=t.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),i.p=t})(),(()=>{const t="undefined"==typeof window?function(t){return t()}:window.requestAnimationFrame;function e(e,i,a){const r=a||(t=>Array.prototype.slice.call(t));let n=!1,o=[];return function(...a){o=r(a),n||(n=!0,t.call(window,(()=>{n=!1,e.apply(i,o)})))}}const a=t=>"start"===t?"left":"end"===t?"right":"center",r=(t,e,i)=>"start"===t?e:"end"===t?i:(e+i)/2;function n(){}const o=function(){let t=0;return function(){return t++}}();function s(t){return null==t}function l(t){if(Array.isArray&&Array.isArray(t))return!0;const e=Object.prototype.toString.call(t);return"[object"===e.substr(0,7)&&"Array]"===e.substr(-6)}function _(t){return null!==t&&"[object Object]"===Object.prototype.toString.call(t)}const c=t=>("number"==typeof t||t instanceof Number)&&isFinite(+t);function d(t,e){return c(t)?t:e}function h(t,e){return void 0===t?e:t}const p=(t,e)=>"string"==typeof t&&t.endsWith("%")?parseFloat(t)/100*e:+t;function u(t,e,i){if(t&&"function"==typeof t.call)return t.apply(i,e)}function m(t,e,i,a){let r,n,o;if(l(t))if(n=t.length,a)for(r=n-1;r>=0;r--)e.call(i,t[r],r);else for(r=0;r<n;r++)e.call(i,t[r],r);else if(_(t))for(o=Object.keys(t),n=o.length,r=0;r<n;r++)e.call(i,t[o[r]],o[r])}function f(t,e){let i,a,r,n;if(!t||!e||t.length!==e.length)return!1;for(i=0,a=t.length;i<a;++i)if(r=t[i],n=e[i],r.datasetIndex!==n.datasetIndex||r.index!==n.index)return!1;return!0}function g(t){if(l(t))return t.map(g);if(_(t)){const e=Object.create(null),i=Object.keys(t),a=i.length;let r=0;for(;r<a;++r)e[i[r]]=g(t[i[r]]);return e}return t}function b(t){return-1===["__proto__","prototype","constructor"].indexOf(t)}function y(t,e,i,a){if(!b(t))return;const r=e[t],n=i[t];_(r)&&_(n)?x(r,n,a):e[t]=g(n)}function x(t,e,i){const a=l(e)?e:[e],r=a.length;if(!_(t))return t;const n=(i=i||{}).merger||y;for(let o=0;o<r;++o){if(!_(e=a[o]))continue;const r=Object.keys(e);for(let a=0,o=r.length;a<o;++a)n(r[a],t,e,i)}return t}function w(t,e){return x(t,e,{merger:v})}function v(t,e,i){if(!b(t))return;const a=e[t],r=i[t];_(a)&&_(r)?w(a,r):Object.prototype.hasOwnProperty.call(e,t)||(e[t]=g(r))}function k(t,e){const i=t.indexOf(".",e);return-1===i?t.length:i}function M(t,e){if(""===e)return t;let i=0,a=k(e,i);for(;t&&a>i;)t=t[e.substr(i,a-i)],i=a+1,a=k(e,i);return t}function S(t){return t.charAt(0).toUpperCase()+t.slice(1)}const P=t=>void 0!==t,D=t=>"function"==typeof t,T=(t,e)=>{if(t.size!==e.size)return!1;for(const i of t)if(!e.has(i))return!1;return!0},C=Math.PI,O=2*C,A=O+C,L=Number.POSITIVE_INFINITY,R=C/180,E=C/2,I=C/4,z=2*C/3,F=Math.log10,V=Math.sign;function B(t){const e=Math.round(t);t=N(t,e,t/1e3)?e:t;const i=Math.pow(10,Math.floor(F(t))),a=t/i;return(a<=1?1:a<=2?2:a<=5?5:10)*i}function W(t){return!isNaN(parseFloat(t))&&isFinite(t)}function N(t,e,i){return Math.abs(t-e)<i}function H(t,e,i){let a,r,n;for(a=0,r=t.length;a<r;a++)n=t[a][i],isNaN(n)||(e.min=Math.min(e.min,n),e.max=Math.max(e.max,n))}function j(t){return t*(C/180)}function $(t){return t*(180/C)}function Z(t){if(!c(t))return;let e=1,i=0;for(;Math.round(t*e)/e!==t;)e*=10,i++;return i}function Y(t,e){const i=e.x-t.x,a=e.y-t.y,r=Math.sqrt(i*i+a*a);let n=Math.atan2(a,i);return n<-.5*C&&(n+=O),{angle:n,distance:r}}function U(t,e){return Math.sqrt(Math.pow(e.x-t.x,2)+Math.pow(e.y-t.y,2))}function X(t,e){return(t-e+A)%O-C}function q(t){return(t%O+O)%O}function K(t,e,i,a){const r=q(t),n=q(e),o=q(i),s=q(n-r),l=q(o-r),_=q(r-n),c=q(r-o);return r===n||r===o||a&&n===o||s>l&&_<c}function G(t,e,i){return Math.max(e,Math.min(i,t))}function J(t,e,i,a=1e-6){return t>=Math.min(e,i)-a&&t<=Math.max(e,i)+a}const Q=t=>0===t||1===t,tt=(t,e,i)=>-Math.pow(2,10*(t-=1))*Math.sin((t-e)*O/i),et=(t,e,i)=>Math.pow(2,-10*t)*Math.sin((t-e)*O/i)+1,it={linear:t=>t,easeInQuad:t=>t*t,easeOutQuad:t=>-t*(t-2),easeInOutQuad:t=>(t/=.5)<1?.5*t*t:-.5*(--t*(t-2)-1),easeInCubic:t=>t*t*t,easeOutCubic:t=>(t-=1)*t*t+1,easeInOutCubic:t=>(t/=.5)<1?.5*t*t*t:.5*((t-=2)*t*t+2),easeInQuart:t=>t*t*t*t,easeOutQuart:t=>-((t-=1)*t*t*t-1),easeInOutQuart:t=>(t/=.5)<1?.5*t*t*t*t:-.5*((t-=2)*t*t*t-2),easeInQuint:t=>t*t*t*t*t,easeOutQuint:t=>(t-=1)*t*t*t*t+1,easeInOutQuint:t=>(t/=.5)<1?.5*t*t*t*t*t:.5*((t-=2)*t*t*t*t+2),easeInSine:t=>1-Math.cos(t*E),easeOutSine:t=>Math.sin(t*E),easeInOutSine:t=>-.5*(Math.cos(C*t)-1),easeInExpo:t=>0===t?0:Math.pow(2,10*(t-1)),easeOutExpo:t=>1===t?1:1-Math.pow(2,-10*t),easeInOutExpo:t=>Q(t)?t:t<.5?.5*Math.pow(2,10*(2*t-1)):.5*(2-Math.pow(2,-10*(2*t-1))),easeInCirc:t=>t>=1?t:-(Math.sqrt(1-t*t)-1),easeOutCirc:t=>Math.sqrt(1-(t-=1)*t),easeInOutCirc:t=>(t/=.5)<1?-.5*(Math.sqrt(1-t*t)-1):.5*(Math.sqrt(1-(t-=2)*t)+1),easeInElastic:t=>Q(t)?t:tt(t,.075,.3),easeOutElastic:t=>Q(t)?t:et(t,.075,.3),easeInOutElastic(t){const e=.1125;return Q(t)?t:t<.5?.5*tt(2*t,e,.45):.5+.5*et(2*t-1,e,.45)},easeInBack(t){const e=1.70158;return t*t*((e+1)*t-e)},easeOutBack(t){const e=1.70158;return(t-=1)*t*((e+1)*t+e)+1},easeInOutBack(t){let e=1.70158;return(t/=.5)<1?t*t*((1+(e*=1.525))*t-e)*.5:.5*((t-=2)*t*((1+(e*=1.525))*t+e)+2)},easeInBounce:t=>1-it.easeOutBounce(1-t),easeOutBounce(t){const e=7.5625,i=2.75;return t<1/i?e*t*t:t<2/i?e*(t-=1.5/i)*t+.75:t<2.5/i?e*(t-=2.25/i)*t+.9375:e*(t-=2.625/i)*t+.984375},easeInOutBounce:t=>t<.5?.5*it.easeInBounce(2*t):.5*it.easeOutBounce(2*t-1)+.5},at={0:0,1:1,2:2,3:3,4:4,5:5,6:6,7:7,8:8,9:9,A:10,B:11,C:12,D:13,E:14,F:15,a:10,b:11,c:12,d:13,e:14,f:15},rt="0123456789ABCDEF",nt=t=>rt[15&t],ot=t=>rt[(240&t)>>4]+rt[15&t],st=t=>(240&t)>>4==(15&t);function lt(t){return t+.5|0}const _t=(t,e,i)=>Math.max(Math.min(t,i),e);function ct(t){return _t(lt(2.55*t),0,255)}function dt(t){return _t(lt(255*t),0,255)}function ht(t){return _t(lt(t/2.55)/100,0,1)}function pt(t){return _t(lt(100*t),0,100)}const ut=/^rgba?\(\s*([-+.\d]+)(%)?[\s,]+([-+.e\d]+)(%)?[\s,]+([-+.e\d]+)(%)?(?:[\s,/]+([-+.e\d]+)(%)?)?\s*\)$/,mt=/^(hsla?|hwb|hsv)\(\s*([-+.e\d]+)(?:deg)?[\s,]+([-+.e\d]+)%[\s,]+([-+.e\d]+)%(?:[\s,]+([-+.e\d]+)(%)?)?\s*\)$/;function ft(t,e,i){const a=e*Math.min(i,1-i),r=(e,r=(e+t/30)%12)=>i-a*Math.max(Math.min(r-3,9-r,1),-1);return[r(0),r(8),r(4)]}function gt(t,e,i){const a=(a,r=(a+t/60)%6)=>i-i*e*Math.max(Math.min(r,4-r,1),0);return[a(5),a(3),a(1)]}function bt(t,e,i){const a=ft(t,1,.5);let r;for(e+i>1&&(r=1/(e+i),e*=r,i*=r),r=0;r<3;r++)a[r]*=1-e-i,a[r]+=e;return a}function yt(t){const e=t.r/255,i=t.g/255,a=t.b/255,r=Math.max(e,i,a),n=Math.min(e,i,a),o=(r+n)/2;let s,l,_;return r!==n&&(_=r-n,l=o>.5?_/(2-r-n):_/(r+n),s=r===e?(i-a)/_+(i<a?6:0):r===i?(a-e)/_+2:(e-i)/_+4,s=60*s+.5),[0|s,l||0,o]}function xt(t,e,i,a){return(Array.isArray(e)?t(e[0],e[1],e[2]):t(e,i,a)).map(dt)}function wt(t,e,i){return xt(ft,t,e,i)}function vt(t){return(t%360+360)%360}const kt={x:"dark",Z:"light",Y:"re",X:"blu",W:"gr",V:"medium",U:"slate",A:"ee",T:"ol",S:"or",B:"ra",C:"lateg",D:"ights",R:"in",Q:"turquois",E:"hi",P:"ro",O:"al",N:"le",M:"de",L:"yello",F:"en",K:"ch",G:"arks",H:"ea",I:"ightg",J:"wh"},Mt={OiceXe:"f0f8ff",antiquewEte:"faebd7",aqua:"ffff",aquamarRe:"7fffd4",azuY:"f0ffff",beige:"f5f5dc",bisque:"ffe4c4",black:"0",blanKedOmond:"ffebcd",Xe:"ff",XeviTet:"8a2be2",bPwn:"a52a2a",burlywood:"deb887",caMtXe:"5f9ea0",KartYuse:"7fff00",KocTate:"d2691e",cSO:"ff7f50",cSnflowerXe:"6495ed",cSnsilk:"fff8dc",crimson:"dc143c",cyan:"ffff",xXe:"8b",xcyan:"8b8b",xgTMnPd:"b8860b",xWay:"a9a9a9",xgYF:"6400",xgYy:"a9a9a9",xkhaki:"bdb76b",xmagFta:"8b008b",xTivegYF:"556b2f",xSange:"ff8c00",xScEd:"9932cc",xYd:"8b0000",xsOmon:"e9967a",xsHgYF:"8fbc8f",xUXe:"483d8b",xUWay:"2f4f4f",xUgYy:"2f4f4f",xQe:"ced1",xviTet:"9400d3",dAppRk:"ff1493",dApskyXe:"bfff",dimWay:"696969",dimgYy:"696969",dodgerXe:"1e90ff",fiYbrick:"b22222",flSOwEte:"fffaf0",foYstWAn:"228b22",fuKsia:"ff00ff",gaRsbSo:"dcdcdc",ghostwEte:"f8f8ff",gTd:"ffd700",gTMnPd:"daa520",Way:"808080",gYF:"8000",gYFLw:"adff2f",gYy:"808080",honeyMw:"f0fff0",hotpRk:"ff69b4",RdianYd:"cd5c5c",Rdigo:"4b0082",ivSy:"fffff0",khaki:"f0e68c",lavFMr:"e6e6fa",lavFMrXsh:"fff0f5",lawngYF:"7cfc00",NmoncEffon:"fffacd",ZXe:"add8e6",ZcSO:"f08080",Zcyan:"e0ffff",ZgTMnPdLw:"fafad2",ZWay:"d3d3d3",ZgYF:"90ee90",ZgYy:"d3d3d3",ZpRk:"ffb6c1",ZsOmon:"ffa07a",ZsHgYF:"20b2aa",ZskyXe:"87cefa",ZUWay:"778899",ZUgYy:"778899",ZstAlXe:"b0c4de",ZLw:"ffffe0",lime:"ff00",limegYF:"32cd32",lRF:"faf0e6",magFta:"ff00ff",maPon:"800000",VaquamarRe:"66cdaa",VXe:"cd",VScEd:"ba55d3",VpurpN:"9370db",VsHgYF:"3cb371",VUXe:"7b68ee",VsprRggYF:"fa9a",VQe:"48d1cc",VviTetYd:"c71585",midnightXe:"191970",mRtcYam:"f5fffa",mistyPse:"ffe4e1",moccasR:"ffe4b5",navajowEte:"ffdead",navy:"80",Tdlace:"fdf5e6",Tive:"808000",TivedBb:"6b8e23",Sange:"ffa500",SangeYd:"ff4500",ScEd:"da70d6",pOegTMnPd:"eee8aa",pOegYF:"98fb98",pOeQe:"afeeee",pOeviTetYd:"db7093",papayawEp:"ffefd5",pHKpuff:"ffdab9",peru:"cd853f",pRk:"ffc0cb",plum:"dda0dd",powMrXe:"b0e0e6",purpN:"800080",YbeccapurpN:"663399",Yd:"ff0000",Psybrown:"bc8f8f",PyOXe:"4169e1",saddNbPwn:"8b4513",sOmon:"fa8072",sandybPwn:"f4a460",sHgYF:"2e8b57",sHshell:"fff5ee",siFna:"a0522d",silver:"c0c0c0",skyXe:"87ceeb",UXe:"6a5acd",UWay:"708090",UgYy:"708090",snow:"fffafa",sprRggYF:"ff7f",stAlXe:"4682b4",tan:"d2b48c",teO:"8080",tEstN:"d8bfd8",tomato:"ff6347",Qe:"40e0d0",viTet:"ee82ee",JHt:"f5deb3",wEte:"ffffff",wEtesmoke:"f5f5f5",Lw:"ffff00",LwgYF:"9acd32"};let St;function Pt(t,e,i){if(t){let a=yt(t);a[e]=Math.max(0,Math.min(a[e]+a[e]*i,0===e?360:1)),a=wt(a),t.r=a[0],t.g=a[1],t.b=a[2]}}function Dt(t,e){return t?Object.assign(e||{},t):t}function Tt(t){var e={r:0,g:0,b:0,a:255};return Array.isArray(t)?t.length>=3&&(e={r:t[0],g:t[1],b:t[2],a:255},t.length>3&&(e.a=dt(t[3]))):(e=Dt(t,{r:0,g:0,b:0,a:1})).a=dt(e.a),e}function Ct(t){return"r"===t.charAt(0)?function(t){const e=ut.exec(t);let i,a,r,n=255;if(e){if(e[7]!==i){const t=+e[7];n=255&(e[8]?ct(t):255*t)}return i=+e[1],a=+e[3],r=+e[5],i=255&(e[2]?ct(i):i),a=255&(e[4]?ct(a):a),r=255&(e[6]?ct(r):r),{r:i,g:a,b:r,a:n}}}(t):function(t){const e=mt.exec(t);let i,a=255;if(!e)return;e[5]!==i&&(a=e[6]?ct(+e[5]):dt(+e[5]));const r=vt(+e[2]),n=+e[3]/100,o=+e[4]/100;return i="hwb"===e[1]?function(t,e,i){return xt(bt,t,e,i)}(r,n,o):"hsv"===e[1]?function(t,e,i){return xt(gt,t,e,i)}(r,n,o):wt(r,n,o),{r:i[0],g:i[1],b:i[2],a}}(t)}class Ot{constructor(t){if(t instanceof Ot)return t;const e=typeof t;let i;var a,r,n;"object"===e?i=Tt(t):"string"===e&&(n=(a=t).length,"#"===a[0]&&(4===n||5===n?r={r:255&17*at[a[1]],g:255&17*at[a[2]],b:255&17*at[a[3]],a:5===n?17*at[a[4]]:255}:7!==n&&9!==n||(r={r:at[a[1]]<<4|at[a[2]],g:at[a[3]]<<4|at[a[4]],b:at[a[5]]<<4|at[a[6]],a:9===n?at[a[7]]<<4|at[a[8]]:255})),i=r||function(t){St||(St=function(){const t={},e=Object.keys(Mt),i=Object.keys(kt);let a,r,n,o,s;for(a=0;a<e.length;a++){for(o=s=e[a],r=0;r<i.length;r++)n=i[r],s=s.replace(n,kt[n]);n=parseInt(Mt[o],16),t[s]=[n>>16&255,n>>8&255,255&n]}return t}(),St.transparent=[0,0,0,0]);const e=St[t.toLowerCase()];return e&&{r:e[0],g:e[1],b:e[2],a:4===e.length?e[3]:255}}(t)||Ct(t)),this._rgb=i,this._valid=!!i}get valid(){return this._valid}get rgb(){var t=Dt(this._rgb);return t&&(t.a=ht(t.a)),t}set rgb(t){this._rgb=Tt(t)}rgbString(){return this._valid?(t=this._rgb)&&(t.a<255?`rgba(${t.r}, ${t.g}, ${t.b}, ${ht(t.a)})`:`rgb(${t.r}, ${t.g}, ${t.b})`):this._rgb;var t}hexString(){return this._valid?(t=this._rgb,e=function(t){return st(t.r)&&st(t.g)&&st(t.b)&&st(t.a)}(t)?nt:ot,t?"#"+e(t.r)+e(t.g)+e(t.b)+(t.a<255?e(t.a):""):t):this._rgb;var t,e}hslString(){return this._valid?function(t){if(!t)return;const e=yt(t),i=e[0],a=pt(e[1]),r=pt(e[2]);return t.a<255?`hsla(${i}, ${a}%, ${r}%, ${ht(t.a)})`:`hsl(${i}, ${a}%, ${r}%)`}(this._rgb):this._rgb}mix(t,e){const i=this;if(t){const a=i.rgb,r=t.rgb;let n;const o=e===n?.5:e,s=2*o-1,l=a.a-r.a,_=((s*l==-1?s:(s+l)/(1+s*l))+1)/2;n=1-_,a.r=255&_*a.r+n*r.r+.5,a.g=255&_*a.g+n*r.g+.5,a.b=255&_*a.b+n*r.b+.5,a.a=o*a.a+(1-o)*r.a,i.rgb=a}return i}clone(){return new Ot(this.rgb)}alpha(t){return this._rgb.a=dt(t),this}clearer(t){return this._rgb.a*=1-t,this}greyscale(){const t=this._rgb,e=lt(.3*t.r+.59*t.g+.11*t.b);return t.r=t.g=t.b=e,this}opaquer(t){return this._rgb.a*=1+t,this}negate(){const t=this._rgb;return t.r=255-t.r,t.g=255-t.g,t.b=255-t.b,this}lighten(t){return Pt(this._rgb,2,t),this}darken(t){return Pt(this._rgb,2,-t),this}saturate(t){return Pt(this._rgb,1,t),this}desaturate(t){return Pt(this._rgb,1,-t),this}rotate(t){return function(t,e){var i=yt(t);i[0]=vt(i[0]+e),i=wt(i),t.r=i[0],t.g=i[1],t.b=i[2]}(this._rgb,t),this}}function At(t){return new Ot(t)}const Lt=t=>t instanceof CanvasGradient||t instanceof CanvasPattern;function Rt(t){return Lt(t)?t:At(t)}function Et(t){return Lt(t)?t:At(t).saturate(.5).darken(.1).hexString()}const It=Object.create(null),zt=Object.create(null);function Ft(t,e){if(!e)return t;const i=e.split(".");for(let e=0,a=i.length;e<a;++e){const a=i[e];t=t[a]||(t[a]=Object.create(null))}return t}function Vt(t,e,i){return"string"==typeof e?x(Ft(t,e),i):x(Ft(t,""),e)}var Bt=new class{constructor(t){this.animation=void 0,this.backgroundColor="rgba(0,0,0,0.1)",this.borderColor="rgba(0,0,0,0.1)",this.color="#666",this.datasets={},this.devicePixelRatio=t=>t.chart.platform.getDevicePixelRatio(),this.elements={},this.events=["mousemove","mouseout","click","touchstart","touchmove"],this.font={family:"'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",size:12,style:"normal",lineHeight:1.2,weight:null},this.hover={},this.hoverBackgroundColor=(t,e)=>Et(e.backgroundColor),this.hoverBorderColor=(t,e)=>Et(e.borderColor),this.hoverColor=(t,e)=>Et(e.color),this.indexAxis="x",this.interaction={mode:"nearest",intersect:!0},this.maintainAspectRatio=!0,this.onHover=null,this.onClick=null,this.parsing=!0,this.plugins={},this.responsive=!0,this.scale=void 0,this.scales={},this.showLine=!0,this.drawActiveElementsOnTop=!0,this.describe(t)}set(t,e){return Vt(this,t,e)}get(t){return Ft(this,t)}describe(t,e){return Vt(zt,t,e)}override(t,e){return Vt(It,t,e)}route(t,e,i,a){const r=Ft(this,t),n=Ft(this,i),o="_"+e;Object.defineProperties(r,{[o]:{value:r[e],writable:!0},[e]:{enumerable:!0,get(){const t=this[o],e=n[a];return _(t)?Object.assign({},e,t):h(t,e)},set(t){this[o]=t}}})}}({_scriptable:t=>!t.startsWith("on"),_indexable:t=>"events"!==t,hover:{_fallback:"interaction"},interaction:{_scriptable:!1,_indexable:!1}});function Wt(t,e,i,a,r){let n=e[r];return n||(n=e[r]=t.measureText(r).width,i.push(r)),n>a&&(a=n),a}function Nt(t,e,i,a){let r=(a=a||{}).data=a.data||{},n=a.garbageCollect=a.garbageCollect||[];a.font!==e&&(r=a.data={},n=a.garbageCollect=[],a.font=e),t.save(),t.font=e;let o=0;const s=i.length;let _,c,d,h,p;for(_=0;_<s;_++)if(h=i[_],null!=h&&!0!==l(h))o=Wt(t,r,n,o,h);else if(l(h))for(c=0,d=h.length;c<d;c++)p=h[c],null==p||l(p)||(o=Wt(t,r,n,o,p));t.restore();const u=n.length/2;if(u>i.length){for(_=0;_<u;_++)delete r[n[_]];n.splice(0,u)}return o}function Ht(t,e,i){const a=t.currentDevicePixelRatio,r=0!==i?Math.max(i/2,.5):0;return Math.round((e-r)*a)/a+r}function jt(t,e){(e=e||t.getContext("2d")).save(),e.resetTransform(),e.clearRect(0,0,t.width,t.height),e.restore()}function $t(t,e,i,a){let r,n,o,s,l;const _=e.pointStyle,c=e.rotation,d=e.radius;let h=(c||0)*R;if(_&&"object"==typeof _&&(r=_.toString(),"[object HTMLImageElement]"===r||"[object HTMLCanvasElement]"===r))return t.save(),t.translate(i,a),t.rotate(h),t.drawImage(_,-_.width/2,-_.height/2,_.width,_.height),void t.restore();if(!(isNaN(d)||d<=0)){switch(t.beginPath(),_){default:t.arc(i,a,d,0,O),t.closePath();break;case"triangle":t.moveTo(i+Math.sin(h)*d,a-Math.cos(h)*d),h+=z,t.lineTo(i+Math.sin(h)*d,a-Math.cos(h)*d),h+=z,t.lineTo(i+Math.sin(h)*d,a-Math.cos(h)*d),t.closePath();break;case"rectRounded":l=.516*d,s=d-l,n=Math.cos(h+I)*s,o=Math.sin(h+I)*s,t.arc(i-n,a-o,l,h-C,h-E),t.arc(i+o,a-n,l,h-E,h),t.arc(i+n,a+o,l,h,h+E),t.arc(i-o,a+n,l,h+E,h+C),t.closePath();break;case"rect":if(!c){s=Math.SQRT1_2*d,t.rect(i-s,a-s,2*s,2*s);break}h+=I;case"rectRot":n=Math.cos(h)*d,o=Math.sin(h)*d,t.moveTo(i-n,a-o),t.lineTo(i+o,a-n),t.lineTo(i+n,a+o),t.lineTo(i-o,a+n),t.closePath();break;case"crossRot":h+=I;case"cross":n=Math.cos(h)*d,o=Math.sin(h)*d,t.moveTo(i-n,a-o),t.lineTo(i+n,a+o),t.moveTo(i+o,a-n),t.lineTo(i-o,a+n);break;case"star":n=Math.cos(h)*d,o=Math.sin(h)*d,t.moveTo(i-n,a-o),t.lineTo(i+n,a+o),t.moveTo(i+o,a-n),t.lineTo(i-o,a+n),h+=I,n=Math.cos(h)*d,o=Math.sin(h)*d,t.moveTo(i-n,a-o),t.lineTo(i+n,a+o),t.moveTo(i+o,a-n),t.lineTo(i-o,a+n);break;case"line":n=Math.cos(h)*d,o=Math.sin(h)*d,t.moveTo(i-n,a-o),t.lineTo(i+n,a+o);break;case"dash":t.moveTo(i,a),t.lineTo(i+Math.cos(h)*d,a+Math.sin(h)*d)}t.fill(),e.borderWidth>0&&t.stroke()}}function Zt(t,e,i){return i=i||.5,!e||t&&t.x>e.left-i&&t.x<e.right+i&&t.y>e.top-i&&t.y<e.bottom+i}function Yt(t,e){t.save(),t.beginPath(),t.rect(e.left,e.top,e.right-e.left,e.bottom-e.top),t.clip()}function Ut(t){t.restore()}function Xt(t,e,i,a,r){if(!e)return t.lineTo(i.x,i.y);if("middle"===r){const a=(e.x+i.x)/2;t.lineTo(a,e.y),t.lineTo(a,i.y)}else"after"===r!=!!a?t.lineTo(e.x,i.y):t.lineTo(i.x,e.y);t.lineTo(i.x,i.y)}function qt(t,e,i,a){if(!e)return t.lineTo(i.x,i.y);t.bezierCurveTo(a?e.cp1x:e.cp2x,a?e.cp1y:e.cp2y,a?i.cp2x:i.cp1x,a?i.cp2y:i.cp1y,i.x,i.y)}function Kt(t,e,i,a,r,n={}){const o=l(e)?e:[e],_=n.strokeWidth>0&&""!==n.strokeColor;let c,d;for(t.save(),t.font=r.string,function(t,e){e.translation&&t.translate(e.translation[0],e.translation[1]),s(e.rotation)||t.rotate(e.rotation),e.color&&(t.fillStyle=e.color),e.textAlign&&(t.textAlign=e.textAlign),e.textBaseline&&(t.textBaseline=e.textBaseline)}(t,n),c=0;c<o.length;++c)d=o[c],_&&(n.strokeColor&&(t.strokeStyle=n.strokeColor),s(n.strokeWidth)||(t.lineWidth=n.strokeWidth),t.strokeText(d,i,a,n.maxWidth)),t.fillText(d,i,a,n.maxWidth),Gt(t,i,a,d,n),a+=r.lineHeight;t.restore()}function Gt(t,e,i,a,r){if(r.strikethrough||r.underline){const n=t.measureText(a),o=e-n.actualBoundingBoxLeft,s=e+n.actualBoundingBoxRight,l=i-n.actualBoundingBoxAscent,_=i+n.actualBoundingBoxDescent,c=r.strikethrough?(l+_)/2:_;t.strokeStyle=t.fillStyle,t.beginPath(),t.lineWidth=r.decorationWidth||2,t.moveTo(o,c),t.lineTo(s,c),t.stroke()}}function Jt(t,e){const{x:i,y:a,w:r,h:n,radius:o}=e;t.arc(i+o.topLeft,a+o.topLeft,o.topLeft,-E,C,!0),t.lineTo(i,a+n-o.bottomLeft),t.arc(i+o.bottomLeft,a+n-o.bottomLeft,o.bottomLeft,C,E,!0),t.lineTo(i+r-o.bottomRight,a+n),t.arc(i+r-o.bottomRight,a+n-o.bottomRight,o.bottomRight,E,0,!0),t.lineTo(i+r,a+o.topRight),t.arc(i+r-o.topRight,a+o.topRight,o.topRight,0,-E,!0),t.lineTo(i+o.topLeft,a)}const Qt=new RegExp(/^(normal|(\d+(?:\.\d+)?)(px|em|%)?)$/),te=new RegExp(/^(normal|italic|initial|inherit|unset|(oblique( -?[0-9]?[0-9]deg)?))$/);function ee(t,e){const i=(""+t).match(Qt);if(!i||"normal"===i[1])return 1.2*e;switch(t=+i[2],i[3]){case"px":return t;case"%":t/=100}return e*t}function ie(t,e){const i={},a=_(e),r=a?Object.keys(e):e,n=_(t)?a?i=>h(t[i],t[e[i]]):e=>t[e]:()=>t;for(const t of r)i[t]=+n(t)||0;return i}function ae(t){return ie(t,{top:"y",right:"x",bottom:"y",left:"x"})}function re(t){return ie(t,["topLeft","topRight","bottomLeft","bottomRight"])}function ne(t){const e=ae(t);return e.width=e.left+e.right,e.height=e.top+e.bottom,e}function oe(t,e){t=t||{},e=e||Bt.font;let i=h(t.size,e.size);"string"==typeof i&&(i=parseInt(i,10));let a=h(t.style,e.style);a&&!(""+a).match(te)&&(console.warn('Invalid font style specified: "'+a+'"'),a="");const r={family:h(t.family,e.family),lineHeight:ee(h(t.lineHeight,e.lineHeight),i),size:i,style:a,weight:h(t.weight,e.weight),string:""};return r.string=function(t){return!t||s(t.size)||s(t.family)?null:(t.style?t.style+" ":"")+(t.weight?t.weight+" ":"")+t.size+"px "+t.family}(r),r}function se(t,e,i,a){let r,n,o,s=!0;for(r=0,n=t.length;r<n;++r)if(o=t[r],void 0!==o&&(void 0!==e&&"function"==typeof o&&(o=o(e),s=!1),void 0!==i&&l(o)&&(o=o[i%o.length],s=!1),void 0!==o))return a&&!s&&(a.cacheable=!1),o}function le(t,e){return Object.assign(Object.create(t),e)}function _e(t,e,i){i=i||(i=>t[i]<e);let a,r=t.length-1,n=0;for(;r-n>1;)a=n+r>>1,i(a)?n=a:r=a;return{lo:n,hi:r}}const ce=(t,e,i)=>_e(t,i,(a=>t[a][e]<i)),de=(t,e,i)=>_e(t,i,(a=>t[a][e]>=i)),he=["push","pop","shift","splice","unshift"];function pe(t,e){const i=t._chartjs;if(!i)return;const a=i.listeners,r=a.indexOf(e);-1!==r&&a.splice(r,1),a.length>0||(he.forEach((e=>{delete t[e]})),delete t._chartjs)}function ue(t){const e=new Set;let i,a;for(i=0,a=t.length;i<a;++i)e.add(t[i]);return e.size===a?t:Array.from(e)}function me(t,e=[""],i=t,a,r=(()=>t[0])){P(a)||(a=Pe("_fallback",t));const n={[Symbol.toStringTag]:"Object",_cacheable:!0,_scopes:t,_rootScopes:i,_fallback:a,_getTarget:r,override:r=>me([r,...t],e,i,a)};return new Proxy(n,{deleteProperty:(e,i)=>(delete e[i],delete e._keys,delete t[0][i],!0),get:(i,a)=>xe(i,a,(()=>function(t,e,i,a){let r;for(const n of e)if(r=Pe(be(n,t),i),P(r))return ye(t,r)?Me(i,a,t,r):r}(a,e,t,i))),getOwnPropertyDescriptor:(t,e)=>Reflect.getOwnPropertyDescriptor(t._scopes[0],e),getPrototypeOf:()=>Reflect.getPrototypeOf(t[0]),has:(t,e)=>De(t).includes(e),ownKeys:t=>De(t),set(t,e,i){const a=t._storage||(t._storage=r());return t[e]=a[e]=i,delete t._keys,!0}})}function fe(t,e,i,a){const r={_cacheable:!1,_proxy:t,_context:e,_subProxy:i,_stack:new Set,_descriptors:ge(t,a),setContext:e=>fe(t,e,i,a),override:r=>fe(t.override(r),e,i,a)};return new Proxy(r,{deleteProperty:(e,i)=>(delete e[i],delete t[i],!0),get:(t,e,i)=>xe(t,e,(()=>function(t,e,i){const{_proxy:a,_context:r,_subProxy:n,_descriptors:o}=t;let s=a[e];return D(s)&&o.isScriptable(e)&&(s=function(t,e,i,a){const{_proxy:r,_context:n,_subProxy:o,_stack:s}=i;if(s.has(t))throw new Error("Recursion detected: "+Array.from(s).join("->")+"->"+t);return s.add(t),e=e(n,o||a),s.delete(t),ye(t,e)&&(e=Me(r._scopes,r,t,e)),e}(e,s,t,i)),l(s)&&s.length&&(s=function(t,e,i,a){const{_proxy:r,_context:n,_subProxy:o,_descriptors:s}=i;if(P(n.index)&&a(t))e=e[n.index%e.length];else if(_(e[0])){const i=e,a=r._scopes.filter((t=>t!==i));e=[];for(const l of i){const i=Me(a,r,t,l);e.push(fe(i,n,o&&o[t],s))}}return e}(e,s,t,o.isIndexable)),ye(e,s)&&(s=fe(s,r,n&&n[e],o)),s}(t,e,i))),getOwnPropertyDescriptor:(e,i)=>e._descriptors.allKeys?Reflect.has(t,i)?{enumerable:!0,configurable:!0}:void 0:Reflect.getOwnPropertyDescriptor(t,i),getPrototypeOf:()=>Reflect.getPrototypeOf(t),has:(e,i)=>Reflect.has(t,i),ownKeys:()=>Reflect.ownKeys(t),set:(e,i,a)=>(t[i]=a,delete e[i],!0)})}function ge(t,e={scriptable:!0,indexable:!0}){const{_scriptable:i=e.scriptable,_indexable:a=e.indexable,_allKeys:r=e.allKeys}=t;return{allKeys:r,scriptable:i,indexable:a,isScriptable:D(i)?i:()=>i,isIndexable:D(a)?a:()=>a}}const be=(t,e)=>t?t+S(e):e,ye=(t,e)=>_(e)&&"adapters"!==t&&(null===Object.getPrototypeOf(e)||e.constructor===Object);function xe(t,e,i){if(Object.prototype.hasOwnProperty.call(t,e))return t[e];const a=i();return t[e]=a,a}function we(t,e,i){return D(t)?t(e,i):t}const ve=(t,e)=>!0===t?e:"string"==typeof t?M(e,t):void 0;function ke(t,e,i,a,r){for(const n of e){const e=ve(i,n);if(e){t.add(e);const n=we(e._fallback,i,r);if(P(n)&&n!==i&&n!==a)return n}else if(!1===e&&P(a)&&i!==a)return null}return!1}function Me(t,e,i,a){const r=e._rootScopes,n=we(e._fallback,i,a),o=[...t,...r],s=new Set;s.add(a);let c=Se(s,o,i,n||i,a);return null!==c&&(!P(n)||n===i||(c=Se(s,o,n,c,a),null!==c))&&me(Array.from(s),[""],r,n,(()=>function(t,e,i){const a=t._getTarget();e in a||(a[e]={});const r=a[e];return l(r)&&_(i)?i:r}(e,i,a)))}function Se(t,e,i,a,r){for(;i;)i=ke(t,e,i,a,r);return i}function Pe(t,e){for(const i of e){if(!i)continue;const e=i[t];if(P(e))return e}}function De(t){let e=t._keys;return e||(e=t._keys=function(t){const e=new Set;for(const i of t)for(const t of Object.keys(i).filter((t=>!t.startsWith("_"))))e.add(t);return Array.from(e)}(t._scopes)),e}const Te=Number.EPSILON||1e-14,Ce=(t,e)=>e<t.length&&!t[e].skip&&t[e],Oe=t=>"x"===t?"y":"x";function Ae(t,e,i,a){const r=t.skip?e:t,n=e,o=i.skip?e:i,s=U(n,r),l=U(o,n);let _=s/(s+l),c=l/(s+l);_=isNaN(_)?0:_,c=isNaN(c)?0:c;const d=a*_,h=a*c;return{previous:{x:n.x-d*(o.x-r.x),y:n.y-d*(o.y-r.y)},next:{x:n.x+h*(o.x-r.x),y:n.y+h*(o.y-r.y)}}}function Le(t,e,i){return Math.max(Math.min(t,i),e)}function Re(t,e,i,a,r){let n,o,s,l;if(e.spanGaps&&(t=t.filter((t=>!t.skip))),"monotone"===e.cubicInterpolationMode)!function(t,e="x"){const i=Oe(e),a=t.length,r=Array(a).fill(0),n=Array(a);let o,s,l,_=Ce(t,0);for(o=0;o<a;++o)if(s=l,l=_,_=Ce(t,o+1),l){if(_){const t=_[e]-l[e];r[o]=0!==t?(_[i]-l[i])/t:0}n[o]=s?_?V(r[o-1])!==V(r[o])?0:(r[o-1]+r[o])/2:r[o-1]:r[o]}!function(t,e,i){const a=t.length;let r,n,o,s,l,_=Ce(t,0);for(let c=0;c<a-1;++c)l=_,_=Ce(t,c+1),l&&_&&(N(e[c],0,Te)?i[c]=i[c+1]=0:(r=i[c]/e[c],n=i[c+1]/e[c],s=Math.pow(r,2)+Math.pow(n,2),s<=9||(o=3/Math.sqrt(s),i[c]=r*o*e[c],i[c+1]=n*o*e[c])))}(t,r,n),function(t,e,i="x"){const a=Oe(i),r=t.length;let n,o,s,l=Ce(t,0);for(let _=0;_<r;++_){if(o=s,s=l,l=Ce(t,_+1),!s)continue;const r=s[i],c=s[a];o&&(n=(r-o[i])/3,s[`cp1${i}`]=r-n,s[`cp1${a}`]=c-n*e[_]),l&&(n=(l[i]-r)/3,s[`cp2${i}`]=r+n,s[`cp2${a}`]=c+n*e[_])}}(t,n,e)}(t,r);else{let i=a?t[t.length-1]:t[0];for(n=0,o=t.length;n<o;++n)s=t[n],l=Ae(i,s,t[Math.min(n+1,o-(a?0:1))%o],e.tension),s.cp1x=l.previous.x,s.cp1y=l.previous.y,s.cp2x=l.next.x,s.cp2y=l.next.y,i=s}e.capBezierPoints&&function(t,e){let i,a,r,n,o,s=Zt(t[0],e);for(i=0,a=t.length;i<a;++i)o=n,n=s,s=i<a-1&&Zt(t[i+1],e),n&&(r=t[i],o&&(r.cp1x=Le(r.cp1x,e.left,e.right),r.cp1y=Le(r.cp1y,e.top,e.bottom)),s&&(r.cp2x=Le(r.cp2x,e.left,e.right),r.cp2y=Le(r.cp2y,e.top,e.bottom)))}(t,i)}function Ee(){return"undefined"!=typeof window&&"undefined"!=typeof document}function Ie(t){let e=t.parentNode;return e&&"[object ShadowRoot]"===e.toString()&&(e=e.host),e}function ze(t,e,i){let a;return"string"==typeof t?(a=parseInt(t,10),-1!==t.indexOf("%")&&(a=a/100*e.parentNode[i])):a=t,a}const Fe=t=>window.getComputedStyle(t,null),Ve=["top","right","bottom","left"];function Be(t,e,i){const a={};i=i?"-"+i:"";for(let r=0;r<4;r++){const n=Ve[r];a[n]=parseFloat(t[e+"-"+n+i])||0}return a.width=a.left+a.right,a.height=a.top+a.bottom,a}function We(t,e){const{canvas:i,currentDevicePixelRatio:a}=e,r=Fe(i),n="border-box"===r.boxSizing,o=Be(r,"padding"),s=Be(r,"border","width"),{x:l,y:_,box:c}=function(t,e){const i=t.native||t,a=i.touches,r=a&&a.length?a[0]:i,{offsetX:n,offsetY:o}=r;let s,l,_=!1;if(((t,e,i)=>(t>0||e>0)&&(!i||!i.shadowRoot))(n,o,i.target))s=n,l=o;else{const t=e.getBoundingClientRect();s=r.clientX-t.left,l=r.clientY-t.top,_=!0}return{x:s,y:l,box:_}}(t,i),d=o.left+(c&&s.left),h=o.top+(c&&s.top);let{width:p,height:u}=e;return n&&(p-=o.width+s.width,u-=o.height+s.height),{x:Math.round((l-d)/p*i.width/a),y:Math.round((_-h)/u*i.height/a)}}const Ne=t=>Math.round(10*t)/10;function He(t,e,i){const a=e||1,r=Math.floor(t.height*a),n=Math.floor(t.width*a);t.height=r/a,t.width=n/a;const o=t.canvas;return o.style&&(i||!o.style.height&&!o.style.width)&&(o.style.height=`${t.height}px`,o.style.width=`${t.width}px`),(t.currentDevicePixelRatio!==a||o.height!==r||o.width!==n)&&(t.currentDevicePixelRatio=a,o.height=r,o.width=n,t.ctx.setTransform(a,0,0,a,0,0),!0)}const je=function(){let t=!1;try{const e={get passive(){return t=!0,!1}};window.addEventListener("test",null,e),window.removeEventListener("test",null,e)}catch(t){}return t}();function $e(t,e){const i=function(t,e){return Fe(t).getPropertyValue(e)}(t,e),a=i&&i.match(/^(\d+)(\.\d+)?px$/);return a?+a[1]:void 0}function Ze(t,e,i,a){return{x:t.x+i*(e.x-t.x),y:t.y+i*(e.y-t.y)}}function Ye(t,e,i,a){return{x:t.x+i*(e.x-t.x),y:"middle"===a?i<.5?t.y:e.y:"after"===a?i<1?t.y:e.y:i>0?e.y:t.y}}function Ue(t,e,i,a){const r={x:t.cp2x,y:t.cp2y},n={x:e.cp1x,y:e.cp1y},o=Ze(t,r,i),s=Ze(r,n,i),l=Ze(n,e,i),_=Ze(o,s,i),c=Ze(s,l,i);return Ze(_,c,i)}const Xe=new Map;function qe(t,e,i){return function(t,e){e=e||{};const i=t+JSON.stringify(e);let a=Xe.get(i);return a||(a=new Intl.NumberFormat(t,e),Xe.set(i,a)),a}(e,i).format(t)}function Ke(t,e,i){return t?function(t,e){return{x:i=>t+t+e-i,setWidth(t){e=t},textAlign:t=>"center"===t?t:"right"===t?"left":"right",xPlus:(t,e)=>t-e,leftForLtr:(t,e)=>t-e}}(e,i):{x:t=>t,setWidth(t){},textAlign:t=>t,xPlus:(t,e)=>t+e,leftForLtr:(t,e)=>t}}function Ge(t,e){let i,a;"ltr"!==e&&"rtl"!==e||(i=t.canvas.style,a=[i.getPropertyValue("direction"),i.getPropertyPriority("direction")],i.setProperty("direction",e,"important"),t.prevTextDirection=a)}function Je(t,e){void 0!==e&&(delete t.prevTextDirection,t.canvas.style.setProperty("direction",e[0],e[1]))}function Qe(t){return"angle"===t?{between:K,compare:X,normalize:q}:{between:J,compare:(t,e)=>t-e,normalize:t=>t}}function ti({start:t,end:e,count:i,loop:a,style:r}){return{start:t%i,end:e%i,loop:a&&(e-t+1)%i==0,style:r}}function ei(t,e,i){if(!i)return[t];const{property:a,start:r,end:n}=i,o=e.length,{compare:s,between:l,normalize:_}=Qe(a),{start:c,end:d,loop:h,style:p}=function(t,e,i){const{property:a,start:r,end:n}=i,{between:o,normalize:s}=Qe(a),l=e.length;let _,c,{start:d,end:h,loop:p}=t;if(p){for(d+=l,h+=l,_=0,c=l;_<c&&o(s(e[d%l][a]),r,n);++_)d--,h--;d%=l,h%=l}return h<d&&(h+=l),{start:d,end:h,loop:p,style:t.style}}(t,e,i),u=[];let m,f,g,b=!1,y=null;for(let t=c,i=c;t<=d;++t)f=e[t%o],f.skip||(m=_(f[a]),m!==g&&(b=l(m,r,n),null===y&&(b||l(r,g,m)&&0!==s(r,g))&&(y=0===s(m,r)?t:i),null!==y&&(!b||0===s(n,m)||l(n,g,m))&&(u.push(ti({start:y,end:t,loop:h,count:o,style:p})),y=null),i=t,g=m));return null!==y&&u.push(ti({start:y,end:d,loop:h,count:o,style:p})),u}function ii(t,e){const i=[],a=t.segments;for(let r=0;r<a.length;r++){const n=ei(a[r],t.points,e);n.length&&i.push(...n)}return i}function ai(t){return{backgroundColor:t.backgroundColor,borderCapStyle:t.borderCapStyle,borderDash:t.borderDash,borderDashOffset:t.borderDashOffset,borderJoinStyle:t.borderJoinStyle,borderWidth:t.borderWidth,borderColor:t.borderColor}}function ri(t,e){return e&&JSON.stringify(t)!==JSON.stringify(e)}var ni=new class{constructor(){this._request=null,this._charts=new Map,this._running=!1,this._lastDate=void 0}_notify(t,e,i,a){const r=e.listeners[a],n=e.duration;r.forEach((a=>a({chart:t,initial:e.initial,numSteps:n,currentStep:Math.min(i-e.start,n)})))}_refresh(){this._request||(this._running=!0,this._request=t.call(window,(()=>{this._update(),this._request=null,this._running&&this._refresh()})))}_update(t=Date.now()){let e=0;this._charts.forEach(((i,a)=>{if(!i.running||!i.items.length)return;const r=i.items;let n,o=r.length-1,s=!1;for(;o>=0;--o)n=r[o],n._active?(n._total>i.duration&&(i.duration=n._total),n.tick(t),s=!0):(r[o]=r[r.length-1],r.pop());s&&(a.draw(),this._notify(a,i,t,"progress")),r.length||(i.running=!1,this._notify(a,i,t,"complete"),i.initial=!1),e+=r.length})),this._lastDate=t,0===e&&(this._running=!1)}_getAnims(t){const e=this._charts;let i=e.get(t);return i||(i={running:!1,initial:!0,items:[],listeners:{complete:[],progress:[]}},e.set(t,i)),i}listen(t,e,i){this._getAnims(t).listeners[e].push(i)}add(t,e){e&&e.length&&this._getAnims(t).items.push(...e)}has(t){return this._getAnims(t).items.length>0}start(t){const e=this._charts.get(t);e&&(e.running=!0,e.start=Date.now(),e.duration=e.items.reduce(((t,e)=>Math.max(t,e._duration)),0),this._refresh())}running(t){if(!this._running)return!1;const e=this._charts.get(t);return!!(e&&e.running&&e.items.length)}stop(t){const e=this._charts.get(t);if(!e||!e.items.length)return;const i=e.items;let a=i.length-1;for(;a>=0;--a)i[a].cancel();e.items=[],this._notify(t,e,Date.now(),"complete")}remove(t){return this._charts.delete(t)}};const oi="transparent",si={boolean:(t,e,i)=>i>.5?e:t,color(t,e,i){const a=Rt(t||oi),r=a.valid&&Rt(e||oi);return r&&r.valid?r.mix(a,i).hexString():e},number:(t,e,i)=>t+(e-t)*i};class li{constructor(t,e,i,a){const r=e[i];a=se([t.to,a,r,t.from]);const n=se([t.from,r,a]);this._active=!0,this._fn=t.fn||si[t.type||typeof n],this._easing=it[t.easing]||it.linear,this._start=Math.floor(Date.now()+(t.delay||0)),this._duration=this._total=Math.floor(t.duration),this._loop=!!t.loop,this._target=e,this._prop=i,this._from=n,this._to=a,this._promises=void 0}active(){return this._active}update(t,e,i){if(this._active){this._notify(!1);const a=this._target[this._prop],r=i-this._start,n=this._duration-r;this._start=i,this._duration=Math.floor(Math.max(n,t.duration)),this._total+=r,this._loop=!!t.loop,this._to=se([t.to,e,a,t.from]),this._from=se([t.from,a,e])}}cancel(){this._active&&(this.tick(Date.now()),this._active=!1,this._notify(!1))}tick(t){const e=t-this._start,i=this._duration,a=this._prop,r=this._from,n=this._loop,o=this._to;let s;if(this._active=r!==o&&(n||e<i),!this._active)return this._target[a]=o,void this._notify(!0);e<0?this._target[a]=r:(s=e/i%2,s=n&&s>1?2-s:s,s=this._easing(Math.min(1,Math.max(0,s))),this._target[a]=this._fn(r,o,s))}wait(){const t=this._promises||(this._promises=[]);return new Promise(((e,i)=>{t.push({res:e,rej:i})}))}_notify(t){const e=t?"res":"rej",i=this._promises||[];for(let t=0;t<i.length;t++)i[t][e]()}}Bt.set("animation",{delay:void 0,duration:1e3,easing:"easeOutQuart",fn:void 0,from:void 0,loop:void 0,to:void 0,type:void 0});const _i=Object.keys(Bt.animation);Bt.describe("animation",{_fallback:!1,_indexable:!1,_scriptable:t=>"onProgress"!==t&&"onComplete"!==t&&"fn"!==t}),Bt.set("animations",{colors:{type:"color",properties:["color","borderColor","backgroundColor"]},numbers:{type:"number",properties:["x","y","borderWidth","radius","tension"]}}),Bt.describe("animations",{_fallback:"animation"}),Bt.set("transitions",{active:{animation:{duration:400}},resize:{animation:{duration:0}},show:{animations:{colors:{from:"transparent"},visible:{type:"boolean",duration:0}}},hide:{animations:{colors:{to:"transparent"},visible:{type:"boolean",easing:"linear",fn:t=>0|t}}}});class ci{constructor(t,e){this._chart=t,this._properties=new Map,this.configure(e)}configure(t){if(!_(t))return;const e=this._properties;Object.getOwnPropertyNames(t).forEach((i=>{const a=t[i];if(!_(a))return;const r={};for(const t of _i)r[t]=a[t];(l(a.properties)&&a.properties||[i]).forEach((t=>{t!==i&&e.has(t)||e.set(t,r)}))}))}_animateOptions(t,e){const i=e.options,a=function(t,e){if(!e)return;let i=t.options;if(i)return i.$shared&&(t.options=i=Object.assign({},i,{$shared:!1,$animations:{}})),i;t.options=e}(t,i);if(!a)return[];const r=this._createAnimations(a,i);return i.$shared&&function(t,e){const i=[],a=Object.keys(e);for(let e=0;e<a.length;e++){const r=t[a[e]];r&&r.active()&&i.push(r.wait())}return Promise.all(i)}(t.options.$animations,i).then((()=>{t.options=i}),(()=>{})),r}_createAnimations(t,e){const i=this._properties,a=[],r=t.$animations||(t.$animations={}),n=Object.keys(e),o=Date.now();let s;for(s=n.length-1;s>=0;--s){const l=n[s];if("$"===l.charAt(0))continue;if("options"===l){a.push(...this._animateOptions(t,e));continue}const _=e[l];let c=r[l];const d=i.get(l);if(c){if(d&&c.active()){c.update(d,_,o);continue}c.cancel()}d&&d.duration?(r[l]=c=new li(d,t,l,_),a.push(c)):t[l]=_}return a}update(t,e){if(0===this._properties.size)return void Object.assign(t,e);const i=this._createAnimations(t,e);return i.length?(ni.add(this._chart,i),!0):void 0}}function di(t,e){const i=t&&t.options||{},a=i.reverse,r=void 0===i.min?e:0,n=void 0===i.max?e:0;return{start:a?n:r,end:a?r:n}}function hi(t,e){const i=[],a=t._getSortedDatasetMetas(e);let r,n;for(r=0,n=a.length;r<n;++r)i.push(a[r].index);return i}function pi(t,e,i,a={}){const r=t.keys,n="single"===a.mode;let o,s,l,_;if(null!==e){for(o=0,s=r.length;o<s;++o){if(l=+r[o],l===i){if(a.all)continue;break}_=t.values[l],c(_)&&(n||0===e||V(e)===V(_))&&(e+=_)}return e}}function ui(t,e){const i=t&&t.options.stacked;return i||void 0===i&&void 0!==e.stack}function mi(t,e,i){const a=t[e]||(t[e]={});return a[i]||(a[i]={})}function fi(t,e,i,a){for(const r of e.getMatchingVisibleMetas(a).reverse()){const e=t[r.index];if(i&&e>0||!i&&e<0)return r.index}return null}function gi(t,e){const{chart:i,_cachedMeta:a}=t,r=i._stacks||(i._stacks={}),{iScale:n,vScale:o,index:s}=a,l=n.axis,_=o.axis,c=function(t,e,i){return`${t.id}.${e.id}.${i.stack||i.type}`}(n,o,a),d=e.length;let h;for(let t=0;t<d;++t){const i=e[t],{[l]:n,[_]:d}=i;h=(i._stacks||(i._stacks={}))[_]=mi(r,c,n),h[s]=d,h._top=fi(h,o,!0,a.type),h._bottom=fi(h,o,!1,a.type)}}function bi(t,e){const i=t.scales;return Object.keys(i).filter((t=>i[t].axis===e)).shift()}function yi(t,e){const i=t.controller.index,a=t.vScale&&t.vScale.axis;if(a){e=e||t._parsed;for(const t of e){const e=t._stacks;if(!e||void 0===e[a]||void 0===e[a][i])return;delete e[a][i]}}}const xi=t=>"reset"===t||"none"===t,wi=(t,e)=>e?t:Object.assign({},t);class vi{constructor(t,e){this.chart=t,this._ctx=t.ctx,this.index=e,this._cachedDataOpts={},this._cachedMeta=this.getMeta(),this._type=this._cachedMeta.type,this.options=void 0,this._parsing=!1,this._data=void 0,this._objectData=void 0,this._sharedOptions=void 0,this._drawStart=void 0,this._drawCount=void 0,this.enableOptionSharing=!1,this.$context=void 0,this._syncList=[],this.initialize()}initialize(){const t=this._cachedMeta;this.configure(),this.linkScales(),t._stacked=ui(t.vScale,t),this.addElements()}updateIndex(t){this.index!==t&&yi(this._cachedMeta),this.index=t}linkScales(){const t=this.chart,e=this._cachedMeta,i=this.getDataset(),a=(t,e,i,a)=>"x"===t?e:"r"===t?a:i,r=e.xAxisID=h(i.xAxisID,bi(t,"x")),n=e.yAxisID=h(i.yAxisID,bi(t,"y")),o=e.rAxisID=h(i.rAxisID,bi(t,"r")),s=e.indexAxis,l=e.iAxisID=a(s,r,n,o),_=e.vAxisID=a(s,n,r,o);e.xScale=this.getScaleForId(r),e.yScale=this.getScaleForId(n),e.rScale=this.getScaleForId(o),e.iScale=this.getScaleForId(l),e.vScale=this.getScaleForId(_)}getDataset(){return this.chart.data.datasets[this.index]}getMeta(){return this.chart.getDatasetMeta(this.index)}getScaleForId(t){return this.chart.scales[t]}_getOtherScale(t){const e=this._cachedMeta;return t===e.iScale?e.vScale:e.iScale}reset(){this._update("reset")}_destroy(){const t=this._cachedMeta;this._data&&pe(this._data,this),t._stacked&&yi(t)}_dataCheck(){const t=this.getDataset(),e=t.data||(t.data=[]),i=this._data;if(_(e))this._data=function(t){const e=Object.keys(t),i=new Array(e.length);let a,r,n;for(a=0,r=e.length;a<r;++a)n=e[a],i[a]={x:n,y:t[n]};return i}(e);else if(i!==e){if(i){pe(i,this);const t=this._cachedMeta;yi(t),t._parsed=[]}e&&Object.isExtensible(e)&&(this,(a=e)._chartjs?a._chartjs.listeners.push(this):(Object.defineProperty(a,"_chartjs",{configurable:!0,enumerable:!1,value:{listeners:[this]}}),he.forEach((t=>{const e="_onData"+S(t),i=a[t];Object.defineProperty(a,t,{configurable:!0,enumerable:!1,value(...t){const r=i.apply(this,t);return a._chartjs.listeners.forEach((i=>{"function"==typeof i[e]&&i[e](...t)})),r}})})))),this._syncList=[],this._data=e}var a}addElements(){const t=this._cachedMeta;this._dataCheck(),this.datasetElementType&&(t.dataset=new this.datasetElementType)}buildOrUpdateElements(t){const e=this._cachedMeta,i=this.getDataset();let a=!1;this._dataCheck();const r=e._stacked;e._stacked=ui(e.vScale,e),e.stack!==i.stack&&(a=!0,yi(e),e.stack=i.stack),this._resyncElements(t),(a||r!==e._stacked)&&gi(this,e._parsed)}configure(){const t=this.chart.config,e=t.datasetScopeKeys(this._type),i=t.getOptionScopes(this.getDataset(),e,!0);this.options=t.createResolver(i,this.getContext()),this._parsing=this.options.parsing,this._cachedDataOpts={}}parse(t,e){const{_cachedMeta:i,_data:a}=this,{iScale:r,_stacked:n}=i,o=r.axis;let s,c,d,h=0===t&&e===a.length||i._sorted,p=t>0&&i._parsed[t-1];if(!1===this._parsing)i._parsed=a,i._sorted=!0,d=a;else{d=l(a[t])?this.parseArrayData(i,a,t,e):_(a[t])?this.parseObjectData(i,a,t,e):this.parsePrimitiveData(i,a,t,e);const r=()=>null===c[o]||p&&c[o]<p[o];for(s=0;s<e;++s)i._parsed[s+t]=c=d[s],h&&(r()&&(h=!1),p=c);i._sorted=h}n&&gi(this,d)}parsePrimitiveData(t,e,i,a){const{iScale:r,vScale:n}=t,o=r.axis,s=n.axis,l=r.getLabels(),_=r===n,c=new Array(a);let d,h,p;for(d=0,h=a;d<h;++d)p=d+i,c[d]={[o]:_||r.parse(l[p],p),[s]:n.parse(e[p],p)};return c}parseArrayData(t,e,i,a){const{xScale:r,yScale:n}=t,o=new Array(a);let s,l,_,c;for(s=0,l=a;s<l;++s)_=s+i,c=e[_],o[s]={x:r.parse(c[0],_),y:n.parse(c[1],_)};return o}parseObjectData(t,e,i,a){const{xScale:r,yScale:n}=t,{xAxisKey:o="x",yAxisKey:s="y"}=this._parsing,l=new Array(a);let _,c,d,h;for(_=0,c=a;_<c;++_)d=_+i,h=e[d],l[_]={x:r.parse(M(h,o),d),y:n.parse(M(h,s),d)};return l}getParsed(t){return this._cachedMeta._parsed[t]}getDataElement(t){return this._cachedMeta.data[t]}applyStack(t,e,i){const a=this.chart,r=this._cachedMeta,n=e[t.axis];return pi({keys:hi(a,!0),values:e._stacks[t.axis]},n,r.index,{mode:i})}updateRangeFromParsed(t,e,i,a){const r=i[e.axis];let n=null===r?NaN:r;const o=a&&i._stacks[e.axis];a&&o&&(a.values=o,n=pi(a,r,this._cachedMeta.index)),t.min=Math.min(t.min,n),t.max=Math.max(t.max,n)}getMinMax(t,e){const i=this._cachedMeta,a=i._parsed,r=i._sorted&&t===i.iScale,n=a.length,o=this._getOtherScale(t),s=((t,e,i)=>t&&!e.hidden&&e._stacked&&{keys:hi(i,!0),values:null})(e,i,this.chart),l={min:Number.POSITIVE_INFINITY,max:Number.NEGATIVE_INFINITY},{min:_,max:d}=function(t){const{min:e,max:i,minDefined:a,maxDefined:r}=t.getUserBounds();return{min:a?e:Number.NEGATIVE_INFINITY,max:r?i:Number.POSITIVE_INFINITY}}(o);let h,p;function u(){p=a[h];const e=p[o.axis];return!c(p[t.axis])||_>e||d<e}for(h=0;h<n&&(u()||(this.updateRangeFromParsed(l,t,p,s),!r));++h);if(r)for(h=n-1;h>=0;--h)if(!u()){this.updateRangeFromParsed(l,t,p,s);break}return l}getAllParsedValues(t){const e=this._cachedMeta._parsed,i=[];let a,r,n;for(a=0,r=e.length;a<r;++a)n=e[a][t.axis],c(n)&&i.push(n);return i}getMaxOverflow(){return!1}getLabelAndValue(t){const e=this._cachedMeta,i=e.iScale,a=e.vScale,r=this.getParsed(t);return{label:i?""+i.getLabelForValue(r[i.axis]):"",value:a?""+a.getLabelForValue(r[a.axis]):""}}_update(t){const e=this._cachedMeta;this.update(t||"default"),e._clip=function(t){let e,i,a,r;return _(t)?(e=t.top,i=t.right,a=t.bottom,r=t.left):e=i=a=r=t,{top:e,right:i,bottom:a,left:r,disabled:!1===t}}(h(this.options.clip,function(t,e,i){if(!1===i)return!1;const a=di(t,i),r=di(e,i);return{top:r.end,right:a.end,bottom:r.start,left:a.start}}(e.xScale,e.yScale,this.getMaxOverflow())))}update(t){}draw(){const t=this._ctx,e=this.chart,i=this._cachedMeta,a=i.data||[],r=e.chartArea,n=[],o=this._drawStart||0,s=this._drawCount||a.length-o,l=this.options.drawActiveElementsOnTop;let _;for(i.dataset&&i.dataset.draw(t,r,o,s),_=o;_<o+s;++_){const e=a[_];e.hidden||(e.active&&l?n.push(e):e.draw(t,r))}for(_=0;_<n.length;++_)n[_].draw(t,r)}getStyle(t,e){const i=e?"active":"default";return void 0===t&&this._cachedMeta.dataset?this.resolveDatasetElementOptions(i):this.resolveDataElementOptions(t||0,i)}getContext(t,e,i){const a=this.getDataset();let r;if(t>=0&&t<this._cachedMeta.data.length){const e=this._cachedMeta.data[t];r=e.$context||(e.$context=function(t,e,i){return le(t,{active:!1,dataIndex:e,parsed:void 0,raw:void 0,element:i,index:e,mode:"default",type:"data"})}(this.getContext(),t,e)),r.parsed=this.getParsed(t),r.raw=a.data[t],r.index=r.dataIndex=t}else r=this.$context||(this.$context=function(t,e){return le(t,{active:!1,dataset:void 0,datasetIndex:e,index:e,mode:"default",type:"dataset"})}(this.chart.getContext(),this.index)),r.dataset=a,r.index=r.datasetIndex=this.index;return r.active=!!e,r.mode=i,r}resolveDatasetElementOptions(t){return this._resolveElementOptions(this.datasetElementType.id,t)}resolveDataElementOptions(t,e){return this._resolveElementOptions(this.dataElementType.id,e,t)}_resolveElementOptions(t,e="default",i){const a="active"===e,r=this._cachedDataOpts,n=t+"-"+e,o=r[n],s=this.enableOptionSharing&&P(i);if(o)return wi(o,s);const l=this.chart.config,_=l.datasetElementScopeKeys(this._type,t),c=a?[`${t}Hover`,"hover",t,""]:[t,""],d=l.getOptionScopes(this.getDataset(),_),h=Object.keys(Bt.elements[t]),p=l.resolveNamedOptions(d,h,(()=>this.getContext(i,a)),c);return p.$shared&&(p.$shared=s,r[n]=Object.freeze(wi(p,s))),p}_resolveAnimations(t,e,i){const a=this.chart,r=this._cachedDataOpts,n=`animation-${e}`,o=r[n];if(o)return o;let s;if(!1!==a.options.animation){const a=this.chart.config,r=a.datasetAnimationScopeKeys(this._type,e),n=a.getOptionScopes(this.getDataset(),r);s=a.createResolver(n,this.getContext(t,i,e))}const l=new ci(a,s&&s.animations);return s&&s._cacheable&&(r[n]=Object.freeze(l)),l}getSharedOptions(t){if(t.$shared)return this._sharedOptions||(this._sharedOptions=Object.assign({},t))}includeOptions(t,e){return!e||xi(t)||this.chart._animationsDisabled}updateElement(t,e,i,a){xi(a)?Object.assign(t,i):this._resolveAnimations(e,a).update(t,i)}updateSharedOptions(t,e,i){t&&!xi(e)&&this._resolveAnimations(void 0,e).update(t,i)}_setStyle(t,e,i,a){t.active=a;const r=this.getStyle(e,a);this._resolveAnimations(e,i,a).update(t,{options:!a&&this.getSharedOptions(r)||r})}removeHoverStyle(t,e,i){this._setStyle(t,i,"active",!1)}setHoverStyle(t,e,i){this._setStyle(t,i,"active",!0)}_removeDatasetHoverStyle(){const t=this._cachedMeta.dataset;t&&this._setStyle(t,void 0,"active",!1)}_setDatasetHoverStyle(){const t=this._cachedMeta.dataset;t&&this._setStyle(t,void 0,"active",!0)}_resyncElements(t){const e=this._data,i=this._cachedMeta.data;for(const[t,e,i]of this._syncList)this[t](e,i);this._syncList=[];const a=i.length,r=e.length,n=Math.min(r,a);n&&this.parse(0,n),r>a?this._insertElements(a,r-a,t):r<a&&this._removeElements(r,a-r)}_insertElements(t,e,i=!0){const a=this._cachedMeta,r=a.data,n=t+e;let o;const s=t=>{for(t.length+=e,o=t.length-1;o>=n;o--)t[o]=t[o-e]};for(s(r),o=t;o<n;++o)r[o]=new this.dataElementType;this._parsing&&s(a._parsed),this.parse(t,e),i&&this.updateElements(r,t,e,"reset")}updateElements(t,e,i,a){}_removeElements(t,e){const i=this._cachedMeta;if(this._parsing){const a=i._parsed.splice(t,e);i._stacked&&yi(i,a)}i.data.splice(t,e)}_sync(t){if(this._parsing)this._syncList.push(t);else{const[e,i,a]=t;this[e](i,a)}this.chart._dataChanges.push([this.index,...t])}_onDataPush(){const t=arguments.length;this._sync(["_insertElements",this.getDataset().data.length-t,t])}_onDataPop(){this._sync(["_removeElements",this._cachedMeta.data.length-1,1])}_onDataShift(){this._sync(["_removeElements",0,1])}_onDataSplice(t,e){e&&this._sync(["_removeElements",t,e]);const i=arguments.length-2;i&&this._sync(["_insertElements",t,i])}_onDataUnshift(){this._sync(["_insertElements",0,arguments.length])}}function ki(t){const e=t.iScale,i=function(t,e){if(!t._cache.$bar){const i=t.getMatchingVisibleMetas(e);let a=[];for(let e=0,r=i.length;e<r;e++)a=a.concat(i[e].controller.getAllParsedValues(t));t._cache.$bar=ue(a.sort(((t,e)=>t-e)))}return t._cache.$bar}(e,t.type);let a,r,n,o,s=e._length;const l=()=>{32767!==n&&-32768!==n&&(P(o)&&(s=Math.min(s,Math.abs(n-o)||s)),o=n)};for(a=0,r=i.length;a<r;++a)n=e.getPixelForValue(i[a]),l();for(o=void 0,a=0,r=e.ticks.length;a<r;++a)n=e.getPixelForTick(a),l();return s}function Mi(t,e,i,a){return l(t)?function(t,e,i,a){const r=i.parse(t[0],a),n=i.parse(t[1],a),o=Math.min(r,n),s=Math.max(r,n);let l=o,_=s;Math.abs(o)>Math.abs(s)&&(l=s,_=o),e[i.axis]=_,e._custom={barStart:l,barEnd:_,start:r,end:n,min:o,max:s}}(t,e,i,a):e[i.axis]=i.parse(t,a),e}function Si(t,e,i,a){const r=t.iScale,n=t.vScale,o=r.getLabels(),s=r===n,l=[];let _,c,d,h;for(_=i,c=i+a;_<c;++_)h=e[_],d={},d[r.axis]=s||r.parse(o[_],_),l.push(Mi(h,d,n,_));return l}function Pi(t){return t&&void 0!==t.barStart&&void 0!==t.barEnd}function Di(t,e,i,a){let r=e.borderSkipped;const n={};if(!r)return void(t.borderSkipped=n);const{start:o,end:s,reverse:l,top:_,bottom:c}=function(t){let e,i,a,r,n;return t.horizontal?(e=t.base>t.x,i="left",a="right"):(e=t.base<t.y,i="bottom",a="top"),e?(r="end",n="start"):(r="start",n="end"),{start:i,end:a,reverse:e,top:r,bottom:n}}(t);"middle"===r&&i&&(t.enableBorderRadius=!0,(i._top||0)===a?r=_:(i._bottom||0)===a?r=c:(n[Ti(c,o,s,l)]=!0,r=_)),n[Ti(r,o,s,l)]=!0,t.borderSkipped=n}function Ti(t,e,i,a){var r,n,o;return a?(o=i,t=Ci(t=(r=t)===(n=e)?o:r===o?n:r,i,e)):t=Ci(t,e,i),t}function Ci(t,e,i){return"start"===t?e:"end"===t?i:t}function Oi(t,{inflateAmount:e},i){t.inflateAmount="auto"===e?1===i?.33:0:e}vi.defaults={},vi.prototype.datasetElementType=null,vi.prototype.dataElementType=null;class Ai extends vi{parsePrimitiveData(t,e,i,a){return Si(t,e,i,a)}parseArrayData(t,e,i,a){return Si(t,e,i,a)}parseObjectData(t,e,i,a){const{iScale:r,vScale:n}=t,{xAxisKey:o="x",yAxisKey:s="y"}=this._parsing,l="x"===r.axis?o:s,_="x"===n.axis?o:s,c=[];let d,h,p,u;for(d=i,h=i+a;d<h;++d)u=e[d],p={},p[r.axis]=r.parse(M(u,l),d),c.push(Mi(M(u,_),p,n,d));return c}updateRangeFromParsed(t,e,i,a){super.updateRangeFromParsed(t,e,i,a);const r=i._custom;r&&e===this._cachedMeta.vScale&&(t.min=Math.min(t.min,r.min),t.max=Math.max(t.max,r.max))}getMaxOverflow(){return 0}getLabelAndValue(t){const e=this._cachedMeta,{iScale:i,vScale:a}=e,r=this.getParsed(t),n=r._custom,o=Pi(n)?"["+n.start+", "+n.end+"]":""+a.getLabelForValue(r[a.axis]);return{label:""+i.getLabelForValue(r[i.axis]),value:o}}initialize(){this.enableOptionSharing=!0,super.initialize(),this._cachedMeta.stack=this.getDataset().stack}update(t){const e=this._cachedMeta;this.updateElements(e.data,0,e.data.length,t)}updateElements(t,e,i,a){const r="reset"===a,{index:n,_cachedMeta:{vScale:o}}=this,l=o.getBasePixel(),_=o.isHorizontal(),c=this._getRuler(),d=this.resolveDataElementOptions(e,a),h=this.getSharedOptions(d),p=this.includeOptions(a,h);this.updateSharedOptions(h,a,d);for(let d=e;d<e+i;d++){const e=this.getParsed(d),i=r||s(e[o.axis])?{base:l,head:l}:this._calculateBarValuePixels(d),u=this._calculateBarIndexPixels(d,c),m=(e._stacks||{})[o.axis],f={horizontal:_,base:i.base,enableBorderRadius:!m||Pi(e._custom)||n===m._top||n===m._bottom,x:_?i.head:u.center,y:_?u.center:i.head,height:_?u.size:Math.abs(i.size),width:_?Math.abs(i.size):u.size};p&&(f.options=h||this.resolveDataElementOptions(d,t[d].active?"active":a));const g=f.options||t[d].options;Di(f,g,m,n),Oi(f,g,c.ratio),this.updateElement(t[d],d,f,a)}}_getStacks(t,e){const i=this._cachedMeta.iScale,a=i.getMatchingVisibleMetas(this._type),r=i.options.stacked,n=a.length,o=[];let l,_;for(l=0;l<n;++l)if(_=a[l],_.controller.options.grouped){if(void 0!==e){const t=_.controller.getParsed(e)[_.controller._cachedMeta.vScale.axis];if(s(t)||isNaN(t))continue}if((!1===r||-1===o.indexOf(_.stack)||void 0===r&&void 0===_.stack)&&o.push(_.stack),_.index===t)break}return o.length||o.push(void 0),o}_getStackCount(t){return this._getStacks(void 0,t).length}_getStackIndex(t,e,i){const a=this._getStacks(t,i),r=void 0!==e?a.indexOf(e):-1;return-1===r?a.length-1:r}_getRuler(){const t=this.options,e=this._cachedMeta,i=e.iScale,a=[];let r,n;for(r=0,n=e.data.length;r<n;++r)a.push(i.getPixelForValue(this.getParsed(r)[i.axis],r));const o=t.barThickness;return{min:o||ki(e),pixels:a,start:i._startPixel,end:i._endPixel,stackCount:this._getStackCount(),scale:i,grouped:t.grouped,ratio:o?1:t.categoryPercentage*t.barPercentage}}_calculateBarValuePixels(t){const{_cachedMeta:{vScale:e,_stacked:i},options:{base:a,minBarLength:r}}=this,n=a||0,o=this.getParsed(t),l=o._custom,_=Pi(l);let c,d,h=o[e.axis],p=0,u=i?this.applyStack(e,o,i):h;u!==h&&(p=u-h,u=h),_&&(h=l.barStart,u=l.barEnd-l.barStart,0!==h&&V(h)!==V(l.barEnd)&&(p=0),p+=h);const m=s(a)||_?p:a;let f=e.getPixelForValue(m);if(c=this.chart.getDataVisibility(t)?e.getPixelForValue(p+u):f,d=c-f,Math.abs(d)<r&&(d=function(t,e,i){return 0!==t?V(t):(e.isHorizontal()?1:-1)*(e.min>=i?1:-1)}(d,e,n)*r,h===n&&(f-=d/2),c=f+d),f===e.getPixelForValue(n)){const t=V(d)*e.getLineWidthForValue(n)/2;f+=t,d-=t}return{size:d,base:f,head:c,center:c+d/2}}_calculateBarIndexPixels(t,e){const i=e.scale,a=this.options,r=a.skipNull,n=h(a.maxBarThickness,1/0);let o,l;if(e.grouped){const i=r?this._getStackCount(t):e.stackCount,_="flex"===a.barThickness?function(t,e,i,a){const r=e.pixels,n=r[t];let o=t>0?r[t-1]:null,s=t<r.length-1?r[t+1]:null;const l=i.categoryPercentage;null===o&&(o=n-(null===s?e.end-e.start:s-n)),null===s&&(s=n+n-o);const _=n-(n-Math.min(o,s))/2*l;return{chunk:Math.abs(s-o)/2*l/a,ratio:i.barPercentage,start:_}}(t,e,a,i):function(t,e,i,a){const r=i.barThickness;let n,o;return s(r)?(n=e.min*i.categoryPercentage,o=i.barPercentage):(n=r*a,o=1),{chunk:n/a,ratio:o,start:e.pixels[t]-n/2}}(t,e,a,i),c=this._getStackIndex(this.index,this._cachedMeta.stack,r?t:void 0);o=_.start+_.chunk*c+_.chunk/2,l=Math.min(n,_.chunk*_.ratio)}else o=i.getPixelForValue(this.getParsed(t)[i.axis],t),l=Math.min(n,e.min*e.ratio);return{base:o-l/2,head:o+l/2,center:o,size:l}}draw(){const t=this._cachedMeta,e=t.vScale,i=t.data,a=i.length;let r=0;for(;r<a;++r)null!==this.getParsed(r)[e.axis]&&i[r].draw(this._ctx)}}Ai.id="bar",Ai.defaults={datasetElementType:!1,dataElementType:"bar",categoryPercentage:.8,barPercentage:.9,grouped:!0,animations:{numbers:{type:"number",properties:["x","y","base","width","height"]}}},Ai.overrides={scales:{_index_:{type:"category",offset:!0,grid:{offset:!0}},_value_:{type:"linear",beginAtZero:!0}}};class Li extends vi{initialize(){this.enableOptionSharing=!0,super.initialize()}parsePrimitiveData(t,e,i,a){const r=super.parsePrimitiveData(t,e,i,a);for(let t=0;t<r.length;t++)r[t]._custom=this.resolveDataElementOptions(t+i).radius;return r}parseArrayData(t,e,i,a){const r=super.parseArrayData(t,e,i,a);for(let t=0;t<r.length;t++){const a=e[i+t];r[t]._custom=h(a[2],this.resolveDataElementOptions(t+i).radius)}return r}parseObjectData(t,e,i,a){const r=super.parseObjectData(t,e,i,a);for(let t=0;t<r.length;t++){const a=e[i+t];r[t]._custom=h(a&&a.r&&+a.r,this.resolveDataElementOptions(t+i).radius)}return r}getMaxOverflow(){const t=this._cachedMeta.data;let e=0;for(let i=t.length-1;i>=0;--i)e=Math.max(e,t[i].size(this.resolveDataElementOptions(i))/2);return e>0&&e}getLabelAndValue(t){const e=this._cachedMeta,{xScale:i,yScale:a}=e,r=this.getParsed(t),n=i.getLabelForValue(r.x),o=a.getLabelForValue(r.y),s=r._custom;return{label:e.label,value:"("+n+", "+o+(s?", "+s:"")+")"}}update(t){const e=this._cachedMeta.data;this.updateElements(e,0,e.length,t)}updateElements(t,e,i,a){const r="reset"===a,{iScale:n,vScale:o}=this._cachedMeta,s=this.resolveDataElementOptions(e,a),l=this.getSharedOptions(s),_=this.includeOptions(a,l),c=n.axis,d=o.axis;for(let s=e;s<e+i;s++){const e=t[s],i=!r&&this.getParsed(s),l={},h=l[c]=r?n.getPixelForDecimal(.5):n.getPixelForValue(i[c]),p=l[d]=r?o.getBasePixel():o.getPixelForValue(i[d]);l.skip=isNaN(h)||isNaN(p),_&&(l.options=this.resolveDataElementOptions(s,e.active?"active":a),r&&(l.options.radius=0)),this.updateElement(e,s,l,a)}this.updateSharedOptions(l,a,s)}resolveDataElementOptions(t,e){const i=this.getParsed(t);let a=super.resolveDataElementOptions(t,e);a.$shared&&(a=Object.assign({},a,{$shared:!1}));const r=a.radius;return"active"!==e&&(a.radius=0),a.radius+=h(i&&i._custom,r),a}}Li.id="bubble",Li.defaults={datasetElementType:!1,dataElementType:"point",animations:{numbers:{type:"number",properties:["x","y","borderWidth","radius"]}}},Li.overrides={scales:{x:{type:"linear"},y:{type:"linear"}},plugins:{tooltip:{callbacks:{title:()=>""}}}};class Ri extends vi{constructor(t,e){super(t,e),this.enableOptionSharing=!0,this.innerRadius=void 0,this.outerRadius=void 0,this.offsetX=void 0,this.offsetY=void 0}linkScales(){}parse(t,e){const i=this.getDataset().data,a=this._cachedMeta;if(!1===this._parsing)a._parsed=i;else{let r,n,o=t=>+i[t];if(_(i[t])){const{key:t="value"}=this._parsing;o=e=>+M(i[e],t)}for(r=t,n=t+e;r<n;++r)a._parsed[r]=o(r)}}_getRotation(){return j(this.options.rotation-90)}_getCircumference(){return j(this.options.circumference)}_getRotationExtents(){let t=O,e=-O;for(let i=0;i<this.chart.data.datasets.length;++i)if(this.chart.isDatasetVisible(i)){const a=this.chart.getDatasetMeta(i).controller,r=a._getRotation(),n=a._getCircumference();t=Math.min(t,r),e=Math.max(e,r+n)}return{rotation:t,circumference:e-t}}update(t){const e=this.chart,{chartArea:i}=e,a=this._cachedMeta,r=a.data,n=this.getMaxBorderWidth()+this.getMaxOffset(r)+this.options.spacing,o=Math.max((Math.min(i.width,i.height)-n)/2,0),s=Math.min((_=o,"string"==typeof(l=this.options.cutout)&&l.endsWith("%")?parseFloat(l)/100:l/_),1);var l,_;const c=this._getRingWeight(this.index),{circumference:d,rotation:h}=this._getRotationExtents(),{ratioX:u,ratioY:m,offsetX:f,offsetY:g}=function(t,e,i){let a=1,r=1,n=0,o=0;if(e<O){const s=t,l=s+e,_=Math.cos(s),c=Math.sin(s),d=Math.cos(l),h=Math.sin(l),p=(t,e,a)=>K(t,s,l,!0)?1:Math.max(e,e*i,a,a*i),u=(t,e,a)=>K(t,s,l,!0)?-1:Math.min(e,e*i,a,a*i),m=p(0,_,d),f=p(E,c,h),g=u(C,_,d),b=u(C+E,c,h);a=(m-g)/2,r=(f-b)/2,n=-(m+g)/2,o=-(f+b)/2}return{ratioX:a,ratioY:r,offsetX:n,offsetY:o}}(h,d,s),b=(i.width-n)/u,y=(i.height-n)/m,x=Math.max(Math.min(b,y)/2,0),w=p(this.options.radius,x),v=(w-Math.max(w*s,0))/this._getVisibleDatasetWeightTotal();this.offsetX=f*w,this.offsetY=g*w,a.total=this.calculateTotal(),this.outerRadius=w-v*this._getRingWeightOffset(this.index),this.innerRadius=Math.max(this.outerRadius-v*c,0),this.updateElements(r,0,r.length,t)}_circumference(t,e){const i=this.options,a=this._cachedMeta,r=this._getCircumference();return e&&i.animation.animateRotate||!this.chart.getDataVisibility(t)||null===a._parsed[t]||a.data[t].hidden?0:this.calculateCircumference(a._parsed[t]*r/O)}updateElements(t,e,i,a){const r="reset"===a,n=this.chart,o=n.chartArea,s=n.options.animation,l=(o.left+o.right)/2,_=(o.top+o.bottom)/2,c=r&&s.animateScale,d=c?0:this.innerRadius,h=c?0:this.outerRadius,p=this.resolveDataElementOptions(e,a),u=this.getSharedOptions(p),m=this.includeOptions(a,u);let f,g=this._getRotation();for(f=0;f<e;++f)g+=this._circumference(f,r);for(f=e;f<e+i;++f){const e=this._circumference(f,r),i=t[f],n={x:l+this.offsetX,y:_+this.offsetY,startAngle:g,endAngle:g+e,circumference:e,outerRadius:h,innerRadius:d};m&&(n.options=u||this.resolveDataElementOptions(f,i.active?"active":a)),g+=e,this.updateElement(i,f,n,a)}this.updateSharedOptions(u,a,p)}calculateTotal(){const t=this._cachedMeta,e=t.data;let i,a=0;for(i=0;i<e.length;i++){const r=t._parsed[i];null===r||isNaN(r)||!this.chart.getDataVisibility(i)||e[i].hidden||(a+=Math.abs(r))}return a}calculateCircumference(t){const e=this._cachedMeta.total;return e>0&&!isNaN(t)?O*(Math.abs(t)/e):0}getLabelAndValue(t){const e=this._cachedMeta,i=this.chart,a=i.data.labels||[],r=qe(e._parsed[t],i.options.locale);return{label:a[t]||"",value:r}}getMaxBorderWidth(t){let e=0;const i=this.chart;let a,r,n,o,s;if(!t)for(a=0,r=i.data.datasets.length;a<r;++a)if(i.isDatasetVisible(a)){n=i.getDatasetMeta(a),t=n.data,o=n.controller;break}if(!t)return 0;for(a=0,r=t.length;a<r;++a)s=o.resolveDataElementOptions(a),"inner"!==s.borderAlign&&(e=Math.max(e,s.borderWidth||0,s.hoverBorderWidth||0));return e}getMaxOffset(t){let e=0;for(let i=0,a=t.length;i<a;++i){const t=this.resolveDataElementOptions(i);e=Math.max(e,t.offset||0,t.hoverOffset||0)}return e}_getRingWeightOffset(t){let e=0;for(let i=0;i<t;++i)this.chart.isDatasetVisible(i)&&(e+=this._getRingWeight(i));return e}_getRingWeight(t){return Math.max(h(this.chart.data.datasets[t].weight,1),0)}_getVisibleDatasetWeightTotal(){return this._getRingWeightOffset(this.chart.data.datasets.length)||1}}Ri.id="doughnut",Ri.defaults={datasetElementType:!1,dataElementType:"arc",animation:{animateRotate:!0,animateScale:!1},animations:{numbers:{type:"number",properties:["circumference","endAngle","innerRadius","outerRadius","startAngle","x","y","offset","borderWidth","spacing"]}},cutout:"50%",rotation:0,circumference:360,radius:"100%",spacing:0,indexAxis:"r"},Ri.descriptors={_scriptable:t=>"spacing"!==t,_indexable:t=>"spacing"!==t},Ri.overrides={aspectRatio:1,plugins:{legend:{labels:{generateLabels(t){const e=t.data;if(e.labels.length&&e.datasets.length){const{labels:{pointStyle:i}}=t.legend.options;return e.labels.map(((e,a)=>{const r=t.getDatasetMeta(0).controller.getStyle(a);return{text:e,fillStyle:r.backgroundColor,strokeStyle:r.borderColor,lineWidth:r.borderWidth,pointStyle:i,hidden:!t.getDataVisibility(a),index:a}}))}return[]}},onClick(t,e,i){i.chart.toggleDataVisibility(e.index),i.chart.update()}},tooltip:{callbacks:{title:()=>"",label(t){let e=t.label;const i=": "+t.formattedValue;return l(e)?(e=e.slice(),e[0]+=i):e+=i,e}}}}};class Ei extends vi{initialize(){this.enableOptionSharing=!0,super.initialize()}update(t){const e=this._cachedMeta,{dataset:i,data:a=[],_dataset:r}=e,n=this.chart._animationsDisabled;let{start:o,count:s}=function(t,e,i){const a=e.length;let r=0,n=a;if(t._sorted){const{iScale:o,_parsed:s}=t,l=o.axis,{min:_,max:c,minDefined:d,maxDefined:h}=o.getUserBounds();d&&(r=G(Math.min(ce(s,o.axis,_).lo,i?a:ce(e,l,o.getPixelForValue(_)).lo),0,a-1)),n=h?G(Math.max(ce(s,o.axis,c).hi+1,i?0:ce(e,l,o.getPixelForValue(c)).hi+1),r,a)-r:a-r}return{start:r,count:n}}(e,a,n);this._drawStart=o,this._drawCount=s,function(t){const{xScale:e,yScale:i,_scaleRanges:a}=t,r={xmin:e.min,xmax:e.max,ymin:i.min,ymax:i.max};if(!a)return t._scaleRanges=r,!0;const n=a.xmin!==e.min||a.xmax!==e.max||a.ymin!==i.min||a.ymax!==i.max;return Object.assign(a,r),n}(e)&&(o=0,s=a.length),i._chart=this.chart,i._datasetIndex=this.index,i._decimated=!!r._decimated,i.points=a;const l=this.resolveDatasetElementOptions(t);this.options.showLine||(l.borderWidth=0),l.segment=this.options.segment,this.updateElement(i,void 0,{animated:!n,options:l},t),this.updateElements(a,o,s,t)}updateElements(t,e,i,a){const r="reset"===a,{iScale:n,vScale:o,_stacked:l,_dataset:_}=this._cachedMeta,c=this.resolveDataElementOptions(e,a),d=this.getSharedOptions(c),h=this.includeOptions(a,d),p=n.axis,u=o.axis,{spanGaps:m,segment:f}=this.options,g=W(m)?m:Number.POSITIVE_INFINITY,b=this.chart._animationsDisabled||r||"none"===a;let y=e>0&&this.getParsed(e-1);for(let c=e;c<e+i;++c){const e=t[c],i=this.getParsed(c),m=b?e:{},x=s(i[u]),w=m[p]=n.getPixelForValue(i[p],c),v=m[u]=r||x?o.getBasePixel():o.getPixelForValue(l?this.applyStack(o,i,l):i[u],c);m.skip=isNaN(w)||isNaN(v)||x,m.stop=c>0&&i[p]-y[p]>g,f&&(m.parsed=i,m.raw=_.data[c]),h&&(m.options=d||this.resolveDataElementOptions(c,e.active?"active":a)),b||this.updateElement(e,c,m,a),y=i}this.updateSharedOptions(d,a,c)}getMaxOverflow(){const t=this._cachedMeta,e=t.dataset,i=e.options&&e.options.borderWidth||0,a=t.data||[];if(!a.length)return i;const r=a[0].size(this.resolveDataElementOptions(0)),n=a[a.length-1].size(this.resolveDataElementOptions(a.length-1));return Math.max(i,r,n)/2}draw(){const t=this._cachedMeta;t.dataset.updateControlPoints(this.chart.chartArea,t.iScale.axis),super.draw()}}Ei.id="line",Ei.defaults={datasetElementType:"line",dataElementType:"point",showLine:!0,spanGaps:!1},Ei.overrides={scales:{_index_:{type:"category"},_value_:{type:"linear"}}};class Ii extends vi{constructor(t,e){super(t,e),this.innerRadius=void 0,this.outerRadius=void 0}getLabelAndValue(t){const e=this._cachedMeta,i=this.chart,a=i.data.labels||[],r=qe(e._parsed[t].r,i.options.locale);return{label:a[t]||"",value:r}}update(t){const e=this._cachedMeta.data;this._updateRadius(),this.updateElements(e,0,e.length,t)}_updateRadius(){const t=this.chart,e=t.chartArea,i=t.options,a=Math.min(e.right-e.left,e.bottom-e.top),r=Math.max(a/2,0),n=(r-Math.max(i.cutoutPercentage?r/100*i.cutoutPercentage:1,0))/t.getVisibleDatasetCount();this.outerRadius=r-n*this.index,this.innerRadius=this.outerRadius-n}updateElements(t,e,i,a){const r="reset"===a,n=this.chart,o=this.getDataset(),s=n.options.animation,l=this._cachedMeta.rScale,_=l.xCenter,c=l.yCenter,d=l.getIndexAngle(0)-.5*C;let h,p=d;const u=360/this.countVisibleElements();for(h=0;h<e;++h)p+=this._computeAngle(h,a,u);for(h=e;h<e+i;h++){const e=t[h];let i=p,m=p+this._computeAngle(h,a,u),f=n.getDataVisibility(h)?l.getDistanceFromCenterForValue(o.data[h]):0;p=m,r&&(s.animateScale&&(f=0),s.animateRotate&&(i=m=d));const g={x:_,y:c,innerRadius:0,outerRadius:f,startAngle:i,endAngle:m,options:this.resolveDataElementOptions(h,e.active?"active":a)};this.updateElement(e,h,g,a)}}countVisibleElements(){const t=this.getDataset(),e=this._cachedMeta;let i=0;return e.data.forEach(((e,a)=>{!isNaN(t.data[a])&&this.chart.getDataVisibility(a)&&i++})),i}_computeAngle(t,e,i){return this.chart.getDataVisibility(t)?j(this.resolveDataElementOptions(t,e).angle||i):0}}Ii.id="polarArea",Ii.defaults={dataElementType:"arc",animation:{animateRotate:!0,animateScale:!0},animations:{numbers:{type:"number",properties:["x","y","startAngle","endAngle","innerRadius","outerRadius"]}},indexAxis:"r",startAngle:0},Ii.overrides={aspectRatio:1,plugins:{legend:{labels:{generateLabels(t){const e=t.data;if(e.labels.length&&e.datasets.length){const{labels:{pointStyle:i}}=t.legend.options;return e.labels.map(((e,a)=>{const r=t.getDatasetMeta(0).controller.getStyle(a);return{text:e,fillStyle:r.backgroundColor,strokeStyle:r.borderColor,lineWidth:r.borderWidth,pointStyle:i,hidden:!t.getDataVisibility(a),index:a}}))}return[]}},onClick(t,e,i){i.chart.toggleDataVisibility(e.index),i.chart.update()}},tooltip:{callbacks:{title:()=>"",label:t=>t.chart.data.labels[t.dataIndex]+": "+t.formattedValue}}},scales:{r:{type:"radialLinear",angleLines:{display:!1},beginAtZero:!0,grid:{circular:!0},pointLabels:{display:!1},startAngle:0}}};class zi extends Ri{}zi.id="pie",zi.defaults={cutout:0,rotation:0,circumference:360,radius:"100%"};class Fi extends vi{getLabelAndValue(t){const e=this._cachedMeta.vScale,i=this.getParsed(t);return{label:e.getLabels()[t],value:""+e.getLabelForValue(i[e.axis])}}update(t){const e=this._cachedMeta,i=e.dataset,a=e.data||[],r=e.iScale.getLabels();if(i.points=a,"resize"!==t){const e=this.resolveDatasetElementOptions(t);this.options.showLine||(e.borderWidth=0);const n={_loop:!0,_fullLoop:r.length===a.length,options:e};this.updateElement(i,void 0,n,t)}this.updateElements(a,0,a.length,t)}updateElements(t,e,i,a){const r=this.getDataset(),n=this._cachedMeta.rScale,o="reset"===a;for(let s=e;s<e+i;s++){const e=t[s],i=this.resolveDataElementOptions(s,e.active?"active":a),l=n.getPointPositionForValue(s,r.data[s]),_=o?n.xCenter:l.x,c=o?n.yCenter:l.y,d={x:_,y:c,angle:l.angle,skip:isNaN(_)||isNaN(c),options:i};this.updateElement(e,s,d,a)}}}Fi.id="radar",Fi.defaults={datasetElementType:"line",dataElementType:"point",indexAxis:"r",showLine:!0,elements:{line:{fill:"start"}}},Fi.overrides={aspectRatio:1,scales:{r:{type:"radialLinear"}}};class Vi extends Ei{}Vi.id="scatter",Vi.defaults={showLine:!1,fill:!1},Vi.overrides={interaction:{mode:"point"},plugins:{tooltip:{callbacks:{title:()=>"",label:t=>"("+t.label+", "+t.formattedValue+")"}}},scales:{x:{type:"linear"},y:{type:"linear"}}};var Bi=Object.freeze({__proto__:null,BarController:Ai,BubbleController:Li,DoughnutController:Ri,LineController:Ei,PolarAreaController:Ii,PieController:zi,RadarController:Fi,ScatterController:Vi});function Wi(){throw new Error("This method is not implemented: Check that a complete date adapter is provided.")}class Ni{constructor(t){this.options=t||{}}formats(){return Wi()}parse(t,e){return Wi()}format(t,e){return Wi()}add(t,e,i){return Wi()}diff(t,e,i){return Wi()}startOf(t,e,i){return Wi()}endOf(t,e){return Wi()}}Ni.override=function(t){Object.assign(Ni.prototype,t)};var Hi={_date:Ni};function ji(t,e){return"native"in t?{x:t.x,y:t.y}:We(t,e)}function $i(t,e,i,a){const{controller:r,data:n,_sorted:o}=t,s=r._cachedMeta.iScale;if(s&&e===s.axis&&"r"!==e&&o&&n.length){const t=s._reversePixels?de:ce;if(!a)return t(n,e,i);if(r._sharedOptions){const a=n[0],r="function"==typeof a.getRange&&a.getRange(e);if(r){const a=t(n,e,i-r),o=t(n,e,i+r);return{lo:a.lo,hi:o.hi}}}}return{lo:0,hi:n.length-1}}function Zi(t,e,i,a,r){const n=t.getSortedVisibleDatasetMetas(),o=i[e];for(let t=0,i=n.length;t<i;++t){const{index:i,data:s}=n[t],{lo:l,hi:_}=$i(n[t],e,o,r);for(let t=l;t<=_;++t){const e=s[t];e.skip||a(e,i,t)}}}function Yi(t,e,i,a){const r=[];return Zt(e,t.chartArea,t._minPadding)?(Zi(t,i,e,(function(t,i,n){t.inRange(e.x,e.y,a)&&r.push({element:t,datasetIndex:i,index:n})}),!0),r):r}function Ui(t,e,i,a,r){return Zt(e,t.chartArea,t._minPadding)?"r"!==i||a?function(t,e,i,a,r){let n=[];const o=function(t){const e=-1!==t.indexOf("x"),i=-1!==t.indexOf("y");return function(t,a){const r=e?Math.abs(t.x-a.x):0,n=i?Math.abs(t.y-a.y):0;return Math.sqrt(Math.pow(r,2)+Math.pow(n,2))}}(i);let s=Number.POSITIVE_INFINITY;return Zi(t,i,e,(function(i,l,_){const c=i.inRange(e.x,e.y,r);if(a&&!c)return;const d=i.getCenterPoint(r);if(!Zt(d,t.chartArea,t._minPadding)&&!c)return;const h=o(e,d);h<s?(n=[{element:i,datasetIndex:l,index:_}],s=h):h===s&&n.push({element:i,datasetIndex:l,index:_})})),n}(t,e,i,a,r):function(t,e,i,a){let r=[];return Zi(t,i,e,(function(t,i,n){const{startAngle:o,endAngle:s}=t.getProps(["startAngle","endAngle"],a),{angle:l}=Y(t,{x:e.x,y:e.y});K(l,o,s)&&r.push({element:t,datasetIndex:i,index:n})})),r}(t,e,i,r):[]}function Xi(t,e,i,a){const r=ji(e,t),n=[],o=i.axis,s="x"===o?"inXRange":"inYRange";let l=!1;return function(t,e){const i=t.getSortedVisibleDatasetMetas();let a,r,n;for(let t=0,o=i.length;t<o;++t){({index:a,data:r}=i[t]);for(let t=0,i=r.length;t<i;++t)n=r[t],n.skip||e(n,a,t)}}(t,((t,e,i)=>{t[s](r[o],a)&&n.push({element:t,datasetIndex:e,index:i}),t.inRange(r.x,r.y,a)&&(l=!0)})),i.intersect&&!l?[]:n}var qi={modes:{index(t,e,i,a){const r=ji(e,t),n=i.axis||"x",o=i.intersect?Yi(t,r,n,a):Ui(t,r,n,!1,a),s=[];return o.length?(t.getSortedVisibleDatasetMetas().forEach((t=>{const e=o[0].index,i=t.data[e];i&&!i.skip&&s.push({element:i,datasetIndex:t.index,index:e})})),s):[]},dataset(t,e,i,a){const r=ji(e,t),n=i.axis||"xy";let o=i.intersect?Yi(t,r,n,a):Ui(t,r,n,!1,a);if(o.length>0){const e=o[0].datasetIndex,i=t.getDatasetMeta(e).data;o=[];for(let t=0;t<i.length;++t)o.push({element:i[t],datasetIndex:e,index:t})}return o},point:(t,e,i,a)=>Yi(t,ji(e,t),i.axis||"xy",a),nearest:(t,e,i,a)=>Ui(t,ji(e,t),i.axis||"xy",i.intersect,a),x:(t,e,i,a)=>Xi(t,e,{axis:"x",intersect:i.intersect},a),y:(t,e,i,a)=>Xi(t,e,{axis:"y",intersect:i.intersect},a)}};const Ki=["left","top","right","bottom"];function Gi(t,e){return t.filter((t=>t.pos===e))}function Ji(t,e){return t.filter((t=>-1===Ki.indexOf(t.pos)&&t.box.axis===e))}function Qi(t,e){return t.sort(((t,i)=>{const a=e?i:t,r=e?t:i;return a.weight===r.weight?a.index-r.index:a.weight-r.weight}))}function ta(t,e,i,a){return Math.max(t[i],e[i])+Math.max(t[a],e[a])}function ea(t,e){t.top=Math.max(t.top,e.top),t.left=Math.max(t.left,e.left),t.bottom=Math.max(t.bottom,e.bottom),t.right=Math.max(t.right,e.right)}function ia(t,e,i,a){const{pos:r,box:n}=i,o=t.maxPadding;if(!_(r)){i.size&&(t[r]-=i.size);const e=a[i.stack]||{size:0,count:1};e.size=Math.max(e.size,i.horizontal?n.height:n.width),i.size=e.size/e.count,t[r]+=i.size}n.getPadding&&ea(o,n.getPadding());const s=Math.max(0,e.outerWidth-ta(o,t,"left","right")),l=Math.max(0,e.outerHeight-ta(o,t,"top","bottom")),c=s!==t.w,d=l!==t.h;return t.w=s,t.h=l,i.horizontal?{same:c,other:d}:{same:d,other:c}}function aa(t,e){const i=e.maxPadding;return function(t){const a={left:0,top:0,right:0,bottom:0};return t.forEach((t=>{a[t]=Math.max(e[t],i[t])})),a}(t?["left","right"]:["top","bottom"])}function ra(t,e,i,a){const r=[];let n,o,s,l,_,c;for(n=0,o=t.length,_=0;n<o;++n){s=t[n],l=s.box,l.update(s.width||e.w,s.height||e.h,aa(s.horizontal,e));const{same:o,other:d}=ia(e,i,s,a);_|=o&&r.length,c=c||d,l.fullSize||r.push(s)}return _&&ra(r,e,i,a)||c}function na(t,e,i,a,r){t.top=i,t.left=e,t.right=e+a,t.bottom=i+r,t.width=a,t.height=r}function oa(t,e,i,a){const r=i.padding;let{x:n,y:o}=e;for(const s of t){const t=s.box,l=a[s.stack]||{count:1,placed:0,weight:1},_=s.stackWeight/l.weight||1;if(s.horizontal){const a=e.w*_,n=l.size||t.height;P(l.start)&&(o=l.start),t.fullSize?na(t,r.left,o,i.outerWidth-r.right-r.left,n):na(t,e.left+l.placed,o,a,n),l.start=o,l.placed+=a,o=t.bottom}else{const a=e.h*_,o=l.size||t.width;P(l.start)&&(n=l.start),t.fullSize?na(t,n,r.top,o,i.outerHeight-r.bottom-r.top):na(t,n,e.top+l.placed,o,a),l.start=n,l.placed+=a,n=t.right}}e.x=n,e.y=o}Bt.set("layout",{autoPadding:!0,padding:{top:0,right:0,bottom:0,left:0}});var sa={addBox(t,e){t.boxes||(t.boxes=[]),e.fullSize=e.fullSize||!1,e.position=e.position||"top",e.weight=e.weight||0,e._layers=e._layers||function(){return[{z:0,draw(t){e.draw(t)}}]},t.boxes.push(e)},removeBox(t,e){const i=t.boxes?t.boxes.indexOf(e):-1;-1!==i&&t.boxes.splice(i,1)},configure(t,e,i){e.fullSize=i.fullSize,e.position=i.position,e.weight=i.weight},update(t,e,i,a){if(!t)return;const r=ne(t.options.layout.padding),n=Math.max(e-r.width,0),o=Math.max(i-r.height,0),s=function(t){const e=function(t){const e=[];let i,a,r,n,o,s;for(i=0,a=(t||[]).length;i<a;++i)r=t[i],({position:n,options:{stack:o,stackWeight:s=1}}=r),e.push({index:i,box:r,pos:n,horizontal:r.isHorizontal(),weight:r.weight,stack:o&&n+o,stackWeight:s});return e}(t),i=Qi(e.filter((t=>t.box.fullSize)),!0),a=Qi(Gi(e,"left"),!0),r=Qi(Gi(e,"right")),n=Qi(Gi(e,"top"),!0),o=Qi(Gi(e,"bottom")),s=Ji(e,"x"),l=Ji(e,"y");return{fullSize:i,leftAndTop:a.concat(n),rightAndBottom:r.concat(l).concat(o).concat(s),chartArea:Gi(e,"chartArea"),vertical:a.concat(r).concat(l),horizontal:n.concat(o).concat(s)}}(t.boxes),l=s.vertical,_=s.horizontal;m(t.boxes,(t=>{"function"==typeof t.beforeLayout&&t.beforeLayout()}));const c=l.reduce(((t,e)=>e.box.options&&!1===e.box.options.display?t:t+1),0)||1,d=Object.freeze({outerWidth:e,outerHeight:i,padding:r,availableWidth:n,availableHeight:o,vBoxMaxWidth:n/2/c,hBoxMaxHeight:o/2}),h=Object.assign({},r);ea(h,ne(a));const p=Object.assign({maxPadding:h,w:n,h:o,x:r.left,y:r.top},r),u=function(t,e){const i=function(t){const e={};for(const i of t){const{stack:t,pos:a,stackWeight:r}=i;if(!t||!Ki.includes(a))continue;const n=e[t]||(e[t]={count:0,placed:0,weight:0,size:0});n.count++,n.weight+=r}return e}(t),{vBoxMaxWidth:a,hBoxMaxHeight:r}=e;let n,o,s;for(n=0,o=t.length;n<o;++n){s=t[n];const{fullSize:o}=s.box,l=i[s.stack],_=l&&s.stackWeight/l.weight;s.horizontal?(s.width=_?_*a:o&&e.availableWidth,s.height=r):(s.width=a,s.height=_?_*r:o&&e.availableHeight)}return i}(l.concat(_),d);ra(s.fullSize,p,d,u),ra(l,p,d,u),ra(_,p,d,u)&&ra(l,p,d,u),function(t){const e=t.maxPadding;function i(i){const a=Math.max(e[i]-t[i],0);return t[i]+=a,a}t.y+=i("top"),t.x+=i("left"),i("right"),i("bottom")}(p),oa(s.leftAndTop,p,d,u),p.x+=p.w,p.y+=p.h,oa(s.rightAndBottom,p,d,u),t.chartArea={left:p.left,top:p.top,right:p.left+p.w,bottom:p.top+p.h,height:p.h,width:p.w},m(s.chartArea,(e=>{const i=e.box;Object.assign(i,t.chartArea),i.update(p.w,p.h,{left:0,top:0,right:0,bottom:0})}))}};class la{acquireContext(t,e){}releaseContext(t){return!1}addEventListener(t,e,i){}removeEventListener(t,e,i){}getDevicePixelRatio(){return 1}getMaximumSize(t,e,i,a){return e=Math.max(0,e||t.width),i=i||t.height,{width:e,height:Math.max(0,a?Math.floor(e/a):i)}}isAttached(t){return!0}updateConfig(t){}}class _a extends la{acquireContext(t){return t&&t.getContext&&t.getContext("2d")||null}updateConfig(t){t.options.animation=!1}}const ca={touchstart:"mousedown",touchmove:"mousemove",touchend:"mouseup",pointerenter:"mouseenter",pointerdown:"mousedown",pointermove:"mousemove",pointerup:"mouseup",pointerleave:"mouseout",pointerout:"mouseout"},da=t=>null===t||""===t,ha=!!je&&{passive:!0};function pa(t,e,i){t.canvas.removeEventListener(e,i,ha)}function ua(t,e){for(const i of t)if(i===e||i.contains(e))return!0}function ma(t,e,i){const a=t.canvas,r=new MutationObserver((t=>{let e=!1;for(const i of t)e=e||ua(i.addedNodes,a),e=e&&!ua(i.removedNodes,a);e&&i()}));return r.observe(document,{childList:!0,subtree:!0}),r}function fa(t,e,i){const a=t.canvas,r=new MutationObserver((t=>{let e=!1;for(const i of t)e=e||ua(i.removedNodes,a),e=e&&!ua(i.addedNodes,a);e&&i()}));return r.observe(document,{childList:!0,subtree:!0}),r}const ga=new Map;let ba=0;function ya(){const t=window.devicePixelRatio;t!==ba&&(ba=t,ga.forEach(((e,i)=>{i.currentDevicePixelRatio!==t&&e()})))}function xa(t,i,a){const r=t.canvas,n=r&&Ie(r);if(!n)return;const o=e(((t,e)=>{const i=n.clientWidth;a(t,e),i<n.clientWidth&&a()}),window),s=new ResizeObserver((t=>{const e=t[0],i=e.contentRect.width,a=e.contentRect.height;0===i&&0===a||o(i,a)}));return s.observe(n),function(t,e){ga.size||window.addEventListener("resize",ya),ga.set(t,e)}(t,o),s}function wa(t,e,i){i&&i.disconnect(),"resize"===e&&function(t){ga.delete(t),ga.size||window.removeEventListener("resize",ya)}(t)}function va(t,i,a){const r=t.canvas,n=e((e=>{null!==t.ctx&&a(function(t,e){const i=ca[t.type]||t.type,{x:a,y:r}=We(t,e);return{type:i,chart:e,native:t,x:void 0!==a?a:null,y:void 0!==r?r:null}}(e,t))}),t,(t=>{const e=t[0];return[e,e.offsetX,e.offsetY]}));return function(t,e,i){t.addEventListener(e,i,ha)}(r,i,n),n}class ka extends la{acquireContext(t,e){const i=t&&t.getContext&&t.getContext("2d");return i&&i.canvas===t?(function(t,e){const i=t.style,a=t.getAttribute("height"),r=t.getAttribute("width");if(t.$chartjs={initial:{height:a,width:r,style:{display:i.display,height:i.height,width:i.width}}},i.display=i.display||"block",i.boxSizing=i.boxSizing||"border-box",da(r)){const e=$e(t,"width");void 0!==e&&(t.width=e)}if(da(a))if(""===t.style.height)t.height=t.width/(e||2);else{const e=$e(t,"height");void 0!==e&&(t.height=e)}}(t,e),i):null}releaseContext(t){const e=t.canvas;if(!e.$chartjs)return!1;const i=e.$chartjs.initial;["height","width"].forEach((t=>{const a=i[t];s(a)?e.removeAttribute(t):e.setAttribute(t,a)}));const a=i.style||{};return Object.keys(a).forEach((t=>{e.style[t]=a[t]})),e.width=e.width,delete e.$chartjs,!0}addEventListener(t,e,i){this.removeEventListener(t,e);const a=t.$proxies||(t.$proxies={}),r={attach:ma,detach:fa,resize:xa}[e]||va;a[e]=r(t,e,i)}removeEventListener(t,e){const i=t.$proxies||(t.$proxies={}),a=i[e];a&&(({attach:wa,detach:wa,resize:wa}[e]||pa)(t,e,a),i[e]=void 0)}getDevicePixelRatio(){return window.devicePixelRatio}getMaximumSize(t,e,i,a){return function(t,e,i,a){const r=Fe(t),n=Be(r,"margin"),o=ze(r.maxWidth,t,"clientWidth")||L,s=ze(r.maxHeight,t,"clientHeight")||L,l=function(t,e,i){let a,r;if(void 0===e||void 0===i){const n=Ie(t);if(n){const t=n.getBoundingClientRect(),o=Fe(n),s=Be(o,"border","width"),l=Be(o,"padding");e=t.width-l.width-s.width,i=t.height-l.height-s.height,a=ze(o.maxWidth,n,"clientWidth"),r=ze(o.maxHeight,n,"clientHeight")}else e=t.clientWidth,i=t.clientHeight}return{width:e,height:i,maxWidth:a||L,maxHeight:r||L}}(t,e,i);let{width:_,height:c}=l;if("content-box"===r.boxSizing){const t=Be(r,"border","width"),e=Be(r,"padding");_-=e.width+t.width,c-=e.height+t.height}return _=Math.max(0,_-n.width),c=Math.max(0,a?Math.floor(_/a):c-n.height),_=Ne(Math.min(_,o,l.maxWidth)),c=Ne(Math.min(c,s,l.maxHeight)),_&&!c&&(c=Ne(_/2)),{width:_,height:c}}(t,e,i,a)}isAttached(t){const e=Ie(t);return!(!e||!e.isConnected)}}class Ma{constructor(){this.x=void 0,this.y=void 0,this.active=!1,this.options=void 0,this.$animations=void 0}tooltipPosition(t){const{x:e,y:i}=this.getProps(["x","y"],t);return{x:e,y:i}}hasValue(){return W(this.x)&&W(this.y)}getProps(t,e){const i=this.$animations;if(!e||!i)return this;const a={};return t.forEach((t=>{a[t]=i[t]&&i[t].active()?i[t]._to:this[t]})),a}}Ma.defaults={},Ma.defaultRoutes=void 0;const Sa={values:t=>l(t)?t:""+t,numeric(t,e,i){if(0===t)return"0";const a=this.chart.options.locale;let r,n=t;if(i.length>1){const e=Math.max(Math.abs(i[0].value),Math.abs(i[i.length-1].value));(e<1e-4||e>1e15)&&(r="scientific"),n=function(t,e){let i=e.length>3?e[2].value-e[1].value:e[1].value-e[0].value;return Math.abs(i)>=1&&t!==Math.floor(t)&&(i=t-Math.floor(t)),i}(t,i)}const o=F(Math.abs(n)),s=Math.max(Math.min(-1*Math.floor(o),20),0),l={notation:r,minimumFractionDigits:s,maximumFractionDigits:s};return Object.assign(l,this.options.ticks.format),qe(t,a,l)},logarithmic(t,e,i){if(0===t)return"0";const a=t/Math.pow(10,Math.floor(F(t)));return 1===a||2===a||5===a?Sa.numeric.call(this,t,e,i):""}};var Pa={formatters:Sa};function Da(t,e,i,a,r){const n=h(a,0),o=Math.min(h(r,t.length),t.length);let s,l,_,c=0;for(i=Math.ceil(i),r&&(s=r-a,i=s/Math.floor(s/i)),_=n;_<0;)c++,_=Math.round(n+c*i);for(l=Math.max(n,0);l<o;l++)l===_&&(e.push(t[l]),c++,_=Math.round(n+c*i))}Bt.set("scale",{display:!0,offset:!1,reverse:!1,beginAtZero:!1,bounds:"ticks",grace:0,grid:{display:!0,lineWidth:1,drawBorder:!0,drawOnChartArea:!0,drawTicks:!0,tickLength:8,tickWidth:(t,e)=>e.lineWidth,tickColor:(t,e)=>e.color,offset:!1,borderDash:[],borderDashOffset:0,borderWidth:1},title:{display:!1,text:"",padding:{top:4,bottom:4}},ticks:{minRotation:0,maxRotation:50,mirror:!1,textStrokeWidth:0,textStrokeColor:"",padding:3,display:!0,autoSkip:!0,autoSkipPadding:3,labelOffset:0,callback:Pa.formatters.values,minor:{},major:{},align:"center",crossAlign:"near",showLabelBackdrop:!1,backdropColor:"rgba(255, 255, 255, 0.75)",backdropPadding:2}}),Bt.route("scale.ticks","color","","color"),Bt.route("scale.grid","color","","borderColor"),Bt.route("scale.grid","borderColor","","borderColor"),Bt.route("scale.title","color","","color"),Bt.describe("scale",{_fallback:!1,_scriptable:t=>!t.startsWith("before")&&!t.startsWith("after")&&"callback"!==t&&"parser"!==t,_indexable:t=>"borderDash"!==t&&"tickBorderDash"!==t}),Bt.describe("scales",{_fallback:"scale"}),Bt.describe("scale.ticks",{_scriptable:t=>"backdropPadding"!==t&&"callback"!==t,_indexable:t=>"backdropPadding"!==t});const Ta=(t,e,i)=>"top"===e||"left"===e?t[e]+i:t[e]-i;function Ca(t,e){const i=[],a=t.length/e,r=t.length;let n=0;for(;n<r;n+=a)i.push(t[Math.floor(n)]);return i}function Oa(t,e,i){const a=t.ticks.length,r=Math.min(e,a-1),n=t._startPixel,o=t._endPixel,s=1e-6;let l,_=t.getPixelForTick(r);if(!(i&&(l=1===a?Math.max(_-n,o-_):0===e?(t.getPixelForTick(1)-_)/2:(_-t.getPixelForTick(r-1))/2,_+=r<e?l:-l,_<n-s||_>o+s)))return _}function Aa(t){return t.drawTicks?t.tickLength:0}function La(t,e){if(!t.display)return 0;const i=oe(t.font,e),a=ne(t.padding);return(l(t.text)?t.text.length:1)*i.lineHeight+a.height}function Ra(t,e,i){let r=a(t);return(i&&"right"!==e||!i&&"right"===e)&&(r=(t=>"left"===t?"right":"right"===t?"left":t)(r)),r}class Ea extends Ma{constructor(t){super(),this.id=t.id,this.type=t.type,this.options=void 0,this.ctx=t.ctx,this.chart=t.chart,this.top=void 0,this.bottom=void 0,this.left=void 0,this.right=void 0,this.width=void 0,this.height=void 0,this._margins={left:0,right:0,top:0,bottom:0},this.maxWidth=void 0,this.maxHeight=void 0,this.paddingTop=void 0,this.paddingBottom=void 0,this.paddingLeft=void 0,this.paddingRight=void 0,this.axis=void 0,this.labelRotation=void 0,this.min=void 0,this.max=void 0,this._range=void 0,this.ticks=[],this._gridLineItems=null,this._labelItems=null,this._labelSizes=null,this._length=0,this._maxLength=0,this._longestTextCache={},this._startPixel=void 0,this._endPixel=void 0,this._reversePixels=!1,this._userMax=void 0,this._userMin=void 0,this._suggestedMax=void 0,this._suggestedMin=void 0,this._ticksLength=0,this._borderValue=0,this._cache={},this._dataLimitsCached=!1,this.$context=void 0}init(t){this.options=t.setContext(this.getContext()),this.axis=t.axis,this._userMin=this.parse(t.min),this._userMax=this.parse(t.max),this._suggestedMin=this.parse(t.suggestedMin),this._suggestedMax=this.parse(t.suggestedMax)}parse(t,e){return t}getUserBounds(){let{_userMin:t,_userMax:e,_suggestedMin:i,_suggestedMax:a}=this;return t=d(t,Number.POSITIVE_INFINITY),e=d(e,Number.NEGATIVE_INFINITY),i=d(i,Number.POSITIVE_INFINITY),a=d(a,Number.NEGATIVE_INFINITY),{min:d(t,i),max:d(e,a),minDefined:c(t),maxDefined:c(e)}}getMinMax(t){let e,{min:i,max:a,minDefined:r,maxDefined:n}=this.getUserBounds();if(r&&n)return{min:i,max:a};const o=this.getMatchingVisibleMetas();for(let s=0,l=o.length;s<l;++s)e=o[s].controller.getMinMax(this,t),r||(i=Math.min(i,e.min)),n||(a=Math.max(a,e.max));return i=n&&i>a?a:i,a=r&&i>a?i:a,{min:d(i,d(a,i)),max:d(a,d(i,a))}}getPadding(){return{left:this.paddingLeft||0,top:this.paddingTop||0,right:this.paddingRight||0,bottom:this.paddingBottom||0}}getTicks(){return this.ticks}getLabels(){const t=this.chart.data;return this.options.labels||(this.isHorizontal()?t.xLabels:t.yLabels)||t.labels||[]}beforeLayout(){this._cache={},this._dataLimitsCached=!1}beforeUpdate(){u(this.options.beforeUpdate,[this])}update(t,e,i){const{beginAtZero:a,grace:r,ticks:n}=this.options,o=n.sampleSize;this.beforeUpdate(),this.maxWidth=t,this.maxHeight=e,this._margins=i=Object.assign({left:0,right:0,top:0,bottom:0},i),this.ticks=null,this._labelSizes=null,this._gridLineItems=null,this._labelItems=null,this.beforeSetDimensions(),this.setDimensions(),this.afterSetDimensions(),this._maxLength=this.isHorizontal()?this.width+i.left+i.right:this.height+i.top+i.bottom,this._dataLimitsCached||(this.beforeDataLimits(),this.determineDataLimits(),this.afterDataLimits(),this._range=function(t,e,i){const{min:a,max:r}=t,n=p(e,(r-a)/2),o=(t,e)=>i&&0===t?0:t+e;return{min:o(a,-Math.abs(n)),max:o(r,n)}}(this,r,a),this._dataLimitsCached=!0),this.beforeBuildTicks(),this.ticks=this.buildTicks()||[],this.afterBuildTicks();const l=o<this.ticks.length;this._convertTicksToLabels(l?Ca(this.ticks,o):this.ticks),this.configure(),this.beforeCalculateLabelRotation(),this.calculateLabelRotation(),this.afterCalculateLabelRotation(),n.display&&(n.autoSkip||"auto"===n.source)&&(this.ticks=function(t,e){const i=t.options.ticks,a=i.maxTicksLimit||function(t){const e=t.options.offset,i=t._tickSize(),a=t._length/i+(e?0:1),r=t._maxLength/i;return Math.floor(Math.min(a,r))}(t),r=i.major.enabled?function(t){const e=[];let i,a;for(i=0,a=t.length;i<a;i++)t[i].major&&e.push(i);return e}(e):[],n=r.length,o=r[0],l=r[n-1],_=[];if(n>a)return function(t,e,i,a){let r,n=0,o=i[0];for(a=Math.ceil(a),r=0;r<t.length;r++)r===o&&(e.push(t[r]),n++,o=i[n*a])}(e,_,r,n/a),_;const c=function(t,e,i){const a=function(t){const e=t.length;let i,a;if(e<2)return!1;for(a=t[0],i=1;i<e;++i)if(t[i]-t[i-1]!==a)return!1;return a}(t),r=e.length/i;if(!a)return Math.max(r,1);const n=function(t){const e=[],i=Math.sqrt(t);let a;for(a=1;a<i;a++)t%a==0&&(e.push(a),e.push(t/a));return i===(0|i)&&e.push(i),e.sort(((t,e)=>t-e)).pop(),e}(a);for(let t=0,e=n.length-1;t<e;t++){const e=n[t];if(e>r)return e}return Math.max(r,1)}(r,e,a);if(n>0){let t,i;const a=n>1?Math.round((l-o)/(n-1)):null;for(Da(e,_,c,s(a)?0:o-a,o),t=0,i=n-1;t<i;t++)Da(e,_,c,r[t],r[t+1]);return Da(e,_,c,l,s(a)?e.length:l+a),_}return Da(e,_,c),_}(this,this.ticks),this._labelSizes=null),l&&this._convertTicksToLabels(this.ticks),this.beforeFit(),this.fit(),this.afterFit(),this.afterUpdate()}configure(){let t,e,i=this.options.reverse;this.isHorizontal()?(t=this.left,e=this.right):(t=this.top,e=this.bottom,i=!i),this._startPixel=t,this._endPixel=e,this._reversePixels=i,this._length=e-t,this._alignToPixels=this.options.alignToPixels}afterUpdate(){u(this.options.afterUpdate,[this])}beforeSetDimensions(){u(this.options.beforeSetDimensions,[this])}setDimensions(){this.isHorizontal()?(this.width=this.maxWidth,this.left=0,this.right=this.width):(this.height=this.maxHeight,this.top=0,this.bottom=this.height),this.paddingLeft=0,this.paddingTop=0,this.paddingRight=0,this.paddingBottom=0}afterSetDimensions(){u(this.options.afterSetDimensions,[this])}_callHooks(t){this.chart.notifyPlugins(t,this.getContext()),u(this.options[t],[this])}beforeDataLimits(){this._callHooks("beforeDataLimits")}determineDataLimits(){}afterDataLimits(){this._callHooks("afterDataLimits")}beforeBuildTicks(){this._callHooks("beforeBuildTicks")}buildTicks(){return[]}afterBuildTicks(){this._callHooks("afterBuildTicks")}beforeTickToLabelConversion(){u(this.options.beforeTickToLabelConversion,[this])}generateTickLabels(t){const e=this.options.ticks;let i,a,r;for(i=0,a=t.length;i<a;i++)r=t[i],r.label=u(e.callback,[r.value,i,t],this)}afterTickToLabelConversion(){u(this.options.afterTickToLabelConversion,[this])}beforeCalculateLabelRotation(){u(this.options.beforeCalculateLabelRotation,[this])}calculateLabelRotation(){const t=this.options,e=t.ticks,i=this.ticks.length,a=e.minRotation||0,r=e.maxRotation;let n,o,s,l=a;if(!this._isVisible()||!e.display||a>=r||i<=1||!this.isHorizontal())return void(this.labelRotation=a);const _=this._getLabelSizes(),c=_.widest.width,d=_.highest.height,h=G(this.chart.width-c,0,this.maxWidth);n=t.offset?this.maxWidth/i:h/(i-1),c+6>n&&(n=h/(i-(t.offset?.5:1)),o=this.maxHeight-Aa(t.grid)-e.padding-La(t.title,this.chart.options.font),s=Math.sqrt(c*c+d*d),l=$(Math.min(Math.asin(G((_.highest.height+6)/n,-1,1)),Math.asin(G(o/s,-1,1))-Math.asin(G(d/s,-1,1)))),l=Math.max(a,Math.min(r,l))),this.labelRotation=l}afterCalculateLabelRotation(){u(this.options.afterCalculateLabelRotation,[this])}beforeFit(){u(this.options.beforeFit,[this])}fit(){const t={width:0,height:0},{chart:e,options:{ticks:i,title:a,grid:r}}=this,n=this._isVisible(),o=this.isHorizontal();if(n){const n=La(a,e.options.font);if(o?(t.width=this.maxWidth,t.height=Aa(r)+n):(t.height=this.maxHeight,t.width=Aa(r)+n),i.display&&this.ticks.length){const{first:e,last:a,widest:r,highest:n}=this._getLabelSizes(),s=2*i.padding,l=j(this.labelRotation),_=Math.cos(l),c=Math.sin(l);if(o){const e=i.mirror?0:c*r.width+_*n.height;t.height=Math.min(this.maxHeight,t.height+e+s)}else{const e=i.mirror?0:_*r.width+c*n.height;t.width=Math.min(this.maxWidth,t.width+e+s)}this._calculatePadding(e,a,c,_)}}this._handleMargins(),o?(this.width=this._length=e.width-this._margins.left-this._margins.right,this.height=t.height):(this.width=t.width,this.height=this._length=e.height-this._margins.top-this._margins.bottom)}_calculatePadding(t,e,i,a){const{ticks:{align:r,padding:n},position:o}=this.options,s=0!==this.labelRotation,l="top"!==o&&"x"===this.axis;if(this.isHorizontal()){const o=this.getPixelForTick(0)-this.left,_=this.right-this.getPixelForTick(this.ticks.length-1);let c=0,d=0;s?l?(c=a*t.width,d=i*e.height):(c=i*t.height,d=a*e.width):"start"===r?d=e.width:"end"===r?c=t.width:(c=t.width/2,d=e.width/2),this.paddingLeft=Math.max((c-o+n)*this.width/(this.width-o),0),this.paddingRight=Math.max((d-_+n)*this.width/(this.width-_),0)}else{let i=e.height/2,a=t.height/2;"start"===r?(i=0,a=t.height):"end"===r&&(i=e.height,a=0),this.paddingTop=i+n,this.paddingBottom=a+n}}_handleMargins(){this._margins&&(this._margins.left=Math.max(this.paddingLeft,this._margins.left),this._margins.top=Math.max(this.paddingTop,this._margins.top),this._margins.right=Math.max(this.paddingRight,this._margins.right),this._margins.bottom=Math.max(this.paddingBottom,this._margins.bottom))}afterFit(){u(this.options.afterFit,[this])}isHorizontal(){const{axis:t,position:e}=this.options;return"top"===e||"bottom"===e||"x"===t}isFullSize(){return this.options.fullSize}_convertTicksToLabels(t){let e,i;for(this.beforeTickToLabelConversion(),this.generateTickLabels(t),e=0,i=t.length;e<i;e++)s(t[e].label)&&(t.splice(e,1),i--,e--);this.afterTickToLabelConversion()}_getLabelSizes(){let t=this._labelSizes;if(!t){const e=this.options.ticks.sampleSize;let i=this.ticks;e<i.length&&(i=Ca(i,e)),this._labelSizes=t=this._computeLabelSizes(i,i.length)}return t}_computeLabelSizes(t,e){const{ctx:i,_longestTextCache:a}=this,r=[],n=[];let o,_,c,d,h,p,u,f,g,b,y,x=0,w=0;for(o=0;o<e;++o){if(d=t[o].label,h=this._resolveTickFontOptions(o),i.font=p=h.string,u=a[p]=a[p]||{data:{},gc:[]},f=h.lineHeight,g=b=0,s(d)||l(d)){if(l(d))for(_=0,c=d.length;_<c;++_)y=d[_],s(y)||l(y)||(g=Wt(i,u.data,u.gc,g,y),b+=f)}else g=Wt(i,u.data,u.gc,g,d),b=f;r.push(g),n.push(b),x=Math.max(g,x),w=Math.max(b,w)}!function(t,e){m(t,(t=>{const i=t.gc,a=i.length/2;let r;if(a>e){for(r=0;r<a;++r)delete t.data[i[r]];i.splice(0,a)}}))}(a,e);const v=r.indexOf(x),k=n.indexOf(w),M=t=>({width:r[t]||0,height:n[t]||0});return{first:M(0),last:M(e-1),widest:M(v),highest:M(k),widths:r,heights:n}}getLabelForValue(t){return t}getPixelForValue(t,e){return NaN}getValueForPixel(t){}getPixelForTick(t){const e=this.ticks;return t<0||t>e.length-1?null:this.getPixelForValue(e[t].value)}getPixelForDecimal(t){this._reversePixels&&(t=1-t);const e=this._startPixel+t*this._length;return G(this._alignToPixels?Ht(this.chart,e,0):e,-32768,32767)}getDecimalForPixel(t){const e=(t-this._startPixel)/this._length;return this._reversePixels?1-e:e}getBasePixel(){return this.getPixelForValue(this.getBaseValue())}getBaseValue(){const{min:t,max:e}=this;return t<0&&e<0?e:t>0&&e>0?t:0}getContext(t){const e=this.ticks||[];if(t>=0&&t<e.length){const i=e[t];return i.$context||(i.$context=function(t,e,i){return le(t,{tick:i,index:e,type:"tick"})}(this.getContext(),t,i))}return this.$context||(this.$context=le(this.chart.getContext(),{scale:this,type:"scale"}))}_tickSize(){const t=this.options.ticks,e=j(this.labelRotation),i=Math.abs(Math.cos(e)),a=Math.abs(Math.sin(e)),r=this._getLabelSizes(),n=t.autoSkipPadding||0,o=r?r.widest.width+n:0,s=r?r.highest.height+n:0;return this.isHorizontal()?s*i>o*a?o/i:s/a:s*a<o*i?s/i:o/a}_isVisible(){const t=this.options.display;return"auto"!==t?!!t:this.getMatchingVisibleMetas().length>0}_computeGridLineItems(t){const e=this.axis,i=this.chart,a=this.options,{grid:r,position:n}=a,o=r.offset,s=this.isHorizontal(),l=this.ticks.length+(o?1:0),c=Aa(r),d=[],p=r.setContext(this.getContext()),u=p.drawBorder?p.borderWidth:0,m=u/2,f=function(t){return Ht(i,t,u)};let g,b,y,x,w,v,k,M,S,P,D,T;if("top"===n)g=f(this.bottom),v=this.bottom-c,M=g-m,P=f(t.top)+m,T=t.bottom;else if("bottom"===n)g=f(this.top),P=t.top,T=f(t.bottom)-m,v=g+m,M=this.top+c;else if("left"===n)g=f(this.right),w=this.right-c,k=g-m,S=f(t.left)+m,D=t.right;else if("right"===n)g=f(this.left),S=t.left,D=f(t.right)-m,w=g+m,k=this.left+c;else if("x"===e){if("center"===n)g=f((t.top+t.bottom)/2+.5);else if(_(n)){const t=Object.keys(n)[0],e=n[t];g=f(this.chart.scales[t].getPixelForValue(e))}P=t.top,T=t.bottom,v=g+m,M=v+c}else if("y"===e){if("center"===n)g=f((t.left+t.right)/2);else if(_(n)){const t=Object.keys(n)[0],e=n[t];g=f(this.chart.scales[t].getPixelForValue(e))}w=g-m,k=w-c,S=t.left,D=t.right}const C=h(a.ticks.maxTicksLimit,l),O=Math.max(1,Math.ceil(l/C));for(b=0;b<l;b+=O){const t=r.setContext(this.getContext(b)),e=t.lineWidth,a=t.color,n=r.borderDash||[],l=t.borderDashOffset,_=t.tickWidth,c=t.tickColor,h=t.tickBorderDash||[],p=t.tickBorderDashOffset;y=Oa(this,b,o),void 0!==y&&(x=Ht(i,y,e),s?w=k=S=D=x:v=M=P=T=x,d.push({tx1:w,ty1:v,tx2:k,ty2:M,x1:S,y1:P,x2:D,y2:T,width:e,color:a,borderDash:n,borderDashOffset:l,tickWidth:_,tickColor:c,tickBorderDash:h,tickBorderDashOffset:p}))}return this._ticksLength=l,this._borderValue=g,d}_computeLabelItems(t){const e=this.axis,i=this.options,{position:a,ticks:r}=i,n=this.isHorizontal(),o=this.ticks,{align:s,crossAlign:c,padding:d,mirror:h}=r,p=Aa(i.grid),u=p+d,m=h?-d:u,f=-j(this.labelRotation),g=[];let b,y,x,w,v,k,M,S,P,D,T,C,O="middle";if("top"===a)k=this.bottom-m,M=this._getXAxisLabelAlignment();else if("bottom"===a)k=this.top+m,M=this._getXAxisLabelAlignment();else if("left"===a){const t=this._getYAxisLabelAlignment(p);M=t.textAlign,v=t.x}else if("right"===a){const t=this._getYAxisLabelAlignment(p);M=t.textAlign,v=t.x}else if("x"===e){if("center"===a)k=(t.top+t.bottom)/2+u;else if(_(a)){const t=Object.keys(a)[0],e=a[t];k=this.chart.scales[t].getPixelForValue(e)+u}M=this._getXAxisLabelAlignment()}else if("y"===e){if("center"===a)v=(t.left+t.right)/2-u;else if(_(a)){const t=Object.keys(a)[0],e=a[t];v=this.chart.scales[t].getPixelForValue(e)}M=this._getYAxisLabelAlignment(p).textAlign}"y"===e&&("start"===s?O="top":"end"===s&&(O="bottom"));const A=this._getLabelSizes();for(b=0,y=o.length;b<y;++b){x=o[b],w=x.label;const t=r.setContext(this.getContext(b));S=this.getPixelForTick(b)+r.labelOffset,P=this._resolveTickFontOptions(b),D=P.lineHeight,T=l(w)?w.length:1;const e=T/2,i=t.color,s=t.textStrokeColor,_=t.textStrokeWidth;let d;if(n?(v=S,C="top"===a?"near"===c||0!==f?-T*D+D/2:"center"===c?-A.highest.height/2-e*D+D:-A.highest.height+D/2:"near"===c||0!==f?D/2:"center"===c?A.highest.height/2-e*D:A.highest.height-T*D,h&&(C*=-1)):(k=S,C=(1-T)*D/2),t.showLabelBackdrop){const e=ne(t.backdropPadding),i=A.heights[b],a=A.widths[b];let r=k+C-e.top,n=v-e.left;switch(O){case"middle":r-=i/2;break;case"bottom":r-=i}switch(M){case"center":n-=a/2;break;case"right":n-=a}d={left:n,top:r,width:a+e.width,height:i+e.height,color:t.backdropColor}}g.push({rotation:f,label:w,font:P,color:i,strokeColor:s,strokeWidth:_,textOffset:C,textAlign:M,textBaseline:O,translation:[v,k],backdrop:d})}return g}_getXAxisLabelAlignment(){const{position:t,ticks:e}=this.options;if(-j(this.labelRotation))return"top"===t?"left":"right";let i="center";return"start"===e.align?i="left":"end"===e.align&&(i="right"),i}_getYAxisLabelAlignment(t){const{position:e,ticks:{crossAlign:i,mirror:a,padding:r}}=this.options,n=t+r,o=this._getLabelSizes().widest.width;let s,l;return"left"===e?a?(l=this.right+r,"near"===i?s="left":"center"===i?(s="center",l+=o/2):(s="right",l+=o)):(l=this.right-n,"near"===i?s="right":"center"===i?(s="center",l-=o/2):(s="left",l=this.left)):"right"===e?a?(l=this.left+r,"near"===i?s="right":"center"===i?(s="center",l-=o/2):(s="left",l-=o)):(l=this.left+n,"near"===i?s="left":"center"===i?(s="center",l+=o/2):(s="right",l=this.right)):s="right",{textAlign:s,x:l}}_computeLabelArea(){if(this.options.ticks.mirror)return;const t=this.chart,e=this.options.position;return"left"===e||"right"===e?{top:0,left:this.left,bottom:t.height,right:this.right}:"top"===e||"bottom"===e?{top:this.top,left:0,bottom:this.bottom,right:t.width}:void 0}drawBackground(){const{ctx:t,options:{backgroundColor:e},left:i,top:a,width:r,height:n}=this;e&&(t.save(),t.fillStyle=e,t.fillRect(i,a,r,n),t.restore())}getLineWidthForValue(t){const e=this.options.grid;if(!this._isVisible()||!e.display)return 0;const i=this.ticks.findIndex((e=>e.value===t));return i>=0?e.setContext(this.getContext(i)).lineWidth:0}drawGrid(t){const e=this.options.grid,i=this.ctx,a=this._gridLineItems||(this._gridLineItems=this._computeGridLineItems(t));let r,n;const o=(t,e,a)=>{a.width&&a.color&&(i.save(),i.lineWidth=a.width,i.strokeStyle=a.color,i.setLineDash(a.borderDash||[]),i.lineDashOffset=a.borderDashOffset,i.beginPath(),i.moveTo(t.x,t.y),i.lineTo(e.x,e.y),i.stroke(),i.restore())};if(e.display)for(r=0,n=a.length;r<n;++r){const t=a[r];e.drawOnChartArea&&o({x:t.x1,y:t.y1},{x:t.x2,y:t.y2},t),e.drawTicks&&o({x:t.tx1,y:t.ty1},{x:t.tx2,y:t.ty2},{color:t.tickColor,width:t.tickWidth,borderDash:t.tickBorderDash,borderDashOffset:t.tickBorderDashOffset})}}drawBorder(){const{chart:t,ctx:e,options:{grid:i}}=this,a=i.setContext(this.getContext()),r=i.drawBorder?a.borderWidth:0;if(!r)return;const n=i.setContext(this.getContext(0)).lineWidth,o=this._borderValue;let s,l,_,c;this.isHorizontal()?(s=Ht(t,this.left,r)-r/2,l=Ht(t,this.right,n)+n/2,_=c=o):(_=Ht(t,this.top,r)-r/2,c=Ht(t,this.bottom,n)+n/2,s=l=o),e.save(),e.lineWidth=a.borderWidth,e.strokeStyle=a.borderColor,e.beginPath(),e.moveTo(s,_),e.lineTo(l,c),e.stroke(),e.restore()}drawLabels(t){if(!this.options.ticks.display)return;const e=this.ctx,i=this._computeLabelArea();i&&Yt(e,i);const a=this._labelItems||(this._labelItems=this._computeLabelItems(t));let r,n;for(r=0,n=a.length;r<n;++r){const t=a[r],i=t.font,n=t.label;t.backdrop&&(e.fillStyle=t.backdrop.color,e.fillRect(t.backdrop.left,t.backdrop.top,t.backdrop.width,t.backdrop.height)),Kt(e,n,0,t.textOffset,i,t)}i&&Ut(e)}drawTitle(){const{ctx:t,options:{position:e,title:i,reverse:a}}=this;if(!i.display)return;const n=oe(i.font),o=ne(i.padding),s=i.align;let c=n.lineHeight/2;"bottom"===e||"center"===e||_(e)?(c+=o.bottom,l(i.text)&&(c+=n.lineHeight*(i.text.length-1))):c+=o.top;const{titleX:d,titleY:h,maxWidth:p,rotation:u}=function(t,e,i,a){const{top:n,left:o,bottom:s,right:l,chart:c}=t,{chartArea:d,scales:h}=c;let p,u,m,f=0;const g=s-n,b=l-o;if(t.isHorizontal()){if(u=r(a,o,l),_(i)){const t=Object.keys(i)[0],a=i[t];m=h[t].getPixelForValue(a)+g-e}else m="center"===i?(d.bottom+d.top)/2+g-e:Ta(t,i,e);p=l-o}else{if(_(i)){const t=Object.keys(i)[0],a=i[t];u=h[t].getPixelForValue(a)-b+e}else u="center"===i?(d.left+d.right)/2-b+e:Ta(t,i,e);m=r(a,s,n),f="left"===i?-E:E}return{titleX:u,titleY:m,maxWidth:p,rotation:f}}(this,c,e,s);Kt(t,i.text,0,0,n,{color:i.color,maxWidth:p,rotation:u,textAlign:Ra(s,e,a),textBaseline:"middle",translation:[d,h]})}draw(t){this._isVisible()&&(this.drawBackground(),this.drawGrid(t),this.drawBorder(),this.drawTitle(),this.drawLabels(t))}_layers(){const t=this.options,e=t.ticks&&t.ticks.z||0,i=h(t.grid&&t.grid.z,-1);return this._isVisible()&&this.draw===Ea.prototype.draw?[{z:i,draw:t=>{this.drawBackground(),this.drawGrid(t),this.drawTitle()}},{z:i+1,draw:()=>{this.drawBorder()}},{z:e,draw:t=>{this.drawLabels(t)}}]:[{z:e,draw:t=>{this.draw(t)}}]}getMatchingVisibleMetas(t){const e=this.chart.getSortedVisibleDatasetMetas(),i=this.axis+"AxisID",a=[];let r,n;for(r=0,n=e.length;r<n;++r){const n=e[r];n[i]!==this.id||t&&n.type!==t||a.push(n)}return a}_resolveTickFontOptions(t){return oe(this.options.ticks.setContext(this.getContext(t)).font)}_maxDigits(){const t=this._resolveTickFontOptions(0).lineHeight;return(this.isHorizontal()?this.width:this.height)/t}}class Ia{constructor(t,e,i){this.type=t,this.scope=e,this.override=i,this.items=Object.create(null)}isForType(t){return Object.prototype.isPrototypeOf.call(this.type.prototype,t.prototype)}register(t){const e=Object.getPrototypeOf(t);let i;(function(t){return"id"in t&&"defaults"in t})(e)&&(i=this.register(e));const a=this.items,r=t.id,n=this.scope+"."+r;if(!r)throw new Error("class does not have id: "+t);return r in a||(a[r]=t,function(t,e,i){const a=x(Object.create(null),[i?Bt.get(i):{},Bt.get(e),t.defaults]);Bt.set(e,a),t.defaultRoutes&&function(t,e){Object.keys(e).forEach((i=>{const a=i.split("."),r=a.pop(),n=[t].concat(a).join("."),o=e[i].split("."),s=o.pop(),l=o.join(".");Bt.route(n,r,l,s)}))}(e,t.defaultRoutes),t.descriptors&&Bt.describe(e,t.descriptors)}(t,n,i),this.override&&Bt.override(t.id,t.overrides)),n}get(t){return this.items[t]}unregister(t){const e=this.items,i=t.id,a=this.scope;i in e&&delete e[i],a&&i in Bt[a]&&(delete Bt[a][i],this.override&&delete It[i])}}var za=new class{constructor(){this.controllers=new Ia(vi,"datasets",!0),this.elements=new Ia(Ma,"elements"),this.plugins=new Ia(Object,"plugins"),this.scales=new Ia(Ea,"scales"),this._typedRegistries=[this.controllers,this.scales,this.elements]}add(...t){this._each("register",t)}remove(...t){this._each("unregister",t)}addControllers(...t){this._each("register",t,this.controllers)}addElements(...t){this._each("register",t,this.elements)}addPlugins(...t){this._each("register",t,this.plugins)}addScales(...t){this._each("register",t,this.scales)}getController(t){return this._get(t,this.controllers,"controller")}getElement(t){return this._get(t,this.elements,"element")}getPlugin(t){return this._get(t,this.plugins,"plugin")}getScale(t){return this._get(t,this.scales,"scale")}removeControllers(...t){this._each("unregister",t,this.controllers)}removeElements(...t){this._each("unregister",t,this.elements)}removePlugins(...t){this._each("unregister",t,this.plugins)}removeScales(...t){this._each("unregister",t,this.scales)}_each(t,e,i){[...e].forEach((e=>{const a=i||this._getRegistryForType(e);i||a.isForType(e)||a===this.plugins&&e.id?this._exec(t,a,e):m(e,(e=>{const a=i||this._getRegistryForType(e);this._exec(t,a,e)}))}))}_exec(t,e,i){const a=S(t);u(i["before"+a],[],i),e[t](i),u(i["after"+a],[],i)}_getRegistryForType(t){for(let e=0;e<this._typedRegistries.length;e++){const i=this._typedRegistries[e];if(i.isForType(t))return i}return this.plugins}_get(t,e,i){const a=e.get(t);if(void 0===a)throw new Error('"'+t+'" is not a registered '+i+".");return a}};class Fa{constructor(){this._init=[]}notify(t,e,i,a){"beforeInit"===e&&(this._init=this._createDescriptors(t,!0),this._notify(this._init,t,"install"));const r=a?this._descriptors(t).filter(a):this._descriptors(t),n=this._notify(r,t,e,i);return"afterDestroy"===e&&(this._notify(r,t,"stop"),this._notify(this._init,t,"uninstall")),n}_notify(t,e,i,a){a=a||{};for(const r of t){const t=r.plugin;if(!1===u(t[i],[e,a,r.options],t)&&a.cancelable)return!1}return!0}invalidate(){s(this._cache)||(this._oldCache=this._cache,this._cache=void 0)}_descriptors(t){if(this._cache)return this._cache;const e=this._cache=this._createDescriptors(t);return this._notifyStateChanges(t),e}_createDescriptors(t,e){const i=t&&t.config,a=h(i.options&&i.options.plugins,{}),r=function(t){const e=[],i=Object.keys(za.plugins.items);for(let t=0;t<i.length;t++)e.push(za.getPlugin(i[t]));const a=t.plugins||[];for(let t=0;t<a.length;t++){const i=a[t];-1===e.indexOf(i)&&e.push(i)}return e}(i);return!1!==a||e?function(t,e,i,a){const r=[],n=t.getContext();for(let o=0;o<e.length;o++){const s=e[o],l=Va(i[s.id],a);null!==l&&r.push({plugin:s,options:Ba(t.config,s,l,n)})}return r}(t,r,a,e):[]}_notifyStateChanges(t){const e=this._oldCache||[],i=this._cache,a=(t,e)=>t.filter((t=>!e.some((e=>t.plugin.id===e.plugin.id))));this._notify(a(e,i),t,"stop"),this._notify(a(i,e),t,"start")}}function Va(t,e){return e||!1!==t?!0===t?{}:t:null}function Ba(t,e,i,a){const r=t.pluginScopeKeys(e),n=t.getOptionScopes(i,r);return t.createResolver(n,a,[""],{scriptable:!1,indexable:!1,allKeys:!0})}function Wa(t,e){const i=Bt.datasets[t]||{};return((e.datasets||{})[t]||{}).indexAxis||e.indexAxis||i.indexAxis||"x"}function Na(t,e){return"x"===t||"y"===t?t:e.axis||("top"===(i=e.position)||"bottom"===i?"x":"left"===i||"right"===i?"y":void 0)||t.charAt(0).toLowerCase();var i}function Ha(t){const e=t.options||(t.options={});e.plugins=h(e.plugins,{}),e.scales=function(t,e){const i=It[t.type]||{scales:{}},a=e.scales||{},r=Wa(t.type,e),n=Object.create(null),o=Object.create(null);return Object.keys(a).forEach((t=>{const e=a[t];if(!_(e))return console.error(`Invalid scale configuration for scale: ${t}`);if(e._proxy)return console.warn(`Ignoring resolver passed as options for scale: ${t}`);const s=Na(t,e),l=function(t,e){return t===e?"_index_":"_value_"}(s,r),c=i.scales||{};n[s]=n[s]||t,o[t]=w(Object.create(null),[{axis:s},e,c[s],c[l]])})),t.data.datasets.forEach((i=>{const r=i.type||t.type,s=i.indexAxis||Wa(r,e),l=(It[r]||{}).scales||{};Object.keys(l).forEach((t=>{const e=function(t,e){let i=t;return"_index_"===t?i=e:"_value_"===t&&(i="x"===e?"y":"x"),i}(t,s),r=i[e+"AxisID"]||n[e]||e;o[r]=o[r]||Object.create(null),w(o[r],[{axis:e},a[r],l[t]])}))})),Object.keys(o).forEach((t=>{const e=o[t];w(e,[Bt.scales[e.type],Bt.scale])})),o}(t,e)}function ja(t){return(t=t||{}).datasets=t.datasets||[],t.labels=t.labels||[],t}const $a=new Map,Za=new Set;function Ya(t,e){let i=$a.get(t);return i||(i=e(),$a.set(t,i),Za.add(i)),i}const Ua=(t,e,i)=>{const a=M(e,i);void 0!==a&&t.add(a)};class Xa{constructor(t){this._config=function(t){return(t=t||{}).data=ja(t.data),Ha(t),t}(t),this._scopeCache=new Map,this._resolverCache=new Map}get platform(){return this._config.platform}get type(){return this._config.type}set type(t){this._config.type=t}get data(){return this._config.data}set data(t){this._config.data=ja(t)}get options(){return this._config.options}set options(t){this._config.options=t}get plugins(){return this._config.plugins}update(){const t=this._config;this.clearCache(),Ha(t)}clearCache(){this._scopeCache.clear(),this._resolverCache.clear()}datasetScopeKeys(t){return Ya(t,(()=>[[`datasets.${t}`,""]]))}datasetAnimationScopeKeys(t,e){return Ya(`${t}.transition.${e}`,(()=>[[`datasets.${t}.transitions.${e}`,`transitions.${e}`],[`datasets.${t}`,""]]))}datasetElementScopeKeys(t,e){return Ya(`${t}-${e}`,(()=>[[`datasets.${t}.elements.${e}`,`datasets.${t}`,`elements.${e}`,""]]))}pluginScopeKeys(t){const e=t.id;return Ya(`${this.type}-plugin-${e}`,(()=>[[`plugins.${e}`,...t.additionalOptionScopes||[]]]))}_cachedScopes(t,e){const i=this._scopeCache;let a=i.get(t);return a&&!e||(a=new Map,i.set(t,a)),a}getOptionScopes(t,e,i){const{options:a,type:r}=this,n=this._cachedScopes(t,i),o=n.get(e);if(o)return o;const s=new Set;e.forEach((e=>{t&&(s.add(t),e.forEach((e=>Ua(s,t,e)))),e.forEach((t=>Ua(s,a,t))),e.forEach((t=>Ua(s,It[r]||{},t))),e.forEach((t=>Ua(s,Bt,t))),e.forEach((t=>Ua(s,zt,t)))}));const l=Array.from(s);return 0===l.length&&l.push(Object.create(null)),Za.has(e)&&n.set(e,l),l}chartOptionScopes(){const{options:t,type:e}=this;return[t,It[e]||{},Bt.datasets[e]||{},{type:e},Bt,zt]}resolveNamedOptions(t,e,i,a=[""]){const r={$shared:!0},{resolver:n,subPrefixes:o}=qa(this._resolverCache,t,a);let s=n;(function(t,e){const{isScriptable:i,isIndexable:a}=ge(t);for(const r of e){const e=i(r),n=a(r),o=(n||e)&&t[r];if(e&&(D(o)||Ka(o))||n&&l(o))return!0}return!1})(n,e)&&(r.$shared=!1,s=fe(n,i=D(i)?i():i,this.createResolver(t,i,o)));for(const t of e)r[t]=s[t];return r}createResolver(t,e,i=[""],a){const{resolver:r}=qa(this._resolverCache,t,i);return _(e)?fe(r,e,void 0,a):r}}function qa(t,e,i){let a=t.get(e);a||(a=new Map,t.set(e,a));const r=i.join();let n=a.get(r);return n||(n={resolver:me(e,i),subPrefixes:i.filter((t=>!t.toLowerCase().includes("hover")))},a.set(r,n)),n}const Ka=t=>_(t)&&Object.getOwnPropertyNames(t).reduce(((e,i)=>e||D(t[i])),!1),Ga=["top","bottom","left","right","chartArea"];function Ja(t,e){return"top"===t||"bottom"===t||-1===Ga.indexOf(t)&&"x"===e}function Qa(t,e){return function(i,a){return i[t]===a[t]?i[e]-a[e]:i[t]-a[t]}}function tr(t){const e=t.chart,i=e.options.animation;e.notifyPlugins("afterRender"),u(i&&i.onComplete,[t],e)}function er(t){const e=t.chart,i=e.options.animation;u(i&&i.onProgress,[t],e)}function ir(t){return Ee()&&"string"==typeof t?t=document.getElementById(t):t&&t.length&&(t=t[0]),t&&t.canvas&&(t=t.canvas),t}const ar={},rr=t=>{const e=ir(t);return Object.values(ar).filter((t=>t.canvas===e)).pop()};function nr(t,e,i){const a=Object.keys(t);for(const r of a){const a=+r;if(a>=e){const n=t[r];delete t[r],(i>0||a>e)&&(t[a+i]=n)}}}class or{constructor(t,e){const i=this.config=new Xa(e),a=ir(t),r=rr(a);if(r)throw new Error("Canvas is already in use. Chart with ID '"+r.id+"' must be destroyed before the canvas can be reused.");const n=i.createResolver(i.chartOptionScopes(),this.getContext());this.platform=new(i.platform||function(t){return!Ee()||"undefined"!=typeof OffscreenCanvas&&t instanceof OffscreenCanvas?_a:ka}(a)),this.platform.updateConfig(i);const s=this.platform.acquireContext(a,n.aspectRatio),l=s&&s.canvas,_=l&&l.height,c=l&&l.width;this.id=o(),this.ctx=s,this.canvas=l,this.width=c,this.height=_,this._options=n,this._aspectRatio=this.aspectRatio,this._layers=[],this._metasets=[],this._stacks=void 0,this.boxes=[],this.currentDevicePixelRatio=void 0,this.chartArea=void 0,this._active=[],this._lastEvent=void 0,this._listeners={},this._responsiveListeners=void 0,this._sortedMetasets=[],this.scales={},this._plugins=new Fa,this.$proxies={},this._hiddenIndices={},this.attached=!1,this._animationsDisabled=void 0,this.$context=void 0,this._doResize=function(t,e){let i;return function(...a){return e?(clearTimeout(i),i=setTimeout(t,e,a)):t.apply(this,a),e}}((t=>this.update(t)),n.resizeDelay||0),this._dataChanges=[],ar[this.id]=this,s&&l?(ni.listen(this,"complete",tr),ni.listen(this,"progress",er),this._initialize(),this.attached&&this.update()):console.error("Failed to create chart: can't acquire context from the given item")}get aspectRatio(){const{options:{aspectRatio:t,maintainAspectRatio:e},width:i,height:a,_aspectRatio:r}=this;return s(t)?e&&r?r:a?i/a:null:t}get data(){return this.config.data}set data(t){this.config.data=t}get options(){return this._options}set options(t){this.config.options=t}_initialize(){return this.notifyPlugins("beforeInit"),this.options.responsive?this.resize():He(this,this.options.devicePixelRatio),this.bindEvents(),this.notifyPlugins("afterInit"),this}clear(){return jt(this.canvas,this.ctx),this}stop(){return ni.stop(this),this}resize(t,e){ni.running(this)?this._resizeBeforeDraw={width:t,height:e}:this._resize(t,e)}_resize(t,e){const i=this.options,a=this.canvas,r=i.maintainAspectRatio&&this.aspectRatio,n=this.platform.getMaximumSize(a,t,e,r),o=i.devicePixelRatio||this.platform.getDevicePixelRatio(),s=this.width?"resize":"attach";this.width=n.width,this.height=n.height,this._aspectRatio=this.aspectRatio,He(this,o,!0)&&(this.notifyPlugins("resize",{size:n}),u(i.onResize,[this,n],this),this.attached&&this._doResize(s)&&this.render())}ensureScalesHaveIDs(){m(this.options.scales||{},((t,e)=>{t.id=e}))}buildOrUpdateScales(){const t=this.options,e=t.scales,i=this.scales,a=Object.keys(i).reduce(((t,e)=>(t[e]=!1,t)),{});let r=[];e&&(r=r.concat(Object.keys(e).map((t=>{const i=e[t],a=Na(t,i),r="r"===a,n="x"===a;return{options:i,dposition:r?"chartArea":n?"bottom":"left",dtype:r?"radialLinear":n?"category":"linear"}})))),m(r,(e=>{const r=e.options,n=r.id,o=Na(n,r),s=h(r.type,e.dtype);void 0!==r.position&&Ja(r.position,o)===Ja(e.dposition)||(r.position=e.dposition),a[n]=!0;let l=null;n in i&&i[n].type===s?l=i[n]:(l=new(za.getScale(s))({id:n,type:s,ctx:this.ctx,chart:this}),i[l.id]=l),l.init(r,t)})),m(a,((t,e)=>{t||delete i[e]})),m(i,(t=>{sa.configure(this,t,t.options),sa.addBox(this,t)}))}_updateMetasets(){const t=this._metasets,e=this.data.datasets.length,i=t.length;if(t.sort(((t,e)=>t.index-e.index)),i>e){for(let t=e;t<i;++t)this._destroyDatasetMeta(t);t.splice(e,i-e)}this._sortedMetasets=t.slice(0).sort(Qa("order","index"))}_removeUnreferencedMetasets(){const{_metasets:t,data:{datasets:e}}=this;t.length>e.length&&delete this._stacks,t.forEach(((t,i)=>{0===e.filter((e=>e===t._dataset)).length&&this._destroyDatasetMeta(i)}))}buildOrUpdateControllers(){const t=[],e=this.data.datasets;let i,a;for(this._removeUnreferencedMetasets(),i=0,a=e.length;i<a;i++){const a=e[i];let r=this.getDatasetMeta(i);const n=a.type||this.config.type;if(r.type&&r.type!==n&&(this._destroyDatasetMeta(i),r=this.getDatasetMeta(i)),r.type=n,r.indexAxis=a.indexAxis||Wa(n,this.options),r.order=a.order||0,r.index=i,r.label=""+a.label,r.visible=this.isDatasetVisible(i),r.controller)r.controller.updateIndex(i),r.controller.linkScales();else{const e=za.getController(n),{datasetElementType:a,dataElementType:o}=Bt.datasets[n];Object.assign(e.prototype,{dataElementType:za.getElement(o),datasetElementType:a&&za.getElement(a)}),r.controller=new e(this,i),t.push(r.controller)}}return this._updateMetasets(),t}_resetElements(){m(this.data.datasets,((t,e)=>{this.getDatasetMeta(e).controller.reset()}),this)}reset(){this._resetElements(),this.notifyPlugins("reset")}update(t){const e=this.config;e.update();const i=this._options=e.createResolver(e.chartOptionScopes(),this.getContext()),a=this._animationsDisabled=!i.animation;if(this._updateScales(),this._checkEventBindings(),this._updateHiddenIndices(),this._plugins.invalidate(),!1===this.notifyPlugins("beforeUpdate",{mode:t,cancelable:!0}))return;const r=this.buildOrUpdateControllers();this.notifyPlugins("beforeElementsUpdate");let n=0;for(let t=0,e=this.data.datasets.length;t<e;t++){const{controller:e}=this.getDatasetMeta(t),i=!a&&-1===r.indexOf(e);e.buildOrUpdateElements(i),n=Math.max(+e.getMaxOverflow(),n)}n=this._minPadding=i.layout.autoPadding?n:0,this._updateLayout(n),a||m(r,(t=>{t.reset()})),this._updateDatasets(t),this.notifyPlugins("afterUpdate",{mode:t}),this._layers.sort(Qa("z","_idx"));const{_active:o,_lastEvent:s}=this;s?this._eventHandler(s,!0):o.length&&this._updateHoverStyles(o,o,!0),this.render()}_updateScales(){m(this.scales,(t=>{sa.removeBox(this,t)})),this.ensureScalesHaveIDs(),this.buildOrUpdateScales()}_checkEventBindings(){const t=this.options,e=new Set(Object.keys(this._listeners)),i=new Set(t.events);T(e,i)&&!!this._responsiveListeners===t.responsive||(this.unbindEvents(),this.bindEvents())}_updateHiddenIndices(){const{_hiddenIndices:t}=this,e=this._getUniformDataChanges()||[];for(const{method:i,start:a,count:r}of e)nr(t,a,"_removeElements"===i?-r:r)}_getUniformDataChanges(){const t=this._dataChanges;if(!t||!t.length)return;this._dataChanges=[];const e=this.data.datasets.length,i=e=>new Set(t.filter((t=>t[0]===e)).map(((t,e)=>e+","+t.splice(1).join(",")))),a=i(0);for(let t=1;t<e;t++)if(!T(a,i(t)))return;return Array.from(a).map((t=>t.split(","))).map((t=>({method:t[1],start:+t[2],count:+t[3]})))}_updateLayout(t){if(!1===this.notifyPlugins("beforeLayout",{cancelable:!0}))return;sa.update(this,this.width,this.height,t);const e=this.chartArea,i=e.width<=0||e.height<=0;this._layers=[],m(this.boxes,(t=>{i&&"chartArea"===t.position||(t.configure&&t.configure(),this._layers.push(...t._layers()))}),this),this._layers.forEach(((t,e)=>{t._idx=e})),this.notifyPlugins("afterLayout")}_updateDatasets(t){if(!1!==this.notifyPlugins("beforeDatasetsUpdate",{mode:t,cancelable:!0})){for(let t=0,e=this.data.datasets.length;t<e;++t)this.getDatasetMeta(t).controller.configure();for(let e=0,i=this.data.datasets.length;e<i;++e)this._updateDataset(e,D(t)?t({datasetIndex:e}):t);this.notifyPlugins("afterDatasetsUpdate",{mode:t})}}_updateDataset(t,e){const i=this.getDatasetMeta(t),a={meta:i,index:t,mode:e,cancelable:!0};!1!==this.notifyPlugins("beforeDatasetUpdate",a)&&(i.controller._update(e),a.cancelable=!1,this.notifyPlugins("afterDatasetUpdate",a))}render(){!1!==this.notifyPlugins("beforeRender",{cancelable:!0})&&(ni.has(this)?this.attached&&!ni.running(this)&&ni.start(this):(this.draw(),tr({chart:this})))}draw(){let t;if(this._resizeBeforeDraw){const{width:t,height:e}=this._resizeBeforeDraw;this._resize(t,e),this._resizeBeforeDraw=null}if(this.clear(),this.width<=0||this.height<=0)return;if(!1===this.notifyPlugins("beforeDraw",{cancelable:!0}))return;const e=this._layers;for(t=0;t<e.length&&e[t].z<=0;++t)e[t].draw(this.chartArea);for(this._drawDatasets();t<e.length;++t)e[t].draw(this.chartArea);this.notifyPlugins("afterDraw")}_getSortedDatasetMetas(t){const e=this._sortedMetasets,i=[];let a,r;for(a=0,r=e.length;a<r;++a){const r=e[a];t&&!r.visible||i.push(r)}return i}getSortedVisibleDatasetMetas(){return this._getSortedDatasetMetas(!0)}_drawDatasets(){if(!1===this.notifyPlugins("beforeDatasetsDraw",{cancelable:!0}))return;const t=this.getSortedVisibleDatasetMetas();for(let e=t.length-1;e>=0;--e)this._drawDataset(t[e]);this.notifyPlugins("afterDatasetsDraw")}_drawDataset(t){const e=this.ctx,i=t._clip,a=!i.disabled,r=this.chartArea,n={meta:t,index:t.index,cancelable:!0};!1!==this.notifyPlugins("beforeDatasetDraw",n)&&(a&&Yt(e,{left:!1===i.left?0:r.left-i.left,right:!1===i.right?this.width:r.right+i.right,top:!1===i.top?0:r.top-i.top,bottom:!1===i.bottom?this.height:r.bottom+i.bottom}),t.controller.draw(),a&&Ut(e),n.cancelable=!1,this.notifyPlugins("afterDatasetDraw",n))}getElementsAtEventForMode(t,e,i,a){const r=qi.modes[e];return"function"==typeof r?r(this,t,i,a):[]}getDatasetMeta(t){const e=this.data.datasets[t],i=this._metasets;let a=i.filter((t=>t&&t._dataset===e)).pop();return a||(a={type:null,data:[],dataset:null,controller:null,hidden:null,xAxisID:null,yAxisID:null,order:e&&e.order||0,index:t,_dataset:e,_parsed:[],_sorted:!1},i.push(a)),a}getContext(){return this.$context||(this.$context=le(null,{chart:this,type:"chart"}))}getVisibleDatasetCount(){return this.getSortedVisibleDatasetMetas().length}isDatasetVisible(t){const e=this.data.datasets[t];if(!e)return!1;const i=this.getDatasetMeta(t);return"boolean"==typeof i.hidden?!i.hidden:!e.hidden}setDatasetVisibility(t,e){this.getDatasetMeta(t).hidden=!e}toggleDataVisibility(t){this._hiddenIndices[t]=!this._hiddenIndices[t]}getDataVisibility(t){return!this._hiddenIndices[t]}_updateVisibility(t,e,i){const a=i?"show":"hide",r=this.getDatasetMeta(t),n=r.controller._resolveAnimations(void 0,a);P(e)?(r.data[e].hidden=!i,this.update()):(this.setDatasetVisibility(t,i),n.update(r,{visible:i}),this.update((e=>e.datasetIndex===t?a:void 0)))}hide(t,e){this._updateVisibility(t,e,!1)}show(t,e){this._updateVisibility(t,e,!0)}_destroyDatasetMeta(t){const e=this._metasets[t];e&&e.controller&&e.controller._destroy(),delete this._metasets[t]}_stop(){let t,e;for(this.stop(),ni.remove(this),t=0,e=this.data.datasets.length;t<e;++t)this._destroyDatasetMeta(t)}destroy(){this.notifyPlugins("beforeDestroy");const{canvas:t,ctx:e}=this;this._stop(),this.config.clearCache(),t&&(this.unbindEvents(),jt(t,e),this.platform.releaseContext(e),this.canvas=null,this.ctx=null),this.notifyPlugins("destroy"),delete ar[this.id],this.notifyPlugins("afterDestroy")}toBase64Image(...t){return this.canvas.toDataURL(...t)}bindEvents(){this.bindUserEvents(),this.options.responsive?this.bindResponsiveEvents():this.attached=!0}bindUserEvents(){const t=this._listeners,e=this.platform,i=(i,a)=>{e.addEventListener(this,i,a),t[i]=a},a=(t,e,i)=>{t.offsetX=e,t.offsetY=i,this._eventHandler(t)};m(this.options.events,(t=>i(t,a)))}bindResponsiveEvents(){this._responsiveListeners||(this._responsiveListeners={});const t=this._responsiveListeners,e=this.platform,i=(i,a)=>{e.addEventListener(this,i,a),t[i]=a},a=(i,a)=>{t[i]&&(e.removeEventListener(this,i,a),delete t[i])},r=(t,e)=>{this.canvas&&this.resize(t,e)};let n;const o=()=>{a("attach",o),this.attached=!0,this.resize(),i("resize",r),i("detach",n)};n=()=>{this.attached=!1,a("resize",r),this._stop(),this._resize(0,0),i("attach",o)},e.isAttached(this.canvas)?o():n()}unbindEvents(){m(this._listeners,((t,e)=>{this.platform.removeEventListener(this,e,t)})),this._listeners={},m(this._responsiveListeners,((t,e)=>{this.platform.removeEventListener(this,e,t)})),this._responsiveListeners=void 0}updateHoverStyle(t,e,i){const a=i?"set":"remove";let r,n,o,s;for("dataset"===e&&(r=this.getDatasetMeta(t[0].datasetIndex),r.controller["_"+a+"DatasetHoverStyle"]()),o=0,s=t.length;o<s;++o){n=t[o];const e=n&&this.getDatasetMeta(n.datasetIndex).controller;e&&e[a+"HoverStyle"](n.element,n.datasetIndex,n.index)}}getActiveElements(){return this._active||[]}setActiveElements(t){const e=this._active||[],i=t.map((({datasetIndex:t,index:e})=>{const i=this.getDatasetMeta(t);if(!i)throw new Error("No dataset found at index "+t);return{datasetIndex:t,element:i.data[e],index:e}}));!f(i,e)&&(this._active=i,this._lastEvent=null,this._updateHoverStyles(i,e))}notifyPlugins(t,e,i){return this._plugins.notify(this,t,e,i)}_updateHoverStyles(t,e,i){const a=this.options.hover,r=(t,e)=>t.filter((t=>!e.some((e=>t.datasetIndex===e.datasetIndex&&t.index===e.index)))),n=r(e,t),o=i?t:r(t,e);n.length&&this.updateHoverStyle(n,a.mode,!1),o.length&&a.mode&&this.updateHoverStyle(o,a.mode,!0)}_eventHandler(t,e){const i={event:t,replay:e,cancelable:!0,inChartArea:Zt(t,this.chartArea,this._minPadding)},a=e=>(e.options.events||this.options.events).includes(t.native.type);if(!1===this.notifyPlugins("beforeEvent",i,a))return;const r=this._handleEvent(t,e,i.inChartArea);return i.cancelable=!1,this.notifyPlugins("afterEvent",i,a),(r||i.changed)&&this.render(),this}_handleEvent(t,e,i){const{_active:a=[],options:r}=this,n=e,o=this._getActiveElements(t,a,i,n),s=function(t){return"mouseup"===t.type||"click"===t.type||"contextmenu"===t.type}(t),l=function(t,e,i,a){return i&&"mouseout"!==t.type?a?e:t:null}(t,this._lastEvent,i,s);i&&(this._lastEvent=null,u(r.onHover,[t,o,this],this),s&&u(r.onClick,[t,o,this],this));const _=!f(o,a);return(_||e)&&(this._active=o,this._updateHoverStyles(o,a,e)),this._lastEvent=l,_}_getActiveElements(t,e,i,a){if("mouseout"===t.type)return[];if(!i)return e;const r=this.options.hover;return this.getElementsAtEventForMode(t,r.mode,r,a)}}const sr=()=>m(or.instances,(t=>t._plugins.invalidate())),lr=!0;function _r(t,e,i){const{startAngle:a,pixelMargin:r,x:n,y:o,outerRadius:s,innerRadius:l}=e;let _=r/s;t.beginPath(),t.arc(n,o,s,a-_,i+_),l>r?(_=r/l,t.arc(n,o,l,i+_,a-_,!0)):t.arc(n,o,r,i+E,a-E),t.closePath(),t.clip()}function cr(t,e,i,a){return{x:i+t*Math.cos(e),y:a+t*Math.sin(e)}}function dr(t,e,i,a,r){const{x:n,y:o,startAngle:s,pixelMargin:l,innerRadius:_}=e,c=Math.max(e.outerRadius+a+i-l,0),d=_>0?_+a+i+l:0;let h=0;const p=r-s;if(a){const t=((_>0?_-a:0)+(c>0?c-a:0))/2;h=(p-(0!==t?p*t/(t+a):p))/2}const u=(p-Math.max(.001,p*c-i/C)/c)/2,m=s+u+h,f=r-u-h,{outerStart:g,outerEnd:b,innerStart:y,innerEnd:x}=function(t,e,i,a){const r=ie(t.options.borderRadius,["outerStart","outerEnd","innerStart","innerEnd"]),n=(i-e)/2,o=Math.min(n,a*e/2),s=t=>{const e=(i-Math.min(n,t))*a/2;return G(t,0,Math.min(n,e))};return{outerStart:s(r.outerStart),outerEnd:s(r.outerEnd),innerStart:G(r.innerStart,0,o),innerEnd:G(r.innerEnd,0,o)}}(e,d,c,f-m),w=c-g,v=c-b,k=m+g/w,M=f-b/v,S=d+y,P=d+x,D=m+y/S,T=f-x/P;if(t.beginPath(),t.arc(n,o,c,k,M),b>0){const e=cr(v,M,n,o);t.arc(e.x,e.y,b,M,f+E)}const O=cr(P,f,n,o);if(t.lineTo(O.x,O.y),x>0){const e=cr(P,T,n,o);t.arc(e.x,e.y,x,f+E,T+Math.PI)}if(t.arc(n,o,d,f-x/d,m+y/d,!0),y>0){const e=cr(S,D,n,o);t.arc(e.x,e.y,y,D+Math.PI,m-E)}const A=cr(w,m,n,o);if(t.lineTo(A.x,A.y),g>0){const e=cr(w,k,n,o);t.arc(e.x,e.y,g,m-E,k)}t.closePath()}Object.defineProperties(or,{defaults:{enumerable:lr,value:Bt},instances:{enumerable:lr,value:ar},overrides:{enumerable:lr,value:It},registry:{enumerable:lr,value:za},version:{enumerable:lr,value:"3.7.1"},getChart:{enumerable:lr,value:rr},register:{enumerable:lr,value:(...t)=>{za.add(...t),sr()}},unregister:{enumerable:lr,value:(...t)=>{za.remove(...t),sr()}}});class hr extends Ma{constructor(t){super(),this.options=void 0,this.circumference=void 0,this.startAngle=void 0,this.endAngle=void 0,this.innerRadius=void 0,this.outerRadius=void 0,this.pixelMargin=0,this.fullCircles=0,t&&Object.assign(this,t)}inRange(t,e,i){const a=this.getProps(["x","y"],i),{angle:r,distance:n}=Y(a,{x:t,y:e}),{startAngle:o,endAngle:s,innerRadius:l,outerRadius:_,circumference:c}=this.getProps(["startAngle","endAngle","innerRadius","outerRadius","circumference"],i),d=this.options.spacing/2,p=h(c,s-o)>=O||K(r,o,s),u=J(n,l+d,_+d);return p&&u}getCenterPoint(t){const{x:e,y:i,startAngle:a,endAngle:r,innerRadius:n,outerRadius:o}=this.getProps(["x","y","startAngle","endAngle","innerRadius","outerRadius","circumference"],t),{offset:s,spacing:l}=this.options,_=(a+r)/2,c=(n+o+l+s)/2;return{x:e+Math.cos(_)*c,y:i+Math.sin(_)*c}}tooltipPosition(t){return this.getCenterPoint(t)}draw(t){const{options:e,circumference:i}=this,a=(e.offset||0)/2,r=(e.spacing||0)/2;if(this.pixelMargin="inner"===e.borderAlign?.33:0,this.fullCircles=i>O?Math.floor(i/O):0,0===i||this.innerRadius<0||this.outerRadius<0)return;t.save();let n=0;if(a){n=a/2;const e=(this.startAngle+this.endAngle)/2;t.translate(Math.cos(e)*n,Math.sin(e)*n),this.circumference>=C&&(n=a)}t.fillStyle=e.backgroundColor,t.strokeStyle=e.borderColor;const o=function(t,e,i,a){const{fullCircles:r,startAngle:n,circumference:o}=e;let s=e.endAngle;if(r){dr(t,e,i,a,n+O);for(let e=0;e<r;++e)t.fill();isNaN(o)||(s=n+o%O,o%O==0&&(s+=O))}return dr(t,e,i,a,s),t.fill(),s}(t,this,n,r);(function(t,e,i,a,r){const{options:n}=e,{borderWidth:o,borderJoinStyle:s}=n,l="inner"===n.borderAlign;o&&(l?(t.lineWidth=2*o,t.lineJoin=s||"round"):(t.lineWidth=o,t.lineJoin=s||"bevel"),e.fullCircles&&function(t,e,i){const{x:a,y:r,startAngle:n,pixelMargin:o,fullCircles:s}=e,l=Math.max(e.outerRadius-o,0),_=e.innerRadius+o;let c;for(i&&_r(t,e,n+O),t.beginPath(),t.arc(a,r,_,n+O,n,!0),c=0;c<s;++c)t.stroke();for(t.beginPath(),t.arc(a,r,l,n,n+O),c=0;c<s;++c)t.stroke()}(t,e,l),l&&_r(t,e,r),dr(t,e,i,a,r),t.stroke())})(t,this,n,r,o),t.restore()}}function pr(t,e,i=e){t.lineCap=h(i.borderCapStyle,e.borderCapStyle),t.setLineDash(h(i.borderDash,e.borderDash)),t.lineDashOffset=h(i.borderDashOffset,e.borderDashOffset),t.lineJoin=h(i.borderJoinStyle,e.borderJoinStyle),t.lineWidth=h(i.borderWidth,e.borderWidth),t.strokeStyle=h(i.borderColor,e.borderColor)}function ur(t,e,i){t.lineTo(i.x,i.y)}function mr(t,e,i={}){const a=t.length,{start:r=0,end:n=a-1}=i,{start:o,end:s}=e,l=Math.max(r,o),_=Math.min(n,s),c=r<o&&n<o||r>s&&n>s;return{count:a,start:l,loop:e.loop,ilen:_<l&&!c?a+_-l:_-l}}function fr(t,e,i,a){const{points:r,options:n}=e,{count:o,start:s,loop:l,ilen:_}=mr(r,i,a),c=function(t){return t.stepped?Xt:t.tension||"monotone"===t.cubicInterpolationMode?qt:ur}(n);let d,h,p,{move:u=!0,reverse:m}=a||{};for(d=0;d<=_;++d)h=r[(s+(m?_-d:d))%o],h.skip||(u?(t.moveTo(h.x,h.y),u=!1):c(t,p,h,m,n.stepped),p=h);return l&&(h=r[(s+(m?_:0))%o],c(t,p,h,m,n.stepped)),!!l}function gr(t,e,i,a){const r=e.points,{count:n,start:o,ilen:s}=mr(r,i,a),{move:l=!0,reverse:_}=a||{};let c,d,h,p,u,m,f=0,g=0;const b=t=>(o+(_?s-t:t))%n,y=()=>{p!==u&&(t.lineTo(f,u),t.lineTo(f,p),t.lineTo(f,m))};for(l&&(d=r[b(0)],t.moveTo(d.x,d.y)),c=0;c<=s;++c){if(d=r[b(c)],d.skip)continue;const e=d.x,i=d.y,a=0|e;a===h?(i<p?p=i:i>u&&(u=i),f=(g*f+e)/++g):(y(),t.lineTo(e,i),h=a,g=0,p=u=i),m=i}y()}function br(t){const e=t.options,i=e.borderDash&&e.borderDash.length;return t._decimated||t._loop||e.tension||"monotone"===e.cubicInterpolationMode||e.stepped||i?fr:gr}hr.id="arc",hr.defaults={borderAlign:"center",borderColor:"#fff",borderJoinStyle:void 0,borderRadius:0,borderWidth:2,offset:0,spacing:0,angle:void 0},hr.defaultRoutes={backgroundColor:"backgroundColor"};const yr="function"==typeof Path2D;class xr extends Ma{constructor(t){super(),this.animated=!0,this.options=void 0,this._chart=void 0,this._loop=void 0,this._fullLoop=void 0,this._path=void 0,this._points=void 0,this._segments=void 0,this._decimated=!1,this._pointsUpdated=!1,this._datasetIndex=void 0,t&&Object.assign(this,t)}updateControlPoints(t,e){const i=this.options;if((i.tension||"monotone"===i.cubicInterpolationMode)&&!i.stepped&&!this._pointsUpdated){const a=i.spanGaps?this._loop:this._fullLoop;Re(this._points,i,t,a,e),this._pointsUpdated=!0}}set points(t){this._points=t,delete this._segments,delete this._path,this._pointsUpdated=!1}get points(){return this._points}get segments(){return this._segments||(this._segments=function(t,e){const i=t.points,a=t.options.spanGaps,r=i.length;if(!r)return[];const n=!!t._loop,{start:o,end:s}=function(t,e,i,a){let r=0,n=e-1;if(i&&!a)for(;r<e&&!t[r].skip;)r++;for(;r<e&&t[r].skip;)r++;for(r%=e,i&&(n+=r);n>r&&t[n%e].skip;)n--;return n%=e,{start:r,end:n}}(i,r,n,a);return function(t,e,i,a){return a&&a.setContext&&i?function(t,e,i,a){const r=t._chart.getContext(),n=ai(t.options),{_datasetIndex:o,options:{spanGaps:s}}=t,l=i.length,_=[];let c=n,d=e[0].start,h=d;function p(t,e,a,r){const n=s?-1:1;if(t!==e){for(t+=l;i[t%l].skip;)t-=n;for(;i[e%l].skip;)e+=n;t%l!=e%l&&(_.push({start:t%l,end:e%l,loop:a,style:r}),c=r,d=e%l)}}for(const t of e){d=s?d:t.start;let e,n=i[d%l];for(h=d+1;h<=t.end;h++){const s=i[h%l];e=ai(a.setContext(le(r,{type:"segment",p0:n,p1:s,p0DataIndex:(h-1)%l,p1DataIndex:h%l,datasetIndex:o}))),ri(e,c)&&p(d,h-1,t.loop,c),n=s,c=e}d<h-1&&p(d,h-1,t.loop,c)}return _}(t,e,i,a):e}(t,!0===a?[{start:o,end:s,loop:n}]:function(t,e,i,a){const r=t.length,n=[];let o,s=e,l=t[e];for(o=e+1;o<=i;++o){const i=t[o%r];i.skip||i.stop?l.skip||(a=!1,n.push({start:e%r,end:(o-1)%r,loop:a}),e=s=i.stop?o:null):(s=o,l.skip&&(e=o)),l=i}return null!==s&&n.push({start:e%r,end:s%r,loop:a}),n}(i,o,s<o?s+r:s,!!t._fullLoop&&0===o&&s===r-1),i,e)}(this,this.options.segment))}first(){const t=this.segments,e=this.points;return t.length&&e[t[0].start]}last(){const t=this.segments,e=this.points,i=t.length;return i&&e[t[i-1].end]}interpolate(t,e){const i=this.options,a=t[e],r=this.points,n=ii(this,{property:e,start:a,end:a});if(!n.length)return;const o=[],s=function(t){return t.stepped?Ye:t.tension||"monotone"===t.cubicInterpolationMode?Ue:Ze}(i);let l,_;for(l=0,_=n.length;l<_;++l){const{start:_,end:c}=n[l],d=r[_],h=r[c];if(d===h){o.push(d);continue}const p=s(d,h,Math.abs((a-d[e])/(h[e]-d[e])),i.stepped);p[e]=t[e],o.push(p)}return 1===o.length?o[0]:o}pathSegment(t,e,i){return br(this)(t,this,e,i)}path(t,e,i){const a=this.segments,r=br(this);let n=this._loop;e=e||0,i=i||this.points.length-e;for(const o of a)n&=r(t,this,o,{start:e,end:e+i-1});return!!n}draw(t,e,i,a){const r=this.options||{};(this.points||[]).length&&r.borderWidth&&(t.save(),function(t,e,i,a){yr&&!e.options.segment?function(t,e,i,a){let r=e._path;r||(r=e._path=new Path2D,e.path(r,i,a)&&r.closePath()),pr(t,e.options),t.stroke(r)}(t,e,i,a):function(t,e,i,a){const{segments:r,options:n}=e,o=br(e);for(const s of r)pr(t,n,s.style),t.beginPath(),o(t,e,s,{start:i,end:i+a-1})&&t.closePath(),t.stroke()}(t,e,i,a)}(t,this,i,a),t.restore()),this.animated&&(this._pointsUpdated=!1,this._path=void 0)}}function wr(t,e,i,a){const r=t.options,{[i]:n}=t.getProps([i],a);return Math.abs(e-n)<r.radius+r.hitRadius}xr.id="line",xr.defaults={borderCapStyle:"butt",borderDash:[],borderDashOffset:0,borderJoinStyle:"miter",borderWidth:3,capBezierPoints:!0,cubicInterpolationMode:"default",fill:!1,spanGaps:!1,stepped:!1,tension:0},xr.defaultRoutes={backgroundColor:"backgroundColor",borderColor:"borderColor"},xr.descriptors={_scriptable:!0,_indexable:t=>"borderDash"!==t&&"fill"!==t};class vr extends Ma{constructor(t){super(),this.options=void 0,this.parsed=void 0,this.skip=void 0,this.stop=void 0,t&&Object.assign(this,t)}inRange(t,e,i){const a=this.options,{x:r,y:n}=this.getProps(["x","y"],i);return Math.pow(t-r,2)+Math.pow(e-n,2)<Math.pow(a.hitRadius+a.radius,2)}inXRange(t,e){return wr(this,t,"x",e)}inYRange(t,e){return wr(this,t,"y",e)}getCenterPoint(t){const{x:e,y:i}=this.getProps(["x","y"],t);return{x:e,y:i}}size(t){let e=(t=t||this.options||{}).radius||0;return e=Math.max(e,e&&t.hoverRadius||0),2*(e+(e&&t.borderWidth||0))}draw(t,e){const i=this.options;this.skip||i.radius<.1||!Zt(this,e,this.size(i)/2)||(t.strokeStyle=i.borderColor,t.lineWidth=i.borderWidth,t.fillStyle=i.backgroundColor,$t(t,i,this.x,this.y))}getRange(){const t=this.options||{};return t.radius+t.hitRadius}}function kr(t,e){const{x:i,y:a,base:r,width:n,height:o}=t.getProps(["x","y","base","width","height"],e);let s,l,_,c,d;return t.horizontal?(d=o/2,s=Math.min(i,r),l=Math.max(i,r),_=a-d,c=a+d):(d=n/2,s=i-d,l=i+d,_=Math.min(a,r),c=Math.max(a,r)),{left:s,top:_,right:l,bottom:c}}function Mr(t,e,i,a){return t?0:G(e,i,a)}function Sr(t,e,i,a){const r=null===e,n=null===i,o=t&&!(r&&n)&&kr(t,a);return o&&(r||J(e,o.left,o.right))&&(n||J(i,o.top,o.bottom))}function Pr(t,e){t.rect(e.x,e.y,e.w,e.h)}function Dr(t,e,i={}){const a=t.x!==i.x?-e:0,r=t.y!==i.y?-e:0,n=(t.x+t.w!==i.x+i.w?e:0)-a,o=(t.y+t.h!==i.y+i.h?e:0)-r;return{x:t.x+a,y:t.y+r,w:t.w+n,h:t.h+o,radius:t.radius}}vr.id="point",vr.defaults={borderWidth:1,hitRadius:1,hoverBorderWidth:1,hoverRadius:4,pointStyle:"circle",radius:3,rotation:0},vr.defaultRoutes={backgroundColor:"backgroundColor",borderColor:"borderColor"};class Tr extends Ma{constructor(t){super(),this.options=void 0,this.horizontal=void 0,this.base=void 0,this.width=void 0,this.height=void 0,this.inflateAmount=void 0,t&&Object.assign(this,t)}draw(t){const{inflateAmount:e,options:{borderColor:i,backgroundColor:a}}=this,{inner:r,outer:n}=function(t){const e=kr(t),i=e.right-e.left,a=e.bottom-e.top,r=function(t,e,i){const a=t.options.borderWidth,r=t.borderSkipped,n=ae(a);return{t:Mr(r.top,n.top,0,i),r:Mr(r.right,n.right,0,e),b:Mr(r.bottom,n.bottom,0,i),l:Mr(r.left,n.left,0,e)}}(t,i/2,a/2),n=function(t,e,i){const{enableBorderRadius:a}=t.getProps(["enableBorderRadius"]),r=t.options.borderRadius,n=re(r),o=Math.min(e,i),s=t.borderSkipped,l=a||_(r);return{topLeft:Mr(!l||s.top||s.left,n.topLeft,0,o),topRight:Mr(!l||s.top||s.right,n.topRight,0,o),bottomLeft:Mr(!l||s.bottom||s.left,n.bottomLeft,0,o),bottomRight:Mr(!l||s.bottom||s.right,n.bottomRight,0,o)}}(t,i/2,a/2);return{outer:{x:e.left,y:e.top,w:i,h:a,radius:n},inner:{x:e.left+r.l,y:e.top+r.t,w:i-r.l-r.r,h:a-r.t-r.b,radius:{topLeft:Math.max(0,n.topLeft-Math.max(r.t,r.l)),topRight:Math.max(0,n.topRight-Math.max(r.t,r.r)),bottomLeft:Math.max(0,n.bottomLeft-Math.max(r.b,r.l)),bottomRight:Math.max(0,n.bottomRight-Math.max(r.b,r.r))}}}}(this),o=(s=n.radius).topLeft||s.topRight||s.bottomLeft||s.bottomRight?Jt:Pr;var s;t.save(),n.w===r.w&&n.h===r.h||(t.beginPath(),o(t,Dr(n,e,r)),t.clip(),o(t,Dr(r,-e,n)),t.fillStyle=i,t.fill("evenodd")),t.beginPath(),o(t,Dr(r,e)),t.fillStyle=a,t.fill(),t.restore()}inRange(t,e,i){return Sr(this,t,e,i)}inXRange(t,e){return Sr(this,t,null,e)}inYRange(t,e){return Sr(this,null,t,e)}getCenterPoint(t){const{x:e,y:i,base:a,horizontal:r}=this.getProps(["x","y","base","horizontal"],t);return{x:r?(e+a)/2:e,y:r?i:(i+a)/2}}getRange(t){return"x"===t?this.width/2:this.height/2}}Tr.id="bar",Tr.defaults={borderSkipped:"start",borderWidth:0,borderRadius:0,inflateAmount:"auto",pointStyle:void 0},Tr.defaultRoutes={backgroundColor:"backgroundColor",borderColor:"borderColor"};var Cr=Object.freeze({__proto__:null,ArcElement:hr,LineElement:xr,PointElement:vr,BarElement:Tr});function Or(t){if(t._decimated){const e=t._data;delete t._decimated,delete t._data,Object.defineProperty(t,"data",{value:e})}}function Ar(t){t.data.datasets.forEach((t=>{Or(t)}))}var Lr={id:"decimation",defaults:{algorithm:"min-max",enabled:!1},beforeElementsUpdate:(t,e,i)=>{if(!i.enabled)return void Ar(t);const a=t.width;t.data.datasets.forEach(((e,r)=>{const{_data:n,indexAxis:o}=e,l=t.getDatasetMeta(r),_=n||e.data;if("y"===se([o,t.options.indexAxis]))return;if("line"!==l.type)return;const c=t.scales[l.xAxisID];if("linear"!==c.type&&"time"!==c.type)return;if(t.options.parsing)return;let d,{start:h,count:p}=function(t,e){const i=e.length;let a,r=0;const{iScale:n}=t,{min:o,max:s,minDefined:l,maxDefined:_}=n.getUserBounds();return l&&(r=G(ce(e,n.axis,o).lo,0,i-1)),a=_?G(ce(e,n.axis,s).hi+1,r,i)-r:i-r,{start:r,count:a}}(l,_);if(p<=(i.threshold||4*a))Or(e);else{switch(s(n)&&(e._data=_,delete e.data,Object.defineProperty(e,"data",{configurable:!0,enumerable:!0,get:function(){return this._decimated},set:function(t){this._data=t}})),i.algorithm){case"lttb":d=function(t,e,i,a,r){const n=r.samples||a;if(n>=i)return t.slice(e,e+i);const o=[],s=(i-2)/(n-2);let l=0;const _=e+i-1;let c,d,h,p,u,m=e;for(o[l++]=t[m],c=0;c<n-2;c++){let a,r=0,n=0;const _=Math.floor((c+1)*s)+1+e,f=Math.min(Math.floor((c+2)*s)+1,i)+e,g=f-_;for(a=_;a<f;a++)r+=t[a].x,n+=t[a].y;r/=g,n/=g;const b=Math.floor(c*s)+1+e,y=Math.min(Math.floor((c+1)*s)+1,i)+e,{x,y:w}=t[m];for(h=p=-1,a=b;a<y;a++)p=.5*Math.abs((x-r)*(t[a].y-w)-(x-t[a].x)*(n-w)),p>h&&(h=p,d=t[a],u=a);o[l++]=d,m=u}return o[l++]=t[_],o}(_,h,p,a,i);break;case"min-max":d=function(t,e,i,a){let r,n,o,l,_,c,d,h,p,u,m=0,f=0;const g=[],b=e+i-1,y=t[e].x,x=t[b].x-y;for(r=e;r<e+i;++r){n=t[r],o=(n.x-y)/x*a,l=n.y;const e=0|o;if(e===_)l<p?(p=l,c=r):l>u&&(u=l,d=r),m=(f*m+n.x)/++f;else{const i=r-1;if(!s(c)&&!s(d)){const e=Math.min(c,d),a=Math.max(c,d);e!==h&&e!==i&&g.push({...t[e],x:m}),a!==h&&a!==i&&g.push({...t[a],x:m})}r>0&&i!==h&&g.push(t[i]),g.push(n),_=e,f=0,p=u=l,c=d=h=r}}return g}(_,h,p,a);break;default:throw new Error(`Unsupported decimation algorithm '${i.algorithm}'`)}e._decimated=d}}))},destroy(t){Ar(t)}};function Rr(t,e,i){const a=function(t){const e=t.options,i=e.fill;let a=h(i&&i.target,i);return void 0===a&&(a=!!e.backgroundColor),!1!==a&&null!==a&&(!0===a?"origin":a)}(t);if(_(a))return!isNaN(a.value)&&a;let r=parseFloat(a);return c(r)&&Math.floor(r)===r?("-"!==a[0]&&"+"!==a[0]||(r=e+r),!(r===e||r<0||r>=i)&&r):["origin","start","end","stack","shape"].indexOf(a)>=0&&a}class Er{constructor(t){this.x=t.x,this.y=t.y,this.radius=t.radius}pathSegment(t,e,i){const{x:a,y:r,radius:n}=this;return e=e||{start:0,end:O},t.arc(a,r,n,e.end,e.start,!0),!i.bounds}interpolate(t){const{x:e,y:i,radius:a}=this,r=t.angle;return{x:e+Math.cos(r)*a,y:i+Math.sin(r)*a,angle:r}}}function Ir(t,e,i){for(;e>t;e--){const t=i[e];if(!isNaN(t.x)&&!isNaN(t.y))break}return e}function zr(t,e,i){const a=[];for(let r=0;r<i.length;r++){const n=i[r],{first:o,last:s,point:l}=Fr(n,e,"x");if(!(!l||o&&s))if(o)a.unshift(l);else if(t.push(l),!s)break}t.push(...a)}function Fr(t,e,i){const a=t.interpolate(e,i);if(!a)return{};const r=a[i],n=t.segments,o=t.points;let s=!1,l=!1;for(let t=0;t<n.length;t++){const e=n[t],a=o[e.start][i],_=o[e.end][i];if(J(r,a,_)){s=r===a,l=r===_;break}}return{first:s,last:l,point:a}}function Vr(t){const{chart:e,fill:i,line:a}=t;if(c(i))return function(t,e){const i=t.getDatasetMeta(e);return i&&t.isDatasetVisible(e)?i.dataset:null}(e,i);if("stack"===i)return function(t){const{scale:e,index:i,line:a}=t,r=[],n=a.segments,o=a.points,s=function(t,e){const i=[],a=t.getMatchingVisibleMetas("line");for(let t=0;t<a.length;t++){const r=a[t];if(r.index===e)break;r.hidden||i.unshift(r.dataset)}return i}(e,i);s.push(Br({x:null,y:e.bottom},a));for(let t=0;t<n.length;t++){const e=n[t];for(let t=e.start;t<=e.end;t++)zr(r,o[t],s)}return new xr({points:r,options:{}})}(t);if("shape"===i)return!0;const r=function(t){return(t.scale||{}).getPointPositionForValue?function(t){const{scale:e,fill:i}=t,a=e.options,r=e.getLabels().length,n=[],o=a.reverse?e.max:e.min,s=a.reverse?e.min:e.max;let l,c,d;if(d="start"===i?o:"end"===i?s:_(i)?i.value:e.getBaseValue(),a.grid.circular)return c=e.getPointPositionForValue(0,o),new Er({x:c.x,y:c.y,radius:e.getDistanceFromCenterForValue(d)});for(l=0;l<r;++l)n.push(e.getPointPositionForValue(l,d));return n}(t):function(t){const{scale:e={},fill:i}=t;let a,r=null;return"start"===i?r=e.bottom:"end"===i?r=e.top:_(i)?r=e.getPixelForValue(i.value):e.getBasePixel&&(r=e.getBasePixel()),c(r)?(a=e.isHorizontal(),{x:a?r:null,y:a?null:r}):null}(t)}(t);return r instanceof Er?r:Br(r,a)}function Br(t,e){let i=[],a=!1;return l(t)?(a=!0,i=t):i=function(t,e){const{x:i=null,y:a=null}=t||{},r=e.points,n=[];return e.segments.forEach((({start:t,end:e})=>{e=Ir(t,e,r);const o=r[t],s=r[e];null!==a?(n.push({x:o.x,y:a}),n.push({x:s.x,y:a})):null!==i&&(n.push({x:i,y:o.y}),n.push({x:i,y:s.y}))})),n}(t,e),i.length?new xr({points:i,options:{tension:0},_loop:a,_fullLoop:a}):null}function Wr(t,e,i){let a=t[e].fill;const r=[e];let n;if(!i)return a;for(;!1!==a&&-1===r.indexOf(a);){if(!c(a))return a;if(n=t[a],!n)return!1;if(n.visible)return a;r.push(a),a=n.fill}return!1}function Nr(t,e,i){const{segments:a,points:r}=e;let n=!0,o=!1;t.beginPath();for(const s of a){const{start:a,end:l}=s,_=r[a],c=r[Ir(a,l,r)];n?(t.moveTo(_.x,_.y),n=!1):(t.lineTo(_.x,i),t.lineTo(_.x,_.y)),o=!!e.pathSegment(t,s,{move:o}),o?t.closePath():t.lineTo(c.x,i)}t.lineTo(e.first().x,i),t.closePath(),t.clip()}function Hr(t,e,i,a){if(a)return;let r=e[t],n=i[t];return"angle"===t&&(r=q(r),n=q(n)),{property:t,start:r,end:n}}function jr(t,e,i,a){return t&&e?a(t[i],e[i]):t?t[i]:e?e[i]:0}function $r(t,e,i){const{top:a,bottom:r}=e.chart.chartArea,{property:n,start:o,end:s}=i||{};"x"===n&&(t.beginPath(),t.rect(o,a,s-o,r-a),t.clip())}function Zr(t,e,i,a){const r=e.interpolate(i,a);r&&t.lineTo(r.x,r.y)}function Yr(t,e){const{line:i,target:a,property:r,color:n,scale:o}=e,s=function(t,e,i){const a=t.segments,r=t.points,n=e.points,o=[];for(const t of a){let{start:a,end:s}=t;s=Ir(a,s,r);const l=Hr(i,r[a],r[s],t.loop);if(!e.segments){o.push({source:t,target:l,start:r[a],end:r[s]});continue}const _=ii(e,l);for(const e of _){const a=Hr(i,n[e.start],n[e.end],e.loop),s=ei(t,r,a);for(const t of s)o.push({source:t,target:e,start:{[i]:jr(l,a,"start",Math.max)},end:{[i]:jr(l,a,"end",Math.min)}})}}return o}(i,a,r);for(const{source:e,target:l,start:_,end:c}of s){const{style:{backgroundColor:s=n}={}}=e,d=!0!==a;t.save(),t.fillStyle=s,$r(t,o,d&&Hr(r,_,c)),t.beginPath();const h=!!i.pathSegment(t,e);let p;if(d){h?t.closePath():Zr(t,a,c,r);const e=!!a.pathSegment(t,l,{move:h,reverse:!0});p=h&&e,p||Zr(t,a,_,r)}t.closePath(),t.fill(p?"evenodd":"nonzero"),t.restore()}}function Ur(t,e,i){const a=Vr(e),{line:r,scale:n,axis:o}=e,s=r.options,l=s.fill,_=s.backgroundColor,{above:c=_,below:d=_}=l||{};a&&r.points.length&&(Yt(t,i),function(t,e){const{line:i,target:a,above:r,below:n,area:o,scale:s}=e,l=i._loop?"angle":e.axis;t.save(),"x"===l&&n!==r&&(Nr(t,a,o.top),Yr(t,{line:i,target:a,color:r,scale:s,property:l}),t.restore(),t.save(),Nr(t,a,o.bottom)),Yr(t,{line:i,target:a,color:n,scale:s,property:l}),t.restore()}(t,{line:r,target:a,above:c,below:d,area:i,scale:n,axis:o}),Ut(t))}var Xr={id:"filler",afterDatasetsUpdate(t,e,i){const a=(t.data.datasets||[]).length,r=[];let n,o,s,l;for(o=0;o<a;++o)n=t.getDatasetMeta(o),s=n.dataset,l=null,s&&s.options&&s instanceof xr&&(l={visible:t.isDatasetVisible(o),index:o,fill:Rr(s,o,a),chart:t,axis:n.controller.options.indexAxis,scale:n.vScale,line:s}),n.$filler=l,r.push(l);for(o=0;o<a;++o)l=r[o],l&&!1!==l.fill&&(l.fill=Wr(r,o,i.propagate))},beforeDraw(t,e,i){const a="beforeDraw"===i.drawTime,r=t.getSortedVisibleDatasetMetas(),n=t.chartArea;for(let e=r.length-1;e>=0;--e){const i=r[e].$filler;i&&(i.line.updateControlPoints(n,i.axis),a&&Ur(t.ctx,i,n))}},beforeDatasetsDraw(t,e,i){if("beforeDatasetsDraw"!==i.drawTime)return;const a=t.getSortedVisibleDatasetMetas();for(let e=a.length-1;e>=0;--e){const i=a[e].$filler;i&&Ur(t.ctx,i,t.chartArea)}},beforeDatasetDraw(t,e,i){const a=e.meta.$filler;a&&!1!==a.fill&&"beforeDatasetDraw"===i.drawTime&&Ur(t.ctx,a,t.chartArea)},defaults:{propagate:!0,drawTime:"beforeDatasetDraw"}};const qr=(t,e)=>{let{boxHeight:i=e,boxWidth:a=e}=t;return t.usePointStyle&&(i=Math.min(i,e),a=Math.min(a,e)),{boxWidth:a,boxHeight:i,itemHeight:Math.max(e,i)}};class Kr extends Ma{constructor(t){super(),this._added=!1,this.legendHitBoxes=[],this._hoveredItem=null,this.doughnutMode=!1,this.chart=t.chart,this.options=t.options,this.ctx=t.ctx,this.legendItems=void 0,this.columnSizes=void 0,this.lineWidths=void 0,this.maxHeight=void 0,this.maxWidth=void 0,this.top=void 0,this.bottom=void 0,this.left=void 0,this.right=void 0,this.height=void 0,this.width=void 0,this._margins=void 0,this.position=void 0,this.weight=void 0,this.fullSize=void 0}update(t,e,i){this.maxWidth=t,this.maxHeight=e,this._margins=i,this.setDimensions(),this.buildLabels(),this.fit()}setDimensions(){this.isHorizontal()?(this.width=this.maxWidth,this.left=this._margins.left,this.right=this.width):(this.height=this.maxHeight,this.top=this._margins.top,this.bottom=this.height)}buildLabels(){const t=this.options.labels||{};let e=u(t.generateLabels,[this.chart],this)||[];t.filter&&(e=e.filter((e=>t.filter(e,this.chart.data)))),t.sort&&(e=e.sort(((e,i)=>t.sort(e,i,this.chart.data)))),this.options.reverse&&e.reverse(),this.legendItems=e}fit(){const{options:t,ctx:e}=this;if(!t.display)return void(this.width=this.height=0);const i=t.labels,a=oe(i.font),r=a.size,n=this._computeTitleHeight(),{boxWidth:o,itemHeight:s}=qr(i,r);let l,_;e.font=a.string,this.isHorizontal()?(l=this.maxWidth,_=this._fitRows(n,r,o,s)+10):(_=this.maxHeight,l=this._fitCols(n,r,o,s)+10),this.width=Math.min(l,t.maxWidth||this.maxWidth),this.height=Math.min(_,t.maxHeight||this.maxHeight)}_fitRows(t,e,i,a){const{ctx:r,maxWidth:n,options:{labels:{padding:o}}}=this,s=this.legendHitBoxes=[],l=this.lineWidths=[0],_=a+o;let c=t;r.textAlign="left",r.textBaseline="middle";let d=-1,h=-_;return this.legendItems.forEach(((t,p)=>{const u=i+e/2+r.measureText(t.text).width;(0===p||l[l.length-1]+u+2*o>n)&&(c+=_,l[l.length-(p>0?0:1)]=0,h+=_,d++),s[p]={left:0,top:h,row:d,width:u,height:a},l[l.length-1]+=u+o})),c}_fitCols(t,e,i,a){const{ctx:r,maxHeight:n,options:{labels:{padding:o}}}=this,s=this.legendHitBoxes=[],l=this.columnSizes=[],_=n-t;let c=o,d=0,h=0,p=0,u=0;return this.legendItems.forEach(((t,n)=>{const m=i+e/2+r.measureText(t.text).width;n>0&&h+a+2*o>_&&(c+=d+o,l.push({width:d,height:h}),p+=d+o,u++,d=h=0),s[n]={left:p,top:h,col:u,width:m,height:a},d=Math.max(d,m),h+=a+o})),c+=d,l.push({width:d,height:h}),c}adjustHitBoxes(){if(!this.options.display)return;const t=this._computeTitleHeight(),{legendHitBoxes:e,options:{align:i,labels:{padding:a},rtl:n}}=this,o=Ke(n,this.left,this.width);if(this.isHorizontal()){let n=0,s=r(i,this.left+a,this.right-this.lineWidths[n]);for(const l of e)n!==l.row&&(n=l.row,s=r(i,this.left+a,this.right-this.lineWidths[n])),l.top+=this.top+t+a,l.left=o.leftForLtr(o.x(s),l.width),s+=l.width+a}else{let n=0,s=r(i,this.top+t+a,this.bottom-this.columnSizes[n].height);for(const l of e)l.col!==n&&(n=l.col,s=r(i,this.top+t+a,this.bottom-this.columnSizes[n].height)),l.top=s,l.left+=this.left+a,l.left=o.leftForLtr(o.x(l.left),l.width),s+=l.height+a}}isHorizontal(){return"top"===this.options.position||"bottom"===this.options.position}draw(){if(this.options.display){const t=this.ctx;Yt(t,this),this._draw(),Ut(t)}}_draw(){const{options:t,columnSizes:e,lineWidths:i,ctx:a}=this,{align:n,labels:o}=t,s=Bt.color,l=Ke(t.rtl,this.left,this.width),_=oe(o.font),{color:c,padding:d}=o,p=_.size,u=p/2;let m;this.drawTitle(),a.textAlign=l.textAlign("left"),a.textBaseline="middle",a.lineWidth=.5,a.font=_.string;const{boxWidth:f,boxHeight:g,itemHeight:b}=qr(o,p),y=this.isHorizontal(),x=this._computeTitleHeight();m=y?{x:r(n,this.left+d,this.right-i[0]),y:this.top+d+x,line:0}:{x:this.left+d,y:r(n,this.top+x+d,this.bottom-e[0].height),line:0},Ge(this.ctx,t.textDirection);const w=b+d;this.legendItems.forEach(((v,k)=>{a.strokeStyle=v.fontColor||c,a.fillStyle=v.fontColor||c;const M=a.measureText(v.text).width,S=l.textAlign(v.textAlign||(v.textAlign=o.textAlign)),P=f+u+M;let D=m.x,T=m.y;l.setWidth(this.width),y?k>0&&D+P+d>this.right&&(T=m.y+=w,m.line++,D=m.x=r(n,this.left+d,this.right-i[m.line])):k>0&&T+w>this.bottom&&(D=m.x=D+e[m.line].width+d,m.line++,T=m.y=r(n,this.top+x+d,this.bottom-e[m.line].height)),function(t,e,i){if(isNaN(f)||f<=0||isNaN(g)||g<0)return;a.save();const r=h(i.lineWidth,1);if(a.fillStyle=h(i.fillStyle,s),a.lineCap=h(i.lineCap,"butt"),a.lineDashOffset=h(i.lineDashOffset,0),a.lineJoin=h(i.lineJoin,"miter"),a.lineWidth=r,a.strokeStyle=h(i.strokeStyle,s),a.setLineDash(h(i.lineDash,[])),o.usePointStyle){const n={radius:f*Math.SQRT2/2,pointStyle:i.pointStyle,rotation:i.rotation,borderWidth:r},o=l.xPlus(t,f/2);$t(a,n,o,e+u)}else{const n=e+Math.max((p-g)/2,0),o=l.leftForLtr(t,f),s=re(i.borderRadius);a.beginPath(),Object.values(s).some((t=>0!==t))?Jt(a,{x:o,y:n,w:f,h:g,radius:s}):a.rect(o,n,f,g),a.fill(),0!==r&&a.stroke()}a.restore()}(l.x(D),T,v),D=((t,e,i,a)=>t===(a?"left":"right")?i:"center"===t?(e+i)/2:e)(S,D+f+u,y?D+P:this.right,t.rtl),function(t,e,i){Kt(a,i.text,t,e+b/2,_,{strikethrough:i.hidden,textAlign:l.textAlign(i.textAlign)})}(l.x(D),T,v),y?m.x+=P+d:m.y+=w})),Je(this.ctx,t.textDirection)}drawTitle(){const t=this.options,e=t.title,i=oe(e.font),n=ne(e.padding);if(!e.display)return;const o=Ke(t.rtl,this.left,this.width),s=this.ctx,l=e.position,_=i.size/2,c=n.top+_;let d,h=this.left,p=this.width;if(this.isHorizontal())p=Math.max(...this.lineWidths),d=this.top+c,h=r(t.align,h,this.right-p);else{const e=this.columnSizes.reduce(((t,e)=>Math.max(t,e.height)),0);d=c+r(t.align,this.top,this.bottom-e-t.labels.padding-this._computeTitleHeight())}const u=r(l,h,h+p);s.textAlign=o.textAlign(a(l)),s.textBaseline="middle",s.strokeStyle=e.color,s.fillStyle=e.color,s.font=i.string,Kt(s,e.text,u,d,i)}_computeTitleHeight(){const t=this.options.title,e=oe(t.font),i=ne(t.padding);return t.display?e.lineHeight+i.height:0}_getLegendItemAt(t,e){let i,a,r;if(J(t,this.left,this.right)&&J(e,this.top,this.bottom))for(r=this.legendHitBoxes,i=0;i<r.length;++i)if(a=r[i],J(t,a.left,a.left+a.width)&&J(e,a.top,a.top+a.height))return this.legendItems[i];return null}handleEvent(t){const e=this.options;if(!function(t,e){return!("mousemove"!==t||!e.onHover&&!e.onLeave)||!(!e.onClick||"click"!==t&&"mouseup"!==t)}(t.type,e))return;const i=this._getLegendItemAt(t.x,t.y);if("mousemove"===t.type){const n=this._hoveredItem,o=(r=i,null!==(a=n)&&null!==r&&a.datasetIndex===r.datasetIndex&&a.index===r.index);n&&!o&&u(e.onLeave,[t,n,this],this),this._hoveredItem=i,i&&!o&&u(e.onHover,[t,i,this],this)}else i&&u(e.onClick,[t,i,this],this);var a,r}}var Gr={id:"legend",_element:Kr,start(t,e,i){const a=t.legend=new Kr({ctx:t.ctx,options:i,chart:t});sa.configure(t,a,i),sa.addBox(t,a)},stop(t){sa.removeBox(t,t.legend),delete t.legend},beforeUpdate(t,e,i){const a=t.legend;sa.configure(t,a,i),a.options=i},afterUpdate(t){const e=t.legend;e.buildLabels(),e.adjustHitBoxes()},afterEvent(t,e){e.replay||t.legend.handleEvent(e.event)},defaults:{display:!0,position:"top",align:"center",fullSize:!0,reverse:!1,weight:1e3,onClick(t,e,i){const a=e.datasetIndex,r=i.chart;r.isDatasetVisible(a)?(r.hide(a),e.hidden=!0):(r.show(a),e.hidden=!1)},onHover:null,onLeave:null,labels:{color:t=>t.chart.options.color,boxWidth:40,padding:10,generateLabels(t){const e=t.data.datasets,{labels:{usePointStyle:i,pointStyle:a,textAlign:r,color:n}}=t.legend.options;return t._getSortedDatasetMetas().map((t=>{const o=t.controller.getStyle(i?0:void 0),s=ne(o.borderWidth);return{text:e[t.index].label,fillStyle:o.backgroundColor,fontColor:n,hidden:!t.visible,lineCap:o.borderCapStyle,lineDash:o.borderDash,lineDashOffset:o.borderDashOffset,lineJoin:o.borderJoinStyle,lineWidth:(s.width+s.height)/4,strokeStyle:o.borderColor,pointStyle:a||o.pointStyle,rotation:o.rotation,textAlign:r||o.textAlign,borderRadius:0,datasetIndex:t.index}}),this)}},title:{color:t=>t.chart.options.color,display:!1,position:"center",text:""}},descriptors:{_scriptable:t=>!t.startsWith("on"),labels:{_scriptable:t=>!["generateLabels","filter","sort"].includes(t)}}};class Jr extends Ma{constructor(t){super(),this.chart=t.chart,this.options=t.options,this.ctx=t.ctx,this._padding=void 0,this.top=void 0,this.bottom=void 0,this.left=void 0,this.right=void 0,this.width=void 0,this.height=void 0,this.position=void 0,this.weight=void 0,this.fullSize=void 0}update(t,e){const i=this.options;if(this.left=0,this.top=0,!i.display)return void(this.width=this.height=this.right=this.bottom=0);this.width=this.right=t,this.height=this.bottom=e;const a=l(i.text)?i.text.length:1;this._padding=ne(i.padding);const r=a*oe(i.font).lineHeight+this._padding.height;this.isHorizontal()?this.height=r:this.width=r}isHorizontal(){const t=this.options.position;return"top"===t||"bottom"===t}_drawArgs(t){const{top:e,left:i,bottom:a,right:n,options:o}=this,s=o.align;let l,_,c,d=0;return this.isHorizontal()?(_=r(s,i,n),c=e+t,l=n-i):("left"===o.position?(_=i+t,c=r(s,a,e),d=-.5*C):(_=n-t,c=r(s,e,a),d=.5*C),l=a-e),{titleX:_,titleY:c,maxWidth:l,rotation:d}}draw(){const t=this.ctx,e=this.options;if(!e.display)return;const i=oe(e.font),r=i.lineHeight/2+this._padding.top,{titleX:n,titleY:o,maxWidth:s,rotation:l}=this._drawArgs(r);Kt(t,e.text,0,0,i,{color:e.color,maxWidth:s,rotation:l,textAlign:a(e.align),textBaseline:"middle",translation:[n,o]})}}var Qr={id:"title",_element:Jr,start(t,e,i){!function(t,e){const i=new Jr({ctx:t.ctx,options:e,chart:t});sa.configure(t,i,e),sa.addBox(t,i),t.titleBlock=i}(t,i)},stop(t){const e=t.titleBlock;sa.removeBox(t,e),delete t.titleBlock},beforeUpdate(t,e,i){const a=t.titleBlock;sa.configure(t,a,i),a.options=i},defaults:{align:"center",display:!1,font:{weight:"bold"},fullSize:!0,padding:10,position:"top",text:"",weight:2e3},defaultRoutes:{color:"color"},descriptors:{_scriptable:!0,_indexable:!1}};const tn=new WeakMap;var en={id:"subtitle",start(t,e,i){const a=new Jr({ctx:t.ctx,options:i,chart:t});sa.configure(t,a,i),sa.addBox(t,a),tn.set(t,a)},stop(t){sa.removeBox(t,tn.get(t)),tn.delete(t)},beforeUpdate(t,e,i){const a=tn.get(t);sa.configure(t,a,i),a.options=i},defaults:{align:"center",display:!1,font:{weight:"normal"},fullSize:!0,padding:0,position:"top",text:"",weight:1500},defaultRoutes:{color:"color"},descriptors:{_scriptable:!0,_indexable:!1}};const an={average(t){if(!t.length)return!1;let e,i,a=0,r=0,n=0;for(e=0,i=t.length;e<i;++e){const i=t[e].element;if(i&&i.hasValue()){const t=i.tooltipPosition();a+=t.x,r+=t.y,++n}}return{x:a/n,y:r/n}},nearest(t,e){if(!t.length)return!1;let i,a,r,n=e.x,o=e.y,s=Number.POSITIVE_INFINITY;for(i=0,a=t.length;i<a;++i){const a=t[i].element;if(a&&a.hasValue()){const t=U(e,a.getCenterPoint());t<s&&(s=t,r=a)}}if(r){const t=r.tooltipPosition();n=t.x,o=t.y}return{x:n,y:o}}};function rn(t,e){return e&&(l(e)?Array.prototype.push.apply(t,e):t.push(e)),t}function nn(t){return("string"==typeof t||t instanceof String)&&t.indexOf("\n")>-1?t.split("\n"):t}function on(t,e){const{element:i,datasetIndex:a,index:r}=e,n=t.getDatasetMeta(a).controller,{label:o,value:s}=n.getLabelAndValue(r);return{chart:t,label:o,parsed:n.getParsed(r),raw:t.data.datasets[a].data[r],formattedValue:s,dataset:n.getDataset(),dataIndex:r,datasetIndex:a,element:i}}function sn(t,e){const i=t.chart.ctx,{body:a,footer:r,title:n}=t,{boxWidth:o,boxHeight:s}=e,l=oe(e.bodyFont),_=oe(e.titleFont),c=oe(e.footerFont),d=n.length,h=r.length,p=a.length,u=ne(e.padding);let f=u.height,g=0,b=a.reduce(((t,e)=>t+e.before.length+e.lines.length+e.after.length),0);b+=t.beforeBody.length+t.afterBody.length,d&&(f+=d*_.lineHeight+(d-1)*e.titleSpacing+e.titleMarginBottom),b&&(f+=p*(e.displayColors?Math.max(s,l.lineHeight):l.lineHeight)+(b-p)*l.lineHeight+(b-1)*e.bodySpacing),h&&(f+=e.footerMarginTop+h*c.lineHeight+(h-1)*e.footerSpacing);let y=0;const x=function(t){g=Math.max(g,i.measureText(t).width+y)};return i.save(),i.font=_.string,m(t.title,x),i.font=l.string,m(t.beforeBody.concat(t.afterBody),x),y=e.displayColors?o+2+e.boxPadding:0,m(a,(t=>{m(t.before,x),m(t.lines,x),m(t.after,x)})),y=0,i.font=c.string,m(t.footer,x),i.restore(),g+=u.width,{width:g,height:f}}function ln(t,e,i,a){const{x:r,width:n}=i,{width:o,chartArea:{left:s,right:l}}=t;let _="center";return"center"===a?_=r<=(s+l)/2?"left":"right":r<=n/2?_="left":r>=o-n/2&&(_="right"),function(t,e,i,a){const{x:r,width:n}=a,o=i.caretSize+i.caretPadding;return"left"===t&&r+n+o>e.width||"right"===t&&r-n-o<0||void 0}(_,t,e,i)&&(_="center"),_}function _n(t,e,i){const a=i.yAlign||e.yAlign||function(t,e){const{y:i,height:a}=e;return i<a/2?"top":i>t.height-a/2?"bottom":"center"}(t,i);return{xAlign:i.xAlign||e.xAlign||ln(t,e,i,a),yAlign:a}}function cn(t,e,i,a){const{caretSize:r,caretPadding:n,cornerRadius:o}=t,{xAlign:s,yAlign:l}=i,_=r+n,{topLeft:c,topRight:d,bottomLeft:h,bottomRight:p}=re(o);let u=function(t,e){let{x:i,width:a}=t;return"right"===e?i-=a:"center"===e&&(i-=a/2),i}(e,s);const m=function(t,e,i){let{y:a,height:r}=t;return"top"===e?a+=i:a-="bottom"===e?r+i:r/2,a}(e,l,_);return"center"===l?"left"===s?u+=_:"right"===s&&(u-=_):"left"===s?u-=Math.max(c,h)+r:"right"===s&&(u+=Math.max(d,p)+r),{x:G(u,0,a.width-e.width),y:G(m,0,a.height-e.height)}}function dn(t,e,i){const a=ne(i.padding);return"center"===e?t.x+t.width/2:"right"===e?t.x+t.width-a.right:t.x+a.left}function hn(t){return rn([],nn(t))}function pn(t,e){const i=e&&e.dataset&&e.dataset.tooltip&&e.dataset.tooltip.callbacks;return i?t.override(i):t}class un extends Ma{constructor(t){super(),this.opacity=0,this._active=[],this._eventPosition=void 0,this._size=void 0,this._cachedAnimations=void 0,this._tooltipItems=[],this.$animations=void 0,this.$context=void 0,this.chart=t.chart||t._chart,this._chart=this.chart,this.options=t.options,this.dataPoints=void 0,this.title=void 0,this.beforeBody=void 0,this.body=void 0,this.afterBody=void 0,this.footer=void 0,this.xAlign=void 0,this.yAlign=void 0,this.x=void 0,this.y=void 0,this.height=void 0,this.width=void 0,this.caretX=void 0,this.caretY=void 0,this.labelColors=void 0,this.labelPointStyles=void 0,this.labelTextColors=void 0}initialize(t){this.options=t,this._cachedAnimations=void 0,this.$context=void 0}_resolveAnimations(){const t=this._cachedAnimations;if(t)return t;const e=this.chart,i=this.options.setContext(this.getContext()),a=i.enabled&&e.options.animation&&i.animations,r=new ci(this.chart,a);return a._cacheable&&(this._cachedAnimations=Object.freeze(r)),r}getContext(){return this.$context||(this.$context=(this,le(this.chart.getContext(),{tooltip:this,tooltipItems:this._tooltipItems,type:"tooltip"})))}getTitle(t,e){const{callbacks:i}=e,a=i.beforeTitle.apply(this,[t]),r=i.title.apply(this,[t]),n=i.afterTitle.apply(this,[t]);let o=[];return o=rn(o,nn(a)),o=rn(o,nn(r)),o=rn(o,nn(n)),o}getBeforeBody(t,e){return hn(e.callbacks.beforeBody.apply(this,[t]))}getBody(t,e){const{callbacks:i}=e,a=[];return m(t,(t=>{const e={before:[],lines:[],after:[]},r=pn(i,t);rn(e.before,nn(r.beforeLabel.call(this,t))),rn(e.lines,r.label.call(this,t)),rn(e.after,nn(r.afterLabel.call(this,t))),a.push(e)})),a}getAfterBody(t,e){return hn(e.callbacks.afterBody.apply(this,[t]))}getFooter(t,e){const{callbacks:i}=e,a=i.beforeFooter.apply(this,[t]),r=i.footer.apply(this,[t]),n=i.afterFooter.apply(this,[t]);let o=[];return o=rn(o,nn(a)),o=rn(o,nn(r)),o=rn(o,nn(n)),o}_createItems(t){const e=this._active,i=this.chart.data,a=[],r=[],n=[];let o,s,l=[];for(o=0,s=e.length;o<s;++o)l.push(on(this.chart,e[o]));return t.filter&&(l=l.filter(((e,a,r)=>t.filter(e,a,r,i)))),t.itemSort&&(l=l.sort(((e,a)=>t.itemSort(e,a,i)))),m(l,(e=>{const i=pn(t.callbacks,e);a.push(i.labelColor.call(this,e)),r.push(i.labelPointStyle.call(this,e)),n.push(i.labelTextColor.call(this,e))})),this.labelColors=a,this.labelPointStyles=r,this.labelTextColors=n,this.dataPoints=l,l}update(t,e){const i=this.options.setContext(this.getContext()),a=this._active;let r,n=[];if(a.length){const t=an[i.position].call(this,a,this._eventPosition);n=this._createItems(i),this.title=this.getTitle(n,i),this.beforeBody=this.getBeforeBody(n,i),this.body=this.getBody(n,i),this.afterBody=this.getAfterBody(n,i),this.footer=this.getFooter(n,i);const e=this._size=sn(this,i),o=Object.assign({},t,e),s=_n(this.chart,i,o),l=cn(i,o,s,this.chart);this.xAlign=s.xAlign,this.yAlign=s.yAlign,r={opacity:1,x:l.x,y:l.y,width:e.width,height:e.height,caretX:t.x,caretY:t.y}}else 0!==this.opacity&&(r={opacity:0});this._tooltipItems=n,this.$context=void 0,r&&this._resolveAnimations().update(this,r),t&&i.external&&i.external.call(this,{chart:this.chart,tooltip:this,replay:e})}drawCaret(t,e,i,a){const r=this.getCaretPosition(t,i,a);e.lineTo(r.x1,r.y1),e.lineTo(r.x2,r.y2),e.lineTo(r.x3,r.y3)}getCaretPosition(t,e,i){const{xAlign:a,yAlign:r}=this,{caretSize:n,cornerRadius:o}=i,{topLeft:s,topRight:l,bottomLeft:_,bottomRight:c}=re(o),{x:d,y:h}=t,{width:p,height:u}=e;let m,f,g,b,y,x;return"center"===r?(y=h+u/2,"left"===a?(m=d,f=m-n,b=y+n,x=y-n):(m=d+p,f=m+n,b=y-n,x=y+n),g=m):(f="left"===a?d+Math.max(s,_)+n:"right"===a?d+p-Math.max(l,c)-n:this.caretX,"top"===r?(b=h,y=b-n,m=f-n,g=f+n):(b=h+u,y=b+n,m=f+n,g=f-n),x=b),{x1:m,x2:f,x3:g,y1:b,y2:y,y3:x}}drawTitle(t,e,i){const a=this.title,r=a.length;let n,o,s;if(r){const l=Ke(i.rtl,this.x,this.width);for(t.x=dn(this,i.titleAlign,i),e.textAlign=l.textAlign(i.titleAlign),e.textBaseline="middle",n=oe(i.titleFont),o=i.titleSpacing,e.fillStyle=i.titleColor,e.font=n.string,s=0;s<r;++s)e.fillText(a[s],l.x(t.x),t.y+n.lineHeight/2),t.y+=n.lineHeight+o,s+1===r&&(t.y+=i.titleMarginBottom-o)}}_drawColorBox(t,e,i,a,r){const n=this.labelColors[i],o=this.labelPointStyles[i],{boxHeight:s,boxWidth:l,boxPadding:_}=r,c=oe(r.bodyFont),d=dn(this,"left",r),h=a.x(d),p=s<c.lineHeight?(c.lineHeight-s)/2:0,u=e.y+p;if(r.usePointStyle){const e={radius:Math.min(l,s)/2,pointStyle:o.pointStyle,rotation:o.rotation,borderWidth:1},i=a.leftForLtr(h,l)+l/2,_=u+s/2;t.strokeStyle=r.multiKeyBackground,t.fillStyle=r.multiKeyBackground,$t(t,e,i,_),t.strokeStyle=n.borderColor,t.fillStyle=n.backgroundColor,$t(t,e,i,_)}else{t.lineWidth=n.borderWidth||1,t.strokeStyle=n.borderColor,t.setLineDash(n.borderDash||[]),t.lineDashOffset=n.borderDashOffset||0;const e=a.leftForLtr(h,l-_),i=a.leftForLtr(a.xPlus(h,1),l-_-2),o=re(n.borderRadius);Object.values(o).some((t=>0!==t))?(t.beginPath(),t.fillStyle=r.multiKeyBackground,Jt(t,{x:e,y:u,w:l,h:s,radius:o}),t.fill(),t.stroke(),t.fillStyle=n.backgroundColor,t.beginPath(),Jt(t,{x:i,y:u+1,w:l-2,h:s-2,radius:o}),t.fill()):(t.fillStyle=r.multiKeyBackground,t.fillRect(e,u,l,s),t.strokeRect(e,u,l,s),t.fillStyle=n.backgroundColor,t.fillRect(i,u+1,l-2,s-2))}t.fillStyle=this.labelTextColors[i]}drawBody(t,e,i){const{body:a}=this,{bodySpacing:r,bodyAlign:n,displayColors:o,boxHeight:s,boxWidth:l,boxPadding:_}=i,c=oe(i.bodyFont);let d=c.lineHeight,h=0;const p=Ke(i.rtl,this.x,this.width),u=function(i){e.fillText(i,p.x(t.x+h),t.y+d/2),t.y+=d+r},f=p.textAlign(n);let g,b,y,x,w,v,k;for(e.textAlign=n,e.textBaseline="middle",e.font=c.string,t.x=dn(this,f,i),e.fillStyle=i.bodyColor,m(this.beforeBody,u),h=o&&"right"!==f?"center"===n?l/2+_:l+2+_:0,x=0,v=a.length;x<v;++x){for(g=a[x],b=this.labelTextColors[x],e.fillStyle=b,m(g.before,u),y=g.lines,o&&y.length&&(this._drawColorBox(e,t,x,p,i),d=Math.max(c.lineHeight,s)),w=0,k=y.length;w<k;++w)u(y[w]),d=c.lineHeight;m(g.after,u)}h=0,d=c.lineHeight,m(this.afterBody,u),t.y-=r}drawFooter(t,e,i){const a=this.footer,r=a.length;let n,o;if(r){const s=Ke(i.rtl,this.x,this.width);for(t.x=dn(this,i.footerAlign,i),t.y+=i.footerMarginTop,e.textAlign=s.textAlign(i.footerAlign),e.textBaseline="middle",n=oe(i.footerFont),e.fillStyle=i.footerColor,e.font=n.string,o=0;o<r;++o)e.fillText(a[o],s.x(t.x),t.y+n.lineHeight/2),t.y+=n.lineHeight+i.footerSpacing}}drawBackground(t,e,i,a){const{xAlign:r,yAlign:n}=this,{x:o,y:s}=t,{width:l,height:_}=i,{topLeft:c,topRight:d,bottomLeft:h,bottomRight:p}=re(a.cornerRadius);e.fillStyle=a.backgroundColor,e.strokeStyle=a.borderColor,e.lineWidth=a.borderWidth,e.beginPath(),e.moveTo(o+c,s),"top"===n&&this.drawCaret(t,e,i,a),e.lineTo(o+l-d,s),e.quadraticCurveTo(o+l,s,o+l,s+d),"center"===n&&"right"===r&&this.drawCaret(t,e,i,a),e.lineTo(o+l,s+_-p),e.quadraticCurveTo(o+l,s+_,o+l-p,s+_),"bottom"===n&&this.drawCaret(t,e,i,a),e.lineTo(o+h,s+_),e.quadraticCurveTo(o,s+_,o,s+_-h),"center"===n&&"left"===r&&this.drawCaret(t,e,i,a),e.lineTo(o,s+c),e.quadraticCurveTo(o,s,o+c,s),e.closePath(),e.fill(),a.borderWidth>0&&e.stroke()}_updateAnimationTarget(t){const e=this.chart,i=this.$animations,a=i&&i.x,r=i&&i.y;if(a||r){const i=an[t.position].call(this,this._active,this._eventPosition);if(!i)return;const n=this._size=sn(this,t),o=Object.assign({},i,this._size),s=_n(e,t,o),l=cn(t,o,s,e);a._to===l.x&&r._to===l.y||(this.xAlign=s.xAlign,this.yAlign=s.yAlign,this.width=n.width,this.height=n.height,this.caretX=i.x,this.caretY=i.y,this._resolveAnimations().update(this,l))}}draw(t){const e=this.options.setContext(this.getContext());let i=this.opacity;if(!i)return;this._updateAnimationTarget(e);const a={width:this.width,height:this.height},r={x:this.x,y:this.y};i=Math.abs(i)<.001?0:i;const n=ne(e.padding),o=this.title.length||this.beforeBody.length||this.body.length||this.afterBody.length||this.footer.length;e.enabled&&o&&(t.save(),t.globalAlpha=i,this.drawBackground(r,t,a,e),Ge(t,e.textDirection),r.y+=n.top,this.drawTitle(r,t,e),this.drawBody(r,t,e),this.drawFooter(r,t,e),Je(t,e.textDirection),t.restore())}getActiveElements(){return this._active||[]}setActiveElements(t,e){const i=this._active,a=t.map((({datasetIndex:t,index:e})=>{const i=this.chart.getDatasetMeta(t);if(!i)throw new Error("Cannot find a dataset at index "+t);return{datasetIndex:t,element:i.data[e],index:e}})),r=!f(i,a),n=this._positionChanged(a,e);(r||n)&&(this._active=a,this._eventPosition=e,this._ignoreReplayEvents=!0,this.update(!0))}handleEvent(t,e,i=!0){if(e&&this._ignoreReplayEvents)return!1;this._ignoreReplayEvents=!1;const a=this.options,r=this._active||[],n=this._getActiveElements(t,r,e,i),o=this._positionChanged(n,t),s=e||!f(n,r)||o;return s&&(this._active=n,(a.enabled||a.external)&&(this._eventPosition={x:t.x,y:t.y},this.update(!0,e))),s}_getActiveElements(t,e,i,a){const r=this.options;if("mouseout"===t.type)return[];if(!a)return e;const n=this.chart.getElementsAtEventForMode(t,r.mode,r,i);return r.reverse&&n.reverse(),n}_positionChanged(t,e){const{caretX:i,caretY:a,options:r}=this,n=an[r.position].call(this,t,e);return!1!==n&&(i!==n.x||a!==n.y)}}un.positioners=an;var mn={id:"tooltip",_element:un,positioners:an,afterInit(t,e,i){i&&(t.tooltip=new un({chart:t,options:i}))},beforeUpdate(t,e,i){t.tooltip&&t.tooltip.initialize(i)},reset(t,e,i){t.tooltip&&t.tooltip.initialize(i)},afterDraw(t){const e=t.tooltip,i={tooltip:e};!1!==t.notifyPlugins("beforeTooltipDraw",i)&&(e&&e.draw(t.ctx),t.notifyPlugins("afterTooltipDraw",i))},afterEvent(t,e){if(t.tooltip){const i=e.replay;t.tooltip.handleEvent(e.event,i,e.inChartArea)&&(e.changed=!0)}},defaults:{enabled:!0,external:null,position:"average",backgroundColor:"rgba(0,0,0,0.8)",titleColor:"#fff",titleFont:{weight:"bold"},titleSpacing:2,titleMarginBottom:6,titleAlign:"left",bodyColor:"#fff",bodySpacing:2,bodyFont:{},bodyAlign:"left",footerColor:"#fff",footerSpacing:2,footerMarginTop:6,footerFont:{weight:"bold"},footerAlign:"left",padding:6,caretPadding:2,caretSize:5,cornerRadius:6,boxHeight:(t,e)=>e.bodyFont.size,boxWidth:(t,e)=>e.bodyFont.size,multiKeyBackground:"#fff",displayColors:!0,boxPadding:0,borderColor:"rgba(0,0,0,0)",borderWidth:0,animation:{duration:400,easing:"easeOutQuart"},animations:{numbers:{type:"number",properties:["x","y","width","height","caretX","caretY"]},opacity:{easing:"linear",duration:200}},callbacks:{beforeTitle:n,title(t){if(t.length>0){const e=t[0],i=e.chart.data.labels,a=i?i.length:0;if(this&&this.options&&"dataset"===this.options.mode)return e.dataset.label||"";if(e.label)return e.label;if(a>0&&e.dataIndex<a)return i[e.dataIndex]}return""},afterTitle:n,beforeBody:n,beforeLabel:n,label(t){if(this&&this.options&&"dataset"===this.options.mode)return t.label+": "+t.formattedValue||t.formattedValue;let e=t.dataset.label||"";e&&(e+=": ");const i=t.formattedValue;return s(i)||(e+=i),e},labelColor(t){const e=t.chart.getDatasetMeta(t.datasetIndex).controller.getStyle(t.dataIndex);return{borderColor:e.borderColor,backgroundColor:e.backgroundColor,borderWidth:e.borderWidth,borderDash:e.borderDash,borderDashOffset:e.borderDashOffset,borderRadius:0}},labelTextColor(){return this.options.bodyColor},labelPointStyle(t){const e=t.chart.getDatasetMeta(t.datasetIndex).controller.getStyle(t.dataIndex);return{pointStyle:e.pointStyle,rotation:e.rotation}},afterLabel:n,afterBody:n,beforeFooter:n,footer:n,afterFooter:n}},defaultRoutes:{bodyFont:"font",footerFont:"font",titleFont:"font"},descriptors:{_scriptable:t=>"filter"!==t&&"itemSort"!==t&&"external"!==t,_indexable:!1,callbacks:{_scriptable:!1,_indexable:!1},animation:{_fallback:!1},animations:{_fallback:"animation"}},additionalOptionScopes:["interaction"]},fn=Object.freeze({__proto__:null,Decimation:Lr,Filler:Xr,Legend:Gr,SubTitle:en,Title:Qr,Tooltip:mn});class gn extends Ea{constructor(t){super(t),this._startValue=void 0,this._valueRange=0,this._addedLabels=[]}init(t){const e=this._addedLabels;if(e.length){const t=this.getLabels();for(const{index:i,label:a}of e)t[i]===a&&t.splice(i,1);this._addedLabels=[]}super.init(t)}parse(t,e){if(s(t))return null;const i=this.getLabels();return((t,e)=>null===t?null:G(Math.round(t),0,e))(e=isFinite(e)&&i[e]===t?e:function(t,e,i,a){const r=t.indexOf(e);return-1===r?((t,e,i,a)=>("string"==typeof e?(i=t.push(e)-1,a.unshift({index:i,label:e})):isNaN(e)&&(i=null),i))(t,e,i,a):r!==t.lastIndexOf(e)?i:r}(i,t,h(e,t),this._addedLabels),i.length-1)}determineDataLimits(){const{minDefined:t,maxDefined:e}=this.getUserBounds();let{min:i,max:a}=this.getMinMax(!0);"ticks"===this.options.bounds&&(t||(i=0),e||(a=this.getLabels().length-1)),this.min=i,this.max=a}buildTicks(){const t=this.min,e=this.max,i=this.options.offset,a=[];let r=this.getLabels();r=0===t&&e===r.length-1?r:r.slice(t,e+1),this._valueRange=Math.max(r.length-(i?0:1),1),this._startValue=this.min-(i?.5:0);for(let i=t;i<=e;i++)a.push({value:i});return a}getLabelForValue(t){const e=this.getLabels();return t>=0&&t<e.length?e[t]:t}configure(){super.configure(),this.isHorizontal()||(this._reversePixels=!this._reversePixels)}getPixelForValue(t){return"number"!=typeof t&&(t=this.parse(t)),null===t?NaN:this.getPixelForDecimal((t-this._startValue)/this._valueRange)}getPixelForTick(t){const e=this.ticks;return t<0||t>e.length-1?null:this.getPixelForValue(e[t].value)}getValueForPixel(t){return Math.round(this._startValue+this.getDecimalForPixel(t)*this._valueRange)}getBasePixel(){return this.bottom}}function bn(t,e,{horizontal:i,minRotation:a}){const r=j(a),n=(i?Math.sin(r):Math.cos(r))||.001,o=.75*e*(""+t).length;return Math.min(e/n,o)}gn.id="category",gn.defaults={ticks:{callback:gn.prototype.getLabelForValue}};class yn extends Ea{constructor(t){super(t),this.start=void 0,this.end=void 0,this._startValue=void 0,this._endValue=void 0,this._valueRange=0}parse(t,e){return s(t)||("number"==typeof t||t instanceof Number)&&!isFinite(+t)?null:+t}handleTickRangeOptions(){const{beginAtZero:t}=this.options,{minDefined:e,maxDefined:i}=this.getUserBounds();let{min:a,max:r}=this;const n=t=>a=e?a:t,o=t=>r=i?r:t;if(t){const t=V(a),e=V(r);t<0&&e<0?o(0):t>0&&e>0&&n(0)}if(a===r){let e=1;(r>=Number.MAX_SAFE_INTEGER||a<=Number.MIN_SAFE_INTEGER)&&(e=Math.abs(.05*r)),o(r+e),t||n(a-e)}this.min=a,this.max=r}getTickLimit(){const t=this.options.ticks;let e,{maxTicksLimit:i,stepSize:a}=t;return a?(e=Math.ceil(this.max/a)-Math.floor(this.min/a)+1,e>1e3&&(console.warn(`scales.${this.id}.ticks.stepSize: ${a} would result generating up to ${e} ticks. Limiting to 1000.`),e=1e3)):(e=this.computeTickLimit(),i=i||11),i&&(e=Math.min(i,e)),e}computeTickLimit(){return Number.POSITIVE_INFINITY}buildTicks(){const t=this.options,e=t.ticks;let i=this.getTickLimit();i=Math.max(2,i);const a=function(t,e){const i=[],{bounds:a,step:r,min:n,max:o,precision:l,count:_,maxTicks:c,maxDigits:d,includeBounds:h}=t,p=r||1,u=c-1,{min:m,max:f}=e,g=!s(n),b=!s(o),y=!s(_),x=(f-m)/(d+1);let w,v,k,M,S=B((f-m)/u/p)*p;if(S<1e-14&&!g&&!b)return[{value:m},{value:f}];M=Math.ceil(f/S)-Math.floor(m/S),M>u&&(S=B(M*S/u/p)*p),s(l)||(w=Math.pow(10,l),S=Math.ceil(S*w)/w),"ticks"===a?(v=Math.floor(m/S)*S,k=Math.ceil(f/S)*S):(v=m,k=f),g&&b&&r&&function(t,e){const i=Math.round(t);return i-e<=t&&i+e>=t}((o-n)/r,S/1e3)?(M=Math.round(Math.min((o-n)/S,c)),S=(o-n)/M,v=n,k=o):y?(v=g?n:v,k=b?o:k,M=_-1,S=(k-v)/M):(M=(k-v)/S,M=N(M,Math.round(M),S/1e3)?Math.round(M):Math.ceil(M));const P=Math.max(Z(S),Z(v));w=Math.pow(10,s(l)?P:l),v=Math.round(v*w)/w,k=Math.round(k*w)/w;let D=0;for(g&&(h&&v!==n?(i.push({value:n}),v<n&&D++,N(Math.round((v+D*S)*w)/w,n,bn(n,x,t))&&D++):v<n&&D++);D<M;++D)i.push({value:Math.round((v+D*S)*w)/w});return b&&h&&k!==o?i.length&&N(i[i.length-1].value,o,bn(o,x,t))?i[i.length-1].value=o:i.push({value:o}):b&&k!==o||i.push({value:k}),i}({maxTicks:i,bounds:t.bounds,min:t.min,max:t.max,precision:e.precision,step:e.stepSize,count:e.count,maxDigits:this._maxDigits(),horizontal:this.isHorizontal(),minRotation:e.minRotation||0,includeBounds:!1!==e.includeBounds},this._range||this);return"ticks"===t.bounds&&H(a,this,"value"),t.reverse?(a.reverse(),this.start=this.max,this.end=this.min):(this.start=this.min,this.end=this.max),a}configure(){const t=this.ticks;let e=this.min,i=this.max;if(super.configure(),this.options.offset&&t.length){const a=(i-e)/Math.max(t.length-1,1)/2;e-=a,i+=a}this._startValue=e,this._endValue=i,this._valueRange=i-e}getLabelForValue(t){return qe(t,this.chart.options.locale,this.options.ticks.format)}}class xn extends yn{determineDataLimits(){const{min:t,max:e}=this.getMinMax(!0);this.min=c(t)?t:0,this.max=c(e)?e:1,this.handleTickRangeOptions()}computeTickLimit(){const t=this.isHorizontal(),e=t?this.width:this.height,i=j(this.options.ticks.minRotation),a=(t?Math.sin(i):Math.cos(i))||.001,r=this._resolveTickFontOptions(0);return Math.ceil(e/Math.min(40,r.lineHeight/a))}getPixelForValue(t){return null===t?NaN:this.getPixelForDecimal((t-this._startValue)/this._valueRange)}getValueForPixel(t){return this._startValue+this.getDecimalForPixel(t)*this._valueRange}}function wn(t){return 1==t/Math.pow(10,Math.floor(F(t)))}xn.id="linear",xn.defaults={ticks:{callback:Pa.formatters.numeric}};class vn extends Ea{constructor(t){super(t),this.start=void 0,this.end=void 0,this._startValue=void 0,this._valueRange=0}parse(t,e){const i=yn.prototype.parse.apply(this,[t,e]);if(0!==i)return c(i)&&i>0?i:null;this._zero=!0}determineDataLimits(){const{min:t,max:e}=this.getMinMax(!0);this.min=c(t)?Math.max(0,t):null,this.max=c(e)?Math.max(0,e):null,this.options.beginAtZero&&(this._zero=!0),this.handleTickRangeOptions()}handleTickRangeOptions(){const{minDefined:t,maxDefined:e}=this.getUserBounds();let i=this.min,a=this.max;const r=e=>i=t?i:e,n=t=>a=e?a:t,o=(t,e)=>Math.pow(10,Math.floor(F(t))+e);i===a&&(i<=0?(r(1),n(10)):(r(o(i,-1)),n(o(a,1)))),i<=0&&r(o(a,-1)),a<=0&&n(o(i,1)),this._zero&&this.min!==this._suggestedMin&&i===o(this.min,0)&&r(o(i,-1)),this.min=i,this.max=a}buildTicks(){const t=this.options,e=function(t,e){const i=Math.floor(F(e.max)),a=Math.ceil(e.max/Math.pow(10,i)),r=[];let n=d(t.min,Math.pow(10,Math.floor(F(e.min)))),o=Math.floor(F(n)),s=Math.floor(n/Math.pow(10,o)),l=o<0?Math.pow(10,Math.abs(o)):1;do{r.push({value:n,major:wn(n)}),++s,10===s&&(s=1,++o,l=o>=0?1:l),n=Math.round(s*Math.pow(10,o)*l)/l}while(o<i||o===i&&s<a);const _=d(t.max,n);return r.push({value:_,major:wn(n)}),r}({min:this._userMin,max:this._userMax},this);return"ticks"===t.bounds&&H(e,this,"value"),t.reverse?(e.reverse(),this.start=this.max,this.end=this.min):(this.start=this.min,this.end=this.max),e}getLabelForValue(t){return void 0===t?"0":qe(t,this.chart.options.locale,this.options.ticks.format)}configure(){const t=this.min;super.configure(),this._startValue=F(t),this._valueRange=F(this.max)-F(t)}getPixelForValue(t){return void 0!==t&&0!==t||(t=this.min),null===t||isNaN(t)?NaN:this.getPixelForDecimal(t===this.min?0:(F(t)-this._startValue)/this._valueRange)}getValueForPixel(t){const e=this.getDecimalForPixel(t);return Math.pow(10,this._startValue+e*this._valueRange)}}function kn(t){const e=t.ticks;if(e.display&&t.display){const t=ne(e.backdropPadding);return h(e.font&&e.font.size,Bt.font.size)+t.height}return 0}function Mn(t,e,i,a,r){return t===a||t===r?{start:e-i/2,end:e+i/2}:t<a||t>r?{start:e-i,end:e}:{start:e,end:e+i}}function Sn(t,e,i,a,r){const n=Math.abs(Math.sin(i)),o=Math.abs(Math.cos(i));let s=0,l=0;a.start<e.l?(s=(e.l-a.start)/n,t.l=Math.min(t.l,e.l-s)):a.end>e.r&&(s=(a.end-e.r)/n,t.r=Math.max(t.r,e.r+s)),r.start<e.t?(l=(e.t-r.start)/o,t.t=Math.min(t.t,e.t-l)):r.end>e.b&&(l=(r.end-e.b)/o,t.b=Math.max(t.b,e.b+l))}function Pn(t){return 0===t||180===t?"center":t<180?"left":"right"}function Dn(t,e,i){return 90===i||270===i?t-=e/2:(i>270||i<90)&&(t-=e),t}function Tn(t,e,i,a){const{ctx:r}=t;if(i)r.arc(t.xCenter,t.yCenter,e,0,O);else{let i=t.getPointPosition(0,e);r.moveTo(i.x,i.y);for(let n=1;n<a;n++)i=t.getPointPosition(n,e),r.lineTo(i.x,i.y)}}vn.id="logarithmic",vn.defaults={ticks:{callback:Pa.formatters.logarithmic,major:{enabled:!0}}};class Cn extends yn{constructor(t){super(t),this.xCenter=void 0,this.yCenter=void 0,this.drawingArea=void 0,this._pointLabels=[],this._pointLabelItems=[]}setDimensions(){const t=this._padding=ne(kn(this.options)/2),e=this.width=this.maxWidth-t.width,i=this.height=this.maxHeight-t.height;this.xCenter=Math.floor(this.left+e/2+t.left),this.yCenter=Math.floor(this.top+i/2+t.top),this.drawingArea=Math.floor(Math.min(e,i)/2)}determineDataLimits(){const{min:t,max:e}=this.getMinMax(!1);this.min=c(t)&&!isNaN(t)?t:0,this.max=c(e)&&!isNaN(e)?e:0,this.handleTickRangeOptions()}computeTickLimit(){return Math.ceil(this.drawingArea/kn(this.options))}generateTickLabels(t){yn.prototype.generateTickLabels.call(this,t),this._pointLabels=this.getLabels().map(((t,e)=>{const i=u(this.options.pointLabels.callback,[t,e],this);return i||0===i?i:""})).filter(((t,e)=>this.chart.getDataVisibility(e)))}fit(){const t=this.options;t.display&&t.pointLabels.display?function(t){const e={l:t.left+t._padding.left,r:t.right-t._padding.right,t:t.top+t._padding.top,b:t.bottom-t._padding.bottom},i=Object.assign({},e),a=[],r=[],n=t._pointLabels.length,o=t.options.pointLabels,s=o.centerPointLabels?C/n:0;for(let h=0;h<n;h++){const n=o.setContext(t.getPointLabelContext(h));r[h]=n.padding;const p=t.getPointPosition(h,t.drawingArea+r[h],s),u=oe(n.font),m=(_=t.ctx,c=u,d=l(d=t._pointLabels[h])?d:[d],{w:Nt(_,c.string,d),h:d.length*c.lineHeight});a[h]=m;const f=q(t.getIndexAngle(h)+s),g=Math.round($(f));Sn(i,e,f,Mn(g,p.x,m.w,0,180),Mn(g,p.y,m.h,90,270))}var _,c,d;t.setCenterPoint(e.l-i.l,i.r-e.r,e.t-i.t,i.b-e.b),t._pointLabelItems=function(t,e,i){const a=[],r=t._pointLabels.length,n=t.options,o=kn(n)/2,s=t.drawingArea,l=n.pointLabels.centerPointLabels?C/r:0;for(let n=0;n<r;n++){const r=t.getPointPosition(n,s+o+i[n],l),h=Math.round($(q(r.angle+E))),p=e[n],u=Dn(r.y,p.h,h),m=Pn(h),f=(_=r.x,c=p.w,"right"===(d=m)?_-=c:"center"===d&&(_-=c/2),_);a.push({x:r.x,y:u,textAlign:m,left:f,top:u,right:f+p.w,bottom:u+p.h})}var _,c,d;return a}(t,a,r)}(this):this.setCenterPoint(0,0,0,0)}setCenterPoint(t,e,i,a){this.xCenter+=Math.floor((t-e)/2),this.yCenter+=Math.floor((i-a)/2),this.drawingArea-=Math.min(this.drawingArea/2,Math.max(t,e,i,a))}getIndexAngle(t){return q(t*(O/(this._pointLabels.length||1))+j(this.options.startAngle||0))}getDistanceFromCenterForValue(t){if(s(t))return NaN;const e=this.drawingArea/(this.max-this.min);return this.options.reverse?(this.max-t)*e:(t-this.min)*e}getValueForDistanceFromCenter(t){if(s(t))return NaN;const e=t/(this.drawingArea/(this.max-this.min));return this.options.reverse?this.max-e:this.min+e}getPointLabelContext(t){const e=this._pointLabels||[];if(t>=0&&t<e.length){const i=e[t];return function(t,e,i){return le(t,{label:i,index:e,type:"pointLabel"})}(this.getContext(),t,i)}}getPointPosition(t,e,i=0){const a=this.getIndexAngle(t)-E+i;return{x:Math.cos(a)*e+this.xCenter,y:Math.sin(a)*e+this.yCenter,angle:a}}getPointPositionForValue(t,e){return this.getPointPosition(t,this.getDistanceFromCenterForValue(e))}getBasePosition(t){return this.getPointPositionForValue(t||0,this.getBaseValue())}getPointLabelPosition(t){const{left:e,top:i,right:a,bottom:r}=this._pointLabelItems[t];return{left:e,top:i,right:a,bottom:r}}drawBackground(){const{backgroundColor:t,grid:{circular:e}}=this.options;if(t){const i=this.ctx;i.save(),i.beginPath(),Tn(this,this.getDistanceFromCenterForValue(this._endValue),e,this._pointLabels.length),i.closePath(),i.fillStyle=t,i.fill(),i.restore()}}drawGrid(){const t=this.ctx,e=this.options,{angleLines:i,grid:a}=e,r=this._pointLabels.length;let n,o,l;if(e.pointLabels.display&&function(t,e){const{ctx:i,options:{pointLabels:a}}=t;for(let r=e-1;r>=0;r--){const e=a.setContext(t.getPointLabelContext(r)),n=oe(e.font),{x:o,y:l,textAlign:_,left:c,top:d,right:h,bottom:p}=t._pointLabelItems[r],{backdropColor:u}=e;if(!s(u)){const t=ne(e.backdropPadding);i.fillStyle=u,i.fillRect(c-t.left,d-t.top,h-c+t.width,p-d+t.height)}Kt(i,t._pointLabels[r],o,l+n.lineHeight/2,n,{color:e.color,textAlign:_,textBaseline:"middle"})}}(this,r),a.display&&this.ticks.forEach(((t,e)=>{0!==e&&(o=this.getDistanceFromCenterForValue(t.value),function(t,e,i,a){const r=t.ctx,n=e.circular,{color:o,lineWidth:s}=e;!n&&!a||!o||!s||i<0||(r.save(),r.strokeStyle=o,r.lineWidth=s,r.setLineDash(e.borderDash),r.lineDashOffset=e.borderDashOffset,r.beginPath(),Tn(t,i,n,a),r.closePath(),r.stroke(),r.restore())}(this,a.setContext(this.getContext(e-1)),o,r))})),i.display){for(t.save(),n=r-1;n>=0;n--){const a=i.setContext(this.getPointLabelContext(n)),{color:r,lineWidth:s}=a;s&&r&&(t.lineWidth=s,t.strokeStyle=r,t.setLineDash(a.borderDash),t.lineDashOffset=a.borderDashOffset,o=this.getDistanceFromCenterForValue(e.ticks.reverse?this.min:this.max),l=this.getPointPosition(n,o),t.beginPath(),t.moveTo(this.xCenter,this.yCenter),t.lineTo(l.x,l.y),t.stroke())}t.restore()}}drawBorder(){}drawLabels(){const t=this.ctx,e=this.options,i=e.ticks;if(!i.display)return;const a=this.getIndexAngle(0);let r,n;t.save(),t.translate(this.xCenter,this.yCenter),t.rotate(a),t.textAlign="center",t.textBaseline="middle",this.ticks.forEach(((a,o)=>{if(0===o&&!e.reverse)return;const s=i.setContext(this.getContext(o)),l=oe(s.font);if(r=this.getDistanceFromCenterForValue(this.ticks[o].value),s.showLabelBackdrop){t.font=l.string,n=t.measureText(a.label).width,t.fillStyle=s.backdropColor;const e=ne(s.backdropPadding);t.fillRect(-n/2-e.left,-r-l.size/2-e.top,n+e.width,l.size+e.height)}Kt(t,a.label,0,-r,l,{color:s.color})})),t.restore()}drawTitle(){}}Cn.id="radialLinear",Cn.defaults={display:!0,animate:!0,position:"chartArea",angleLines:{display:!0,lineWidth:1,borderDash:[],borderDashOffset:0},grid:{circular:!1},startAngle:0,ticks:{showLabelBackdrop:!0,callback:Pa.formatters.numeric},pointLabels:{backdropColor:void 0,backdropPadding:2,display:!0,font:{size:10},callback:t=>t,padding:5,centerPointLabels:!1}},Cn.defaultRoutes={"angleLines.color":"borderColor","pointLabels.color":"color","ticks.color":"color"},Cn.descriptors={angleLines:{_fallback:"grid"}};const On={millisecond:{common:!0,size:1,steps:1e3},second:{common:!0,size:1e3,steps:60},minute:{common:!0,size:6e4,steps:60},hour:{common:!0,size:36e5,steps:24},day:{common:!0,size:864e5,steps:30},week:{common:!1,size:6048e5,steps:4},month:{common:!0,size:2628e6,steps:12},quarter:{common:!1,size:7884e6,steps:4},year:{common:!0,size:3154e7}},An=Object.keys(On);function Ln(t,e){return t-e}function Rn(t,e){if(s(e))return null;const i=t._adapter,{parser:a,round:r,isoWeekday:n}=t._parseOpts;let o=e;return"function"==typeof a&&(o=a(o)),c(o)||(o="string"==typeof a?i.parse(o,a):i.parse(o)),null===o?null:(r&&(o="week"!==r||!W(n)&&!0!==n?i.startOf(o,r):i.startOf(o,"isoWeek",n)),+o)}function En(t,e,i,a){const r=An.length;for(let n=An.indexOf(t);n<r-1;++n){const t=On[An[n]],r=t.steps?t.steps:Number.MAX_SAFE_INTEGER;if(t.common&&Math.ceil((i-e)/(r*t.size))<=a)return An[n]}return An[r-1]}function In(t,e,i){if(i){if(i.length){const{lo:a,hi:r}=_e(i,e);t[i[a]>=e?i[a]:i[r]]=!0}}else t[e]=!0}function zn(t,e,i){const a=[],r={},n=e.length;let o,s;for(o=0;o<n;++o)s=e[o],r[s]=o,a.push({value:s,major:!1});return 0!==n&&i?function(t,e,i,a){const r=t._adapter,n=+r.startOf(e[0].value,a),o=e[e.length-1].value;let s,l;for(s=n;s<=o;s=+r.add(s,1,a))l=i[s],l>=0&&(e[l].major=!0);return e}(t,a,r,i):a}class Fn extends Ea{constructor(t){super(t),this._cache={data:[],labels:[],all:[]},this._unit="day",this._majorUnit=void 0,this._offsets={},this._normalized=!1,this._parseOpts=void 0}init(t,e){const i=t.time||(t.time={}),a=this._adapter=new Hi._date(t.adapters.date);w(i.displayFormats,a.formats()),this._parseOpts={parser:i.parser,round:i.round,isoWeekday:i.isoWeekday},super.init(t),this._normalized=e.normalized}parse(t,e){return void 0===t?null:Rn(this,t)}beforeLayout(){super.beforeLayout(),this._cache={data:[],labels:[],all:[]}}determineDataLimits(){const t=this.options,e=this._adapter,i=t.time.unit||"day";let{min:a,max:r,minDefined:n,maxDefined:o}=this.getUserBounds();function s(t){n||isNaN(t.min)||(a=Math.min(a,t.min)),o||isNaN(t.max)||(r=Math.max(r,t.max))}n&&o||(s(this._getLabelBounds()),"ticks"===t.bounds&&"labels"===t.ticks.source||s(this.getMinMax(!1))),a=c(a)&&!isNaN(a)?a:+e.startOf(Date.now(),i),r=c(r)&&!isNaN(r)?r:+e.endOf(Date.now(),i)+1,this.min=Math.min(a,r-1),this.max=Math.max(a+1,r)}_getLabelBounds(){const t=this.getLabelTimestamps();let e=Number.POSITIVE_INFINITY,i=Number.NEGATIVE_INFINITY;return t.length&&(e=t[0],i=t[t.length-1]),{min:e,max:i}}buildTicks(){const t=this.options,e=t.time,i=t.ticks,a="labels"===i.source?this.getLabelTimestamps():this._generate();"ticks"===t.bounds&&a.length&&(this.min=this._userMin||a[0],this.max=this._userMax||a[a.length-1]);const r=this.min,n=function(t,e,i){let a=0,r=t.length;for(;a<r&&t[a]<e;)a++;for(;r>a&&t[r-1]>i;)r--;return a>0||r<t.length?t.slice(a,r):t}(a,r,this.max);return this._unit=e.unit||(i.autoSkip?En(e.minUnit,this.min,this.max,this._getLabelCapacity(r)):function(t,e,i,a,r){for(let n=An.length-1;n>=An.indexOf(i);n--){const i=An[n];if(On[i].common&&t._adapter.diff(r,a,i)>=e-1)return i}return An[i?An.indexOf(i):0]}(this,n.length,e.minUnit,this.min,this.max)),this._majorUnit=i.major.enabled&&"year"!==this._unit?function(t){for(let e=An.indexOf(t)+1,i=An.length;e<i;++e)if(On[An[e]].common)return An[e]}(this._unit):void 0,this.initOffsets(a),t.reverse&&n.reverse(),zn(this,n,this._majorUnit)}initOffsets(t){let e,i,a=0,r=0;this.options.offset&&t.length&&(e=this.getDecimalForValue(t[0]),a=1===t.length?1-e:(this.getDecimalForValue(t[1])-e)/2,i=this.getDecimalForValue(t[t.length-1]),r=1===t.length?i:(i-this.getDecimalForValue(t[t.length-2]))/2);const n=t.length<3?.5:.25;a=G(a,0,n),r=G(r,0,n),this._offsets={start:a,end:r,factor:1/(a+1+r)}}_generate(){const t=this._adapter,e=this.min,i=this.max,a=this.options,r=a.time,n=r.unit||En(r.minUnit,e,i,this._getLabelCapacity(e)),o=h(r.stepSize,1),s="week"===n&&r.isoWeekday,l=W(s)||!0===s,_={};let c,d,p=e;if(l&&(p=+t.startOf(p,"isoWeek",s)),p=+t.startOf(p,l?"day":n),t.diff(i,e,n)>1e5*o)throw new Error(e+" and "+i+" are too far apart with stepSize of "+o+" "+n);const u="data"===a.ticks.source&&this.getDataTimestamps();for(c=p,d=0;c<i;c=+t.add(c,o,n),d++)In(_,c,u);return c!==i&&"ticks"!==a.bounds&&1!==d||In(_,c,u),Object.keys(_).sort(((t,e)=>t-e)).map((t=>+t))}getLabelForValue(t){const e=this._adapter,i=this.options.time;return i.tooltipFormat?e.format(t,i.tooltipFormat):e.format(t,i.displayFormats.datetime)}_tickFormatFunction(t,e,i,a){const r=this.options,n=r.time.displayFormats,o=this._unit,s=this._majorUnit,l=o&&n[o],_=s&&n[s],c=i[e],d=s&&_&&c&&c.major,h=this._adapter.format(t,a||(d?_:l)),p=r.ticks.callback;return p?u(p,[h,e,i],this):h}generateTickLabels(t){let e,i,a;for(e=0,i=t.length;e<i;++e)a=t[e],a.label=this._tickFormatFunction(a.value,e,t)}getDecimalForValue(t){return null===t?NaN:(t-this.min)/(this.max-this.min)}getPixelForValue(t){const e=this._offsets,i=this.getDecimalForValue(t);return this.getPixelForDecimal((e.start+i)*e.factor)}getValueForPixel(t){const e=this._offsets,i=this.getDecimalForPixel(t)/e.factor-e.end;return this.min+i*(this.max-this.min)}_getLabelSize(t){const e=this.options.ticks,i=this.ctx.measureText(t).width,a=j(this.isHorizontal()?e.maxRotation:e.minRotation),r=Math.cos(a),n=Math.sin(a),o=this._resolveTickFontOptions(0).size;return{w:i*r+o*n,h:i*n+o*r}}_getLabelCapacity(t){const e=this.options.time,i=e.displayFormats,a=i[e.unit]||i.millisecond,r=this._tickFormatFunction(t,0,zn(this,[t],this._majorUnit),a),n=this._getLabelSize(r),o=Math.floor(this.isHorizontal()?this.width/n.w:this.height/n.h)-1;return o>0?o:1}getDataTimestamps(){let t,e,i=this._cache.data||[];if(i.length)return i;const a=this.getMatchingVisibleMetas();if(this._normalized&&a.length)return this._cache.data=a[0].controller.getAllParsedValues(this);for(t=0,e=a.length;t<e;++t)i=i.concat(a[t].controller.getAllParsedValues(this));return this._cache.data=this.normalize(i)}getLabelTimestamps(){const t=this._cache.labels||[];let e,i;if(t.length)return t;const a=this.getLabels();for(e=0,i=a.length;e<i;++e)t.push(Rn(this,a[e]));return this._cache.labels=this._normalized?t:this.normalize(t)}normalize(t){return ue(t.sort(Ln))}}function Vn(t,e,i){let a,r,n,o,s=0,l=t.length-1;i?(e>=t[s].pos&&e<=t[l].pos&&({lo:s,hi:l}=ce(t,"pos",e)),({pos:a,time:n}=t[s]),({pos:r,time:o}=t[l])):(e>=t[s].time&&e<=t[l].time&&({lo:s,hi:l}=ce(t,"time",e)),({time:a,pos:n}=t[s]),({time:r,pos:o}=t[l]));const _=r-a;return _?n+(o-n)*(e-a)/_:n}Fn.id="time",Fn.defaults={bounds:"data",adapters:{},time:{parser:!1,unit:!1,round:!1,isoWeekday:!1,minUnit:"millisecond",displayFormats:{}},ticks:{source:"auto",major:{enabled:!1}}};class Bn extends Fn{constructor(t){super(t),this._table=[],this._minPos=void 0,this._tableRange=void 0}initOffsets(){const t=this._getTimestampsForTable(),e=this._table=this.buildLookupTable(t);this._minPos=Vn(e,this.min),this._tableRange=Vn(e,this.max)-this._minPos,super.initOffsets(t)}buildLookupTable(t){const{min:e,max:i}=this,a=[],r=[];let n,o,s,l,_;for(n=0,o=t.length;n<o;++n)l=t[n],l>=e&&l<=i&&a.push(l);if(a.length<2)return[{time:e,pos:0},{time:i,pos:1}];for(n=0,o=a.length;n<o;++n)_=a[n+1],s=a[n-1],l=a[n],Math.round((_+s)/2)!==l&&r.push({time:l,pos:n/(o-1)});return r}_getTimestampsForTable(){let t=this._cache.all||[];if(t.length)return t;const e=this.getDataTimestamps(),i=this.getLabelTimestamps();return t=e.length&&i.length?this.normalize(e.concat(i)):e.length?e:i,t=this._cache.all=t,t}getDecimalForValue(t){return(Vn(this._table,t)-this._minPos)/this._tableRange}getValueForPixel(t){const e=this._offsets,i=this.getDecimalForPixel(t)/e.factor-e.end;return Vn(this._table,i*this._tableRange+this._minPos,!0)}}Bn.id="timeseries",Bn.defaults=Fn.defaults;const Wn=[Bi,Cr,fn,Object.freeze({__proto__:null,CategoryScale:gn,LinearScale:xn,LogarithmicScale:vn,RadialLinearScale:Cn,TimeScale:Fn,TimeSeriesScale:Bn})];or.register(...Wn);const Nn=or;var Hn=i(3761),jn=i(8287),$n=i(1454),Zn=i(5077),Yn=i(9155),Un=i(8203),Xn=i(8941),qn=i(1549),Kn=i(5783),Gn=i(2757),Jn=i(9195),Qn=i(752),to=i(1471),eo=i(7708),io=i(965),ao=i(1936),ro=i(2804),no=i(8912),oo=i(3452),so=i(7703),lo=i(5594),_o=i(8612),co=i(8851),ho=i(9014),po=i(1958),uo=i(590),mo=i(6048),fo=i(8092),go=i(7943),bo=i(1422),yo=i(7848),xo=i(1910),wo=i(2343),vo=i(2268),ko=i(4938),Mo=i(2790),So=i(822),Po=i(9208),Do=i(8533),To=i(7151),Co=i(5296),Oo=i(134),Ao=i(6507),Lo=i(9065),Ro=i(5560),Eo=i(9856),Io=i(3317);const zo={clearsky_day:Hn,clearsky_night:jn,clearsky_polartwilight:$n,cloudy:Zn,fair_day:Yn,fair_night:Un,fair_polartwilight:Xn,fog:qn,heavyrain:Kn,heavyrainandthunder:Gn,heavyrainshowersandthunder_day:Jn,heavyrainshowersandthunder_night:Qn,heavyrainshowersandthunder_polartwilight:to,heavyrainshowers_day:eo,heavyrainshowers_night:io,heavyrainshowers_polartwilight:ao,heavysleet:ro,heavysleetandthunder:no,heavysleetshowersandthunder_day:oo,heavysleetshowersandthunder_night:so,heavysleetshowersandthunder_polartwilight:lo,heavysleetshowers_day:_o,heavysleetshowers_night:co,heavysleetshowers_polartwilight:ho,heavysnow:po,heavysnowandthunder:uo,heavysnowshowersandthunder_day:mo,heavysnowshowersandthunder_night:fo,heavysnowshowersandthunder_polartwilight:go,heavysnowshowers_day:bo,heavysnowshowers_night:yo,heavysnowshowers_polartwilight:xo,lightrain:wo,lightrainandthunder:vo,lightrainshowersandthunder_day:ko,lightrainshowersandthunder_night:Mo,lightrainshowersandthunder_polartwilight:So,lightrainshowers_day:Po,lightrainshowers_night:Do,lightrainshowers_polartwilight:To,lightsleet:Co,lightsleetandthunder:Oo,lightsleetshowers_day:Ao,lightsleetshowers_night:Lo,lightsleetshowers_polartwilight:Ro,lightsnow:Eo,lightsnowandthunder:Io,lightsnowandthunder:Io,lightsnowshowers_day:i(6001),lightsnowshowers_night:i(8282),lightsnowshowers_polartwilight:i(4659),ightssleetshowersandthunder_day:i(5518),lightssleetshowersandthunder_night:i(2049),lightssleetshowersandthunder_polartwilight:i(9322),lightssnowshowersandthunder_day:i(8587),lightssnowshowersandthunder_night:i(378),lightssnowshowersandthunder_polartwilight:i(2496),partlycloudy_day:i(8133),partlycloudy_night:i(1793),partlycloudy_polartwilight:i(2473),rain:i(1550),rainandthunder:i(8084),rainshowersandthunder_day:i(5),rainshowersandthunder_night:i(4863),rainshowersandthunder_polartwilight:i(1467),rainshowers_day:i(6679),rainshowers_night:i(8749),rainshowers_polartwilight:i(3148),sleet:i(6949),sleetandthunder:i(662),sleetshowersandthunder_day:i(8200),sleetshowersandthunder_night:i(3271),sleetshowersandthunder_polartwilight:i(8817),sleetshowers_day:i(5587),sleetshowers_night:i(3464),sleetshowers_polartwilight:i(2686),snow:i(4112),snowandthunder:i(8902),snowshowersandthunder_day:i(2957),snowshowersandthunder_night:i(3851),snowshowersandthunder_polartwilight:i(6508),snowshowers_day:i(2182),snowshowers_night:i(625),snowshowers_polartwilight:i(9292),icon_arrow:i(3446)};class Fo{constructor(t){this.buildChart(t)}buildChart(t){this.chart=new Nn(t,{data:{datasets:this.getDatasets()},options:this.getOptions()})}updateData(t,e,i,a,r,n,o,s){console.log(s),this.chart.data.labels=t,this.chart.data.datasets[0].data=e,this.chart.data.datasets[0].pointStyle=n,this.chart.data.datasets[1].data=i,this.chart.data.datasets[2].data=a,this.chart.data.datasets[2].pointStyle=o,this.chart.data.datasets[2].pointRotation=s,this.chart.data.datasets[3].data=r,this.chart.update()}getDatasets(){return[{order:2,type:"line",pointRadius:.1,tension:.4,fill:!0,borderWidth:0,yAxisID:"y",segment:{backgroundColor:t=>t.p0.parsed.y>0?"rgba(360, 63, 73, 0.5)":"rgba(141, 166, 229, 0.5)"}},{order:1,type:"bar",backgroundColor:"rgba(54, 162, 235, 0.3)",borderWidth:0,yAxisID:"y2"},{order:3,type:"line",pointRadius:.1,tension:.4,yAxisID:"y",segment:{borderColor:"rgba(141, 229, 166, 0.5)"}},{order:4,type:"line",pointRadius:0,tension:.4,borderDash:[5,5],yAxisID:"y3",segment:{borderColor:"rgba(197, 201, 198, 0.9)"}}]}getOptions(){return{responsive:!0,plugins:{legend:{display:!1}},scales:{y:{min:-15,max:35,type:"linear",position:"left",ticks:{color:"black",beginAtZero:!0}},y2:{min:0,max:16,type:"linear",position:"right",ticks:{color:"rgba(54, 162, 235, 0.8)"},grid:{drawOnChartArea:!1}},y3:{type:"linear",position:"right",ticks:{color:"rgba(197, 201, 198, 1)",stepSize:5},grid:{drawOnChartArea:!1}}}}}}class Vo{getChartEl(){return document.getElementById("chart")}}class Bo{async fetchJson(t){return i(6218)}getData(t){console.log(t);const e=[],i=[],a=[],r=[],n=[],o=[],s=[],l=[];for(let _=0;_<12;_++)if(e.push(parseInt(t.properties.timeseries[_].time.slice(11,13))+1),i.push(t.properties.timeseries[_].data.instant.details.air_temperature),a.push(t.properties.timeseries[_].data.next_1_hours.details.precipitation_amount),r.push(t.properties.timeseries[_].data.instant.details.wind_speed),n.push(t.properties.timeseries[_].data.instant.details.air_pressure_at_sea_level),_%2==0){const e=new Image(35,35);e.src=zo[t.properties.timeseries[_].data.next_1_hours.summary.symbol_code],o.push(e),s.push(""),l.push("")}else{const e=new Image(20,20);o.push(""),e.src=zo.icon_arrow,s.push(e),l.push(t.properties.timeseries[_].data.instant.details.wind_from_direction)}return{hour:e,temp:i,precipitation:a,wind:r,airPressure:n,weatherImg:o,windArrow:s,windDirection:l}}}new class{constructor(){this.weatherData=new Bo,this.displayController=new Vo,this.chart=new Fo(this.displayController.getChartEl()),this.updateChart()}async updateChart(){const t=await this.weatherData.fetchJson(),e=this.weatherData.getData(t);this.chart.updateData(e.hour,e.temp,e.precipitation,e.wind,e.airPressure,e.weatherImg,e.windArrow,e.windDirection)}}})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUFjLFNBQ2RDLEdBQUksS0FDSkMsUUFBUyxTQUNUQyxLQUFNLFNBQ05DLFVBQVcsU0FDWEMsT0FBUSxTQUNSQyxTQUFVLFNBQ1ZDLFFBQVMsU0FDVEMsSUFBSyxTQUNMQyxZQUFhLFNBQ2JDLFFBQVMsU0FDVEMsUUFBUyxTQUNUQyxLQUFNLE9BQ05DLElBQUssS0FDTEMsTUFBTyxPQUNQQyxRQUFTLFNBQ1RDLEtBQU0sU0FDTkMsS0FBTSxPQUNOQyxLQUFNLFNBQ05DLE9BQVEsU0FDUkMsUUFBUyxTQUNUQyxTQUFVLFNBQ1ZDLE9BQVEsU0FDUkMsTUFBTyxTQUNQQyxJQUFLLFNBQ0xDLE9BQVEsU0FDUkMsT0FBUSxTQUNSQyxLQUFNLFNBQ05DLE1BQU8sU0FDUEMsTUFBTyxTQUNQQyxJQUFLLE9BQ0xDLE9BQVEsU0FDUkMsT0FBUSxTQUNSQyxTQUFVLE9BQ1ZDLE9BQVEsU0FDUkMsT0FBUSxTQUNSQyxTQUFVLFNBQ1ZDLFNBQVUsU0FDVkMsU0FBVSxTQUNWQyxTQUFVLFNBQ1ZDLE9BQVEsU0FDUkMsUUFBUyxTQUNUQyxVQUFXLFNBQ1hDLElBQUssU0FDTEMsT0FBUSxTQUNSQyxJQUFLLFNBQ0xDLElBQUssT0FDTEMsTUFBTyxTQUNQQyxJQUFLLFNBQ0xDLFFBQVMsU0FDVEMsT0FBUSxTQUNSQyxRQUFTLFNBQ1RDLE1BQU8sU0FDUEMsS0FBTSxTQUNOQyxNQUFPLFNBQ1BDLE9BQVEsU0FDUkMsVUFBVyxTQUNYQyxRQUFTLFNBQ1RDLFdBQVksU0FDWkMsSUFBSyxTQUNMQyxLQUFNLFNBQ05DLE1BQU8sU0FDUEMsVUFBVyxTQUNYQyxLQUFNLFNBQ05DLEtBQU0sU0FDTkMsS0FBTSxTQUNOQyxLQUFNLFNBQ05DLE9BQVEsU0FDUkMsT0FBUSxTQUNSQyxPQUFRLFNBQ1JDLE1BQU8sU0FDUEMsTUFBTyxTQUNQQyxRQUFTLFNBQ1RDLElBQUssU0FDTEMsS0FBTSxPQUNOQyxRQUFTLFNBQ1RDLElBQUssU0FDTEMsT0FBUSxTQUNSQyxNQUFPLFNBQ1BDLFdBQVksU0FDWkMsSUFBSyxLQUNMQyxNQUFPLFNBQ1BD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LElBQ0YsR0FDRStuRixFQUFLdHJELFdBQVd1ckQsV0FBVzVrRixHQUFHOGQsS0FBS2tuRSxhQUFhTSxRQUFRQyxhQUU1RHhCLEVBQVcxbEUsS0FBSyttRSxHQUNoQnBCLEVBQVUzbEUsS0FBSyxJQUNmNGxFLEVBQWM1bEUsS0FBSyxRQUNkLENBQ0wsTUFBTSttRSxFQUFNLElBQUlDLE1BQU0sR0FBSSxJQUMxQnRCLEVBQVcxbEUsS0FBSyxJQUNoQittRSxFQUFJeG9GLElBQU0sY0FDVm9uRixFQUFVM2xFLEtBQUsrbUUsR0FDZm5CLEVBQWM1bEUsS0FDWnNtRSxFQUFLdHJELFdBQVd1ckQsV0FBVzVrRixHQUFHOGQsS0FBSyttRSxRQUFRQyxRQUFRVSxxQkFJekQsTUFBTyxDQUNMMUwsS0FBQUEsRUFDQTZKLEtBQUFBLEVBQ0FDLGNBQUFBLEVBQ0FDLEtBQUFBLEVBQ0FDLFlBQUFBLEVBQ0FDLFdBQUFBLEVBQ0FDLFVBQUFBLEVBQ0FDLGNBQUFBLElBOEJPLElBekJiLE1BQ0Uvc0UsY0FDRS9hLEtBQUtzcEYsWUFBYyxJQUFJbEIsR0FDdkJwb0YsS0FBS3VwRixrQkFBb0IsSUFBSXJCLEdBQzdCbG9GLEtBQUs0ZSxNQUFRLElBQUl1b0UsR0FBYW5uRixLQUFLdXBGLGtCQUFrQnBCLGNBQ3JEbm9GLEtBQUt3cEYsY0FHUG5CLG9CQUNFLE1BQU1HLFFBQWF4b0YsS0FBS3NwRixZQUFZRyxZQUM5QjluRSxFQUFPM2hCLEtBQUtzcEYsWUFBWWYsUUFBUUMsR0FDdEN4b0YsS0FBSzRlLE1BQU0yb0UsV0FDVDVsRSxFQUFLZzhELEtBQ0xoOEQsRUFBSzZsRSxLQUNMN2xFLEVBQUs4bEUsY0FDTDlsRSxFQUFLK2xFLEtBQ0wvbEUsRUFBS2dtRSxZQUNMaG1FLEVBQUtpbUUsV0FDTGptRSxFQUFLa21FLFVBQ0xsbUUsRUFBS21tRSIsInNvdXJjZXMiOlsid2VicGFjazovL3dlYXRoZXItYXBwL3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL3dlYXRoZXItYXBwL3dlYnBhY2svcnVudGltZS9nbG9iYWwiLCJ3ZWJwYWNrOi8vd2VhdGhlci1hcHAvd2VicGFjay9ydW50aW1lL3B1YmxpY1BhdGgiLCJ3ZWJwYWNrOi8vd2VhdGhlci1hcHAvLi9ub2RlX21vZHVsZXMvY2hhcnQuanMvZGlzdC9jaHVua3MvaGVscGVycy5zZWdtZW50LmpzIiwid2VicGFjazovL3dlYXRoZXItYXBwLy4vbm9kZV9tb2R1bGVzL2NoYXJ0LmpzL2Rpc3QvY2hhcnQuZXNtLmpzIiwid2VicGFjazovL3dlYXRoZXItYXBwLy4vbm9kZV9tb2R1bGVzL2NoYXJ0LmpzL2F1dG8vYXV0by5lc20uanMiLCJ3ZWJwYWNrOi8vd2VhdGhlci1hcHAvLi9zcmMvaW1hZ2VzLmpzIiwid2VicGFjazovL3dlYXRoZXItYXBwLy4vc3JjL2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIFRoZSBtb2R1bGUgY2FjaGVcbnZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcblxuLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbmZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cdHZhciBjYWNoZWRNb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdO1xuXHRpZiAoY2FjaGVkTW9kdWxlICE9PSB1bmRlZmluZWQpIHtcblx0XHRyZXR1cm4gY2FjaGVkTW9kdWxlLmV4cG9ydHM7XG5cdH1cblx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcblx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG5cdFx0Ly8gbm8gbW9kdWxlLmlkIG5lZWRlZFxuXHRcdC8vIG5vIG1vZHVsZS5sb2FkZWQgbmVlZGVkXG5cdFx0ZXhwb3J0czoge31cblx0fTtcblxuXHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cblx0X193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0obW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cblx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcblx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufVxuXG4iLCJfX3dlYnBhY2tfcmVxdWlyZV9fLmcgPSAoZnVuY3Rpb24oKSB7XG5cdGlmICh0eXBlb2YgZ2xvYmFsVGhpcyA9PT0gJ29iamVjdCcpIHJldHVybiBnbG9iYWxUaGlzO1xuXHR0cnkge1xuXHRcdHJldHVybiB0aGlzIHx8IG5ldyBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xuXHR9IGNhdGNoIChlKSB7XG5cdFx0aWYgKHR5cGVvZiB3aW5kb3cgPT09ICdvYmplY3QnKSByZXR1cm4gd2luZG93O1xuXHR9XG59KSgpOyIsInZhciBzY3JpcHRVcmw7XG5pZiAoX193ZWJwYWNrX3JlcXVpcmVfXy5nLmltcG9ydFNjcmlwdHMpIHNjcmlwdFVybCA9IF9fd2VicGFja19yZXF1aXJlX18uZy5sb2NhdGlvbiArIFwiXCI7XG52YXIgZG9jdW1lbnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLmcuZG9jdW1lbnQ7XG5pZiAoIXNjcmlwdFVybCAmJiBkb2N1bWVudCkge1xuXHRpZiAoZG9jdW1lbnQuY3VycmVudFNjcmlwdClcblx0XHRzY3JpcHRVcmwgPSBkb2N1bWVudC5jdXJyZW50U2NyaXB0LnNyY1xuXHRpZiAoIXNjcmlwdFVybCkge1xuXHRcdHZhciBzY3JpcHRzID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJzY3JpcHRcIik7XG5cdFx0aWYoc2NyaXB0cy5sZW5ndGgpIHNjcmlwdFVybCA9IHNjcmlwdHNbc2NyaXB0cy5sZW5ndGggLSAxXS5zcmNcblx0fVxufVxuLy8gV2hlbiBzdXBwb3J0aW5nIGJyb3dzZXJzIHdoZXJlIGFuIGF1dG9tYXRpYyBwdWJsaWNQYXRoIGlzIG5vdCBzdXBwb3J0ZWQgeW91IG11c3Qgc3BlY2lmeSBhbiBvdXRwdXQucHVibGljUGF0aCBtYW51YWxseSB2aWEgY29uZmlndXJhdGlvblxuLy8gb3IgcGFzcyBhbiBlbXB0eSBzdHJpbmcgKFwiXCIpIGFuZCBzZXQgdGhlIF9fd2VicGFja19wdWJsaWNfcGF0aF9fIHZhcmlhYmxlIGZyb20geW91ciBjb2RlIHRvIHVzZSB5b3VyIG93biBsb2dpYy5cbmlmICghc2NyaXB0VXJsKSB0aHJvdyBuZXcgRXJyb3IoXCJBdXRvbWF0aWMgcHVibGljUGF0aCBpcyBub3Qgc3VwcG9ydGVkIGluIHRoaXMgYnJvd3NlclwiKTtcbnNjcmlwdFVybCA9IHNjcmlwdFVybC5yZXBsYWNlKC8jLiokLywgXCJcIikucmVwbGFjZSgvXFw/LiokLywgXCJcIikucmVwbGFjZSgvXFwvW15cXC9dKyQvLCBcIi9cIik7XG5fX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBzY3JpcHRVcmw7IiwiLyohXG4gKiBDaGFydC5qcyB2My43LjFcbiAqIGh0dHBzOi8vd3d3LmNoYXJ0anMub3JnXG4gKiAoYykgMjAyMiBDaGFydC5qcyBDb250cmlidXRvcnNcbiAqIFJlbGVhc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZVxuICovXG5mdW5jdGlvbiBmb250U3RyaW5nKHBpeGVsU2l6ZSwgZm9udFN0eWxlLCBmb250RmFtaWx5KSB7XG4gIHJldHVybiBmb250U3R5bGUgKyAnICcgKyBwaXhlbFNpemUgKyAncHggJyArIGZvbnRGYW1pbHk7XG59XG5jb25zdCByZXF1ZXN0QW5pbUZyYW1lID0gKGZ1bmN0aW9uKCkge1xuICBpZiAodHlwZW9mIHdpbmRvdyA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oY2FsbGJhY2spIHtcbiAgICAgIHJldHVybiBjYWxsYmFjaygpO1xuICAgIH07XG4gIH1cbiAgcmV0dXJuIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWU7XG59KCkpO1xuZnVuY3Rpb24gdGhyb3R0bGVkKGZuLCB0aGlzQXJnLCB1cGRhdGVGbikge1xuICBjb25zdCB1cGRhdGVBcmdzID0gdXBkYXRlRm4gfHwgKChhcmdzKSA9PiBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmdzKSk7XG4gIGxldCB0aWNraW5nID0gZmFsc2U7XG4gIGxldCBhcmdzID0gW107XG4gIHJldHVybiBmdW5jdGlvbiguLi5yZXN0KSB7XG4gICAgYXJncyA9IHVwZGF0ZUFyZ3MocmVzdCk7XG4gICAgaWYgKCF0aWNraW5nKSB7XG4gICAgICB0aWNraW5nID0gdHJ1ZTtcbiAgICAgIHJlcXVlc3RBbmltRnJhbWUuY2FsbCh3aW5kb3csICgpID0+IHtcbiAgICAgICAgdGlja2luZyA9IGZhbHNlO1xuICAgICAgICBmbi5hcHBseSh0aGlzQXJnLCBhcmdzKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcbn1cbmZ1bmN0aW9uIGRlYm91bmNlKGZuLCBkZWxheSkge1xuICBsZXQgdGltZW91dDtcbiAgcmV0dXJuIGZ1bmN0aW9uKC4uLmFyZ3MpIHtcbiAgICBpZiAoZGVsYXkpIHtcbiAgICAgIGNsZWFyVGltZW91dCh0aW1lb3V0KTtcbiAgICAgIHRpbWVvdXQgPSBzZXRUaW1lb3V0KGZuLCBkZWxheSwgYXJncyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGZuLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgIH1cbiAgICByZXR1cm4gZGVsYXk7XG4gIH07XG59XG5jb25zdCBfdG9MZWZ0UmlnaHRDZW50ZXIgPSAoYWxpZ24pID0+IGFsaWduID09PSAnc3RhcnQnID8gJ2xlZnQnIDogYWxpZ24gPT09ICdlbmQnID8gJ3JpZ2h0JyA6ICdjZW50ZXInO1xuY29uc3QgX2FsaWduU3RhcnRFbmQgPSAoYWxpZ24sIHN0YXJ0LCBlbmQpID0+IGFsaWduID09PSAnc3RhcnQnID8gc3RhcnQgOiBhbGlnbiA9PT0gJ2VuZCcgPyBlbmQgOiAoc3RhcnQgKyBlbmQpIC8gMjtcbmNvbnN0IF90ZXh0WCA9IChhbGlnbiwgbGVmdCwgcmlnaHQsIHJ0bCkgPT4ge1xuICBjb25zdCBjaGVjayA9IHJ0bCA/ICdsZWZ0JyA6ICdyaWdodCc7XG4gIHJldHVybiBhbGlnbiA9PT0gY2hlY2sgPyByaWdodCA6IGFsaWduID09PSAnY2VudGVyJyA/IChsZWZ0ICsgcmlnaHQpIC8gMiA6IGxlZnQ7XG59O1xuXG5mdW5jdGlvbiBub29wKCkge31cbmNvbnN0IHVpZCA9IChmdW5jdGlvbigpIHtcbiAgbGV0IGlkID0gMDtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBpZCsrO1xuICB9O1xufSgpKTtcbmZ1bmN0aW9uIGlzTnVsbE9yVW5kZWYodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlID09PSBudWxsIHx8IHR5cGVvZiB2YWx1ZSA9PT0gJ3VuZGVmaW5lZCc7XG59XG5mdW5jdGlvbiBpc0FycmF5KHZhbHVlKSB7XG4gIGlmIChBcnJheS5pc0FycmF5ICYmIEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgY29uc3QgdHlwZSA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YWx1ZSk7XG4gIGlmICh0eXBlLnN1YnN0cigwLCA3KSA9PT0gJ1tvYmplY3QnICYmIHR5cGUuc3Vic3RyKC02KSA9PT0gJ0FycmF5XScpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICByZXR1cm4gZmFsc2U7XG59XG5mdW5jdGlvbiBpc09iamVjdCh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgIT09IG51bGwgJiYgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbHVlKSA9PT0gJ1tvYmplY3QgT2JqZWN0XSc7XG59XG5jb25zdCBpc051bWJlckZpbml0ZSA9ICh2YWx1ZSkgPT4gKHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicgfHwgdmFsdWUgaW5zdGFuY2VvZiBOdW1iZXIpICYmIGlzRmluaXRlKCt2YWx1ZSk7XG5mdW5jdGlvbiBmaW5pdGVPckRlZmF1bHQodmFsdWUsIGRlZmF1bHRWYWx1ZSkge1xuICByZXR1cm4gaXNOdW1iZXJGaW5pdGUodmFsdWUpID8gdmFsdWUgOiBkZWZhdWx0VmFsdWU7XG59XG5mdW5jdGlvbiB2YWx1ZU9yRGVmYXVsdCh2YWx1ZSwgZGVmYXVsdFZhbHVlKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICd1bmRlZmluZWQnID8gZGVmYXVsdFZhbHVlIDogdmFsdWU7XG59XG5jb25zdCB0b1BlcmNlbnRhZ2UgPSAodmFsdWUsIGRpbWVuc2lvbikgPT5cbiAgdHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyAmJiB2YWx1ZS5lbmRzV2l0aCgnJScpID9cbiAgICBwYXJzZUZsb2F0KHZhbHVlKSAvIDEwMFxuICAgIDogdmFsdWUgLyBkaW1lbnNpb247XG5jb25zdCB0b0RpbWVuc2lvbiA9ICh2YWx1ZSwgZGltZW5zaW9uKSA9PlxuICB0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnICYmIHZhbHVlLmVuZHNXaXRoKCclJykgP1xuICAgIHBhcnNlRmxvYXQodmFsdWUpIC8gMTAwICogZGltZW5zaW9uXG4gICAgOiArdmFsdWU7XG5mdW5jdGlvbiBjYWxsYmFjayhmbiwgYXJncywgdGhpc0FyZykge1xuICBpZiAoZm4gJiYgdHlwZW9mIGZuLmNhbGwgPT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gZm4uYXBwbHkodGhpc0FyZywgYXJncyk7XG4gIH1cbn1cbmZ1bmN0aW9uIGVhY2gobG9vcGFibGUsIGZuLCB0aGlzQXJnLCByZXZlcnNlKSB7XG4gIGxldCBpLCBsZW4sIGtleXM7XG4gIGlmIChpc0FycmF5KGxvb3BhYmxlKSkge1xuICAgIGxlbiA9IGxvb3BhYmxlLmxlbmd0aDtcbiAgICBpZiAocmV2ZXJzZSkge1xuICAgICAgZm9yIChpID0gbGVuIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgZm4uY2FsbCh0aGlzQXJnLCBsb29wYWJsZVtpXSwgaSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgICAgICBmbi5jYWxsKHRoaXNBcmcsIGxvb3BhYmxlW2ldLCBpKTtcbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSBpZiAoaXNPYmplY3QobG9vcGFibGUpKSB7XG4gICAga2V5cyA9IE9iamVjdC5rZXlzKGxvb3BhYmxlKTtcbiAgICBsZW4gPSBrZXlzLmxlbmd0aDtcbiAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIGZuLmNhbGwodGhpc0FyZywgbG9vcGFibGVba2V5c1tpXV0sIGtleXNbaV0pO1xuICAgIH1cbiAgfVxufVxuZnVuY3Rpb24gX2VsZW1lbnRzRXF1YWwoYTAsIGExKSB7XG4gIGxldCBpLCBpbGVuLCB2MCwgdjE7XG4gIGlmICghYTAgfHwgIWExIHx8IGEwLmxlbmd0aCAhPT0gYTEubGVuZ3RoKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGZvciAoaSA9IDAsIGlsZW4gPSBhMC5sZW5ndGg7IGkgPCBpbGVuOyArK2kpIHtcbiAgICB2MCA9IGEwW2ldO1xuICAgIHYxID0gYTFbaV07XG4gICAgaWYgKHYwLmRhdGFzZXRJbmRleCAhPT0gdjEuZGF0YXNldEluZGV4IHx8IHYwLmluZGV4ICE9PSB2MS5pbmRleCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdHJ1ZTtcbn1cbmZ1bmN0aW9uIGNsb25lJDEoc291cmNlKSB7XG4gIGlmIChpc0FycmF5KHNvdXJjZSkpIHtcbiAgICByZXR1cm4gc291cmNlLm1hcChjbG9uZSQxKTtcbiAgfVxuICBpZiAoaXNPYmplY3Qoc291cmNlKSkge1xuICAgIGNvbnN0IHRhcmdldCA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKHNvdXJjZSk7XG4gICAgY29uc3Qga2xlbiA9IGtleXMubGVuZ3RoO1xuICAgIGxldCBrID0gMDtcbiAgICBmb3IgKDsgayA8IGtsZW47ICsraykge1xuICAgICAgdGFyZ2V0W2tleXNba11dID0gY2xvbmUkMShzb3VyY2Vba2V5c1trXV0pO1xuICAgIH1cbiAgICByZXR1cm4gdGFyZ2V0O1xuICB9XG4gIHJldHVybiBzb3VyY2U7XG59XG5mdW5jdGlvbiBpc1ZhbGlkS2V5KGtleSkge1xuICByZXR1cm4gWydfX3Byb3RvX18nLCAncHJvdG90eXBlJywgJ2NvbnN0cnVjdG9yJ10uaW5kZXhPZihrZXkpID09PSAtMTtcbn1cbmZ1bmN0aW9uIF9tZXJnZXIoa2V5LCB0YXJnZXQsIHNvdXJjZSwgb3B0aW9ucykge1xuICBpZiAoIWlzVmFsaWRLZXkoa2V5KSkge1xuICAgIHJldHVybjtcbiAgfVxuICBjb25zdCB0dmFsID0gdGFyZ2V0W2tleV07XG4gIGNvbnN0IHN2YWwgPSBzb3VyY2Vba2V5XTtcbiAgaWYgKGlzT2JqZWN0KHR2YWwpICYmIGlzT2JqZWN0KHN2YWwpKSB7XG4gICAgbWVyZ2UodHZhbCwgc3ZhbCwgb3B0aW9ucyk7XG4gIH0gZWxzZSB7XG4gICAgdGFyZ2V0W2tleV0gPSBjbG9uZSQxKHN2YWwpO1xuICB9XG59XG5mdW5jdGlvbiBtZXJnZSh0YXJnZXQsIHNvdXJjZSwgb3B0aW9ucykge1xuICBjb25zdCBzb3VyY2VzID0gaXNBcnJheShzb3VyY2UpID8gc291cmNlIDogW3NvdXJjZV07XG4gIGNvbnN0IGlsZW4gPSBzb3VyY2VzLmxlbmd0aDtcbiAgaWYgKCFpc09iamVjdCh0YXJnZXQpKSB7XG4gICAgcmV0dXJuIHRhcmdldDtcbiAgfVxuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgY29uc3QgbWVyZ2VyID0gb3B0aW9ucy5tZXJnZXIgfHwgX21lcmdlcjtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBpbGVuOyArK2kpIHtcbiAgICBzb3VyY2UgPSBzb3VyY2VzW2ldO1xuICAgIGlmICghaXNPYmplY3Qoc291cmNlKSkge1xuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyhzb3VyY2UpO1xuICAgIGZvciAobGV0IGsgPSAwLCBrbGVuID0ga2V5cy5sZW5ndGg7IGsgPCBrbGVuOyArK2spIHtcbiAgICAgIG1lcmdlcihrZXlzW2tdLCB0YXJnZXQsIHNvdXJjZSwgb3B0aW9ucyk7XG4gICAgfVxuICB9XG4gIHJldHVybiB0YXJnZXQ7XG59XG5mdW5jdGlvbiBtZXJnZUlmKHRhcmdldCwgc291cmNlKSB7XG4gIHJldHVybiBtZXJnZSh0YXJnZXQsIHNvdXJjZSwge21lcmdlcjogX21lcmdlcklmfSk7XG59XG5mdW5jdGlvbiBfbWVyZ2VySWYoa2V5LCB0YXJnZXQsIHNvdXJjZSkge1xuICBpZiAoIWlzVmFsaWRLZXkoa2V5KSkge1xuICAgIHJldHVybjtcbiAgfVxuICBjb25zdCB0dmFsID0gdGFyZ2V0W2tleV07XG4gIGNvbnN0IHN2YWwgPSBzb3VyY2Vba2V5XTtcbiAgaWYgKGlzT2JqZWN0KHR2YWwpICYmIGlzT2JqZWN0KHN2YWwpKSB7XG4gICAgbWVyZ2VJZih0dmFsLCBzdmFsKTtcbiAgfSBlbHNlIGlmICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHRhcmdldCwga2V5KSkge1xuICAgIHRhcmdldFtrZXldID0gY2xvbmUkMShzdmFsKTtcbiAgfVxufVxuZnVuY3Rpb24gX2RlcHJlY2F0ZWQoc2NvcGUsIHZhbHVlLCBwcmV2aW91cywgY3VycmVudCkge1xuICBpZiAodmFsdWUgIT09IHVuZGVmaW5lZCkge1xuICAgIGNvbnNvbGUud2FybihzY29wZSArICc6IFwiJyArIHByZXZpb3VzICtcblx0XHRcdCdcIiBpcyBkZXByZWNhdGVkLiBQbGVhc2UgdXNlIFwiJyArIGN1cnJlbnQgKyAnXCIgaW5zdGVhZCcpO1xuICB9XG59XG5jb25zdCBlbXB0eVN0cmluZyA9ICcnO1xuY29uc3QgZG90ID0gJy4nO1xuZnVuY3Rpb24gaW5kZXhPZkRvdE9yTGVuZ3RoKGtleSwgc3RhcnQpIHtcbiAgY29uc3QgaWR4ID0ga2V5LmluZGV4T2YoZG90LCBzdGFydCk7XG4gIHJldHVybiBpZHggPT09IC0xID8ga2V5Lmxlbmd0aCA6IGlkeDtcbn1cbmZ1bmN0aW9uIHJlc29sdmVPYmplY3RLZXkob2JqLCBrZXkpIHtcbiAgaWYgKGtleSA9PT0gZW1wdHlTdHJpbmcpIHtcbiAgICByZXR1cm4gb2JqO1xuICB9XG4gIGxldCBwb3MgPSAwO1xuICBsZXQgaWR4ID0gaW5kZXhPZkRvdE9yTGVuZ3RoKGtleSwgcG9zKTtcbiAgd2hpbGUgKG9iaiAmJiBpZHggPiBwb3MpIHtcbiAgICBvYmogPSBvYmpba2V5LnN1YnN0cihwb3MsIGlkeCAtIHBvcyldO1xuICAgIHBvcyA9IGlkeCArIDE7XG4gICAgaWR4ID0gaW5kZXhPZkRvdE9yTGVuZ3RoKGtleSwgcG9zKTtcbiAgfVxuICByZXR1cm4gb2JqO1xufVxuZnVuY3Rpb24gX2NhcGl0YWxpemUoc3RyKSB7XG4gIHJldHVybiBzdHIuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBzdHIuc2xpY2UoMSk7XG59XG5jb25zdCBkZWZpbmVkID0gKHZhbHVlKSA9PiB0eXBlb2YgdmFsdWUgIT09ICd1bmRlZmluZWQnO1xuY29uc3QgaXNGdW5jdGlvbiA9ICh2YWx1ZSkgPT4gdHlwZW9mIHZhbHVlID09PSAnZnVuY3Rpb24nO1xuY29uc3Qgc2V0c0VxdWFsID0gKGEsIGIpID0+IHtcbiAgaWYgKGEuc2l6ZSAhPT0gYi5zaXplKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGZvciAoY29uc3QgaXRlbSBvZiBhKSB7XG4gICAgaWYgKCFiLmhhcyhpdGVtKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdHJ1ZTtcbn07XG5mdW5jdGlvbiBfaXNDbGlja0V2ZW50KGUpIHtcbiAgcmV0dXJuIGUudHlwZSA9PT0gJ21vdXNldXAnIHx8IGUudHlwZSA9PT0gJ2NsaWNrJyB8fCBlLnR5cGUgPT09ICdjb250ZXh0bWVudSc7XG59XG5cbmNvbnN0IFBJID0gTWF0aC5QSTtcbmNvbnN0IFRBVSA9IDIgKiBQSTtcbmNvbnN0IFBJVEFVID0gVEFVICsgUEk7XG5jb25zdCBJTkZJTklUWSA9IE51bWJlci5QT1NJVElWRV9JTkZJTklUWTtcbmNvbnN0IFJBRF9QRVJfREVHID0gUEkgLyAxODA7XG5jb25zdCBIQUxGX1BJID0gUEkgLyAyO1xuY29uc3QgUVVBUlRFUl9QSSA9IFBJIC8gNDtcbmNvbnN0IFRXT19USElSRFNfUEkgPSBQSSAqIDIgLyAzO1xuY29uc3QgbG9nMTAgPSBNYXRoLmxvZzEwO1xuY29uc3Qgc2lnbiA9IE1hdGguc2lnbjtcbmZ1bmN0aW9uIG5pY2VOdW0ocmFuZ2UpIHtcbiAgY29uc3Qgcm91bmRlZFJhbmdlID0gTWF0aC5yb3VuZChyYW5nZSk7XG4gIHJhbmdlID0gYWxtb3N0RXF1YWxzKHJhbmdlLCByb3VuZGVkUmFuZ2UsIHJhbmdlIC8gMTAwMCkgPyByb3VuZGVkUmFuZ2UgOiByYW5nZTtcbiAgY29uc3QgbmljZVJhbmdlID0gTWF0aC5wb3coMTAsIE1hdGguZmxvb3IobG9nMTAocmFuZ2UpKSk7XG4gIGNvbnN0IGZyYWN0aW9uID0gcmFuZ2UgLyBuaWNlUmFuZ2U7XG4gIGNvbnN0IG5pY2VGcmFjdGlvbiA9IGZyYWN0aW9uIDw9IDEgPyAxIDogZnJhY3Rpb24gPD0gMiA/IDIgOiBmcmFjdGlvbiA8PSA1ID8gNSA6IDEwO1xuICByZXR1cm4gbmljZUZyYWN0aW9uICogbmljZVJhbmdlO1xufVxuZnVuY3Rpb24gX2ZhY3Rvcml6ZSh2YWx1ZSkge1xuICBjb25zdCByZXN1bHQgPSBbXTtcbiAgY29uc3Qgc3FydCA9IE1hdGguc3FydCh2YWx1ZSk7XG4gIGxldCBpO1xuICBmb3IgKGkgPSAxOyBpIDwgc3FydDsgaSsrKSB7XG4gICAgaWYgKHZhbHVlICUgaSA9PT0gMCkge1xuICAgICAgcmVzdWx0LnB1c2goaSk7XG4gICAgICByZXN1bHQucHVzaCh2YWx1ZSAvIGkpO1xuICAgIH1cbiAgfVxuICBpZiAoc3FydCA9PT0gKHNxcnQgfCAwKSkge1xuICAgIHJlc3VsdC5wdXNoKHNxcnQpO1xuICB9XG4gIHJlc3VsdC5zb3J0KChhLCBiKSA9PiBhIC0gYikucG9wKCk7XG4gIHJldHVybiByZXN1bHQ7XG59XG5mdW5jdGlvbiBpc051bWJlcihuKSB7XG4gIHJldHVybiAhaXNOYU4ocGFyc2VGbG9hdChuKSkgJiYgaXNGaW5pdGUobik7XG59XG5mdW5jdGlvbiBhbG1vc3RFcXVhbHMoeCwgeSwgZXBzaWxvbikge1xuICByZXR1cm4gTWF0aC5hYnMoeCAtIHkpIDwgZXBzaWxvbjtcbn1cbmZ1bmN0aW9uIGFsbW9zdFdob2xlKHgsIGVwc2lsb24pIHtcbiAgY29uc3Qgcm91bmRlZCA9IE1hdGgucm91bmQoeCk7XG4gIHJldHVybiAoKHJvdW5kZWQgLSBlcHNpbG9uKSA8PSB4KSAmJiAoKHJvdW5kZWQgKyBlcHNpbG9uKSA+PSB4KTtcbn1cbmZ1bmN0aW9uIF9zZXRNaW5BbmRNYXhCeUtleShhcnJheSwgdGFyZ2V0LCBwcm9wZXJ0eSkge1xuICBsZXQgaSwgaWxlbiwgdmFsdWU7XG4gIGZvciAoaSA9IDAsIGlsZW4gPSBhcnJheS5sZW5ndGg7IGkgPCBpbGVuOyBpKyspIHtcbiAgICB2YWx1ZSA9IGFycmF5W2ldW3Byb3BlcnR5XTtcbiAgICBpZiAoIWlzTmFOKHZhbHVlKSkge1xuICAgICAgdGFyZ2V0Lm1pbiA9IE1hdGgubWluKHRhcmdldC5taW4sIHZhbHVlKTtcbiAgICAgIHRhcmdldC5tYXggPSBNYXRoLm1heCh0YXJnZXQubWF4LCB2YWx1ZSk7XG4gICAgfVxuICB9XG59XG5mdW5jdGlvbiB0b1JhZGlhbnMoZGVncmVlcykge1xuICByZXR1cm4gZGVncmVlcyAqIChQSSAvIDE4MCk7XG59XG5mdW5jdGlvbiB0b0RlZ3JlZXMocmFkaWFucykge1xuICByZXR1cm4gcmFkaWFucyAqICgxODAgLyBQSSk7XG59XG5mdW5jdGlvbiBfZGVjaW1hbFBsYWNlcyh4KSB7XG4gIGlmICghaXNOdW1iZXJGaW5pdGUoeCkpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgbGV0IGUgPSAxO1xuICBsZXQgcCA9IDA7XG4gIHdoaWxlIChNYXRoLnJvdW5kKHggKiBlKSAvIGUgIT09IHgpIHtcbiAgICBlICo9IDEwO1xuICAgIHArKztcbiAgfVxuICByZXR1cm4gcDtcbn1cbmZ1bmN0aW9uIGdldEFuZ2xlRnJvbVBvaW50KGNlbnRyZVBvaW50LCBhbmdsZVBvaW50KSB7XG4gIGNvbnN0IGRpc3RhbmNlRnJvbVhDZW50ZXIgPSBhbmdsZVBvaW50LnggLSBjZW50cmVQb2ludC54O1xuICBjb25zdCBkaXN0YW5jZUZyb21ZQ2VudGVyID0gYW5nbGVQb2ludC55IC0gY2VudHJlUG9pbnQueTtcbiAgY29uc3QgcmFkaWFsRGlzdGFuY2VGcm9tQ2VudGVyID0gTWF0aC5zcXJ0KGRpc3RhbmNlRnJvbVhDZW50ZXIgKiBkaXN0YW5jZUZyb21YQ2VudGVyICsgZGlzdGFuY2VGcm9tWUNlbnRlciAqIGRpc3RhbmNlRnJvbVlDZW50ZXIpO1xuICBsZXQgYW5nbGUgPSBNYXRoLmF0YW4yKGRpc3RhbmNlRnJvbVlDZW50ZXIsIGRpc3RhbmNlRnJvbVhDZW50ZXIpO1xuICBpZiAoYW5nbGUgPCAoLTAuNSAqIFBJKSkge1xuICAgIGFuZ2xlICs9IFRBVTtcbiAgfVxuICByZXR1cm4ge1xuICAgIGFuZ2xlLFxuICAgIGRpc3RhbmNlOiByYWRpYWxEaXN0YW5jZUZyb21DZW50ZXJcbiAgfTtcbn1cbmZ1bmN0aW9uIGRpc3RhbmNlQmV0d2VlblBvaW50cyhwdDEsIHB0Mikge1xuICByZXR1cm4gTWF0aC5zcXJ0KE1hdGgucG93KHB0Mi54IC0gcHQxLngsIDIpICsgTWF0aC5wb3cocHQyLnkgLSBwdDEueSwgMikpO1xufVxuZnVuY3Rpb24gX2FuZ2xlRGlmZihhLCBiKSB7XG4gIHJldHVybiAoYSAtIGIgKyBQSVRBVSkgJSBUQVUgLSBQSTtcbn1cbmZ1bmN0aW9uIF9ub3JtYWxpemVBbmdsZShhKSB7XG4gIHJldHVybiAoYSAlIFRBVSArIFRBVSkgJSBUQVU7XG59XG5mdW5jdGlvbiBfYW5nbGVCZXR3ZWVuKGFuZ2xlLCBzdGFydCwgZW5kLCBzYW1lQW5nbGVJc0Z1bGxDaXJjbGUpIHtcbiAgY29uc3QgYSA9IF9ub3JtYWxpemVBbmdsZShhbmdsZSk7XG4gIGNvbnN0IHMgPSBfbm9ybWFsaXplQW5nbGUoc3RhcnQpO1xuICBjb25zdCBlID0gX25vcm1hbGl6ZUFuZ2xlKGVuZCk7XG4gIGNvbnN0IGFuZ2xlVG9TdGFydCA9IF9ub3JtYWxpemVBbmdsZShzIC0gYSk7XG4gIGNvbnN0IGFuZ2xlVG9FbmQgPSBfbm9ybWFsaXplQW5nbGUoZSAtIGEpO1xuICBjb25zdCBzdGFydFRvQW5nbGUgPSBfbm9ybWFsaXplQW5nbGUoYSAtIHMpO1xuICBjb25zdCBlbmRUb0FuZ2xlID0gX25vcm1hbGl6ZUFuZ2xlKGEgLSBlKTtcbiAgcmV0dXJuIGEgPT09IHMgfHwgYSA9PT0gZSB8fCAoc2FtZUFuZ2xlSXNGdWxsQ2lyY2xlICYmIHMgPT09IGUpXG4gICAgfHwgKGFuZ2xlVG9TdGFydCA+IGFuZ2xlVG9FbmQgJiYgc3RhcnRUb0FuZ2xlIDwgZW5kVG9BbmdsZSk7XG59XG5mdW5jdGlvbiBfbGltaXRWYWx1ZSh2YWx1ZSwgbWluLCBtYXgpIHtcbiAgcmV0dXJuIE1hdGgubWF4KG1pbiwgTWF0aC5taW4obWF4LCB2YWx1ZSkpO1xufVxuZnVuY3Rpb24gX2ludDE2UmFuZ2UodmFsdWUpIHtcbiAgcmV0dXJuIF9saW1pdFZhbHVlKHZhbHVlLCAtMzI3NjgsIDMyNzY3KTtcbn1cbmZ1bmN0aW9uIF9pc0JldHdlZW4odmFsdWUsIHN0YXJ0LCBlbmQsIGVwc2lsb24gPSAxZS02KSB7XG4gIHJldHVybiB2YWx1ZSA+PSBNYXRoLm1pbihzdGFydCwgZW5kKSAtIGVwc2lsb24gJiYgdmFsdWUgPD0gTWF0aC5tYXgoc3RhcnQsIGVuZCkgKyBlcHNpbG9uO1xufVxuXG5jb25zdCBhdEVkZ2UgPSAodCkgPT4gdCA9PT0gMCB8fCB0ID09PSAxO1xuY29uc3QgZWxhc3RpY0luID0gKHQsIHMsIHApID0+IC0oTWF0aC5wb3coMiwgMTAgKiAodCAtPSAxKSkgKiBNYXRoLnNpbigodCAtIHMpICogVEFVIC8gcCkpO1xuY29uc3QgZWxhc3RpY091dCA9ICh0LCBzLCBwKSA9PiBNYXRoLnBvdygyLCAtMTAgKiB0KSAqIE1hdGguc2luKCh0IC0gcykgKiBUQVUgLyBwKSArIDE7XG5jb25zdCBlZmZlY3RzID0ge1xuICBsaW5lYXI6IHQgPT4gdCxcbiAgZWFzZUluUXVhZDogdCA9PiB0ICogdCxcbiAgZWFzZU91dFF1YWQ6IHQgPT4gLXQgKiAodCAtIDIpLFxuICBlYXNlSW5PdXRRdWFkOiB0ID0+ICgodCAvPSAwLjUpIDwgMSlcbiAgICA/IDAuNSAqIHQgKiB0XG4gICAgOiAtMC41ICogKCgtLXQpICogKHQgLSAyKSAtIDEpLFxuICBlYXNlSW5DdWJpYzogdCA9PiB0ICogdCAqIHQsXG4gIGVhc2VPdXRDdWJpYzogdCA9PiAodCAtPSAxKSAqIHQgKiB0ICsgMSxcbiAgZWFzZUluT3V0Q3ViaWM6IHQgPT4gKCh0IC89IDAuNSkgPCAxKVxuICAgID8gMC41ICogdCAqIHQgKiB0XG4gICAgOiAwLjUgKiAoKHQgLT0gMikgKiB0ICogdCArIDIpLFxuICBlYXNlSW5RdWFydDogdCA9PiB0ICogdCAqIHQgKiB0LFxuICBlYXNlT3V0UXVhcnQ6IHQgPT4gLSgodCAtPSAxKSAqIHQgKiB0ICogdCAtIDEpLFxuICBlYXNlSW5PdXRRdWFydDogdCA9PiAoKHQgLz0gMC41KSA8IDEpXG4gICAgPyAwLjUgKiB0ICogdCAqIHQgKiB0XG4gICAgOiAtMC41ICogKCh0IC09IDIpICogdCAqIHQgKiB0IC0gMiksXG4gIGVhc2VJblF1aW50OiB0ID0+IHQgKiB0ICogdCAqIHQgKiB0LFxuICBlYXNlT3V0UXVpbnQ6IHQgPT4gKHQgLT0gMSkgKiB0ICogdCAqIHQgKiB0ICsgMSxcbiAgZWFzZUluT3V0UXVpbnQ6IHQgPT4gKCh0IC89IDAuNSkgPCAxKVxuICAgID8gMC41ICogdCAqIHQgKiB0ICogdCAqIHRcbiAgICA6IDAuNSAqICgodCAtPSAyKSAqIHQgKiB0ICogdCAqIHQgKyAyKSxcbiAgZWFzZUluU2luZTogdCA9PiAtTWF0aC5jb3ModCAqIEhBTEZfUEkpICsgMSxcbiAgZWFzZU91dFNpbmU6IHQgPT4gTWF0aC5zaW4odCAqIEhBTEZfUEkpLFxuICBlYXNlSW5PdXRTaW5lOiB0ID0+IC0wLjUgKiAoTWF0aC5jb3MoUEkgKiB0KSAtIDEpLFxuICBlYXNlSW5FeHBvOiB0ID0+ICh0ID09PSAwKSA/IDAgOiBNYXRoLnBvdygyLCAxMCAqICh0IC0gMSkpLFxuICBlYXNlT3V0RXhwbzogdCA9PiAodCA9PT0gMSkgPyAxIDogLU1hdGgucG93KDIsIC0xMCAqIHQpICsgMSxcbiAgZWFzZUluT3V0RXhwbzogdCA9PiBhdEVkZ2UodCkgPyB0IDogdCA8IDAuNVxuICAgID8gMC41ICogTWF0aC5wb3coMiwgMTAgKiAodCAqIDIgLSAxKSlcbiAgICA6IDAuNSAqICgtTWF0aC5wb3coMiwgLTEwICogKHQgKiAyIC0gMSkpICsgMiksXG4gIGVhc2VJbkNpcmM6IHQgPT4gKHQgPj0gMSkgPyB0IDogLShNYXRoLnNxcnQoMSAtIHQgKiB0KSAtIDEpLFxuICBlYXNlT3V0Q2lyYzogdCA9PiBNYXRoLnNxcnQoMSAtICh0IC09IDEpICogdCksXG4gIGVhc2VJbk91dENpcmM6IHQgPT4gKCh0IC89IDAuNSkgPCAxKVxuICAgID8gLTAuNSAqIChNYXRoLnNxcnQoMSAtIHQgKiB0KSAtIDEpXG4gICAgOiAwLjUgKiAoTWF0aC5zcXJ0KDEgLSAodCAtPSAyKSAqIHQpICsgMSksXG4gIGVhc2VJbkVsYXN0aWM6IHQgPT4gYXRFZGdlKHQpID8gdCA6IGVsYXN0aWNJbih0LCAwLjA3NSwgMC4zKSxcbiAgZWFzZU91dEVsYXN0aWM6IHQgPT4gYXRFZGdlKHQpID8gdCA6IGVsYXN0aWNPdXQodCwgMC4wNzUsIDAuMyksXG4gIGVhc2VJbk91dEVsYXN0aWModCkge1xuICAgIGNvbnN0IHMgPSAwLjExMjU7XG4gICAgY29uc3QgcCA9IDAuNDU7XG4gICAgcmV0dXJuIGF0RWRnZSh0KSA/IHQgOlxuICAgICAgdCA8IDAuNVxuICAgICAgICA/IDAuNSAqIGVsYXN0aWNJbih0ICogMiwgcywgcClcbiAgICAgICAgOiAwLjUgKyAwLjUgKiBlbGFzdGljT3V0KHQgKiAyIC0gMSwgcywgcCk7XG4gIH0sXG4gIGVhc2VJbkJhY2sodCkge1xuICAgIGNvbnN0IHMgPSAxLjcwMTU4O1xuICAgIHJldHVybiB0ICogdCAqICgocyArIDEpICogdCAtIHMpO1xuICB9LFxuICBlYXNlT3V0QmFjayh0KSB7XG4gICAgY29uc3QgcyA9IDEuNzAxNTg7XG4gICAgcmV0dXJuICh0IC09IDEpICogdCAqICgocyArIDEpICogdCArIHMpICsgMTtcbiAgfSxcbiAgZWFzZUluT3V0QmFjayh0KSB7XG4gICAgbGV0IHMgPSAxLjcwMTU4O1xuICAgIGlmICgodCAvPSAwLjUpIDwgMSkge1xuICAgICAgcmV0dXJuIDAuNSAqICh0ICogdCAqICgoKHMgKj0gKDEuNTI1KSkgKyAxKSAqIHQgLSBzKSk7XG4gICAgfVxuICAgIHJldHVybiAwLjUgKiAoKHQgLT0gMikgKiB0ICogKCgocyAqPSAoMS41MjUpKSArIDEpICogdCArIHMpICsgMik7XG4gIH0sXG4gIGVhc2VJbkJvdW5jZTogdCA9PiAxIC0gZWZmZWN0cy5lYXNlT3V0Qm91bmNlKDEgLSB0KSxcbiAgZWFzZU91dEJvdW5jZSh0KSB7XG4gICAgY29uc3QgbSA9IDcuNTYyNTtcbiAgICBjb25zdCBkID0gMi43NTtcbiAgICBpZiAodCA8ICgxIC8gZCkpIHtcbiAgICAgIHJldHVybiBtICogdCAqIHQ7XG4gICAgfVxuICAgIGlmICh0IDwgKDIgLyBkKSkge1xuICAgICAgcmV0dXJuIG0gKiAodCAtPSAoMS41IC8gZCkpICogdCArIDAuNzU7XG4gICAgfVxuICAgIGlmICh0IDwgKDIuNSAvIGQpKSB7XG4gICAgICByZXR1cm4gbSAqICh0IC09ICgyLjI1IC8gZCkpICogdCArIDAuOTM3NTtcbiAgICB9XG4gICAgcmV0dXJuIG0gKiAodCAtPSAoMi42MjUgLyBkKSkgKiB0ICsgMC45ODQzNzU7XG4gIH0sXG4gIGVhc2VJbk91dEJvdW5jZTogdCA9PiAodCA8IDAuNSlcbiAgICA/IGVmZmVjdHMuZWFzZUluQm91bmNlKHQgKiAyKSAqIDAuNVxuICAgIDogZWZmZWN0cy5lYXNlT3V0Qm91bmNlKHQgKiAyIC0gMSkgKiAwLjUgKyAwLjUsXG59O1xuXG4vKiFcbiAqIEBrdXJrbGUvY29sb3IgdjAuMS45XG4gKiBodHRwczovL2dpdGh1Yi5jb20va3Vya2xlL2NvbG9yI3JlYWRtZVxuICogKGMpIDIwMjAgSnVra2EgS3Vya2VsYVxuICogUmVsZWFzZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlXG4gKi9cbmNvbnN0IG1hcCA9IHswOiAwLCAxOiAxLCAyOiAyLCAzOiAzLCA0OiA0LCA1OiA1LCA2OiA2LCA3OiA3LCA4OiA4LCA5OiA5LCBBOiAxMCwgQjogMTEsIEM6IDEyLCBEOiAxMywgRTogMTQsIEY6IDE1LCBhOiAxMCwgYjogMTEsIGM6IDEyLCBkOiAxMywgZTogMTQsIGY6IDE1fTtcbmNvbnN0IGhleCA9ICcwMTIzNDU2Nzg5QUJDREVGJztcbmNvbnN0IGgxID0gKGIpID0+IGhleFtiICYgMHhGXTtcbmNvbnN0IGgyID0gKGIpID0+IGhleFsoYiAmIDB4RjApID4+IDRdICsgaGV4W2IgJiAweEZdO1xuY29uc3QgZXEgPSAoYikgPT4gKCgoYiAmIDB4RjApID4+IDQpID09PSAoYiAmIDB4RikpO1xuZnVuY3Rpb24gaXNTaG9ydCh2KSB7XG5cdHJldHVybiBlcSh2LnIpICYmIGVxKHYuZykgJiYgZXEodi5iKSAmJiBlcSh2LmEpO1xufVxuZnVuY3Rpb24gaGV4UGFyc2Uoc3RyKSB7XG5cdHZhciBsZW4gPSBzdHIubGVuZ3RoO1xuXHR2YXIgcmV0O1xuXHRpZiAoc3RyWzBdID09PSAnIycpIHtcblx0XHRpZiAobGVuID09PSA0IHx8IGxlbiA9PT0gNSkge1xuXHRcdFx0cmV0ID0ge1xuXHRcdFx0XHRyOiAyNTUgJiBtYXBbc3RyWzFdXSAqIDE3LFxuXHRcdFx0XHRnOiAyNTUgJiBtYXBbc3RyWzJdXSAqIDE3LFxuXHRcdFx0XHRiOiAyNTUgJiBtYXBbc3RyWzNdXSAqIDE3LFxuXHRcdFx0XHRhOiBsZW4gPT09IDUgPyBtYXBbc3RyWzRdXSAqIDE3IDogMjU1XG5cdFx0XHR9O1xuXHRcdH0gZWxzZSBpZiAobGVuID09PSA3IHx8IGxlbiA9PT0gOSkge1xuXHRcdFx0cmV0ID0ge1xuXHRcdFx0XHRyOiBtYXBbc3RyWzFdXSA8PCA0IHwgbWFwW3N0clsyXV0sXG5cdFx0XHRcdGc6IG1hcFtzdHJbM11dIDw8IDQgfCBtYXBbc3RyWzRdXSxcblx0XHRcdFx0YjogbWFwW3N0cls1XV0gPDwgNCB8IG1hcFtzdHJbNl1dLFxuXHRcdFx0XHRhOiBsZW4gPT09IDkgPyAobWFwW3N0cls3XV0gPDwgNCB8IG1hcFtzdHJbOF1dKSA6IDI1NVxuXHRcdFx0fTtcblx0XHR9XG5cdH1cblx0cmV0dXJuIHJldDtcbn1cbmZ1bmN0aW9uIGhleFN0cmluZyh2KSB7XG5cdHZhciBmID0gaXNTaG9ydCh2KSA/IGgxIDogaDI7XG5cdHJldHVybiB2XG5cdFx0PyAnIycgKyBmKHYucikgKyBmKHYuZykgKyBmKHYuYikgKyAodi5hIDwgMjU1ID8gZih2LmEpIDogJycpXG5cdFx0OiB2O1xufVxuZnVuY3Rpb24gcm91bmQodikge1xuXHRyZXR1cm4gdiArIDAuNSB8IDA7XG59XG5jb25zdCBsaW0gPSAodiwgbCwgaCkgPT4gTWF0aC5tYXgoTWF0aC5taW4odiwgaCksIGwpO1xuZnVuY3Rpb24gcDJiKHYpIHtcblx0cmV0dXJuIGxpbShyb3VuZCh2ICogMi41NSksIDAsIDI1NSk7XG59XG5mdW5jdGlvbiBuMmIodikge1xuXHRyZXR1cm4gbGltKHJvdW5kKHYgKiAyNTUpLCAwLCAyNTUpO1xufVxuZnVuY3Rpb24gYjJuKHYpIHtcblx0cmV0dXJuIGxpbShyb3VuZCh2IC8gMi41NSkgLyAxMDAsIDAsIDEpO1xufVxuZnVuY3Rpb24gbjJwKHYpIHtcblx0cmV0dXJuIGxpbShyb3VuZCh2ICogMTAwKSwgMCwgMTAwKTtcbn1cbmNvbnN0IFJHQl9SRSA9IC9ecmdiYT9cXChcXHMqKFstKy5cXGRdKykoJSk/W1xccyxdKyhbLSsuZVxcZF0rKSglKT9bXFxzLF0rKFstKy5lXFxkXSspKCUpPyg/OltcXHMsL10rKFstKy5lXFxkXSspKCUpPyk/XFxzKlxcKSQvO1xuZnVuY3Rpb24gcmdiUGFyc2Uoc3RyKSB7XG5cdGNvbnN0IG0gPSBSR0JfUkUuZXhlYyhzdHIpO1xuXHRsZXQgYSA9IDI1NTtcblx0bGV0IHIsIGcsIGI7XG5cdGlmICghbSkge1xuXHRcdHJldHVybjtcblx0fVxuXHRpZiAobVs3XSAhPT0gcikge1xuXHRcdGNvbnN0IHYgPSArbVs3XTtcblx0XHRhID0gMjU1ICYgKG1bOF0gPyBwMmIodikgOiB2ICogMjU1KTtcblx0fVxuXHRyID0gK21bMV07XG5cdGcgPSArbVszXTtcblx0YiA9ICttWzVdO1xuXHRyID0gMjU1ICYgKG1bMl0gPyBwMmIocikgOiByKTtcblx0ZyA9IDI1NSAmIChtWzRdID8gcDJiKGcpIDogZyk7XG5cdGIgPSAyNTUgJiAobVs2XSA/IHAyYihiKSA6IGIpO1xuXHRyZXR1cm4ge1xuXHRcdHI6IHIsXG5cdFx0ZzogZyxcblx0XHRiOiBiLFxuXHRcdGE6IGFcblx0fTtcbn1cbmZ1bmN0aW9uIHJnYlN0cmluZyh2KSB7XG5cdHJldHVybiB2ICYmIChcblx0XHR2LmEgPCAyNTVcblx0XHRcdD8gYHJnYmEoJHt2LnJ9LCAke3YuZ30sICR7di5ifSwgJHtiMm4odi5hKX0pYFxuXHRcdFx0OiBgcmdiKCR7di5yfSwgJHt2Lmd9LCAke3YuYn0pYFxuXHQpO1xufVxuY29uc3QgSFVFX1JFID0gL14oaHNsYT98aHdifGhzdilcXChcXHMqKFstKy5lXFxkXSspKD86ZGVnKT9bXFxzLF0rKFstKy5lXFxkXSspJVtcXHMsXSsoWy0rLmVcXGRdKyklKD86W1xccyxdKyhbLSsuZVxcZF0rKSglKT8pP1xccypcXCkkLztcbmZ1bmN0aW9uIGhzbDJyZ2JuKGgsIHMsIGwpIHtcblx0Y29uc3QgYSA9IHMgKiBNYXRoLm1pbihsLCAxIC0gbCk7XG5cdGNvbnN0IGYgPSAobiwgayA9IChuICsgaCAvIDMwKSAlIDEyKSA9PiBsIC0gYSAqIE1hdGgubWF4KE1hdGgubWluKGsgLSAzLCA5IC0gaywgMSksIC0xKTtcblx0cmV0dXJuIFtmKDApLCBmKDgpLCBmKDQpXTtcbn1cbmZ1bmN0aW9uIGhzdjJyZ2JuKGgsIHMsIHYpIHtcblx0Y29uc3QgZiA9IChuLCBrID0gKG4gKyBoIC8gNjApICUgNikgPT4gdiAtIHYgKiBzICogTWF0aC5tYXgoTWF0aC5taW4oaywgNCAtIGssIDEpLCAwKTtcblx0cmV0dXJuIFtmKDUpLCBmKDMpLCBmKDEpXTtcbn1cbmZ1bmN0aW9uIGh3YjJyZ2JuKGgsIHcsIGIpIHtcblx0Y29uc3QgcmdiID0gaHNsMnJnYm4oaCwgMSwgMC41KTtcblx0bGV0IGk7XG5cdGlmICh3ICsgYiA+IDEpIHtcblx0XHRpID0gMSAvICh3ICsgYik7XG5cdFx0dyAqPSBpO1xuXHRcdGIgKj0gaTtcblx0fVxuXHRmb3IgKGkgPSAwOyBpIDwgMzsgaSsrKSB7XG5cdFx0cmdiW2ldICo9IDEgLSB3IC0gYjtcblx0XHRyZ2JbaV0gKz0gdztcblx0fVxuXHRyZXR1cm4gcmdiO1xufVxuZnVuY3Rpb24gcmdiMmhzbCh2KSB7XG5cdGNvbnN0IHJhbmdlID0gMjU1O1xuXHRjb25zdCByID0gdi5yIC8gcmFuZ2U7XG5cdGNvbnN0IGcgPSB2LmcgLyByYW5nZTtcblx0Y29uc3QgYiA9IHYuYiAvIHJhbmdlO1xuXHRjb25zdCBtYXggPSBNYXRoLm1heChyLCBnLCBiKTtcblx0Y29uc3QgbWluID0gTWF0aC5taW4ociwgZywgYik7XG5cdGNvbnN0IGwgPSAobWF4ICsgbWluKSAvIDI7XG5cdGxldCBoLCBzLCBkO1xuXHRpZiAobWF4ICE9PSBtaW4pIHtcblx0XHRkID0gbWF4IC0gbWluO1xuXHRcdHMgPSBsID4gMC41ID8gZCAvICgyIC0gbWF4IC0gbWluKSA6IGQgLyAobWF4ICsgbWluKTtcblx0XHRoID0gbWF4ID09PSByXG5cdFx0XHQ/ICgoZyAtIGIpIC8gZCkgKyAoZyA8IGIgPyA2IDogMClcblx0XHRcdDogbWF4ID09PSBnXG5cdFx0XHRcdD8gKGIgLSByKSAvIGQgKyAyXG5cdFx0XHRcdDogKHIgLSBnKSAvIGQgKyA0O1xuXHRcdGggPSBoICogNjAgKyAwLjU7XG5cdH1cblx0cmV0dXJuIFtoIHwgMCwgcyB8fCAwLCBsXTtcbn1cbmZ1bmN0aW9uIGNhbGxuKGYsIGEsIGIsIGMpIHtcblx0cmV0dXJuIChcblx0XHRBcnJheS5pc0FycmF5KGEpXG5cdFx0XHQ/IGYoYVswXSwgYVsxXSwgYVsyXSlcblx0XHRcdDogZihhLCBiLCBjKVxuXHQpLm1hcChuMmIpO1xufVxuZnVuY3Rpb24gaHNsMnJnYihoLCBzLCBsKSB7XG5cdHJldHVybiBjYWxsbihoc2wycmdibiwgaCwgcywgbCk7XG59XG5mdW5jdGlvbiBod2IycmdiKGgsIHcsIGIpIHtcblx0cmV0dXJuIGNhbGxuKGh3YjJyZ2JuLCBoLCB3LCBiKTtcbn1cbmZ1bmN0aW9uIGhzdjJyZ2IoaCwgcywgdikge1xuXHRyZXR1cm4gY2FsbG4oaHN2MnJnYm4sIGgsIHMsIHYpO1xufVxuZnVuY3Rpb24gaHVlKGgpIHtcblx0cmV0dXJuIChoICUgMzYwICsgMzYwKSAlIDM2MDtcbn1cbmZ1bmN0aW9uIGh1ZVBhcnNlKHN0cikge1xuXHRjb25zdCBtID0gSFVFX1JFLmV4ZWMoc3RyKTtcblx0bGV0IGEgPSAyNTU7XG5cdGxldCB2O1xuXHRpZiAoIW0pIHtcblx0XHRyZXR1cm47XG5cdH1cblx0aWYgKG1bNV0gIT09IHYpIHtcblx0XHRhID0gbVs2XSA/IHAyYigrbVs1XSkgOiBuMmIoK21bNV0pO1xuXHR9XG5cdGNvbnN0IGggPSBodWUoK21bMl0pO1xuXHRjb25zdCBwMSA9ICttWzNdIC8gMTAwO1xuXHRjb25zdCBwMiA9ICttWzRdIC8gMTAwO1xuXHRpZiAobVsxXSA9PT0gJ2h3YicpIHtcblx0XHR2ID0gaHdiMnJnYihoLCBwMSwgcDIpO1xuXHR9IGVsc2UgaWYgKG1bMV0gPT09ICdoc3YnKSB7XG5cdFx0diA9IGhzdjJyZ2IoaCwgcDEsIHAyKTtcblx0fSBlbHNlIHtcblx0XHR2ID0gaHNsMnJnYihoLCBwMSwgcDIpO1xuXHR9XG5cdHJldHVybiB7XG5cdFx0cjogdlswXSxcblx0XHRnOiB2WzFdLFxuXHRcdGI6IHZbMl0sXG5cdFx0YTogYVxuXHR9O1xufVxuZnVuY3Rpb24gcm90YXRlKHYsIGRlZykge1xuXHR2YXIgaCA9IHJnYjJoc2wodik7XG5cdGhbMF0gPSBodWUoaFswXSArIGRlZyk7XG5cdGggPSBoc2wycmdiKGgpO1xuXHR2LnIgPSBoWzBdO1xuXHR2LmcgPSBoWzFdO1xuXHR2LmIgPSBoWzJdO1xufVxuZnVuY3Rpb24gaHNsU3RyaW5nKHYpIHtcblx0aWYgKCF2KSB7XG5cdFx0cmV0dXJuO1xuXHR9XG5cdGNvbnN0IGEgPSByZ2IyaHNsKHYpO1xuXHRjb25zdCBoID0gYVswXTtcblx0Y29uc3QgcyA9IG4ycChhWzFdKTtcblx0Y29uc3QgbCA9IG4ycChhWzJdKTtcblx0cmV0dXJuIHYuYSA8IDI1NVxuXHRcdD8gYGhzbGEoJHtofSwgJHtzfSUsICR7bH0lLCAke2Iybih2LmEpfSlgXG5cdFx0OiBgaHNsKCR7aH0sICR7c30lLCAke2x9JSlgO1xufVxuY29uc3QgbWFwJDEgPSB7XG5cdHg6ICdkYXJrJyxcblx0WjogJ2xpZ2h0Jyxcblx0WTogJ3JlJyxcblx0WDogJ2JsdScsXG5cdFc6ICdncicsXG5cdFY6ICdtZWRpdW0nLFxuXHRVOiAnc2xhdGUnLFxuXHRBOiAnZWUnLFxuXHRUOiAnb2wnLFxuXHRTOiAnb3InLFxuXHRCOiAncmEnLFxuXHRDOiAnbGF0ZWcnLFxuXHREOiAnaWdodHMnLFxuXHRSOiAnaW4nLFxuXHRROiAndHVycXVvaXMnLFxuXHRFOiAnaGknLFxuXHRQOiAncm8nLFxuXHRPOiAnYWwnLFxuXHROOiAnbGUnLFxuXHRNOiAnZGUnLFxuXHRMOiAneWVsbG8nLFxuXHRGOiAnZW4nLFxuXHRLOiAnY2gnLFxuXHRHOiAnYXJrcycsXG5cdEg6ICdlYScsXG5cdEk6ICdpZ2h0ZycsXG5cdEo6ICd3aCdcbn07XG5jb25zdCBuYW1lcyA9IHtcblx0T2ljZVhlOiAnZjBmOGZmJyxcblx0YW50aXF1ZXdFdGU6ICdmYWViZDcnLFxuXHRhcXVhOiAnZmZmZicsXG5cdGFxdWFtYXJSZTogJzdmZmZkNCcsXG5cdGF6dVk6ICdmMGZmZmYnLFxuXHRiZWlnZTogJ2Y1ZjVkYycsXG5cdGJpc3F1ZTogJ2ZmZTRjNCcsXG5cdGJsYWNrOiAnMCcsXG5cdGJsYW5LZWRPbW9uZDogJ2ZmZWJjZCcsXG5cdFhlOiAnZmYnLFxuXHRYZXZpVGV0OiAnOGEyYmUyJyxcblx0YlB3bjogJ2E1MmEyYScsXG5cdGJ1cmx5d29vZDogJ2RlYjg4NycsXG5cdGNhTXRYZTogJzVmOWVhMCcsXG5cdEthcnRZdXNlOiAnN2ZmZjAwJyxcblx0S29jVGF0ZTogJ2QyNjkxZScsXG5cdGNTTzogJ2ZmN2Y1MCcsXG5cdGNTbmZsb3dlclhlOiAnNjQ5NWVkJyxcblx0Y1Nuc2lsazogJ2ZmZjhkYycsXG5cdGNyaW1zb246ICdkYzE0M2MnLFxuXHRjeWFuOiAnZmZmZicsXG5cdHhYZTogJzhiJyxcblx0eGN5YW46ICc4YjhiJyxcblx0eGdUTW5QZDogJ2I4ODYwYicsXG5cdHhXYXk6ICdhOWE5YTknLFxuXHR4Z1lGOiAnNjQwMCcsXG5cdHhnWXk6ICdhOWE5YTknLFxuXHR4a2hha2k6ICdiZGI3NmInLFxuXHR4bWFnRnRhOiAnOGIwMDhiJyxcblx0eFRpdmVnWUY6ICc1NTZiMmYnLFxuXHR4U2FuZ2U6ICdmZjhjMDAnLFxuXHR4U2NFZDogJzk5MzJjYycsXG5cdHhZZDogJzhiMDAwMCcsXG5cdHhzT21vbjogJ2U5OTY3YScsXG5cdHhzSGdZRjogJzhmYmM4ZicsXG5cdHhVWGU6ICc0ODNkOGInLFxuXHR4VVdheTogJzJmNGY0ZicsXG5cdHhVZ1l5OiAnMmY0ZjRmJyxcblx0eFFlOiAnY2VkMScsXG5cdHh2aVRldDogJzk0MDBkMycsXG5cdGRBcHBSazogJ2ZmMTQ5MycsXG5cdGRBcHNreVhlOiAnYmZmZicsXG5cdGRpbVdheTogJzY5Njk2OScsXG5cdGRpbWdZeTogJzY5Njk2OScsXG5cdGRvZGdlclhlOiAnMWU5MGZmJyxcblx0ZmlZYnJpY2s6ICdiMjIyMjInLFxuXHRmbFNPd0V0ZTogJ2ZmZmFmMCcsXG5cdGZvWXN0V0FuOiAnMjI4YjIyJyxcblx0ZnVLc2lhOiAnZmYwMGZmJyxcblx0Z2FSc2JTbzogJ2RjZGNkYycsXG5cdGdob3N0d0V0ZTogJ2Y4ZjhmZicsXG5cdGdUZDogJ2ZmZDcwMCcsXG5cdGdUTW5QZDogJ2RhYTUyMCcsXG5cdFdheTogJzgwODA4MCcsXG5cdGdZRjogJzgwMDAnLFxuXHRnWUZMdzogJ2FkZmYyZicsXG5cdGdZeTogJzgwODA4MCcsXG5cdGhvbmV5TXc6ICdmMGZmZjAnLFxuXHRob3RwUms6ICdmZjY5YjQnLFxuXHRSZGlhbllkOiAnY2Q1YzVjJyxcblx0UmRpZ286ICc0YjAwODInLFxuXHRpdlN5OiAnZmZmZmYwJyxcblx0a2hha2k6ICdmMGU2OGMnLFxuXHRsYXZGTXI6ICdlNmU2ZmEnLFxuXHRsYXZGTXJYc2g6ICdmZmYwZjUnLFxuXHRsYXduZ1lGOiAnN2NmYzAwJyxcblx0Tm1vbmNFZmZvbjogJ2ZmZmFjZCcsXG5cdFpYZTogJ2FkZDhlNicsXG5cdFpjU086ICdmMDgwODAnLFxuXHRaY3lhbjogJ2UwZmZmZicsXG5cdFpnVE1uUGRMdzogJ2ZhZmFkMicsXG5cdFpXYXk6ICdkM2QzZDMnLFxuXHRaZ1lGOiAnOTBlZTkwJyxcblx0WmdZeTogJ2QzZDNkMycsXG5cdFpwUms6ICdmZmI2YzEnLFxuXHRac09tb246ICdmZmEwN2EnLFxuXHRac0hnWUY6ICcyMGIyYWEnLFxuXHRac2t5WGU6ICc4N2NlZmEnLFxuXHRaVVdheTogJzc3ODg5OScsXG5cdFpVZ1l5OiAnNzc4ODk5Jyxcblx0WnN0QWxYZTogJ2IwYzRkZScsXG5cdFpMdzogJ2ZmZmZlMCcsXG5cdGxpbWU6ICdmZjAwJyxcblx0bGltZWdZRjogJzMyY2QzMicsXG5cdGxSRjogJ2ZhZjBlNicsXG5cdG1hZ0Z0YTogJ2ZmMDBmZicsXG5cdG1hUG9uOiAnODAwMDAwJyxcblx0VmFxdWFtYXJSZTogJzY2Y2RhYScsXG5cdFZYZTogJ2NkJyxcblx0VlNjRWQ6ICdiYTU1ZDMnLFxuXHRWcHVycE46ICc5MzcwZGInLFxuXHRWc0hnWUY6ICczY2IzNzEnLFxuXHRWVVhlOiAnN2I2OGVlJyxcblx0VnNwclJnZ1lGOiAnZmE5YScsXG5cdFZRZTogJzQ4ZDFjYycsXG5cdFZ2aVRldFlkOiAnYzcxNTg1Jyxcblx0bWlkbmlnaHRYZTogJzE5MTk3MCcsXG5cdG1SdGNZYW06ICdmNWZmZmEnLFxuXHRtaXN0eVBzZTogJ2ZmZTRlMScsXG5cdG1vY2Nhc1I6ICdmZmU0YjUnLFxuXHRuYXZham93RXRlOiAnZmZkZWFkJyxcblx0bmF2eTogJzgwJyxcblx0VGRsYWNlOiAnZmRmNWU2Jyxcblx0VGl2ZTogJzgwODAwMCcsXG5cdFRpdmVkQmI6ICc2YjhlMjMnLFxuXHRTYW5nZTogJ2ZmYTUwMCcsXG5cdFNhbmdlWWQ6ICdmZjQ1MDAnLFxuXHRTY0VkOiAnZGE3MGQ2Jyxcblx0cE9lZ1RNblBkOiAnZWVlOGFhJyxcblx0cE9lZ1lGOiAnOThmYjk4Jyxcblx0cE9lUWU6ICdhZmVlZWUnLFxuXHRwT2V2aVRldFlkOiAnZGI3MDkzJyxcblx0cGFwYXlhd0VwOiAnZmZlZmQ1Jyxcblx0cEhLcHVmZjogJ2ZmZGFiOScsXG5cdHBlcnU6ICdjZDg1M2YnLFxuXHRwUms6ICdmZmMwY2InLFxuXHRwbHVtOiAnZGRhMGRkJyxcblx0cG93TXJYZTogJ2IwZTBlNicsXG5cdHB1cnBOOiAnODAwMDgwJyxcblx0WWJlY2NhcHVycE46ICc2NjMzOTknLFxuXHRZZDogJ2ZmMDAwMCcsXG5cdFBzeWJyb3duOiAnYmM4ZjhmJyxcblx0UHlPWGU6ICc0MTY5ZTEnLFxuXHRzYWRkTmJQd246ICc4YjQ1MTMnLFxuXHRzT21vbjogJ2ZhODA3MicsXG5cdHNhbmR5YlB3bjogJ2Y0YTQ2MCcsXG5cdHNIZ1lGOiAnMmU4YjU3Jyxcblx0c0hzaGVsbDogJ2ZmZjVlZScsXG5cdHNpRm5hOiAnYTA1MjJkJyxcblx0c2lsdmVyOiAnYzBjMGMwJyxcblx0c2t5WGU6ICc4N2NlZWInLFxuXHRVWGU6ICc2YTVhY2QnLFxuXHRVV2F5OiAnNzA4MDkwJyxcblx0VWdZeTogJzcwODA5MCcsXG5cdHNub3c6ICdmZmZhZmEnLFxuXHRzcHJSZ2dZRjogJ2ZmN2YnLFxuXHRzdEFsWGU6ICc0NjgyYjQnLFxuXHR0YW46ICdkMmI0OGMnLFxuXHR0ZU86ICc4MDgwJyxcblx0dEVzdE46ICdkOGJmZDgnLFxuXHR0b21hdG86ICdmZjYzNDcnLFxuXHRRZTogJzQwZTBkMCcsXG5cdHZpVGV0OiAnZWU4MmVlJyxcblx0Skh0OiAnZjVkZWIzJyxcblx0d0V0ZTogJ2ZmZmZmZicsXG5cdHdFdGVzbW9rZTogJ2Y1ZjVmNScsXG5cdEx3OiAnZmZmZjAwJyxcblx0THdnWUY6ICc5YWNkMzInXG59O1xuZnVuY3Rpb24gdW5wYWNrKCkge1xuXHRjb25zdCB1bnBhY2tlZCA9IHt9O1xuXHRjb25zdCBrZXlzID0gT2JqZWN0LmtleXMobmFtZXMpO1xuXHRjb25zdCB0a2V5cyA9IE9iamVjdC5rZXlzKG1hcCQxKTtcblx0bGV0IGksIGosIGssIG9rLCBuaztcblx0Zm9yIChpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcblx0XHRvayA9IG5rID0ga2V5c1tpXTtcblx0XHRmb3IgKGogPSAwOyBqIDwgdGtleXMubGVuZ3RoOyBqKyspIHtcblx0XHRcdGsgPSB0a2V5c1tqXTtcblx0XHRcdG5rID0gbmsucmVwbGFjZShrLCBtYXAkMVtrXSk7XG5cdFx0fVxuXHRcdGsgPSBwYXJzZUludChuYW1lc1tva10sIDE2KTtcblx0XHR1bnBhY2tlZFtua10gPSBbayA+PiAxNiAmIDB4RkYsIGsgPj4gOCAmIDB4RkYsIGsgJiAweEZGXTtcblx0fVxuXHRyZXR1cm4gdW5wYWNrZWQ7XG59XG5sZXQgbmFtZXMkMTtcbmZ1bmN0aW9uIG5hbWVQYXJzZShzdHIpIHtcblx0aWYgKCFuYW1lcyQxKSB7XG5cdFx0bmFtZXMkMSA9IHVucGFjaygpO1xuXHRcdG5hbWVzJDEudHJhbnNwYXJlbnQgPSBbMCwgMCwgMCwgMF07XG5cdH1cblx0Y29uc3QgYSA9IG5hbWVzJDFbc3RyLnRvTG93ZXJDYXNlKCldO1xuXHRyZXR1cm4gYSAmJiB7XG5cdFx0cjogYVswXSxcblx0XHRnOiBhWzFdLFxuXHRcdGI6IGFbMl0sXG5cdFx0YTogYS5sZW5ndGggPT09IDQgPyBhWzNdIDogMjU1XG5cdH07XG59XG5mdW5jdGlvbiBtb2RIU0wodiwgaSwgcmF0aW8pIHtcblx0aWYgKHYpIHtcblx0XHRsZXQgdG1wID0gcmdiMmhzbCh2KTtcblx0XHR0bXBbaV0gPSBNYXRoLm1heCgwLCBNYXRoLm1pbih0bXBbaV0gKyB0bXBbaV0gKiByYXRpbywgaSA9PT0gMCA/IDM2MCA6IDEpKTtcblx0XHR0bXAgPSBoc2wycmdiKHRtcCk7XG5cdFx0di5yID0gdG1wWzBdO1xuXHRcdHYuZyA9IHRtcFsxXTtcblx0XHR2LmIgPSB0bXBbMl07XG5cdH1cbn1cbmZ1bmN0aW9uIGNsb25lKHYsIHByb3RvKSB7XG5cdHJldHVybiB2ID8gT2JqZWN0LmFzc2lnbihwcm90byB8fCB7fSwgdikgOiB2O1xufVxuZnVuY3Rpb24gZnJvbU9iamVjdChpbnB1dCkge1xuXHR2YXIgdiA9IHtyOiAwLCBnOiAwLCBiOiAwLCBhOiAyNTV9O1xuXHRpZiAoQXJyYXkuaXNBcnJheShpbnB1dCkpIHtcblx0XHRpZiAoaW5wdXQubGVuZ3RoID49IDMpIHtcblx0XHRcdHYgPSB7cjogaW5wdXRbMF0sIGc6IGlucHV0WzFdLCBiOiBpbnB1dFsyXSwgYTogMjU1fTtcblx0XHRcdGlmIChpbnB1dC5sZW5ndGggPiAzKSB7XG5cdFx0XHRcdHYuYSA9IG4yYihpbnB1dFszXSk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9IGVsc2Uge1xuXHRcdHYgPSBjbG9uZShpbnB1dCwge3I6IDAsIGc6IDAsIGI6IDAsIGE6IDF9KTtcblx0XHR2LmEgPSBuMmIodi5hKTtcblx0fVxuXHRyZXR1cm4gdjtcbn1cbmZ1bmN0aW9uIGZ1bmN0aW9uUGFyc2Uoc3RyKSB7XG5cdGlmIChzdHIuY2hhckF0KDApID09PSAncicpIHtcblx0XHRyZXR1cm4gcmdiUGFyc2Uoc3RyKTtcblx0fVxuXHRyZXR1cm4gaHVlUGFyc2Uoc3RyKTtcbn1cbmNsYXNzIENvbG9yIHtcblx0Y29uc3RydWN0b3IoaW5wdXQpIHtcblx0XHRpZiAoaW5wdXQgaW5zdGFuY2VvZiBDb2xvcikge1xuXHRcdFx0cmV0dXJuIGlucHV0O1xuXHRcdH1cblx0XHRjb25zdCB0eXBlID0gdHlwZW9mIGlucHV0O1xuXHRcdGxldCB2O1xuXHRcdGlmICh0eXBlID09PSAnb2JqZWN0Jykge1xuXHRcdFx0diA9IGZyb21PYmplY3QoaW5wdXQpO1xuXHRcdH0gZWxzZSBpZiAodHlwZSA9PT0gJ3N0cmluZycpIHtcblx0XHRcdHYgPSBoZXhQYXJzZShpbnB1dCkgfHwgbmFtZVBhcnNlKGlucHV0KSB8fCBmdW5jdGlvblBhcnNlKGlucHV0KTtcblx0XHR9XG5cdFx0dGhpcy5fcmdiID0gdjtcblx0XHR0aGlzLl92YWxpZCA9ICEhdjtcblx0fVxuXHRnZXQgdmFsaWQoKSB7XG5cdFx0cmV0dXJuIHRoaXMuX3ZhbGlkO1xuXHR9XG5cdGdldCByZ2IoKSB7XG5cdFx0dmFyIHYgPSBjbG9uZSh0aGlzLl9yZ2IpO1xuXHRcdGlmICh2KSB7XG5cdFx0XHR2LmEgPSBiMm4odi5hKTtcblx0XHR9XG5cdFx0cmV0dXJuIHY7XG5cdH1cblx0c2V0IHJnYihvYmopIHtcblx0XHR0aGlzLl9yZ2IgPSBmcm9tT2JqZWN0KG9iaik7XG5cdH1cblx0cmdiU3RyaW5nKCkge1xuXHRcdHJldHVybiB0aGlzLl92YWxpZCA/IHJnYlN0cmluZyh0aGlzLl9yZ2IpIDogdGhpcy5fcmdiO1xuXHR9XG5cdGhleFN0cmluZygpIHtcblx0XHRyZXR1cm4gdGhpcy5fdmFsaWQgPyBoZXhTdHJpbmcodGhpcy5fcmdiKSA6IHRoaXMuX3JnYjtcblx0fVxuXHRoc2xTdHJpbmcoKSB7XG5cdFx0cmV0dXJuIHRoaXMuX3ZhbGlkID8gaHNsU3RyaW5nKHRoaXMuX3JnYikgOiB0aGlzLl9yZ2I7XG5cdH1cblx0bWl4KGNvbG9yLCB3ZWlnaHQpIHtcblx0XHRjb25zdCBtZSA9IHRoaXM7XG5cdFx0aWYgKGNvbG9yKSB7XG5cdFx0XHRjb25zdCBjMSA9IG1lLnJnYjtcblx0XHRcdGNvbnN0IGMyID0gY29sb3IucmdiO1xuXHRcdFx0bGV0IHcyO1xuXHRcdFx0Y29uc3QgcCA9IHdlaWdodCA9PT0gdzIgPyAwLjUgOiB3ZWlnaHQ7XG5cdFx0XHRjb25zdCB3ID0gMiAqIHAgLSAxO1xuXHRcdFx0Y29uc3QgYSA9IGMxLmEgLSBjMi5hO1xuXHRcdFx0Y29uc3QgdzEgPSAoKHcgKiBhID09PSAtMSA/IHcgOiAodyArIGEpIC8gKDEgKyB3ICogYSkpICsgMSkgLyAyLjA7XG5cdFx0XHR3MiA9IDEgLSB3MTtcblx0XHRcdGMxLnIgPSAweEZGICYgdzEgKiBjMS5yICsgdzIgKiBjMi5yICsgMC41O1xuXHRcdFx0YzEuZyA9IDB4RkYgJiB3MSAqIGMxLmcgKyB3MiAqIGMyLmcgKyAwLjU7XG5cdFx0XHRjMS5iID0gMHhGRiAmIHcxICogYzEuYiArIHcyICogYzIuYiArIDAuNTtcblx0XHRcdGMxLmEgPSBwICogYzEuYSArICgxIC0gcCkgKiBjMi5hO1xuXHRcdFx0bWUucmdiID0gYzE7XG5cdFx0fVxuXHRcdHJldHVybiBtZTtcblx0fVxuXHRjbG9uZSgpIHtcblx0XHRyZXR1cm4gbmV3IENvbG9yKHRoaXMucmdiKTtcblx0fVxuXHRhbHBoYShhKSB7XG5cdFx0dGhpcy5fcmdiLmEgPSBuMmIoYSk7XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH1cblx0Y2xlYXJlcihyYXRpbykge1xuXHRcdGNvbnN0IHJnYiA9IHRoaXMuX3JnYjtcblx0XHRyZ2IuYSAqPSAxIC0gcmF0aW87XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH1cblx0Z3JleXNjYWxlKCkge1xuXHRcdGNvbnN0IHJnYiA9IHRoaXMuX3JnYjtcblx0XHRjb25zdCB2YWwgPSByb3VuZChyZ2IuciAqIDAuMyArIHJnYi5nICogMC41OSArIHJnYi5iICogMC4xMSk7XG5cdFx0cmdiLnIgPSByZ2IuZyA9IHJnYi5iID0gdmFsO1xuXHRcdHJldHVybiB0aGlzO1xuXHR9XG5cdG9wYXF1ZXIocmF0aW8pIHtcblx0XHRjb25zdCByZ2IgPSB0aGlzLl9yZ2I7XG5cdFx0cmdiLmEgKj0gMSArIHJhdGlvO1xuXHRcdHJldHVybiB0aGlzO1xuXHR9XG5cdG5lZ2F0ZSgpIHtcblx0XHRjb25zdCB2ID0gdGhpcy5fcmdiO1xuXHRcdHYuciA9IDI1NSAtIHYucjtcblx0XHR2LmcgPSAyNTUgLSB2Lmc7XG5cdFx0di5iID0gMjU1IC0gdi5iO1xuXHRcdHJldHVybiB0aGlzO1xuXHR9XG5cdGxpZ2h0ZW4ocmF0aW8pIHtcblx0XHRtb2RIU0wodGhpcy5fcmdiLCAyLCByYXRpbyk7XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH1cblx0ZGFya2VuKHJhdGlvKSB7XG5cdFx0bW9kSFNMKHRoaXMuX3JnYiwgMiwgLXJhdGlvKTtcblx0XHRyZXR1cm4gdGhpcztcblx0fVxuXHRzYXR1cmF0ZShyYXRpbykge1xuXHRcdG1vZEhTTCh0aGlzLl9yZ2IsIDEsIHJhdGlvKTtcblx0XHRyZXR1cm4gdGhpcztcblx0fVxuXHRkZXNhdHVyYXRlKHJhdGlvKSB7XG5cdFx0bW9kSFNMKHRoaXMuX3JnYiwgMSwgLXJhdGlvKTtcblx0XHRyZXR1cm4gdGhpcztcblx0fVxuXHRyb3RhdGUoZGVnKSB7XG5cdFx0cm90YXRlKHRoaXMuX3JnYiwgZGVnKTtcblx0XHRyZXR1cm4gdGhpcztcblx0fVxufVxuZnVuY3Rpb24gaW5kZXhfZXNtKGlucHV0KSB7XG5cdHJldHVybiBuZXcgQ29sb3IoaW5wdXQpO1xufVxuXG5jb25zdCBpc1BhdHRlcm5PckdyYWRpZW50ID0gKHZhbHVlKSA9PiB2YWx1ZSBpbnN0YW5jZW9mIENhbnZhc0dyYWRpZW50IHx8IHZhbHVlIGluc3RhbmNlb2YgQ2FudmFzUGF0dGVybjtcbmZ1bmN0aW9uIGNvbG9yKHZhbHVlKSB7XG4gIHJldHVybiBpc1BhdHRlcm5PckdyYWRpZW50KHZhbHVlKSA/IHZhbHVlIDogaW5kZXhfZXNtKHZhbHVlKTtcbn1cbmZ1bmN0aW9uIGdldEhvdmVyQ29sb3IodmFsdWUpIHtcbiAgcmV0dXJuIGlzUGF0dGVybk9yR3JhZGllbnQodmFsdWUpXG4gICAgPyB2YWx1ZVxuICAgIDogaW5kZXhfZXNtKHZhbHVlKS5zYXR1cmF0ZSgwLjUpLmRhcmtlbigwLjEpLmhleFN0cmluZygpO1xufVxuXG5jb25zdCBvdmVycmlkZXMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuY29uc3QgZGVzY3JpcHRvcnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuZnVuY3Rpb24gZ2V0U2NvcGUkMShub2RlLCBrZXkpIHtcbiAgaWYgKCFrZXkpIHtcbiAgICByZXR1cm4gbm9kZTtcbiAgfVxuICBjb25zdCBrZXlzID0ga2V5LnNwbGl0KCcuJyk7XG4gIGZvciAobGV0IGkgPSAwLCBuID0ga2V5cy5sZW5ndGg7IGkgPCBuOyArK2kpIHtcbiAgICBjb25zdCBrID0ga2V5c1tpXTtcbiAgICBub2RlID0gbm9kZVtrXSB8fCAobm9kZVtrXSA9IE9iamVjdC5jcmVhdGUobnVsbCkpO1xuICB9XG4gIHJldHVybiBub2RlO1xufVxuZnVuY3Rpb24gc2V0KHJvb3QsIHNjb3BlLCB2YWx1ZXMpIHtcbiAgaWYgKHR5cGVvZiBzY29wZSA9PT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gbWVyZ2UoZ2V0U2NvcGUkMShyb290LCBzY29wZSksIHZhbHVlcyk7XG4gIH1cbiAgcmV0dXJuIG1lcmdlKGdldFNjb3BlJDEocm9vdCwgJycpLCBzY29wZSk7XG59XG5jbGFzcyBEZWZhdWx0cyB7XG4gIGNvbnN0cnVjdG9yKF9kZXNjcmlwdG9ycykge1xuICAgIHRoaXMuYW5pbWF0aW9uID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuYmFja2dyb3VuZENvbG9yID0gJ3JnYmEoMCwwLDAsMC4xKSc7XG4gICAgdGhpcy5ib3JkZXJDb2xvciA9ICdyZ2JhKDAsMCwwLDAuMSknO1xuICAgIHRoaXMuY29sb3IgPSAnIzY2Nic7XG4gICAgdGhpcy5kYXRhc2V0cyA9IHt9O1xuICAgIHRoaXMuZGV2aWNlUGl4ZWxSYXRpbyA9IChjb250ZXh0KSA9PiBjb250ZXh0LmNoYXJ0LnBsYXRmb3JtLmdldERldmljZVBpeGVsUmF0aW8oKTtcbiAgICB0aGlzLmVsZW1lbnRzID0ge307XG4gICAgdGhpcy5ldmVudHMgPSBbXG4gICAgICAnbW91c2Vtb3ZlJyxcbiAgICAgICdtb3VzZW91dCcsXG4gICAgICAnY2xpY2snLFxuICAgICAgJ3RvdWNoc3RhcnQnLFxuICAgICAgJ3RvdWNobW92ZSdcbiAgICBdO1xuICAgIHRoaXMuZm9udCA9IHtcbiAgICAgIGZhbWlseTogXCInSGVsdmV0aWNhIE5ldWUnLCAnSGVsdmV0aWNhJywgJ0FyaWFsJywgc2Fucy1zZXJpZlwiLFxuICAgICAgc2l6ZTogMTIsXG4gICAgICBzdHlsZTogJ25vcm1hbCcsXG4gICAgICBsaW5lSGVpZ2h0OiAxLjIsXG4gICAgICB3ZWlnaHQ6IG51bGxcbiAgICB9O1xuICAgIHRoaXMuaG92ZXIgPSB7fTtcbiAgICB0aGlzLmhvdmVyQmFja2dyb3VuZENvbG9yID0gKGN0eCwgb3B0aW9ucykgPT4gZ2V0SG92ZXJDb2xvcihvcHRpb25zLmJhY2tncm91bmRDb2xvcik7XG4gICAgdGhpcy5ob3ZlckJvcmRlckNvbG9yID0gKGN0eCwgb3B0aW9ucykgPT4gZ2V0SG92ZXJDb2xvcihvcHRpb25zLmJvcmRlckNvbG9yKTtcbiAgICB0aGlzLmhvdmVyQ29sb3IgPSAoY3R4LCBvcHRpb25zKSA9PiBnZXRIb3ZlckNvbG9yKG9wdGlvbnMuY29sb3IpO1xuICAgIHRoaXMuaW5kZXhBeGlzID0gJ3gnO1xuICAgIHRoaXMuaW50ZXJhY3Rpb24gPSB7XG4gICAgICBtb2RlOiAnbmVhcmVzdCcsXG4gICAgICBpbnRlcnNlY3Q6IHRydWVcbiAgICB9O1xuICAgIHRoaXMubWFpbnRhaW5Bc3BlY3RSYXRpbyA9IHRydWU7XG4gICAgdGhpcy5vbkhvdmVyID0gbnVsbDtcbiAgICB0aGlzLm9uQ2xpY2sgPSBudWxsO1xuICAgIHRoaXMucGFyc2luZyA9IHRydWU7XG4gICAgdGhpcy5wbHVnaW5zID0ge307XG4gICAgdGhpcy5yZXNwb25zaXZlID0gdHJ1ZTtcbiAgICB0aGlzLnNjYWxlID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuc2NhbGVzID0ge307XG4gICAgdGhpcy5zaG93TGluZSA9IHRydWU7XG4gICAgdGhpcy5kcmF3QWN0aXZlRWxlbWVudHNPblRvcCA9IHRydWU7XG4gICAgdGhpcy5kZXNjcmliZShfZGVzY3JpcHRvcnMpO1xuICB9XG4gIHNldChzY29wZSwgdmFsdWVzKSB7XG4gICAgcmV0dXJuIHNldCh0aGlzLCBzY29wZSwgdmFsdWVzKTtcbiAgfVxuICBnZXQoc2NvcGUpIHtcbiAgICByZXR1cm4gZ2V0U2NvcGUkMSh0aGlzLCBzY29wZSk7XG4gIH1cbiAgZGVzY3JpYmUoc2NvcGUsIHZhbHVlcykge1xuICAgIHJldHVybiBzZXQoZGVzY3JpcHRvcnMsIHNjb3BlLCB2YWx1ZXMpO1xuICB9XG4gIG92ZXJyaWRlKHNjb3BlLCB2YWx1ZXMpIHtcbiAgICByZXR1cm4gc2V0KG92ZXJyaWRlcywgc2NvcGUsIHZhbHVlcyk7XG4gIH1cbiAgcm91dGUoc2NvcGUsIG5hbWUsIHRhcmdldFNjb3BlLCB0YXJnZXROYW1lKSB7XG4gICAgY29uc3Qgc2NvcGVPYmplY3QgPSBnZXRTY29wZSQxKHRoaXMsIHNjb3BlKTtcbiAgICBjb25zdCB0YXJnZXRTY29wZU9iamVjdCA9IGdldFNjb3BlJDEodGhpcywgdGFyZ2V0U2NvcGUpO1xuICAgIGNvbnN0IHByaXZhdGVOYW1lID0gJ18nICsgbmFtZTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhzY29wZU9iamVjdCwge1xuICAgICAgW3ByaXZhdGVOYW1lXToge1xuICAgICAgICB2YWx1ZTogc2NvcGVPYmplY3RbbmFtZV0sXG4gICAgICAgIHdyaXRhYmxlOiB0cnVlXG4gICAgICB9LFxuICAgICAgW25hbWVdOiB7XG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGdldCgpIHtcbiAgICAgICAgICBjb25zdCBsb2NhbCA9IHRoaXNbcHJpdmF0ZU5hbWVdO1xuICAgICAgICAgIGNvbnN0IHRhcmdldCA9IHRhcmdldFNjb3BlT2JqZWN0W3RhcmdldE5hbWVdO1xuICAgICAgICAgIGlmIChpc09iamVjdChsb2NhbCkpIHtcbiAgICAgICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKHt9LCB0YXJnZXQsIGxvY2FsKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHZhbHVlT3JEZWZhdWx0KGxvY2FsLCB0YXJnZXQpO1xuICAgICAgICB9LFxuICAgICAgICBzZXQodmFsdWUpIHtcbiAgICAgICAgICB0aGlzW3ByaXZhdGVOYW1lXSA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbn1cbnZhciBkZWZhdWx0cyA9IG5ldyBEZWZhdWx0cyh7XG4gIF9zY3JpcHRhYmxlOiAobmFtZSkgPT4gIW5hbWUuc3RhcnRzV2l0aCgnb24nKSxcbiAgX2luZGV4YWJsZTogKG5hbWUpID0+IG5hbWUgIT09ICdldmVudHMnLFxuICBob3Zlcjoge1xuICAgIF9mYWxsYmFjazogJ2ludGVyYWN0aW9uJ1xuICB9LFxuICBpbnRlcmFjdGlvbjoge1xuICAgIF9zY3JpcHRhYmxlOiBmYWxzZSxcbiAgICBfaW5kZXhhYmxlOiBmYWxzZSxcbiAgfVxufSk7XG5cbmZ1bmN0aW9uIHRvRm9udFN0cmluZyhmb250KSB7XG4gIGlmICghZm9udCB8fCBpc051bGxPclVuZGVmKGZvbnQuc2l6ZSkgfHwgaXNOdWxsT3JVbmRlZihmb250LmZhbWlseSkpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICByZXR1cm4gKGZvbnQuc3R5bGUgPyBmb250LnN0eWxlICsgJyAnIDogJycpXG5cdFx0KyAoZm9udC53ZWlnaHQgPyBmb250LndlaWdodCArICcgJyA6ICcnKVxuXHRcdCsgZm9udC5zaXplICsgJ3B4ICdcblx0XHQrIGZvbnQuZmFtaWx5O1xufVxuZnVuY3Rpb24gX21lYXN1cmVUZXh0KGN0eCwgZGF0YSwgZ2MsIGxvbmdlc3QsIHN0cmluZykge1xuICBsZXQgdGV4dFdpZHRoID0gZGF0YVtzdHJpbmddO1xuICBpZiAoIXRleHRXaWR0aCkge1xuICAgIHRleHRXaWR0aCA9IGRhdGFbc3RyaW5nXSA9IGN0eC5tZWFzdXJlVGV4dChzdHJpbmcpLndpZHRoO1xuICAgIGdjLnB1c2goc3RyaW5nKTtcbiAgfVxuICBpZiAodGV4dFdpZHRoID4gbG9uZ2VzdCkge1xuICAgIGxvbmdlc3QgPSB0ZXh0V2lkdGg7XG4gIH1cbiAgcmV0dXJuIGxvbmdlc3Q7XG59XG5mdW5jdGlvbiBfbG9uZ2VzdFRleHQoY3R4LCBmb250LCBhcnJheU9mVGhpbmdzLCBjYWNoZSkge1xuICBjYWNoZSA9IGNhY2hlIHx8IHt9O1xuICBsZXQgZGF0YSA9IGNhY2hlLmRhdGEgPSBjYWNoZS5kYXRhIHx8IHt9O1xuICBsZXQgZ2MgPSBjYWNoZS5nYXJiYWdlQ29sbGVjdCA9IGNhY2hlLmdhcmJhZ2VDb2xsZWN0IHx8IFtdO1xuICBpZiAoY2FjaGUuZm9udCAhPT0gZm9udCkge1xuICAgIGRhdGEgPSBjYWNoZS5kYXRhID0ge307XG4gICAgZ2MgPSBjYWNoZS5nYXJiYWdlQ29sbGVjdCA9IFtdO1xuICAgIGNhY2hlLmZvbnQgPSBmb250O1xuICB9XG4gIGN0eC5zYXZlKCk7XG4gIGN0eC5mb250ID0gZm9udDtcbiAgbGV0IGxvbmdlc3QgPSAwO1xuICBjb25zdCBpbGVuID0gYXJyYXlPZlRoaW5ncy5sZW5ndGg7XG4gIGxldCBpLCBqLCBqbGVuLCB0aGluZywgbmVzdGVkVGhpbmc7XG4gIGZvciAoaSA9IDA7IGkgPCBpbGVuOyBpKyspIHtcbiAgICB0aGluZyA9IGFycmF5T2ZUaGluZ3NbaV07XG4gICAgaWYgKHRoaW5nICE9PSB1bmRlZmluZWQgJiYgdGhpbmcgIT09IG51bGwgJiYgaXNBcnJheSh0aGluZykgIT09IHRydWUpIHtcbiAgICAgIGxvbmdlc3QgPSBfbWVhc3VyZVRleHQoY3R4LCBkYXRhLCBnYywgbG9uZ2VzdCwgdGhpbmcpO1xuICAgIH0gZWxzZSBpZiAoaXNBcnJheSh0aGluZykpIHtcbiAgICAgIGZvciAoaiA9IDAsIGpsZW4gPSB0aGluZy5sZW5ndGg7IGogPCBqbGVuOyBqKyspIHtcbiAgICAgICAgbmVzdGVkVGhpbmcgPSB0aGluZ1tqXTtcbiAgICAgICAgaWYgKG5lc3RlZFRoaW5nICE9PSB1bmRlZmluZWQgJiYgbmVzdGVkVGhpbmcgIT09IG51bGwgJiYgIWlzQXJyYXkobmVzdGVkVGhpbmcpKSB7XG4gICAgICAgICAgbG9uZ2VzdCA9IF9tZWFzdXJlVGV4dChjdHgsIGRhdGEsIGdjLCBsb25nZXN0LCBuZXN0ZWRUaGluZyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgY3R4LnJlc3RvcmUoKTtcbiAgY29uc3QgZ2NMZW4gPSBnYy5sZW5ndGggLyAyO1xuICBpZiAoZ2NMZW4gPiBhcnJheU9mVGhpbmdzLmxlbmd0aCkge1xuICAgIGZvciAoaSA9IDA7IGkgPCBnY0xlbjsgaSsrKSB7XG4gICAgICBkZWxldGUgZGF0YVtnY1tpXV07XG4gICAgfVxuICAgIGdjLnNwbGljZSgwLCBnY0xlbik7XG4gIH1cbiAgcmV0dXJuIGxvbmdlc3Q7XG59XG5mdW5jdGlvbiBfYWxpZ25QaXhlbChjaGFydCwgcGl4ZWwsIHdpZHRoKSB7XG4gIGNvbnN0IGRldmljZVBpeGVsUmF0aW8gPSBjaGFydC5jdXJyZW50RGV2aWNlUGl4ZWxSYXRpbztcbiAgY29uc3QgaGFsZldpZHRoID0gd2lkdGggIT09IDAgPyBNYXRoLm1heCh3aWR0aCAvIDIsIDAuNSkgOiAwO1xuICByZXR1cm4gTWF0aC5yb3VuZCgocGl4ZWwgLSBoYWxmV2lkdGgpICogZGV2aWNlUGl4ZWxSYXRpbykgLyBkZXZpY2VQaXhlbFJhdGlvICsgaGFsZldpZHRoO1xufVxuZnVuY3Rpb24gY2xlYXJDYW52YXMoY2FudmFzLCBjdHgpIHtcbiAgY3R4ID0gY3R4IHx8IGNhbnZhcy5nZXRDb250ZXh0KCcyZCcpO1xuICBjdHguc2F2ZSgpO1xuICBjdHgucmVzZXRUcmFuc2Zvcm0oKTtcbiAgY3R4LmNsZWFyUmVjdCgwLCAwLCBjYW52YXMud2lkdGgsIGNhbnZhcy5oZWlnaHQpO1xuICBjdHgucmVzdG9yZSgpO1xufVxuZnVuY3Rpb24gZHJhd1BvaW50KGN0eCwgb3B0aW9ucywgeCwgeSkge1xuICBsZXQgdHlwZSwgeE9mZnNldCwgeU9mZnNldCwgc2l6ZSwgY29ybmVyUmFkaXVzO1xuICBjb25zdCBzdHlsZSA9IG9wdGlvbnMucG9pbnRTdHlsZTtcbiAgY29uc3Qgcm90YXRpb24gPSBvcHRpb25zLnJvdGF0aW9uO1xuICBjb25zdCByYWRpdXMgPSBvcHRpb25zLnJhZGl1cztcbiAgbGV0IHJhZCA9IChyb3RhdGlvbiB8fCAwKSAqIFJBRF9QRVJfREVHO1xuICBpZiAoc3R5bGUgJiYgdHlwZW9mIHN0eWxlID09PSAnb2JqZWN0Jykge1xuICAgIHR5cGUgPSBzdHlsZS50b1N0cmluZygpO1xuICAgIGlmICh0eXBlID09PSAnW29iamVjdCBIVE1MSW1hZ2VFbGVtZW50XScgfHwgdHlwZSA9PT0gJ1tvYmplY3QgSFRNTENhbnZhc0VsZW1lbnRdJykge1xuICAgICAgY3R4LnNhdmUoKTtcbiAgICAgIGN0eC50cmFuc2xhdGUoeCwgeSk7XG4gICAgICBjdHgucm90YXRlKHJhZCk7XG4gICAgICBjdHguZHJhd0ltYWdlKHN0eWxlLCAtc3R5bGUud2lkdGggLyAyLCAtc3R5bGUuaGVpZ2h0IC8gMiwgc3R5bGUud2lkdGgsIHN0eWxlLmhlaWdodCk7XG4gICAgICBjdHgucmVzdG9yZSgpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgfVxuICBpZiAoaXNOYU4ocmFkaXVzKSB8fCByYWRpdXMgPD0gMCkge1xuICAgIHJldHVybjtcbiAgfVxuICBjdHguYmVnaW5QYXRoKCk7XG4gIHN3aXRjaCAoc3R5bGUpIHtcbiAgZGVmYXVsdDpcbiAgICBjdHguYXJjKHgsIHksIHJhZGl1cywgMCwgVEFVKTtcbiAgICBjdHguY2xvc2VQYXRoKCk7XG4gICAgYnJlYWs7XG4gIGNhc2UgJ3RyaWFuZ2xlJzpcbiAgICBjdHgubW92ZVRvKHggKyBNYXRoLnNpbihyYWQpICogcmFkaXVzLCB5IC0gTWF0aC5jb3MocmFkKSAqIHJhZGl1cyk7XG4gICAgcmFkICs9IFRXT19USElSRFNfUEk7XG4gICAgY3R4LmxpbmVUbyh4ICsgTWF0aC5zaW4ocmFkKSAqIHJhZGl1cywgeSAtIE1hdGguY29zKHJhZCkgKiByYWRpdXMpO1xuICAgIHJhZCArPSBUV09fVEhJUkRTX1BJO1xuICAgIGN0eC5saW5lVG8oeCArIE1hdGguc2luKHJhZCkgKiByYWRpdXMsIHkgLSBNYXRoLmNvcyhyYWQpICogcmFkaXVzKTtcbiAgICBjdHguY2xvc2VQYXRoKCk7XG4gICAgYnJlYWs7XG4gIGNhc2UgJ3JlY3RSb3VuZGVkJzpcbiAgICBjb3JuZXJSYWRpdXMgPSByYWRpdXMgKiAwLjUxNjtcbiAgICBzaXplID0gcmFkaXVzIC0gY29ybmVyUmFkaXVzO1xuICAgIHhPZmZzZXQgPSBNYXRoLmNvcyhyYWQgKyBRVUFSVEVSX1BJKSAqIHNpemU7XG4gICAgeU9mZnNldCA9IE1hdGguc2luKHJhZCArIFFVQVJURVJfUEkpICogc2l6ZTtcbiAgICBjdHguYXJjKHggLSB4T2Zmc2V0LCB5IC0geU9mZnNldCwgY29ybmVyUmFkaXVzLCByYWQgLSBQSSwgcmFkIC0gSEFMRl9QSSk7XG4gICAgY3R4LmFyYyh4ICsgeU9mZnNldCwgeSAtIHhPZmZzZXQsIGNvcm5lclJhZGl1cywgcmFkIC0gSEFMRl9QSSwgcmFkKTtcbiAgICBjdHguYXJjKHggKyB4T2Zmc2V0LCB5ICsgeU9mZnNldCwgY29ybmVyUmFkaXVzLCByYWQsIHJhZCArIEhBTEZfUEkpO1xuICAgIGN0eC5hcmMoeCAtIHlPZmZzZXQsIHkgKyB4T2Zmc2V0LCBjb3JuZXJSYWRpdXMsIHJhZCArIEhBTEZfUEksIHJhZCArIFBJKTtcbiAgICBjdHguY2xvc2VQYXRoKCk7XG4gICAgYnJlYWs7XG4gIGNhc2UgJ3JlY3QnOlxuICAgIGlmICghcm90YXRpb24pIHtcbiAgICAgIHNpemUgPSBNYXRoLlNRUlQxXzIgKiByYWRpdXM7XG4gICAgICBjdHgucmVjdCh4IC0gc2l6ZSwgeSAtIHNpemUsIDIgKiBzaXplLCAyICogc2l6ZSk7XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgcmFkICs9IFFVQVJURVJfUEk7XG4gIGNhc2UgJ3JlY3RSb3QnOlxuICAgIHhPZmZzZXQgPSBNYXRoLmNvcyhyYWQpICogcmFkaXVzO1xuICAgIHlPZmZzZXQgPSBNYXRoLnNpbihyYWQpICogcmFkaXVzO1xuICAgIGN0eC5tb3ZlVG8oeCAtIHhPZmZzZXQsIHkgLSB5T2Zmc2V0KTtcbiAgICBjdHgubGluZVRvKHggKyB5T2Zmc2V0LCB5IC0geE9mZnNldCk7XG4gICAgY3R4LmxpbmVUbyh4ICsgeE9mZnNldCwgeSArIHlPZmZzZXQpO1xuICAgIGN0eC5saW5lVG8oeCAtIHlPZmZzZXQsIHkgKyB4T2Zmc2V0KTtcbiAgICBjdHguY2xvc2VQYXRoKCk7XG4gICAgYnJlYWs7XG4gIGNhc2UgJ2Nyb3NzUm90JzpcbiAgICByYWQgKz0gUVVBUlRFUl9QSTtcbiAgY2FzZSAnY3Jvc3MnOlxuICAgIHhPZmZzZXQgPSBNYXRoLmNvcyhyYWQpICogcmFkaXVzO1xuICAgIHlPZmZzZXQgPSBNYXRoLnNpbihyYWQpICogcmFkaXVzO1xuICAgIGN0eC5tb3ZlVG8oeCAtIHhPZmZzZXQsIHkgLSB5T2Zmc2V0KTtcbiAgICBjdHgubGluZVRvKHggKyB4T2Zmc2V0LCB5ICsgeU9mZnNldCk7XG4gICAgY3R4Lm1vdmVUbyh4ICsgeU9mZnNldCwgeSAtIHhPZmZzZXQpO1xuICAgIGN0eC5saW5lVG8oeCAtIHlPZmZzZXQsIHkgKyB4T2Zmc2V0KTtcbiAgICBicmVhaztcbiAgY2FzZSAnc3Rhcic6XG4gICAgeE9mZnNldCA9IE1hdGguY29zKHJhZCkgKiByYWRpdXM7XG4gICAgeU9mZnNldCA9IE1hdGguc2luKHJhZCkgKiByYWRpdXM7XG4gICAgY3R4Lm1vdmVUbyh4IC0geE9mZnNldCwgeSAtIHlPZmZzZXQpO1xuICAgIGN0eC5saW5lVG8oeCArIHhPZmZzZXQsIHkgKyB5T2Zmc2V0KTtcbiAgICBjdHgubW92ZVRvKHggKyB5T2Zmc2V0LCB5IC0geE9mZnNldCk7XG4gICAgY3R4LmxpbmVUbyh4IC0geU9mZnNldCwgeSArIHhPZmZzZXQpO1xuICAgIHJhZCArPSBRVUFSVEVSX1BJO1xuICAgIHhPZmZzZXQgPSBNYXRoLmNvcyhyYWQpICogcmFkaXVzO1xuICAgIHlPZmZzZXQgPSBNYXRoLnNpbihyYWQpICogcmFkaXVzO1xuICAgIGN0eC5tb3ZlVG8oeCAtIHhPZmZzZXQsIHkgLSB5T2Zmc2V0KTtcbiAgICBjdHgubGluZVRvKHggKyB4T2Zmc2V0LCB5ICsgeU9mZnNldCk7XG4gICAgY3R4Lm1vdmVUbyh4ICsgeU9mZnNldCwgeSAtIHhPZmZzZXQpO1xuICAgIGN0eC5saW5lVG8oeCAtIHlPZmZzZXQsIHkgKyB4T2Zmc2V0KTtcbiAgICBicmVhaztcbiAgY2FzZSAnbGluZSc6XG4gICAgeE9mZnNldCA9IE1hdGguY29zKHJhZCkgKiByYWRpdXM7XG4gICAgeU9mZnNldCA9IE1hdGguc2luKHJhZCkgKiByYWRpdXM7XG4gICAgY3R4Lm1vdmVUbyh4IC0geE9mZnNldCwgeSAtIHlPZmZzZXQpO1xuICAgIGN0eC5saW5lVG8oeCArIHhPZmZzZXQsIHkgKyB5T2Zmc2V0KTtcbiAgICBicmVhaztcbiAgY2FzZSAnZGFzaCc6XG4gICAgY3R4Lm1vdmVUbyh4LCB5KTtcbiAgICBjdHgubGluZVRvKHggKyBNYXRoLmNvcyhyYWQpICogcmFkaXVzLCB5ICsgTWF0aC5zaW4ocmFkKSAqIHJhZGl1cyk7XG4gICAgYnJlYWs7XG4gIH1cbiAgY3R4LmZpbGwoKTtcbiAgaWYgKG9wdGlvbnMuYm9yZGVyV2lkdGggPiAwKSB7XG4gICAgY3R4LnN0cm9rZSgpO1xuICB9XG59XG5mdW5jdGlvbiBfaXNQb2ludEluQXJlYShwb2ludCwgYXJlYSwgbWFyZ2luKSB7XG4gIG1hcmdpbiA9IG1hcmdpbiB8fCAwLjU7XG4gIHJldHVybiAhYXJlYSB8fCAocG9pbnQgJiYgcG9pbnQueCA+IGFyZWEubGVmdCAtIG1hcmdpbiAmJiBwb2ludC54IDwgYXJlYS5yaWdodCArIG1hcmdpbiAmJlxuXHRcdHBvaW50LnkgPiBhcmVhLnRvcCAtIG1hcmdpbiAmJiBwb2ludC55IDwgYXJlYS5ib3R0b20gKyBtYXJnaW4pO1xufVxuZnVuY3Rpb24gY2xpcEFyZWEoY3R4LCBhcmVhKSB7XG4gIGN0eC5zYXZlKCk7XG4gIGN0eC5iZWdpblBhdGgoKTtcbiAgY3R4LnJlY3QoYXJlYS5sZWZ0LCBhcmVhLnRvcCwgYXJlYS5yaWdodCAtIGFyZWEubGVmdCwgYXJlYS5ib3R0b20gLSBhcmVhLnRvcCk7XG4gIGN0eC5jbGlwKCk7XG59XG5mdW5jdGlvbiB1bmNsaXBBcmVhKGN0eCkge1xuICBjdHgucmVzdG9yZSgpO1xufVxuZnVuY3Rpb24gX3N0ZXBwZWRMaW5lVG8oY3R4LCBwcmV2aW91cywgdGFyZ2V0LCBmbGlwLCBtb2RlKSB7XG4gIGlmICghcHJldmlvdXMpIHtcbiAgICByZXR1cm4gY3R4LmxpbmVUbyh0YXJnZXQueCwgdGFyZ2V0LnkpO1xuICB9XG4gIGlmIChtb2RlID09PSAnbWlkZGxlJykge1xuICAgIGNvbnN0IG1pZHBvaW50ID0gKHByZXZpb3VzLnggKyB0YXJnZXQueCkgLyAyLjA7XG4gICAgY3R4LmxpbmVUbyhtaWRwb2ludCwgcHJldmlvdXMueSk7XG4gICAgY3R4LmxpbmVUbyhtaWRwb2ludCwgdGFyZ2V0LnkpO1xuICB9IGVsc2UgaWYgKG1vZGUgPT09ICdhZnRlcicgIT09ICEhZmxpcCkge1xuICAgIGN0eC5saW5lVG8ocHJldmlvdXMueCwgdGFyZ2V0LnkpO1xuICB9IGVsc2Uge1xuICAgIGN0eC5saW5lVG8odGFyZ2V0LngsIHByZXZpb3VzLnkpO1xuICB9XG4gIGN0eC5saW5lVG8odGFyZ2V0LngsIHRhcmdldC55KTtcbn1cbmZ1bmN0aW9uIF9iZXppZXJDdXJ2ZVRvKGN0eCwgcHJldmlvdXMsIHRhcmdldCwgZmxpcCkge1xuICBpZiAoIXByZXZpb3VzKSB7XG4gICAgcmV0dXJuIGN0eC5saW5lVG8odGFyZ2V0LngsIHRhcmdldC55KTtcbiAgfVxuICBjdHguYmV6aWVyQ3VydmVUbyhcbiAgICBmbGlwID8gcHJldmlvdXMuY3AxeCA6IHByZXZpb3VzLmNwMngsXG4gICAgZmxpcCA/IHByZXZpb3VzLmNwMXkgOiBwcmV2aW91cy5jcDJ5LFxuICAgIGZsaXAgPyB0YXJnZXQuY3AyeCA6IHRhcmdldC5jcDF4LFxuICAgIGZsaXAgPyB0YXJnZXQuY3AyeSA6IHRhcmdldC5jcDF5LFxuICAgIHRhcmdldC54LFxuICAgIHRhcmdldC55KTtcbn1cbmZ1bmN0aW9uIHJlbmRlclRleHQoY3R4LCB0ZXh0LCB4LCB5LCBmb250LCBvcHRzID0ge30pIHtcbiAgY29uc3QgbGluZXMgPSBpc0FycmF5KHRleHQpID8gdGV4dCA6IFt0ZXh0XTtcbiAgY29uc3Qgc3Ryb2tlID0gb3B0cy5zdHJva2VXaWR0aCA+IDAgJiYgb3B0cy5zdHJva2VDb2xvciAhPT0gJyc7XG4gIGxldCBpLCBsaW5lO1xuICBjdHguc2F2ZSgpO1xuICBjdHguZm9udCA9IGZvbnQuc3RyaW5nO1xuICBzZXRSZW5kZXJPcHRzKGN0eCwgb3B0cyk7XG4gIGZvciAoaSA9IDA7IGkgPCBsaW5lcy5sZW5ndGg7ICsraSkge1xuICAgIGxpbmUgPSBsaW5lc1tpXTtcbiAgICBpZiAoc3Ryb2tlKSB7XG4gICAgICBpZiAob3B0cy5zdHJva2VDb2xvcikge1xuICAgICAgICBjdHguc3Ryb2tlU3R5bGUgPSBvcHRzLnN0cm9rZUNvbG9yO1xuICAgICAgfVxuICAgICAgaWYgKCFpc051bGxPclVuZGVmKG9wdHMuc3Ryb2tlV2lkdGgpKSB7XG4gICAgICAgIGN0eC5saW5lV2lkdGggPSBvcHRzLnN0cm9rZVdpZHRoO1xuICAgICAgfVxuICAgICAgY3R4LnN0cm9rZVRleHQobGluZSwgeCwgeSwgb3B0cy5tYXhXaWR0aCk7XG4gICAgfVxuICAgIGN0eC5maWxsVGV4dChsaW5lLCB4LCB5LCBvcHRzLm1heFdpZHRoKTtcbiAgICBkZWNvcmF0ZVRleHQoY3R4LCB4LCB5LCBsaW5lLCBvcHRzKTtcbiAgICB5ICs9IGZvbnQubGluZUhlaWdodDtcbiAgfVxuICBjdHgucmVzdG9yZSgpO1xufVxuZnVuY3Rpb24gc2V0UmVuZGVyT3B0cyhjdHgsIG9wdHMpIHtcbiAgaWYgKG9wdHMudHJhbnNsYXRpb24pIHtcbiAgICBjdHgudHJhbnNsYXRlKG9wdHMudHJhbnNsYXRpb25bMF0sIG9wdHMudHJhbnNsYXRpb25bMV0pO1xuICB9XG4gIGlmICghaXNOdWxsT3JVbmRlZihvcHRzLnJvdGF0aW9uKSkge1xuICAgIGN0eC5yb3RhdGUob3B0cy5yb3RhdGlvbik7XG4gIH1cbiAgaWYgKG9wdHMuY29sb3IpIHtcbiAgICBjdHguZmlsbFN0eWxlID0gb3B0cy5jb2xvcjtcbiAgfVxuICBpZiAob3B0cy50ZXh0QWxpZ24pIHtcbiAgICBjdHgudGV4dEFsaWduID0gb3B0cy50ZXh0QWxpZ247XG4gIH1cbiAgaWYgKG9wdHMudGV4dEJhc2VsaW5lKSB7XG4gICAgY3R4LnRleHRCYXNlbGluZSA9IG9wdHMudGV4dEJhc2VsaW5lO1xuICB9XG59XG5mdW5jdGlvbiBkZWNvcmF0ZVRleHQoY3R4LCB4LCB5LCBsaW5lLCBvcHRzKSB7XG4gIGlmIChvcHRzLnN0cmlrZXRocm91Z2ggfHwgb3B0cy51bmRlcmxpbmUpIHtcbiAgICBjb25zdCBtZXRyaWNzID0gY3R4Lm1lYXN1cmVUZXh0KGxpbmUpO1xuICAgIGNvbnN0IGxlZnQgPSB4IC0gbWV0cmljcy5hY3R1YWxCb3VuZGluZ0JveExlZnQ7XG4gICAgY29uc3QgcmlnaHQgPSB4ICsgbWV0cmljcy5hY3R1YWxCb3VuZGluZ0JveFJpZ2h0O1xuICAgIGNvbnN0IHRvcCA9IHkgLSBtZXRyaWNzLmFjdHVhbEJvdW5kaW5nQm94QXNjZW50O1xuICAgIGNvbnN0IGJvdHRvbSA9IHkgKyBtZXRyaWNzLmFjdHVhbEJvdW5kaW5nQm94RGVzY2VudDtcbiAgICBjb25zdCB5RGVjb3JhdGlvbiA9IG9wdHMuc3RyaWtldGhyb3VnaCA/ICh0b3AgKyBib3R0b20pIC8gMiA6IGJvdHRvbTtcbiAgICBjdHguc3Ryb2tlU3R5bGUgPSBjdHguZmlsbFN0eWxlO1xuICAgIGN0eC5iZWdpblBhdGgoKTtcbiAgICBjdHgubGluZVdpZHRoID0gb3B0cy5kZWNvcmF0aW9uV2lkdGggfHwgMjtcbiAgICBjdHgubW92ZVRvKGxlZnQsIHlEZWNvcmF0aW9uKTtcbiAgICBjdHgubGluZVRvKHJpZ2h0LCB5RGVjb3JhdGlvbik7XG4gICAgY3R4LnN0cm9rZSgpO1xuICB9XG59XG5mdW5jdGlvbiBhZGRSb3VuZGVkUmVjdFBhdGgoY3R4LCByZWN0KSB7XG4gIGNvbnN0IHt4LCB5LCB3LCBoLCByYWRpdXN9ID0gcmVjdDtcbiAgY3R4LmFyYyh4ICsgcmFkaXVzLnRvcExlZnQsIHkgKyByYWRpdXMudG9wTGVmdCwgcmFkaXVzLnRvcExlZnQsIC1IQUxGX1BJLCBQSSwgdHJ1ZSk7XG4gIGN0eC5saW5lVG8oeCwgeSArIGggLSByYWRpdXMuYm90dG9tTGVmdCk7XG4gIGN0eC5hcmMoeCArIHJhZGl1cy5ib3R0b21MZWZ0LCB5ICsgaCAtIHJhZGl1cy5ib3R0b21MZWZ0LCByYWRpdXMuYm90dG9tTGVmdCwgUEksIEhBTEZfUEksIHRydWUpO1xuICBjdHgubGluZVRvKHggKyB3IC0gcmFkaXVzLmJvdHRvbVJpZ2h0LCB5ICsgaCk7XG4gIGN0eC5hcmMoeCArIHcgLSByYWRpdXMuYm90dG9tUmlnaHQsIHkgKyBoIC0gcmFkaXVzLmJvdHRvbVJpZ2h0LCByYWRpdXMuYm90dG9tUmlnaHQsIEhBTEZfUEksIDAsIHRydWUpO1xuICBjdHgubGluZVRvKHggKyB3LCB5ICsgcmFkaXVzLnRvcFJpZ2h0KTtcbiAgY3R4LmFyYyh4ICsgdyAtIHJhZGl1cy50b3BSaWdodCwgeSArIHJhZGl1cy50b3BSaWdodCwgcmFkaXVzLnRvcFJpZ2h0LCAwLCAtSEFMRl9QSSwgdHJ1ZSk7XG4gIGN0eC5saW5lVG8oeCArIHJhZGl1cy50b3BMZWZ0LCB5KTtcbn1cblxuY29uc3QgTElORV9IRUlHSFQgPSBuZXcgUmVnRXhwKC9eKG5vcm1hbHwoXFxkKyg/OlxcLlxcZCspPykocHh8ZW18JSk/KSQvKTtcbmNvbnN0IEZPTlRfU1RZTEUgPSBuZXcgUmVnRXhwKC9eKG5vcm1hbHxpdGFsaWN8aW5pdGlhbHxpbmhlcml0fHVuc2V0fChvYmxpcXVlKCAtP1swLTldP1swLTldZGVnKT8pKSQvKTtcbmZ1bmN0aW9uIHRvTGluZUhlaWdodCh2YWx1ZSwgc2l6ZSkge1xuICBjb25zdCBtYXRjaGVzID0gKCcnICsgdmFsdWUpLm1hdGNoKExJTkVfSEVJR0hUKTtcbiAgaWYgKCFtYXRjaGVzIHx8IG1hdGNoZXNbMV0gPT09ICdub3JtYWwnKSB7XG4gICAgcmV0dXJuIHNpemUgKiAxLjI7XG4gIH1cbiAgdmFsdWUgPSArbWF0Y2hlc1syXTtcbiAgc3dpdGNoIChtYXRjaGVzWzNdKSB7XG4gIGNhc2UgJ3B4JzpcbiAgICByZXR1cm4gdmFsdWU7XG4gIGNhc2UgJyUnOlxuICAgIHZhbHVlIC89IDEwMDtcbiAgICBicmVhaztcbiAgfVxuICByZXR1cm4gc2l6ZSAqIHZhbHVlO1xufVxuY29uc3QgbnVtYmVyT3JaZXJvID0gdiA9PiArdiB8fCAwO1xuZnVuY3Rpb24gX3JlYWRWYWx1ZVRvUHJvcHModmFsdWUsIHByb3BzKSB7XG4gIGNvbnN0IHJldCA9IHt9O1xuICBjb25zdCBvYmpQcm9wcyA9IGlzT2JqZWN0KHByb3BzKTtcbiAgY29uc3Qga2V5cyA9IG9ialByb3BzID8gT2JqZWN0LmtleXMocHJvcHMpIDogcHJvcHM7XG4gIGNvbnN0IHJlYWQgPSBpc09iamVjdCh2YWx1ZSlcbiAgICA/IG9ialByb3BzXG4gICAgICA/IHByb3AgPT4gdmFsdWVPckRlZmF1bHQodmFsdWVbcHJvcF0sIHZhbHVlW3Byb3BzW3Byb3BdXSlcbiAgICAgIDogcHJvcCA9PiB2YWx1ZVtwcm9wXVxuICAgIDogKCkgPT4gdmFsdWU7XG4gIGZvciAoY29uc3QgcHJvcCBvZiBrZXlzKSB7XG4gICAgcmV0W3Byb3BdID0gbnVtYmVyT3JaZXJvKHJlYWQocHJvcCkpO1xuICB9XG4gIHJldHVybiByZXQ7XG59XG5mdW5jdGlvbiB0b1RSQkwodmFsdWUpIHtcbiAgcmV0dXJuIF9yZWFkVmFsdWVUb1Byb3BzKHZhbHVlLCB7dG9wOiAneScsIHJpZ2h0OiAneCcsIGJvdHRvbTogJ3knLCBsZWZ0OiAneCd9KTtcbn1cbmZ1bmN0aW9uIHRvVFJCTENvcm5lcnModmFsdWUpIHtcbiAgcmV0dXJuIF9yZWFkVmFsdWVUb1Byb3BzKHZhbHVlLCBbJ3RvcExlZnQnLCAndG9wUmlnaHQnLCAnYm90dG9tTGVmdCcsICdib3R0b21SaWdodCddKTtcbn1cbmZ1bmN0aW9uIHRvUGFkZGluZyh2YWx1ZSkge1xuICBjb25zdCBvYmogPSB0b1RSQkwodmFsdWUpO1xuICBvYmoud2lkdGggPSBvYmoubGVmdCArIG9iai5yaWdodDtcbiAgb2JqLmhlaWdodCA9IG9iai50b3AgKyBvYmouYm90dG9tO1xuICByZXR1cm4gb2JqO1xufVxuZnVuY3Rpb24gdG9Gb250KG9wdGlvbnMsIGZhbGxiYWNrKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICBmYWxsYmFjayA9IGZhbGxiYWNrIHx8IGRlZmF1bHRzLmZvbnQ7XG4gIGxldCBzaXplID0gdmFsdWVPckRlZmF1bHQob3B0aW9ucy5zaXplLCBmYWxsYmFjay5zaXplKTtcbiAgaWYgKHR5cGVvZiBzaXplID09PSAnc3RyaW5nJykge1xuICAgIHNpemUgPSBwYXJzZUludChzaXplLCAxMCk7XG4gIH1cbiAgbGV0IHN0eWxlID0gdmFsdWVPckRlZmF1bHQob3B0aW9ucy5zdHlsZSwgZmFsbGJhY2suc3R5bGUpO1xuICBpZiAoc3R5bGUgJiYgISgnJyArIHN0eWxlKS5tYXRjaChGT05UX1NUWUxFKSkge1xuICAgIGNvbnNvbGUud2FybignSW52YWxpZCBmb250IHN0eWxlIHNwZWNpZmllZDogXCInICsgc3R5bGUgKyAnXCInKTtcbiAgICBzdHlsZSA9ICcnO1xuICB9XG4gIGNvbnN0IGZvbnQgPSB7XG4gICAgZmFtaWx5OiB2YWx1ZU9yRGVmYXVsdChvcHRpb25zLmZhbWlseSwgZmFsbGJhY2suZmFtaWx5KSxcbiAgICBsaW5lSGVpZ2h0OiB0b0xpbmVIZWlnaHQodmFsdWVPckRlZmF1bHQob3B0aW9ucy5saW5lSGVpZ2h0LCBmYWxsYmFjay5saW5lSGVpZ2h0KSwgc2l6ZSksXG4gICAgc2l6ZSxcbiAgICBzdHlsZSxcbiAgICB3ZWlnaHQ6IHZhbHVlT3JEZWZhdWx0KG9wdGlvbnMud2VpZ2h0LCBmYWxsYmFjay53ZWlnaHQpLFxuICAgIHN0cmluZzogJydcbiAgfTtcbiAgZm9udC5zdHJpbmcgPSB0b0ZvbnRTdHJpbmcoZm9udCk7XG4gIHJldHVybiBmb250O1xufVxuZnVuY3Rpb24gcmVzb2x2ZShpbnB1dHMsIGNvbnRleHQsIGluZGV4LCBpbmZvKSB7XG4gIGxldCBjYWNoZWFibGUgPSB0cnVlO1xuICBsZXQgaSwgaWxlbiwgdmFsdWU7XG4gIGZvciAoaSA9IDAsIGlsZW4gPSBpbnB1dHMubGVuZ3RoOyBpIDwgaWxlbjsgKytpKSB7XG4gICAgdmFsdWUgPSBpbnB1dHNbaV07XG4gICAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICBpZiAoY29udGV4dCAhPT0gdW5kZWZpbmVkICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdmFsdWUgPSB2YWx1ZShjb250ZXh0KTtcbiAgICAgIGNhY2hlYWJsZSA9IGZhbHNlO1xuICAgIH1cbiAgICBpZiAoaW5kZXggIT09IHVuZGVmaW5lZCAmJiBpc0FycmF5KHZhbHVlKSkge1xuICAgICAgdmFsdWUgPSB2YWx1ZVtpbmRleCAlIHZhbHVlLmxlbmd0aF07XG4gICAgICBjYWNoZWFibGUgPSBmYWxzZTtcbiAgICB9XG4gICAgaWYgKHZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGlmIChpbmZvICYmICFjYWNoZWFibGUpIHtcbiAgICAgICAgaW5mby5jYWNoZWFibGUgPSBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG4gIH1cbn1cbmZ1bmN0aW9uIF9hZGRHcmFjZShtaW5tYXgsIGdyYWNlLCBiZWdpbkF0WmVybykge1xuICBjb25zdCB7bWluLCBtYXh9ID0gbWlubWF4O1xuICBjb25zdCBjaGFuZ2UgPSB0b0RpbWVuc2lvbihncmFjZSwgKG1heCAtIG1pbikgLyAyKTtcbiAgY29uc3Qga2VlcFplcm8gPSAodmFsdWUsIGFkZCkgPT4gYmVnaW5BdFplcm8gJiYgdmFsdWUgPT09IDAgPyAwIDogdmFsdWUgKyBhZGQ7XG4gIHJldHVybiB7XG4gICAgbWluOiBrZWVwWmVybyhtaW4sIC1NYXRoLmFicyhjaGFuZ2UpKSxcbiAgICBtYXg6IGtlZXBaZXJvKG1heCwgY2hhbmdlKVxuICB9O1xufVxuZnVuY3Rpb24gY3JlYXRlQ29udGV4dChwYXJlbnRDb250ZXh0LCBjb250ZXh0KSB7XG4gIHJldHVybiBPYmplY3QuYXNzaWduKE9iamVjdC5jcmVhdGUocGFyZW50Q29udGV4dCksIGNvbnRleHQpO1xufVxuXG5mdW5jdGlvbiBfbG9va3VwKHRhYmxlLCB2YWx1ZSwgY21wKSB7XG4gIGNtcCA9IGNtcCB8fCAoKGluZGV4KSA9PiB0YWJsZVtpbmRleF0gPCB2YWx1ZSk7XG4gIGxldCBoaSA9IHRhYmxlLmxlbmd0aCAtIDE7XG4gIGxldCBsbyA9IDA7XG4gIGxldCBtaWQ7XG4gIHdoaWxlIChoaSAtIGxvID4gMSkge1xuICAgIG1pZCA9IChsbyArIGhpKSA+PiAxO1xuICAgIGlmIChjbXAobWlkKSkge1xuICAgICAgbG8gPSBtaWQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIGhpID0gbWlkO1xuICAgIH1cbiAgfVxuICByZXR1cm4ge2xvLCBoaX07XG59XG5jb25zdCBfbG9va3VwQnlLZXkgPSAodGFibGUsIGtleSwgdmFsdWUpID0+XG4gIF9sb29rdXAodGFibGUsIHZhbHVlLCBpbmRleCA9PiB0YWJsZVtpbmRleF1ba2V5XSA8IHZhbHVlKTtcbmNvbnN0IF9ybG9va3VwQnlLZXkgPSAodGFibGUsIGtleSwgdmFsdWUpID0+XG4gIF9sb29rdXAodGFibGUsIHZhbHVlLCBpbmRleCA9PiB0YWJsZVtpbmRleF1ba2V5XSA+PSB2YWx1ZSk7XG5mdW5jdGlvbiBfZmlsdGVyQmV0d2Vlbih2YWx1ZXMsIG1pbiwgbWF4KSB7XG4gIGxldCBzdGFydCA9IDA7XG4gIGxldCBlbmQgPSB2YWx1ZXMubGVuZ3RoO1xuICB3aGlsZSAoc3RhcnQgPCBlbmQgJiYgdmFsdWVzW3N0YXJ0XSA8IG1pbikge1xuICAgIHN0YXJ0Kys7XG4gIH1cbiAgd2hpbGUgKGVuZCA+IHN0YXJ0ICYmIHZhbHVlc1tlbmQgLSAxXSA+IG1heCkge1xuICAgIGVuZC0tO1xuICB9XG4gIHJldHVybiBzdGFydCA+IDAgfHwgZW5kIDwgdmFsdWVzLmxlbmd0aFxuICAgID8gdmFsdWVzLnNsaWNlKHN0YXJ0LCBlbmQpXG4gICAgOiB2YWx1ZXM7XG59XG5jb25zdCBhcnJheUV2ZW50cyA9IFsncHVzaCcsICdwb3AnLCAnc2hpZnQnLCAnc3BsaWNlJywgJ3Vuc2hpZnQnXTtcbmZ1bmN0aW9uIGxpc3RlbkFycmF5RXZlbnRzKGFycmF5LCBsaXN0ZW5lcikge1xuICBpZiAoYXJyYXkuX2NoYXJ0anMpIHtcbiAgICBhcnJheS5fY2hhcnRqcy5saXN0ZW5lcnMucHVzaChsaXN0ZW5lcik7XG4gICAgcmV0dXJuO1xuICB9XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShhcnJheSwgJ19jaGFydGpzJywge1xuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICB2YWx1ZToge1xuICAgICAgbGlzdGVuZXJzOiBbbGlzdGVuZXJdXG4gICAgfVxuICB9KTtcbiAgYXJyYXlFdmVudHMuZm9yRWFjaCgoa2V5KSA9PiB7XG4gICAgY29uc3QgbWV0aG9kID0gJ19vbkRhdGEnICsgX2NhcGl0YWxpemUoa2V5KTtcbiAgICBjb25zdCBiYXNlID0gYXJyYXlba2V5XTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoYXJyYXksIGtleSwge1xuICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICB2YWx1ZSguLi5hcmdzKSB7XG4gICAgICAgIGNvbnN0IHJlcyA9IGJhc2UuYXBwbHkodGhpcywgYXJncyk7XG4gICAgICAgIGFycmF5Ll9jaGFydGpzLmxpc3RlbmVycy5mb3JFYWNoKChvYmplY3QpID0+IHtcbiAgICAgICAgICBpZiAodHlwZW9mIG9iamVjdFttZXRob2RdID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBvYmplY3RbbWV0aG9kXSguLi5hcmdzKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gcmVzO1xuICAgICAgfVxuICAgIH0pO1xuICB9KTtcbn1cbmZ1bmN0aW9uIHVubGlzdGVuQXJyYXlFdmVudHMoYXJyYXksIGxpc3RlbmVyKSB7XG4gIGNvbnN0IHN0dWIgPSBhcnJheS5fY2hhcnRqcztcbiAgaWYgKCFzdHViKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGNvbnN0IGxpc3RlbmVycyA9IHN0dWIubGlzdGVuZXJzO1xuICBjb25zdCBpbmRleCA9IGxpc3RlbmVycy5pbmRleE9mKGxpc3RlbmVyKTtcbiAgaWYgKGluZGV4ICE9PSAtMSkge1xuICAgIGxpc3RlbmVycy5zcGxpY2UoaW5kZXgsIDEpO1xuICB9XG4gIGlmIChsaXN0ZW5lcnMubGVuZ3RoID4gMCkge1xuICAgIHJldHVybjtcbiAgfVxuICBhcnJheUV2ZW50cy5mb3JFYWNoKChrZXkpID0+IHtcbiAgICBkZWxldGUgYXJyYXlba2V5XTtcbiAgfSk7XG4gIGRlbGV0ZSBhcnJheS5fY2hhcnRqcztcbn1cbmZ1bmN0aW9uIF9hcnJheVVuaXF1ZShpdGVtcykge1xuICBjb25zdCBzZXQgPSBuZXcgU2V0KCk7XG4gIGxldCBpLCBpbGVuO1xuICBmb3IgKGkgPSAwLCBpbGVuID0gaXRlbXMubGVuZ3RoOyBpIDwgaWxlbjsgKytpKSB7XG4gICAgc2V0LmFkZChpdGVtc1tpXSk7XG4gIH1cbiAgaWYgKHNldC5zaXplID09PSBpbGVuKSB7XG4gICAgcmV0dXJuIGl0ZW1zO1xuICB9XG4gIHJldHVybiBBcnJheS5mcm9tKHNldCk7XG59XG5cbmZ1bmN0aW9uIF9jcmVhdGVSZXNvbHZlcihzY29wZXMsIHByZWZpeGVzID0gWycnXSwgcm9vdFNjb3BlcyA9IHNjb3BlcywgZmFsbGJhY2ssIGdldFRhcmdldCA9ICgpID0+IHNjb3Blc1swXSkge1xuICBpZiAoIWRlZmluZWQoZmFsbGJhY2spKSB7XG4gICAgZmFsbGJhY2sgPSBfcmVzb2x2ZSgnX2ZhbGxiYWNrJywgc2NvcGVzKTtcbiAgfVxuICBjb25zdCBjYWNoZSA9IHtcbiAgICBbU3ltYm9sLnRvU3RyaW5nVGFnXTogJ09iamVjdCcsXG4gICAgX2NhY2hlYWJsZTogdHJ1ZSxcbiAgICBfc2NvcGVzOiBzY29wZXMsXG4gICAgX3Jvb3RTY29wZXM6IHJvb3RTY29wZXMsXG4gICAgX2ZhbGxiYWNrOiBmYWxsYmFjayxcbiAgICBfZ2V0VGFyZ2V0OiBnZXRUYXJnZXQsXG4gICAgb3ZlcnJpZGU6IChzY29wZSkgPT4gX2NyZWF0ZVJlc29sdmVyKFtzY29wZSwgLi4uc2NvcGVzXSwgcHJlZml4ZXMsIHJvb3RTY29wZXMsIGZhbGxiYWNrKSxcbiAgfTtcbiAgcmV0dXJuIG5ldyBQcm94eShjYWNoZSwge1xuICAgIGRlbGV0ZVByb3BlcnR5KHRhcmdldCwgcHJvcCkge1xuICAgICAgZGVsZXRlIHRhcmdldFtwcm9wXTtcbiAgICAgIGRlbGV0ZSB0YXJnZXQuX2tleXM7XG4gICAgICBkZWxldGUgc2NvcGVzWzBdW3Byb3BdO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSxcbiAgICBnZXQodGFyZ2V0LCBwcm9wKSB7XG4gICAgICByZXR1cm4gX2NhY2hlZCh0YXJnZXQsIHByb3AsXG4gICAgICAgICgpID0+IF9yZXNvbHZlV2l0aFByZWZpeGVzKHByb3AsIHByZWZpeGVzLCBzY29wZXMsIHRhcmdldCkpO1xuICAgIH0sXG4gICAgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwgcHJvcCkge1xuICAgICAgcmV0dXJuIFJlZmxlY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldC5fc2NvcGVzWzBdLCBwcm9wKTtcbiAgICB9LFxuICAgIGdldFByb3RvdHlwZU9mKCkge1xuICAgICAgcmV0dXJuIFJlZmxlY3QuZ2V0UHJvdG90eXBlT2Yoc2NvcGVzWzBdKTtcbiAgICB9LFxuICAgIGhhcyh0YXJnZXQsIHByb3ApIHtcbiAgICAgIHJldHVybiBnZXRLZXlzRnJvbUFsbFNjb3Blcyh0YXJnZXQpLmluY2x1ZGVzKHByb3ApO1xuICAgIH0sXG4gICAgb3duS2V5cyh0YXJnZXQpIHtcbiAgICAgIHJldHVybiBnZXRLZXlzRnJvbUFsbFNjb3Blcyh0YXJnZXQpO1xuICAgIH0sXG4gICAgc2V0KHRhcmdldCwgcHJvcCwgdmFsdWUpIHtcbiAgICAgIGNvbnN0IHN0b3JhZ2UgPSB0YXJnZXQuX3N0b3JhZ2UgfHwgKHRhcmdldC5fc3RvcmFnZSA9IGdldFRhcmdldCgpKTtcbiAgICAgIHRhcmdldFtwcm9wXSA9IHN0b3JhZ2VbcHJvcF0gPSB2YWx1ZTtcbiAgICAgIGRlbGV0ZSB0YXJnZXQuX2tleXM7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH0pO1xufVxuZnVuY3Rpb24gX2F0dGFjaENvbnRleHQocHJveHksIGNvbnRleHQsIHN1YlByb3h5LCBkZXNjcmlwdG9yRGVmYXVsdHMpIHtcbiAgY29uc3QgY2FjaGUgPSB7XG4gICAgX2NhY2hlYWJsZTogZmFsc2UsXG4gICAgX3Byb3h5OiBwcm94eSxcbiAgICBfY29udGV4dDogY29udGV4dCxcbiAgICBfc3ViUHJveHk6IHN1YlByb3h5LFxuICAgIF9zdGFjazogbmV3IFNldCgpLFxuICAgIF9kZXNjcmlwdG9yczogX2Rlc2NyaXB0b3JzKHByb3h5LCBkZXNjcmlwdG9yRGVmYXVsdHMpLFxuICAgIHNldENvbnRleHQ6IChjdHgpID0+IF9hdHRhY2hDb250ZXh0KHByb3h5LCBjdHgsIHN1YlByb3h5LCBkZXNjcmlwdG9yRGVmYXVsdHMpLFxuICAgIG92ZXJyaWRlOiAoc2NvcGUpID0+IF9hdHRhY2hDb250ZXh0KHByb3h5Lm92ZXJyaWRlKHNjb3BlKSwgY29udGV4dCwgc3ViUHJveHksIGRlc2NyaXB0b3JEZWZhdWx0cylcbiAgfTtcbiAgcmV0dXJuIG5ldyBQcm94eShjYWNoZSwge1xuICAgIGRlbGV0ZVByb3BlcnR5KHRhcmdldCwgcHJvcCkge1xuICAgICAgZGVsZXRlIHRhcmdldFtwcm9wXTtcbiAgICAgIGRlbGV0ZSBwcm94eVtwcm9wXTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0sXG4gICAgZ2V0KHRhcmdldCwgcHJvcCwgcmVjZWl2ZXIpIHtcbiAgICAgIHJldHVybiBfY2FjaGVkKHRhcmdldCwgcHJvcCxcbiAgICAgICAgKCkgPT4gX3Jlc29sdmVXaXRoQ29udGV4dCh0YXJnZXQsIHByb3AsIHJlY2VpdmVyKSk7XG4gICAgfSxcbiAgICBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBwcm9wKSB7XG4gICAgICByZXR1cm4gdGFyZ2V0Ll9kZXNjcmlwdG9ycy5hbGxLZXlzXG4gICAgICAgID8gUmVmbGVjdC5oYXMocHJveHksIHByb3ApID8ge2VudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZX0gOiB1bmRlZmluZWRcbiAgICAgICAgOiBSZWZsZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihwcm94eSwgcHJvcCk7XG4gICAgfSxcbiAgICBnZXRQcm90b3R5cGVPZigpIHtcbiAgICAgIHJldHVybiBSZWZsZWN0LmdldFByb3RvdHlwZU9mKHByb3h5KTtcbiAgICB9LFxuICAgIGhhcyh0YXJnZXQsIHByb3ApIHtcbiAgICAgIHJldHVybiBSZWZsZWN0Lmhhcyhwcm94eSwgcHJvcCk7XG4gICAgfSxcbiAgICBvd25LZXlzKCkge1xuICAgICAgcmV0dXJuIFJlZmxlY3Qub3duS2V5cyhwcm94eSk7XG4gICAgfSxcbiAgICBzZXQodGFyZ2V0LCBwcm9wLCB2YWx1ZSkge1xuICAgICAgcHJveHlbcHJvcF0gPSB2YWx1ZTtcbiAgICAgIGRlbGV0ZSB0YXJnZXRbcHJvcF07XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH0pO1xufVxuZnVuY3Rpb24gX2Rlc2NyaXB0b3JzKHByb3h5LCBkZWZhdWx0cyA9IHtzY3JpcHRhYmxlOiB0cnVlLCBpbmRleGFibGU6IHRydWV9KSB7XG4gIGNvbnN0IHtfc2NyaXB0YWJsZSA9IGRlZmF1bHRzLnNjcmlwdGFibGUsIF9pbmRleGFibGUgPSBkZWZhdWx0cy5pbmRleGFibGUsIF9hbGxLZXlzID0gZGVmYXVsdHMuYWxsS2V5c30gPSBwcm94eTtcbiAgcmV0dXJuIHtcbiAgICBhbGxLZXlzOiBfYWxsS2V5cyxcbiAgICBzY3JpcHRhYmxlOiBfc2NyaXB0YWJsZSxcbiAgICBpbmRleGFibGU6IF9pbmRleGFibGUsXG4gICAgaXNTY3JpcHRhYmxlOiBpc0Z1bmN0aW9uKF9zY3JpcHRhYmxlKSA/IF9zY3JpcHRhYmxlIDogKCkgPT4gX3NjcmlwdGFibGUsXG4gICAgaXNJbmRleGFibGU6IGlzRnVuY3Rpb24oX2luZGV4YWJsZSkgPyBfaW5kZXhhYmxlIDogKCkgPT4gX2luZGV4YWJsZVxuICB9O1xufVxuY29uc3QgcmVhZEtleSA9IChwcmVmaXgsIG5hbWUpID0+IHByZWZpeCA/IHByZWZpeCArIF9jYXBpdGFsaXplKG5hbWUpIDogbmFtZTtcbmNvbnN0IG5lZWRzU3ViUmVzb2x2ZXIgPSAocHJvcCwgdmFsdWUpID0+IGlzT2JqZWN0KHZhbHVlKSAmJiBwcm9wICE9PSAnYWRhcHRlcnMnICYmXG4gIChPYmplY3QuZ2V0UHJvdG90eXBlT2YodmFsdWUpID09PSBudWxsIHx8IHZhbHVlLmNvbnN0cnVjdG9yID09PSBPYmplY3QpO1xuZnVuY3Rpb24gX2NhY2hlZCh0YXJnZXQsIHByb3AsIHJlc29sdmUpIHtcbiAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh0YXJnZXQsIHByb3ApKSB7XG4gICAgcmV0dXJuIHRhcmdldFtwcm9wXTtcbiAgfVxuICBjb25zdCB2YWx1ZSA9IHJlc29sdmUoKTtcbiAgdGFyZ2V0W3Byb3BdID0gdmFsdWU7XG4gIHJldHVybiB2YWx1ZTtcbn1cbmZ1bmN0aW9uIF9yZXNvbHZlV2l0aENvbnRleHQodGFyZ2V0LCBwcm9wLCByZWNlaXZlcikge1xuICBjb25zdCB7X3Byb3h5LCBfY29udGV4dCwgX3N1YlByb3h5LCBfZGVzY3JpcHRvcnM6IGRlc2NyaXB0b3JzfSA9IHRhcmdldDtcbiAgbGV0IHZhbHVlID0gX3Byb3h5W3Byb3BdO1xuICBpZiAoaXNGdW5jdGlvbih2YWx1ZSkgJiYgZGVzY3JpcHRvcnMuaXNTY3JpcHRhYmxlKHByb3ApKSB7XG4gICAgdmFsdWUgPSBfcmVzb2x2ZVNjcmlwdGFibGUocHJvcCwgdmFsdWUsIHRhcmdldCwgcmVjZWl2ZXIpO1xuICB9XG4gIGlmIChpc0FycmF5KHZhbHVlKSAmJiB2YWx1ZS5sZW5ndGgpIHtcbiAgICB2YWx1ZSA9IF9yZXNvbHZlQXJyYXkocHJvcCwgdmFsdWUsIHRhcmdldCwgZGVzY3JpcHRvcnMuaXNJbmRleGFibGUpO1xuICB9XG4gIGlmIChuZWVkc1N1YlJlc29sdmVyKHByb3AsIHZhbHVlKSkge1xuICAgIHZhbHVlID0gX2F0dGFjaENvbnRleHQodmFsdWUsIF9jb250ZXh0LCBfc3ViUHJveHkgJiYgX3N1YlByb3h5W3Byb3BdLCBkZXNjcmlwdG9ycyk7XG4gIH1cbiAgcmV0dXJuIHZhbHVlO1xufVxuZnVuY3Rpb24gX3Jlc29sdmVTY3JpcHRhYmxlKHByb3AsIHZhbHVlLCB0YXJnZXQsIHJlY2VpdmVyKSB7XG4gIGNvbnN0IHtfcHJveHksIF9jb250ZXh0LCBfc3ViUHJveHksIF9zdGFja30gPSB0YXJnZXQ7XG4gIGlmIChfc3RhY2suaGFzKHByb3ApKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdSZWN1cnNpb24gZGV0ZWN0ZWQ6ICcgKyBBcnJheS5mcm9tKF9zdGFjaykuam9pbignLT4nKSArICctPicgKyBwcm9wKTtcbiAgfVxuICBfc3RhY2suYWRkKHByb3ApO1xuICB2YWx1ZSA9IHZhbHVlKF9jb250ZXh0LCBfc3ViUHJveHkgfHwgcmVjZWl2ZXIpO1xuICBfc3RhY2suZGVsZXRlKHByb3ApO1xuICBpZiAobmVlZHNTdWJSZXNvbHZlcihwcm9wLCB2YWx1ZSkpIHtcbiAgICB2YWx1ZSA9IGNyZWF0ZVN1YlJlc29sdmVyKF9wcm94eS5fc2NvcGVzLCBfcHJveHksIHByb3AsIHZhbHVlKTtcbiAgfVxuICByZXR1cm4gdmFsdWU7XG59XG5mdW5jdGlvbiBfcmVzb2x2ZUFycmF5KHByb3AsIHZhbHVlLCB0YXJnZXQsIGlzSW5kZXhhYmxlKSB7XG4gIGNvbnN0IHtfcHJveHksIF9jb250ZXh0LCBfc3ViUHJveHksIF9kZXNjcmlwdG9yczogZGVzY3JpcHRvcnN9ID0gdGFyZ2V0O1xuICBpZiAoZGVmaW5lZChfY29udGV4dC5pbmRleCkgJiYgaXNJbmRleGFibGUocHJvcCkpIHtcbiAgICB2YWx1ZSA9IHZhbHVlW19jb250ZXh0LmluZGV4ICUgdmFsdWUubGVuZ3RoXTtcbiAgfSBlbHNlIGlmIChpc09iamVjdCh2YWx1ZVswXSkpIHtcbiAgICBjb25zdCBhcnIgPSB2YWx1ZTtcbiAgICBjb25zdCBzY29wZXMgPSBfcHJveHkuX3Njb3Blcy5maWx0ZXIocyA9PiBzICE9PSBhcnIpO1xuICAgIHZhbHVlID0gW107XG4gICAgZm9yIChjb25zdCBpdGVtIG9mIGFycikge1xuICAgICAgY29uc3QgcmVzb2x2ZXIgPSBjcmVhdGVTdWJSZXNvbHZlcihzY29wZXMsIF9wcm94eSwgcHJvcCwgaXRlbSk7XG4gICAgICB2YWx1ZS5wdXNoKF9hdHRhY2hDb250ZXh0KHJlc29sdmVyLCBfY29udGV4dCwgX3N1YlByb3h5ICYmIF9zdWJQcm94eVtwcm9wXSwgZGVzY3JpcHRvcnMpKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHZhbHVlO1xufVxuZnVuY3Rpb24gcmVzb2x2ZUZhbGxiYWNrKGZhbGxiYWNrLCBwcm9wLCB2YWx1ZSkge1xuICByZXR1cm4gaXNGdW5jdGlvbihmYWxsYmFjaykgPyBmYWxsYmFjayhwcm9wLCB2YWx1ZSkgOiBmYWxsYmFjaztcbn1cbmNvbnN0IGdldFNjb3BlID0gKGtleSwgcGFyZW50KSA9PiBrZXkgPT09IHRydWUgPyBwYXJlbnRcbiAgOiB0eXBlb2Yga2V5ID09PSAnc3RyaW5nJyA/IHJlc29sdmVPYmplY3RLZXkocGFyZW50LCBrZXkpIDogdW5kZWZpbmVkO1xuZnVuY3Rpb24gYWRkU2NvcGVzKHNldCwgcGFyZW50U2NvcGVzLCBrZXksIHBhcmVudEZhbGxiYWNrLCB2YWx1ZSkge1xuICBmb3IgKGNvbnN0IHBhcmVudCBvZiBwYXJlbnRTY29wZXMpIHtcbiAgICBjb25zdCBzY29wZSA9IGdldFNjb3BlKGtleSwgcGFyZW50KTtcbiAgICBpZiAoc2NvcGUpIHtcbiAgICAgIHNldC5hZGQoc2NvcGUpO1xuICAgICAgY29uc3QgZmFsbGJhY2sgPSByZXNvbHZlRmFsbGJhY2soc2NvcGUuX2ZhbGxiYWNrLCBrZXksIHZhbHVlKTtcbiAgICAgIGlmIChkZWZpbmVkKGZhbGxiYWNrKSAmJiBmYWxsYmFjayAhPT0ga2V5ICYmIGZhbGxiYWNrICE9PSBwYXJlbnRGYWxsYmFjaykge1xuICAgICAgICByZXR1cm4gZmFsbGJhY2s7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChzY29wZSA9PT0gZmFsc2UgJiYgZGVmaW5lZChwYXJlbnRGYWxsYmFjaykgJiYga2V5ICE9PSBwYXJlbnRGYWxsYmFjaykge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICB9XG4gIHJldHVybiBmYWxzZTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZVN1YlJlc29sdmVyKHBhcmVudFNjb3BlcywgcmVzb2x2ZXIsIHByb3AsIHZhbHVlKSB7XG4gIGNvbnN0IHJvb3RTY29wZXMgPSByZXNvbHZlci5fcm9vdFNjb3BlcztcbiAgY29uc3QgZmFsbGJhY2sgPSByZXNvbHZlRmFsbGJhY2socmVzb2x2ZXIuX2ZhbGxiYWNrLCBwcm9wLCB2YWx1ZSk7XG4gIGNvbnN0IGFsbFNjb3BlcyA9IFsuLi5wYXJlbnRTY29wZXMsIC4uLnJvb3RTY29wZXNdO1xuICBjb25zdCBzZXQgPSBuZXcgU2V0KCk7XG4gIHNldC5hZGQodmFsdWUpO1xuICBsZXQga2V5ID0gYWRkU2NvcGVzRnJvbUtleShzZXQsIGFsbFNjb3BlcywgcHJvcCwgZmFsbGJhY2sgfHwgcHJvcCwgdmFsdWUpO1xuICBpZiAoa2V5ID09PSBudWxsKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGlmIChkZWZpbmVkKGZhbGxiYWNrKSAmJiBmYWxsYmFjayAhPT0gcHJvcCkge1xuICAgIGtleSA9IGFkZFNjb3Blc0Zyb21LZXkoc2V0LCBhbGxTY29wZXMsIGZhbGxiYWNrLCBrZXksIHZhbHVlKTtcbiAgICBpZiAoa2V5ID09PSBudWxsKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG4gIHJldHVybiBfY3JlYXRlUmVzb2x2ZXIoQXJyYXkuZnJvbShzZXQpLCBbJyddLCByb290U2NvcGVzLCBmYWxsYmFjayxcbiAgICAoKSA9PiBzdWJHZXRUYXJnZXQocmVzb2x2ZXIsIHByb3AsIHZhbHVlKSk7XG59XG5mdW5jdGlvbiBhZGRTY29wZXNGcm9tS2V5KHNldCwgYWxsU2NvcGVzLCBrZXksIGZhbGxiYWNrLCBpdGVtKSB7XG4gIHdoaWxlIChrZXkpIHtcbiAgICBrZXkgPSBhZGRTY29wZXMoc2V0LCBhbGxTY29wZXMsIGtleSwgZmFsbGJhY2ssIGl0ZW0pO1xuICB9XG4gIHJldHVybiBrZXk7XG59XG5mdW5jdGlvbiBzdWJHZXRUYXJnZXQocmVzb2x2ZXIsIHByb3AsIHZhbHVlKSB7XG4gIGNvbnN0IHBhcmVudCA9IHJlc29sdmVyLl9nZXRUYXJnZXQoKTtcbiAgaWYgKCEocHJvcCBpbiBwYXJlbnQpKSB7XG4gICAgcGFyZW50W3Byb3BdID0ge307XG4gIH1cbiAgY29uc3QgdGFyZ2V0ID0gcGFyZW50W3Byb3BdO1xuICBpZiAoaXNBcnJheSh0YXJnZXQpICYmIGlzT2JqZWN0KHZhbHVlKSkge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuICByZXR1cm4gdGFyZ2V0O1xufVxuZnVuY3Rpb24gX3Jlc29sdmVXaXRoUHJlZml4ZXMocHJvcCwgcHJlZml4ZXMsIHNjb3BlcywgcHJveHkpIHtcbiAgbGV0IHZhbHVlO1xuICBmb3IgKGNvbnN0IHByZWZpeCBvZiBwcmVmaXhlcykge1xuICAgIHZhbHVlID0gX3Jlc29sdmUocmVhZEtleShwcmVmaXgsIHByb3ApLCBzY29wZXMpO1xuICAgIGlmIChkZWZpbmVkKHZhbHVlKSkge1xuICAgICAgcmV0dXJuIG5lZWRzU3ViUmVzb2x2ZXIocHJvcCwgdmFsdWUpXG4gICAgICAgID8gY3JlYXRlU3ViUmVzb2x2ZXIoc2NvcGVzLCBwcm94eSwgcHJvcCwgdmFsdWUpXG4gICAgICAgIDogdmFsdWU7XG4gICAgfVxuICB9XG59XG5mdW5jdGlvbiBfcmVzb2x2ZShrZXksIHNjb3Blcykge1xuICBmb3IgKGNvbnN0IHNjb3BlIG9mIHNjb3Blcykge1xuICAgIGlmICghc2NvcGUpIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICBjb25zdCB2YWx1ZSA9IHNjb3BlW2tleV07XG4gICAgaWYgKGRlZmluZWQodmFsdWUpKSB7XG4gICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuICB9XG59XG5mdW5jdGlvbiBnZXRLZXlzRnJvbUFsbFNjb3Blcyh0YXJnZXQpIHtcbiAgbGV0IGtleXMgPSB0YXJnZXQuX2tleXM7XG4gIGlmICgha2V5cykge1xuICAgIGtleXMgPSB0YXJnZXQuX2tleXMgPSByZXNvbHZlS2V5c0Zyb21BbGxTY29wZXModGFyZ2V0Ll9zY29wZXMpO1xuICB9XG4gIHJldHVybiBrZXlzO1xufVxuZnVuY3Rpb24gcmVzb2x2ZUtleXNGcm9tQWxsU2NvcGVzKHNjb3Blcykge1xuICBjb25zdCBzZXQgPSBuZXcgU2V0KCk7XG4gIGZvciAoY29uc3Qgc2NvcGUgb2Ygc2NvcGVzKSB7XG4gICAgZm9yIChjb25zdCBrZXkgb2YgT2JqZWN0LmtleXMoc2NvcGUpLmZpbHRlcihrID0+ICFrLnN0YXJ0c1dpdGgoJ18nKSkpIHtcbiAgICAgIHNldC5hZGQoa2V5KTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIEFycmF5LmZyb20oc2V0KTtcbn1cblxuY29uc3QgRVBTSUxPTiA9IE51bWJlci5FUFNJTE9OIHx8IDFlLTE0O1xuY29uc3QgZ2V0UG9pbnQgPSAocG9pbnRzLCBpKSA9PiBpIDwgcG9pbnRzLmxlbmd0aCAmJiAhcG9pbnRzW2ldLnNraXAgJiYgcG9pbnRzW2ldO1xuY29uc3QgZ2V0VmFsdWVBeGlzID0gKGluZGV4QXhpcykgPT4gaW5kZXhBeGlzID09PSAneCcgPyAneScgOiAneCc7XG5mdW5jdGlvbiBzcGxpbmVDdXJ2ZShmaXJzdFBvaW50LCBtaWRkbGVQb2ludCwgYWZ0ZXJQb2ludCwgdCkge1xuICBjb25zdCBwcmV2aW91cyA9IGZpcnN0UG9pbnQuc2tpcCA/IG1pZGRsZVBvaW50IDogZmlyc3RQb2ludDtcbiAgY29uc3QgY3VycmVudCA9IG1pZGRsZVBvaW50O1xuICBjb25zdCBuZXh0ID0gYWZ0ZXJQb2ludC5za2lwID8gbWlkZGxlUG9pbnQgOiBhZnRlclBvaW50O1xuICBjb25zdCBkMDEgPSBkaXN0YW5jZUJldHdlZW5Qb2ludHMoY3VycmVudCwgcHJldmlvdXMpO1xuICBjb25zdCBkMTIgPSBkaXN0YW5jZUJldHdlZW5Qb2ludHMobmV4dCwgY3VycmVudCk7XG4gIGxldCBzMDEgPSBkMDEgLyAoZDAxICsgZDEyKTtcbiAgbGV0IHMxMiA9IGQxMiAvIChkMDEgKyBkMTIpO1xuICBzMDEgPSBpc05hTihzMDEpID8gMCA6IHMwMTtcbiAgczEyID0gaXNOYU4oczEyKSA/IDAgOiBzMTI7XG4gIGNvbnN0IGZhID0gdCAqIHMwMTtcbiAgY29uc3QgZmIgPSB0ICogczEyO1xuICByZXR1cm4ge1xuICAgIHByZXZpb3VzOiB7XG4gICAgICB4OiBjdXJyZW50LnggLSBmYSAqIChuZXh0LnggLSBwcmV2aW91cy54KSxcbiAgICAgIHk6IGN1cnJlbnQueSAtIGZhICogKG5leHQueSAtIHByZXZpb3VzLnkpXG4gICAgfSxcbiAgICBuZXh0OiB7XG4gICAgICB4OiBjdXJyZW50LnggKyBmYiAqIChuZXh0LnggLSBwcmV2aW91cy54KSxcbiAgICAgIHk6IGN1cnJlbnQueSArIGZiICogKG5leHQueSAtIHByZXZpb3VzLnkpXG4gICAgfVxuICB9O1xufVxuZnVuY3Rpb24gbW9ub3RvbmVBZGp1c3QocG9pbnRzLCBkZWx0YUssIG1LKSB7XG4gIGNvbnN0IHBvaW50c0xlbiA9IHBvaW50cy5sZW5ndGg7XG4gIGxldCBhbHBoYUssIGJldGFLLCB0YXVLLCBzcXVhcmVkTWFnbml0dWRlLCBwb2ludEN1cnJlbnQ7XG4gIGxldCBwb2ludEFmdGVyID0gZ2V0UG9pbnQocG9pbnRzLCAwKTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBwb2ludHNMZW4gLSAxOyArK2kpIHtcbiAgICBwb2ludEN1cnJlbnQgPSBwb2ludEFmdGVyO1xuICAgIHBvaW50QWZ0ZXIgPSBnZXRQb2ludChwb2ludHMsIGkgKyAxKTtcbiAgICBpZiAoIXBvaW50Q3VycmVudCB8fCAhcG9pbnRBZnRlcikge1xuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIGlmIChhbG1vc3RFcXVhbHMoZGVsdGFLW2ldLCAwLCBFUFNJTE9OKSkge1xuICAgICAgbUtbaV0gPSBtS1tpICsgMV0gPSAwO1xuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIGFscGhhSyA9IG1LW2ldIC8gZGVsdGFLW2ldO1xuICAgIGJldGFLID0gbUtbaSArIDFdIC8gZGVsdGFLW2ldO1xuICAgIHNxdWFyZWRNYWduaXR1ZGUgPSBNYXRoLnBvdyhhbHBoYUssIDIpICsgTWF0aC5wb3coYmV0YUssIDIpO1xuICAgIGlmIChzcXVhcmVkTWFnbml0dWRlIDw9IDkpIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICB0YXVLID0gMyAvIE1hdGguc3FydChzcXVhcmVkTWFnbml0dWRlKTtcbiAgICBtS1tpXSA9IGFscGhhSyAqIHRhdUsgKiBkZWx0YUtbaV07XG4gICAgbUtbaSArIDFdID0gYmV0YUsgKiB0YXVLICogZGVsdGFLW2ldO1xuICB9XG59XG5mdW5jdGlvbiBtb25vdG9uZUNvbXB1dGUocG9pbnRzLCBtSywgaW5kZXhBeGlzID0gJ3gnKSB7XG4gIGNvbnN0IHZhbHVlQXhpcyA9IGdldFZhbHVlQXhpcyhpbmRleEF4aXMpO1xuICBjb25zdCBwb2ludHNMZW4gPSBwb2ludHMubGVuZ3RoO1xuICBsZXQgZGVsdGEsIHBvaW50QmVmb3JlLCBwb2ludEN1cnJlbnQ7XG4gIGxldCBwb2ludEFmdGVyID0gZ2V0UG9pbnQocG9pbnRzLCAwKTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBwb2ludHNMZW47ICsraSkge1xuICAgIHBvaW50QmVmb3JlID0gcG9pbnRDdXJyZW50O1xuICAgIHBvaW50Q3VycmVudCA9IHBvaW50QWZ0ZXI7XG4gICAgcG9pbnRBZnRlciA9IGdldFBvaW50KHBvaW50cywgaSArIDEpO1xuICAgIGlmICghcG9pbnRDdXJyZW50KSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgY29uc3QgaVBpeGVsID0gcG9pbnRDdXJyZW50W2luZGV4QXhpc107XG4gICAgY29uc3QgdlBpeGVsID0gcG9pbnRDdXJyZW50W3ZhbHVlQXhpc107XG4gICAgaWYgKHBvaW50QmVmb3JlKSB7XG4gICAgICBkZWx0YSA9IChpUGl4ZWwgLSBwb2ludEJlZm9yZVtpbmRleEF4aXNdKSAvIDM7XG4gICAgICBwb2ludEN1cnJlbnRbYGNwMSR7aW5kZXhBeGlzfWBdID0gaVBpeGVsIC0gZGVsdGE7XG4gICAgICBwb2ludEN1cnJlbnRbYGNwMSR7dmFsdWVBeGlzfWBdID0gdlBpeGVsIC0gZGVsdGEgKiBtS1tpXTtcbiAgICB9XG4gICAgaWYgKHBvaW50QWZ0ZXIpIHtcbiAgICAgIGRlbHRhID0gKHBvaW50QWZ0ZXJbaW5kZXhBeGlzXSAtIGlQaXhlbCkgLyAzO1xuICAgICAgcG9pbnRDdXJyZW50W2BjcDIke2luZGV4QXhpc31gXSA9IGlQaXhlbCArIGRlbHRhO1xuICAgICAgcG9pbnRDdXJyZW50W2BjcDIke3ZhbHVlQXhpc31gXSA9IHZQaXhlbCArIGRlbHRhICogbUtbaV07XG4gICAgfVxuICB9XG59XG5mdW5jdGlvbiBzcGxpbmVDdXJ2ZU1vbm90b25lKHBvaW50cywgaW5kZXhBeGlzID0gJ3gnKSB7XG4gIGNvbnN0IHZhbHVlQXhpcyA9IGdldFZhbHVlQXhpcyhpbmRleEF4aXMpO1xuICBjb25zdCBwb2ludHNMZW4gPSBwb2ludHMubGVuZ3RoO1xuICBjb25zdCBkZWx0YUsgPSBBcnJheShwb2ludHNMZW4pLmZpbGwoMCk7XG4gIGNvbnN0IG1LID0gQXJyYXkocG9pbnRzTGVuKTtcbiAgbGV0IGksIHBvaW50QmVmb3JlLCBwb2ludEN1cnJlbnQ7XG4gIGxldCBwb2ludEFmdGVyID0gZ2V0UG9pbnQocG9pbnRzLCAwKTtcbiAgZm9yIChpID0gMDsgaSA8IHBvaW50c0xlbjsgKytpKSB7XG4gICAgcG9pbnRCZWZvcmUgPSBwb2ludEN1cnJlbnQ7XG4gICAgcG9pbnRDdXJyZW50ID0gcG9pbnRBZnRlcjtcbiAgICBwb2ludEFmdGVyID0gZ2V0UG9pbnQocG9pbnRzLCBpICsgMSk7XG4gICAgaWYgKCFwb2ludEN1cnJlbnQpIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICBpZiAocG9pbnRBZnRlcikge1xuICAgICAgY29uc3Qgc2xvcGVEZWx0YSA9IHBvaW50QWZ0ZXJbaW5kZXhBeGlzXSAtIHBvaW50Q3VycmVudFtpbmRleEF4aXNdO1xuICAgICAgZGVsdGFLW2ldID0gc2xvcGVEZWx0YSAhPT0gMCA/IChwb2ludEFmdGVyW3ZhbHVlQXhpc10gLSBwb2ludEN1cnJlbnRbdmFsdWVBeGlzXSkgLyBzbG9wZURlbHRhIDogMDtcbiAgICB9XG4gICAgbUtbaV0gPSAhcG9pbnRCZWZvcmUgPyBkZWx0YUtbaV1cbiAgICAgIDogIXBvaW50QWZ0ZXIgPyBkZWx0YUtbaSAtIDFdXG4gICAgICA6IChzaWduKGRlbHRhS1tpIC0gMV0pICE9PSBzaWduKGRlbHRhS1tpXSkpID8gMFxuICAgICAgOiAoZGVsdGFLW2kgLSAxXSArIGRlbHRhS1tpXSkgLyAyO1xuICB9XG4gIG1vbm90b25lQWRqdXN0KHBvaW50cywgZGVsdGFLLCBtSyk7XG4gIG1vbm90b25lQ29tcHV0ZShwb2ludHMsIG1LLCBpbmRleEF4aXMpO1xufVxuZnVuY3Rpb24gY2FwQ29udHJvbFBvaW50KHB0LCBtaW4sIG1heCkge1xuICByZXR1cm4gTWF0aC5tYXgoTWF0aC5taW4ocHQsIG1heCksIG1pbik7XG59XG5mdW5jdGlvbiBjYXBCZXppZXJQb2ludHMocG9pbnRzLCBhcmVhKSB7XG4gIGxldCBpLCBpbGVuLCBwb2ludCwgaW5BcmVhLCBpbkFyZWFQcmV2O1xuICBsZXQgaW5BcmVhTmV4dCA9IF9pc1BvaW50SW5BcmVhKHBvaW50c1swXSwgYXJlYSk7XG4gIGZvciAoaSA9IDAsIGlsZW4gPSBwb2ludHMubGVuZ3RoOyBpIDwgaWxlbjsgKytpKSB7XG4gICAgaW5BcmVhUHJldiA9IGluQXJlYTtcbiAgICBpbkFyZWEgPSBpbkFyZWFOZXh0O1xuICAgIGluQXJlYU5leHQgPSBpIDwgaWxlbiAtIDEgJiYgX2lzUG9pbnRJbkFyZWEocG9pbnRzW2kgKyAxXSwgYXJlYSk7XG4gICAgaWYgKCFpbkFyZWEpIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICBwb2ludCA9IHBvaW50c1tpXTtcbiAgICBpZiAoaW5BcmVhUHJldikge1xuICAgICAgcG9pbnQuY3AxeCA9IGNhcENvbnRyb2xQb2ludChwb2ludC5jcDF4LCBhcmVhLmxlZnQsIGFyZWEucmlnaHQpO1xuICAgICAgcG9pbnQuY3AxeSA9IGNhcENvbnRyb2xQb2ludChwb2ludC5jcDF5LCBhcmVhLnRvcCwgYXJlYS5ib3R0b20pO1xuICAgIH1cbiAgICBpZiAoaW5BcmVhTmV4dCkge1xuICAgICAgcG9pbnQuY3AyeCA9IGNhcENvbnRyb2xQb2ludChwb2ludC5jcDJ4LCBhcmVhLmxlZnQsIGFyZWEucmlnaHQpO1xuICAgICAgcG9pbnQuY3AyeSA9IGNhcENvbnRyb2xQb2ludChwb2ludC5jcDJ5LCBhcmVhLnRvcCwgYXJlYS5ib3R0b20pO1xuICAgIH1cbiAgfVxufVxuZnVuY3Rpb24gX3VwZGF0ZUJlemllckNvbnRyb2xQb2ludHMocG9pbnRzLCBvcHRpb25zLCBhcmVhLCBsb29wLCBpbmRleEF4aXMpIHtcbiAgbGV0IGksIGlsZW4sIHBvaW50LCBjb250cm9sUG9pbnRzO1xuICBpZiAob3B0aW9ucy5zcGFuR2Fwcykge1xuICAgIHBvaW50cyA9IHBvaW50cy5maWx0ZXIoKHB0KSA9PiAhcHQuc2tpcCk7XG4gIH1cbiAgaWYgKG9wdGlvbnMuY3ViaWNJbnRlcnBvbGF0aW9uTW9kZSA9PT0gJ21vbm90b25lJykge1xuICAgIHNwbGluZUN1cnZlTW9ub3RvbmUocG9pbnRzLCBpbmRleEF4aXMpO1xuICB9IGVsc2Uge1xuICAgIGxldCBwcmV2ID0gbG9vcCA/IHBvaW50c1twb2ludHMubGVuZ3RoIC0gMV0gOiBwb2ludHNbMF07XG4gICAgZm9yIChpID0gMCwgaWxlbiA9IHBvaW50cy5sZW5ndGg7IGkgPCBpbGVuOyArK2kpIHtcbiAgICAgIHBvaW50ID0gcG9pbnRzW2ldO1xuICAgICAgY29udHJvbFBvaW50cyA9IHNwbGluZUN1cnZlKFxuICAgICAgICBwcmV2LFxuICAgICAgICBwb2ludCxcbiAgICAgICAgcG9pbnRzW01hdGgubWluKGkgKyAxLCBpbGVuIC0gKGxvb3AgPyAwIDogMSkpICUgaWxlbl0sXG4gICAgICAgIG9wdGlvbnMudGVuc2lvblxuICAgICAgKTtcbiAgICAgIHBvaW50LmNwMXggPSBjb250cm9sUG9pbnRzLnByZXZpb3VzLng7XG4gICAgICBwb2ludC5jcDF5ID0gY29udHJvbFBvaW50cy5wcmV2aW91cy55O1xuICAgICAgcG9pbnQuY3AyeCA9IGNvbnRyb2xQb2ludHMubmV4dC54O1xuICAgICAgcG9pbnQuY3AyeSA9IGNvbnRyb2xQb2ludHMubmV4dC55O1xuICAgICAgcHJldiA9IHBvaW50O1xuICAgIH1cbiAgfVxuICBpZiAob3B0aW9ucy5jYXBCZXppZXJQb2ludHMpIHtcbiAgICBjYXBCZXppZXJQb2ludHMocG9pbnRzLCBhcmVhKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBfaXNEb21TdXBwb3J0ZWQoKSB7XG4gIHJldHVybiB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnO1xufVxuZnVuY3Rpb24gX2dldFBhcmVudE5vZGUoZG9tTm9kZSkge1xuICBsZXQgcGFyZW50ID0gZG9tTm9kZS5wYXJlbnROb2RlO1xuICBpZiAocGFyZW50ICYmIHBhcmVudC50b1N0cmluZygpID09PSAnW29iamVjdCBTaGFkb3dSb290XScpIHtcbiAgICBwYXJlbnQgPSBwYXJlbnQuaG9zdDtcbiAgfVxuICByZXR1cm4gcGFyZW50O1xufVxuZnVuY3Rpb24gcGFyc2VNYXhTdHlsZShzdHlsZVZhbHVlLCBub2RlLCBwYXJlbnRQcm9wZXJ0eSkge1xuICBsZXQgdmFsdWVJblBpeGVscztcbiAgaWYgKHR5cGVvZiBzdHlsZVZhbHVlID09PSAnc3RyaW5nJykge1xuICAgIHZhbHVlSW5QaXhlbHMgPSBwYXJzZUludChzdHlsZVZhbHVlLCAxMCk7XG4gICAgaWYgKHN0eWxlVmFsdWUuaW5kZXhPZignJScpICE9PSAtMSkge1xuICAgICAgdmFsdWVJblBpeGVscyA9IHZhbHVlSW5QaXhlbHMgLyAxMDAgKiBub2RlLnBhcmVudE5vZGVbcGFyZW50UHJvcGVydHldO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB2YWx1ZUluUGl4ZWxzID0gc3R5bGVWYWx1ZTtcbiAgfVxuICByZXR1cm4gdmFsdWVJblBpeGVscztcbn1cbmNvbnN0IGdldENvbXB1dGVkU3R5bGUgPSAoZWxlbWVudCkgPT4gd2luZG93LmdldENvbXB1dGVkU3R5bGUoZWxlbWVudCwgbnVsbCk7XG5mdW5jdGlvbiBnZXRTdHlsZShlbCwgcHJvcGVydHkpIHtcbiAgcmV0dXJuIGdldENvbXB1dGVkU3R5bGUoZWwpLmdldFByb3BlcnR5VmFsdWUocHJvcGVydHkpO1xufVxuY29uc3QgcG9zaXRpb25zID0gWyd0b3AnLCAncmlnaHQnLCAnYm90dG9tJywgJ2xlZnQnXTtcbmZ1bmN0aW9uIGdldFBvc2l0aW9uZWRTdHlsZShzdHlsZXMsIHN0eWxlLCBzdWZmaXgpIHtcbiAgY29uc3QgcmVzdWx0ID0ge307XG4gIHN1ZmZpeCA9IHN1ZmZpeCA/ICctJyArIHN1ZmZpeCA6ICcnO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IDQ7IGkrKykge1xuICAgIGNvbnN0IHBvcyA9IHBvc2l0aW9uc1tpXTtcbiAgICByZXN1bHRbcG9zXSA9IHBhcnNlRmxvYXQoc3R5bGVzW3N0eWxlICsgJy0nICsgcG9zICsgc3VmZml4XSkgfHwgMDtcbiAgfVxuICByZXN1bHQud2lkdGggPSByZXN1bHQubGVmdCArIHJlc3VsdC5yaWdodDtcbiAgcmVzdWx0LmhlaWdodCA9IHJlc3VsdC50b3AgKyByZXN1bHQuYm90dG9tO1xuICByZXR1cm4gcmVzdWx0O1xufVxuY29uc3QgdXNlT2Zmc2V0UG9zID0gKHgsIHksIHRhcmdldCkgPT4gKHggPiAwIHx8IHkgPiAwKSAmJiAoIXRhcmdldCB8fCAhdGFyZ2V0LnNoYWRvd1Jvb3QpO1xuZnVuY3Rpb24gZ2V0Q2FudmFzUG9zaXRpb24oZXZ0LCBjYW52YXMpIHtcbiAgY29uc3QgZSA9IGV2dC5uYXRpdmUgfHwgZXZ0O1xuICBjb25zdCB0b3VjaGVzID0gZS50b3VjaGVzO1xuICBjb25zdCBzb3VyY2UgPSB0b3VjaGVzICYmIHRvdWNoZXMubGVuZ3RoID8gdG91Y2hlc1swXSA6IGU7XG4gIGNvbnN0IHtvZmZzZXRYLCBvZmZzZXRZfSA9IHNvdXJjZTtcbiAgbGV0IGJveCA9IGZhbHNlO1xuICBsZXQgeCwgeTtcbiAgaWYgKHVzZU9mZnNldFBvcyhvZmZzZXRYLCBvZmZzZXRZLCBlLnRhcmdldCkpIHtcbiAgICB4ID0gb2Zmc2V0WDtcbiAgICB5ID0gb2Zmc2V0WTtcbiAgfSBlbHNlIHtcbiAgICBjb25zdCByZWN0ID0gY2FudmFzLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgIHggPSBzb3VyY2UuY2xpZW50WCAtIHJlY3QubGVmdDtcbiAgICB5ID0gc291cmNlLmNsaWVudFkgLSByZWN0LnRvcDtcbiAgICBib3ggPSB0cnVlO1xuICB9XG4gIHJldHVybiB7eCwgeSwgYm94fTtcbn1cbmZ1bmN0aW9uIGdldFJlbGF0aXZlUG9zaXRpb24oZXZ0LCBjaGFydCkge1xuICBjb25zdCB7Y2FudmFzLCBjdXJyZW50RGV2aWNlUGl4ZWxSYXRpb30gPSBjaGFydDtcbiAgY29uc3Qgc3R5bGUgPSBnZXRDb21wdXRlZFN0eWxlKGNhbnZhcyk7XG4gIGNvbnN0IGJvcmRlckJveCA9IHN0eWxlLmJveFNpemluZyA9PT0gJ2JvcmRlci1ib3gnO1xuICBjb25zdCBwYWRkaW5ncyA9IGdldFBvc2l0aW9uZWRTdHlsZShzdHlsZSwgJ3BhZGRpbmcnKTtcbiAgY29uc3QgYm9yZGVycyA9IGdldFBvc2l0aW9uZWRTdHlsZShzdHlsZSwgJ2JvcmRlcicsICd3aWR0aCcpO1xuICBjb25zdCB7eCwgeSwgYm94fSA9IGdldENhbnZhc1Bvc2l0aW9uKGV2dCwgY2FudmFzKTtcbiAgY29uc3QgeE9mZnNldCA9IHBhZGRpbmdzLmxlZnQgKyAoYm94ICYmIGJvcmRlcnMubGVmdCk7XG4gIGNvbnN0IHlPZmZzZXQgPSBwYWRkaW5ncy50b3AgKyAoYm94ICYmIGJvcmRlcnMudG9wKTtcbiAgbGV0IHt3aWR0aCwgaGVpZ2h0fSA9IGNoYXJ0O1xuICBpZiAoYm9yZGVyQm94KSB7XG4gICAgd2lkdGggLT0gcGFkZGluZ3Mud2lkdGggKyBib3JkZXJzLndpZHRoO1xuICAgIGhlaWdodCAtPSBwYWRkaW5ncy5oZWlnaHQgKyBib3JkZXJzLmhlaWdodDtcbiAgfVxuICByZXR1cm4ge1xuICAgIHg6IE1hdGgucm91bmQoKHggLSB4T2Zmc2V0KSAvIHdpZHRoICogY2FudmFzLndpZHRoIC8gY3VycmVudERldmljZVBpeGVsUmF0aW8pLFxuICAgIHk6IE1hdGgucm91bmQoKHkgLSB5T2Zmc2V0KSAvIGhlaWdodCAqIGNhbnZhcy5oZWlnaHQgLyBjdXJyZW50RGV2aWNlUGl4ZWxSYXRpbylcbiAgfTtcbn1cbmZ1bmN0aW9uIGdldENvbnRhaW5lclNpemUoY2FudmFzLCB3aWR0aCwgaGVpZ2h0KSB7XG4gIGxldCBtYXhXaWR0aCwgbWF4SGVpZ2h0O1xuICBpZiAod2lkdGggPT09IHVuZGVmaW5lZCB8fCBoZWlnaHQgPT09IHVuZGVmaW5lZCkge1xuICAgIGNvbnN0IGNvbnRhaW5lciA9IF9nZXRQYXJlbnROb2RlKGNhbnZhcyk7XG4gICAgaWYgKCFjb250YWluZXIpIHtcbiAgICAgIHdpZHRoID0gY2FudmFzLmNsaWVudFdpZHRoO1xuICAgICAgaGVpZ2h0ID0gY2FudmFzLmNsaWVudEhlaWdodDtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgcmVjdCA9IGNvbnRhaW5lci5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgIGNvbnN0IGNvbnRhaW5lclN0eWxlID0gZ2V0Q29tcHV0ZWRTdHlsZShjb250YWluZXIpO1xuICAgICAgY29uc3QgY29udGFpbmVyQm9yZGVyID0gZ2V0UG9zaXRpb25lZFN0eWxlKGNvbnRhaW5lclN0eWxlLCAnYm9yZGVyJywgJ3dpZHRoJyk7XG4gICAgICBjb25zdCBjb250YWluZXJQYWRkaW5nID0gZ2V0UG9zaXRpb25lZFN0eWxlKGNvbnRhaW5lclN0eWxlLCAncGFkZGluZycpO1xuICAgICAgd2lkdGggPSByZWN0LndpZHRoIC0gY29udGFpbmVyUGFkZGluZy53aWR0aCAtIGNvbnRhaW5lckJvcmRlci53aWR0aDtcbiAgICAgIGhlaWdodCA9IHJlY3QuaGVpZ2h0IC0gY29udGFpbmVyUGFkZGluZy5oZWlnaHQgLSBjb250YWluZXJCb3JkZXIuaGVpZ2h0O1xuICAgICAgbWF4V2lkdGggPSBwYXJzZU1heFN0eWxlKGNvbnRhaW5lclN0eWxlLm1heFdpZHRoLCBjb250YWluZXIsICdjbGllbnRXaWR0aCcpO1xuICAgICAgbWF4SGVpZ2h0ID0gcGFyc2VNYXhTdHlsZShjb250YWluZXJTdHlsZS5tYXhIZWlnaHQsIGNvbnRhaW5lciwgJ2NsaWVudEhlaWdodCcpO1xuICAgIH1cbiAgfVxuICByZXR1cm4ge1xuICAgIHdpZHRoLFxuICAgIGhlaWdodCxcbiAgICBtYXhXaWR0aDogbWF4V2lkdGggfHwgSU5GSU5JVFksXG4gICAgbWF4SGVpZ2h0OiBtYXhIZWlnaHQgfHwgSU5GSU5JVFlcbiAgfTtcbn1cbmNvbnN0IHJvdW5kMSA9IHYgPT4gTWF0aC5yb3VuZCh2ICogMTApIC8gMTA7XG5mdW5jdGlvbiBnZXRNYXhpbXVtU2l6ZShjYW52YXMsIGJiV2lkdGgsIGJiSGVpZ2h0LCBhc3BlY3RSYXRpbykge1xuICBjb25zdCBzdHlsZSA9IGdldENvbXB1dGVkU3R5bGUoY2FudmFzKTtcbiAgY29uc3QgbWFyZ2lucyA9IGdldFBvc2l0aW9uZWRTdHlsZShzdHlsZSwgJ21hcmdpbicpO1xuICBjb25zdCBtYXhXaWR0aCA9IHBhcnNlTWF4U3R5bGUoc3R5bGUubWF4V2lkdGgsIGNhbnZhcywgJ2NsaWVudFdpZHRoJykgfHwgSU5GSU5JVFk7XG4gIGNvbnN0IG1heEhlaWdodCA9IHBhcnNlTWF4U3R5bGUoc3R5bGUubWF4SGVpZ2h0LCBjYW52YXMsICdjbGllbnRIZWlnaHQnKSB8fCBJTkZJTklUWTtcbiAgY29uc3QgY29udGFpbmVyU2l6ZSA9IGdldENvbnRhaW5lclNpemUoY2FudmFzLCBiYldpZHRoLCBiYkhlaWdodCk7XG4gIGxldCB7d2lkdGgsIGhlaWdodH0gPSBjb250YWluZXJTaXplO1xuICBpZiAoc3R5bGUuYm94U2l6aW5nID09PSAnY29udGVudC1ib3gnKSB7XG4gICAgY29uc3QgYm9yZGVycyA9IGdldFBvc2l0aW9uZWRTdHlsZShzdHlsZSwgJ2JvcmRlcicsICd3aWR0aCcpO1xuICAgIGNvbnN0IHBhZGRpbmdzID0gZ2V0UG9zaXRpb25lZFN0eWxlKHN0eWxlLCAncGFkZGluZycpO1xuICAgIHdpZHRoIC09IHBhZGRpbmdzLndpZHRoICsgYm9yZGVycy53aWR0aDtcbiAgICBoZWlnaHQgLT0gcGFkZGluZ3MuaGVpZ2h0ICsgYm9yZGVycy5oZWlnaHQ7XG4gIH1cbiAgd2lkdGggPSBNYXRoLm1heCgwLCB3aWR0aCAtIG1hcmdpbnMud2lkdGgpO1xuICBoZWlnaHQgPSBNYXRoLm1heCgwLCBhc3BlY3RSYXRpbyA/IE1hdGguZmxvb3Iod2lkdGggLyBhc3BlY3RSYXRpbykgOiBoZWlnaHQgLSBtYXJnaW5zLmhlaWdodCk7XG4gIHdpZHRoID0gcm91bmQxKE1hdGgubWluKHdpZHRoLCBtYXhXaWR0aCwgY29udGFpbmVyU2l6ZS5tYXhXaWR0aCkpO1xuICBoZWlnaHQgPSByb3VuZDEoTWF0aC5taW4oaGVpZ2h0LCBtYXhIZWlnaHQsIGNvbnRhaW5lclNpemUubWF4SGVpZ2h0KSk7XG4gIGlmICh3aWR0aCAmJiAhaGVpZ2h0KSB7XG4gICAgaGVpZ2h0ID0gcm91bmQxKHdpZHRoIC8gMik7XG4gIH1cbiAgcmV0dXJuIHtcbiAgICB3aWR0aCxcbiAgICBoZWlnaHRcbiAgfTtcbn1cbmZ1bmN0aW9uIHJldGluYVNjYWxlKGNoYXJ0LCBmb3JjZVJhdGlvLCBmb3JjZVN0eWxlKSB7XG4gIGNvbnN0IHBpeGVsUmF0aW8gPSBmb3JjZVJhdGlvIHx8IDE7XG4gIGNvbnN0IGRldmljZUhlaWdodCA9IE1hdGguZmxvb3IoY2hhcnQuaGVpZ2h0ICogcGl4ZWxSYXRpbyk7XG4gIGNvbnN0IGRldmljZVdpZHRoID0gTWF0aC5mbG9vcihjaGFydC53aWR0aCAqIHBpeGVsUmF0aW8pO1xuICBjaGFydC5oZWlnaHQgPSBkZXZpY2VIZWlnaHQgLyBwaXhlbFJhdGlvO1xuICBjaGFydC53aWR0aCA9IGRldmljZVdpZHRoIC8gcGl4ZWxSYXRpbztcbiAgY29uc3QgY2FudmFzID0gY2hhcnQuY2FudmFzO1xuICBpZiAoY2FudmFzLnN0eWxlICYmIChmb3JjZVN0eWxlIHx8ICghY2FudmFzLnN0eWxlLmhlaWdodCAmJiAhY2FudmFzLnN0eWxlLndpZHRoKSkpIHtcbiAgICBjYW52YXMuc3R5bGUuaGVpZ2h0ID0gYCR7Y2hhcnQuaGVpZ2h0fXB4YDtcbiAgICBjYW52YXMuc3R5bGUud2lkdGggPSBgJHtjaGFydC53aWR0aH1weGA7XG4gIH1cbiAgaWYgKGNoYXJ0LmN1cnJlbnREZXZpY2VQaXhlbFJhdGlvICE9PSBwaXhlbFJhdGlvXG4gICAgICB8fCBjYW52YXMuaGVpZ2h0ICE9PSBkZXZpY2VIZWlnaHRcbiAgICAgIHx8IGNhbnZhcy53aWR0aCAhPT0gZGV2aWNlV2lkdGgpIHtcbiAgICBjaGFydC5jdXJyZW50RGV2aWNlUGl4ZWxSYXRpbyA9IHBpeGVsUmF0aW87XG4gICAgY2FudmFzLmhlaWdodCA9IGRldmljZUhlaWdodDtcbiAgICBjYW52YXMud2lkdGggPSBkZXZpY2VXaWR0aDtcbiAgICBjaGFydC5jdHguc2V0VHJhbnNmb3JtKHBpeGVsUmF0aW8sIDAsIDAsIHBpeGVsUmF0aW8sIDAsIDApO1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIHJldHVybiBmYWxzZTtcbn1cbmNvbnN0IHN1cHBvcnRzRXZlbnRMaXN0ZW5lck9wdGlvbnMgPSAoZnVuY3Rpb24oKSB7XG4gIGxldCBwYXNzaXZlU3VwcG9ydGVkID0gZmFsc2U7XG4gIHRyeSB7XG4gICAgY29uc3Qgb3B0aW9ucyA9IHtcbiAgICAgIGdldCBwYXNzaXZlKCkge1xuICAgICAgICBwYXNzaXZlU3VwcG9ydGVkID0gdHJ1ZTtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH07XG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Rlc3QnLCBudWxsLCBvcHRpb25zKTtcbiAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcigndGVzdCcsIG51bGwsIG9wdGlvbnMpO1xuICB9IGNhdGNoIChlKSB7XG4gIH1cbiAgcmV0dXJuIHBhc3NpdmVTdXBwb3J0ZWQ7XG59KCkpO1xuZnVuY3Rpb24gcmVhZFVzZWRTaXplKGVsZW1lbnQsIHByb3BlcnR5KSB7XG4gIGNvbnN0IHZhbHVlID0gZ2V0U3R5bGUoZWxlbWVudCwgcHJvcGVydHkpO1xuICBjb25zdCBtYXRjaGVzID0gdmFsdWUgJiYgdmFsdWUubWF0Y2goL14oXFxkKykoXFwuXFxkKyk/cHgkLyk7XG4gIHJldHVybiBtYXRjaGVzID8gK21hdGNoZXNbMV0gOiB1bmRlZmluZWQ7XG59XG5cbmZ1bmN0aW9uIF9wb2ludEluTGluZShwMSwgcDIsIHQsIG1vZGUpIHtcbiAgcmV0dXJuIHtcbiAgICB4OiBwMS54ICsgdCAqIChwMi54IC0gcDEueCksXG4gICAgeTogcDEueSArIHQgKiAocDIueSAtIHAxLnkpXG4gIH07XG59XG5mdW5jdGlvbiBfc3RlcHBlZEludGVycG9sYXRpb24ocDEsIHAyLCB0LCBtb2RlKSB7XG4gIHJldHVybiB7XG4gICAgeDogcDEueCArIHQgKiAocDIueCAtIHAxLngpLFxuICAgIHk6IG1vZGUgPT09ICdtaWRkbGUnID8gdCA8IDAuNSA/IHAxLnkgOiBwMi55XG4gICAgOiBtb2RlID09PSAnYWZ0ZXInID8gdCA8IDEgPyBwMS55IDogcDIueVxuICAgIDogdCA+IDAgPyBwMi55IDogcDEueVxuICB9O1xufVxuZnVuY3Rpb24gX2JlemllckludGVycG9sYXRpb24ocDEsIHAyLCB0LCBtb2RlKSB7XG4gIGNvbnN0IGNwMSA9IHt4OiBwMS5jcDJ4LCB5OiBwMS5jcDJ5fTtcbiAgY29uc3QgY3AyID0ge3g6IHAyLmNwMXgsIHk6IHAyLmNwMXl9O1xuICBjb25zdCBhID0gX3BvaW50SW5MaW5lKHAxLCBjcDEsIHQpO1xuICBjb25zdCBiID0gX3BvaW50SW5MaW5lKGNwMSwgY3AyLCB0KTtcbiAgY29uc3QgYyA9IF9wb2ludEluTGluZShjcDIsIHAyLCB0KTtcbiAgY29uc3QgZCA9IF9wb2ludEluTGluZShhLCBiLCB0KTtcbiAgY29uc3QgZSA9IF9wb2ludEluTGluZShiLCBjLCB0KTtcbiAgcmV0dXJuIF9wb2ludEluTGluZShkLCBlLCB0KTtcbn1cblxuY29uc3QgaW50bENhY2hlID0gbmV3IE1hcCgpO1xuZnVuY3Rpb24gZ2V0TnVtYmVyRm9ybWF0KGxvY2FsZSwgb3B0aW9ucykge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgY29uc3QgY2FjaGVLZXkgPSBsb2NhbGUgKyBKU09OLnN0cmluZ2lmeShvcHRpb25zKTtcbiAgbGV0IGZvcm1hdHRlciA9IGludGxDYWNoZS5nZXQoY2FjaGVLZXkpO1xuICBpZiAoIWZvcm1hdHRlcikge1xuICAgIGZvcm1hdHRlciA9IG5ldyBJbnRsLk51bWJlckZvcm1hdChsb2NhbGUsIG9wdGlvbnMpO1xuICAgIGludGxDYWNoZS5zZXQoY2FjaGVLZXksIGZvcm1hdHRlcik7XG4gIH1cbiAgcmV0dXJuIGZvcm1hdHRlcjtcbn1cbmZ1bmN0aW9uIGZvcm1hdE51bWJlcihudW0sIGxvY2FsZSwgb3B0aW9ucykge1xuICByZXR1cm4gZ2V0TnVtYmVyRm9ybWF0KGxvY2FsZSwgb3B0aW9ucykuZm9ybWF0KG51bSk7XG59XG5cbmNvbnN0IGdldFJpZ2h0VG9MZWZ0QWRhcHRlciA9IGZ1bmN0aW9uKHJlY3RYLCB3aWR0aCkge1xuICByZXR1cm4ge1xuICAgIHgoeCkge1xuICAgICAgcmV0dXJuIHJlY3RYICsgcmVjdFggKyB3aWR0aCAtIHg7XG4gICAgfSxcbiAgICBzZXRXaWR0aCh3KSB7XG4gICAgICB3aWR0aCA9IHc7XG4gICAgfSxcbiAgICB0ZXh0QWxpZ24oYWxpZ24pIHtcbiAgICAgIGlmIChhbGlnbiA9PT0gJ2NlbnRlcicpIHtcbiAgICAgICAgcmV0dXJuIGFsaWduO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGFsaWduID09PSAncmlnaHQnID8gJ2xlZnQnIDogJ3JpZ2h0JztcbiAgICB9LFxuICAgIHhQbHVzKHgsIHZhbHVlKSB7XG4gICAgICByZXR1cm4geCAtIHZhbHVlO1xuICAgIH0sXG4gICAgbGVmdEZvckx0cih4LCBpdGVtV2lkdGgpIHtcbiAgICAgIHJldHVybiB4IC0gaXRlbVdpZHRoO1xuICAgIH0sXG4gIH07XG59O1xuY29uc3QgZ2V0TGVmdFRvUmlnaHRBZGFwdGVyID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB7XG4gICAgeCh4KSB7XG4gICAgICByZXR1cm4geDtcbiAgICB9LFxuICAgIHNldFdpZHRoKHcpIHtcbiAgICB9LFxuICAgIHRleHRBbGlnbihhbGlnbikge1xuICAgICAgcmV0dXJuIGFsaWduO1xuICAgIH0sXG4gICAgeFBsdXMoeCwgdmFsdWUpIHtcbiAgICAgIHJldHVybiB4ICsgdmFsdWU7XG4gICAgfSxcbiAgICBsZWZ0Rm9yTHRyKHgsIF9pdGVtV2lkdGgpIHtcbiAgICAgIHJldHVybiB4O1xuICAgIH0sXG4gIH07XG59O1xuZnVuY3Rpb24gZ2V0UnRsQWRhcHRlcihydGwsIHJlY3RYLCB3aWR0aCkge1xuICByZXR1cm4gcnRsID8gZ2V0UmlnaHRUb0xlZnRBZGFwdGVyKHJlY3RYLCB3aWR0aCkgOiBnZXRMZWZ0VG9SaWdodEFkYXB0ZXIoKTtcbn1cbmZ1bmN0aW9uIG92ZXJyaWRlVGV4dERpcmVjdGlvbihjdHgsIGRpcmVjdGlvbikge1xuICBsZXQgc3R5bGUsIG9yaWdpbmFsO1xuICBpZiAoZGlyZWN0aW9uID09PSAnbHRyJyB8fCBkaXJlY3Rpb24gPT09ICdydGwnKSB7XG4gICAgc3R5bGUgPSBjdHguY2FudmFzLnN0eWxlO1xuICAgIG9yaWdpbmFsID0gW1xuICAgICAgc3R5bGUuZ2V0UHJvcGVydHlWYWx1ZSgnZGlyZWN0aW9uJyksXG4gICAgICBzdHlsZS5nZXRQcm9wZXJ0eVByaW9yaXR5KCdkaXJlY3Rpb24nKSxcbiAgICBdO1xuICAgIHN0eWxlLnNldFByb3BlcnR5KCdkaXJlY3Rpb24nLCBkaXJlY3Rpb24sICdpbXBvcnRhbnQnKTtcbiAgICBjdHgucHJldlRleHREaXJlY3Rpb24gPSBvcmlnaW5hbDtcbiAgfVxufVxuZnVuY3Rpb24gcmVzdG9yZVRleHREaXJlY3Rpb24oY3R4LCBvcmlnaW5hbCkge1xuICBpZiAob3JpZ2luYWwgIT09IHVuZGVmaW5lZCkge1xuICAgIGRlbGV0ZSBjdHgucHJldlRleHREaXJlY3Rpb247XG4gICAgY3R4LmNhbnZhcy5zdHlsZS5zZXRQcm9wZXJ0eSgnZGlyZWN0aW9uJywgb3JpZ2luYWxbMF0sIG9yaWdpbmFsWzFdKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBwcm9wZXJ0eUZuKHByb3BlcnR5KSB7XG4gIGlmIChwcm9wZXJ0eSA9PT0gJ2FuZ2xlJykge1xuICAgIHJldHVybiB7XG4gICAgICBiZXR3ZWVuOiBfYW5nbGVCZXR3ZWVuLFxuICAgICAgY29tcGFyZTogX2FuZ2xlRGlmZixcbiAgICAgIG5vcm1hbGl6ZTogX25vcm1hbGl6ZUFuZ2xlLFxuICAgIH07XG4gIH1cbiAgcmV0dXJuIHtcbiAgICBiZXR3ZWVuOiBfaXNCZXR3ZWVuLFxuICAgIGNvbXBhcmU6IChhLCBiKSA9PiBhIC0gYixcbiAgICBub3JtYWxpemU6IHggPT4geFxuICB9O1xufVxuZnVuY3Rpb24gbm9ybWFsaXplU2VnbWVudCh7c3RhcnQsIGVuZCwgY291bnQsIGxvb3AsIHN0eWxlfSkge1xuICByZXR1cm4ge1xuICAgIHN0YXJ0OiBzdGFydCAlIGNvdW50LFxuICAgIGVuZDogZW5kICUgY291bnQsXG4gICAgbG9vcDogbG9vcCAmJiAoZW5kIC0gc3RhcnQgKyAxKSAlIGNvdW50ID09PSAwLFxuICAgIHN0eWxlXG4gIH07XG59XG5mdW5jdGlvbiBnZXRTZWdtZW50KHNlZ21lbnQsIHBvaW50cywgYm91bmRzKSB7XG4gIGNvbnN0IHtwcm9wZXJ0eSwgc3RhcnQ6IHN0YXJ0Qm91bmQsIGVuZDogZW5kQm91bmR9ID0gYm91bmRzO1xuICBjb25zdCB7YmV0d2Vlbiwgbm9ybWFsaXplfSA9IHByb3BlcnR5Rm4ocHJvcGVydHkpO1xuICBjb25zdCBjb3VudCA9IHBvaW50cy5sZW5ndGg7XG4gIGxldCB7c3RhcnQsIGVuZCwgbG9vcH0gPSBzZWdtZW50O1xuICBsZXQgaSwgaWxlbjtcbiAgaWYgKGxvb3ApIHtcbiAgICBzdGFydCArPSBjb3VudDtcbiAgICBlbmQgKz0gY291bnQ7XG4gICAgZm9yIChpID0gMCwgaWxlbiA9IGNvdW50OyBpIDwgaWxlbjsgKytpKSB7XG4gICAgICBpZiAoIWJldHdlZW4obm9ybWFsaXplKHBvaW50c1tzdGFydCAlIGNvdW50XVtwcm9wZXJ0eV0pLCBzdGFydEJvdW5kLCBlbmRCb3VuZCkpIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBzdGFydC0tO1xuICAgICAgZW5kLS07XG4gICAgfVxuICAgIHN0YXJ0ICU9IGNvdW50O1xuICAgIGVuZCAlPSBjb3VudDtcbiAgfVxuICBpZiAoZW5kIDwgc3RhcnQpIHtcbiAgICBlbmQgKz0gY291bnQ7XG4gIH1cbiAgcmV0dXJuIHtzdGFydCwgZW5kLCBsb29wLCBzdHlsZTogc2VnbWVudC5zdHlsZX07XG59XG5mdW5jdGlvbiBfYm91bmRTZWdtZW50KHNlZ21lbnQsIHBvaW50cywgYm91bmRzKSB7XG4gIGlmICghYm91bmRzKSB7XG4gICAgcmV0dXJuIFtzZWdtZW50XTtcbiAgfVxuICBjb25zdCB7cHJvcGVydHksIHN0YXJ0OiBzdGFydEJvdW5kLCBlbmQ6IGVuZEJvdW5kfSA9IGJvdW5kcztcbiAgY29uc3QgY291bnQgPSBwb2ludHMubGVuZ3RoO1xuICBjb25zdCB7Y29tcGFyZSwgYmV0d2Vlbiwgbm9ybWFsaXplfSA9IHByb3BlcnR5Rm4ocHJvcGVydHkpO1xuICBjb25zdCB7c3RhcnQsIGVuZCwgbG9vcCwgc3R5bGV9ID0gZ2V0U2VnbWVudChzZWdtZW50LCBwb2ludHMsIGJvdW5kcyk7XG4gIGNvbnN0IHJlc3VsdCA9IFtdO1xuICBsZXQgaW5zaWRlID0gZmFsc2U7XG4gIGxldCBzdWJTdGFydCA9IG51bGw7XG4gIGxldCB2YWx1ZSwgcG9pbnQsIHByZXZWYWx1ZTtcbiAgY29uc3Qgc3RhcnRJc0JlZm9yZSA9ICgpID0+IGJldHdlZW4oc3RhcnRCb3VuZCwgcHJldlZhbHVlLCB2YWx1ZSkgJiYgY29tcGFyZShzdGFydEJvdW5kLCBwcmV2VmFsdWUpICE9PSAwO1xuICBjb25zdCBlbmRJc0JlZm9yZSA9ICgpID0+IGNvbXBhcmUoZW5kQm91bmQsIHZhbHVlKSA9PT0gMCB8fCBiZXR3ZWVuKGVuZEJvdW5kLCBwcmV2VmFsdWUsIHZhbHVlKTtcbiAgY29uc3Qgc2hvdWxkU3RhcnQgPSAoKSA9PiBpbnNpZGUgfHwgc3RhcnRJc0JlZm9yZSgpO1xuICBjb25zdCBzaG91bGRTdG9wID0gKCkgPT4gIWluc2lkZSB8fCBlbmRJc0JlZm9yZSgpO1xuICBmb3IgKGxldCBpID0gc3RhcnQsIHByZXYgPSBzdGFydDsgaSA8PSBlbmQ7ICsraSkge1xuICAgIHBvaW50ID0gcG9pbnRzW2kgJSBjb3VudF07XG4gICAgaWYgKHBvaW50LnNraXApIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICB2YWx1ZSA9IG5vcm1hbGl6ZShwb2ludFtwcm9wZXJ0eV0pO1xuICAgIGlmICh2YWx1ZSA9PT0gcHJldlZhbHVlKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgaW5zaWRlID0gYmV0d2Vlbih2YWx1ZSwgc3RhcnRCb3VuZCwgZW5kQm91bmQpO1xuICAgIGlmIChzdWJTdGFydCA9PT0gbnVsbCAmJiBzaG91bGRTdGFydCgpKSB7XG4gICAgICBzdWJTdGFydCA9IGNvbXBhcmUodmFsdWUsIHN0YXJ0Qm91bmQpID09PSAwID8gaSA6IHByZXY7XG4gICAgfVxuICAgIGlmIChzdWJTdGFydCAhPT0gbnVsbCAmJiBzaG91bGRTdG9wKCkpIHtcbiAgICAgIHJlc3VsdC5wdXNoKG5vcm1hbGl6ZVNlZ21lbnQoe3N0YXJ0OiBzdWJTdGFydCwgZW5kOiBpLCBsb29wLCBjb3VudCwgc3R5bGV9KSk7XG4gICAgICBzdWJTdGFydCA9IG51bGw7XG4gICAgfVxuICAgIHByZXYgPSBpO1xuICAgIHByZXZWYWx1ZSA9IHZhbHVlO1xuICB9XG4gIGlmIChzdWJTdGFydCAhPT0gbnVsbCkge1xuICAgIHJlc3VsdC5wdXNoKG5vcm1hbGl6ZVNlZ21lbnQoe3N0YXJ0OiBzdWJTdGFydCwgZW5kLCBsb29wLCBjb3VudCwgc3R5bGV9KSk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cbmZ1bmN0aW9uIF9ib3VuZFNlZ21lbnRzKGxpbmUsIGJvdW5kcykge1xuICBjb25zdCByZXN1bHQgPSBbXTtcbiAgY29uc3Qgc2VnbWVudHMgPSBsaW5lLnNlZ21lbnRzO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IHNlZ21lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgY29uc3Qgc3ViID0gX2JvdW5kU2VnbWVudChzZWdtZW50c1tpXSwgbGluZS5wb2ludHMsIGJvdW5kcyk7XG4gICAgaWYgKHN1Yi5sZW5ndGgpIHtcbiAgICAgIHJlc3VsdC5wdXNoKC4uLnN1Yik7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5mdW5jdGlvbiBmaW5kU3RhcnRBbmRFbmQocG9pbnRzLCBjb3VudCwgbG9vcCwgc3BhbkdhcHMpIHtcbiAgbGV0IHN0YXJ0ID0gMDtcbiAgbGV0IGVuZCA9IGNvdW50IC0gMTtcbiAgaWYgKGxvb3AgJiYgIXNwYW5HYXBzKSB7XG4gICAgd2hpbGUgKHN0YXJ0IDwgY291bnQgJiYgIXBvaW50c1tzdGFydF0uc2tpcCkge1xuICAgICAgc3RhcnQrKztcbiAgICB9XG4gIH1cbiAgd2hpbGUgKHN0YXJ0IDwgY291bnQgJiYgcG9pbnRzW3N0YXJ0XS5za2lwKSB7XG4gICAgc3RhcnQrKztcbiAgfVxuICBzdGFydCAlPSBjb3VudDtcbiAgaWYgKGxvb3ApIHtcbiAgICBlbmQgKz0gc3RhcnQ7XG4gIH1cbiAgd2hpbGUgKGVuZCA+IHN0YXJ0ICYmIHBvaW50c1tlbmQgJSBjb3VudF0uc2tpcCkge1xuICAgIGVuZC0tO1xuICB9XG4gIGVuZCAlPSBjb3VudDtcbiAgcmV0dXJuIHtzdGFydCwgZW5kfTtcbn1cbmZ1bmN0aW9uIHNvbGlkU2VnbWVudHMocG9pbnRzLCBzdGFydCwgbWF4LCBsb29wKSB7XG4gIGNvbnN0IGNvdW50ID0gcG9pbnRzLmxlbmd0aDtcbiAgY29uc3QgcmVzdWx0ID0gW107XG4gIGxldCBsYXN0ID0gc3RhcnQ7XG4gIGxldCBwcmV2ID0gcG9pbnRzW3N0YXJ0XTtcbiAgbGV0IGVuZDtcbiAgZm9yIChlbmQgPSBzdGFydCArIDE7IGVuZCA8PSBtYXg7ICsrZW5kKSB7XG4gICAgY29uc3QgY3VyID0gcG9pbnRzW2VuZCAlIGNvdW50XTtcbiAgICBpZiAoY3VyLnNraXAgfHwgY3VyLnN0b3ApIHtcbiAgICAgIGlmICghcHJldi5za2lwKSB7XG4gICAgICAgIGxvb3AgPSBmYWxzZTtcbiAgICAgICAgcmVzdWx0LnB1c2goe3N0YXJ0OiBzdGFydCAlIGNvdW50LCBlbmQ6IChlbmQgLSAxKSAlIGNvdW50LCBsb29wfSk7XG4gICAgICAgIHN0YXJ0ID0gbGFzdCA9IGN1ci5zdG9wID8gZW5kIDogbnVsbDtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgbGFzdCA9IGVuZDtcbiAgICAgIGlmIChwcmV2LnNraXApIHtcbiAgICAgICAgc3RhcnQgPSBlbmQ7XG4gICAgICB9XG4gICAgfVxuICAgIHByZXYgPSBjdXI7XG4gIH1cbiAgaWYgKGxhc3QgIT09IG51bGwpIHtcbiAgICByZXN1bHQucHVzaCh7c3RhcnQ6IHN0YXJ0ICUgY291bnQsIGVuZDogbGFzdCAlIGNvdW50LCBsb29wfSk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cbmZ1bmN0aW9uIF9jb21wdXRlU2VnbWVudHMobGluZSwgc2VnbWVudE9wdGlvbnMpIHtcbiAgY29uc3QgcG9pbnRzID0gbGluZS5wb2ludHM7XG4gIGNvbnN0IHNwYW5HYXBzID0gbGluZS5vcHRpb25zLnNwYW5HYXBzO1xuICBjb25zdCBjb3VudCA9IHBvaW50cy5sZW5ndGg7XG4gIGlmICghY291bnQpIHtcbiAgICByZXR1cm4gW107XG4gIH1cbiAgY29uc3QgbG9vcCA9ICEhbGluZS5fbG9vcDtcbiAgY29uc3Qge3N0YXJ0LCBlbmR9ID0gZmluZFN0YXJ0QW5kRW5kKHBvaW50cywgY291bnQsIGxvb3AsIHNwYW5HYXBzKTtcbiAgaWYgKHNwYW5HYXBzID09PSB0cnVlKSB7XG4gICAgcmV0dXJuIHNwbGl0QnlTdHlsZXMobGluZSwgW3tzdGFydCwgZW5kLCBsb29wfV0sIHBvaW50cywgc2VnbWVudE9wdGlvbnMpO1xuICB9XG4gIGNvbnN0IG1heCA9IGVuZCA8IHN0YXJ0ID8gZW5kICsgY291bnQgOiBlbmQ7XG4gIGNvbnN0IGNvbXBsZXRlTG9vcCA9ICEhbGluZS5fZnVsbExvb3AgJiYgc3RhcnQgPT09IDAgJiYgZW5kID09PSBjb3VudCAtIDE7XG4gIHJldHVybiBzcGxpdEJ5U3R5bGVzKGxpbmUsIHNvbGlkU2VnbWVudHMocG9pbnRzLCBzdGFydCwgbWF4LCBjb21wbGV0ZUxvb3ApLCBwb2ludHMsIHNlZ21lbnRPcHRpb25zKTtcbn1cbmZ1bmN0aW9uIHNwbGl0QnlTdHlsZXMobGluZSwgc2VnbWVudHMsIHBvaW50cywgc2VnbWVudE9wdGlvbnMpIHtcbiAgaWYgKCFzZWdtZW50T3B0aW9ucyB8fCAhc2VnbWVudE9wdGlvbnMuc2V0Q29udGV4dCB8fCAhcG9pbnRzKSB7XG4gICAgcmV0dXJuIHNlZ21lbnRzO1xuICB9XG4gIHJldHVybiBkb1NwbGl0QnlTdHlsZXMobGluZSwgc2VnbWVudHMsIHBvaW50cywgc2VnbWVudE9wdGlvbnMpO1xufVxuZnVuY3Rpb24gZG9TcGxpdEJ5U3R5bGVzKGxpbmUsIHNlZ21lbnRzLCBwb2ludHMsIHNlZ21lbnRPcHRpb25zKSB7XG4gIGNvbnN0IGNoYXJ0Q29udGV4dCA9IGxpbmUuX2NoYXJ0LmdldENvbnRleHQoKTtcbiAgY29uc3QgYmFzZVN0eWxlID0gcmVhZFN0eWxlKGxpbmUub3B0aW9ucyk7XG4gIGNvbnN0IHtfZGF0YXNldEluZGV4OiBkYXRhc2V0SW5kZXgsIG9wdGlvbnM6IHtzcGFuR2Fwc319ID0gbGluZTtcbiAgY29uc3QgY291bnQgPSBwb2ludHMubGVuZ3RoO1xuICBjb25zdCByZXN1bHQgPSBbXTtcbiAgbGV0IHByZXZTdHlsZSA9IGJhc2VTdHlsZTtcbiAgbGV0IHN0YXJ0ID0gc2VnbWVudHNbMF0uc3RhcnQ7XG4gIGxldCBpID0gc3RhcnQ7XG4gIGZ1bmN0aW9uIGFkZFN0eWxlKHMsIGUsIGwsIHN0KSB7XG4gICAgY29uc3QgZGlyID0gc3BhbkdhcHMgPyAtMSA6IDE7XG4gICAgaWYgKHMgPT09IGUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgcyArPSBjb3VudDtcbiAgICB3aGlsZSAocG9pbnRzW3MgJSBjb3VudF0uc2tpcCkge1xuICAgICAgcyAtPSBkaXI7XG4gICAgfVxuICAgIHdoaWxlIChwb2ludHNbZSAlIGNvdW50XS5za2lwKSB7XG4gICAgICBlICs9IGRpcjtcbiAgICB9XG4gICAgaWYgKHMgJSBjb3VudCAhPT0gZSAlIGNvdW50KSB7XG4gICAgICByZXN1bHQucHVzaCh7c3RhcnQ6IHMgJSBjb3VudCwgZW5kOiBlICUgY291bnQsIGxvb3A6IGwsIHN0eWxlOiBzdH0pO1xuICAgICAgcHJldlN0eWxlID0gc3Q7XG4gICAgICBzdGFydCA9IGUgJSBjb3VudDtcbiAgICB9XG4gIH1cbiAgZm9yIChjb25zdCBzZWdtZW50IG9mIHNlZ21lbnRzKSB7XG4gICAgc3RhcnQgPSBzcGFuR2FwcyA/IHN0YXJ0IDogc2VnbWVudC5zdGFydDtcbiAgICBsZXQgcHJldiA9IHBvaW50c1tzdGFydCAlIGNvdW50XTtcbiAgICBsZXQgc3R5bGU7XG4gICAgZm9yIChpID0gc3RhcnQgKyAxOyBpIDw9IHNlZ21lbnQuZW5kOyBpKyspIHtcbiAgICAgIGNvbnN0IHB0ID0gcG9pbnRzW2kgJSBjb3VudF07XG4gICAgICBzdHlsZSA9IHJlYWRTdHlsZShzZWdtZW50T3B0aW9ucy5zZXRDb250ZXh0KGNyZWF0ZUNvbnRleHQoY2hhcnRDb250ZXh0LCB7XG4gICAgICAgIHR5cGU6ICdzZWdtZW50JyxcbiAgICAgICAgcDA6IHByZXYsXG4gICAgICAgIHAxOiBwdCxcbiAgICAgICAgcDBEYXRhSW5kZXg6IChpIC0gMSkgJSBjb3VudCxcbiAgICAgICAgcDFEYXRhSW5kZXg6IGkgJSBjb3VudCxcbiAgICAgICAgZGF0YXNldEluZGV4XG4gICAgICB9KSkpO1xuICAgICAgaWYgKHN0eWxlQ2hhbmdlZChzdHlsZSwgcHJldlN0eWxlKSkge1xuICAgICAgICBhZGRTdHlsZShzdGFydCwgaSAtIDEsIHNlZ21lbnQubG9vcCwgcHJldlN0eWxlKTtcbiAgICAgIH1cbiAgICAgIHByZXYgPSBwdDtcbiAgICAgIHByZXZTdHlsZSA9IHN0eWxlO1xuICAgIH1cbiAgICBpZiAoc3RhcnQgPCBpIC0gMSkge1xuICAgICAgYWRkU3R5bGUoc3RhcnQsIGkgLSAxLCBzZWdtZW50Lmxvb3AsIHByZXZTdHlsZSk7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5mdW5jdGlvbiByZWFkU3R5bGUob3B0aW9ucykge1xuICByZXR1cm4ge1xuICAgIGJhY2tncm91bmRDb2xvcjogb3B0aW9ucy5iYWNrZ3JvdW5kQ29sb3IsXG4gICAgYm9yZGVyQ2FwU3R5bGU6IG9wdGlvbnMuYm9yZGVyQ2FwU3R5bGUsXG4gICAgYm9yZGVyRGFzaDogb3B0aW9ucy5ib3JkZXJEYXNoLFxuICAgIGJvcmRlckRhc2hPZmZzZXQ6IG9wdGlvbnMuYm9yZGVyRGFzaE9mZnNldCxcbiAgICBib3JkZXJKb2luU3R5bGU6IG9wdGlvbnMuYm9yZGVySm9pblN0eWxlLFxuICAgIGJvcmRlcldpZHRoOiBvcHRpb25zLmJvcmRlcldpZHRoLFxuICAgIGJvcmRlckNvbG9yOiBvcHRpb25zLmJvcmRlckNvbG9yXG4gIH07XG59XG5mdW5jdGlvbiBzdHlsZUNoYW5nZWQoc3R5bGUsIHByZXZTdHlsZSkge1xuICByZXR1cm4gcHJldlN0eWxlICYmIEpTT04uc3RyaW5naWZ5KHN0eWxlKSAhPT0gSlNPTi5zdHJpbmdpZnkocHJldlN0eWxlKTtcbn1cblxuZXhwb3J0IHsgX3RvTGVmdFJpZ2h0Q2VudGVyIGFzICQsIF9ybG9va3VwQnlLZXkgYXMgQSwgZ2V0QW5nbGVGcm9tUG9pbnQgYXMgQiwgdG9QYWRkaW5nIGFzIEMsIGVhY2ggYXMgRCwgZ2V0TWF4aW11bVNpemUgYXMgRSwgX2dldFBhcmVudE5vZGUgYXMgRiwgcmVhZFVzZWRTaXplIGFzIEcsIEhBTEZfUEkgYXMgSCwgdGhyb3R0bGVkIGFzIEksIHN1cHBvcnRzRXZlbnRMaXN0ZW5lck9wdGlvbnMgYXMgSiwgX2lzRG9tU3VwcG9ydGVkIGFzIEssIGxvZzEwIGFzIEwsIF9mYWN0b3JpemUgYXMgTSwgZmluaXRlT3JEZWZhdWx0IGFzIE4sIGNhbGxiYWNrIGFzIE8sIFBJIGFzIFAsIF9hZGRHcmFjZSBhcyBRLCB0b0RlZ3JlZXMgYXMgUiwgX21lYXN1cmVUZXh0IGFzIFMsIFRBVSBhcyBULCBfaW50MTZSYW5nZSBhcyBVLCBfYWxpZ25QaXhlbCBhcyBWLCBjbGlwQXJlYSBhcyBXLCByZW5kZXJUZXh0IGFzIFgsIHVuY2xpcEFyZWEgYXMgWSwgdG9Gb250IGFzIFosIF9hcnJheVVuaXF1ZSBhcyBfLCByZXNvbHZlIGFzIGEsIF9hbmdsZURpZmYgYXMgYSQsIF9hbGlnblN0YXJ0RW5kIGFzIGEwLCBvdmVycmlkZXMgYXMgYTEsIG1lcmdlIGFzIGEyLCBfY2FwaXRhbGl6ZSBhcyBhMywgZGVzY3JpcHRvcnMgYXMgYTQsIGlzRnVuY3Rpb24gYXMgYTUsIF9hdHRhY2hDb250ZXh0IGFzIGE2LCBfY3JlYXRlUmVzb2x2ZXIgYXMgYTcsIF9kZXNjcmlwdG9ycyBhcyBhOCwgbWVyZ2VJZiBhcyBhOSwgcmVzdG9yZVRleHREaXJlY3Rpb24gYXMgYUEsIG5vb3AgYXMgYUIsIGRpc3RhbmNlQmV0d2VlblBvaW50cyBhcyBhQywgX3NldE1pbkFuZE1heEJ5S2V5IGFzIGFELCBuaWNlTnVtIGFzIGFFLCBhbG1vc3RXaG9sZSBhcyBhRiwgYWxtb3N0RXF1YWxzIGFzIGFHLCBfZGVjaW1hbFBsYWNlcyBhcyBhSCwgX2xvbmdlc3RUZXh0IGFzIGFJLCBfZmlsdGVyQmV0d2VlbiBhcyBhSiwgX2xvb2t1cCBhcyBhSywgZ2V0SG92ZXJDb2xvciBhcyBhTCwgY2xvbmUkMSBhcyBhTSwgX21lcmdlciBhcyBhTiwgX21lcmdlcklmIGFzIGFPLCBfZGVwcmVjYXRlZCBhcyBhUCwgdG9Gb250U3RyaW5nIGFzIGFRLCBzcGxpbmVDdXJ2ZSBhcyBhUiwgc3BsaW5lQ3VydmVNb25vdG9uZSBhcyBhUywgZ2V0U3R5bGUgYXMgYVQsIGZvbnRTdHJpbmcgYXMgYVUsIHRvTGluZUhlaWdodCBhcyBhViwgUElUQVUgYXMgYVcsIElORklOSVRZIGFzIGFYLCBSQURfUEVSX0RFRyBhcyBhWSwgUVVBUlRFUl9QSSBhcyBhWiwgVFdPX1RISVJEU19QSSBhcyBhXywgdWlkIGFzIGFhLCBkZWJvdW5jZSBhcyBhYiwgcmV0aW5hU2NhbGUgYXMgYWMsIGNsZWFyQ2FudmFzIGFzIGFkLCBzZXRzRXF1YWwgYXMgYWUsIF9lbGVtZW50c0VxdWFsIGFzIGFmLCBfaXNDbGlja0V2ZW50IGFzIGFnLCBfaXNCZXR3ZWVuIGFzIGFoLCBfcmVhZFZhbHVlVG9Qcm9wcyBhcyBhaSwgX3VwZGF0ZUJlemllckNvbnRyb2xQb2ludHMgYXMgYWosIF9jb21wdXRlU2VnbWVudHMgYXMgYWssIF9ib3VuZFNlZ21lbnRzIGFzIGFsLCBfc3RlcHBlZEludGVycG9sYXRpb24gYXMgYW0sIF9iZXppZXJJbnRlcnBvbGF0aW9uIGFzIGFuLCBfcG9pbnRJbkxpbmUgYXMgYW8sIF9zdGVwcGVkTGluZVRvIGFzIGFwLCBfYmV6aWVyQ3VydmVUbyBhcyBhcSwgZHJhd1BvaW50IGFzIGFyLCBhZGRSb3VuZGVkUmVjdFBhdGggYXMgYXMsIHRvVFJCTCBhcyBhdCwgdG9UUkJMQ29ybmVycyBhcyBhdSwgX2JvdW5kU2VnbWVudCBhcyBhdiwgX25vcm1hbGl6ZUFuZ2xlIGFzIGF3LCBnZXRSdGxBZGFwdGVyIGFzIGF4LCBvdmVycmlkZVRleHREaXJlY3Rpb24gYXMgYXksIF90ZXh0WCBhcyBheiwgaXNBcnJheSBhcyBiLCBjb2xvciBhcyBjLCBkZWZhdWx0cyBhcyBkLCBlZmZlY3RzIGFzIGUsIHJlc29sdmVPYmplY3RLZXkgYXMgZiwgaXNOdW1iZXJGaW5pdGUgYXMgZywgY3JlYXRlQ29udGV4dCBhcyBoLCBpc09iamVjdCBhcyBpLCBkZWZpbmVkIGFzIGosIGlzTnVsbE9yVW5kZWYgYXMgaywgbGlzdGVuQXJyYXlFdmVudHMgYXMgbCwgdG9QZXJjZW50YWdlIGFzIG0sIHRvRGltZW5zaW9uIGFzIG4sIGZvcm1hdE51bWJlciBhcyBvLCBfYW5nbGVCZXR3ZWVuIGFzIHAsIGlzTnVtYmVyIGFzIHEsIHJlcXVlc3RBbmltRnJhbWUgYXMgciwgc2lnbiBhcyBzLCB0b1JhZGlhbnMgYXMgdCwgdW5saXN0ZW5BcnJheUV2ZW50cyBhcyB1LCB2YWx1ZU9yRGVmYXVsdCBhcyB2LCBfbGltaXRWYWx1ZSBhcyB3LCBfbG9va3VwQnlLZXkgYXMgeCwgZ2V0UmVsYXRpdmVQb3NpdGlvbiBhcyB5LCBfaXNQb2ludEluQXJlYSBhcyB6IH07XG4iLCIvKiFcbiAqIENoYXJ0LmpzIHYzLjcuMVxuICogaHR0cHM6Ly93d3cuY2hhcnRqcy5vcmdcbiAqIChjKSAyMDIyIENoYXJ0LmpzIENvbnRyaWJ1dG9yc1xuICogUmVsZWFzZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlXG4gKi9cbmltcG9ydCB7IHIgYXMgcmVxdWVzdEFuaW1GcmFtZSwgYSBhcyByZXNvbHZlLCBlIGFzIGVmZmVjdHMsIGMgYXMgY29sb3IsIGQgYXMgZGVmYXVsdHMsIGkgYXMgaXNPYmplY3QsIGIgYXMgaXNBcnJheSwgdiBhcyB2YWx1ZU9yRGVmYXVsdCwgdSBhcyB1bmxpc3RlbkFycmF5RXZlbnRzLCBsIGFzIGxpc3RlbkFycmF5RXZlbnRzLCBmIGFzIHJlc29sdmVPYmplY3RLZXksIGcgYXMgaXNOdW1iZXJGaW5pdGUsIGggYXMgY3JlYXRlQ29udGV4dCwgaiBhcyBkZWZpbmVkLCBzIGFzIHNpZ24sIGsgYXMgaXNOdWxsT3JVbmRlZiwgXyBhcyBfYXJyYXlVbmlxdWUsIHQgYXMgdG9SYWRpYW5zLCBtIGFzIHRvUGVyY2VudGFnZSwgbiBhcyB0b0RpbWVuc2lvbiwgVCBhcyBUQVUsIG8gYXMgZm9ybWF0TnVtYmVyLCBwIGFzIF9hbmdsZUJldHdlZW4sIEggYXMgSEFMRl9QSSwgUCBhcyBQSSwgcSBhcyBpc051bWJlciwgdyBhcyBfbGltaXRWYWx1ZSwgeCBhcyBfbG9va3VwQnlLZXksIHkgYXMgZ2V0UmVsYXRpdmVQb3NpdGlvbiQxLCB6IGFzIF9pc1BvaW50SW5BcmVhLCBBIGFzIF9ybG9va3VwQnlLZXksIEIgYXMgZ2V0QW5nbGVGcm9tUG9pbnQsIEMgYXMgdG9QYWRkaW5nLCBEIGFzIGVhY2gsIEUgYXMgZ2V0TWF4aW11bVNpemUsIEYgYXMgX2dldFBhcmVudE5vZGUsIEcgYXMgcmVhZFVzZWRTaXplLCBJIGFzIHRocm90dGxlZCwgSiBhcyBzdXBwb3J0c0V2ZW50TGlzdGVuZXJPcHRpb25zLCBLIGFzIF9pc0RvbVN1cHBvcnRlZCwgTCBhcyBsb2cxMCwgTSBhcyBfZmFjdG9yaXplLCBOIGFzIGZpbml0ZU9yRGVmYXVsdCwgTyBhcyBjYWxsYmFjaywgUSBhcyBfYWRkR3JhY2UsIFIgYXMgdG9EZWdyZWVzLCBTIGFzIF9tZWFzdXJlVGV4dCwgVSBhcyBfaW50MTZSYW5nZSwgViBhcyBfYWxpZ25QaXhlbCwgVyBhcyBjbGlwQXJlYSwgWCBhcyByZW5kZXJUZXh0LCBZIGFzIHVuY2xpcEFyZWEsIFogYXMgdG9Gb250LCAkIGFzIF90b0xlZnRSaWdodENlbnRlciwgYTAgYXMgX2FsaWduU3RhcnRFbmQsIGExIGFzIG92ZXJyaWRlcywgYTIgYXMgbWVyZ2UsIGEzIGFzIF9jYXBpdGFsaXplLCBhNCBhcyBkZXNjcmlwdG9ycywgYTUgYXMgaXNGdW5jdGlvbiwgYTYgYXMgX2F0dGFjaENvbnRleHQsIGE3IGFzIF9jcmVhdGVSZXNvbHZlciwgYTggYXMgX2Rlc2NyaXB0b3JzLCBhOSBhcyBtZXJnZUlmLCBhYSBhcyB1aWQsIGFiIGFzIGRlYm91bmNlLCBhYyBhcyByZXRpbmFTY2FsZSwgYWQgYXMgY2xlYXJDYW52YXMsIGFlIGFzIHNldHNFcXVhbCwgYWYgYXMgX2VsZW1lbnRzRXF1YWwsIGFnIGFzIF9pc0NsaWNrRXZlbnQsIGFoIGFzIF9pc0JldHdlZW4sIGFpIGFzIF9yZWFkVmFsdWVUb1Byb3BzLCBhaiBhcyBfdXBkYXRlQmV6aWVyQ29udHJvbFBvaW50cywgYWsgYXMgX2NvbXB1dGVTZWdtZW50cywgYWwgYXMgX2JvdW5kU2VnbWVudHMsIGFtIGFzIF9zdGVwcGVkSW50ZXJwb2xhdGlvbiwgYW4gYXMgX2JlemllckludGVycG9sYXRpb24sIGFvIGFzIF9wb2ludEluTGluZSwgYXAgYXMgX3N0ZXBwZWRMaW5lVG8sIGFxIGFzIF9iZXppZXJDdXJ2ZVRvLCBhciBhcyBkcmF3UG9pbnQsIGFzIGFzIGFkZFJvdW5kZWRSZWN0UGF0aCwgYXQgYXMgdG9UUkJMLCBhdSBhcyB0b1RSQkxDb3JuZXJzLCBhdiBhcyBfYm91bmRTZWdtZW50LCBhdyBhcyBfbm9ybWFsaXplQW5nbGUsIGF4IGFzIGdldFJ0bEFkYXB0ZXIsIGF5IGFzIG92ZXJyaWRlVGV4dERpcmVjdGlvbiwgYXogYXMgX3RleHRYLCBhQSBhcyByZXN0b3JlVGV4dERpcmVjdGlvbiwgYUIgYXMgbm9vcCwgYUMgYXMgZGlzdGFuY2VCZXR3ZWVuUG9pbnRzLCBhRCBhcyBfc2V0TWluQW5kTWF4QnlLZXksIGFFIGFzIG5pY2VOdW0sIGFGIGFzIGFsbW9zdFdob2xlLCBhRyBhcyBhbG1vc3RFcXVhbHMsIGFIIGFzIF9kZWNpbWFsUGxhY2VzLCBhSSBhcyBfbG9uZ2VzdFRleHQsIGFKIGFzIF9maWx0ZXJCZXR3ZWVuLCBhSyBhcyBfbG9va3VwIH0gZnJvbSAnLi9jaHVua3MvaGVscGVycy5zZWdtZW50LmpzJztcbmV4cG9ydCB7IGQgYXMgZGVmYXVsdHMgfSBmcm9tICcuL2NodW5rcy9oZWxwZXJzLnNlZ21lbnQuanMnO1xuXG5jbGFzcyBBbmltYXRvciB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuX3JlcXVlc3QgPSBudWxsO1xuICAgIHRoaXMuX2NoYXJ0cyA9IG5ldyBNYXAoKTtcbiAgICB0aGlzLl9ydW5uaW5nID0gZmFsc2U7XG4gICAgdGhpcy5fbGFzdERhdGUgPSB1bmRlZmluZWQ7XG4gIH1cbiAgX25vdGlmeShjaGFydCwgYW5pbXMsIGRhdGUsIHR5cGUpIHtcbiAgICBjb25zdCBjYWxsYmFja3MgPSBhbmltcy5saXN0ZW5lcnNbdHlwZV07XG4gICAgY29uc3QgbnVtU3RlcHMgPSBhbmltcy5kdXJhdGlvbjtcbiAgICBjYWxsYmFja3MuZm9yRWFjaChmbiA9PiBmbih7XG4gICAgICBjaGFydCxcbiAgICAgIGluaXRpYWw6IGFuaW1zLmluaXRpYWwsXG4gICAgICBudW1TdGVwcyxcbiAgICAgIGN1cnJlbnRTdGVwOiBNYXRoLm1pbihkYXRlIC0gYW5pbXMuc3RhcnQsIG51bVN0ZXBzKVxuICAgIH0pKTtcbiAgfVxuICBfcmVmcmVzaCgpIHtcbiAgICBpZiAodGhpcy5fcmVxdWVzdCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLl9ydW5uaW5nID0gdHJ1ZTtcbiAgICB0aGlzLl9yZXF1ZXN0ID0gcmVxdWVzdEFuaW1GcmFtZS5jYWxsKHdpbmRvdywgKCkgPT4ge1xuICAgICAgdGhpcy5fdXBkYXRlKCk7XG4gICAgICB0aGlzLl9yZXF1ZXN0ID0gbnVsbDtcbiAgICAgIGlmICh0aGlzLl9ydW5uaW5nKSB7XG4gICAgICAgIHRoaXMuX3JlZnJlc2goKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuICBfdXBkYXRlKGRhdGUgPSBEYXRlLm5vdygpKSB7XG4gICAgbGV0IHJlbWFpbmluZyA9IDA7XG4gICAgdGhpcy5fY2hhcnRzLmZvckVhY2goKGFuaW1zLCBjaGFydCkgPT4ge1xuICAgICAgaWYgKCFhbmltcy5ydW5uaW5nIHx8ICFhbmltcy5pdGVtcy5sZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgY29uc3QgaXRlbXMgPSBhbmltcy5pdGVtcztcbiAgICAgIGxldCBpID0gaXRlbXMubGVuZ3RoIC0gMTtcbiAgICAgIGxldCBkcmF3ID0gZmFsc2U7XG4gICAgICBsZXQgaXRlbTtcbiAgICAgIGZvciAoOyBpID49IDA7IC0taSkge1xuICAgICAgICBpdGVtID0gaXRlbXNbaV07XG4gICAgICAgIGlmIChpdGVtLl9hY3RpdmUpIHtcbiAgICAgICAgICBpZiAoaXRlbS5fdG90YWwgPiBhbmltcy5kdXJhdGlvbikge1xuICAgICAgICAgICAgYW5pbXMuZHVyYXRpb24gPSBpdGVtLl90b3RhbDtcbiAgICAgICAgICB9XG4gICAgICAgICAgaXRlbS50aWNrKGRhdGUpO1xuICAgICAgICAgIGRyYXcgPSB0cnVlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1zW2ldID0gaXRlbXNbaXRlbXMubGVuZ3RoIC0gMV07XG4gICAgICAgICAgaXRlbXMucG9wKCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChkcmF3KSB7XG4gICAgICAgIGNoYXJ0LmRyYXcoKTtcbiAgICAgICAgdGhpcy5fbm90aWZ5KGNoYXJ0LCBhbmltcywgZGF0ZSwgJ3Byb2dyZXNzJyk7XG4gICAgICB9XG4gICAgICBpZiAoIWl0ZW1zLmxlbmd0aCkge1xuICAgICAgICBhbmltcy5ydW5uaW5nID0gZmFsc2U7XG4gICAgICAgIHRoaXMuX25vdGlmeShjaGFydCwgYW5pbXMsIGRhdGUsICdjb21wbGV0ZScpO1xuICAgICAgICBhbmltcy5pbml0aWFsID0gZmFsc2U7XG4gICAgICB9XG4gICAgICByZW1haW5pbmcgKz0gaXRlbXMubGVuZ3RoO1xuICAgIH0pO1xuICAgIHRoaXMuX2xhc3REYXRlID0gZGF0ZTtcbiAgICBpZiAocmVtYWluaW5nID09PSAwKSB7XG4gICAgICB0aGlzLl9ydW5uaW5nID0gZmFsc2U7XG4gICAgfVxuICB9XG4gIF9nZXRBbmltcyhjaGFydCkge1xuICAgIGNvbnN0IGNoYXJ0cyA9IHRoaXMuX2NoYXJ0cztcbiAgICBsZXQgYW5pbXMgPSBjaGFydHMuZ2V0KGNoYXJ0KTtcbiAgICBpZiAoIWFuaW1zKSB7XG4gICAgICBhbmltcyA9IHtcbiAgICAgICAgcnVubmluZzogZmFsc2UsXG4gICAgICAgIGluaXRpYWw6IHRydWUsXG4gICAgICAgIGl0ZW1zOiBbXSxcbiAgICAgICAgbGlzdGVuZXJzOiB7XG4gICAgICAgICAgY29tcGxldGU6IFtdLFxuICAgICAgICAgIHByb2dyZXNzOiBbXVxuICAgICAgICB9XG4gICAgICB9O1xuICAgICAgY2hhcnRzLnNldChjaGFydCwgYW5pbXMpO1xuICAgIH1cbiAgICByZXR1cm4gYW5pbXM7XG4gIH1cbiAgbGlzdGVuKGNoYXJ0LCBldmVudCwgY2IpIHtcbiAgICB0aGlzLl9nZXRBbmltcyhjaGFydCkubGlzdGVuZXJzW2V2ZW50XS5wdXNoKGNiKTtcbiAgfVxuICBhZGQoY2hhcnQsIGl0ZW1zKSB7XG4gICAgaWYgKCFpdGVtcyB8fCAhaXRlbXMubGVuZ3RoKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMuX2dldEFuaW1zKGNoYXJ0KS5pdGVtcy5wdXNoKC4uLml0ZW1zKTtcbiAgfVxuICBoYXMoY2hhcnQpIHtcbiAgICByZXR1cm4gdGhpcy5fZ2V0QW5pbXMoY2hhcnQpLml0ZW1zLmxlbmd0aCA+IDA7XG4gIH1cbiAgc3RhcnQoY2hhcnQpIHtcbiAgICBjb25zdCBhbmltcyA9IHRoaXMuX2NoYXJ0cy5nZXQoY2hhcnQpO1xuICAgIGlmICghYW5pbXMpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgYW5pbXMucnVubmluZyA9IHRydWU7XG4gICAgYW5pbXMuc3RhcnQgPSBEYXRlLm5vdygpO1xuICAgIGFuaW1zLmR1cmF0aW9uID0gYW5pbXMuaXRlbXMucmVkdWNlKChhY2MsIGN1cikgPT4gTWF0aC5tYXgoYWNjLCBjdXIuX2R1cmF0aW9uKSwgMCk7XG4gICAgdGhpcy5fcmVmcmVzaCgpO1xuICB9XG4gIHJ1bm5pbmcoY2hhcnQpIHtcbiAgICBpZiAoIXRoaXMuX3J1bm5pbmcpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgY29uc3QgYW5pbXMgPSB0aGlzLl9jaGFydHMuZ2V0KGNoYXJ0KTtcbiAgICBpZiAoIWFuaW1zIHx8ICFhbmltcy5ydW5uaW5nIHx8ICFhbmltcy5pdGVtcy5sZW5ndGgpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgc3RvcChjaGFydCkge1xuICAgIGNvbnN0IGFuaW1zID0gdGhpcy5fY2hhcnRzLmdldChjaGFydCk7XG4gICAgaWYgKCFhbmltcyB8fCAhYW5pbXMuaXRlbXMubGVuZ3RoKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IGl0ZW1zID0gYW5pbXMuaXRlbXM7XG4gICAgbGV0IGkgPSBpdGVtcy5sZW5ndGggLSAxO1xuICAgIGZvciAoOyBpID49IDA7IC0taSkge1xuICAgICAgaXRlbXNbaV0uY2FuY2VsKCk7XG4gICAgfVxuICAgIGFuaW1zLml0ZW1zID0gW107XG4gICAgdGhpcy5fbm90aWZ5KGNoYXJ0LCBhbmltcywgRGF0ZS5ub3coKSwgJ2NvbXBsZXRlJyk7XG4gIH1cbiAgcmVtb3ZlKGNoYXJ0KSB7XG4gICAgcmV0dXJuIHRoaXMuX2NoYXJ0cy5kZWxldGUoY2hhcnQpO1xuICB9XG59XG52YXIgYW5pbWF0b3IgPSBuZXcgQW5pbWF0b3IoKTtcblxuY29uc3QgdHJhbnNwYXJlbnQgPSAndHJhbnNwYXJlbnQnO1xuY29uc3QgaW50ZXJwb2xhdG9ycyA9IHtcbiAgYm9vbGVhbihmcm9tLCB0bywgZmFjdG9yKSB7XG4gICAgcmV0dXJuIGZhY3RvciA+IDAuNSA/IHRvIDogZnJvbTtcbiAgfSxcbiAgY29sb3IoZnJvbSwgdG8sIGZhY3Rvcikge1xuICAgIGNvbnN0IGMwID0gY29sb3IoZnJvbSB8fCB0cmFuc3BhcmVudCk7XG4gICAgY29uc3QgYzEgPSBjMC52YWxpZCAmJiBjb2xvcih0byB8fCB0cmFuc3BhcmVudCk7XG4gICAgcmV0dXJuIGMxICYmIGMxLnZhbGlkXG4gICAgICA/IGMxLm1peChjMCwgZmFjdG9yKS5oZXhTdHJpbmcoKVxuICAgICAgOiB0bztcbiAgfSxcbiAgbnVtYmVyKGZyb20sIHRvLCBmYWN0b3IpIHtcbiAgICByZXR1cm4gZnJvbSArICh0byAtIGZyb20pICogZmFjdG9yO1xuICB9XG59O1xuY2xhc3MgQW5pbWF0aW9uIHtcbiAgY29uc3RydWN0b3IoY2ZnLCB0YXJnZXQsIHByb3AsIHRvKSB7XG4gICAgY29uc3QgY3VycmVudFZhbHVlID0gdGFyZ2V0W3Byb3BdO1xuICAgIHRvID0gcmVzb2x2ZShbY2ZnLnRvLCB0bywgY3VycmVudFZhbHVlLCBjZmcuZnJvbV0pO1xuICAgIGNvbnN0IGZyb20gPSByZXNvbHZlKFtjZmcuZnJvbSwgY3VycmVudFZhbHVlLCB0b10pO1xuICAgIHRoaXMuX2FjdGl2ZSA9IHRydWU7XG4gICAgdGhpcy5fZm4gPSBjZmcuZm4gfHwgaW50ZXJwb2xhdG9yc1tjZmcudHlwZSB8fCB0eXBlb2YgZnJvbV07XG4gICAgdGhpcy5fZWFzaW5nID0gZWZmZWN0c1tjZmcuZWFzaW5nXSB8fCBlZmZlY3RzLmxpbmVhcjtcbiAgICB0aGlzLl9zdGFydCA9IE1hdGguZmxvb3IoRGF0ZS5ub3coKSArIChjZmcuZGVsYXkgfHwgMCkpO1xuICAgIHRoaXMuX2R1cmF0aW9uID0gdGhpcy5fdG90YWwgPSBNYXRoLmZsb29yKGNmZy5kdXJhdGlvbik7XG4gICAgdGhpcy5fbG9vcCA9ICEhY2ZnLmxvb3A7XG4gICAgdGhpcy5fdGFyZ2V0ID0gdGFyZ2V0O1xuICAgIHRoaXMuX3Byb3AgPSBwcm9wO1xuICAgIHRoaXMuX2Zyb20gPSBmcm9tO1xuICAgIHRoaXMuX3RvID0gdG87XG4gICAgdGhpcy5fcHJvbWlzZXMgPSB1bmRlZmluZWQ7XG4gIH1cbiAgYWN0aXZlKCkge1xuICAgIHJldHVybiB0aGlzLl9hY3RpdmU7XG4gIH1cbiAgdXBkYXRlKGNmZywgdG8sIGRhdGUpIHtcbiAgICBpZiAodGhpcy5fYWN0aXZlKSB7XG4gICAgICB0aGlzLl9ub3RpZnkoZmFsc2UpO1xuICAgICAgY29uc3QgY3VycmVudFZhbHVlID0gdGhpcy5fdGFyZ2V0W3RoaXMuX3Byb3BdO1xuICAgICAgY29uc3QgZWxhcHNlZCA9IGRhdGUgLSB0aGlzLl9zdGFydDtcbiAgICAgIGNvbnN0IHJlbWFpbiA9IHRoaXMuX2R1cmF0aW9uIC0gZWxhcHNlZDtcbiAgICAgIHRoaXMuX3N0YXJ0ID0gZGF0ZTtcbiAgICAgIHRoaXMuX2R1cmF0aW9uID0gTWF0aC5mbG9vcihNYXRoLm1heChyZW1haW4sIGNmZy5kdXJhdGlvbikpO1xuICAgICAgdGhpcy5fdG90YWwgKz0gZWxhcHNlZDtcbiAgICAgIHRoaXMuX2xvb3AgPSAhIWNmZy5sb29wO1xuICAgICAgdGhpcy5fdG8gPSByZXNvbHZlKFtjZmcudG8sIHRvLCBjdXJyZW50VmFsdWUsIGNmZy5mcm9tXSk7XG4gICAgICB0aGlzLl9mcm9tID0gcmVzb2x2ZShbY2ZnLmZyb20sIGN1cnJlbnRWYWx1ZSwgdG9dKTtcbiAgICB9XG4gIH1cbiAgY2FuY2VsKCkge1xuICAgIGlmICh0aGlzLl9hY3RpdmUpIHtcbiAgICAgIHRoaXMudGljayhEYXRlLm5vdygpKTtcbiAgICAgIHRoaXMuX2FjdGl2ZSA9IGZhbHNlO1xuICAgICAgdGhpcy5fbm90aWZ5KGZhbHNlKTtcbiAgICB9XG4gIH1cbiAgdGljayhkYXRlKSB7XG4gICAgY29uc3QgZWxhcHNlZCA9IGRhdGUgLSB0aGlzLl9zdGFydDtcbiAgICBjb25zdCBkdXJhdGlvbiA9IHRoaXMuX2R1cmF0aW9uO1xuICAgIGNvbnN0IHByb3AgPSB0aGlzLl9wcm9wO1xuICAgIGNvbnN0IGZyb20gPSB0aGlzLl9mcm9tO1xuICAgIGNvbnN0IGxvb3AgPSB0aGlzLl9sb29wO1xuICAgIGNvbnN0IHRvID0gdGhpcy5fdG87XG4gICAgbGV0IGZhY3RvcjtcbiAgICB0aGlzLl9hY3RpdmUgPSBmcm9tICE9PSB0byAmJiAobG9vcCB8fCAoZWxhcHNlZCA8IGR1cmF0aW9uKSk7XG4gICAgaWYgKCF0aGlzLl9hY3RpdmUpIHtcbiAgICAgIHRoaXMuX3RhcmdldFtwcm9wXSA9IHRvO1xuICAgICAgdGhpcy5fbm90aWZ5KHRydWUpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoZWxhcHNlZCA8IDApIHtcbiAgICAgIHRoaXMuX3RhcmdldFtwcm9wXSA9IGZyb207XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGZhY3RvciA9IChlbGFwc2VkIC8gZHVyYXRpb24pICUgMjtcbiAgICBmYWN0b3IgPSBsb29wICYmIGZhY3RvciA+IDEgPyAyIC0gZmFjdG9yIDogZmFjdG9yO1xuICAgIGZhY3RvciA9IHRoaXMuX2Vhc2luZyhNYXRoLm1pbigxLCBNYXRoLm1heCgwLCBmYWN0b3IpKSk7XG4gICAgdGhpcy5fdGFyZ2V0W3Byb3BdID0gdGhpcy5fZm4oZnJvbSwgdG8sIGZhY3Rvcik7XG4gIH1cbiAgd2FpdCgpIHtcbiAgICBjb25zdCBwcm9taXNlcyA9IHRoaXMuX3Byb21pc2VzIHx8ICh0aGlzLl9wcm9taXNlcyA9IFtdKTtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlcywgcmVqKSA9PiB7XG4gICAgICBwcm9taXNlcy5wdXNoKHtyZXMsIHJlan0pO1xuICAgIH0pO1xuICB9XG4gIF9ub3RpZnkocmVzb2x2ZWQpIHtcbiAgICBjb25zdCBtZXRob2QgPSByZXNvbHZlZCA/ICdyZXMnIDogJ3Jlaic7XG4gICAgY29uc3QgcHJvbWlzZXMgPSB0aGlzLl9wcm9taXNlcyB8fCBbXTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHByb21pc2VzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBwcm9taXNlc1tpXVttZXRob2RdKCk7XG4gICAgfVxuICB9XG59XG5cbmNvbnN0IG51bWJlcnMgPSBbJ3gnLCAneScsICdib3JkZXJXaWR0aCcsICdyYWRpdXMnLCAndGVuc2lvbiddO1xuY29uc3QgY29sb3JzID0gWydjb2xvcicsICdib3JkZXJDb2xvcicsICdiYWNrZ3JvdW5kQ29sb3InXTtcbmRlZmF1bHRzLnNldCgnYW5pbWF0aW9uJywge1xuICBkZWxheTogdW5kZWZpbmVkLFxuICBkdXJhdGlvbjogMTAwMCxcbiAgZWFzaW5nOiAnZWFzZU91dFF1YXJ0JyxcbiAgZm46IHVuZGVmaW5lZCxcbiAgZnJvbTogdW5kZWZpbmVkLFxuICBsb29wOiB1bmRlZmluZWQsXG4gIHRvOiB1bmRlZmluZWQsXG4gIHR5cGU6IHVuZGVmaW5lZCxcbn0pO1xuY29uc3QgYW5pbWF0aW9uT3B0aW9ucyA9IE9iamVjdC5rZXlzKGRlZmF1bHRzLmFuaW1hdGlvbik7XG5kZWZhdWx0cy5kZXNjcmliZSgnYW5pbWF0aW9uJywge1xuICBfZmFsbGJhY2s6IGZhbHNlLFxuICBfaW5kZXhhYmxlOiBmYWxzZSxcbiAgX3NjcmlwdGFibGU6IChuYW1lKSA9PiBuYW1lICE9PSAnb25Qcm9ncmVzcycgJiYgbmFtZSAhPT0gJ29uQ29tcGxldGUnICYmIG5hbWUgIT09ICdmbicsXG59KTtcbmRlZmF1bHRzLnNldCgnYW5pbWF0aW9ucycsIHtcbiAgY29sb3JzOiB7XG4gICAgdHlwZTogJ2NvbG9yJyxcbiAgICBwcm9wZXJ0aWVzOiBjb2xvcnNcbiAgfSxcbiAgbnVtYmVyczoge1xuICAgIHR5cGU6ICdudW1iZXInLFxuICAgIHByb3BlcnRpZXM6IG51bWJlcnNcbiAgfSxcbn0pO1xuZGVmYXVsdHMuZGVzY3JpYmUoJ2FuaW1hdGlvbnMnLCB7XG4gIF9mYWxsYmFjazogJ2FuaW1hdGlvbicsXG59KTtcbmRlZmF1bHRzLnNldCgndHJhbnNpdGlvbnMnLCB7XG4gIGFjdGl2ZToge1xuICAgIGFuaW1hdGlvbjoge1xuICAgICAgZHVyYXRpb246IDQwMFxuICAgIH1cbiAgfSxcbiAgcmVzaXplOiB7XG4gICAgYW5pbWF0aW9uOiB7XG4gICAgICBkdXJhdGlvbjogMFxuICAgIH1cbiAgfSxcbiAgc2hvdzoge1xuICAgIGFuaW1hdGlvbnM6IHtcbiAgICAgIGNvbG9yczoge1xuICAgICAgICBmcm9tOiAndHJhbnNwYXJlbnQnXG4gICAgICB9LFxuICAgICAgdmlzaWJsZToge1xuICAgICAgICB0eXBlOiAnYm9vbGVhbicsXG4gICAgICAgIGR1cmF0aW9uOiAwXG4gICAgICB9LFxuICAgIH1cbiAgfSxcbiAgaGlkZToge1xuICAgIGFuaW1hdGlvbnM6IHtcbiAgICAgIGNvbG9yczoge1xuICAgICAgICB0bzogJ3RyYW5zcGFyZW50J1xuICAgICAgfSxcbiAgICAgIHZpc2libGU6IHtcbiAgICAgICAgdHlwZTogJ2Jvb2xlYW4nLFxuICAgICAgICBlYXNpbmc6ICdsaW5lYXInLFxuICAgICAgICBmbjogdiA9PiB2IHwgMFxuICAgICAgfSxcbiAgICB9XG4gIH1cbn0pO1xuY2xhc3MgQW5pbWF0aW9ucyB7XG4gIGNvbnN0cnVjdG9yKGNoYXJ0LCBjb25maWcpIHtcbiAgICB0aGlzLl9jaGFydCA9IGNoYXJ0O1xuICAgIHRoaXMuX3Byb3BlcnRpZXMgPSBuZXcgTWFwKCk7XG4gICAgdGhpcy5jb25maWd1cmUoY29uZmlnKTtcbiAgfVxuICBjb25maWd1cmUoY29uZmlnKSB7XG4gICAgaWYgKCFpc09iamVjdChjb25maWcpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IGFuaW1hdGVkUHJvcHMgPSB0aGlzLl9wcm9wZXJ0aWVzO1xuICAgIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKGNvbmZpZykuZm9yRWFjaChrZXkgPT4ge1xuICAgICAgY29uc3QgY2ZnID0gY29uZmlnW2tleV07XG4gICAgICBpZiAoIWlzT2JqZWN0KGNmZykpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgY29uc3QgcmVzb2x2ZWQgPSB7fTtcbiAgICAgIGZvciAoY29uc3Qgb3B0aW9uIG9mIGFuaW1hdGlvbk9wdGlvbnMpIHtcbiAgICAgICAgcmVzb2x2ZWRbb3B0aW9uXSA9IGNmZ1tvcHRpb25dO1xuICAgICAgfVxuICAgICAgKGlzQXJyYXkoY2ZnLnByb3BlcnRpZXMpICYmIGNmZy5wcm9wZXJ0aWVzIHx8IFtrZXldKS5mb3JFYWNoKChwcm9wKSA9PiB7XG4gICAgICAgIGlmIChwcm9wID09PSBrZXkgfHwgIWFuaW1hdGVkUHJvcHMuaGFzKHByb3ApKSB7XG4gICAgICAgICAgYW5pbWF0ZWRQcm9wcy5zZXQocHJvcCwgcmVzb2x2ZWQpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuICBfYW5pbWF0ZU9wdGlvbnModGFyZ2V0LCB2YWx1ZXMpIHtcbiAgICBjb25zdCBuZXdPcHRpb25zID0gdmFsdWVzLm9wdGlvbnM7XG4gICAgY29uc3Qgb3B0aW9ucyA9IHJlc29sdmVUYXJnZXRPcHRpb25zKHRhcmdldCwgbmV3T3B0aW9ucyk7XG4gICAgaWYgKCFvcHRpb25zKSB7XG4gICAgICByZXR1cm4gW107XG4gICAgfVxuICAgIGNvbnN0IGFuaW1hdGlvbnMgPSB0aGlzLl9jcmVhdGVBbmltYXRpb25zKG9wdGlvbnMsIG5ld09wdGlvbnMpO1xuICAgIGlmIChuZXdPcHRpb25zLiRzaGFyZWQpIHtcbiAgICAgIGF3YWl0QWxsKHRhcmdldC5vcHRpb25zLiRhbmltYXRpb25zLCBuZXdPcHRpb25zKS50aGVuKCgpID0+IHtcbiAgICAgICAgdGFyZ2V0Lm9wdGlvbnMgPSBuZXdPcHRpb25zO1xuICAgICAgfSwgKCkgPT4ge1xuICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBhbmltYXRpb25zO1xuICB9XG4gIF9jcmVhdGVBbmltYXRpb25zKHRhcmdldCwgdmFsdWVzKSB7XG4gICAgY29uc3QgYW5pbWF0ZWRQcm9wcyA9IHRoaXMuX3Byb3BlcnRpZXM7XG4gICAgY29uc3QgYW5pbWF0aW9ucyA9IFtdO1xuICAgIGNvbnN0IHJ1bm5pbmcgPSB0YXJnZXQuJGFuaW1hdGlvbnMgfHwgKHRhcmdldC4kYW5pbWF0aW9ucyA9IHt9KTtcbiAgICBjb25zdCBwcm9wcyA9IE9iamVjdC5rZXlzKHZhbHVlcyk7XG4gICAgY29uc3QgZGF0ZSA9IERhdGUubm93KCk7XG4gICAgbGV0IGk7XG4gICAgZm9yIChpID0gcHJvcHMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgIGNvbnN0IHByb3AgPSBwcm9wc1tpXTtcbiAgICAgIGlmIChwcm9wLmNoYXJBdCgwKSA9PT0gJyQnKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgaWYgKHByb3AgPT09ICdvcHRpb25zJykge1xuICAgICAgICBhbmltYXRpb25zLnB1c2goLi4udGhpcy5fYW5pbWF0ZU9wdGlvbnModGFyZ2V0LCB2YWx1ZXMpKTtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICBjb25zdCB2YWx1ZSA9IHZhbHVlc1twcm9wXTtcbiAgICAgIGxldCBhbmltYXRpb24gPSBydW5uaW5nW3Byb3BdO1xuICAgICAgY29uc3QgY2ZnID0gYW5pbWF0ZWRQcm9wcy5nZXQocHJvcCk7XG4gICAgICBpZiAoYW5pbWF0aW9uKSB7XG4gICAgICAgIGlmIChjZmcgJiYgYW5pbWF0aW9uLmFjdGl2ZSgpKSB7XG4gICAgICAgICAgYW5pbWF0aW9uLnVwZGF0ZShjZmcsIHZhbHVlLCBkYXRlKTtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBhbmltYXRpb24uY2FuY2VsKCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmICghY2ZnIHx8ICFjZmcuZHVyYXRpb24pIHtcbiAgICAgICAgdGFyZ2V0W3Byb3BdID0gdmFsdWU7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgcnVubmluZ1twcm9wXSA9IGFuaW1hdGlvbiA9IG5ldyBBbmltYXRpb24oY2ZnLCB0YXJnZXQsIHByb3AsIHZhbHVlKTtcbiAgICAgIGFuaW1hdGlvbnMucHVzaChhbmltYXRpb24pO1xuICAgIH1cbiAgICByZXR1cm4gYW5pbWF0aW9ucztcbiAgfVxuICB1cGRhdGUodGFyZ2V0LCB2YWx1ZXMpIHtcbiAgICBpZiAodGhpcy5fcHJvcGVydGllcy5zaXplID09PSAwKSB7XG4gICAgICBPYmplY3QuYXNzaWduKHRhcmdldCwgdmFsdWVzKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgYW5pbWF0aW9ucyA9IHRoaXMuX2NyZWF0ZUFuaW1hdGlvbnModGFyZ2V0LCB2YWx1ZXMpO1xuICAgIGlmIChhbmltYXRpb25zLmxlbmd0aCkge1xuICAgICAgYW5pbWF0b3IuYWRkKHRoaXMuX2NoYXJ0LCBhbmltYXRpb25zKTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfVxufVxuZnVuY3Rpb24gYXdhaXRBbGwoYW5pbWF0aW9ucywgcHJvcGVydGllcykge1xuICBjb25zdCBydW5uaW5nID0gW107XG4gIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyhwcm9wZXJ0aWVzKTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgY29uc3QgYW5pbSA9IGFuaW1hdGlvbnNba2V5c1tpXV07XG4gICAgaWYgKGFuaW0gJiYgYW5pbS5hY3RpdmUoKSkge1xuICAgICAgcnVubmluZy5wdXNoKGFuaW0ud2FpdCgpKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIFByb21pc2UuYWxsKHJ1bm5pbmcpO1xufVxuZnVuY3Rpb24gcmVzb2x2ZVRhcmdldE9wdGlvbnModGFyZ2V0LCBuZXdPcHRpb25zKSB7XG4gIGlmICghbmV3T3B0aW9ucykge1xuICAgIHJldHVybjtcbiAgfVxuICBsZXQgb3B0aW9ucyA9IHRhcmdldC5vcHRpb25zO1xuICBpZiAoIW9wdGlvbnMpIHtcbiAgICB0YXJnZXQub3B0aW9ucyA9IG5ld09wdGlvbnM7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmIChvcHRpb25zLiRzaGFyZWQpIHtcbiAgICB0YXJnZXQub3B0aW9ucyA9IG9wdGlvbnMgPSBPYmplY3QuYXNzaWduKHt9LCBvcHRpb25zLCB7JHNoYXJlZDogZmFsc2UsICRhbmltYXRpb25zOiB7fX0pO1xuICB9XG4gIHJldHVybiBvcHRpb25zO1xufVxuXG5mdW5jdGlvbiBzY2FsZUNsaXAoc2NhbGUsIGFsbG93ZWRPdmVyZmxvdykge1xuICBjb25zdCBvcHRzID0gc2NhbGUgJiYgc2NhbGUub3B0aW9ucyB8fCB7fTtcbiAgY29uc3QgcmV2ZXJzZSA9IG9wdHMucmV2ZXJzZTtcbiAgY29uc3QgbWluID0gb3B0cy5taW4gPT09IHVuZGVmaW5lZCA/IGFsbG93ZWRPdmVyZmxvdyA6IDA7XG4gIGNvbnN0IG1heCA9IG9wdHMubWF4ID09PSB1bmRlZmluZWQgPyBhbGxvd2VkT3ZlcmZsb3cgOiAwO1xuICByZXR1cm4ge1xuICAgIHN0YXJ0OiByZXZlcnNlID8gbWF4IDogbWluLFxuICAgIGVuZDogcmV2ZXJzZSA/IG1pbiA6IG1heFxuICB9O1xufVxuZnVuY3Rpb24gZGVmYXVsdENsaXAoeFNjYWxlLCB5U2NhbGUsIGFsbG93ZWRPdmVyZmxvdykge1xuICBpZiAoYWxsb3dlZE92ZXJmbG93ID09PSBmYWxzZSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBjb25zdCB4ID0gc2NhbGVDbGlwKHhTY2FsZSwgYWxsb3dlZE92ZXJmbG93KTtcbiAgY29uc3QgeSA9IHNjYWxlQ2xpcCh5U2NhbGUsIGFsbG93ZWRPdmVyZmxvdyk7XG4gIHJldHVybiB7XG4gICAgdG9wOiB5LmVuZCxcbiAgICByaWdodDogeC5lbmQsXG4gICAgYm90dG9tOiB5LnN0YXJ0LFxuICAgIGxlZnQ6IHguc3RhcnRcbiAgfTtcbn1cbmZ1bmN0aW9uIHRvQ2xpcCh2YWx1ZSkge1xuICBsZXQgdCwgciwgYiwgbDtcbiAgaWYgKGlzT2JqZWN0KHZhbHVlKSkge1xuICAgIHQgPSB2YWx1ZS50b3A7XG4gICAgciA9IHZhbHVlLnJpZ2h0O1xuICAgIGIgPSB2YWx1ZS5ib3R0b207XG4gICAgbCA9IHZhbHVlLmxlZnQ7XG4gIH0gZWxzZSB7XG4gICAgdCA9IHIgPSBiID0gbCA9IHZhbHVlO1xuICB9XG4gIHJldHVybiB7XG4gICAgdG9wOiB0LFxuICAgIHJpZ2h0OiByLFxuICAgIGJvdHRvbTogYixcbiAgICBsZWZ0OiBsLFxuICAgIGRpc2FibGVkOiB2YWx1ZSA9PT0gZmFsc2VcbiAgfTtcbn1cbmZ1bmN0aW9uIGdldFNvcnRlZERhdGFzZXRJbmRpY2VzKGNoYXJ0LCBmaWx0ZXJWaXNpYmxlKSB7XG4gIGNvbnN0IGtleXMgPSBbXTtcbiAgY29uc3QgbWV0YXNldHMgPSBjaGFydC5fZ2V0U29ydGVkRGF0YXNldE1ldGFzKGZpbHRlclZpc2libGUpO1xuICBsZXQgaSwgaWxlbjtcbiAgZm9yIChpID0gMCwgaWxlbiA9IG1ldGFzZXRzLmxlbmd0aDsgaSA8IGlsZW47ICsraSkge1xuICAgIGtleXMucHVzaChtZXRhc2V0c1tpXS5pbmRleCk7XG4gIH1cbiAgcmV0dXJuIGtleXM7XG59XG5mdW5jdGlvbiBhcHBseVN0YWNrKHN0YWNrLCB2YWx1ZSwgZHNJbmRleCwgb3B0aW9ucyA9IHt9KSB7XG4gIGNvbnN0IGtleXMgPSBzdGFjay5rZXlzO1xuICBjb25zdCBzaW5nbGVNb2RlID0gb3B0aW9ucy5tb2RlID09PSAnc2luZ2xlJztcbiAgbGV0IGksIGlsZW4sIGRhdGFzZXRJbmRleCwgb3RoZXJWYWx1ZTtcbiAgaWYgKHZhbHVlID09PSBudWxsKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGZvciAoaSA9IDAsIGlsZW4gPSBrZXlzLmxlbmd0aDsgaSA8IGlsZW47ICsraSkge1xuICAgIGRhdGFzZXRJbmRleCA9ICtrZXlzW2ldO1xuICAgIGlmIChkYXRhc2V0SW5kZXggPT09IGRzSW5kZXgpIHtcbiAgICAgIGlmIChvcHRpb25zLmFsbCkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICBvdGhlclZhbHVlID0gc3RhY2sudmFsdWVzW2RhdGFzZXRJbmRleF07XG4gICAgaWYgKGlzTnVtYmVyRmluaXRlKG90aGVyVmFsdWUpICYmIChzaW5nbGVNb2RlIHx8ICh2YWx1ZSA9PT0gMCB8fCBzaWduKHZhbHVlKSA9PT0gc2lnbihvdGhlclZhbHVlKSkpKSB7XG4gICAgICB2YWx1ZSArPSBvdGhlclZhbHVlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdmFsdWU7XG59XG5mdW5jdGlvbiBjb252ZXJ0T2JqZWN0RGF0YVRvQXJyYXkoZGF0YSkge1xuICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXMoZGF0YSk7XG4gIGNvbnN0IGFkYXRhID0gbmV3IEFycmF5KGtleXMubGVuZ3RoKTtcbiAgbGV0IGksIGlsZW4sIGtleTtcbiAgZm9yIChpID0gMCwgaWxlbiA9IGtleXMubGVuZ3RoOyBpIDwgaWxlbjsgKytpKSB7XG4gICAga2V5ID0ga2V5c1tpXTtcbiAgICBhZGF0YVtpXSA9IHtcbiAgICAgIHg6IGtleSxcbiAgICAgIHk6IGRhdGFba2V5XVxuICAgIH07XG4gIH1cbiAgcmV0dXJuIGFkYXRhO1xufVxuZnVuY3Rpb24gaXNTdGFja2VkKHNjYWxlLCBtZXRhKSB7XG4gIGNvbnN0IHN0YWNrZWQgPSBzY2FsZSAmJiBzY2FsZS5vcHRpb25zLnN0YWNrZWQ7XG4gIHJldHVybiBzdGFja2VkIHx8IChzdGFja2VkID09PSB1bmRlZmluZWQgJiYgbWV0YS5zdGFjayAhPT0gdW5kZWZpbmVkKTtcbn1cbmZ1bmN0aW9uIGdldFN0YWNrS2V5KGluZGV4U2NhbGUsIHZhbHVlU2NhbGUsIG1ldGEpIHtcbiAgcmV0dXJuIGAke2luZGV4U2NhbGUuaWR9LiR7dmFsdWVTY2FsZS5pZH0uJHttZXRhLnN0YWNrIHx8IG1ldGEudHlwZX1gO1xufVxuZnVuY3Rpb24gZ2V0VXNlckJvdW5kcyhzY2FsZSkge1xuICBjb25zdCB7bWluLCBtYXgsIG1pbkRlZmluZWQsIG1heERlZmluZWR9ID0gc2NhbGUuZ2V0VXNlckJvdW5kcygpO1xuICByZXR1cm4ge1xuICAgIG1pbjogbWluRGVmaW5lZCA/IG1pbiA6IE51bWJlci5ORUdBVElWRV9JTkZJTklUWSxcbiAgICBtYXg6IG1heERlZmluZWQgPyBtYXggOiBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFlcbiAgfTtcbn1cbmZ1bmN0aW9uIGdldE9yQ3JlYXRlU3RhY2soc3RhY2tzLCBzdGFja0tleSwgaW5kZXhWYWx1ZSkge1xuICBjb25zdCBzdWJTdGFjayA9IHN0YWNrc1tzdGFja0tleV0gfHwgKHN0YWNrc1tzdGFja0tleV0gPSB7fSk7XG4gIHJldHVybiBzdWJTdGFja1tpbmRleFZhbHVlXSB8fCAoc3ViU3RhY2tbaW5kZXhWYWx1ZV0gPSB7fSk7XG59XG5mdW5jdGlvbiBnZXRMYXN0SW5kZXhJblN0YWNrKHN0YWNrLCB2U2NhbGUsIHBvc2l0aXZlLCB0eXBlKSB7XG4gIGZvciAoY29uc3QgbWV0YSBvZiB2U2NhbGUuZ2V0TWF0Y2hpbmdWaXNpYmxlTWV0YXModHlwZSkucmV2ZXJzZSgpKSB7XG4gICAgY29uc3QgdmFsdWUgPSBzdGFja1ttZXRhLmluZGV4XTtcbiAgICBpZiAoKHBvc2l0aXZlICYmIHZhbHVlID4gMCkgfHwgKCFwb3NpdGl2ZSAmJiB2YWx1ZSA8IDApKSB7XG4gICAgICByZXR1cm4gbWV0YS5pbmRleDtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG51bGw7XG59XG5mdW5jdGlvbiB1cGRhdGVTdGFja3MoY29udHJvbGxlciwgcGFyc2VkKSB7XG4gIGNvbnN0IHtjaGFydCwgX2NhY2hlZE1ldGE6IG1ldGF9ID0gY29udHJvbGxlcjtcbiAgY29uc3Qgc3RhY2tzID0gY2hhcnQuX3N0YWNrcyB8fCAoY2hhcnQuX3N0YWNrcyA9IHt9KTtcbiAgY29uc3Qge2lTY2FsZSwgdlNjYWxlLCBpbmRleDogZGF0YXNldEluZGV4fSA9IG1ldGE7XG4gIGNvbnN0IGlBeGlzID0gaVNjYWxlLmF4aXM7XG4gIGNvbnN0IHZBeGlzID0gdlNjYWxlLmF4aXM7XG4gIGNvbnN0IGtleSA9IGdldFN0YWNrS2V5KGlTY2FsZSwgdlNjYWxlLCBtZXRhKTtcbiAgY29uc3QgaWxlbiA9IHBhcnNlZC5sZW5ndGg7XG4gIGxldCBzdGFjaztcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBpbGVuOyArK2kpIHtcbiAgICBjb25zdCBpdGVtID0gcGFyc2VkW2ldO1xuICAgIGNvbnN0IHtbaUF4aXNdOiBpbmRleCwgW3ZBeGlzXTogdmFsdWV9ID0gaXRlbTtcbiAgICBjb25zdCBpdGVtU3RhY2tzID0gaXRlbS5fc3RhY2tzIHx8IChpdGVtLl9zdGFja3MgPSB7fSk7XG4gICAgc3RhY2sgPSBpdGVtU3RhY2tzW3ZBeGlzXSA9IGdldE9yQ3JlYXRlU3RhY2soc3RhY2tzLCBrZXksIGluZGV4KTtcbiAgICBzdGFja1tkYXRhc2V0SW5kZXhdID0gdmFsdWU7XG4gICAgc3RhY2suX3RvcCA9IGdldExhc3RJbmRleEluU3RhY2soc3RhY2ssIHZTY2FsZSwgdHJ1ZSwgbWV0YS50eXBlKTtcbiAgICBzdGFjay5fYm90dG9tID0gZ2V0TGFzdEluZGV4SW5TdGFjayhzdGFjaywgdlNjYWxlLCBmYWxzZSwgbWV0YS50eXBlKTtcbiAgfVxufVxuZnVuY3Rpb24gZ2V0Rmlyc3RTY2FsZUlkKGNoYXJ0LCBheGlzKSB7XG4gIGNvbnN0IHNjYWxlcyA9IGNoYXJ0LnNjYWxlcztcbiAgcmV0dXJuIE9iamVjdC5rZXlzKHNjYWxlcykuZmlsdGVyKGtleSA9PiBzY2FsZXNba2V5XS5heGlzID09PSBheGlzKS5zaGlmdCgpO1xufVxuZnVuY3Rpb24gY3JlYXRlRGF0YXNldENvbnRleHQocGFyZW50LCBpbmRleCkge1xuICByZXR1cm4gY3JlYXRlQ29udGV4dChwYXJlbnQsXG4gICAge1xuICAgICAgYWN0aXZlOiBmYWxzZSxcbiAgICAgIGRhdGFzZXQ6IHVuZGVmaW5lZCxcbiAgICAgIGRhdGFzZXRJbmRleDogaW5kZXgsXG4gICAgICBpbmRleCxcbiAgICAgIG1vZGU6ICdkZWZhdWx0JyxcbiAgICAgIHR5cGU6ICdkYXRhc2V0J1xuICAgIH1cbiAgKTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZURhdGFDb250ZXh0KHBhcmVudCwgaW5kZXgsIGVsZW1lbnQpIHtcbiAgcmV0dXJuIGNyZWF0ZUNvbnRleHQocGFyZW50LCB7XG4gICAgYWN0aXZlOiBmYWxzZSxcbiAgICBkYXRhSW5kZXg6IGluZGV4LFxuICAgIHBhcnNlZDogdW5kZWZpbmVkLFxuICAgIHJhdzogdW5kZWZpbmVkLFxuICAgIGVsZW1lbnQsXG4gICAgaW5kZXgsXG4gICAgbW9kZTogJ2RlZmF1bHQnLFxuICAgIHR5cGU6ICdkYXRhJ1xuICB9KTtcbn1cbmZ1bmN0aW9uIGNsZWFyU3RhY2tzKG1ldGEsIGl0ZW1zKSB7XG4gIGNvbnN0IGRhdGFzZXRJbmRleCA9IG1ldGEuY29udHJvbGxlci5pbmRleDtcbiAgY29uc3QgYXhpcyA9IG1ldGEudlNjYWxlICYmIG1ldGEudlNjYWxlLmF4aXM7XG4gIGlmICghYXhpcykge1xuICAgIHJldHVybjtcbiAgfVxuICBpdGVtcyA9IGl0ZW1zIHx8IG1ldGEuX3BhcnNlZDtcbiAgZm9yIChjb25zdCBwYXJzZWQgb2YgaXRlbXMpIHtcbiAgICBjb25zdCBzdGFja3MgPSBwYXJzZWQuX3N0YWNrcztcbiAgICBpZiAoIXN0YWNrcyB8fCBzdGFja3NbYXhpc10gPT09IHVuZGVmaW5lZCB8fCBzdGFja3NbYXhpc11bZGF0YXNldEluZGV4XSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGRlbGV0ZSBzdGFja3NbYXhpc11bZGF0YXNldEluZGV4XTtcbiAgfVxufVxuY29uc3QgaXNEaXJlY3RVcGRhdGVNb2RlID0gKG1vZGUpID0+IG1vZGUgPT09ICdyZXNldCcgfHwgbW9kZSA9PT0gJ25vbmUnO1xuY29uc3QgY2xvbmVJZk5vdFNoYXJlZCA9IChjYWNoZWQsIHNoYXJlZCkgPT4gc2hhcmVkID8gY2FjaGVkIDogT2JqZWN0LmFzc2lnbih7fSwgY2FjaGVkKTtcbmNvbnN0IGNyZWF0ZVN0YWNrID0gKGNhblN0YWNrLCBtZXRhLCBjaGFydCkgPT4gY2FuU3RhY2sgJiYgIW1ldGEuaGlkZGVuICYmIG1ldGEuX3N0YWNrZWRcbiAgJiYge2tleXM6IGdldFNvcnRlZERhdGFzZXRJbmRpY2VzKGNoYXJ0LCB0cnVlKSwgdmFsdWVzOiBudWxsfTtcbmNsYXNzIERhdGFzZXRDb250cm9sbGVyIHtcbiAgY29uc3RydWN0b3IoY2hhcnQsIGRhdGFzZXRJbmRleCkge1xuICAgIHRoaXMuY2hhcnQgPSBjaGFydDtcbiAgICB0aGlzLl9jdHggPSBjaGFydC5jdHg7XG4gICAgdGhpcy5pbmRleCA9IGRhdGFzZXRJbmRleDtcbiAgICB0aGlzLl9jYWNoZWREYXRhT3B0cyA9IHt9O1xuICAgIHRoaXMuX2NhY2hlZE1ldGEgPSB0aGlzLmdldE1ldGEoKTtcbiAgICB0aGlzLl90eXBlID0gdGhpcy5fY2FjaGVkTWV0YS50eXBlO1xuICAgIHRoaXMub3B0aW9ucyA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLl9wYXJzaW5nID0gZmFsc2U7XG4gICAgdGhpcy5fZGF0YSA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLl9vYmplY3REYXRhID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuX3NoYXJlZE9wdGlvbnMgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5fZHJhd1N0YXJ0ID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuX2RyYXdDb3VudCA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLmVuYWJsZU9wdGlvblNoYXJpbmcgPSBmYWxzZTtcbiAgICB0aGlzLiRjb250ZXh0ID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuX3N5bmNMaXN0ID0gW107XG4gICAgdGhpcy5pbml0aWFsaXplKCk7XG4gIH1cbiAgaW5pdGlhbGl6ZSgpIHtcbiAgICBjb25zdCBtZXRhID0gdGhpcy5fY2FjaGVkTWV0YTtcbiAgICB0aGlzLmNvbmZpZ3VyZSgpO1xuICAgIHRoaXMubGlua1NjYWxlcygpO1xuICAgIG1ldGEuX3N0YWNrZWQgPSBpc1N0YWNrZWQobWV0YS52U2NhbGUsIG1ldGEpO1xuICAgIHRoaXMuYWRkRWxlbWVudHMoKTtcbiAgfVxuICB1cGRhdGVJbmRleChkYXRhc2V0SW5kZXgpIHtcbiAgICBpZiAodGhpcy5pbmRleCAhPT0gZGF0YXNldEluZGV4KSB7XG4gICAgICBjbGVhclN0YWNrcyh0aGlzLl9jYWNoZWRNZXRhKTtcbiAgICB9XG4gICAgdGhpcy5pbmRleCA9IGRhdGFzZXRJbmRleDtcbiAgfVxuICBsaW5rU2NhbGVzKCkge1xuICAgIGNvbnN0IGNoYXJ0ID0gdGhpcy5jaGFydDtcbiAgICBjb25zdCBtZXRhID0gdGhpcy5fY2FjaGVkTWV0YTtcbiAgICBjb25zdCBkYXRhc2V0ID0gdGhpcy5nZXREYXRhc2V0KCk7XG4gICAgY29uc3QgY2hvb3NlSWQgPSAoYXhpcywgeCwgeSwgcikgPT4gYXhpcyA9PT0gJ3gnID8geCA6IGF4aXMgPT09ICdyJyA/IHIgOiB5O1xuICAgIGNvbnN0IHhpZCA9IG1ldGEueEF4aXNJRCA9IHZhbHVlT3JEZWZhdWx0KGRhdGFzZXQueEF4aXNJRCwgZ2V0Rmlyc3RTY2FsZUlkKGNoYXJ0LCAneCcpKTtcbiAgICBjb25zdCB5aWQgPSBtZXRhLnlBeGlzSUQgPSB2YWx1ZU9yRGVmYXVsdChkYXRhc2V0LnlBeGlzSUQsIGdldEZpcnN0U2NhbGVJZChjaGFydCwgJ3knKSk7XG4gICAgY29uc3QgcmlkID0gbWV0YS5yQXhpc0lEID0gdmFsdWVPckRlZmF1bHQoZGF0YXNldC5yQXhpc0lELCBnZXRGaXJzdFNjYWxlSWQoY2hhcnQsICdyJykpO1xuICAgIGNvbnN0IGluZGV4QXhpcyA9IG1ldGEuaW5kZXhBeGlzO1xuICAgIGNvbnN0IGlpZCA9IG1ldGEuaUF4aXNJRCA9IGNob29zZUlkKGluZGV4QXhpcywgeGlkLCB5aWQsIHJpZCk7XG4gICAgY29uc3QgdmlkID0gbWV0YS52QXhpc0lEID0gY2hvb3NlSWQoaW5kZXhBeGlzLCB5aWQsIHhpZCwgcmlkKTtcbiAgICBtZXRhLnhTY2FsZSA9IHRoaXMuZ2V0U2NhbGVGb3JJZCh4aWQpO1xuICAgIG1ldGEueVNjYWxlID0gdGhpcy5nZXRTY2FsZUZvcklkKHlpZCk7XG4gICAgbWV0YS5yU2NhbGUgPSB0aGlzLmdldFNjYWxlRm9ySWQocmlkKTtcbiAgICBtZXRhLmlTY2FsZSA9IHRoaXMuZ2V0U2NhbGVGb3JJZChpaWQpO1xuICAgIG1ldGEudlNjYWxlID0gdGhpcy5nZXRTY2FsZUZvcklkKHZpZCk7XG4gIH1cbiAgZ2V0RGF0YXNldCgpIHtcbiAgICByZXR1cm4gdGhpcy5jaGFydC5kYXRhLmRhdGFzZXRzW3RoaXMuaW5kZXhdO1xuICB9XG4gIGdldE1ldGEoKSB7XG4gICAgcmV0dXJuIHRoaXMuY2hhcnQuZ2V0RGF0YXNldE1ldGEodGhpcy5pbmRleCk7XG4gIH1cbiAgZ2V0U2NhbGVGb3JJZChzY2FsZUlEKSB7XG4gICAgcmV0dXJuIHRoaXMuY2hhcnQuc2NhbGVzW3NjYWxlSURdO1xuICB9XG4gIF9nZXRPdGhlclNjYWxlKHNjYWxlKSB7XG4gICAgY29uc3QgbWV0YSA9IHRoaXMuX2NhY2hlZE1ldGE7XG4gICAgcmV0dXJuIHNjYWxlID09PSBtZXRhLmlTY2FsZVxuICAgICAgPyBtZXRhLnZTY2FsZVxuICAgICAgOiBtZXRhLmlTY2FsZTtcbiAgfVxuICByZXNldCgpIHtcbiAgICB0aGlzLl91cGRhdGUoJ3Jlc2V0Jyk7XG4gIH1cbiAgX2Rlc3Ryb3koKSB7XG4gICAgY29uc3QgbWV0YSA9IHRoaXMuX2NhY2hlZE1ldGE7XG4gICAgaWYgKHRoaXMuX2RhdGEpIHtcbiAgICAgIHVubGlzdGVuQXJyYXlFdmVudHModGhpcy5fZGF0YSwgdGhpcyk7XG4gICAgfVxuICAgIGlmIChtZXRhLl9zdGFja2VkKSB7XG4gICAgICBjbGVhclN0YWNrcyhtZXRhKTtcbiAgICB9XG4gIH1cbiAgX2RhdGFDaGVjaygpIHtcbiAgICBjb25zdCBkYXRhc2V0ID0gdGhpcy5nZXREYXRhc2V0KCk7XG4gICAgY29uc3QgZGF0YSA9IGRhdGFzZXQuZGF0YSB8fCAoZGF0YXNldC5kYXRhID0gW10pO1xuICAgIGNvbnN0IF9kYXRhID0gdGhpcy5fZGF0YTtcbiAgICBpZiAoaXNPYmplY3QoZGF0YSkpIHtcbiAgICAgIHRoaXMuX2RhdGEgPSBjb252ZXJ0T2JqZWN0RGF0YVRvQXJyYXkoZGF0YSk7XG4gICAgfSBlbHNlIGlmIChfZGF0YSAhPT0gZGF0YSkge1xuICAgICAgaWYgKF9kYXRhKSB7XG4gICAgICAgIHVubGlzdGVuQXJyYXlFdmVudHMoX2RhdGEsIHRoaXMpO1xuICAgICAgICBjb25zdCBtZXRhID0gdGhpcy5fY2FjaGVkTWV0YTtcbiAgICAgICAgY2xlYXJTdGFja3MobWV0YSk7XG4gICAgICAgIG1ldGEuX3BhcnNlZCA9IFtdO1xuICAgICAgfVxuICAgICAgaWYgKGRhdGEgJiYgT2JqZWN0LmlzRXh0ZW5zaWJsZShkYXRhKSkge1xuICAgICAgICBsaXN0ZW5BcnJheUV2ZW50cyhkYXRhLCB0aGlzKTtcbiAgICAgIH1cbiAgICAgIHRoaXMuX3N5bmNMaXN0ID0gW107XG4gICAgICB0aGlzLl9kYXRhID0gZGF0YTtcbiAgICB9XG4gIH1cbiAgYWRkRWxlbWVudHMoKSB7XG4gICAgY29uc3QgbWV0YSA9IHRoaXMuX2NhY2hlZE1ldGE7XG4gICAgdGhpcy5fZGF0YUNoZWNrKCk7XG4gICAgaWYgKHRoaXMuZGF0YXNldEVsZW1lbnRUeXBlKSB7XG4gICAgICBtZXRhLmRhdGFzZXQgPSBuZXcgdGhpcy5kYXRhc2V0RWxlbWVudFR5cGUoKTtcbiAgICB9XG4gIH1cbiAgYnVpbGRPclVwZGF0ZUVsZW1lbnRzKHJlc2V0TmV3RWxlbWVudHMpIHtcbiAgICBjb25zdCBtZXRhID0gdGhpcy5fY2FjaGVkTWV0YTtcbiAgICBjb25zdCBkYXRhc2V0ID0gdGhpcy5nZXREYXRhc2V0KCk7XG4gICAgbGV0IHN0YWNrQ2hhbmdlZCA9IGZhbHNlO1xuICAgIHRoaXMuX2RhdGFDaGVjaygpO1xuICAgIGNvbnN0IG9sZFN0YWNrZWQgPSBtZXRhLl9zdGFja2VkO1xuICAgIG1ldGEuX3N0YWNrZWQgPSBpc1N0YWNrZWQobWV0YS52U2NhbGUsIG1ldGEpO1xuICAgIGlmIChtZXRhLnN0YWNrICE9PSBkYXRhc2V0LnN0YWNrKSB7XG4gICAgICBzdGFja0NoYW5nZWQgPSB0cnVlO1xuICAgICAgY2xlYXJTdGFja3MobWV0YSk7XG4gICAgICBtZXRhLnN0YWNrID0gZGF0YXNldC5zdGFjaztcbiAgICB9XG4gICAgdGhpcy5fcmVzeW5jRWxlbWVudHMocmVzZXROZXdFbGVtZW50cyk7XG4gICAgaWYgKHN0YWNrQ2hhbmdlZCB8fCBvbGRTdGFja2VkICE9PSBtZXRhLl9zdGFja2VkKSB7XG4gICAgICB1cGRhdGVTdGFja3ModGhpcywgbWV0YS5fcGFyc2VkKTtcbiAgICB9XG4gIH1cbiAgY29uZmlndXJlKCkge1xuICAgIGNvbnN0IGNvbmZpZyA9IHRoaXMuY2hhcnQuY29uZmlnO1xuICAgIGNvbnN0IHNjb3BlS2V5cyA9IGNvbmZpZy5kYXRhc2V0U2NvcGVLZXlzKHRoaXMuX3R5cGUpO1xuICAgIGNvbnN0IHNjb3BlcyA9IGNvbmZpZy5nZXRPcHRpb25TY29wZXModGhpcy5nZXREYXRhc2V0KCksIHNjb3BlS2V5cywgdHJ1ZSk7XG4gICAgdGhpcy5vcHRpb25zID0gY29uZmlnLmNyZWF0ZVJlc29sdmVyKHNjb3BlcywgdGhpcy5nZXRDb250ZXh0KCkpO1xuICAgIHRoaXMuX3BhcnNpbmcgPSB0aGlzLm9wdGlvbnMucGFyc2luZztcbiAgICB0aGlzLl9jYWNoZWREYXRhT3B0cyA9IHt9O1xuICB9XG4gIHBhcnNlKHN0YXJ0LCBjb3VudCkge1xuICAgIGNvbnN0IHtfY2FjaGVkTWV0YTogbWV0YSwgX2RhdGE6IGRhdGF9ID0gdGhpcztcbiAgICBjb25zdCB7aVNjYWxlLCBfc3RhY2tlZH0gPSBtZXRhO1xuICAgIGNvbnN0IGlBeGlzID0gaVNjYWxlLmF4aXM7XG4gICAgbGV0IHNvcnRlZCA9IHN0YXJ0ID09PSAwICYmIGNvdW50ID09PSBkYXRhLmxlbmd0aCA/IHRydWUgOiBtZXRhLl9zb3J0ZWQ7XG4gICAgbGV0IHByZXYgPSBzdGFydCA+IDAgJiYgbWV0YS5fcGFyc2VkW3N0YXJ0IC0gMV07XG4gICAgbGV0IGksIGN1ciwgcGFyc2VkO1xuICAgIGlmICh0aGlzLl9wYXJzaW5nID09PSBmYWxzZSkge1xuICAgICAgbWV0YS5fcGFyc2VkID0gZGF0YTtcbiAgICAgIG1ldGEuX3NvcnRlZCA9IHRydWU7XG4gICAgICBwYXJzZWQgPSBkYXRhO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoaXNBcnJheShkYXRhW3N0YXJ0XSkpIHtcbiAgICAgICAgcGFyc2VkID0gdGhpcy5wYXJzZUFycmF5RGF0YShtZXRhLCBkYXRhLCBzdGFydCwgY291bnQpO1xuICAgICAgfSBlbHNlIGlmIChpc09iamVjdChkYXRhW3N0YXJ0XSkpIHtcbiAgICAgICAgcGFyc2VkID0gdGhpcy5wYXJzZU9iamVjdERhdGEobWV0YSwgZGF0YSwgc3RhcnQsIGNvdW50KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBhcnNlZCA9IHRoaXMucGFyc2VQcmltaXRpdmVEYXRhKG1ldGEsIGRhdGEsIHN0YXJ0LCBjb3VudCk7XG4gICAgICB9XG4gICAgICBjb25zdCBpc05vdEluT3JkZXJDb21wYXJlZFRvUHJldiA9ICgpID0+IGN1cltpQXhpc10gPT09IG51bGwgfHwgKHByZXYgJiYgY3VyW2lBeGlzXSA8IHByZXZbaUF4aXNdKTtcbiAgICAgIGZvciAoaSA9IDA7IGkgPCBjb3VudDsgKytpKSB7XG4gICAgICAgIG1ldGEuX3BhcnNlZFtpICsgc3RhcnRdID0gY3VyID0gcGFyc2VkW2ldO1xuICAgICAgICBpZiAoc29ydGVkKSB7XG4gICAgICAgICAgaWYgKGlzTm90SW5PcmRlckNvbXBhcmVkVG9QcmV2KCkpIHtcbiAgICAgICAgICAgIHNvcnRlZCA9IGZhbHNlO1xuICAgICAgICAgIH1cbiAgICAgICAgICBwcmV2ID0gY3VyO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBtZXRhLl9zb3J0ZWQgPSBzb3J0ZWQ7XG4gICAgfVxuICAgIGlmIChfc3RhY2tlZCkge1xuICAgICAgdXBkYXRlU3RhY2tzKHRoaXMsIHBhcnNlZCk7XG4gICAgfVxuICB9XG4gIHBhcnNlUHJpbWl0aXZlRGF0YShtZXRhLCBkYXRhLCBzdGFydCwgY291bnQpIHtcbiAgICBjb25zdCB7aVNjYWxlLCB2U2NhbGV9ID0gbWV0YTtcbiAgICBjb25zdCBpQXhpcyA9IGlTY2FsZS5heGlzO1xuICAgIGNvbnN0IHZBeGlzID0gdlNjYWxlLmF4aXM7XG4gICAgY29uc3QgbGFiZWxzID0gaVNjYWxlLmdldExhYmVscygpO1xuICAgIGNvbnN0IHNpbmdsZVNjYWxlID0gaVNjYWxlID09PSB2U2NhbGU7XG4gICAgY29uc3QgcGFyc2VkID0gbmV3IEFycmF5KGNvdW50KTtcbiAgICBsZXQgaSwgaWxlbiwgaW5kZXg7XG4gICAgZm9yIChpID0gMCwgaWxlbiA9IGNvdW50OyBpIDwgaWxlbjsgKytpKSB7XG4gICAgICBpbmRleCA9IGkgKyBzdGFydDtcbiAgICAgIHBhcnNlZFtpXSA9IHtcbiAgICAgICAgW2lBeGlzXTogc2luZ2xlU2NhbGUgfHwgaVNjYWxlLnBhcnNlKGxhYmVsc1tpbmRleF0sIGluZGV4KSxcbiAgICAgICAgW3ZBeGlzXTogdlNjYWxlLnBhcnNlKGRhdGFbaW5kZXhdLCBpbmRleClcbiAgICAgIH07XG4gICAgfVxuICAgIHJldHVybiBwYXJzZWQ7XG4gIH1cbiAgcGFyc2VBcnJheURhdGEobWV0YSwgZGF0YSwgc3RhcnQsIGNvdW50KSB7XG4gICAgY29uc3Qge3hTY2FsZSwgeVNjYWxlfSA9IG1ldGE7XG4gICAgY29uc3QgcGFyc2VkID0gbmV3IEFycmF5KGNvdW50KTtcbiAgICBsZXQgaSwgaWxlbiwgaW5kZXgsIGl0ZW07XG4gICAgZm9yIChpID0gMCwgaWxlbiA9IGNvdW50OyBpIDwgaWxlbjsgKytpKSB7XG4gICAgICBpbmRleCA9IGkgKyBzdGFydDtcbiAgICAgIGl0ZW0gPSBkYXRhW2luZGV4XTtcbiAgICAgIHBhcnNlZFtpXSA9IHtcbiAgICAgICAgeDogeFNjYWxlLnBhcnNlKGl0ZW1bMF0sIGluZGV4KSxcbiAgICAgICAgeTogeVNjYWxlLnBhcnNlKGl0ZW1bMV0sIGluZGV4KVxuICAgICAgfTtcbiAgICB9XG4gICAgcmV0dXJuIHBhcnNlZDtcbiAgfVxuICBwYXJzZU9iamVjdERhdGEobWV0YSwgZGF0YSwgc3RhcnQsIGNvdW50KSB7XG4gICAgY29uc3Qge3hTY2FsZSwgeVNjYWxlfSA9IG1ldGE7XG4gICAgY29uc3Qge3hBeGlzS2V5ID0gJ3gnLCB5QXhpc0tleSA9ICd5J30gPSB0aGlzLl9wYXJzaW5nO1xuICAgIGNvbnN0IHBhcnNlZCA9IG5ldyBBcnJheShjb3VudCk7XG4gICAgbGV0IGksIGlsZW4sIGluZGV4LCBpdGVtO1xuICAgIGZvciAoaSA9IDAsIGlsZW4gPSBjb3VudDsgaSA8IGlsZW47ICsraSkge1xuICAgICAgaW5kZXggPSBpICsgc3RhcnQ7XG4gICAgICBpdGVtID0gZGF0YVtpbmRleF07XG4gICAgICBwYXJzZWRbaV0gPSB7XG4gICAgICAgIHg6IHhTY2FsZS5wYXJzZShyZXNvbHZlT2JqZWN0S2V5KGl0ZW0sIHhBeGlzS2V5KSwgaW5kZXgpLFxuICAgICAgICB5OiB5U2NhbGUucGFyc2UocmVzb2x2ZU9iamVjdEtleShpdGVtLCB5QXhpc0tleSksIGluZGV4KVxuICAgICAgfTtcbiAgICB9XG4gICAgcmV0dXJuIHBhcnNlZDtcbiAgfVxuICBnZXRQYXJzZWQoaW5kZXgpIHtcbiAgICByZXR1cm4gdGhpcy5fY2FjaGVkTWV0YS5fcGFyc2VkW2luZGV4XTtcbiAgfVxuICBnZXREYXRhRWxlbWVudChpbmRleCkge1xuICAgIHJldHVybiB0aGlzLl9jYWNoZWRNZXRhLmRhdGFbaW5kZXhdO1xuICB9XG4gIGFwcGx5U3RhY2soc2NhbGUsIHBhcnNlZCwgbW9kZSkge1xuICAgIGNvbnN0IGNoYXJ0ID0gdGhpcy5jaGFydDtcbiAgICBjb25zdCBtZXRhID0gdGhpcy5fY2FjaGVkTWV0YTtcbiAgICBjb25zdCB2YWx1ZSA9IHBhcnNlZFtzY2FsZS5heGlzXTtcbiAgICBjb25zdCBzdGFjayA9IHtcbiAgICAgIGtleXM6IGdldFNvcnRlZERhdGFzZXRJbmRpY2VzKGNoYXJ0LCB0cnVlKSxcbiAgICAgIHZhbHVlczogcGFyc2VkLl9zdGFja3Nbc2NhbGUuYXhpc11cbiAgICB9O1xuICAgIHJldHVybiBhcHBseVN0YWNrKHN0YWNrLCB2YWx1ZSwgbWV0YS5pbmRleCwge21vZGV9KTtcbiAgfVxuICB1cGRhdGVSYW5nZUZyb21QYXJzZWQocmFuZ2UsIHNjYWxlLCBwYXJzZWQsIHN0YWNrKSB7XG4gICAgY29uc3QgcGFyc2VkVmFsdWUgPSBwYXJzZWRbc2NhbGUuYXhpc107XG4gICAgbGV0IHZhbHVlID0gcGFyc2VkVmFsdWUgPT09IG51bGwgPyBOYU4gOiBwYXJzZWRWYWx1ZTtcbiAgICBjb25zdCB2YWx1ZXMgPSBzdGFjayAmJiBwYXJzZWQuX3N0YWNrc1tzY2FsZS5heGlzXTtcbiAgICBpZiAoc3RhY2sgJiYgdmFsdWVzKSB7XG4gICAgICBzdGFjay52YWx1ZXMgPSB2YWx1ZXM7XG4gICAgICB2YWx1ZSA9IGFwcGx5U3RhY2soc3RhY2ssIHBhcnNlZFZhbHVlLCB0aGlzLl9jYWNoZWRNZXRhLmluZGV4KTtcbiAgICB9XG4gICAgcmFuZ2UubWluID0gTWF0aC5taW4ocmFuZ2UubWluLCB2YWx1ZSk7XG4gICAgcmFuZ2UubWF4ID0gTWF0aC5tYXgocmFuZ2UubWF4LCB2YWx1ZSk7XG4gIH1cbiAgZ2V0TWluTWF4KHNjYWxlLCBjYW5TdGFjaykge1xuICAgIGNvbnN0IG1ldGEgPSB0aGlzLl9jYWNoZWRNZXRhO1xuICAgIGNvbnN0IF9wYXJzZWQgPSBtZXRhLl9wYXJzZWQ7XG4gICAgY29uc3Qgc29ydGVkID0gbWV0YS5fc29ydGVkICYmIHNjYWxlID09PSBtZXRhLmlTY2FsZTtcbiAgICBjb25zdCBpbGVuID0gX3BhcnNlZC5sZW5ndGg7XG4gICAgY29uc3Qgb3RoZXJTY2FsZSA9IHRoaXMuX2dldE90aGVyU2NhbGUoc2NhbGUpO1xuICAgIGNvbnN0IHN0YWNrID0gY3JlYXRlU3RhY2soY2FuU3RhY2ssIG1ldGEsIHRoaXMuY2hhcnQpO1xuICAgIGNvbnN0IHJhbmdlID0ge21pbjogTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZLCBtYXg6IE51bWJlci5ORUdBVElWRV9JTkZJTklUWX07XG4gICAgY29uc3Qge21pbjogb3RoZXJNaW4sIG1heDogb3RoZXJNYXh9ID0gZ2V0VXNlckJvdW5kcyhvdGhlclNjYWxlKTtcbiAgICBsZXQgaSwgcGFyc2VkO1xuICAgIGZ1bmN0aW9uIF9za2lwKCkge1xuICAgICAgcGFyc2VkID0gX3BhcnNlZFtpXTtcbiAgICAgIGNvbnN0IG90aGVyVmFsdWUgPSBwYXJzZWRbb3RoZXJTY2FsZS5heGlzXTtcbiAgICAgIHJldHVybiAhaXNOdW1iZXJGaW5pdGUocGFyc2VkW3NjYWxlLmF4aXNdKSB8fCBvdGhlck1pbiA+IG90aGVyVmFsdWUgfHwgb3RoZXJNYXggPCBvdGhlclZhbHVlO1xuICAgIH1cbiAgICBmb3IgKGkgPSAwOyBpIDwgaWxlbjsgKytpKSB7XG4gICAgICBpZiAoX3NraXAoKSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIHRoaXMudXBkYXRlUmFuZ2VGcm9tUGFyc2VkKHJhbmdlLCBzY2FsZSwgcGFyc2VkLCBzdGFjayk7XG4gICAgICBpZiAoc29ydGVkKSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoc29ydGVkKSB7XG4gICAgICBmb3IgKGkgPSBpbGVuIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgaWYgKF9za2lwKCkpIHtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnVwZGF0ZVJhbmdlRnJvbVBhcnNlZChyYW5nZSwgc2NhbGUsIHBhcnNlZCwgc3RhY2spO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJhbmdlO1xuICB9XG4gIGdldEFsbFBhcnNlZFZhbHVlcyhzY2FsZSkge1xuICAgIGNvbnN0IHBhcnNlZCA9IHRoaXMuX2NhY2hlZE1ldGEuX3BhcnNlZDtcbiAgICBjb25zdCB2YWx1ZXMgPSBbXTtcbiAgICBsZXQgaSwgaWxlbiwgdmFsdWU7XG4gICAgZm9yIChpID0gMCwgaWxlbiA9IHBhcnNlZC5sZW5ndGg7IGkgPCBpbGVuOyArK2kpIHtcbiAgICAgIHZhbHVlID0gcGFyc2VkW2ldW3NjYWxlLmF4aXNdO1xuICAgICAgaWYgKGlzTnVtYmVyRmluaXRlKHZhbHVlKSkge1xuICAgICAgICB2YWx1ZXMucHVzaCh2YWx1ZSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB2YWx1ZXM7XG4gIH1cbiAgZ2V0TWF4T3ZlcmZsb3coKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGdldExhYmVsQW5kVmFsdWUoaW5kZXgpIHtcbiAgICBjb25zdCBtZXRhID0gdGhpcy5fY2FjaGVkTWV0YTtcbiAgICBjb25zdCBpU2NhbGUgPSBtZXRhLmlTY2FsZTtcbiAgICBjb25zdCB2U2NhbGUgPSBtZXRhLnZTY2FsZTtcbiAgICBjb25zdCBwYXJzZWQgPSB0aGlzLmdldFBhcnNlZChpbmRleCk7XG4gICAgcmV0dXJuIHtcbiAgICAgIGxhYmVsOiBpU2NhbGUgPyAnJyArIGlTY2FsZS5nZXRMYWJlbEZvclZhbHVlKHBhcnNlZFtpU2NhbGUuYXhpc10pIDogJycsXG4gICAgICB2YWx1ZTogdlNjYWxlID8gJycgKyB2U2NhbGUuZ2V0TGFiZWxGb3JWYWx1ZShwYXJzZWRbdlNjYWxlLmF4aXNdKSA6ICcnXG4gICAgfTtcbiAgfVxuICBfdXBkYXRlKG1vZGUpIHtcbiAgICBjb25zdCBtZXRhID0gdGhpcy5fY2FjaGVkTWV0YTtcbiAgICB0aGlzLnVwZGF0ZShtb2RlIHx8ICdkZWZhdWx0Jyk7XG4gICAgbWV0YS5fY2xpcCA9IHRvQ2xpcCh2YWx1ZU9yRGVmYXVsdCh0aGlzLm9wdGlvbnMuY2xpcCwgZGVmYXVsdENsaXAobWV0YS54U2NhbGUsIG1ldGEueVNjYWxlLCB0aGlzLmdldE1heE92ZXJmbG93KCkpKSk7XG4gIH1cbiAgdXBkYXRlKG1vZGUpIHt9XG4gIGRyYXcoKSB7XG4gICAgY29uc3QgY3R4ID0gdGhpcy5fY3R4O1xuICAgIGNvbnN0IGNoYXJ0ID0gdGhpcy5jaGFydDtcbiAgICBjb25zdCBtZXRhID0gdGhpcy5fY2FjaGVkTWV0YTtcbiAgICBjb25zdCBlbGVtZW50cyA9IG1ldGEuZGF0YSB8fCBbXTtcbiAgICBjb25zdCBhcmVhID0gY2hhcnQuY2hhcnRBcmVhO1xuICAgIGNvbnN0IGFjdGl2ZSA9IFtdO1xuICAgIGNvbnN0IHN0YXJ0ID0gdGhpcy5fZHJhd1N0YXJ0IHx8IDA7XG4gICAgY29uc3QgY291bnQgPSB0aGlzLl9kcmF3Q291bnQgfHwgKGVsZW1lbnRzLmxlbmd0aCAtIHN0YXJ0KTtcbiAgICBjb25zdCBkcmF3QWN0aXZlRWxlbWVudHNPblRvcCA9IHRoaXMub3B0aW9ucy5kcmF3QWN0aXZlRWxlbWVudHNPblRvcDtcbiAgICBsZXQgaTtcbiAgICBpZiAobWV0YS5kYXRhc2V0KSB7XG4gICAgICBtZXRhLmRhdGFzZXQuZHJhdyhjdHgsIGFyZWEsIHN0YXJ0LCBjb3VudCk7XG4gICAgfVxuICAgIGZvciAoaSA9IHN0YXJ0OyBpIDwgc3RhcnQgKyBjb3VudDsgKytpKSB7XG4gICAgICBjb25zdCBlbGVtZW50ID0gZWxlbWVudHNbaV07XG4gICAgICBpZiAoZWxlbWVudC5oaWRkZW4pIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICBpZiAoZWxlbWVudC5hY3RpdmUgJiYgZHJhd0FjdGl2ZUVsZW1lbnRzT25Ub3ApIHtcbiAgICAgICAgYWN0aXZlLnB1c2goZWxlbWVudCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBlbGVtZW50LmRyYXcoY3R4LCBhcmVhKTtcbiAgICAgIH1cbiAgICB9XG4gICAgZm9yIChpID0gMDsgaSA8IGFjdGl2ZS5sZW5ndGg7ICsraSkge1xuICAgICAgYWN0aXZlW2ldLmRyYXcoY3R4LCBhcmVhKTtcbiAgICB9XG4gIH1cbiAgZ2V0U3R5bGUoaW5kZXgsIGFjdGl2ZSkge1xuICAgIGNvbnN0IG1vZGUgPSBhY3RpdmUgPyAnYWN0aXZlJyA6ICdkZWZhdWx0JztcbiAgICByZXR1cm4gaW5kZXggPT09IHVuZGVmaW5lZCAmJiB0aGlzLl9jYWNoZWRNZXRhLmRhdGFzZXRcbiAgICAgID8gdGhpcy5yZXNvbHZlRGF0YXNldEVsZW1lbnRPcHRpb25zKG1vZGUpXG4gICAgICA6IHRoaXMucmVzb2x2ZURhdGFFbGVtZW50T3B0aW9ucyhpbmRleCB8fCAwLCBtb2RlKTtcbiAgfVxuICBnZXRDb250ZXh0KGluZGV4LCBhY3RpdmUsIG1vZGUpIHtcbiAgICBjb25zdCBkYXRhc2V0ID0gdGhpcy5nZXREYXRhc2V0KCk7XG4gICAgbGV0IGNvbnRleHQ7XG4gICAgaWYgKGluZGV4ID49IDAgJiYgaW5kZXggPCB0aGlzLl9jYWNoZWRNZXRhLmRhdGEubGVuZ3RoKSB7XG4gICAgICBjb25zdCBlbGVtZW50ID0gdGhpcy5fY2FjaGVkTWV0YS5kYXRhW2luZGV4XTtcbiAgICAgIGNvbnRleHQgPSBlbGVtZW50LiRjb250ZXh0IHx8XG4gICAgICAgIChlbGVtZW50LiRjb250ZXh0ID0gY3JlYXRlRGF0YUNvbnRleHQodGhpcy5nZXRDb250ZXh0KCksIGluZGV4LCBlbGVtZW50KSk7XG4gICAgICBjb250ZXh0LnBhcnNlZCA9IHRoaXMuZ2V0UGFyc2VkKGluZGV4KTtcbiAgICAgIGNvbnRleHQucmF3ID0gZGF0YXNldC5kYXRhW2luZGV4XTtcbiAgICAgIGNvbnRleHQuaW5kZXggPSBjb250ZXh0LmRhdGFJbmRleCA9IGluZGV4O1xuICAgIH0gZWxzZSB7XG4gICAgICBjb250ZXh0ID0gdGhpcy4kY29udGV4dCB8fFxuICAgICAgICAodGhpcy4kY29udGV4dCA9IGNyZWF0ZURhdGFzZXRDb250ZXh0KHRoaXMuY2hhcnQuZ2V0Q29udGV4dCgpLCB0aGlzLmluZGV4KSk7XG4gICAgICBjb250ZXh0LmRhdGFzZXQgPSBkYXRhc2V0O1xuICAgICAgY29udGV4dC5pbmRleCA9IGNvbnRleHQuZGF0YXNldEluZGV4ID0gdGhpcy5pbmRleDtcbiAgICB9XG4gICAgY29udGV4dC5hY3RpdmUgPSAhIWFjdGl2ZTtcbiAgICBjb250ZXh0Lm1vZGUgPSBtb2RlO1xuICAgIHJldHVybiBjb250ZXh0O1xuICB9XG4gIHJlc29sdmVEYXRhc2V0RWxlbWVudE9wdGlvbnMobW9kZSkge1xuICAgIHJldHVybiB0aGlzLl9yZXNvbHZlRWxlbWVudE9wdGlvbnModGhpcy5kYXRhc2V0RWxlbWVudFR5cGUuaWQsIG1vZGUpO1xuICB9XG4gIHJlc29sdmVEYXRhRWxlbWVudE9wdGlvbnMoaW5kZXgsIG1vZGUpIHtcbiAgICByZXR1cm4gdGhpcy5fcmVzb2x2ZUVsZW1lbnRPcHRpb25zKHRoaXMuZGF0YUVsZW1lbnRUeXBlLmlkLCBtb2RlLCBpbmRleCk7XG4gIH1cbiAgX3Jlc29sdmVFbGVtZW50T3B0aW9ucyhlbGVtZW50VHlwZSwgbW9kZSA9ICdkZWZhdWx0JywgaW5kZXgpIHtcbiAgICBjb25zdCBhY3RpdmUgPSBtb2RlID09PSAnYWN0aXZlJztcbiAgICBjb25zdCBjYWNoZSA9IHRoaXMuX2NhY2hlZERhdGFPcHRzO1xuICAgIGNvbnN0IGNhY2hlS2V5ID0gZWxlbWVudFR5cGUgKyAnLScgKyBtb2RlO1xuICAgIGNvbnN0IGNhY2hlZCA9IGNhY2hlW2NhY2hlS2V5XTtcbiAgICBjb25zdCBzaGFyaW5nID0gdGhpcy5lbmFibGVPcHRpb25TaGFyaW5nICYmIGRlZmluZWQoaW5kZXgpO1xuICAgIGlmIChjYWNoZWQpIHtcbiAgICAgIHJldHVybiBjbG9uZUlmTm90U2hhcmVkKGNhY2hlZCwgc2hhcmluZyk7XG4gICAgfVxuICAgIGNvbnN0IGNvbmZpZyA9IHRoaXMuY2hhcnQuY29uZmlnO1xuICAgIGNvbnN0IHNjb3BlS2V5cyA9IGNvbmZpZy5kYXRhc2V0RWxlbWVudFNjb3BlS2V5cyh0aGlzLl90eXBlLCBlbGVtZW50VHlwZSk7XG4gICAgY29uc3QgcHJlZml4ZXMgPSBhY3RpdmUgPyBbYCR7ZWxlbWVudFR5cGV9SG92ZXJgLCAnaG92ZXInLCBlbGVtZW50VHlwZSwgJyddIDogW2VsZW1lbnRUeXBlLCAnJ107XG4gICAgY29uc3Qgc2NvcGVzID0gY29uZmlnLmdldE9wdGlvblNjb3Blcyh0aGlzLmdldERhdGFzZXQoKSwgc2NvcGVLZXlzKTtcbiAgICBjb25zdCBuYW1lcyA9IE9iamVjdC5rZXlzKGRlZmF1bHRzLmVsZW1lbnRzW2VsZW1lbnRUeXBlXSk7XG4gICAgY29uc3QgY29udGV4dCA9ICgpID0+IHRoaXMuZ2V0Q29udGV4dChpbmRleCwgYWN0aXZlKTtcbiAgICBjb25zdCB2YWx1ZXMgPSBjb25maWcucmVzb2x2ZU5hbWVkT3B0aW9ucyhzY29wZXMsIG5hbWVzLCBjb250ZXh0LCBwcmVmaXhlcyk7XG4gICAgaWYgKHZhbHVlcy4kc2hhcmVkKSB7XG4gICAgICB2YWx1ZXMuJHNoYXJlZCA9IHNoYXJpbmc7XG4gICAgICBjYWNoZVtjYWNoZUtleV0gPSBPYmplY3QuZnJlZXplKGNsb25lSWZOb3RTaGFyZWQodmFsdWVzLCBzaGFyaW5nKSk7XG4gICAgfVxuICAgIHJldHVybiB2YWx1ZXM7XG4gIH1cbiAgX3Jlc29sdmVBbmltYXRpb25zKGluZGV4LCB0cmFuc2l0aW9uLCBhY3RpdmUpIHtcbiAgICBjb25zdCBjaGFydCA9IHRoaXMuY2hhcnQ7XG4gICAgY29uc3QgY2FjaGUgPSB0aGlzLl9jYWNoZWREYXRhT3B0cztcbiAgICBjb25zdCBjYWNoZUtleSA9IGBhbmltYXRpb24tJHt0cmFuc2l0aW9ufWA7XG4gICAgY29uc3QgY2FjaGVkID0gY2FjaGVbY2FjaGVLZXldO1xuICAgIGlmIChjYWNoZWQpIHtcbiAgICAgIHJldHVybiBjYWNoZWQ7XG4gICAgfVxuICAgIGxldCBvcHRpb25zO1xuICAgIGlmIChjaGFydC5vcHRpb25zLmFuaW1hdGlvbiAhPT0gZmFsc2UpIHtcbiAgICAgIGNvbnN0IGNvbmZpZyA9IHRoaXMuY2hhcnQuY29uZmlnO1xuICAgICAgY29uc3Qgc2NvcGVLZXlzID0gY29uZmlnLmRhdGFzZXRBbmltYXRpb25TY29wZUtleXModGhpcy5fdHlwZSwgdHJhbnNpdGlvbik7XG4gICAgICBjb25zdCBzY29wZXMgPSBjb25maWcuZ2V0T3B0aW9uU2NvcGVzKHRoaXMuZ2V0RGF0YXNldCgpLCBzY29wZUtleXMpO1xuICAgICAgb3B0aW9ucyA9IGNvbmZpZy5jcmVhdGVSZXNvbHZlcihzY29wZXMsIHRoaXMuZ2V0Q29udGV4dChpbmRleCwgYWN0aXZlLCB0cmFuc2l0aW9uKSk7XG4gICAgfVxuICAgIGNvbnN0IGFuaW1hdGlvbnMgPSBuZXcgQW5pbWF0aW9ucyhjaGFydCwgb3B0aW9ucyAmJiBvcHRpb25zLmFuaW1hdGlvbnMpO1xuICAgIGlmIChvcHRpb25zICYmIG9wdGlvbnMuX2NhY2hlYWJsZSkge1xuICAgICAgY2FjaGVbY2FjaGVLZXldID0gT2JqZWN0LmZyZWV6ZShhbmltYXRpb25zKTtcbiAgICB9XG4gICAgcmV0dXJuIGFuaW1hdGlvbnM7XG4gIH1cbiAgZ2V0U2hhcmVkT3B0aW9ucyhvcHRpb25zKSB7XG4gICAgaWYgKCFvcHRpb25zLiRzaGFyZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuX3NoYXJlZE9wdGlvbnMgfHwgKHRoaXMuX3NoYXJlZE9wdGlvbnMgPSBPYmplY3QuYXNzaWduKHt9LCBvcHRpb25zKSk7XG4gIH1cbiAgaW5jbHVkZU9wdGlvbnMobW9kZSwgc2hhcmVkT3B0aW9ucykge1xuICAgIHJldHVybiAhc2hhcmVkT3B0aW9ucyB8fCBpc0RpcmVjdFVwZGF0ZU1vZGUobW9kZSkgfHwgdGhpcy5jaGFydC5fYW5pbWF0aW9uc0Rpc2FibGVkO1xuICB9XG4gIHVwZGF0ZUVsZW1lbnQoZWxlbWVudCwgaW5kZXgsIHByb3BlcnRpZXMsIG1vZGUpIHtcbiAgICBpZiAoaXNEaXJlY3RVcGRhdGVNb2RlKG1vZGUpKSB7XG4gICAgICBPYmplY3QuYXNzaWduKGVsZW1lbnQsIHByb3BlcnRpZXMpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl9yZXNvbHZlQW5pbWF0aW9ucyhpbmRleCwgbW9kZSkudXBkYXRlKGVsZW1lbnQsIHByb3BlcnRpZXMpO1xuICAgIH1cbiAgfVxuICB1cGRhdGVTaGFyZWRPcHRpb25zKHNoYXJlZE9wdGlvbnMsIG1vZGUsIG5ld09wdGlvbnMpIHtcbiAgICBpZiAoc2hhcmVkT3B0aW9ucyAmJiAhaXNEaXJlY3RVcGRhdGVNb2RlKG1vZGUpKSB7XG4gICAgICB0aGlzLl9yZXNvbHZlQW5pbWF0aW9ucyh1bmRlZmluZWQsIG1vZGUpLnVwZGF0ZShzaGFyZWRPcHRpb25zLCBuZXdPcHRpb25zKTtcbiAgICB9XG4gIH1cbiAgX3NldFN0eWxlKGVsZW1lbnQsIGluZGV4LCBtb2RlLCBhY3RpdmUpIHtcbiAgICBlbGVtZW50LmFjdGl2ZSA9IGFjdGl2ZTtcbiAgICBjb25zdCBvcHRpb25zID0gdGhpcy5nZXRTdHlsZShpbmRleCwgYWN0aXZlKTtcbiAgICB0aGlzLl9yZXNvbHZlQW5pbWF0aW9ucyhpbmRleCwgbW9kZSwgYWN0aXZlKS51cGRhdGUoZWxlbWVudCwge1xuICAgICAgb3B0aW9uczogKCFhY3RpdmUgJiYgdGhpcy5nZXRTaGFyZWRPcHRpb25zKG9wdGlvbnMpKSB8fCBvcHRpb25zXG4gICAgfSk7XG4gIH1cbiAgcmVtb3ZlSG92ZXJTdHlsZShlbGVtZW50LCBkYXRhc2V0SW5kZXgsIGluZGV4KSB7XG4gICAgdGhpcy5fc2V0U3R5bGUoZWxlbWVudCwgaW5kZXgsICdhY3RpdmUnLCBmYWxzZSk7XG4gIH1cbiAgc2V0SG92ZXJTdHlsZShlbGVtZW50LCBkYXRhc2V0SW5kZXgsIGluZGV4KSB7XG4gICAgdGhpcy5fc2V0U3R5bGUoZWxlbWVudCwgaW5kZXgsICdhY3RpdmUnLCB0cnVlKTtcbiAgfVxuICBfcmVtb3ZlRGF0YXNldEhvdmVyU3R5bGUoKSB7XG4gICAgY29uc3QgZWxlbWVudCA9IHRoaXMuX2NhY2hlZE1ldGEuZGF0YXNldDtcbiAgICBpZiAoZWxlbWVudCkge1xuICAgICAgdGhpcy5fc2V0U3R5bGUoZWxlbWVudCwgdW5kZWZpbmVkLCAnYWN0aXZlJywgZmFsc2UpO1xuICAgIH1cbiAgfVxuICBfc2V0RGF0YXNldEhvdmVyU3R5bGUoKSB7XG4gICAgY29uc3QgZWxlbWVudCA9IHRoaXMuX2NhY2hlZE1ldGEuZGF0YXNldDtcbiAgICBpZiAoZWxlbWVudCkge1xuICAgICAgdGhpcy5fc2V0U3R5bGUoZWxlbWVudCwgdW5kZWZpbmVkLCAnYWN0aXZlJywgdHJ1ZSk7XG4gICAgfVxuICB9XG4gIF9yZXN5bmNFbGVtZW50cyhyZXNldE5ld0VsZW1lbnRzKSB7XG4gICAgY29uc3QgZGF0YSA9IHRoaXMuX2RhdGE7XG4gICAgY29uc3QgZWxlbWVudHMgPSB0aGlzLl9jYWNoZWRNZXRhLmRhdGE7XG4gICAgZm9yIChjb25zdCBbbWV0aG9kLCBhcmcxLCBhcmcyXSBvZiB0aGlzLl9zeW5jTGlzdCkge1xuICAgICAgdGhpc1ttZXRob2RdKGFyZzEsIGFyZzIpO1xuICAgIH1cbiAgICB0aGlzLl9zeW5jTGlzdCA9IFtdO1xuICAgIGNvbnN0IG51bU1ldGEgPSBlbGVtZW50cy5sZW5ndGg7XG4gICAgY29uc3QgbnVtRGF0YSA9IGRhdGEubGVuZ3RoO1xuICAgIGNvbnN0IGNvdW50ID0gTWF0aC5taW4obnVtRGF0YSwgbnVtTWV0YSk7XG4gICAgaWYgKGNvdW50KSB7XG4gICAgICB0aGlzLnBhcnNlKDAsIGNvdW50KTtcbiAgICB9XG4gICAgaWYgKG51bURhdGEgPiBudW1NZXRhKSB7XG4gICAgICB0aGlzLl9pbnNlcnRFbGVtZW50cyhudW1NZXRhLCBudW1EYXRhIC0gbnVtTWV0YSwgcmVzZXROZXdFbGVtZW50cyk7XG4gICAgfSBlbHNlIGlmIChudW1EYXRhIDwgbnVtTWV0YSkge1xuICAgICAgdGhpcy5fcmVtb3ZlRWxlbWVudHMobnVtRGF0YSwgbnVtTWV0YSAtIG51bURhdGEpO1xuICAgIH1cbiAgfVxuICBfaW5zZXJ0RWxlbWVudHMoc3RhcnQsIGNvdW50LCByZXNldE5ld0VsZW1lbnRzID0gdHJ1ZSkge1xuICAgIGNvbnN0IG1ldGEgPSB0aGlzLl9jYWNoZWRNZXRhO1xuICAgIGNvbnN0IGRhdGEgPSBtZXRhLmRhdGE7XG4gICAgY29uc3QgZW5kID0gc3RhcnQgKyBjb3VudDtcbiAgICBsZXQgaTtcbiAgICBjb25zdCBtb3ZlID0gKGFycikgPT4ge1xuICAgICAgYXJyLmxlbmd0aCArPSBjb3VudDtcbiAgICAgIGZvciAoaSA9IGFyci5sZW5ndGggLSAxOyBpID49IGVuZDsgaS0tKSB7XG4gICAgICAgIGFycltpXSA9IGFycltpIC0gY291bnRdO1xuICAgICAgfVxuICAgIH07XG4gICAgbW92ZShkYXRhKTtcbiAgICBmb3IgKGkgPSBzdGFydDsgaSA8IGVuZDsgKytpKSB7XG4gICAgICBkYXRhW2ldID0gbmV3IHRoaXMuZGF0YUVsZW1lbnRUeXBlKCk7XG4gICAgfVxuICAgIGlmICh0aGlzLl9wYXJzaW5nKSB7XG4gICAgICBtb3ZlKG1ldGEuX3BhcnNlZCk7XG4gICAgfVxuICAgIHRoaXMucGFyc2Uoc3RhcnQsIGNvdW50KTtcbiAgICBpZiAocmVzZXROZXdFbGVtZW50cykge1xuICAgICAgdGhpcy51cGRhdGVFbGVtZW50cyhkYXRhLCBzdGFydCwgY291bnQsICdyZXNldCcpO1xuICAgIH1cbiAgfVxuICB1cGRhdGVFbGVtZW50cyhlbGVtZW50LCBzdGFydCwgY291bnQsIG1vZGUpIHt9XG4gIF9yZW1vdmVFbGVtZW50cyhzdGFydCwgY291bnQpIHtcbiAgICBjb25zdCBtZXRhID0gdGhpcy5fY2FjaGVkTWV0YTtcbiAgICBpZiAodGhpcy5fcGFyc2luZykge1xuICAgICAgY29uc3QgcmVtb3ZlZCA9IG1ldGEuX3BhcnNlZC5zcGxpY2Uoc3RhcnQsIGNvdW50KTtcbiAgICAgIGlmIChtZXRhLl9zdGFja2VkKSB7XG4gICAgICAgIGNsZWFyU3RhY2tzKG1ldGEsIHJlbW92ZWQpO1xuICAgICAgfVxuICAgIH1cbiAgICBtZXRhLmRhdGEuc3BsaWNlKHN0YXJ0LCBjb3VudCk7XG4gIH1cbiAgX3N5bmMoYXJncykge1xuICAgIGlmICh0aGlzLl9wYXJzaW5nKSB7XG4gICAgICB0aGlzLl9zeW5jTGlzdC5wdXNoKGFyZ3MpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBbbWV0aG9kLCBhcmcxLCBhcmcyXSA9IGFyZ3M7XG4gICAgICB0aGlzW21ldGhvZF0oYXJnMSwgYXJnMik7XG4gICAgfVxuICAgIHRoaXMuY2hhcnQuX2RhdGFDaGFuZ2VzLnB1c2goW3RoaXMuaW5kZXgsIC4uLmFyZ3NdKTtcbiAgfVxuICBfb25EYXRhUHVzaCgpIHtcbiAgICBjb25zdCBjb3VudCA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgdGhpcy5fc3luYyhbJ19pbnNlcnRFbGVtZW50cycsIHRoaXMuZ2V0RGF0YXNldCgpLmRhdGEubGVuZ3RoIC0gY291bnQsIGNvdW50XSk7XG4gIH1cbiAgX29uRGF0YVBvcCgpIHtcbiAgICB0aGlzLl9zeW5jKFsnX3JlbW92ZUVsZW1lbnRzJywgdGhpcy5fY2FjaGVkTWV0YS5kYXRhLmxlbmd0aCAtIDEsIDFdKTtcbiAgfVxuICBfb25EYXRhU2hpZnQoKSB7XG4gICAgdGhpcy5fc3luYyhbJ19yZW1vdmVFbGVtZW50cycsIDAsIDFdKTtcbiAgfVxuICBfb25EYXRhU3BsaWNlKHN0YXJ0LCBjb3VudCkge1xuICAgIGlmIChjb3VudCkge1xuICAgICAgdGhpcy5fc3luYyhbJ19yZW1vdmVFbGVtZW50cycsIHN0YXJ0LCBjb3VudF0pO1xuICAgIH1cbiAgICBjb25zdCBuZXdDb3VudCA9IGFyZ3VtZW50cy5sZW5ndGggLSAyO1xuICAgIGlmIChuZXdDb3VudCkge1xuICAgICAgdGhpcy5fc3luYyhbJ19pbnNlcnRFbGVtZW50cycsIHN0YXJ0LCBuZXdDb3VudF0pO1xuICAgIH1cbiAgfVxuICBfb25EYXRhVW5zaGlmdCgpIHtcbiAgICB0aGlzLl9zeW5jKFsnX2luc2VydEVsZW1lbnRzJywgMCwgYXJndW1lbnRzLmxlbmd0aF0pO1xuICB9XG59XG5EYXRhc2V0Q29udHJvbGxlci5kZWZhdWx0cyA9IHt9O1xuRGF0YXNldENvbnRyb2xsZXIucHJvdG90eXBlLmRhdGFzZXRFbGVtZW50VHlwZSA9IG51bGw7XG5EYXRhc2V0Q29udHJvbGxlci5wcm90b3R5cGUuZGF0YUVsZW1lbnRUeXBlID0gbnVsbDtcblxuZnVuY3Rpb24gZ2V0QWxsU2NhbGVWYWx1ZXMoc2NhbGUsIHR5cGUpIHtcbiAgaWYgKCFzY2FsZS5fY2FjaGUuJGJhcikge1xuICAgIGNvbnN0IHZpc2libGVNZXRhcyA9IHNjYWxlLmdldE1hdGNoaW5nVmlzaWJsZU1ldGFzKHR5cGUpO1xuICAgIGxldCB2YWx1ZXMgPSBbXTtcbiAgICBmb3IgKGxldCBpID0gMCwgaWxlbiA9IHZpc2libGVNZXRhcy5sZW5ndGg7IGkgPCBpbGVuOyBpKyspIHtcbiAgICAgIHZhbHVlcyA9IHZhbHVlcy5jb25jYXQodmlzaWJsZU1ldGFzW2ldLmNvbnRyb2xsZXIuZ2V0QWxsUGFyc2VkVmFsdWVzKHNjYWxlKSk7XG4gICAgfVxuICAgIHNjYWxlLl9jYWNoZS4kYmFyID0gX2FycmF5VW5pcXVlKHZhbHVlcy5zb3J0KChhLCBiKSA9PiBhIC0gYikpO1xuICB9XG4gIHJldHVybiBzY2FsZS5fY2FjaGUuJGJhcjtcbn1cbmZ1bmN0aW9uIGNvbXB1dGVNaW5TYW1wbGVTaXplKG1ldGEpIHtcbiAgY29uc3Qgc2NhbGUgPSBtZXRhLmlTY2FsZTtcbiAgY29uc3QgdmFsdWVzID0gZ2V0QWxsU2NhbGVWYWx1ZXMoc2NhbGUsIG1ldGEudHlwZSk7XG4gIGxldCBtaW4gPSBzY2FsZS5fbGVuZ3RoO1xuICBsZXQgaSwgaWxlbiwgY3VyciwgcHJldjtcbiAgY29uc3QgdXBkYXRlTWluQW5kUHJldiA9ICgpID0+IHtcbiAgICBpZiAoY3VyciA9PT0gMzI3NjcgfHwgY3VyciA9PT0gLTMyNzY4KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChkZWZpbmVkKHByZXYpKSB7XG4gICAgICBtaW4gPSBNYXRoLm1pbihtaW4sIE1hdGguYWJzKGN1cnIgLSBwcmV2KSB8fCBtaW4pO1xuICAgIH1cbiAgICBwcmV2ID0gY3VycjtcbiAgfTtcbiAgZm9yIChpID0gMCwgaWxlbiA9IHZhbHVlcy5sZW5ndGg7IGkgPCBpbGVuOyArK2kpIHtcbiAgICBjdXJyID0gc2NhbGUuZ2V0UGl4ZWxGb3JWYWx1ZSh2YWx1ZXNbaV0pO1xuICAgIHVwZGF0ZU1pbkFuZFByZXYoKTtcbiAgfVxuICBwcmV2ID0gdW5kZWZpbmVkO1xuICBmb3IgKGkgPSAwLCBpbGVuID0gc2NhbGUudGlja3MubGVuZ3RoOyBpIDwgaWxlbjsgKytpKSB7XG4gICAgY3VyciA9IHNjYWxlLmdldFBpeGVsRm9yVGljayhpKTtcbiAgICB1cGRhdGVNaW5BbmRQcmV2KCk7XG4gIH1cbiAgcmV0dXJuIG1pbjtcbn1cbmZ1bmN0aW9uIGNvbXB1dGVGaXRDYXRlZ29yeVRyYWl0cyhpbmRleCwgcnVsZXIsIG9wdGlvbnMsIHN0YWNrQ291bnQpIHtcbiAgY29uc3QgdGhpY2tuZXNzID0gb3B0aW9ucy5iYXJUaGlja25lc3M7XG4gIGxldCBzaXplLCByYXRpbztcbiAgaWYgKGlzTnVsbE9yVW5kZWYodGhpY2tuZXNzKSkge1xuICAgIHNpemUgPSBydWxlci5taW4gKiBvcHRpb25zLmNhdGVnb3J5UGVyY2VudGFnZTtcbiAgICByYXRpbyA9IG9wdGlvbnMuYmFyUGVyY2VudGFnZTtcbiAgfSBlbHNlIHtcbiAgICBzaXplID0gdGhpY2tuZXNzICogc3RhY2tDb3VudDtcbiAgICByYXRpbyA9IDE7XG4gIH1cbiAgcmV0dXJuIHtcbiAgICBjaHVuazogc2l6ZSAvIHN0YWNrQ291bnQsXG4gICAgcmF0aW8sXG4gICAgc3RhcnQ6IHJ1bGVyLnBpeGVsc1tpbmRleF0gLSAoc2l6ZSAvIDIpXG4gIH07XG59XG5mdW5jdGlvbiBjb21wdXRlRmxleENhdGVnb3J5VHJhaXRzKGluZGV4LCBydWxlciwgb3B0aW9ucywgc3RhY2tDb3VudCkge1xuICBjb25zdCBwaXhlbHMgPSBydWxlci5waXhlbHM7XG4gIGNvbnN0IGN1cnIgPSBwaXhlbHNbaW5kZXhdO1xuICBsZXQgcHJldiA9IGluZGV4ID4gMCA/IHBpeGVsc1tpbmRleCAtIDFdIDogbnVsbDtcbiAgbGV0IG5leHQgPSBpbmRleCA8IHBpeGVscy5sZW5ndGggLSAxID8gcGl4ZWxzW2luZGV4ICsgMV0gOiBudWxsO1xuICBjb25zdCBwZXJjZW50ID0gb3B0aW9ucy5jYXRlZ29yeVBlcmNlbnRhZ2U7XG4gIGlmIChwcmV2ID09PSBudWxsKSB7XG4gICAgcHJldiA9IGN1cnIgLSAobmV4dCA9PT0gbnVsbCA/IHJ1bGVyLmVuZCAtIHJ1bGVyLnN0YXJ0IDogbmV4dCAtIGN1cnIpO1xuICB9XG4gIGlmIChuZXh0ID09PSBudWxsKSB7XG4gICAgbmV4dCA9IGN1cnIgKyBjdXJyIC0gcHJldjtcbiAgfVxuICBjb25zdCBzdGFydCA9IGN1cnIgLSAoY3VyciAtIE1hdGgubWluKHByZXYsIG5leHQpKSAvIDIgKiBwZXJjZW50O1xuICBjb25zdCBzaXplID0gTWF0aC5hYnMobmV4dCAtIHByZXYpIC8gMiAqIHBlcmNlbnQ7XG4gIHJldHVybiB7XG4gICAgY2h1bms6IHNpemUgLyBzdGFja0NvdW50LFxuICAgIHJhdGlvOiBvcHRpb25zLmJhclBlcmNlbnRhZ2UsXG4gICAgc3RhcnRcbiAgfTtcbn1cbmZ1bmN0aW9uIHBhcnNlRmxvYXRCYXIoZW50cnksIGl0ZW0sIHZTY2FsZSwgaSkge1xuICBjb25zdCBzdGFydFZhbHVlID0gdlNjYWxlLnBhcnNlKGVudHJ5WzBdLCBpKTtcbiAgY29uc3QgZW5kVmFsdWUgPSB2U2NhbGUucGFyc2UoZW50cnlbMV0sIGkpO1xuICBjb25zdCBtaW4gPSBNYXRoLm1pbihzdGFydFZhbHVlLCBlbmRWYWx1ZSk7XG4gIGNvbnN0IG1heCA9IE1hdGgubWF4KHN0YXJ0VmFsdWUsIGVuZFZhbHVlKTtcbiAgbGV0IGJhclN0YXJ0ID0gbWluO1xuICBsZXQgYmFyRW5kID0gbWF4O1xuICBpZiAoTWF0aC5hYnMobWluKSA+IE1hdGguYWJzKG1heCkpIHtcbiAgICBiYXJTdGFydCA9IG1heDtcbiAgICBiYXJFbmQgPSBtaW47XG4gIH1cbiAgaXRlbVt2U2NhbGUuYXhpc10gPSBiYXJFbmQ7XG4gIGl0ZW0uX2N1c3RvbSA9IHtcbiAgICBiYXJTdGFydCxcbiAgICBiYXJFbmQsXG4gICAgc3RhcnQ6IHN0YXJ0VmFsdWUsXG4gICAgZW5kOiBlbmRWYWx1ZSxcbiAgICBtaW4sXG4gICAgbWF4XG4gIH07XG59XG5mdW5jdGlvbiBwYXJzZVZhbHVlKGVudHJ5LCBpdGVtLCB2U2NhbGUsIGkpIHtcbiAgaWYgKGlzQXJyYXkoZW50cnkpKSB7XG4gICAgcGFyc2VGbG9hdEJhcihlbnRyeSwgaXRlbSwgdlNjYWxlLCBpKTtcbiAgfSBlbHNlIHtcbiAgICBpdGVtW3ZTY2FsZS5heGlzXSA9IHZTY2FsZS5wYXJzZShlbnRyeSwgaSk7XG4gIH1cbiAgcmV0dXJuIGl0ZW07XG59XG5mdW5jdGlvbiBwYXJzZUFycmF5T3JQcmltaXRpdmUobWV0YSwgZGF0YSwgc3RhcnQsIGNvdW50KSB7XG4gIGNvbnN0IGlTY2FsZSA9IG1ldGEuaVNjYWxlO1xuICBjb25zdCB2U2NhbGUgPSBtZXRhLnZTY2FsZTtcbiAgY29uc3QgbGFiZWxzID0gaVNjYWxlLmdldExhYmVscygpO1xuICBjb25zdCBzaW5nbGVTY2FsZSA9IGlTY2FsZSA9PT0gdlNjYWxlO1xuICBjb25zdCBwYXJzZWQgPSBbXTtcbiAgbGV0IGksIGlsZW4sIGl0ZW0sIGVudHJ5O1xuICBmb3IgKGkgPSBzdGFydCwgaWxlbiA9IHN0YXJ0ICsgY291bnQ7IGkgPCBpbGVuOyArK2kpIHtcbiAgICBlbnRyeSA9IGRhdGFbaV07XG4gICAgaXRlbSA9IHt9O1xuICAgIGl0ZW1baVNjYWxlLmF4aXNdID0gc2luZ2xlU2NhbGUgfHwgaVNjYWxlLnBhcnNlKGxhYmVsc1tpXSwgaSk7XG4gICAgcGFyc2VkLnB1c2gocGFyc2VWYWx1ZShlbnRyeSwgaXRlbSwgdlNjYWxlLCBpKSk7XG4gIH1cbiAgcmV0dXJuIHBhcnNlZDtcbn1cbmZ1bmN0aW9uIGlzRmxvYXRCYXIoY3VzdG9tKSB7XG4gIHJldHVybiBjdXN0b20gJiYgY3VzdG9tLmJhclN0YXJ0ICE9PSB1bmRlZmluZWQgJiYgY3VzdG9tLmJhckVuZCAhPT0gdW5kZWZpbmVkO1xufVxuZnVuY3Rpb24gYmFyU2lnbihzaXplLCB2U2NhbGUsIGFjdHVhbEJhc2UpIHtcbiAgaWYgKHNpemUgIT09IDApIHtcbiAgICByZXR1cm4gc2lnbihzaXplKTtcbiAgfVxuICByZXR1cm4gKHZTY2FsZS5pc0hvcml6b250YWwoKSA/IDEgOiAtMSkgKiAodlNjYWxlLm1pbiA+PSBhY3R1YWxCYXNlID8gMSA6IC0xKTtcbn1cbmZ1bmN0aW9uIGJvcmRlclByb3BzKHByb3BlcnRpZXMpIHtcbiAgbGV0IHJldmVyc2UsIHN0YXJ0LCBlbmQsIHRvcCwgYm90dG9tO1xuICBpZiAocHJvcGVydGllcy5ob3Jpem9udGFsKSB7XG4gICAgcmV2ZXJzZSA9IHByb3BlcnRpZXMuYmFzZSA+IHByb3BlcnRpZXMueDtcbiAgICBzdGFydCA9ICdsZWZ0JztcbiAgICBlbmQgPSAncmlnaHQnO1xuICB9IGVsc2Uge1xuICAgIHJldmVyc2UgPSBwcm9wZXJ0aWVzLmJhc2UgPCBwcm9wZXJ0aWVzLnk7XG4gICAgc3RhcnQgPSAnYm90dG9tJztcbiAgICBlbmQgPSAndG9wJztcbiAgfVxuICBpZiAocmV2ZXJzZSkge1xuICAgIHRvcCA9ICdlbmQnO1xuICAgIGJvdHRvbSA9ICdzdGFydCc7XG4gIH0gZWxzZSB7XG4gICAgdG9wID0gJ3N0YXJ0JztcbiAgICBib3R0b20gPSAnZW5kJztcbiAgfVxuICByZXR1cm4ge3N0YXJ0LCBlbmQsIHJldmVyc2UsIHRvcCwgYm90dG9tfTtcbn1cbmZ1bmN0aW9uIHNldEJvcmRlclNraXBwZWQocHJvcGVydGllcywgb3B0aW9ucywgc3RhY2ssIGluZGV4KSB7XG4gIGxldCBlZGdlID0gb3B0aW9ucy5ib3JkZXJTa2lwcGVkO1xuICBjb25zdCByZXMgPSB7fTtcbiAgaWYgKCFlZGdlKSB7XG4gICAgcHJvcGVydGllcy5ib3JkZXJTa2lwcGVkID0gcmVzO1xuICAgIHJldHVybjtcbiAgfVxuICBjb25zdCB7c3RhcnQsIGVuZCwgcmV2ZXJzZSwgdG9wLCBib3R0b219ID0gYm9yZGVyUHJvcHMocHJvcGVydGllcyk7XG4gIGlmIChlZGdlID09PSAnbWlkZGxlJyAmJiBzdGFjaykge1xuICAgIHByb3BlcnRpZXMuZW5hYmxlQm9yZGVyUmFkaXVzID0gdHJ1ZTtcbiAgICBpZiAoKHN0YWNrLl90b3AgfHwgMCkgPT09IGluZGV4KSB7XG4gICAgICBlZGdlID0gdG9wO1xuICAgIH0gZWxzZSBpZiAoKHN0YWNrLl9ib3R0b20gfHwgMCkgPT09IGluZGV4KSB7XG4gICAgICBlZGdlID0gYm90dG9tO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXNbcGFyc2VFZGdlKGJvdHRvbSwgc3RhcnQsIGVuZCwgcmV2ZXJzZSldID0gdHJ1ZTtcbiAgICAgIGVkZ2UgPSB0b3A7XG4gICAgfVxuICB9XG4gIHJlc1twYXJzZUVkZ2UoZWRnZSwgc3RhcnQsIGVuZCwgcmV2ZXJzZSldID0gdHJ1ZTtcbiAgcHJvcGVydGllcy5ib3JkZXJTa2lwcGVkID0gcmVzO1xufVxuZnVuY3Rpb24gcGFyc2VFZGdlKGVkZ2UsIGEsIGIsIHJldmVyc2UpIHtcbiAgaWYgKHJldmVyc2UpIHtcbiAgICBlZGdlID0gc3dhcChlZGdlLCBhLCBiKTtcbiAgICBlZGdlID0gc3RhcnRFbmQoZWRnZSwgYiwgYSk7XG4gIH0gZWxzZSB7XG4gICAgZWRnZSA9IHN0YXJ0RW5kKGVkZ2UsIGEsIGIpO1xuICB9XG4gIHJldHVybiBlZGdlO1xufVxuZnVuY3Rpb24gc3dhcChvcmlnLCB2MSwgdjIpIHtcbiAgcmV0dXJuIG9yaWcgPT09IHYxID8gdjIgOiBvcmlnID09PSB2MiA/IHYxIDogb3JpZztcbn1cbmZ1bmN0aW9uIHN0YXJ0RW5kKHYsIHN0YXJ0LCBlbmQpIHtcbiAgcmV0dXJuIHYgPT09ICdzdGFydCcgPyBzdGFydCA6IHYgPT09ICdlbmQnID8gZW5kIDogdjtcbn1cbmZ1bmN0aW9uIHNldEluZmxhdGVBbW91bnQocHJvcGVydGllcywge2luZmxhdGVBbW91bnR9LCByYXRpbykge1xuICBwcm9wZXJ0aWVzLmluZmxhdGVBbW91bnQgPSBpbmZsYXRlQW1vdW50ID09PSAnYXV0bydcbiAgICA/IHJhdGlvID09PSAxID8gMC4zMyA6IDBcbiAgICA6IGluZmxhdGVBbW91bnQ7XG59XG5jbGFzcyBCYXJDb250cm9sbGVyIGV4dGVuZHMgRGF0YXNldENvbnRyb2xsZXIge1xuICBwYXJzZVByaW1pdGl2ZURhdGEobWV0YSwgZGF0YSwgc3RhcnQsIGNvdW50KSB7XG4gICAgcmV0dXJuIHBhcnNlQXJyYXlPclByaW1pdGl2ZShtZXRhLCBkYXRhLCBzdGFydCwgY291bnQpO1xuICB9XG4gIHBhcnNlQXJyYXlEYXRhKG1ldGEsIGRhdGEsIHN0YXJ0LCBjb3VudCkge1xuICAgIHJldHVybiBwYXJzZUFycmF5T3JQcmltaXRpdmUobWV0YSwgZGF0YSwgc3RhcnQsIGNvdW50KTtcbiAgfVxuICBwYXJzZU9iamVjdERhdGEobWV0YSwgZGF0YSwgc3RhcnQsIGNvdW50KSB7XG4gICAgY29uc3Qge2lTY2FsZSwgdlNjYWxlfSA9IG1ldGE7XG4gICAgY29uc3Qge3hBeGlzS2V5ID0gJ3gnLCB5QXhpc0tleSA9ICd5J30gPSB0aGlzLl9wYXJzaW5nO1xuICAgIGNvbnN0IGlBeGlzS2V5ID0gaVNjYWxlLmF4aXMgPT09ICd4JyA/IHhBeGlzS2V5IDogeUF4aXNLZXk7XG4gICAgY29uc3QgdkF4aXNLZXkgPSB2U2NhbGUuYXhpcyA9PT0gJ3gnID8geEF4aXNLZXkgOiB5QXhpc0tleTtcbiAgICBjb25zdCBwYXJzZWQgPSBbXTtcbiAgICBsZXQgaSwgaWxlbiwgaXRlbSwgb2JqO1xuICAgIGZvciAoaSA9IHN0YXJ0LCBpbGVuID0gc3RhcnQgKyBjb3VudDsgaSA8IGlsZW47ICsraSkge1xuICAgICAgb2JqID0gZGF0YVtpXTtcbiAgICAgIGl0ZW0gPSB7fTtcbiAgICAgIGl0ZW1baVNjYWxlLmF4aXNdID0gaVNjYWxlLnBhcnNlKHJlc29sdmVPYmplY3RLZXkob2JqLCBpQXhpc0tleSksIGkpO1xuICAgICAgcGFyc2VkLnB1c2gocGFyc2VWYWx1ZShyZXNvbHZlT2JqZWN0S2V5KG9iaiwgdkF4aXNLZXkpLCBpdGVtLCB2U2NhbGUsIGkpKTtcbiAgICB9XG4gICAgcmV0dXJuIHBhcnNlZDtcbiAgfVxuICB1cGRhdGVSYW5nZUZyb21QYXJzZWQocmFuZ2UsIHNjYWxlLCBwYXJzZWQsIHN0YWNrKSB7XG4gICAgc3VwZXIudXBkYXRlUmFuZ2VGcm9tUGFyc2VkKHJhbmdlLCBzY2FsZSwgcGFyc2VkLCBzdGFjayk7XG4gICAgY29uc3QgY3VzdG9tID0gcGFyc2VkLl9jdXN0b207XG4gICAgaWYgKGN1c3RvbSAmJiBzY2FsZSA9PT0gdGhpcy5fY2FjaGVkTWV0YS52U2NhbGUpIHtcbiAgICAgIHJhbmdlLm1pbiA9IE1hdGgubWluKHJhbmdlLm1pbiwgY3VzdG9tLm1pbik7XG4gICAgICByYW5nZS5tYXggPSBNYXRoLm1heChyYW5nZS5tYXgsIGN1c3RvbS5tYXgpO1xuICAgIH1cbiAgfVxuICBnZXRNYXhPdmVyZmxvdygpIHtcbiAgICByZXR1cm4gMDtcbiAgfVxuICBnZXRMYWJlbEFuZFZhbHVlKGluZGV4KSB7XG4gICAgY29uc3QgbWV0YSA9IHRoaXMuX2NhY2hlZE1ldGE7XG4gICAgY29uc3Qge2lTY2FsZSwgdlNjYWxlfSA9IG1ldGE7XG4gICAgY29uc3QgcGFyc2VkID0gdGhpcy5nZXRQYXJzZWQoaW5kZXgpO1xuICAgIGNvbnN0IGN1c3RvbSA9IHBhcnNlZC5fY3VzdG9tO1xuICAgIGNvbnN0IHZhbHVlID0gaXNGbG9hdEJhcihjdXN0b20pXG4gICAgICA/ICdbJyArIGN1c3RvbS5zdGFydCArICcsICcgKyBjdXN0b20uZW5kICsgJ10nXG4gICAgICA6ICcnICsgdlNjYWxlLmdldExhYmVsRm9yVmFsdWUocGFyc2VkW3ZTY2FsZS5heGlzXSk7XG4gICAgcmV0dXJuIHtcbiAgICAgIGxhYmVsOiAnJyArIGlTY2FsZS5nZXRMYWJlbEZvclZhbHVlKHBhcnNlZFtpU2NhbGUuYXhpc10pLFxuICAgICAgdmFsdWVcbiAgICB9O1xuICB9XG4gIGluaXRpYWxpemUoKSB7XG4gICAgdGhpcy5lbmFibGVPcHRpb25TaGFyaW5nID0gdHJ1ZTtcbiAgICBzdXBlci5pbml0aWFsaXplKCk7XG4gICAgY29uc3QgbWV0YSA9IHRoaXMuX2NhY2hlZE1ldGE7XG4gICAgbWV0YS5zdGFjayA9IHRoaXMuZ2V0RGF0YXNldCgpLnN0YWNrO1xuICB9XG4gIHVwZGF0ZShtb2RlKSB7XG4gICAgY29uc3QgbWV0YSA9IHRoaXMuX2NhY2hlZE1ldGE7XG4gICAgdGhpcy51cGRhdGVFbGVtZW50cyhtZXRhLmRhdGEsIDAsIG1ldGEuZGF0YS5sZW5ndGgsIG1vZGUpO1xuICB9XG4gIHVwZGF0ZUVsZW1lbnRzKGJhcnMsIHN0YXJ0LCBjb3VudCwgbW9kZSkge1xuICAgIGNvbnN0IHJlc2V0ID0gbW9kZSA9PT0gJ3Jlc2V0JztcbiAgICBjb25zdCB7aW5kZXgsIF9jYWNoZWRNZXRhOiB7dlNjYWxlfX0gPSB0aGlzO1xuICAgIGNvbnN0IGJhc2UgPSB2U2NhbGUuZ2V0QmFzZVBpeGVsKCk7XG4gICAgY29uc3QgaG9yaXpvbnRhbCA9IHZTY2FsZS5pc0hvcml6b250YWwoKTtcbiAgICBjb25zdCBydWxlciA9IHRoaXMuX2dldFJ1bGVyKCk7XG4gICAgY29uc3QgZmlyc3RPcHRzID0gdGhpcy5yZXNvbHZlRGF0YUVsZW1lbnRPcHRpb25zKHN0YXJ0LCBtb2RlKTtcbiAgICBjb25zdCBzaGFyZWRPcHRpb25zID0gdGhpcy5nZXRTaGFyZWRPcHRpb25zKGZpcnN0T3B0cyk7XG4gICAgY29uc3QgaW5jbHVkZU9wdGlvbnMgPSB0aGlzLmluY2x1ZGVPcHRpb25zKG1vZGUsIHNoYXJlZE9wdGlvbnMpO1xuICAgIHRoaXMudXBkYXRlU2hhcmVkT3B0aW9ucyhzaGFyZWRPcHRpb25zLCBtb2RlLCBmaXJzdE9wdHMpO1xuICAgIGZvciAobGV0IGkgPSBzdGFydDsgaSA8IHN0YXJ0ICsgY291bnQ7IGkrKykge1xuICAgICAgY29uc3QgcGFyc2VkID0gdGhpcy5nZXRQYXJzZWQoaSk7XG4gICAgICBjb25zdCB2cGl4ZWxzID0gcmVzZXQgfHwgaXNOdWxsT3JVbmRlZihwYXJzZWRbdlNjYWxlLmF4aXNdKSA/IHtiYXNlLCBoZWFkOiBiYXNlfSA6IHRoaXMuX2NhbGN1bGF0ZUJhclZhbHVlUGl4ZWxzKGkpO1xuICAgICAgY29uc3QgaXBpeGVscyA9IHRoaXMuX2NhbGN1bGF0ZUJhckluZGV4UGl4ZWxzKGksIHJ1bGVyKTtcbiAgICAgIGNvbnN0IHN0YWNrID0gKHBhcnNlZC5fc3RhY2tzIHx8IHt9KVt2U2NhbGUuYXhpc107XG4gICAgICBjb25zdCBwcm9wZXJ0aWVzID0ge1xuICAgICAgICBob3Jpem9udGFsLFxuICAgICAgICBiYXNlOiB2cGl4ZWxzLmJhc2UsXG4gICAgICAgIGVuYWJsZUJvcmRlclJhZGl1czogIXN0YWNrIHx8IGlzRmxvYXRCYXIocGFyc2VkLl9jdXN0b20pIHx8IChpbmRleCA9PT0gc3RhY2suX3RvcCB8fCBpbmRleCA9PT0gc3RhY2suX2JvdHRvbSksXG4gICAgICAgIHg6IGhvcml6b250YWwgPyB2cGl4ZWxzLmhlYWQgOiBpcGl4ZWxzLmNlbnRlcixcbiAgICAgICAgeTogaG9yaXpvbnRhbCA/IGlwaXhlbHMuY2VudGVyIDogdnBpeGVscy5oZWFkLFxuICAgICAgICBoZWlnaHQ6IGhvcml6b250YWwgPyBpcGl4ZWxzLnNpemUgOiBNYXRoLmFicyh2cGl4ZWxzLnNpemUpLFxuICAgICAgICB3aWR0aDogaG9yaXpvbnRhbCA/IE1hdGguYWJzKHZwaXhlbHMuc2l6ZSkgOiBpcGl4ZWxzLnNpemVcbiAgICAgIH07XG4gICAgICBpZiAoaW5jbHVkZU9wdGlvbnMpIHtcbiAgICAgICAgcHJvcGVydGllcy5vcHRpb25zID0gc2hhcmVkT3B0aW9ucyB8fCB0aGlzLnJlc29sdmVEYXRhRWxlbWVudE9wdGlvbnMoaSwgYmFyc1tpXS5hY3RpdmUgPyAnYWN0aXZlJyA6IG1vZGUpO1xuICAgICAgfVxuICAgICAgY29uc3Qgb3B0aW9ucyA9IHByb3BlcnRpZXMub3B0aW9ucyB8fCBiYXJzW2ldLm9wdGlvbnM7XG4gICAgICBzZXRCb3JkZXJTa2lwcGVkKHByb3BlcnRpZXMsIG9wdGlvbnMsIHN0YWNrLCBpbmRleCk7XG4gICAgICBzZXRJbmZsYXRlQW1vdW50KHByb3BlcnRpZXMsIG9wdGlvbnMsIHJ1bGVyLnJhdGlvKTtcbiAgICAgIHRoaXMudXBkYXRlRWxlbWVudChiYXJzW2ldLCBpLCBwcm9wZXJ0aWVzLCBtb2RlKTtcbiAgICB9XG4gIH1cbiAgX2dldFN0YWNrcyhsYXN0LCBkYXRhSW5kZXgpIHtcbiAgICBjb25zdCBtZXRhID0gdGhpcy5fY2FjaGVkTWV0YTtcbiAgICBjb25zdCBpU2NhbGUgPSBtZXRhLmlTY2FsZTtcbiAgICBjb25zdCBtZXRhc2V0cyA9IGlTY2FsZS5nZXRNYXRjaGluZ1Zpc2libGVNZXRhcyh0aGlzLl90eXBlKTtcbiAgICBjb25zdCBzdGFja2VkID0gaVNjYWxlLm9wdGlvbnMuc3RhY2tlZDtcbiAgICBjb25zdCBpbGVuID0gbWV0YXNldHMubGVuZ3RoO1xuICAgIGNvbnN0IHN0YWNrcyA9IFtdO1xuICAgIGxldCBpLCBpdGVtO1xuICAgIGZvciAoaSA9IDA7IGkgPCBpbGVuOyArK2kpIHtcbiAgICAgIGl0ZW0gPSBtZXRhc2V0c1tpXTtcbiAgICAgIGlmICghaXRlbS5jb250cm9sbGVyLm9wdGlvbnMuZ3JvdXBlZCkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIGlmICh0eXBlb2YgZGF0YUluZGV4ICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICBjb25zdCB2YWwgPSBpdGVtLmNvbnRyb2xsZXIuZ2V0UGFyc2VkKGRhdGFJbmRleClbXG4gICAgICAgICAgaXRlbS5jb250cm9sbGVyLl9jYWNoZWRNZXRhLnZTY2FsZS5heGlzXG4gICAgICAgIF07XG4gICAgICAgIGlmIChpc051bGxPclVuZGVmKHZhbCkgfHwgaXNOYU4odmFsKSkge1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoc3RhY2tlZCA9PT0gZmFsc2UgfHwgc3RhY2tzLmluZGV4T2YoaXRlbS5zdGFjaykgPT09IC0xIHx8XG5cdFx0XHRcdChzdGFja2VkID09PSB1bmRlZmluZWQgJiYgaXRlbS5zdGFjayA9PT0gdW5kZWZpbmVkKSkge1xuICAgICAgICBzdGFja3MucHVzaChpdGVtLnN0YWNrKTtcbiAgICAgIH1cbiAgICAgIGlmIChpdGVtLmluZGV4ID09PSBsYXN0KSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoIXN0YWNrcy5sZW5ndGgpIHtcbiAgICAgIHN0YWNrcy5wdXNoKHVuZGVmaW5lZCk7XG4gICAgfVxuICAgIHJldHVybiBzdGFja3M7XG4gIH1cbiAgX2dldFN0YWNrQ291bnQoaW5kZXgpIHtcbiAgICByZXR1cm4gdGhpcy5fZ2V0U3RhY2tzKHVuZGVmaW5lZCwgaW5kZXgpLmxlbmd0aDtcbiAgfVxuICBfZ2V0U3RhY2tJbmRleChkYXRhc2V0SW5kZXgsIG5hbWUsIGRhdGFJbmRleCkge1xuICAgIGNvbnN0IHN0YWNrcyA9IHRoaXMuX2dldFN0YWNrcyhkYXRhc2V0SW5kZXgsIGRhdGFJbmRleCk7XG4gICAgY29uc3QgaW5kZXggPSAobmFtZSAhPT0gdW5kZWZpbmVkKVxuICAgICAgPyBzdGFja3MuaW5kZXhPZihuYW1lKVxuICAgICAgOiAtMTtcbiAgICByZXR1cm4gKGluZGV4ID09PSAtMSlcbiAgICAgID8gc3RhY2tzLmxlbmd0aCAtIDFcbiAgICAgIDogaW5kZXg7XG4gIH1cbiAgX2dldFJ1bGVyKCkge1xuICAgIGNvbnN0IG9wdHMgPSB0aGlzLm9wdGlvbnM7XG4gICAgY29uc3QgbWV0YSA9IHRoaXMuX2NhY2hlZE1ldGE7XG4gICAgY29uc3QgaVNjYWxlID0gbWV0YS5pU2NhbGU7XG4gICAgY29uc3QgcGl4ZWxzID0gW107XG4gICAgbGV0IGksIGlsZW47XG4gICAgZm9yIChpID0gMCwgaWxlbiA9IG1ldGEuZGF0YS5sZW5ndGg7IGkgPCBpbGVuOyArK2kpIHtcbiAgICAgIHBpeGVscy5wdXNoKGlTY2FsZS5nZXRQaXhlbEZvclZhbHVlKHRoaXMuZ2V0UGFyc2VkKGkpW2lTY2FsZS5heGlzXSwgaSkpO1xuICAgIH1cbiAgICBjb25zdCBiYXJUaGlja25lc3MgPSBvcHRzLmJhclRoaWNrbmVzcztcbiAgICBjb25zdCBtaW4gPSBiYXJUaGlja25lc3MgfHwgY29tcHV0ZU1pblNhbXBsZVNpemUobWV0YSk7XG4gICAgcmV0dXJuIHtcbiAgICAgIG1pbixcbiAgICAgIHBpeGVscyxcbiAgICAgIHN0YXJ0OiBpU2NhbGUuX3N0YXJ0UGl4ZWwsXG4gICAgICBlbmQ6IGlTY2FsZS5fZW5kUGl4ZWwsXG4gICAgICBzdGFja0NvdW50OiB0aGlzLl9nZXRTdGFja0NvdW50KCksXG4gICAgICBzY2FsZTogaVNjYWxlLFxuICAgICAgZ3JvdXBlZDogb3B0cy5ncm91cGVkLFxuICAgICAgcmF0aW86IGJhclRoaWNrbmVzcyA/IDEgOiBvcHRzLmNhdGVnb3J5UGVyY2VudGFnZSAqIG9wdHMuYmFyUGVyY2VudGFnZVxuICAgIH07XG4gIH1cbiAgX2NhbGN1bGF0ZUJhclZhbHVlUGl4ZWxzKGluZGV4KSB7XG4gICAgY29uc3Qge19jYWNoZWRNZXRhOiB7dlNjYWxlLCBfc3RhY2tlZH0sIG9wdGlvbnM6IHtiYXNlOiBiYXNlVmFsdWUsIG1pbkJhckxlbmd0aH19ID0gdGhpcztcbiAgICBjb25zdCBhY3R1YWxCYXNlID0gYmFzZVZhbHVlIHx8IDA7XG4gICAgY29uc3QgcGFyc2VkID0gdGhpcy5nZXRQYXJzZWQoaW5kZXgpO1xuICAgIGNvbnN0IGN1c3RvbSA9IHBhcnNlZC5fY3VzdG9tO1xuICAgIGNvbnN0IGZsb2F0aW5nID0gaXNGbG9hdEJhcihjdXN0b20pO1xuICAgIGxldCB2YWx1ZSA9IHBhcnNlZFt2U2NhbGUuYXhpc107XG4gICAgbGV0IHN0YXJ0ID0gMDtcbiAgICBsZXQgbGVuZ3RoID0gX3N0YWNrZWQgPyB0aGlzLmFwcGx5U3RhY2sodlNjYWxlLCBwYXJzZWQsIF9zdGFja2VkKSA6IHZhbHVlO1xuICAgIGxldCBoZWFkLCBzaXplO1xuICAgIGlmIChsZW5ndGggIT09IHZhbHVlKSB7XG4gICAgICBzdGFydCA9IGxlbmd0aCAtIHZhbHVlO1xuICAgICAgbGVuZ3RoID0gdmFsdWU7XG4gICAgfVxuICAgIGlmIChmbG9hdGluZykge1xuICAgICAgdmFsdWUgPSBjdXN0b20uYmFyU3RhcnQ7XG4gICAgICBsZW5ndGggPSBjdXN0b20uYmFyRW5kIC0gY3VzdG9tLmJhclN0YXJ0O1xuICAgICAgaWYgKHZhbHVlICE9PSAwICYmIHNpZ24odmFsdWUpICE9PSBzaWduKGN1c3RvbS5iYXJFbmQpKSB7XG4gICAgICAgIHN0YXJ0ID0gMDtcbiAgICAgIH1cbiAgICAgIHN0YXJ0ICs9IHZhbHVlO1xuICAgIH1cbiAgICBjb25zdCBzdGFydFZhbHVlID0gIWlzTnVsbE9yVW5kZWYoYmFzZVZhbHVlKSAmJiAhZmxvYXRpbmcgPyBiYXNlVmFsdWUgOiBzdGFydDtcbiAgICBsZXQgYmFzZSA9IHZTY2FsZS5nZXRQaXhlbEZvclZhbHVlKHN0YXJ0VmFsdWUpO1xuICAgIGlmICh0aGlzLmNoYXJ0LmdldERhdGFWaXNpYmlsaXR5KGluZGV4KSkge1xuICAgICAgaGVhZCA9IHZTY2FsZS5nZXRQaXhlbEZvclZhbHVlKHN0YXJ0ICsgbGVuZ3RoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaGVhZCA9IGJhc2U7XG4gICAgfVxuICAgIHNpemUgPSBoZWFkIC0gYmFzZTtcbiAgICBpZiAoTWF0aC5hYnMoc2l6ZSkgPCBtaW5CYXJMZW5ndGgpIHtcbiAgICAgIHNpemUgPSBiYXJTaWduKHNpemUsIHZTY2FsZSwgYWN0dWFsQmFzZSkgKiBtaW5CYXJMZW5ndGg7XG4gICAgICBpZiAodmFsdWUgPT09IGFjdHVhbEJhc2UpIHtcbiAgICAgICAgYmFzZSAtPSBzaXplIC8gMjtcbiAgICAgIH1cbiAgICAgIGhlYWQgPSBiYXNlICsgc2l6ZTtcbiAgICB9XG4gICAgaWYgKGJhc2UgPT09IHZTY2FsZS5nZXRQaXhlbEZvclZhbHVlKGFjdHVhbEJhc2UpKSB7XG4gICAgICBjb25zdCBoYWxmR3JpZCA9IHNpZ24oc2l6ZSkgKiB2U2NhbGUuZ2V0TGluZVdpZHRoRm9yVmFsdWUoYWN0dWFsQmFzZSkgLyAyO1xuICAgICAgYmFzZSArPSBoYWxmR3JpZDtcbiAgICAgIHNpemUgLT0gaGFsZkdyaWQ7XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICBzaXplLFxuICAgICAgYmFzZSxcbiAgICAgIGhlYWQsXG4gICAgICBjZW50ZXI6IGhlYWQgKyBzaXplIC8gMlxuICAgIH07XG4gIH1cbiAgX2NhbGN1bGF0ZUJhckluZGV4UGl4ZWxzKGluZGV4LCBydWxlcikge1xuICAgIGNvbnN0IHNjYWxlID0gcnVsZXIuc2NhbGU7XG4gICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMub3B0aW9ucztcbiAgICBjb25zdCBza2lwTnVsbCA9IG9wdGlvbnMuc2tpcE51bGw7XG4gICAgY29uc3QgbWF4QmFyVGhpY2tuZXNzID0gdmFsdWVPckRlZmF1bHQob3B0aW9ucy5tYXhCYXJUaGlja25lc3MsIEluZmluaXR5KTtcbiAgICBsZXQgY2VudGVyLCBzaXplO1xuICAgIGlmIChydWxlci5ncm91cGVkKSB7XG4gICAgICBjb25zdCBzdGFja0NvdW50ID0gc2tpcE51bGwgPyB0aGlzLl9nZXRTdGFja0NvdW50KGluZGV4KSA6IHJ1bGVyLnN0YWNrQ291bnQ7XG4gICAgICBjb25zdCByYW5nZSA9IG9wdGlvbnMuYmFyVGhpY2tuZXNzID09PSAnZmxleCdcbiAgICAgICAgPyBjb21wdXRlRmxleENhdGVnb3J5VHJhaXRzKGluZGV4LCBydWxlciwgb3B0aW9ucywgc3RhY2tDb3VudClcbiAgICAgICAgOiBjb21wdXRlRml0Q2F0ZWdvcnlUcmFpdHMoaW5kZXgsIHJ1bGVyLCBvcHRpb25zLCBzdGFja0NvdW50KTtcbiAgICAgIGNvbnN0IHN0YWNrSW5kZXggPSB0aGlzLl9nZXRTdGFja0luZGV4KHRoaXMuaW5kZXgsIHRoaXMuX2NhY2hlZE1ldGEuc3RhY2ssIHNraXBOdWxsID8gaW5kZXggOiB1bmRlZmluZWQpO1xuICAgICAgY2VudGVyID0gcmFuZ2Uuc3RhcnQgKyAocmFuZ2UuY2h1bmsgKiBzdGFja0luZGV4KSArIChyYW5nZS5jaHVuayAvIDIpO1xuICAgICAgc2l6ZSA9IE1hdGgubWluKG1heEJhclRoaWNrbmVzcywgcmFuZ2UuY2h1bmsgKiByYW5nZS5yYXRpbyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNlbnRlciA9IHNjYWxlLmdldFBpeGVsRm9yVmFsdWUodGhpcy5nZXRQYXJzZWQoaW5kZXgpW3NjYWxlLmF4aXNdLCBpbmRleCk7XG4gICAgICBzaXplID0gTWF0aC5taW4obWF4QmFyVGhpY2tuZXNzLCBydWxlci5taW4gKiBydWxlci5yYXRpbyk7XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICBiYXNlOiBjZW50ZXIgLSBzaXplIC8gMixcbiAgICAgIGhlYWQ6IGNlbnRlciArIHNpemUgLyAyLFxuICAgICAgY2VudGVyLFxuICAgICAgc2l6ZVxuICAgIH07XG4gIH1cbiAgZHJhdygpIHtcbiAgICBjb25zdCBtZXRhID0gdGhpcy5fY2FjaGVkTWV0YTtcbiAgICBjb25zdCB2U2NhbGUgPSBtZXRhLnZTY2FsZTtcbiAgICBjb25zdCByZWN0cyA9IG1ldGEuZGF0YTtcbiAgICBjb25zdCBpbGVuID0gcmVjdHMubGVuZ3RoO1xuICAgIGxldCBpID0gMDtcbiAgICBmb3IgKDsgaSA8IGlsZW47ICsraSkge1xuICAgICAgaWYgKHRoaXMuZ2V0UGFyc2VkKGkpW3ZTY2FsZS5heGlzXSAhPT0gbnVsbCkge1xuICAgICAgICByZWN0c1tpXS5kcmF3KHRoaXMuX2N0eCk7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5CYXJDb250cm9sbGVyLmlkID0gJ2Jhcic7XG5CYXJDb250cm9sbGVyLmRlZmF1bHRzID0ge1xuICBkYXRhc2V0RWxlbWVudFR5cGU6IGZhbHNlLFxuICBkYXRhRWxlbWVudFR5cGU6ICdiYXInLFxuICBjYXRlZ29yeVBlcmNlbnRhZ2U6IDAuOCxcbiAgYmFyUGVyY2VudGFnZTogMC45LFxuICBncm91cGVkOiB0cnVlLFxuICBhbmltYXRpb25zOiB7XG4gICAgbnVtYmVyczoge1xuICAgICAgdHlwZTogJ251bWJlcicsXG4gICAgICBwcm9wZXJ0aWVzOiBbJ3gnLCAneScsICdiYXNlJywgJ3dpZHRoJywgJ2hlaWdodCddXG4gICAgfVxuICB9XG59O1xuQmFyQ29udHJvbGxlci5vdmVycmlkZXMgPSB7XG4gIHNjYWxlczoge1xuICAgIF9pbmRleF86IHtcbiAgICAgIHR5cGU6ICdjYXRlZ29yeScsXG4gICAgICBvZmZzZXQ6IHRydWUsXG4gICAgICBncmlkOiB7XG4gICAgICAgIG9mZnNldDogdHJ1ZVxuICAgICAgfVxuICAgIH0sXG4gICAgX3ZhbHVlXzoge1xuICAgICAgdHlwZTogJ2xpbmVhcicsXG4gICAgICBiZWdpbkF0WmVybzogdHJ1ZSxcbiAgICB9XG4gIH1cbn07XG5cbmNsYXNzIEJ1YmJsZUNvbnRyb2xsZXIgZXh0ZW5kcyBEYXRhc2V0Q29udHJvbGxlciB7XG4gIGluaXRpYWxpemUoKSB7XG4gICAgdGhpcy5lbmFibGVPcHRpb25TaGFyaW5nID0gdHJ1ZTtcbiAgICBzdXBlci5pbml0aWFsaXplKCk7XG4gIH1cbiAgcGFyc2VQcmltaXRpdmVEYXRhKG1ldGEsIGRhdGEsIHN0YXJ0LCBjb3VudCkge1xuICAgIGNvbnN0IHBhcnNlZCA9IHN1cGVyLnBhcnNlUHJpbWl0aXZlRGF0YShtZXRhLCBkYXRhLCBzdGFydCwgY291bnQpO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcGFyc2VkLmxlbmd0aDsgaSsrKSB7XG4gICAgICBwYXJzZWRbaV0uX2N1c3RvbSA9IHRoaXMucmVzb2x2ZURhdGFFbGVtZW50T3B0aW9ucyhpICsgc3RhcnQpLnJhZGl1cztcbiAgICB9XG4gICAgcmV0dXJuIHBhcnNlZDtcbiAgfVxuICBwYXJzZUFycmF5RGF0YShtZXRhLCBkYXRhLCBzdGFydCwgY291bnQpIHtcbiAgICBjb25zdCBwYXJzZWQgPSBzdXBlci5wYXJzZUFycmF5RGF0YShtZXRhLCBkYXRhLCBzdGFydCwgY291bnQpO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcGFyc2VkLmxlbmd0aDsgaSsrKSB7XG4gICAgICBjb25zdCBpdGVtID0gZGF0YVtzdGFydCArIGldO1xuICAgICAgcGFyc2VkW2ldLl9jdXN0b20gPSB2YWx1ZU9yRGVmYXVsdChpdGVtWzJdLCB0aGlzLnJlc29sdmVEYXRhRWxlbWVudE9wdGlvbnMoaSArIHN0YXJ0KS5yYWRpdXMpO1xuICAgIH1cbiAgICByZXR1cm4gcGFyc2VkO1xuICB9XG4gIHBhcnNlT2JqZWN0RGF0YShtZXRhLCBkYXRhLCBzdGFydCwgY291bnQpIHtcbiAgICBjb25zdCBwYXJzZWQgPSBzdXBlci5wYXJzZU9iamVjdERhdGEobWV0YSwgZGF0YSwgc3RhcnQsIGNvdW50KTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHBhcnNlZC5sZW5ndGg7IGkrKykge1xuICAgICAgY29uc3QgaXRlbSA9IGRhdGFbc3RhcnQgKyBpXTtcbiAgICAgIHBhcnNlZFtpXS5fY3VzdG9tID0gdmFsdWVPckRlZmF1bHQoaXRlbSAmJiBpdGVtLnIgJiYgK2l0ZW0uciwgdGhpcy5yZXNvbHZlRGF0YUVsZW1lbnRPcHRpb25zKGkgKyBzdGFydCkucmFkaXVzKTtcbiAgICB9XG4gICAgcmV0dXJuIHBhcnNlZDtcbiAgfVxuICBnZXRNYXhPdmVyZmxvdygpIHtcbiAgICBjb25zdCBkYXRhID0gdGhpcy5fY2FjaGVkTWV0YS5kYXRhO1xuICAgIGxldCBtYXggPSAwO1xuICAgIGZvciAobGV0IGkgPSBkYXRhLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICBtYXggPSBNYXRoLm1heChtYXgsIGRhdGFbaV0uc2l6ZSh0aGlzLnJlc29sdmVEYXRhRWxlbWVudE9wdGlvbnMoaSkpIC8gMik7XG4gICAgfVxuICAgIHJldHVybiBtYXggPiAwICYmIG1heDtcbiAgfVxuICBnZXRMYWJlbEFuZFZhbHVlKGluZGV4KSB7XG4gICAgY29uc3QgbWV0YSA9IHRoaXMuX2NhY2hlZE1ldGE7XG4gICAgY29uc3Qge3hTY2FsZSwgeVNjYWxlfSA9IG1ldGE7XG4gICAgY29uc3QgcGFyc2VkID0gdGhpcy5nZXRQYXJzZWQoaW5kZXgpO1xuICAgIGNvbnN0IHggPSB4U2NhbGUuZ2V0TGFiZWxGb3JWYWx1ZShwYXJzZWQueCk7XG4gICAgY29uc3QgeSA9IHlTY2FsZS5nZXRMYWJlbEZvclZhbHVlKHBhcnNlZC55KTtcbiAgICBjb25zdCByID0gcGFyc2VkLl9jdXN0b207XG4gICAgcmV0dXJuIHtcbiAgICAgIGxhYmVsOiBtZXRhLmxhYmVsLFxuICAgICAgdmFsdWU6ICcoJyArIHggKyAnLCAnICsgeSArIChyID8gJywgJyArIHIgOiAnJykgKyAnKSdcbiAgICB9O1xuICB9XG4gIHVwZGF0ZShtb2RlKSB7XG4gICAgY29uc3QgcG9pbnRzID0gdGhpcy5fY2FjaGVkTWV0YS5kYXRhO1xuICAgIHRoaXMudXBkYXRlRWxlbWVudHMocG9pbnRzLCAwLCBwb2ludHMubGVuZ3RoLCBtb2RlKTtcbiAgfVxuICB1cGRhdGVFbGVtZW50cyhwb2ludHMsIHN0YXJ0LCBjb3VudCwgbW9kZSkge1xuICAgIGNvbnN0IHJlc2V0ID0gbW9kZSA9PT0gJ3Jlc2V0JztcbiAgICBjb25zdCB7aVNjYWxlLCB2U2NhbGV9ID0gdGhpcy5fY2FjaGVkTWV0YTtcbiAgICBjb25zdCBmaXJzdE9wdHMgPSB0aGlzLnJlc29sdmVEYXRhRWxlbWVudE9wdGlvbnMoc3RhcnQsIG1vZGUpO1xuICAgIGNvbnN0IHNoYXJlZE9wdGlvbnMgPSB0aGlzLmdldFNoYXJlZE9wdGlvbnMoZmlyc3RPcHRzKTtcbiAgICBjb25zdCBpbmNsdWRlT3B0aW9ucyA9IHRoaXMuaW5jbHVkZU9wdGlvbnMobW9kZSwgc2hhcmVkT3B0aW9ucyk7XG4gICAgY29uc3QgaUF4aXMgPSBpU2NhbGUuYXhpcztcbiAgICBjb25zdCB2QXhpcyA9IHZTY2FsZS5heGlzO1xuICAgIGZvciAobGV0IGkgPSBzdGFydDsgaSA8IHN0YXJ0ICsgY291bnQ7IGkrKykge1xuICAgICAgY29uc3QgcG9pbnQgPSBwb2ludHNbaV07XG4gICAgICBjb25zdCBwYXJzZWQgPSAhcmVzZXQgJiYgdGhpcy5nZXRQYXJzZWQoaSk7XG4gICAgICBjb25zdCBwcm9wZXJ0aWVzID0ge307XG4gICAgICBjb25zdCBpUGl4ZWwgPSBwcm9wZXJ0aWVzW2lBeGlzXSA9IHJlc2V0ID8gaVNjYWxlLmdldFBpeGVsRm9yRGVjaW1hbCgwLjUpIDogaVNjYWxlLmdldFBpeGVsRm9yVmFsdWUocGFyc2VkW2lBeGlzXSk7XG4gICAgICBjb25zdCB2UGl4ZWwgPSBwcm9wZXJ0aWVzW3ZBeGlzXSA9IHJlc2V0ID8gdlNjYWxlLmdldEJhc2VQaXhlbCgpIDogdlNjYWxlLmdldFBpeGVsRm9yVmFsdWUocGFyc2VkW3ZBeGlzXSk7XG4gICAgICBwcm9wZXJ0aWVzLnNraXAgPSBpc05hTihpUGl4ZWwpIHx8IGlzTmFOKHZQaXhlbCk7XG4gICAgICBpZiAoaW5jbHVkZU9wdGlvbnMpIHtcbiAgICAgICAgcHJvcGVydGllcy5vcHRpb25zID0gdGhpcy5yZXNvbHZlRGF0YUVsZW1lbnRPcHRpb25zKGksIHBvaW50LmFjdGl2ZSA/ICdhY3RpdmUnIDogbW9kZSk7XG4gICAgICAgIGlmIChyZXNldCkge1xuICAgICAgICAgIHByb3BlcnRpZXMub3B0aW9ucy5yYWRpdXMgPSAwO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICB0aGlzLnVwZGF0ZUVsZW1lbnQocG9pbnQsIGksIHByb3BlcnRpZXMsIG1vZGUpO1xuICAgIH1cbiAgICB0aGlzLnVwZGF0ZVNoYXJlZE9wdGlvbnMoc2hhcmVkT3B0aW9ucywgbW9kZSwgZmlyc3RPcHRzKTtcbiAgfVxuICByZXNvbHZlRGF0YUVsZW1lbnRPcHRpb25zKGluZGV4LCBtb2RlKSB7XG4gICAgY29uc3QgcGFyc2VkID0gdGhpcy5nZXRQYXJzZWQoaW5kZXgpO1xuICAgIGxldCB2YWx1ZXMgPSBzdXBlci5yZXNvbHZlRGF0YUVsZW1lbnRPcHRpb25zKGluZGV4LCBtb2RlKTtcbiAgICBpZiAodmFsdWVzLiRzaGFyZWQpIHtcbiAgICAgIHZhbHVlcyA9IE9iamVjdC5hc3NpZ24oe30sIHZhbHVlcywgeyRzaGFyZWQ6IGZhbHNlfSk7XG4gICAgfVxuICAgIGNvbnN0IHJhZGl1cyA9IHZhbHVlcy5yYWRpdXM7XG4gICAgaWYgKG1vZGUgIT09ICdhY3RpdmUnKSB7XG4gICAgICB2YWx1ZXMucmFkaXVzID0gMDtcbiAgICB9XG4gICAgdmFsdWVzLnJhZGl1cyArPSB2YWx1ZU9yRGVmYXVsdChwYXJzZWQgJiYgcGFyc2VkLl9jdXN0b20sIHJhZGl1cyk7XG4gICAgcmV0dXJuIHZhbHVlcztcbiAgfVxufVxuQnViYmxlQ29udHJvbGxlci5pZCA9ICdidWJibGUnO1xuQnViYmxlQ29udHJvbGxlci5kZWZhdWx0cyA9IHtcbiAgZGF0YXNldEVsZW1lbnRUeXBlOiBmYWxzZSxcbiAgZGF0YUVsZW1lbnRUeXBlOiAncG9pbnQnLFxuICBhbmltYXRpb25zOiB7XG4gICAgbnVtYmVyczoge1xuICAgICAgdHlwZTogJ251bWJlcicsXG4gICAgICBwcm9wZXJ0aWVzOiBbJ3gnLCAneScsICdib3JkZXJXaWR0aCcsICdyYWRpdXMnXVxuICAgIH1cbiAgfVxufTtcbkJ1YmJsZUNvbnRyb2xsZXIub3ZlcnJpZGVzID0ge1xuICBzY2FsZXM6IHtcbiAgICB4OiB7XG4gICAgICB0eXBlOiAnbGluZWFyJ1xuICAgIH0sXG4gICAgeToge1xuICAgICAgdHlwZTogJ2xpbmVhcidcbiAgICB9XG4gIH0sXG4gIHBsdWdpbnM6IHtcbiAgICB0b29sdGlwOiB7XG4gICAgICBjYWxsYmFja3M6IHtcbiAgICAgICAgdGl0bGUoKSB7XG4gICAgICAgICAgcmV0dXJuICcnO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG59O1xuXG5mdW5jdGlvbiBnZXRSYXRpb0FuZE9mZnNldChyb3RhdGlvbiwgY2lyY3VtZmVyZW5jZSwgY3V0b3V0KSB7XG4gIGxldCByYXRpb1ggPSAxO1xuICBsZXQgcmF0aW9ZID0gMTtcbiAgbGV0IG9mZnNldFggPSAwO1xuICBsZXQgb2Zmc2V0WSA9IDA7XG4gIGlmIChjaXJjdW1mZXJlbmNlIDwgVEFVKSB7XG4gICAgY29uc3Qgc3RhcnRBbmdsZSA9IHJvdGF0aW9uO1xuICAgIGNvbnN0IGVuZEFuZ2xlID0gc3RhcnRBbmdsZSArIGNpcmN1bWZlcmVuY2U7XG4gICAgY29uc3Qgc3RhcnRYID0gTWF0aC5jb3Moc3RhcnRBbmdsZSk7XG4gICAgY29uc3Qgc3RhcnRZID0gTWF0aC5zaW4oc3RhcnRBbmdsZSk7XG4gICAgY29uc3QgZW5kWCA9IE1hdGguY29zKGVuZEFuZ2xlKTtcbiAgICBjb25zdCBlbmRZID0gTWF0aC5zaW4oZW5kQW5nbGUpO1xuICAgIGNvbnN0IGNhbGNNYXggPSAoYW5nbGUsIGEsIGIpID0+IF9hbmdsZUJldHdlZW4oYW5nbGUsIHN0YXJ0QW5nbGUsIGVuZEFuZ2xlLCB0cnVlKSA/IDEgOiBNYXRoLm1heChhLCBhICogY3V0b3V0LCBiLCBiICogY3V0b3V0KTtcbiAgICBjb25zdCBjYWxjTWluID0gKGFuZ2xlLCBhLCBiKSA9PiBfYW5nbGVCZXR3ZWVuKGFuZ2xlLCBzdGFydEFuZ2xlLCBlbmRBbmdsZSwgdHJ1ZSkgPyAtMSA6IE1hdGgubWluKGEsIGEgKiBjdXRvdXQsIGIsIGIgKiBjdXRvdXQpO1xuICAgIGNvbnN0IG1heFggPSBjYWxjTWF4KDAsIHN0YXJ0WCwgZW5kWCk7XG4gICAgY29uc3QgbWF4WSA9IGNhbGNNYXgoSEFMRl9QSSwgc3RhcnRZLCBlbmRZKTtcbiAgICBjb25zdCBtaW5YID0gY2FsY01pbihQSSwgc3RhcnRYLCBlbmRYKTtcbiAgICBjb25zdCBtaW5ZID0gY2FsY01pbihQSSArIEhBTEZfUEksIHN0YXJ0WSwgZW5kWSk7XG4gICAgcmF0aW9YID0gKG1heFggLSBtaW5YKSAvIDI7XG4gICAgcmF0aW9ZID0gKG1heFkgLSBtaW5ZKSAvIDI7XG4gICAgb2Zmc2V0WCA9IC0obWF4WCArIG1pblgpIC8gMjtcbiAgICBvZmZzZXRZID0gLShtYXhZICsgbWluWSkgLyAyO1xuICB9XG4gIHJldHVybiB7cmF0aW9YLCByYXRpb1ksIG9mZnNldFgsIG9mZnNldFl9O1xufVxuY2xhc3MgRG91Z2hudXRDb250cm9sbGVyIGV4dGVuZHMgRGF0YXNldENvbnRyb2xsZXIge1xuICBjb25zdHJ1Y3RvcihjaGFydCwgZGF0YXNldEluZGV4KSB7XG4gICAgc3VwZXIoY2hhcnQsIGRhdGFzZXRJbmRleCk7XG4gICAgdGhpcy5lbmFibGVPcHRpb25TaGFyaW5nID0gdHJ1ZTtcbiAgICB0aGlzLmlubmVyUmFkaXVzID0gdW5kZWZpbmVkO1xuICAgIHRoaXMub3V0ZXJSYWRpdXMgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5vZmZzZXRYID0gdW5kZWZpbmVkO1xuICAgIHRoaXMub2Zmc2V0WSA9IHVuZGVmaW5lZDtcbiAgfVxuICBsaW5rU2NhbGVzKCkge31cbiAgcGFyc2Uoc3RhcnQsIGNvdW50KSB7XG4gICAgY29uc3QgZGF0YSA9IHRoaXMuZ2V0RGF0YXNldCgpLmRhdGE7XG4gICAgY29uc3QgbWV0YSA9IHRoaXMuX2NhY2hlZE1ldGE7XG4gICAgaWYgKHRoaXMuX3BhcnNpbmcgPT09IGZhbHNlKSB7XG4gICAgICBtZXRhLl9wYXJzZWQgPSBkYXRhO1xuICAgIH0gZWxzZSB7XG4gICAgICBsZXQgZ2V0dGVyID0gKGkpID0+ICtkYXRhW2ldO1xuICAgICAgaWYgKGlzT2JqZWN0KGRhdGFbc3RhcnRdKSkge1xuICAgICAgICBjb25zdCB7a2V5ID0gJ3ZhbHVlJ30gPSB0aGlzLl9wYXJzaW5nO1xuICAgICAgICBnZXR0ZXIgPSAoaSkgPT4gK3Jlc29sdmVPYmplY3RLZXkoZGF0YVtpXSwga2V5KTtcbiAgICAgIH1cbiAgICAgIGxldCBpLCBpbGVuO1xuICAgICAgZm9yIChpID0gc3RhcnQsIGlsZW4gPSBzdGFydCArIGNvdW50OyBpIDwgaWxlbjsgKytpKSB7XG4gICAgICAgIG1ldGEuX3BhcnNlZFtpXSA9IGdldHRlcihpKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgX2dldFJvdGF0aW9uKCkge1xuICAgIHJldHVybiB0b1JhZGlhbnModGhpcy5vcHRpb25zLnJvdGF0aW9uIC0gOTApO1xuICB9XG4gIF9nZXRDaXJjdW1mZXJlbmNlKCkge1xuICAgIHJldHVybiB0b1JhZGlhbnModGhpcy5vcHRpb25zLmNpcmN1bWZlcmVuY2UpO1xuICB9XG4gIF9nZXRSb3RhdGlvbkV4dGVudHMoKSB7XG4gICAgbGV0IG1pbiA9IFRBVTtcbiAgICBsZXQgbWF4ID0gLVRBVTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuY2hhcnQuZGF0YS5kYXRhc2V0cy5sZW5ndGg7ICsraSkge1xuICAgICAgaWYgKHRoaXMuY2hhcnQuaXNEYXRhc2V0VmlzaWJsZShpKSkge1xuICAgICAgICBjb25zdCBjb250cm9sbGVyID0gdGhpcy5jaGFydC5nZXREYXRhc2V0TWV0YShpKS5jb250cm9sbGVyO1xuICAgICAgICBjb25zdCByb3RhdGlvbiA9IGNvbnRyb2xsZXIuX2dldFJvdGF0aW9uKCk7XG4gICAgICAgIGNvbnN0IGNpcmN1bWZlcmVuY2UgPSBjb250cm9sbGVyLl9nZXRDaXJjdW1mZXJlbmNlKCk7XG4gICAgICAgIG1pbiA9IE1hdGgubWluKG1pbiwgcm90YXRpb24pO1xuICAgICAgICBtYXggPSBNYXRoLm1heChtYXgsIHJvdGF0aW9uICsgY2lyY3VtZmVyZW5jZSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICByb3RhdGlvbjogbWluLFxuICAgICAgY2lyY3VtZmVyZW5jZTogbWF4IC0gbWluLFxuICAgIH07XG4gIH1cbiAgdXBkYXRlKG1vZGUpIHtcbiAgICBjb25zdCBjaGFydCA9IHRoaXMuY2hhcnQ7XG4gICAgY29uc3Qge2NoYXJ0QXJlYX0gPSBjaGFydDtcbiAgICBjb25zdCBtZXRhID0gdGhpcy5fY2FjaGVkTWV0YTtcbiAgICBjb25zdCBhcmNzID0gbWV0YS5kYXRhO1xuICAgIGNvbnN0IHNwYWNpbmcgPSB0aGlzLmdldE1heEJvcmRlcldpZHRoKCkgKyB0aGlzLmdldE1heE9mZnNldChhcmNzKSArIHRoaXMub3B0aW9ucy5zcGFjaW5nO1xuICAgIGNvbnN0IG1heFNpemUgPSBNYXRoLm1heCgoTWF0aC5taW4oY2hhcnRBcmVhLndpZHRoLCBjaGFydEFyZWEuaGVpZ2h0KSAtIHNwYWNpbmcpIC8gMiwgMCk7XG4gICAgY29uc3QgY3V0b3V0ID0gTWF0aC5taW4odG9QZXJjZW50YWdlKHRoaXMub3B0aW9ucy5jdXRvdXQsIG1heFNpemUpLCAxKTtcbiAgICBjb25zdCBjaGFydFdlaWdodCA9IHRoaXMuX2dldFJpbmdXZWlnaHQodGhpcy5pbmRleCk7XG4gICAgY29uc3Qge2NpcmN1bWZlcmVuY2UsIHJvdGF0aW9ufSA9IHRoaXMuX2dldFJvdGF0aW9uRXh0ZW50cygpO1xuICAgIGNvbnN0IHtyYXRpb1gsIHJhdGlvWSwgb2Zmc2V0WCwgb2Zmc2V0WX0gPSBnZXRSYXRpb0FuZE9mZnNldChyb3RhdGlvbiwgY2lyY3VtZmVyZW5jZSwgY3V0b3V0KTtcbiAgICBjb25zdCBtYXhXaWR0aCA9IChjaGFydEFyZWEud2lkdGggLSBzcGFjaW5nKSAvIHJhdGlvWDtcbiAgICBjb25zdCBtYXhIZWlnaHQgPSAoY2hhcnRBcmVhLmhlaWdodCAtIHNwYWNpbmcpIC8gcmF0aW9ZO1xuICAgIGNvbnN0IG1heFJhZGl1cyA9IE1hdGgubWF4KE1hdGgubWluKG1heFdpZHRoLCBtYXhIZWlnaHQpIC8gMiwgMCk7XG4gICAgY29uc3Qgb3V0ZXJSYWRpdXMgPSB0b0RpbWVuc2lvbih0aGlzLm9wdGlvbnMucmFkaXVzLCBtYXhSYWRpdXMpO1xuICAgIGNvbnN0IGlubmVyUmFkaXVzID0gTWF0aC5tYXgob3V0ZXJSYWRpdXMgKiBjdXRvdXQsIDApO1xuICAgIGNvbnN0IHJhZGl1c0xlbmd0aCA9IChvdXRlclJhZGl1cyAtIGlubmVyUmFkaXVzKSAvIHRoaXMuX2dldFZpc2libGVEYXRhc2V0V2VpZ2h0VG90YWwoKTtcbiAgICB0aGlzLm9mZnNldFggPSBvZmZzZXRYICogb3V0ZXJSYWRpdXM7XG4gICAgdGhpcy5vZmZzZXRZID0gb2Zmc2V0WSAqIG91dGVyUmFkaXVzO1xuICAgIG1ldGEudG90YWwgPSB0aGlzLmNhbGN1bGF0ZVRvdGFsKCk7XG4gICAgdGhpcy5vdXRlclJhZGl1cyA9IG91dGVyUmFkaXVzIC0gcmFkaXVzTGVuZ3RoICogdGhpcy5fZ2V0UmluZ1dlaWdodE9mZnNldCh0aGlzLmluZGV4KTtcbiAgICB0aGlzLmlubmVyUmFkaXVzID0gTWF0aC5tYXgodGhpcy5vdXRlclJhZGl1cyAtIHJhZGl1c0xlbmd0aCAqIGNoYXJ0V2VpZ2h0LCAwKTtcbiAgICB0aGlzLnVwZGF0ZUVsZW1lbnRzKGFyY3MsIDAsIGFyY3MubGVuZ3RoLCBtb2RlKTtcbiAgfVxuICBfY2lyY3VtZmVyZW5jZShpLCByZXNldCkge1xuICAgIGNvbnN0IG9wdHMgPSB0aGlzLm9wdGlvbnM7XG4gICAgY29uc3QgbWV0YSA9IHRoaXMuX2NhY2hlZE1ldGE7XG4gICAgY29uc3QgY2lyY3VtZmVyZW5jZSA9IHRoaXMuX2dldENpcmN1bWZlcmVuY2UoKTtcbiAgICBpZiAoKHJlc2V0ICYmIG9wdHMuYW5pbWF0aW9uLmFuaW1hdGVSb3RhdGUpIHx8ICF0aGlzLmNoYXJ0LmdldERhdGFWaXNpYmlsaXR5KGkpIHx8IG1ldGEuX3BhcnNlZFtpXSA9PT0gbnVsbCB8fCBtZXRhLmRhdGFbaV0uaGlkZGVuKSB7XG4gICAgICByZXR1cm4gMDtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuY2FsY3VsYXRlQ2lyY3VtZmVyZW5jZShtZXRhLl9wYXJzZWRbaV0gKiBjaXJjdW1mZXJlbmNlIC8gVEFVKTtcbiAgfVxuICB1cGRhdGVFbGVtZW50cyhhcmNzLCBzdGFydCwgY291bnQsIG1vZGUpIHtcbiAgICBjb25zdCByZXNldCA9IG1vZGUgPT09ICdyZXNldCc7XG4gICAgY29uc3QgY2hhcnQgPSB0aGlzLmNoYXJ0O1xuICAgIGNvbnN0IGNoYXJ0QXJlYSA9IGNoYXJ0LmNoYXJ0QXJlYTtcbiAgICBjb25zdCBvcHRzID0gY2hhcnQub3B0aW9ucztcbiAgICBjb25zdCBhbmltYXRpb25PcHRzID0gb3B0cy5hbmltYXRpb247XG4gICAgY29uc3QgY2VudGVyWCA9IChjaGFydEFyZWEubGVmdCArIGNoYXJ0QXJlYS5yaWdodCkgLyAyO1xuICAgIGNvbnN0IGNlbnRlclkgPSAoY2hhcnRBcmVhLnRvcCArIGNoYXJ0QXJlYS5ib3R0b20pIC8gMjtcbiAgICBjb25zdCBhbmltYXRlU2NhbGUgPSByZXNldCAmJiBhbmltYXRpb25PcHRzLmFuaW1hdGVTY2FsZTtcbiAgICBjb25zdCBpbm5lclJhZGl1cyA9IGFuaW1hdGVTY2FsZSA/IDAgOiB0aGlzLmlubmVyUmFkaXVzO1xuICAgIGNvbnN0IG91dGVyUmFkaXVzID0gYW5pbWF0ZVNjYWxlID8gMCA6IHRoaXMub3V0ZXJSYWRpdXM7XG4gICAgY29uc3QgZmlyc3RPcHRzID0gdGhpcy5yZXNvbHZlRGF0YUVsZW1lbnRPcHRpb25zKHN0YXJ0LCBtb2RlKTtcbiAgICBjb25zdCBzaGFyZWRPcHRpb25zID0gdGhpcy5nZXRTaGFyZWRPcHRpb25zKGZpcnN0T3B0cyk7XG4gICAgY29uc3QgaW5jbHVkZU9wdGlvbnMgPSB0aGlzLmluY2x1ZGVPcHRpb25zKG1vZGUsIHNoYXJlZE9wdGlvbnMpO1xuICAgIGxldCBzdGFydEFuZ2xlID0gdGhpcy5fZ2V0Um90YXRpb24oKTtcbiAgICBsZXQgaTtcbiAgICBmb3IgKGkgPSAwOyBpIDwgc3RhcnQ7ICsraSkge1xuICAgICAgc3RhcnRBbmdsZSArPSB0aGlzLl9jaXJjdW1mZXJlbmNlKGksIHJlc2V0KTtcbiAgICB9XG4gICAgZm9yIChpID0gc3RhcnQ7IGkgPCBzdGFydCArIGNvdW50OyArK2kpIHtcbiAgICAgIGNvbnN0IGNpcmN1bWZlcmVuY2UgPSB0aGlzLl9jaXJjdW1mZXJlbmNlKGksIHJlc2V0KTtcbiAgICAgIGNvbnN0IGFyYyA9IGFyY3NbaV07XG4gICAgICBjb25zdCBwcm9wZXJ0aWVzID0ge1xuICAgICAgICB4OiBjZW50ZXJYICsgdGhpcy5vZmZzZXRYLFxuICAgICAgICB5OiBjZW50ZXJZICsgdGhpcy5vZmZzZXRZLFxuICAgICAgICBzdGFydEFuZ2xlLFxuICAgICAgICBlbmRBbmdsZTogc3RhcnRBbmdsZSArIGNpcmN1bWZlcmVuY2UsXG4gICAgICAgIGNpcmN1bWZlcmVuY2UsXG4gICAgICAgIG91dGVyUmFkaXVzLFxuICAgICAgICBpbm5lclJhZGl1c1xuICAgICAgfTtcbiAgICAgIGlmIChpbmNsdWRlT3B0aW9ucykge1xuICAgICAgICBwcm9wZXJ0aWVzLm9wdGlvbnMgPSBzaGFyZWRPcHRpb25zIHx8IHRoaXMucmVzb2x2ZURhdGFFbGVtZW50T3B0aW9ucyhpLCBhcmMuYWN0aXZlID8gJ2FjdGl2ZScgOiBtb2RlKTtcbiAgICAgIH1cbiAgICAgIHN0YXJ0QW5nbGUgKz0gY2lyY3VtZmVyZW5jZTtcbiAgICAgIHRoaXMudXBkYXRlRWxlbWVudChhcmMsIGksIHByb3BlcnRpZXMsIG1vZGUpO1xuICAgIH1cbiAgICB0aGlzLnVwZGF0ZVNoYXJlZE9wdGlvbnMoc2hhcmVkT3B0aW9ucywgbW9kZSwgZmlyc3RPcHRzKTtcbiAgfVxuICBjYWxjdWxhdGVUb3RhbCgpIHtcbiAgICBjb25zdCBtZXRhID0gdGhpcy5fY2FjaGVkTWV0YTtcbiAgICBjb25zdCBtZXRhRGF0YSA9IG1ldGEuZGF0YTtcbiAgICBsZXQgdG90YWwgPSAwO1xuICAgIGxldCBpO1xuICAgIGZvciAoaSA9IDA7IGkgPCBtZXRhRGF0YS5sZW5ndGg7IGkrKykge1xuICAgICAgY29uc3QgdmFsdWUgPSBtZXRhLl9wYXJzZWRbaV07XG4gICAgICBpZiAodmFsdWUgIT09IG51bGwgJiYgIWlzTmFOKHZhbHVlKSAmJiB0aGlzLmNoYXJ0LmdldERhdGFWaXNpYmlsaXR5KGkpICYmICFtZXRhRGF0YVtpXS5oaWRkZW4pIHtcbiAgICAgICAgdG90YWwgKz0gTWF0aC5hYnModmFsdWUpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdG90YWw7XG4gIH1cbiAgY2FsY3VsYXRlQ2lyY3VtZmVyZW5jZSh2YWx1ZSkge1xuICAgIGNvbnN0IHRvdGFsID0gdGhpcy5fY2FjaGVkTWV0YS50b3RhbDtcbiAgICBpZiAodG90YWwgPiAwICYmICFpc05hTih2YWx1ZSkpIHtcbiAgICAgIHJldHVybiBUQVUgKiAoTWF0aC5hYnModmFsdWUpIC8gdG90YWwpO1xuICAgIH1cbiAgICByZXR1cm4gMDtcbiAgfVxuICBnZXRMYWJlbEFuZFZhbHVlKGluZGV4KSB7XG4gICAgY29uc3QgbWV0YSA9IHRoaXMuX2NhY2hlZE1ldGE7XG4gICAgY29uc3QgY2hhcnQgPSB0aGlzLmNoYXJ0O1xuICAgIGNvbnN0IGxhYmVscyA9IGNoYXJ0LmRhdGEubGFiZWxzIHx8IFtdO1xuICAgIGNvbnN0IHZhbHVlID0gZm9ybWF0TnVtYmVyKG1ldGEuX3BhcnNlZFtpbmRleF0sIGNoYXJ0Lm9wdGlvbnMubG9jYWxlKTtcbiAgICByZXR1cm4ge1xuICAgICAgbGFiZWw6IGxhYmVsc1tpbmRleF0gfHwgJycsXG4gICAgICB2YWx1ZSxcbiAgICB9O1xuICB9XG4gIGdldE1heEJvcmRlcldpZHRoKGFyY3MpIHtcbiAgICBsZXQgbWF4ID0gMDtcbiAgICBjb25zdCBjaGFydCA9IHRoaXMuY2hhcnQ7XG4gICAgbGV0IGksIGlsZW4sIG1ldGEsIGNvbnRyb2xsZXIsIG9wdGlvbnM7XG4gICAgaWYgKCFhcmNzKSB7XG4gICAgICBmb3IgKGkgPSAwLCBpbGVuID0gY2hhcnQuZGF0YS5kYXRhc2V0cy5sZW5ndGg7IGkgPCBpbGVuOyArK2kpIHtcbiAgICAgICAgaWYgKGNoYXJ0LmlzRGF0YXNldFZpc2libGUoaSkpIHtcbiAgICAgICAgICBtZXRhID0gY2hhcnQuZ2V0RGF0YXNldE1ldGEoaSk7XG4gICAgICAgICAgYXJjcyA9IG1ldGEuZGF0YTtcbiAgICAgICAgICBjb250cm9sbGVyID0gbWV0YS5jb250cm9sbGVyO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGlmICghYXJjcykge1xuICAgICAgcmV0dXJuIDA7XG4gICAgfVxuICAgIGZvciAoaSA9IDAsIGlsZW4gPSBhcmNzLmxlbmd0aDsgaSA8IGlsZW47ICsraSkge1xuICAgICAgb3B0aW9ucyA9IGNvbnRyb2xsZXIucmVzb2x2ZURhdGFFbGVtZW50T3B0aW9ucyhpKTtcbiAgICAgIGlmIChvcHRpb25zLmJvcmRlckFsaWduICE9PSAnaW5uZXInKSB7XG4gICAgICAgIG1heCA9IE1hdGgubWF4KG1heCwgb3B0aW9ucy5ib3JkZXJXaWR0aCB8fCAwLCBvcHRpb25zLmhvdmVyQm9yZGVyV2lkdGggfHwgMCk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBtYXg7XG4gIH1cbiAgZ2V0TWF4T2Zmc2V0KGFyY3MpIHtcbiAgICBsZXQgbWF4ID0gMDtcbiAgICBmb3IgKGxldCBpID0gMCwgaWxlbiA9IGFyY3MubGVuZ3RoOyBpIDwgaWxlbjsgKytpKSB7XG4gICAgICBjb25zdCBvcHRpb25zID0gdGhpcy5yZXNvbHZlRGF0YUVsZW1lbnRPcHRpb25zKGkpO1xuICAgICAgbWF4ID0gTWF0aC5tYXgobWF4LCBvcHRpb25zLm9mZnNldCB8fCAwLCBvcHRpb25zLmhvdmVyT2Zmc2V0IHx8IDApO1xuICAgIH1cbiAgICByZXR1cm4gbWF4O1xuICB9XG4gIF9nZXRSaW5nV2VpZ2h0T2Zmc2V0KGRhdGFzZXRJbmRleCkge1xuICAgIGxldCByaW5nV2VpZ2h0T2Zmc2V0ID0gMDtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGRhdGFzZXRJbmRleDsgKytpKSB7XG4gICAgICBpZiAodGhpcy5jaGFydC5pc0RhdGFzZXRWaXNpYmxlKGkpKSB7XG4gICAgICAgIHJpbmdXZWlnaHRPZmZzZXQgKz0gdGhpcy5fZ2V0UmluZ1dlaWdodChpKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJpbmdXZWlnaHRPZmZzZXQ7XG4gIH1cbiAgX2dldFJpbmdXZWlnaHQoZGF0YXNldEluZGV4KSB7XG4gICAgcmV0dXJuIE1hdGgubWF4KHZhbHVlT3JEZWZhdWx0KHRoaXMuY2hhcnQuZGF0YS5kYXRhc2V0c1tkYXRhc2V0SW5kZXhdLndlaWdodCwgMSksIDApO1xuICB9XG4gIF9nZXRWaXNpYmxlRGF0YXNldFdlaWdodFRvdGFsKCkge1xuICAgIHJldHVybiB0aGlzLl9nZXRSaW5nV2VpZ2h0T2Zmc2V0KHRoaXMuY2hhcnQuZGF0YS5kYXRhc2V0cy5sZW5ndGgpIHx8IDE7XG4gIH1cbn1cbkRvdWdobnV0Q29udHJvbGxlci5pZCA9ICdkb3VnaG51dCc7XG5Eb3VnaG51dENvbnRyb2xsZXIuZGVmYXVsdHMgPSB7XG4gIGRhdGFzZXRFbGVtZW50VHlwZTogZmFsc2UsXG4gIGRhdGFFbGVtZW50VHlwZTogJ2FyYycsXG4gIGFuaW1hdGlvbjoge1xuICAgIGFuaW1hdGVSb3RhdGU6IHRydWUsXG4gICAgYW5pbWF0ZVNjYWxlOiBmYWxzZVxuICB9LFxuICBhbmltYXRpb25zOiB7XG4gICAgbnVtYmVyczoge1xuICAgICAgdHlwZTogJ251bWJlcicsXG4gICAgICBwcm9wZXJ0aWVzOiBbJ2NpcmN1bWZlcmVuY2UnLCAnZW5kQW5nbGUnLCAnaW5uZXJSYWRpdXMnLCAnb3V0ZXJSYWRpdXMnLCAnc3RhcnRBbmdsZScsICd4JywgJ3knLCAnb2Zmc2V0JywgJ2JvcmRlcldpZHRoJywgJ3NwYWNpbmcnXVxuICAgIH0sXG4gIH0sXG4gIGN1dG91dDogJzUwJScsXG4gIHJvdGF0aW9uOiAwLFxuICBjaXJjdW1mZXJlbmNlOiAzNjAsXG4gIHJhZGl1czogJzEwMCUnLFxuICBzcGFjaW5nOiAwLFxuICBpbmRleEF4aXM6ICdyJyxcbn07XG5Eb3VnaG51dENvbnRyb2xsZXIuZGVzY3JpcHRvcnMgPSB7XG4gIF9zY3JpcHRhYmxlOiAobmFtZSkgPT4gbmFtZSAhPT0gJ3NwYWNpbmcnLFxuICBfaW5kZXhhYmxlOiAobmFtZSkgPT4gbmFtZSAhPT0gJ3NwYWNpbmcnLFxufTtcbkRvdWdobnV0Q29udHJvbGxlci5vdmVycmlkZXMgPSB7XG4gIGFzcGVjdFJhdGlvOiAxLFxuICBwbHVnaW5zOiB7XG4gICAgbGVnZW5kOiB7XG4gICAgICBsYWJlbHM6IHtcbiAgICAgICAgZ2VuZXJhdGVMYWJlbHMoY2hhcnQpIHtcbiAgICAgICAgICBjb25zdCBkYXRhID0gY2hhcnQuZGF0YTtcbiAgICAgICAgICBpZiAoZGF0YS5sYWJlbHMubGVuZ3RoICYmIGRhdGEuZGF0YXNldHMubGVuZ3RoKSB7XG4gICAgICAgICAgICBjb25zdCB7bGFiZWxzOiB7cG9pbnRTdHlsZX19ID0gY2hhcnQubGVnZW5kLm9wdGlvbnM7XG4gICAgICAgICAgICByZXR1cm4gZGF0YS5sYWJlbHMubWFwKChsYWJlbCwgaSkgPT4ge1xuICAgICAgICAgICAgICBjb25zdCBtZXRhID0gY2hhcnQuZ2V0RGF0YXNldE1ldGEoMCk7XG4gICAgICAgICAgICAgIGNvbnN0IHN0eWxlID0gbWV0YS5jb250cm9sbGVyLmdldFN0eWxlKGkpO1xuICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHRleHQ6IGxhYmVsLFxuICAgICAgICAgICAgICAgIGZpbGxTdHlsZTogc3R5bGUuYmFja2dyb3VuZENvbG9yLFxuICAgICAgICAgICAgICAgIHN0cm9rZVN0eWxlOiBzdHlsZS5ib3JkZXJDb2xvcixcbiAgICAgICAgICAgICAgICBsaW5lV2lkdGg6IHN0eWxlLmJvcmRlcldpZHRoLFxuICAgICAgICAgICAgICAgIHBvaW50U3R5bGU6IHBvaW50U3R5bGUsXG4gICAgICAgICAgICAgICAgaGlkZGVuOiAhY2hhcnQuZ2V0RGF0YVZpc2liaWxpdHkoaSksXG4gICAgICAgICAgICAgICAgaW5kZXg6IGlcbiAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gW107XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBvbkNsaWNrKGUsIGxlZ2VuZEl0ZW0sIGxlZ2VuZCkge1xuICAgICAgICBsZWdlbmQuY2hhcnQudG9nZ2xlRGF0YVZpc2liaWxpdHkobGVnZW5kSXRlbS5pbmRleCk7XG4gICAgICAgIGxlZ2VuZC5jaGFydC51cGRhdGUoKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIHRvb2x0aXA6IHtcbiAgICAgIGNhbGxiYWNrczoge1xuICAgICAgICB0aXRsZSgpIHtcbiAgICAgICAgICByZXR1cm4gJyc7XG4gICAgICAgIH0sXG4gICAgICAgIGxhYmVsKHRvb2x0aXBJdGVtKSB7XG4gICAgICAgICAgbGV0IGRhdGFMYWJlbCA9IHRvb2x0aXBJdGVtLmxhYmVsO1xuICAgICAgICAgIGNvbnN0IHZhbHVlID0gJzogJyArIHRvb2x0aXBJdGVtLmZvcm1hdHRlZFZhbHVlO1xuICAgICAgICAgIGlmIChpc0FycmF5KGRhdGFMYWJlbCkpIHtcbiAgICAgICAgICAgIGRhdGFMYWJlbCA9IGRhdGFMYWJlbC5zbGljZSgpO1xuICAgICAgICAgICAgZGF0YUxhYmVsWzBdICs9IHZhbHVlO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBkYXRhTGFiZWwgKz0gdmFsdWU7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBkYXRhTGFiZWw7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbn07XG5cbmNsYXNzIExpbmVDb250cm9sbGVyIGV4dGVuZHMgRGF0YXNldENvbnRyb2xsZXIge1xuICBpbml0aWFsaXplKCkge1xuICAgIHRoaXMuZW5hYmxlT3B0aW9uU2hhcmluZyA9IHRydWU7XG4gICAgc3VwZXIuaW5pdGlhbGl6ZSgpO1xuICB9XG4gIHVwZGF0ZShtb2RlKSB7XG4gICAgY29uc3QgbWV0YSA9IHRoaXMuX2NhY2hlZE1ldGE7XG4gICAgY29uc3Qge2RhdGFzZXQ6IGxpbmUsIGRhdGE6IHBvaW50cyA9IFtdLCBfZGF0YXNldH0gPSBtZXRhO1xuICAgIGNvbnN0IGFuaW1hdGlvbnNEaXNhYmxlZCA9IHRoaXMuY2hhcnQuX2FuaW1hdGlvbnNEaXNhYmxlZDtcbiAgICBsZXQge3N0YXJ0LCBjb3VudH0gPSBnZXRTdGFydEFuZENvdW50T2ZWaXNpYmxlUG9pbnRzKG1ldGEsIHBvaW50cywgYW5pbWF0aW9uc0Rpc2FibGVkKTtcbiAgICB0aGlzLl9kcmF3U3RhcnQgPSBzdGFydDtcbiAgICB0aGlzLl9kcmF3Q291bnQgPSBjb3VudDtcbiAgICBpZiAoc2NhbGVSYW5nZXNDaGFuZ2VkKG1ldGEpKSB7XG4gICAgICBzdGFydCA9IDA7XG4gICAgICBjb3VudCA9IHBvaW50cy5sZW5ndGg7XG4gICAgfVxuICAgIGxpbmUuX2NoYXJ0ID0gdGhpcy5jaGFydDtcbiAgICBsaW5lLl9kYXRhc2V0SW5kZXggPSB0aGlzLmluZGV4O1xuICAgIGxpbmUuX2RlY2ltYXRlZCA9ICEhX2RhdGFzZXQuX2RlY2ltYXRlZDtcbiAgICBsaW5lLnBvaW50cyA9IHBvaW50cztcbiAgICBjb25zdCBvcHRpb25zID0gdGhpcy5yZXNvbHZlRGF0YXNldEVsZW1lbnRPcHRpb25zKG1vZGUpO1xuICAgIGlmICghdGhpcy5vcHRpb25zLnNob3dMaW5lKSB7XG4gICAgICBvcHRpb25zLmJvcmRlcldpZHRoID0gMDtcbiAgICB9XG4gICAgb3B0aW9ucy5zZWdtZW50ID0gdGhpcy5vcHRpb25zLnNlZ21lbnQ7XG4gICAgdGhpcy51cGRhdGVFbGVtZW50KGxpbmUsIHVuZGVmaW5lZCwge1xuICAgICAgYW5pbWF0ZWQ6ICFhbmltYXRpb25zRGlzYWJsZWQsXG4gICAgICBvcHRpb25zXG4gICAgfSwgbW9kZSk7XG4gICAgdGhpcy51cGRhdGVFbGVtZW50cyhwb2ludHMsIHN0YXJ0LCBjb3VudCwgbW9kZSk7XG4gIH1cbiAgdXBkYXRlRWxlbWVudHMocG9pbnRzLCBzdGFydCwgY291bnQsIG1vZGUpIHtcbiAgICBjb25zdCByZXNldCA9IG1vZGUgPT09ICdyZXNldCc7XG4gICAgY29uc3Qge2lTY2FsZSwgdlNjYWxlLCBfc3RhY2tlZCwgX2RhdGFzZXR9ID0gdGhpcy5fY2FjaGVkTWV0YTtcbiAgICBjb25zdCBmaXJzdE9wdHMgPSB0aGlzLnJlc29sdmVEYXRhRWxlbWVudE9wdGlvbnMoc3RhcnQsIG1vZGUpO1xuICAgIGNvbnN0IHNoYXJlZE9wdGlvbnMgPSB0aGlzLmdldFNoYXJlZE9wdGlvbnMoZmlyc3RPcHRzKTtcbiAgICBjb25zdCBpbmNsdWRlT3B0aW9ucyA9IHRoaXMuaW5jbHVkZU9wdGlvbnMobW9kZSwgc2hhcmVkT3B0aW9ucyk7XG4gICAgY29uc3QgaUF4aXMgPSBpU2NhbGUuYXhpcztcbiAgICBjb25zdCB2QXhpcyA9IHZTY2FsZS5heGlzO1xuICAgIGNvbnN0IHtzcGFuR2Fwcywgc2VnbWVudH0gPSB0aGlzLm9wdGlvbnM7XG4gICAgY29uc3QgbWF4R2FwTGVuZ3RoID0gaXNOdW1iZXIoc3BhbkdhcHMpID8gc3BhbkdhcHMgOiBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFk7XG4gICAgY29uc3QgZGlyZWN0VXBkYXRlID0gdGhpcy5jaGFydC5fYW5pbWF0aW9uc0Rpc2FibGVkIHx8IHJlc2V0IHx8IG1vZGUgPT09ICdub25lJztcbiAgICBsZXQgcHJldlBhcnNlZCA9IHN0YXJ0ID4gMCAmJiB0aGlzLmdldFBhcnNlZChzdGFydCAtIDEpO1xuICAgIGZvciAobGV0IGkgPSBzdGFydDsgaSA8IHN0YXJ0ICsgY291bnQ7ICsraSkge1xuICAgICAgY29uc3QgcG9pbnQgPSBwb2ludHNbaV07XG4gICAgICBjb25zdCBwYXJzZWQgPSB0aGlzLmdldFBhcnNlZChpKTtcbiAgICAgIGNvbnN0IHByb3BlcnRpZXMgPSBkaXJlY3RVcGRhdGUgPyBwb2ludCA6IHt9O1xuICAgICAgY29uc3QgbnVsbERhdGEgPSBpc051bGxPclVuZGVmKHBhcnNlZFt2QXhpc10pO1xuICAgICAgY29uc3QgaVBpeGVsID0gcHJvcGVydGllc1tpQXhpc10gPSBpU2NhbGUuZ2V0UGl4ZWxGb3JWYWx1ZShwYXJzZWRbaUF4aXNdLCBpKTtcbiAgICAgIGNvbnN0IHZQaXhlbCA9IHByb3BlcnRpZXNbdkF4aXNdID0gcmVzZXQgfHwgbnVsbERhdGEgPyB2U2NhbGUuZ2V0QmFzZVBpeGVsKCkgOiB2U2NhbGUuZ2V0UGl4ZWxGb3JWYWx1ZShfc3RhY2tlZCA/IHRoaXMuYXBwbHlTdGFjayh2U2NhbGUsIHBhcnNlZCwgX3N0YWNrZWQpIDogcGFyc2VkW3ZBeGlzXSwgaSk7XG4gICAgICBwcm9wZXJ0aWVzLnNraXAgPSBpc05hTihpUGl4ZWwpIHx8IGlzTmFOKHZQaXhlbCkgfHwgbnVsbERhdGE7XG4gICAgICBwcm9wZXJ0aWVzLnN0b3AgPSBpID4gMCAmJiAocGFyc2VkW2lBeGlzXSAtIHByZXZQYXJzZWRbaUF4aXNdKSA+IG1heEdhcExlbmd0aDtcbiAgICAgIGlmIChzZWdtZW50KSB7XG4gICAgICAgIHByb3BlcnRpZXMucGFyc2VkID0gcGFyc2VkO1xuICAgICAgICBwcm9wZXJ0aWVzLnJhdyA9IF9kYXRhc2V0LmRhdGFbaV07XG4gICAgICB9XG4gICAgICBpZiAoaW5jbHVkZU9wdGlvbnMpIHtcbiAgICAgICAgcHJvcGVydGllcy5vcHRpb25zID0gc2hhcmVkT3B0aW9ucyB8fCB0aGlzLnJlc29sdmVEYXRhRWxlbWVudE9wdGlvbnMoaSwgcG9pbnQuYWN0aXZlID8gJ2FjdGl2ZScgOiBtb2RlKTtcbiAgICAgIH1cbiAgICAgIGlmICghZGlyZWN0VXBkYXRlKSB7XG4gICAgICAgIHRoaXMudXBkYXRlRWxlbWVudChwb2ludCwgaSwgcHJvcGVydGllcywgbW9kZSk7XG4gICAgICB9XG4gICAgICBwcmV2UGFyc2VkID0gcGFyc2VkO1xuICAgIH1cbiAgICB0aGlzLnVwZGF0ZVNoYXJlZE9wdGlvbnMoc2hhcmVkT3B0aW9ucywgbW9kZSwgZmlyc3RPcHRzKTtcbiAgfVxuICBnZXRNYXhPdmVyZmxvdygpIHtcbiAgICBjb25zdCBtZXRhID0gdGhpcy5fY2FjaGVkTWV0YTtcbiAgICBjb25zdCBkYXRhc2V0ID0gbWV0YS5kYXRhc2V0O1xuICAgIGNvbnN0IGJvcmRlciA9IGRhdGFzZXQub3B0aW9ucyAmJiBkYXRhc2V0Lm9wdGlvbnMuYm9yZGVyV2lkdGggfHwgMDtcbiAgICBjb25zdCBkYXRhID0gbWV0YS5kYXRhIHx8IFtdO1xuICAgIGlmICghZGF0YS5sZW5ndGgpIHtcbiAgICAgIHJldHVybiBib3JkZXI7XG4gICAgfVxuICAgIGNvbnN0IGZpcnN0UG9pbnQgPSBkYXRhWzBdLnNpemUodGhpcy5yZXNvbHZlRGF0YUVsZW1lbnRPcHRpb25zKDApKTtcbiAgICBjb25zdCBsYXN0UG9pbnQgPSBkYXRhW2RhdGEubGVuZ3RoIC0gMV0uc2l6ZSh0aGlzLnJlc29sdmVEYXRhRWxlbWVudE9wdGlvbnMoZGF0YS5sZW5ndGggLSAxKSk7XG4gICAgcmV0dXJuIE1hdGgubWF4KGJvcmRlciwgZmlyc3RQb2ludCwgbGFzdFBvaW50KSAvIDI7XG4gIH1cbiAgZHJhdygpIHtcbiAgICBjb25zdCBtZXRhID0gdGhpcy5fY2FjaGVkTWV0YTtcbiAgICBtZXRhLmRhdGFzZXQudXBkYXRlQ29udHJvbFBvaW50cyh0aGlzLmNoYXJ0LmNoYXJ0QXJlYSwgbWV0YS5pU2NhbGUuYXhpcyk7XG4gICAgc3VwZXIuZHJhdygpO1xuICB9XG59XG5MaW5lQ29udHJvbGxlci5pZCA9ICdsaW5lJztcbkxpbmVDb250cm9sbGVyLmRlZmF1bHRzID0ge1xuICBkYXRhc2V0RWxlbWVudFR5cGU6ICdsaW5lJyxcbiAgZGF0YUVsZW1lbnRUeXBlOiAncG9pbnQnLFxuICBzaG93TGluZTogdHJ1ZSxcbiAgc3BhbkdhcHM6IGZhbHNlLFxufTtcbkxpbmVDb250cm9sbGVyLm92ZXJyaWRlcyA9IHtcbiAgc2NhbGVzOiB7XG4gICAgX2luZGV4Xzoge1xuICAgICAgdHlwZTogJ2NhdGVnb3J5JyxcbiAgICB9LFxuICAgIF92YWx1ZV86IHtcbiAgICAgIHR5cGU6ICdsaW5lYXInLFxuICAgIH0sXG4gIH1cbn07XG5mdW5jdGlvbiBnZXRTdGFydEFuZENvdW50T2ZWaXNpYmxlUG9pbnRzKG1ldGEsIHBvaW50cywgYW5pbWF0aW9uc0Rpc2FibGVkKSB7XG4gIGNvbnN0IHBvaW50Q291bnQgPSBwb2ludHMubGVuZ3RoO1xuICBsZXQgc3RhcnQgPSAwO1xuICBsZXQgY291bnQgPSBwb2ludENvdW50O1xuICBpZiAobWV0YS5fc29ydGVkKSB7XG4gICAgY29uc3Qge2lTY2FsZSwgX3BhcnNlZH0gPSBtZXRhO1xuICAgIGNvbnN0IGF4aXMgPSBpU2NhbGUuYXhpcztcbiAgICBjb25zdCB7bWluLCBtYXgsIG1pbkRlZmluZWQsIG1heERlZmluZWR9ID0gaVNjYWxlLmdldFVzZXJCb3VuZHMoKTtcbiAgICBpZiAobWluRGVmaW5lZCkge1xuICAgICAgc3RhcnQgPSBfbGltaXRWYWx1ZShNYXRoLm1pbihcbiAgICAgICAgX2xvb2t1cEJ5S2V5KF9wYXJzZWQsIGlTY2FsZS5heGlzLCBtaW4pLmxvLFxuICAgICAgICBhbmltYXRpb25zRGlzYWJsZWQgPyBwb2ludENvdW50IDogX2xvb2t1cEJ5S2V5KHBvaW50cywgYXhpcywgaVNjYWxlLmdldFBpeGVsRm9yVmFsdWUobWluKSkubG8pLFxuICAgICAgMCwgcG9pbnRDb3VudCAtIDEpO1xuICAgIH1cbiAgICBpZiAobWF4RGVmaW5lZCkge1xuICAgICAgY291bnQgPSBfbGltaXRWYWx1ZShNYXRoLm1heChcbiAgICAgICAgX2xvb2t1cEJ5S2V5KF9wYXJzZWQsIGlTY2FsZS5heGlzLCBtYXgpLmhpICsgMSxcbiAgICAgICAgYW5pbWF0aW9uc0Rpc2FibGVkID8gMCA6IF9sb29rdXBCeUtleShwb2ludHMsIGF4aXMsIGlTY2FsZS5nZXRQaXhlbEZvclZhbHVlKG1heCkpLmhpICsgMSksXG4gICAgICBzdGFydCwgcG9pbnRDb3VudCkgLSBzdGFydDtcbiAgICB9IGVsc2Uge1xuICAgICAgY291bnQgPSBwb2ludENvdW50IC0gc3RhcnQ7XG4gICAgfVxuICB9XG4gIHJldHVybiB7c3RhcnQsIGNvdW50fTtcbn1cbmZ1bmN0aW9uIHNjYWxlUmFuZ2VzQ2hhbmdlZChtZXRhKSB7XG4gIGNvbnN0IHt4U2NhbGUsIHlTY2FsZSwgX3NjYWxlUmFuZ2VzfSA9IG1ldGE7XG4gIGNvbnN0IG5ld1JhbmdlcyA9IHtcbiAgICB4bWluOiB4U2NhbGUubWluLFxuICAgIHhtYXg6IHhTY2FsZS5tYXgsXG4gICAgeW1pbjogeVNjYWxlLm1pbixcbiAgICB5bWF4OiB5U2NhbGUubWF4XG4gIH07XG4gIGlmICghX3NjYWxlUmFuZ2VzKSB7XG4gICAgbWV0YS5fc2NhbGVSYW5nZXMgPSBuZXdSYW5nZXM7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgY29uc3QgY2hhbmdlZCA9IF9zY2FsZVJhbmdlcy54bWluICE9PSB4U2NhbGUubWluXG5cdFx0fHwgX3NjYWxlUmFuZ2VzLnhtYXggIT09IHhTY2FsZS5tYXhcblx0XHR8fCBfc2NhbGVSYW5nZXMueW1pbiAhPT0geVNjYWxlLm1pblxuXHRcdHx8IF9zY2FsZVJhbmdlcy55bWF4ICE9PSB5U2NhbGUubWF4O1xuICBPYmplY3QuYXNzaWduKF9zY2FsZVJhbmdlcywgbmV3UmFuZ2VzKTtcbiAgcmV0dXJuIGNoYW5nZWQ7XG59XG5cbmNsYXNzIFBvbGFyQXJlYUNvbnRyb2xsZXIgZXh0ZW5kcyBEYXRhc2V0Q29udHJvbGxlciB7XG4gIGNvbnN0cnVjdG9yKGNoYXJ0LCBkYXRhc2V0SW5kZXgpIHtcbiAgICBzdXBlcihjaGFydCwgZGF0YXNldEluZGV4KTtcbiAgICB0aGlzLmlubmVyUmFkaXVzID0gdW5kZWZpbmVkO1xuICAgIHRoaXMub3V0ZXJSYWRpdXMgPSB1bmRlZmluZWQ7XG4gIH1cbiAgZ2V0TGFiZWxBbmRWYWx1ZShpbmRleCkge1xuICAgIGNvbnN0IG1ldGEgPSB0aGlzLl9jYWNoZWRNZXRhO1xuICAgIGNvbnN0IGNoYXJ0ID0gdGhpcy5jaGFydDtcbiAgICBjb25zdCBsYWJlbHMgPSBjaGFydC5kYXRhLmxhYmVscyB8fCBbXTtcbiAgICBjb25zdCB2YWx1ZSA9IGZvcm1hdE51bWJlcihtZXRhLl9wYXJzZWRbaW5kZXhdLnIsIGNoYXJ0Lm9wdGlvbnMubG9jYWxlKTtcbiAgICByZXR1cm4ge1xuICAgICAgbGFiZWw6IGxhYmVsc1tpbmRleF0gfHwgJycsXG4gICAgICB2YWx1ZSxcbiAgICB9O1xuICB9XG4gIHVwZGF0ZShtb2RlKSB7XG4gICAgY29uc3QgYXJjcyA9IHRoaXMuX2NhY2hlZE1ldGEuZGF0YTtcbiAgICB0aGlzLl91cGRhdGVSYWRpdXMoKTtcbiAgICB0aGlzLnVwZGF0ZUVsZW1lbnRzKGFyY3MsIDAsIGFyY3MubGVuZ3RoLCBtb2RlKTtcbiAgfVxuICBfdXBkYXRlUmFkaXVzKCkge1xuICAgIGNvbnN0IGNoYXJ0ID0gdGhpcy5jaGFydDtcbiAgICBjb25zdCBjaGFydEFyZWEgPSBjaGFydC5jaGFydEFyZWE7XG4gICAgY29uc3Qgb3B0cyA9IGNoYXJ0Lm9wdGlvbnM7XG4gICAgY29uc3QgbWluU2l6ZSA9IE1hdGgubWluKGNoYXJ0QXJlYS5yaWdodCAtIGNoYXJ0QXJlYS5sZWZ0LCBjaGFydEFyZWEuYm90dG9tIC0gY2hhcnRBcmVhLnRvcCk7XG4gICAgY29uc3Qgb3V0ZXJSYWRpdXMgPSBNYXRoLm1heChtaW5TaXplIC8gMiwgMCk7XG4gICAgY29uc3QgaW5uZXJSYWRpdXMgPSBNYXRoLm1heChvcHRzLmN1dG91dFBlcmNlbnRhZ2UgPyAob3V0ZXJSYWRpdXMgLyAxMDApICogKG9wdHMuY3V0b3V0UGVyY2VudGFnZSkgOiAxLCAwKTtcbiAgICBjb25zdCByYWRpdXNMZW5ndGggPSAob3V0ZXJSYWRpdXMgLSBpbm5lclJhZGl1cykgLyBjaGFydC5nZXRWaXNpYmxlRGF0YXNldENvdW50KCk7XG4gICAgdGhpcy5vdXRlclJhZGl1cyA9IG91dGVyUmFkaXVzIC0gKHJhZGl1c0xlbmd0aCAqIHRoaXMuaW5kZXgpO1xuICAgIHRoaXMuaW5uZXJSYWRpdXMgPSB0aGlzLm91dGVyUmFkaXVzIC0gcmFkaXVzTGVuZ3RoO1xuICB9XG4gIHVwZGF0ZUVsZW1lbnRzKGFyY3MsIHN0YXJ0LCBjb3VudCwgbW9kZSkge1xuICAgIGNvbnN0IHJlc2V0ID0gbW9kZSA9PT0gJ3Jlc2V0JztcbiAgICBjb25zdCBjaGFydCA9IHRoaXMuY2hhcnQ7XG4gICAgY29uc3QgZGF0YXNldCA9IHRoaXMuZ2V0RGF0YXNldCgpO1xuICAgIGNvbnN0IG9wdHMgPSBjaGFydC5vcHRpb25zO1xuICAgIGNvbnN0IGFuaW1hdGlvbk9wdHMgPSBvcHRzLmFuaW1hdGlvbjtcbiAgICBjb25zdCBzY2FsZSA9IHRoaXMuX2NhY2hlZE1ldGEuclNjYWxlO1xuICAgIGNvbnN0IGNlbnRlclggPSBzY2FsZS54Q2VudGVyO1xuICAgIGNvbnN0IGNlbnRlclkgPSBzY2FsZS55Q2VudGVyO1xuICAgIGNvbnN0IGRhdGFzZXRTdGFydEFuZ2xlID0gc2NhbGUuZ2V0SW5kZXhBbmdsZSgwKSAtIDAuNSAqIFBJO1xuICAgIGxldCBhbmdsZSA9IGRhdGFzZXRTdGFydEFuZ2xlO1xuICAgIGxldCBpO1xuICAgIGNvbnN0IGRlZmF1bHRBbmdsZSA9IDM2MCAvIHRoaXMuY291bnRWaXNpYmxlRWxlbWVudHMoKTtcbiAgICBmb3IgKGkgPSAwOyBpIDwgc3RhcnQ7ICsraSkge1xuICAgICAgYW5nbGUgKz0gdGhpcy5fY29tcHV0ZUFuZ2xlKGksIG1vZGUsIGRlZmF1bHRBbmdsZSk7XG4gICAgfVxuICAgIGZvciAoaSA9IHN0YXJ0OyBpIDwgc3RhcnQgKyBjb3VudDsgaSsrKSB7XG4gICAgICBjb25zdCBhcmMgPSBhcmNzW2ldO1xuICAgICAgbGV0IHN0YXJ0QW5nbGUgPSBhbmdsZTtcbiAgICAgIGxldCBlbmRBbmdsZSA9IGFuZ2xlICsgdGhpcy5fY29tcHV0ZUFuZ2xlKGksIG1vZGUsIGRlZmF1bHRBbmdsZSk7XG4gICAgICBsZXQgb3V0ZXJSYWRpdXMgPSBjaGFydC5nZXREYXRhVmlzaWJpbGl0eShpKSA/IHNjYWxlLmdldERpc3RhbmNlRnJvbUNlbnRlckZvclZhbHVlKGRhdGFzZXQuZGF0YVtpXSkgOiAwO1xuICAgICAgYW5nbGUgPSBlbmRBbmdsZTtcbiAgICAgIGlmIChyZXNldCkge1xuICAgICAgICBpZiAoYW5pbWF0aW9uT3B0cy5hbmltYXRlU2NhbGUpIHtcbiAgICAgICAgICBvdXRlclJhZGl1cyA9IDA7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGFuaW1hdGlvbk9wdHMuYW5pbWF0ZVJvdGF0ZSkge1xuICAgICAgICAgIHN0YXJ0QW5nbGUgPSBlbmRBbmdsZSA9IGRhdGFzZXRTdGFydEFuZ2xlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBjb25zdCBwcm9wZXJ0aWVzID0ge1xuICAgICAgICB4OiBjZW50ZXJYLFxuICAgICAgICB5OiBjZW50ZXJZLFxuICAgICAgICBpbm5lclJhZGl1czogMCxcbiAgICAgICAgb3V0ZXJSYWRpdXMsXG4gICAgICAgIHN0YXJ0QW5nbGUsXG4gICAgICAgIGVuZEFuZ2xlLFxuICAgICAgICBvcHRpb25zOiB0aGlzLnJlc29sdmVEYXRhRWxlbWVudE9wdGlvbnMoaSwgYXJjLmFjdGl2ZSA/ICdhY3RpdmUnIDogbW9kZSlcbiAgICAgIH07XG4gICAgICB0aGlzLnVwZGF0ZUVsZW1lbnQoYXJjLCBpLCBwcm9wZXJ0aWVzLCBtb2RlKTtcbiAgICB9XG4gIH1cbiAgY291bnRWaXNpYmxlRWxlbWVudHMoKSB7XG4gICAgY29uc3QgZGF0YXNldCA9IHRoaXMuZ2V0RGF0YXNldCgpO1xuICAgIGNvbnN0IG1ldGEgPSB0aGlzLl9jYWNoZWRNZXRhO1xuICAgIGxldCBjb3VudCA9IDA7XG4gICAgbWV0YS5kYXRhLmZvckVhY2goKGVsZW1lbnQsIGluZGV4KSA9PiB7XG4gICAgICBpZiAoIWlzTmFOKGRhdGFzZXQuZGF0YVtpbmRleF0pICYmIHRoaXMuY2hhcnQuZ2V0RGF0YVZpc2liaWxpdHkoaW5kZXgpKSB7XG4gICAgICAgIGNvdW50Kys7XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIGNvdW50O1xuICB9XG4gIF9jb21wdXRlQW5nbGUoaW5kZXgsIG1vZGUsIGRlZmF1bHRBbmdsZSkge1xuICAgIHJldHVybiB0aGlzLmNoYXJ0LmdldERhdGFWaXNpYmlsaXR5KGluZGV4KVxuICAgICAgPyB0b1JhZGlhbnModGhpcy5yZXNvbHZlRGF0YUVsZW1lbnRPcHRpb25zKGluZGV4LCBtb2RlKS5hbmdsZSB8fCBkZWZhdWx0QW5nbGUpXG4gICAgICA6IDA7XG4gIH1cbn1cblBvbGFyQXJlYUNvbnRyb2xsZXIuaWQgPSAncG9sYXJBcmVhJztcblBvbGFyQXJlYUNvbnRyb2xsZXIuZGVmYXVsdHMgPSB7XG4gIGRhdGFFbGVtZW50VHlwZTogJ2FyYycsXG4gIGFuaW1hdGlvbjoge1xuICAgIGFuaW1hdGVSb3RhdGU6IHRydWUsXG4gICAgYW5pbWF0ZVNjYWxlOiB0cnVlXG4gIH0sXG4gIGFuaW1hdGlvbnM6IHtcbiAgICBudW1iZXJzOiB7XG4gICAgICB0eXBlOiAnbnVtYmVyJyxcbiAgICAgIHByb3BlcnRpZXM6IFsneCcsICd5JywgJ3N0YXJ0QW5nbGUnLCAnZW5kQW5nbGUnLCAnaW5uZXJSYWRpdXMnLCAnb3V0ZXJSYWRpdXMnXVxuICAgIH0sXG4gIH0sXG4gIGluZGV4QXhpczogJ3InLFxuICBzdGFydEFuZ2xlOiAwLFxufTtcblBvbGFyQXJlYUNvbnRyb2xsZXIub3ZlcnJpZGVzID0ge1xuICBhc3BlY3RSYXRpbzogMSxcbiAgcGx1Z2luczoge1xuICAgIGxlZ2VuZDoge1xuICAgICAgbGFiZWxzOiB7XG4gICAgICAgIGdlbmVyYXRlTGFiZWxzKGNoYXJ0KSB7XG4gICAgICAgICAgY29uc3QgZGF0YSA9IGNoYXJ0LmRhdGE7XG4gICAgICAgICAgaWYgKGRhdGEubGFiZWxzLmxlbmd0aCAmJiBkYXRhLmRhdGFzZXRzLmxlbmd0aCkge1xuICAgICAgICAgICAgY29uc3Qge2xhYmVsczoge3BvaW50U3R5bGV9fSA9IGNoYXJ0LmxlZ2VuZC5vcHRpb25zO1xuICAgICAgICAgICAgcmV0dXJuIGRhdGEubGFiZWxzLm1hcCgobGFiZWwsIGkpID0+IHtcbiAgICAgICAgICAgICAgY29uc3QgbWV0YSA9IGNoYXJ0LmdldERhdGFzZXRNZXRhKDApO1xuICAgICAgICAgICAgICBjb25zdCBzdHlsZSA9IG1ldGEuY29udHJvbGxlci5nZXRTdHlsZShpKTtcbiAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICB0ZXh0OiBsYWJlbCxcbiAgICAgICAgICAgICAgICBmaWxsU3R5bGU6IHN0eWxlLmJhY2tncm91bmRDb2xvcixcbiAgICAgICAgICAgICAgICBzdHJva2VTdHlsZTogc3R5bGUuYm9yZGVyQ29sb3IsXG4gICAgICAgICAgICAgICAgbGluZVdpZHRoOiBzdHlsZS5ib3JkZXJXaWR0aCxcbiAgICAgICAgICAgICAgICBwb2ludFN0eWxlOiBwb2ludFN0eWxlLFxuICAgICAgICAgICAgICAgIGhpZGRlbjogIWNoYXJ0LmdldERhdGFWaXNpYmlsaXR5KGkpLFxuICAgICAgICAgICAgICAgIGluZGV4OiBpXG4gICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgb25DbGljayhlLCBsZWdlbmRJdGVtLCBsZWdlbmQpIHtcbiAgICAgICAgbGVnZW5kLmNoYXJ0LnRvZ2dsZURhdGFWaXNpYmlsaXR5KGxlZ2VuZEl0ZW0uaW5kZXgpO1xuICAgICAgICBsZWdlbmQuY2hhcnQudXBkYXRlKCk7XG4gICAgICB9XG4gICAgfSxcbiAgICB0b29sdGlwOiB7XG4gICAgICBjYWxsYmFja3M6IHtcbiAgICAgICAgdGl0bGUoKSB7XG4gICAgICAgICAgcmV0dXJuICcnO1xuICAgICAgICB9LFxuICAgICAgICBsYWJlbChjb250ZXh0KSB7XG4gICAgICAgICAgcmV0dXJuIGNvbnRleHQuY2hhcnQuZGF0YS5sYWJlbHNbY29udGV4dC5kYXRhSW5kZXhdICsgJzogJyArIGNvbnRleHQuZm9ybWF0dGVkVmFsdWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH0sXG4gIHNjYWxlczoge1xuICAgIHI6IHtcbiAgICAgIHR5cGU6ICdyYWRpYWxMaW5lYXInLFxuICAgICAgYW5nbGVMaW5lczoge1xuICAgICAgICBkaXNwbGF5OiBmYWxzZVxuICAgICAgfSxcbiAgICAgIGJlZ2luQXRaZXJvOiB0cnVlLFxuICAgICAgZ3JpZDoge1xuICAgICAgICBjaXJjdWxhcjogdHJ1ZVxuICAgICAgfSxcbiAgICAgIHBvaW50TGFiZWxzOiB7XG4gICAgICAgIGRpc3BsYXk6IGZhbHNlXG4gICAgICB9LFxuICAgICAgc3RhcnRBbmdsZTogMFxuICAgIH1cbiAgfVxufTtcblxuY2xhc3MgUGllQ29udHJvbGxlciBleHRlbmRzIERvdWdobnV0Q29udHJvbGxlciB7XG59XG5QaWVDb250cm9sbGVyLmlkID0gJ3BpZSc7XG5QaWVDb250cm9sbGVyLmRlZmF1bHRzID0ge1xuICBjdXRvdXQ6IDAsXG4gIHJvdGF0aW9uOiAwLFxuICBjaXJjdW1mZXJlbmNlOiAzNjAsXG4gIHJhZGl1czogJzEwMCUnXG59O1xuXG5jbGFzcyBSYWRhckNvbnRyb2xsZXIgZXh0ZW5kcyBEYXRhc2V0Q29udHJvbGxlciB7XG4gIGdldExhYmVsQW5kVmFsdWUoaW5kZXgpIHtcbiAgICBjb25zdCB2U2NhbGUgPSB0aGlzLl9jYWNoZWRNZXRhLnZTY2FsZTtcbiAgICBjb25zdCBwYXJzZWQgPSB0aGlzLmdldFBhcnNlZChpbmRleCk7XG4gICAgcmV0dXJuIHtcbiAgICAgIGxhYmVsOiB2U2NhbGUuZ2V0TGFiZWxzKClbaW5kZXhdLFxuICAgICAgdmFsdWU6ICcnICsgdlNjYWxlLmdldExhYmVsRm9yVmFsdWUocGFyc2VkW3ZTY2FsZS5heGlzXSlcbiAgICB9O1xuICB9XG4gIHVwZGF0ZShtb2RlKSB7XG4gICAgY29uc3QgbWV0YSA9IHRoaXMuX2NhY2hlZE1ldGE7XG4gICAgY29uc3QgbGluZSA9IG1ldGEuZGF0YXNldDtcbiAgICBjb25zdCBwb2ludHMgPSBtZXRhLmRhdGEgfHwgW107XG4gICAgY29uc3QgbGFiZWxzID0gbWV0YS5pU2NhbGUuZ2V0TGFiZWxzKCk7XG4gICAgbGluZS5wb2ludHMgPSBwb2ludHM7XG4gICAgaWYgKG1vZGUgIT09ICdyZXNpemUnKSB7XG4gICAgICBjb25zdCBvcHRpb25zID0gdGhpcy5yZXNvbHZlRGF0YXNldEVsZW1lbnRPcHRpb25zKG1vZGUpO1xuICAgICAgaWYgKCF0aGlzLm9wdGlvbnMuc2hvd0xpbmUpIHtcbiAgICAgICAgb3B0aW9ucy5ib3JkZXJXaWR0aCA9IDA7XG4gICAgICB9XG4gICAgICBjb25zdCBwcm9wZXJ0aWVzID0ge1xuICAgICAgICBfbG9vcDogdHJ1ZSxcbiAgICAgICAgX2Z1bGxMb29wOiBsYWJlbHMubGVuZ3RoID09PSBwb2ludHMubGVuZ3RoLFxuICAgICAgICBvcHRpb25zXG4gICAgICB9O1xuICAgICAgdGhpcy51cGRhdGVFbGVtZW50KGxpbmUsIHVuZGVmaW5lZCwgcHJvcGVydGllcywgbW9kZSk7XG4gICAgfVxuICAgIHRoaXMudXBkYXRlRWxlbWVudHMocG9pbnRzLCAwLCBwb2ludHMubGVuZ3RoLCBtb2RlKTtcbiAgfVxuICB1cGRhdGVFbGVtZW50cyhwb2ludHMsIHN0YXJ0LCBjb3VudCwgbW9kZSkge1xuICAgIGNvbnN0IGRhdGFzZXQgPSB0aGlzLmdldERhdGFzZXQoKTtcbiAgICBjb25zdCBzY2FsZSA9IHRoaXMuX2NhY2hlZE1ldGEuclNjYWxlO1xuICAgIGNvbnN0IHJlc2V0ID0gbW9kZSA9PT0gJ3Jlc2V0JztcbiAgICBmb3IgKGxldCBpID0gc3RhcnQ7IGkgPCBzdGFydCArIGNvdW50OyBpKyspIHtcbiAgICAgIGNvbnN0IHBvaW50ID0gcG9pbnRzW2ldO1xuICAgICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMucmVzb2x2ZURhdGFFbGVtZW50T3B0aW9ucyhpLCBwb2ludC5hY3RpdmUgPyAnYWN0aXZlJyA6IG1vZGUpO1xuICAgICAgY29uc3QgcG9pbnRQb3NpdGlvbiA9IHNjYWxlLmdldFBvaW50UG9zaXRpb25Gb3JWYWx1ZShpLCBkYXRhc2V0LmRhdGFbaV0pO1xuICAgICAgY29uc3QgeCA9IHJlc2V0ID8gc2NhbGUueENlbnRlciA6IHBvaW50UG9zaXRpb24ueDtcbiAgICAgIGNvbnN0IHkgPSByZXNldCA/IHNjYWxlLnlDZW50ZXIgOiBwb2ludFBvc2l0aW9uLnk7XG4gICAgICBjb25zdCBwcm9wZXJ0aWVzID0ge1xuICAgICAgICB4LFxuICAgICAgICB5LFxuICAgICAgICBhbmdsZTogcG9pbnRQb3NpdGlvbi5hbmdsZSxcbiAgICAgICAgc2tpcDogaXNOYU4oeCkgfHwgaXNOYU4oeSksXG4gICAgICAgIG9wdGlvbnNcbiAgICAgIH07XG4gICAgICB0aGlzLnVwZGF0ZUVsZW1lbnQocG9pbnQsIGksIHByb3BlcnRpZXMsIG1vZGUpO1xuICAgIH1cbiAgfVxufVxuUmFkYXJDb250cm9sbGVyLmlkID0gJ3JhZGFyJztcblJhZGFyQ29udHJvbGxlci5kZWZhdWx0cyA9IHtcbiAgZGF0YXNldEVsZW1lbnRUeXBlOiAnbGluZScsXG4gIGRhdGFFbGVtZW50VHlwZTogJ3BvaW50JyxcbiAgaW5kZXhBeGlzOiAncicsXG4gIHNob3dMaW5lOiB0cnVlLFxuICBlbGVtZW50czoge1xuICAgIGxpbmU6IHtcbiAgICAgIGZpbGw6ICdzdGFydCdcbiAgICB9XG4gIH0sXG59O1xuUmFkYXJDb250cm9sbGVyLm92ZXJyaWRlcyA9IHtcbiAgYXNwZWN0UmF0aW86IDEsXG4gIHNjYWxlczoge1xuICAgIHI6IHtcbiAgICAgIHR5cGU6ICdyYWRpYWxMaW5lYXInLFxuICAgIH1cbiAgfVxufTtcblxuY2xhc3MgU2NhdHRlckNvbnRyb2xsZXIgZXh0ZW5kcyBMaW5lQ29udHJvbGxlciB7XG59XG5TY2F0dGVyQ29udHJvbGxlci5pZCA9ICdzY2F0dGVyJztcblNjYXR0ZXJDb250cm9sbGVyLmRlZmF1bHRzID0ge1xuICBzaG93TGluZTogZmFsc2UsXG4gIGZpbGw6IGZhbHNlXG59O1xuU2NhdHRlckNvbnRyb2xsZXIub3ZlcnJpZGVzID0ge1xuICBpbnRlcmFjdGlvbjoge1xuICAgIG1vZGU6ICdwb2ludCdcbiAgfSxcbiAgcGx1Z2luczoge1xuICAgIHRvb2x0aXA6IHtcbiAgICAgIGNhbGxiYWNrczoge1xuICAgICAgICB0aXRsZSgpIHtcbiAgICAgICAgICByZXR1cm4gJyc7XG4gICAgICAgIH0sXG4gICAgICAgIGxhYmVsKGl0ZW0pIHtcbiAgICAgICAgICByZXR1cm4gJygnICsgaXRlbS5sYWJlbCArICcsICcgKyBpdGVtLmZvcm1hdHRlZFZhbHVlICsgJyknO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9LFxuICBzY2FsZXM6IHtcbiAgICB4OiB7XG4gICAgICB0eXBlOiAnbGluZWFyJ1xuICAgIH0sXG4gICAgeToge1xuICAgICAgdHlwZTogJ2xpbmVhcidcbiAgICB9XG4gIH1cbn07XG5cbnZhciBjb250cm9sbGVycyA9IC8qI19fUFVSRV9fKi9PYmplY3QuZnJlZXplKHtcbl9fcHJvdG9fXzogbnVsbCxcbkJhckNvbnRyb2xsZXI6IEJhckNvbnRyb2xsZXIsXG5CdWJibGVDb250cm9sbGVyOiBCdWJibGVDb250cm9sbGVyLFxuRG91Z2hudXRDb250cm9sbGVyOiBEb3VnaG51dENvbnRyb2xsZXIsXG5MaW5lQ29udHJvbGxlcjogTGluZUNvbnRyb2xsZXIsXG5Qb2xhckFyZWFDb250cm9sbGVyOiBQb2xhckFyZWFDb250cm9sbGVyLFxuUGllQ29udHJvbGxlcjogUGllQ29udHJvbGxlcixcblJhZGFyQ29udHJvbGxlcjogUmFkYXJDb250cm9sbGVyLFxuU2NhdHRlckNvbnRyb2xsZXI6IFNjYXR0ZXJDb250cm9sbGVyXG59KTtcblxuZnVuY3Rpb24gYWJzdHJhY3QoKSB7XG4gIHRocm93IG5ldyBFcnJvcignVGhpcyBtZXRob2QgaXMgbm90IGltcGxlbWVudGVkOiBDaGVjayB0aGF0IGEgY29tcGxldGUgZGF0ZSBhZGFwdGVyIGlzIHByb3ZpZGVkLicpO1xufVxuY2xhc3MgRGF0ZUFkYXB0ZXIge1xuICBjb25zdHJ1Y3RvcihvcHRpb25zKSB7XG4gICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgfVxuICBmb3JtYXRzKCkge1xuICAgIHJldHVybiBhYnN0cmFjdCgpO1xuICB9XG4gIHBhcnNlKHZhbHVlLCBmb3JtYXQpIHtcbiAgICByZXR1cm4gYWJzdHJhY3QoKTtcbiAgfVxuICBmb3JtYXQodGltZXN0YW1wLCBmb3JtYXQpIHtcbiAgICByZXR1cm4gYWJzdHJhY3QoKTtcbiAgfVxuICBhZGQodGltZXN0YW1wLCBhbW91bnQsIHVuaXQpIHtcbiAgICByZXR1cm4gYWJzdHJhY3QoKTtcbiAgfVxuICBkaWZmKGEsIGIsIHVuaXQpIHtcbiAgICByZXR1cm4gYWJzdHJhY3QoKTtcbiAgfVxuICBzdGFydE9mKHRpbWVzdGFtcCwgdW5pdCwgd2Vla2RheSkge1xuICAgIHJldHVybiBhYnN0cmFjdCgpO1xuICB9XG4gIGVuZE9mKHRpbWVzdGFtcCwgdW5pdCkge1xuICAgIHJldHVybiBhYnN0cmFjdCgpO1xuICB9XG59XG5EYXRlQWRhcHRlci5vdmVycmlkZSA9IGZ1bmN0aW9uKG1lbWJlcnMpIHtcbiAgT2JqZWN0LmFzc2lnbihEYXRlQWRhcHRlci5wcm90b3R5cGUsIG1lbWJlcnMpO1xufTtcbnZhciBhZGFwdGVycyA9IHtcbiAgX2RhdGU6IERhdGVBZGFwdGVyXG59O1xuXG5mdW5jdGlvbiBnZXRSZWxhdGl2ZVBvc2l0aW9uKGUsIGNoYXJ0KSB7XG4gIGlmICgnbmF0aXZlJyBpbiBlKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHg6IGUueCxcbiAgICAgIHk6IGUueVxuICAgIH07XG4gIH1cbiAgcmV0dXJuIGdldFJlbGF0aXZlUG9zaXRpb24kMShlLCBjaGFydCk7XG59XG5mdW5jdGlvbiBldmFsdWF0ZUFsbFZpc2libGVJdGVtcyhjaGFydCwgaGFuZGxlcikge1xuICBjb25zdCBtZXRhc2V0cyA9IGNoYXJ0LmdldFNvcnRlZFZpc2libGVEYXRhc2V0TWV0YXMoKTtcbiAgbGV0IGluZGV4LCBkYXRhLCBlbGVtZW50O1xuICBmb3IgKGxldCBpID0gMCwgaWxlbiA9IG1ldGFzZXRzLmxlbmd0aDsgaSA8IGlsZW47ICsraSkge1xuICAgICh7aW5kZXgsIGRhdGF9ID0gbWV0YXNldHNbaV0pO1xuICAgIGZvciAobGV0IGogPSAwLCBqbGVuID0gZGF0YS5sZW5ndGg7IGogPCBqbGVuOyArK2opIHtcbiAgICAgIGVsZW1lbnQgPSBkYXRhW2pdO1xuICAgICAgaWYgKCFlbGVtZW50LnNraXApIHtcbiAgICAgICAgaGFuZGxlcihlbGVtZW50LCBpbmRleCwgaik7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5mdW5jdGlvbiBiaW5hcnlTZWFyY2gobWV0YXNldCwgYXhpcywgdmFsdWUsIGludGVyc2VjdCkge1xuICBjb25zdCB7Y29udHJvbGxlciwgZGF0YSwgX3NvcnRlZH0gPSBtZXRhc2V0O1xuICBjb25zdCBpU2NhbGUgPSBjb250cm9sbGVyLl9jYWNoZWRNZXRhLmlTY2FsZTtcbiAgaWYgKGlTY2FsZSAmJiBheGlzID09PSBpU2NhbGUuYXhpcyAmJiBheGlzICE9PSAncicgJiYgX3NvcnRlZCAmJiBkYXRhLmxlbmd0aCkge1xuICAgIGNvbnN0IGxvb2t1cE1ldGhvZCA9IGlTY2FsZS5fcmV2ZXJzZVBpeGVscyA/IF9ybG9va3VwQnlLZXkgOiBfbG9va3VwQnlLZXk7XG4gICAgaWYgKCFpbnRlcnNlY3QpIHtcbiAgICAgIHJldHVybiBsb29rdXBNZXRob2QoZGF0YSwgYXhpcywgdmFsdWUpO1xuICAgIH0gZWxzZSBpZiAoY29udHJvbGxlci5fc2hhcmVkT3B0aW9ucykge1xuICAgICAgY29uc3QgZWwgPSBkYXRhWzBdO1xuICAgICAgY29uc3QgcmFuZ2UgPSB0eXBlb2YgZWwuZ2V0UmFuZ2UgPT09ICdmdW5jdGlvbicgJiYgZWwuZ2V0UmFuZ2UoYXhpcyk7XG4gICAgICBpZiAocmFuZ2UpIHtcbiAgICAgICAgY29uc3Qgc3RhcnQgPSBsb29rdXBNZXRob2QoZGF0YSwgYXhpcywgdmFsdWUgLSByYW5nZSk7XG4gICAgICAgIGNvbnN0IGVuZCA9IGxvb2t1cE1ldGhvZChkYXRhLCBheGlzLCB2YWx1ZSArIHJhbmdlKTtcbiAgICAgICAgcmV0dXJuIHtsbzogc3RhcnQubG8sIGhpOiBlbmQuaGl9O1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4ge2xvOiAwLCBoaTogZGF0YS5sZW5ndGggLSAxfTtcbn1cbmZ1bmN0aW9uIG9wdGltaXplZEV2YWx1YXRlSXRlbXMoY2hhcnQsIGF4aXMsIHBvc2l0aW9uLCBoYW5kbGVyLCBpbnRlcnNlY3QpIHtcbiAgY29uc3QgbWV0YXNldHMgPSBjaGFydC5nZXRTb3J0ZWRWaXNpYmxlRGF0YXNldE1ldGFzKCk7XG4gIGNvbnN0IHZhbHVlID0gcG9zaXRpb25bYXhpc107XG4gIGZvciAobGV0IGkgPSAwLCBpbGVuID0gbWV0YXNldHMubGVuZ3RoOyBpIDwgaWxlbjsgKytpKSB7XG4gICAgY29uc3Qge2luZGV4LCBkYXRhfSA9IG1ldGFzZXRzW2ldO1xuICAgIGNvbnN0IHtsbywgaGl9ID0gYmluYXJ5U2VhcmNoKG1ldGFzZXRzW2ldLCBheGlzLCB2YWx1ZSwgaW50ZXJzZWN0KTtcbiAgICBmb3IgKGxldCBqID0gbG87IGogPD0gaGk7ICsraikge1xuICAgICAgY29uc3QgZWxlbWVudCA9IGRhdGFbal07XG4gICAgICBpZiAoIWVsZW1lbnQuc2tpcCkge1xuICAgICAgICBoYW5kbGVyKGVsZW1lbnQsIGluZGV4LCBqKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cbmZ1bmN0aW9uIGdldERpc3RhbmNlTWV0cmljRm9yQXhpcyhheGlzKSB7XG4gIGNvbnN0IHVzZVggPSBheGlzLmluZGV4T2YoJ3gnKSAhPT0gLTE7XG4gIGNvbnN0IHVzZVkgPSBheGlzLmluZGV4T2YoJ3knKSAhPT0gLTE7XG4gIHJldHVybiBmdW5jdGlvbihwdDEsIHB0Mikge1xuICAgIGNvbnN0IGRlbHRhWCA9IHVzZVggPyBNYXRoLmFicyhwdDEueCAtIHB0Mi54KSA6IDA7XG4gICAgY29uc3QgZGVsdGFZID0gdXNlWSA/IE1hdGguYWJzKHB0MS55IC0gcHQyLnkpIDogMDtcbiAgICByZXR1cm4gTWF0aC5zcXJ0KE1hdGgucG93KGRlbHRhWCwgMikgKyBNYXRoLnBvdyhkZWx0YVksIDIpKTtcbiAgfTtcbn1cbmZ1bmN0aW9uIGdldEludGVyc2VjdEl0ZW1zKGNoYXJ0LCBwb3NpdGlvbiwgYXhpcywgdXNlRmluYWxQb3NpdGlvbikge1xuICBjb25zdCBpdGVtcyA9IFtdO1xuICBpZiAoIV9pc1BvaW50SW5BcmVhKHBvc2l0aW9uLCBjaGFydC5jaGFydEFyZWEsIGNoYXJ0Ll9taW5QYWRkaW5nKSkge1xuICAgIHJldHVybiBpdGVtcztcbiAgfVxuICBjb25zdCBldmFsdWF0aW9uRnVuYyA9IGZ1bmN0aW9uKGVsZW1lbnQsIGRhdGFzZXRJbmRleCwgaW5kZXgpIHtcbiAgICBpZiAoZWxlbWVudC5pblJhbmdlKHBvc2l0aW9uLngsIHBvc2l0aW9uLnksIHVzZUZpbmFsUG9zaXRpb24pKSB7XG4gICAgICBpdGVtcy5wdXNoKHtlbGVtZW50LCBkYXRhc2V0SW5kZXgsIGluZGV4fSk7XG4gICAgfVxuICB9O1xuICBvcHRpbWl6ZWRFdmFsdWF0ZUl0ZW1zKGNoYXJ0LCBheGlzLCBwb3NpdGlvbiwgZXZhbHVhdGlvbkZ1bmMsIHRydWUpO1xuICByZXR1cm4gaXRlbXM7XG59XG5mdW5jdGlvbiBnZXROZWFyZXN0UmFkaWFsSXRlbXMoY2hhcnQsIHBvc2l0aW9uLCBheGlzLCB1c2VGaW5hbFBvc2l0aW9uKSB7XG4gIGxldCBpdGVtcyA9IFtdO1xuICBmdW5jdGlvbiBldmFsdWF0aW9uRnVuYyhlbGVtZW50LCBkYXRhc2V0SW5kZXgsIGluZGV4KSB7XG4gICAgY29uc3Qge3N0YXJ0QW5nbGUsIGVuZEFuZ2xlfSA9IGVsZW1lbnQuZ2V0UHJvcHMoWydzdGFydEFuZ2xlJywgJ2VuZEFuZ2xlJ10sIHVzZUZpbmFsUG9zaXRpb24pO1xuICAgIGNvbnN0IHthbmdsZX0gPSBnZXRBbmdsZUZyb21Qb2ludChlbGVtZW50LCB7eDogcG9zaXRpb24ueCwgeTogcG9zaXRpb24ueX0pO1xuICAgIGlmIChfYW5nbGVCZXR3ZWVuKGFuZ2xlLCBzdGFydEFuZ2xlLCBlbmRBbmdsZSkpIHtcbiAgICAgIGl0ZW1zLnB1c2goe2VsZW1lbnQsIGRhdGFzZXRJbmRleCwgaW5kZXh9KTtcbiAgICB9XG4gIH1cbiAgb3B0aW1pemVkRXZhbHVhdGVJdGVtcyhjaGFydCwgYXhpcywgcG9zaXRpb24sIGV2YWx1YXRpb25GdW5jKTtcbiAgcmV0dXJuIGl0ZW1zO1xufVxuZnVuY3Rpb24gZ2V0TmVhcmVzdENhcnRlc2lhbkl0ZW1zKGNoYXJ0LCBwb3NpdGlvbiwgYXhpcywgaW50ZXJzZWN0LCB1c2VGaW5hbFBvc2l0aW9uKSB7XG4gIGxldCBpdGVtcyA9IFtdO1xuICBjb25zdCBkaXN0YW5jZU1ldHJpYyA9IGdldERpc3RhbmNlTWV0cmljRm9yQXhpcyhheGlzKTtcbiAgbGV0IG1pbkRpc3RhbmNlID0gTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZO1xuICBmdW5jdGlvbiBldmFsdWF0aW9uRnVuYyhlbGVtZW50LCBkYXRhc2V0SW5kZXgsIGluZGV4KSB7XG4gICAgY29uc3QgaW5SYW5nZSA9IGVsZW1lbnQuaW5SYW5nZShwb3NpdGlvbi54LCBwb3NpdGlvbi55LCB1c2VGaW5hbFBvc2l0aW9uKTtcbiAgICBpZiAoaW50ZXJzZWN0ICYmICFpblJhbmdlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IGNlbnRlciA9IGVsZW1lbnQuZ2V0Q2VudGVyUG9pbnQodXNlRmluYWxQb3NpdGlvbik7XG4gICAgY29uc3QgcG9pbnRJbkFyZWEgPSBfaXNQb2ludEluQXJlYShjZW50ZXIsIGNoYXJ0LmNoYXJ0QXJlYSwgY2hhcnQuX21pblBhZGRpbmcpO1xuICAgIGlmICghcG9pbnRJbkFyZWEgJiYgIWluUmFuZ2UpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgZGlzdGFuY2UgPSBkaXN0YW5jZU1ldHJpYyhwb3NpdGlvbiwgY2VudGVyKTtcbiAgICBpZiAoZGlzdGFuY2UgPCBtaW5EaXN0YW5jZSkge1xuICAgICAgaXRlbXMgPSBbe2VsZW1lbnQsIGRhdGFzZXRJbmRleCwgaW5kZXh9XTtcbiAgICAgIG1pbkRpc3RhbmNlID0gZGlzdGFuY2U7XG4gICAgfSBlbHNlIGlmIChkaXN0YW5jZSA9PT0gbWluRGlzdGFuY2UpIHtcbiAgICAgIGl0ZW1zLnB1c2goe2VsZW1lbnQsIGRhdGFzZXRJbmRleCwgaW5kZXh9KTtcbiAgICB9XG4gIH1cbiAgb3B0aW1pemVkRXZhbHVhdGVJdGVtcyhjaGFydCwgYXhpcywgcG9zaXRpb24sIGV2YWx1YXRpb25GdW5jKTtcbiAgcmV0dXJuIGl0ZW1zO1xufVxuZnVuY3Rpb24gZ2V0TmVhcmVzdEl0ZW1zKGNoYXJ0LCBwb3NpdGlvbiwgYXhpcywgaW50ZXJzZWN0LCB1c2VGaW5hbFBvc2l0aW9uKSB7XG4gIGlmICghX2lzUG9pbnRJbkFyZWEocG9zaXRpb24sIGNoYXJ0LmNoYXJ0QXJlYSwgY2hhcnQuX21pblBhZGRpbmcpKSB7XG4gICAgcmV0dXJuIFtdO1xuICB9XG4gIHJldHVybiBheGlzID09PSAncicgJiYgIWludGVyc2VjdFxuICAgID8gZ2V0TmVhcmVzdFJhZGlhbEl0ZW1zKGNoYXJ0LCBwb3NpdGlvbiwgYXhpcywgdXNlRmluYWxQb3NpdGlvbilcbiAgICA6IGdldE5lYXJlc3RDYXJ0ZXNpYW5JdGVtcyhjaGFydCwgcG9zaXRpb24sIGF4aXMsIGludGVyc2VjdCwgdXNlRmluYWxQb3NpdGlvbik7XG59XG5mdW5jdGlvbiBnZXRBeGlzSXRlbXMoY2hhcnQsIGUsIG9wdGlvbnMsIHVzZUZpbmFsUG9zaXRpb24pIHtcbiAgY29uc3QgcG9zaXRpb24gPSBnZXRSZWxhdGl2ZVBvc2l0aW9uKGUsIGNoYXJ0KTtcbiAgY29uc3QgaXRlbXMgPSBbXTtcbiAgY29uc3QgYXhpcyA9IG9wdGlvbnMuYXhpcztcbiAgY29uc3QgcmFuZ2VNZXRob2QgPSBheGlzID09PSAneCcgPyAnaW5YUmFuZ2UnIDogJ2luWVJhbmdlJztcbiAgbGV0IGludGVyc2VjdHNJdGVtID0gZmFsc2U7XG4gIGV2YWx1YXRlQWxsVmlzaWJsZUl0ZW1zKGNoYXJ0LCAoZWxlbWVudCwgZGF0YXNldEluZGV4LCBpbmRleCkgPT4ge1xuICAgIGlmIChlbGVtZW50W3JhbmdlTWV0aG9kXShwb3NpdGlvbltheGlzXSwgdXNlRmluYWxQb3NpdGlvbikpIHtcbiAgICAgIGl0ZW1zLnB1c2goe2VsZW1lbnQsIGRhdGFzZXRJbmRleCwgaW5kZXh9KTtcbiAgICB9XG4gICAgaWYgKGVsZW1lbnQuaW5SYW5nZShwb3NpdGlvbi54LCBwb3NpdGlvbi55LCB1c2VGaW5hbFBvc2l0aW9uKSkge1xuICAgICAgaW50ZXJzZWN0c0l0ZW0gPSB0cnVlO1xuICAgIH1cbiAgfSk7XG4gIGlmIChvcHRpb25zLmludGVyc2VjdCAmJiAhaW50ZXJzZWN0c0l0ZW0pIHtcbiAgICByZXR1cm4gW107XG4gIH1cbiAgcmV0dXJuIGl0ZW1zO1xufVxudmFyIEludGVyYWN0aW9uID0ge1xuICBtb2Rlczoge1xuICAgIGluZGV4KGNoYXJ0LCBlLCBvcHRpb25zLCB1c2VGaW5hbFBvc2l0aW9uKSB7XG4gICAgICBjb25zdCBwb3NpdGlvbiA9IGdldFJlbGF0aXZlUG9zaXRpb24oZSwgY2hhcnQpO1xuICAgICAgY29uc3QgYXhpcyA9IG9wdGlvbnMuYXhpcyB8fCAneCc7XG4gICAgICBjb25zdCBpdGVtcyA9IG9wdGlvbnMuaW50ZXJzZWN0XG4gICAgICAgID8gZ2V0SW50ZXJzZWN0SXRlbXMoY2hhcnQsIHBvc2l0aW9uLCBheGlzLCB1c2VGaW5hbFBvc2l0aW9uKVxuICAgICAgICA6IGdldE5lYXJlc3RJdGVtcyhjaGFydCwgcG9zaXRpb24sIGF4aXMsIGZhbHNlLCB1c2VGaW5hbFBvc2l0aW9uKTtcbiAgICAgIGNvbnN0IGVsZW1lbnRzID0gW107XG4gICAgICBpZiAoIWl0ZW1zLmxlbmd0aCkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgICBjaGFydC5nZXRTb3J0ZWRWaXNpYmxlRGF0YXNldE1ldGFzKCkuZm9yRWFjaCgobWV0YSkgPT4ge1xuICAgICAgICBjb25zdCBpbmRleCA9IGl0ZW1zWzBdLmluZGV4O1xuICAgICAgICBjb25zdCBlbGVtZW50ID0gbWV0YS5kYXRhW2luZGV4XTtcbiAgICAgICAgaWYgKGVsZW1lbnQgJiYgIWVsZW1lbnQuc2tpcCkge1xuICAgICAgICAgIGVsZW1lbnRzLnB1c2goe2VsZW1lbnQsIGRhdGFzZXRJbmRleDogbWV0YS5pbmRleCwgaW5kZXh9KTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gZWxlbWVudHM7XG4gICAgfSxcbiAgICBkYXRhc2V0KGNoYXJ0LCBlLCBvcHRpb25zLCB1c2VGaW5hbFBvc2l0aW9uKSB7XG4gICAgICBjb25zdCBwb3NpdGlvbiA9IGdldFJlbGF0aXZlUG9zaXRpb24oZSwgY2hhcnQpO1xuICAgICAgY29uc3QgYXhpcyA9IG9wdGlvbnMuYXhpcyB8fCAneHknO1xuICAgICAgbGV0IGl0ZW1zID0gb3B0aW9ucy5pbnRlcnNlY3RcbiAgICAgICAgPyBnZXRJbnRlcnNlY3RJdGVtcyhjaGFydCwgcG9zaXRpb24sIGF4aXMsIHVzZUZpbmFsUG9zaXRpb24pIDpcbiAgICAgICAgZ2V0TmVhcmVzdEl0ZW1zKGNoYXJ0LCBwb3NpdGlvbiwgYXhpcywgZmFsc2UsIHVzZUZpbmFsUG9zaXRpb24pO1xuICAgICAgaWYgKGl0ZW1zLmxlbmd0aCA+IDApIHtcbiAgICAgICAgY29uc3QgZGF0YXNldEluZGV4ID0gaXRlbXNbMF0uZGF0YXNldEluZGV4O1xuICAgICAgICBjb25zdCBkYXRhID0gY2hhcnQuZ2V0RGF0YXNldE1ldGEoZGF0YXNldEluZGV4KS5kYXRhO1xuICAgICAgICBpdGVtcyA9IFtdO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGRhdGEubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICBpdGVtcy5wdXNoKHtlbGVtZW50OiBkYXRhW2ldLCBkYXRhc2V0SW5kZXgsIGluZGV4OiBpfSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBpdGVtcztcbiAgICB9LFxuICAgIHBvaW50KGNoYXJ0LCBlLCBvcHRpb25zLCB1c2VGaW5hbFBvc2l0aW9uKSB7XG4gICAgICBjb25zdCBwb3NpdGlvbiA9IGdldFJlbGF0aXZlUG9zaXRpb24oZSwgY2hhcnQpO1xuICAgICAgY29uc3QgYXhpcyA9IG9wdGlvbnMuYXhpcyB8fCAneHknO1xuICAgICAgcmV0dXJuIGdldEludGVyc2VjdEl0ZW1zKGNoYXJ0LCBwb3NpdGlvbiwgYXhpcywgdXNlRmluYWxQb3NpdGlvbik7XG4gICAgfSxcbiAgICBuZWFyZXN0KGNoYXJ0LCBlLCBvcHRpb25zLCB1c2VGaW5hbFBvc2l0aW9uKSB7XG4gICAgICBjb25zdCBwb3NpdGlvbiA9IGdldFJlbGF0aXZlUG9zaXRpb24oZSwgY2hhcnQpO1xuICAgICAgY29uc3QgYXhpcyA9IG9wdGlvbnMuYXhpcyB8fCAneHknO1xuICAgICAgcmV0dXJuIGdldE5lYXJlc3RJdGVtcyhjaGFydCwgcG9zaXRpb24sIGF4aXMsIG9wdGlvbnMuaW50ZXJzZWN0LCB1c2VGaW5hbFBvc2l0aW9uKTtcbiAgICB9LFxuICAgIHgoY2hhcnQsIGUsIG9wdGlvbnMsIHVzZUZpbmFsUG9zaXRpb24pIHtcbiAgICAgIHJldHVybiBnZXRBeGlzSXRlbXMoY2hhcnQsIGUsIHtheGlzOiAneCcsIGludGVyc2VjdDogb3B0aW9ucy5pbnRlcnNlY3R9LCB1c2VGaW5hbFBvc2l0aW9uKTtcbiAgICB9LFxuICAgIHkoY2hhcnQsIGUsIG9wdGlvbnMsIHVzZUZpbmFsUG9zaXRpb24pIHtcbiAgICAgIHJldHVybiBnZXRBeGlzSXRlbXMoY2hhcnQsIGUsIHtheGlzOiAneScsIGludGVyc2VjdDogb3B0aW9ucy5pbnRlcnNlY3R9LCB1c2VGaW5hbFBvc2l0aW9uKTtcbiAgICB9XG4gIH1cbn07XG5cbmNvbnN0IFNUQVRJQ19QT1NJVElPTlMgPSBbJ2xlZnQnLCAndG9wJywgJ3JpZ2h0JywgJ2JvdHRvbSddO1xuZnVuY3Rpb24gZmlsdGVyQnlQb3NpdGlvbihhcnJheSwgcG9zaXRpb24pIHtcbiAgcmV0dXJuIGFycmF5LmZpbHRlcih2ID0+IHYucG9zID09PSBwb3NpdGlvbik7XG59XG5mdW5jdGlvbiBmaWx0ZXJEeW5hbWljUG9zaXRpb25CeUF4aXMoYXJyYXksIGF4aXMpIHtcbiAgcmV0dXJuIGFycmF5LmZpbHRlcih2ID0+IFNUQVRJQ19QT1NJVElPTlMuaW5kZXhPZih2LnBvcykgPT09IC0xICYmIHYuYm94LmF4aXMgPT09IGF4aXMpO1xufVxuZnVuY3Rpb24gc29ydEJ5V2VpZ2h0KGFycmF5LCByZXZlcnNlKSB7XG4gIHJldHVybiBhcnJheS5zb3J0KChhLCBiKSA9PiB7XG4gICAgY29uc3QgdjAgPSByZXZlcnNlID8gYiA6IGE7XG4gICAgY29uc3QgdjEgPSByZXZlcnNlID8gYSA6IGI7XG4gICAgcmV0dXJuIHYwLndlaWdodCA9PT0gdjEud2VpZ2h0ID9cbiAgICAgIHYwLmluZGV4IC0gdjEuaW5kZXggOlxuICAgICAgdjAud2VpZ2h0IC0gdjEud2VpZ2h0O1xuICB9KTtcbn1cbmZ1bmN0aW9uIHdyYXBCb3hlcyhib3hlcykge1xuICBjb25zdCBsYXlvdXRCb3hlcyA9IFtdO1xuICBsZXQgaSwgaWxlbiwgYm94LCBwb3MsIHN0YWNrLCBzdGFja1dlaWdodDtcbiAgZm9yIChpID0gMCwgaWxlbiA9IChib3hlcyB8fCBbXSkubGVuZ3RoOyBpIDwgaWxlbjsgKytpKSB7XG4gICAgYm94ID0gYm94ZXNbaV07XG4gICAgKHtwb3NpdGlvbjogcG9zLCBvcHRpb25zOiB7c3RhY2ssIHN0YWNrV2VpZ2h0ID0gMX19ID0gYm94KTtcbiAgICBsYXlvdXRCb3hlcy5wdXNoKHtcbiAgICAgIGluZGV4OiBpLFxuICAgICAgYm94LFxuICAgICAgcG9zLFxuICAgICAgaG9yaXpvbnRhbDogYm94LmlzSG9yaXpvbnRhbCgpLFxuICAgICAgd2VpZ2h0OiBib3gud2VpZ2h0LFxuICAgICAgc3RhY2s6IHN0YWNrICYmIChwb3MgKyBzdGFjayksXG4gICAgICBzdGFja1dlaWdodFxuICAgIH0pO1xuICB9XG4gIHJldHVybiBsYXlvdXRCb3hlcztcbn1cbmZ1bmN0aW9uIGJ1aWxkU3RhY2tzKGxheW91dHMpIHtcbiAgY29uc3Qgc3RhY2tzID0ge307XG4gIGZvciAoY29uc3Qgd3JhcCBvZiBsYXlvdXRzKSB7XG4gICAgY29uc3Qge3N0YWNrLCBwb3MsIHN0YWNrV2VpZ2h0fSA9IHdyYXA7XG4gICAgaWYgKCFzdGFjayB8fCAhU1RBVElDX1BPU0lUSU9OUy5pbmNsdWRlcyhwb3MpKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgY29uc3QgX3N0YWNrID0gc3RhY2tzW3N0YWNrXSB8fCAoc3RhY2tzW3N0YWNrXSA9IHtjb3VudDogMCwgcGxhY2VkOiAwLCB3ZWlnaHQ6IDAsIHNpemU6IDB9KTtcbiAgICBfc3RhY2suY291bnQrKztcbiAgICBfc3RhY2sud2VpZ2h0ICs9IHN0YWNrV2VpZ2h0O1xuICB9XG4gIHJldHVybiBzdGFja3M7XG59XG5mdW5jdGlvbiBzZXRMYXlvdXREaW1zKGxheW91dHMsIHBhcmFtcykge1xuICBjb25zdCBzdGFja3MgPSBidWlsZFN0YWNrcyhsYXlvdXRzKTtcbiAgY29uc3Qge3ZCb3hNYXhXaWR0aCwgaEJveE1heEhlaWdodH0gPSBwYXJhbXM7XG4gIGxldCBpLCBpbGVuLCBsYXlvdXQ7XG4gIGZvciAoaSA9IDAsIGlsZW4gPSBsYXlvdXRzLmxlbmd0aDsgaSA8IGlsZW47ICsraSkge1xuICAgIGxheW91dCA9IGxheW91dHNbaV07XG4gICAgY29uc3Qge2Z1bGxTaXplfSA9IGxheW91dC5ib3g7XG4gICAgY29uc3Qgc3RhY2sgPSBzdGFja3NbbGF5b3V0LnN0YWNrXTtcbiAgICBjb25zdCBmYWN0b3IgPSBzdGFjayAmJiBsYXlvdXQuc3RhY2tXZWlnaHQgLyBzdGFjay53ZWlnaHQ7XG4gICAgaWYgKGxheW91dC5ob3Jpem9udGFsKSB7XG4gICAgICBsYXlvdXQud2lkdGggPSBmYWN0b3IgPyBmYWN0b3IgKiB2Qm94TWF4V2lkdGggOiBmdWxsU2l6ZSAmJiBwYXJhbXMuYXZhaWxhYmxlV2lkdGg7XG4gICAgICBsYXlvdXQuaGVpZ2h0ID0gaEJveE1heEhlaWdodDtcbiAgICB9IGVsc2Uge1xuICAgICAgbGF5b3V0LndpZHRoID0gdkJveE1heFdpZHRoO1xuICAgICAgbGF5b3V0LmhlaWdodCA9IGZhY3RvciA/IGZhY3RvciAqIGhCb3hNYXhIZWlnaHQgOiBmdWxsU2l6ZSAmJiBwYXJhbXMuYXZhaWxhYmxlSGVpZ2h0O1xuICAgIH1cbiAgfVxuICByZXR1cm4gc3RhY2tzO1xufVxuZnVuY3Rpb24gYnVpbGRMYXlvdXRCb3hlcyhib3hlcykge1xuICBjb25zdCBsYXlvdXRCb3hlcyA9IHdyYXBCb3hlcyhib3hlcyk7XG4gIGNvbnN0IGZ1bGxTaXplID0gc29ydEJ5V2VpZ2h0KGxheW91dEJveGVzLmZpbHRlcih3cmFwID0+IHdyYXAuYm94LmZ1bGxTaXplKSwgdHJ1ZSk7XG4gIGNvbnN0IGxlZnQgPSBzb3J0QnlXZWlnaHQoZmlsdGVyQnlQb3NpdGlvbihsYXlvdXRCb3hlcywgJ2xlZnQnKSwgdHJ1ZSk7XG4gIGNvbnN0IHJpZ2h0ID0gc29ydEJ5V2VpZ2h0KGZpbHRlckJ5UG9zaXRpb24obGF5b3V0Qm94ZXMsICdyaWdodCcpKTtcbiAgY29uc3QgdG9wID0gc29ydEJ5V2VpZ2h0KGZpbHRlckJ5UG9zaXRpb24obGF5b3V0Qm94ZXMsICd0b3AnKSwgdHJ1ZSk7XG4gIGNvbnN0IGJvdHRvbSA9IHNvcnRCeVdlaWdodChmaWx0ZXJCeVBvc2l0aW9uKGxheW91dEJveGVzLCAnYm90dG9tJykpO1xuICBjb25zdCBjZW50ZXJIb3Jpem9udGFsID0gZmlsdGVyRHluYW1pY1Bvc2l0aW9uQnlBeGlzKGxheW91dEJveGVzLCAneCcpO1xuICBjb25zdCBjZW50ZXJWZXJ0aWNhbCA9IGZpbHRlckR5bmFtaWNQb3NpdGlvbkJ5QXhpcyhsYXlvdXRCb3hlcywgJ3knKTtcbiAgcmV0dXJuIHtcbiAgICBmdWxsU2l6ZSxcbiAgICBsZWZ0QW5kVG9wOiBsZWZ0LmNvbmNhdCh0b3ApLFxuICAgIHJpZ2h0QW5kQm90dG9tOiByaWdodC5jb25jYXQoY2VudGVyVmVydGljYWwpLmNvbmNhdChib3R0b20pLmNvbmNhdChjZW50ZXJIb3Jpem9udGFsKSxcbiAgICBjaGFydEFyZWE6IGZpbHRlckJ5UG9zaXRpb24obGF5b3V0Qm94ZXMsICdjaGFydEFyZWEnKSxcbiAgICB2ZXJ0aWNhbDogbGVmdC5jb25jYXQocmlnaHQpLmNvbmNhdChjZW50ZXJWZXJ0aWNhbCksXG4gICAgaG9yaXpvbnRhbDogdG9wLmNvbmNhdChib3R0b20pLmNvbmNhdChjZW50ZXJIb3Jpem9udGFsKVxuICB9O1xufVxuZnVuY3Rpb24gZ2V0Q29tYmluZWRNYXgobWF4UGFkZGluZywgY2hhcnRBcmVhLCBhLCBiKSB7XG4gIHJldHVybiBNYXRoLm1heChtYXhQYWRkaW5nW2FdLCBjaGFydEFyZWFbYV0pICsgTWF0aC5tYXgobWF4UGFkZGluZ1tiXSwgY2hhcnRBcmVhW2JdKTtcbn1cbmZ1bmN0aW9uIHVwZGF0ZU1heFBhZGRpbmcobWF4UGFkZGluZywgYm94UGFkZGluZykge1xuICBtYXhQYWRkaW5nLnRvcCA9IE1hdGgubWF4KG1heFBhZGRpbmcudG9wLCBib3hQYWRkaW5nLnRvcCk7XG4gIG1heFBhZGRpbmcubGVmdCA9IE1hdGgubWF4KG1heFBhZGRpbmcubGVmdCwgYm94UGFkZGluZy5sZWZ0KTtcbiAgbWF4UGFkZGluZy5ib3R0b20gPSBNYXRoLm1heChtYXhQYWRkaW5nLmJvdHRvbSwgYm94UGFkZGluZy5ib3R0b20pO1xuICBtYXhQYWRkaW5nLnJpZ2h0ID0gTWF0aC5tYXgobWF4UGFkZGluZy5yaWdodCwgYm94UGFkZGluZy5yaWdodCk7XG59XG5mdW5jdGlvbiB1cGRhdGVEaW1zKGNoYXJ0QXJlYSwgcGFyYW1zLCBsYXlvdXQsIHN0YWNrcykge1xuICBjb25zdCB7cG9zLCBib3h9ID0gbGF5b3V0O1xuICBjb25zdCBtYXhQYWRkaW5nID0gY2hhcnRBcmVhLm1heFBhZGRpbmc7XG4gIGlmICghaXNPYmplY3QocG9zKSkge1xuICAgIGlmIChsYXlvdXQuc2l6ZSkge1xuICAgICAgY2hhcnRBcmVhW3Bvc10gLT0gbGF5b3V0LnNpemU7XG4gICAgfVxuICAgIGNvbnN0IHN0YWNrID0gc3RhY2tzW2xheW91dC5zdGFja10gfHwge3NpemU6IDAsIGNvdW50OiAxfTtcbiAgICBzdGFjay5zaXplID0gTWF0aC5tYXgoc3RhY2suc2l6ZSwgbGF5b3V0Lmhvcml6b250YWwgPyBib3guaGVpZ2h0IDogYm94LndpZHRoKTtcbiAgICBsYXlvdXQuc2l6ZSA9IHN0YWNrLnNpemUgLyBzdGFjay5jb3VudDtcbiAgICBjaGFydEFyZWFbcG9zXSArPSBsYXlvdXQuc2l6ZTtcbiAgfVxuICBpZiAoYm94LmdldFBhZGRpbmcpIHtcbiAgICB1cGRhdGVNYXhQYWRkaW5nKG1heFBhZGRpbmcsIGJveC5nZXRQYWRkaW5nKCkpO1xuICB9XG4gIGNvbnN0IG5ld1dpZHRoID0gTWF0aC5tYXgoMCwgcGFyYW1zLm91dGVyV2lkdGggLSBnZXRDb21iaW5lZE1heChtYXhQYWRkaW5nLCBjaGFydEFyZWEsICdsZWZ0JywgJ3JpZ2h0JykpO1xuICBjb25zdCBuZXdIZWlnaHQgPSBNYXRoLm1heCgwLCBwYXJhbXMub3V0ZXJIZWlnaHQgLSBnZXRDb21iaW5lZE1heChtYXhQYWRkaW5nLCBjaGFydEFyZWEsICd0b3AnLCAnYm90dG9tJykpO1xuICBjb25zdCB3aWR0aENoYW5nZWQgPSBuZXdXaWR0aCAhPT0gY2hhcnRBcmVhLnc7XG4gIGNvbnN0IGhlaWdodENoYW5nZWQgPSBuZXdIZWlnaHQgIT09IGNoYXJ0QXJlYS5oO1xuICBjaGFydEFyZWEudyA9IG5ld1dpZHRoO1xuICBjaGFydEFyZWEuaCA9IG5ld0hlaWdodDtcbiAgcmV0dXJuIGxheW91dC5ob3Jpem9udGFsXG4gICAgPyB7c2FtZTogd2lkdGhDaGFuZ2VkLCBvdGhlcjogaGVpZ2h0Q2hhbmdlZH1cbiAgICA6IHtzYW1lOiBoZWlnaHRDaGFuZ2VkLCBvdGhlcjogd2lkdGhDaGFuZ2VkfTtcbn1cbmZ1bmN0aW9uIGhhbmRsZU1heFBhZGRpbmcoY2hhcnRBcmVhKSB7XG4gIGNvbnN0IG1heFBhZGRpbmcgPSBjaGFydEFyZWEubWF4UGFkZGluZztcbiAgZnVuY3Rpb24gdXBkYXRlUG9zKHBvcykge1xuICAgIGNvbnN0IGNoYW5nZSA9IE1hdGgubWF4KG1heFBhZGRpbmdbcG9zXSAtIGNoYXJ0QXJlYVtwb3NdLCAwKTtcbiAgICBjaGFydEFyZWFbcG9zXSArPSBjaGFuZ2U7XG4gICAgcmV0dXJuIGNoYW5nZTtcbiAgfVxuICBjaGFydEFyZWEueSArPSB1cGRhdGVQb3MoJ3RvcCcpO1xuICBjaGFydEFyZWEueCArPSB1cGRhdGVQb3MoJ2xlZnQnKTtcbiAgdXBkYXRlUG9zKCdyaWdodCcpO1xuICB1cGRhdGVQb3MoJ2JvdHRvbScpO1xufVxuZnVuY3Rpb24gZ2V0TWFyZ2lucyhob3Jpem9udGFsLCBjaGFydEFyZWEpIHtcbiAgY29uc3QgbWF4UGFkZGluZyA9IGNoYXJ0QXJlYS5tYXhQYWRkaW5nO1xuICBmdW5jdGlvbiBtYXJnaW5Gb3JQb3NpdGlvbnMocG9zaXRpb25zKSB7XG4gICAgY29uc3QgbWFyZ2luID0ge2xlZnQ6IDAsIHRvcDogMCwgcmlnaHQ6IDAsIGJvdHRvbTogMH07XG4gICAgcG9zaXRpb25zLmZvckVhY2goKHBvcykgPT4ge1xuICAgICAgbWFyZ2luW3Bvc10gPSBNYXRoLm1heChjaGFydEFyZWFbcG9zXSwgbWF4UGFkZGluZ1twb3NdKTtcbiAgICB9KTtcbiAgICByZXR1cm4gbWFyZ2luO1xuICB9XG4gIHJldHVybiBob3Jpem9udGFsXG4gICAgPyBtYXJnaW5Gb3JQb3NpdGlvbnMoWydsZWZ0JywgJ3JpZ2h0J10pXG4gICAgOiBtYXJnaW5Gb3JQb3NpdGlvbnMoWyd0b3AnLCAnYm90dG9tJ10pO1xufVxuZnVuY3Rpb24gZml0Qm94ZXMoYm94ZXMsIGNoYXJ0QXJlYSwgcGFyYW1zLCBzdGFja3MpIHtcbiAgY29uc3QgcmVmaXRCb3hlcyA9IFtdO1xuICBsZXQgaSwgaWxlbiwgbGF5b3V0LCBib3gsIHJlZml0LCBjaGFuZ2VkO1xuICBmb3IgKGkgPSAwLCBpbGVuID0gYm94ZXMubGVuZ3RoLCByZWZpdCA9IDA7IGkgPCBpbGVuOyArK2kpIHtcbiAgICBsYXlvdXQgPSBib3hlc1tpXTtcbiAgICBib3ggPSBsYXlvdXQuYm94O1xuICAgIGJveC51cGRhdGUoXG4gICAgICBsYXlvdXQud2lkdGggfHwgY2hhcnRBcmVhLncsXG4gICAgICBsYXlvdXQuaGVpZ2h0IHx8IGNoYXJ0QXJlYS5oLFxuICAgICAgZ2V0TWFyZ2lucyhsYXlvdXQuaG9yaXpvbnRhbCwgY2hhcnRBcmVhKVxuICAgICk7XG4gICAgY29uc3Qge3NhbWUsIG90aGVyfSA9IHVwZGF0ZURpbXMoY2hhcnRBcmVhLCBwYXJhbXMsIGxheW91dCwgc3RhY2tzKTtcbiAgICByZWZpdCB8PSBzYW1lICYmIHJlZml0Qm94ZXMubGVuZ3RoO1xuICAgIGNoYW5nZWQgPSBjaGFuZ2VkIHx8IG90aGVyO1xuICAgIGlmICghYm94LmZ1bGxTaXplKSB7XG4gICAgICByZWZpdEJveGVzLnB1c2gobGF5b3V0KTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlZml0ICYmIGZpdEJveGVzKHJlZml0Qm94ZXMsIGNoYXJ0QXJlYSwgcGFyYW1zLCBzdGFja3MpIHx8IGNoYW5nZWQ7XG59XG5mdW5jdGlvbiBzZXRCb3hEaW1zKGJveCwgbGVmdCwgdG9wLCB3aWR0aCwgaGVpZ2h0KSB7XG4gIGJveC50b3AgPSB0b3A7XG4gIGJveC5sZWZ0ID0gbGVmdDtcbiAgYm94LnJpZ2h0ID0gbGVmdCArIHdpZHRoO1xuICBib3guYm90dG9tID0gdG9wICsgaGVpZ2h0O1xuICBib3gud2lkdGggPSB3aWR0aDtcbiAgYm94LmhlaWdodCA9IGhlaWdodDtcbn1cbmZ1bmN0aW9uIHBsYWNlQm94ZXMoYm94ZXMsIGNoYXJ0QXJlYSwgcGFyYW1zLCBzdGFja3MpIHtcbiAgY29uc3QgdXNlclBhZGRpbmcgPSBwYXJhbXMucGFkZGluZztcbiAgbGV0IHt4LCB5fSA9IGNoYXJ0QXJlYTtcbiAgZm9yIChjb25zdCBsYXlvdXQgb2YgYm94ZXMpIHtcbiAgICBjb25zdCBib3ggPSBsYXlvdXQuYm94O1xuICAgIGNvbnN0IHN0YWNrID0gc3RhY2tzW2xheW91dC5zdGFja10gfHwge2NvdW50OiAxLCBwbGFjZWQ6IDAsIHdlaWdodDogMX07XG4gICAgY29uc3Qgd2VpZ2h0ID0gKGxheW91dC5zdGFja1dlaWdodCAvIHN0YWNrLndlaWdodCkgfHwgMTtcbiAgICBpZiAobGF5b3V0Lmhvcml6b250YWwpIHtcbiAgICAgIGNvbnN0IHdpZHRoID0gY2hhcnRBcmVhLncgKiB3ZWlnaHQ7XG4gICAgICBjb25zdCBoZWlnaHQgPSBzdGFjay5zaXplIHx8IGJveC5oZWlnaHQ7XG4gICAgICBpZiAoZGVmaW5lZChzdGFjay5zdGFydCkpIHtcbiAgICAgICAgeSA9IHN0YWNrLnN0YXJ0O1xuICAgICAgfVxuICAgICAgaWYgKGJveC5mdWxsU2l6ZSkge1xuICAgICAgICBzZXRCb3hEaW1zKGJveCwgdXNlclBhZGRpbmcubGVmdCwgeSwgcGFyYW1zLm91dGVyV2lkdGggLSB1c2VyUGFkZGluZy5yaWdodCAtIHVzZXJQYWRkaW5nLmxlZnQsIGhlaWdodCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzZXRCb3hEaW1zKGJveCwgY2hhcnRBcmVhLmxlZnQgKyBzdGFjay5wbGFjZWQsIHksIHdpZHRoLCBoZWlnaHQpO1xuICAgICAgfVxuICAgICAgc3RhY2suc3RhcnQgPSB5O1xuICAgICAgc3RhY2sucGxhY2VkICs9IHdpZHRoO1xuICAgICAgeSA9IGJveC5ib3R0b207XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IGhlaWdodCA9IGNoYXJ0QXJlYS5oICogd2VpZ2h0O1xuICAgICAgY29uc3Qgd2lkdGggPSBzdGFjay5zaXplIHx8IGJveC53aWR0aDtcbiAgICAgIGlmIChkZWZpbmVkKHN0YWNrLnN0YXJ0KSkge1xuICAgICAgICB4ID0gc3RhY2suc3RhcnQ7XG4gICAgICB9XG4gICAgICBpZiAoYm94LmZ1bGxTaXplKSB7XG4gICAgICAgIHNldEJveERpbXMoYm94LCB4LCB1c2VyUGFkZGluZy50b3AsIHdpZHRoLCBwYXJhbXMub3V0ZXJIZWlnaHQgLSB1c2VyUGFkZGluZy5ib3R0b20gLSB1c2VyUGFkZGluZy50b3ApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc2V0Qm94RGltcyhib3gsIHgsIGNoYXJ0QXJlYS50b3AgKyBzdGFjay5wbGFjZWQsIHdpZHRoLCBoZWlnaHQpO1xuICAgICAgfVxuICAgICAgc3RhY2suc3RhcnQgPSB4O1xuICAgICAgc3RhY2sucGxhY2VkICs9IGhlaWdodDtcbiAgICAgIHggPSBib3gucmlnaHQ7XG4gICAgfVxuICB9XG4gIGNoYXJ0QXJlYS54ID0geDtcbiAgY2hhcnRBcmVhLnkgPSB5O1xufVxuZGVmYXVsdHMuc2V0KCdsYXlvdXQnLCB7XG4gIGF1dG9QYWRkaW5nOiB0cnVlLFxuICBwYWRkaW5nOiB7XG4gICAgdG9wOiAwLFxuICAgIHJpZ2h0OiAwLFxuICAgIGJvdHRvbTogMCxcbiAgICBsZWZ0OiAwXG4gIH1cbn0pO1xudmFyIGxheW91dHMgPSB7XG4gIGFkZEJveChjaGFydCwgaXRlbSkge1xuICAgIGlmICghY2hhcnQuYm94ZXMpIHtcbiAgICAgIGNoYXJ0LmJveGVzID0gW107XG4gICAgfVxuICAgIGl0ZW0uZnVsbFNpemUgPSBpdGVtLmZ1bGxTaXplIHx8IGZhbHNlO1xuICAgIGl0ZW0ucG9zaXRpb24gPSBpdGVtLnBvc2l0aW9uIHx8ICd0b3AnO1xuICAgIGl0ZW0ud2VpZ2h0ID0gaXRlbS53ZWlnaHQgfHwgMDtcbiAgICBpdGVtLl9sYXllcnMgPSBpdGVtLl9sYXllcnMgfHwgZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gW3tcbiAgICAgICAgejogMCxcbiAgICAgICAgZHJhdyhjaGFydEFyZWEpIHtcbiAgICAgICAgICBpdGVtLmRyYXcoY2hhcnRBcmVhKTtcbiAgICAgICAgfVxuICAgICAgfV07XG4gICAgfTtcbiAgICBjaGFydC5ib3hlcy5wdXNoKGl0ZW0pO1xuICB9LFxuICByZW1vdmVCb3goY2hhcnQsIGxheW91dEl0ZW0pIHtcbiAgICBjb25zdCBpbmRleCA9IGNoYXJ0LmJveGVzID8gY2hhcnQuYm94ZXMuaW5kZXhPZihsYXlvdXRJdGVtKSA6IC0xO1xuICAgIGlmIChpbmRleCAhPT0gLTEpIHtcbiAgICAgIGNoYXJ0LmJveGVzLnNwbGljZShpbmRleCwgMSk7XG4gICAgfVxuICB9LFxuICBjb25maWd1cmUoY2hhcnQsIGl0ZW0sIG9wdGlvbnMpIHtcbiAgICBpdGVtLmZ1bGxTaXplID0gb3B0aW9ucy5mdWxsU2l6ZTtcbiAgICBpdGVtLnBvc2l0aW9uID0gb3B0aW9ucy5wb3NpdGlvbjtcbiAgICBpdGVtLndlaWdodCA9IG9wdGlvbnMud2VpZ2h0O1xuICB9LFxuICB1cGRhdGUoY2hhcnQsIHdpZHRoLCBoZWlnaHQsIG1pblBhZGRpbmcpIHtcbiAgICBpZiAoIWNoYXJ0KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IHBhZGRpbmcgPSB0b1BhZGRpbmcoY2hhcnQub3B0aW9ucy5sYXlvdXQucGFkZGluZyk7XG4gICAgY29uc3QgYXZhaWxhYmxlV2lkdGggPSBNYXRoLm1heCh3aWR0aCAtIHBhZGRpbmcud2lkdGgsIDApO1xuICAgIGNvbnN0IGF2YWlsYWJsZUhlaWdodCA9IE1hdGgubWF4KGhlaWdodCAtIHBhZGRpbmcuaGVpZ2h0LCAwKTtcbiAgICBjb25zdCBib3hlcyA9IGJ1aWxkTGF5b3V0Qm94ZXMoY2hhcnQuYm94ZXMpO1xuICAgIGNvbnN0IHZlcnRpY2FsQm94ZXMgPSBib3hlcy52ZXJ0aWNhbDtcbiAgICBjb25zdCBob3Jpem9udGFsQm94ZXMgPSBib3hlcy5ob3Jpem9udGFsO1xuICAgIGVhY2goY2hhcnQuYm94ZXMsIGJveCA9PiB7XG4gICAgICBpZiAodHlwZW9mIGJveC5iZWZvcmVMYXlvdXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgYm94LmJlZm9yZUxheW91dCgpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIGNvbnN0IHZpc2libGVWZXJ0aWNhbEJveENvdW50ID0gdmVydGljYWxCb3hlcy5yZWR1Y2UoKHRvdGFsLCB3cmFwKSA9PlxuICAgICAgd3JhcC5ib3gub3B0aW9ucyAmJiB3cmFwLmJveC5vcHRpb25zLmRpc3BsYXkgPT09IGZhbHNlID8gdG90YWwgOiB0b3RhbCArIDEsIDApIHx8IDE7XG4gICAgY29uc3QgcGFyYW1zID0gT2JqZWN0LmZyZWV6ZSh7XG4gICAgICBvdXRlcldpZHRoOiB3aWR0aCxcbiAgICAgIG91dGVySGVpZ2h0OiBoZWlnaHQsXG4gICAgICBwYWRkaW5nLFxuICAgICAgYXZhaWxhYmxlV2lkdGgsXG4gICAgICBhdmFpbGFibGVIZWlnaHQsXG4gICAgICB2Qm94TWF4V2lkdGg6IGF2YWlsYWJsZVdpZHRoIC8gMiAvIHZpc2libGVWZXJ0aWNhbEJveENvdW50LFxuICAgICAgaEJveE1heEhlaWdodDogYXZhaWxhYmxlSGVpZ2h0IC8gMlxuICAgIH0pO1xuICAgIGNvbnN0IG1heFBhZGRpbmcgPSBPYmplY3QuYXNzaWduKHt9LCBwYWRkaW5nKTtcbiAgICB1cGRhdGVNYXhQYWRkaW5nKG1heFBhZGRpbmcsIHRvUGFkZGluZyhtaW5QYWRkaW5nKSk7XG4gICAgY29uc3QgY2hhcnRBcmVhID0gT2JqZWN0LmFzc2lnbih7XG4gICAgICBtYXhQYWRkaW5nLFxuICAgICAgdzogYXZhaWxhYmxlV2lkdGgsXG4gICAgICBoOiBhdmFpbGFibGVIZWlnaHQsXG4gICAgICB4OiBwYWRkaW5nLmxlZnQsXG4gICAgICB5OiBwYWRkaW5nLnRvcFxuICAgIH0sIHBhZGRpbmcpO1xuICAgIGNvbnN0IHN0YWNrcyA9IHNldExheW91dERpbXModmVydGljYWxCb3hlcy5jb25jYXQoaG9yaXpvbnRhbEJveGVzKSwgcGFyYW1zKTtcbiAgICBmaXRCb3hlcyhib3hlcy5mdWxsU2l6ZSwgY2hhcnRBcmVhLCBwYXJhbXMsIHN0YWNrcyk7XG4gICAgZml0Qm94ZXModmVydGljYWxCb3hlcywgY2hhcnRBcmVhLCBwYXJhbXMsIHN0YWNrcyk7XG4gICAgaWYgKGZpdEJveGVzKGhvcml6b250YWxCb3hlcywgY2hhcnRBcmVhLCBwYXJhbXMsIHN0YWNrcykpIHtcbiAgICAgIGZpdEJveGVzKHZlcnRpY2FsQm94ZXMsIGNoYXJ0QXJlYSwgcGFyYW1zLCBzdGFja3MpO1xuICAgIH1cbiAgICBoYW5kbGVNYXhQYWRkaW5nKGNoYXJ0QXJlYSk7XG4gICAgcGxhY2VCb3hlcyhib3hlcy5sZWZ0QW5kVG9wLCBjaGFydEFyZWEsIHBhcmFtcywgc3RhY2tzKTtcbiAgICBjaGFydEFyZWEueCArPSBjaGFydEFyZWEudztcbiAgICBjaGFydEFyZWEueSArPSBjaGFydEFyZWEuaDtcbiAgICBwbGFjZUJveGVzKGJveGVzLnJpZ2h0QW5kQm90dG9tLCBjaGFydEFyZWEsIHBhcmFtcywgc3RhY2tzKTtcbiAgICBjaGFydC5jaGFydEFyZWEgPSB7XG4gICAgICBsZWZ0OiBjaGFydEFyZWEubGVmdCxcbiAgICAgIHRvcDogY2hhcnRBcmVhLnRvcCxcbiAgICAgIHJpZ2h0OiBjaGFydEFyZWEubGVmdCArIGNoYXJ0QXJlYS53LFxuICAgICAgYm90dG9tOiBjaGFydEFyZWEudG9wICsgY2hhcnRBcmVhLmgsXG4gICAgICBoZWlnaHQ6IGNoYXJ0QXJlYS5oLFxuICAgICAgd2lkdGg6IGNoYXJ0QXJlYS53LFxuICAgIH07XG4gICAgZWFjaChib3hlcy5jaGFydEFyZWEsIChsYXlvdXQpID0+IHtcbiAgICAgIGNvbnN0IGJveCA9IGxheW91dC5ib3g7XG4gICAgICBPYmplY3QuYXNzaWduKGJveCwgY2hhcnQuY2hhcnRBcmVhKTtcbiAgICAgIGJveC51cGRhdGUoY2hhcnRBcmVhLncsIGNoYXJ0QXJlYS5oLCB7bGVmdDogMCwgdG9wOiAwLCByaWdodDogMCwgYm90dG9tOiAwfSk7XG4gICAgfSk7XG4gIH1cbn07XG5cbmNsYXNzIEJhc2VQbGF0Zm9ybSB7XG4gIGFjcXVpcmVDb250ZXh0KGNhbnZhcywgYXNwZWN0UmF0aW8pIHt9XG4gIHJlbGVhc2VDb250ZXh0KGNvbnRleHQpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgYWRkRXZlbnRMaXN0ZW5lcihjaGFydCwgdHlwZSwgbGlzdGVuZXIpIHt9XG4gIHJlbW92ZUV2ZW50TGlzdGVuZXIoY2hhcnQsIHR5cGUsIGxpc3RlbmVyKSB7fVxuICBnZXREZXZpY2VQaXhlbFJhdGlvKCkge1xuICAgIHJldHVybiAxO1xuICB9XG4gIGdldE1heGltdW1TaXplKGVsZW1lbnQsIHdpZHRoLCBoZWlnaHQsIGFzcGVjdFJhdGlvKSB7XG4gICAgd2lkdGggPSBNYXRoLm1heCgwLCB3aWR0aCB8fCBlbGVtZW50LndpZHRoKTtcbiAgICBoZWlnaHQgPSBoZWlnaHQgfHwgZWxlbWVudC5oZWlnaHQ7XG4gICAgcmV0dXJuIHtcbiAgICAgIHdpZHRoLFxuICAgICAgaGVpZ2h0OiBNYXRoLm1heCgwLCBhc3BlY3RSYXRpbyA/IE1hdGguZmxvb3Iod2lkdGggLyBhc3BlY3RSYXRpbykgOiBoZWlnaHQpXG4gICAgfTtcbiAgfVxuICBpc0F0dGFjaGVkKGNhbnZhcykge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIHVwZGF0ZUNvbmZpZyhjb25maWcpIHtcbiAgfVxufVxuXG5jbGFzcyBCYXNpY1BsYXRmb3JtIGV4dGVuZHMgQmFzZVBsYXRmb3JtIHtcbiAgYWNxdWlyZUNvbnRleHQoaXRlbSkge1xuICAgIHJldHVybiBpdGVtICYmIGl0ZW0uZ2V0Q29udGV4dCAmJiBpdGVtLmdldENvbnRleHQoJzJkJykgfHwgbnVsbDtcbiAgfVxuICB1cGRhdGVDb25maWcoY29uZmlnKSB7XG4gICAgY29uZmlnLm9wdGlvbnMuYW5pbWF0aW9uID0gZmFsc2U7XG4gIH1cbn1cblxuY29uc3QgRVhQQU5ET19LRVkgPSAnJGNoYXJ0anMnO1xuY29uc3QgRVZFTlRfVFlQRVMgPSB7XG4gIHRvdWNoc3RhcnQ6ICdtb3VzZWRvd24nLFxuICB0b3VjaG1vdmU6ICdtb3VzZW1vdmUnLFxuICB0b3VjaGVuZDogJ21vdXNldXAnLFxuICBwb2ludGVyZW50ZXI6ICdtb3VzZWVudGVyJyxcbiAgcG9pbnRlcmRvd246ICdtb3VzZWRvd24nLFxuICBwb2ludGVybW92ZTogJ21vdXNlbW92ZScsXG4gIHBvaW50ZXJ1cDogJ21vdXNldXAnLFxuICBwb2ludGVybGVhdmU6ICdtb3VzZW91dCcsXG4gIHBvaW50ZXJvdXQ6ICdtb3VzZW91dCdcbn07XG5jb25zdCBpc051bGxPckVtcHR5ID0gdmFsdWUgPT4gdmFsdWUgPT09IG51bGwgfHwgdmFsdWUgPT09ICcnO1xuZnVuY3Rpb24gaW5pdENhbnZhcyhjYW52YXMsIGFzcGVjdFJhdGlvKSB7XG4gIGNvbnN0IHN0eWxlID0gY2FudmFzLnN0eWxlO1xuICBjb25zdCByZW5kZXJIZWlnaHQgPSBjYW52YXMuZ2V0QXR0cmlidXRlKCdoZWlnaHQnKTtcbiAgY29uc3QgcmVuZGVyV2lkdGggPSBjYW52YXMuZ2V0QXR0cmlidXRlKCd3aWR0aCcpO1xuICBjYW52YXNbRVhQQU5ET19LRVldID0ge1xuICAgIGluaXRpYWw6IHtcbiAgICAgIGhlaWdodDogcmVuZGVySGVpZ2h0LFxuICAgICAgd2lkdGg6IHJlbmRlcldpZHRoLFxuICAgICAgc3R5bGU6IHtcbiAgICAgICAgZGlzcGxheTogc3R5bGUuZGlzcGxheSxcbiAgICAgICAgaGVpZ2h0OiBzdHlsZS5oZWlnaHQsXG4gICAgICAgIHdpZHRoOiBzdHlsZS53aWR0aFxuICAgICAgfVxuICAgIH1cbiAgfTtcbiAgc3R5bGUuZGlzcGxheSA9IHN0eWxlLmRpc3BsYXkgfHwgJ2Jsb2NrJztcbiAgc3R5bGUuYm94U2l6aW5nID0gc3R5bGUuYm94U2l6aW5nIHx8ICdib3JkZXItYm94JztcbiAgaWYgKGlzTnVsbE9yRW1wdHkocmVuZGVyV2lkdGgpKSB7XG4gICAgY29uc3QgZGlzcGxheVdpZHRoID0gcmVhZFVzZWRTaXplKGNhbnZhcywgJ3dpZHRoJyk7XG4gICAgaWYgKGRpc3BsYXlXaWR0aCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBjYW52YXMud2lkdGggPSBkaXNwbGF5V2lkdGg7XG4gICAgfVxuICB9XG4gIGlmIChpc051bGxPckVtcHR5KHJlbmRlckhlaWdodCkpIHtcbiAgICBpZiAoY2FudmFzLnN0eWxlLmhlaWdodCA9PT0gJycpIHtcbiAgICAgIGNhbnZhcy5oZWlnaHQgPSBjYW52YXMud2lkdGggLyAoYXNwZWN0UmF0aW8gfHwgMik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IGRpc3BsYXlIZWlnaHQgPSByZWFkVXNlZFNpemUoY2FudmFzLCAnaGVpZ2h0Jyk7XG4gICAgICBpZiAoZGlzcGxheUhlaWdodCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGNhbnZhcy5oZWlnaHQgPSBkaXNwbGF5SGVpZ2h0O1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gY2FudmFzO1xufVxuY29uc3QgZXZlbnRMaXN0ZW5lck9wdGlvbnMgPSBzdXBwb3J0c0V2ZW50TGlzdGVuZXJPcHRpb25zID8ge3Bhc3NpdmU6IHRydWV9IDogZmFsc2U7XG5mdW5jdGlvbiBhZGRMaXN0ZW5lcihub2RlLCB0eXBlLCBsaXN0ZW5lcikge1xuICBub2RlLmFkZEV2ZW50TGlzdGVuZXIodHlwZSwgbGlzdGVuZXIsIGV2ZW50TGlzdGVuZXJPcHRpb25zKTtcbn1cbmZ1bmN0aW9uIHJlbW92ZUxpc3RlbmVyKGNoYXJ0LCB0eXBlLCBsaXN0ZW5lcikge1xuICBjaGFydC5jYW52YXMucmVtb3ZlRXZlbnRMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lciwgZXZlbnRMaXN0ZW5lck9wdGlvbnMpO1xufVxuZnVuY3Rpb24gZnJvbU5hdGl2ZUV2ZW50KGV2ZW50LCBjaGFydCkge1xuICBjb25zdCB0eXBlID0gRVZFTlRfVFlQRVNbZXZlbnQudHlwZV0gfHwgZXZlbnQudHlwZTtcbiAgY29uc3Qge3gsIHl9ID0gZ2V0UmVsYXRpdmVQb3NpdGlvbiQxKGV2ZW50LCBjaGFydCk7XG4gIHJldHVybiB7XG4gICAgdHlwZSxcbiAgICBjaGFydCxcbiAgICBuYXRpdmU6IGV2ZW50LFxuICAgIHg6IHggIT09IHVuZGVmaW5lZCA/IHggOiBudWxsLFxuICAgIHk6IHkgIT09IHVuZGVmaW5lZCA/IHkgOiBudWxsLFxuICB9O1xufVxuZnVuY3Rpb24gbm9kZUxpc3RDb250YWlucyhub2RlTGlzdCwgY2FudmFzKSB7XG4gIGZvciAoY29uc3Qgbm9kZSBvZiBub2RlTGlzdCkge1xuICAgIGlmIChub2RlID09PSBjYW52YXMgfHwgbm9kZS5jb250YWlucyhjYW52YXMpKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH1cbn1cbmZ1bmN0aW9uIGNyZWF0ZUF0dGFjaE9ic2VydmVyKGNoYXJ0LCB0eXBlLCBsaXN0ZW5lcikge1xuICBjb25zdCBjYW52YXMgPSBjaGFydC5jYW52YXM7XG4gIGNvbnN0IG9ic2VydmVyID0gbmV3IE11dGF0aW9uT2JzZXJ2ZXIoZW50cmllcyA9PiB7XG4gICAgbGV0IHRyaWdnZXIgPSBmYWxzZTtcbiAgICBmb3IgKGNvbnN0IGVudHJ5IG9mIGVudHJpZXMpIHtcbiAgICAgIHRyaWdnZXIgPSB0cmlnZ2VyIHx8IG5vZGVMaXN0Q29udGFpbnMoZW50cnkuYWRkZWROb2RlcywgY2FudmFzKTtcbiAgICAgIHRyaWdnZXIgPSB0cmlnZ2VyICYmICFub2RlTGlzdENvbnRhaW5zKGVudHJ5LnJlbW92ZWROb2RlcywgY2FudmFzKTtcbiAgICB9XG4gICAgaWYgKHRyaWdnZXIpIHtcbiAgICAgIGxpc3RlbmVyKCk7XG4gICAgfVxuICB9KTtcbiAgb2JzZXJ2ZXIub2JzZXJ2ZShkb2N1bWVudCwge2NoaWxkTGlzdDogdHJ1ZSwgc3VidHJlZTogdHJ1ZX0pO1xuICByZXR1cm4gb2JzZXJ2ZXI7XG59XG5mdW5jdGlvbiBjcmVhdGVEZXRhY2hPYnNlcnZlcihjaGFydCwgdHlwZSwgbGlzdGVuZXIpIHtcbiAgY29uc3QgY2FudmFzID0gY2hhcnQuY2FudmFzO1xuICBjb25zdCBvYnNlcnZlciA9IG5ldyBNdXRhdGlvbk9ic2VydmVyKGVudHJpZXMgPT4ge1xuICAgIGxldCB0cmlnZ2VyID0gZmFsc2U7XG4gICAgZm9yIChjb25zdCBlbnRyeSBvZiBlbnRyaWVzKSB7XG4gICAgICB0cmlnZ2VyID0gdHJpZ2dlciB8fCBub2RlTGlzdENvbnRhaW5zKGVudHJ5LnJlbW92ZWROb2RlcywgY2FudmFzKTtcbiAgICAgIHRyaWdnZXIgPSB0cmlnZ2VyICYmICFub2RlTGlzdENvbnRhaW5zKGVudHJ5LmFkZGVkTm9kZXMsIGNhbnZhcyk7XG4gICAgfVxuICAgIGlmICh0cmlnZ2VyKSB7XG4gICAgICBsaXN0ZW5lcigpO1xuICAgIH1cbiAgfSk7XG4gIG9ic2VydmVyLm9ic2VydmUoZG9jdW1lbnQsIHtjaGlsZExpc3Q6IHRydWUsIHN1YnRyZWU6IHRydWV9KTtcbiAgcmV0dXJuIG9ic2VydmVyO1xufVxuY29uc3QgZHJwTGlzdGVuaW5nQ2hhcnRzID0gbmV3IE1hcCgpO1xubGV0IG9sZERldmljZVBpeGVsUmF0aW8gPSAwO1xuZnVuY3Rpb24gb25XaW5kb3dSZXNpemUoKSB7XG4gIGNvbnN0IGRwciA9IHdpbmRvdy5kZXZpY2VQaXhlbFJhdGlvO1xuICBpZiAoZHByID09PSBvbGREZXZpY2VQaXhlbFJhdGlvKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIG9sZERldmljZVBpeGVsUmF0aW8gPSBkcHI7XG4gIGRycExpc3RlbmluZ0NoYXJ0cy5mb3JFYWNoKChyZXNpemUsIGNoYXJ0KSA9PiB7XG4gICAgaWYgKGNoYXJ0LmN1cnJlbnREZXZpY2VQaXhlbFJhdGlvICE9PSBkcHIpIHtcbiAgICAgIHJlc2l6ZSgpO1xuICAgIH1cbiAgfSk7XG59XG5mdW5jdGlvbiBsaXN0ZW5EZXZpY2VQaXhlbFJhdGlvQ2hhbmdlcyhjaGFydCwgcmVzaXplKSB7XG4gIGlmICghZHJwTGlzdGVuaW5nQ2hhcnRzLnNpemUpIHtcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgb25XaW5kb3dSZXNpemUpO1xuICB9XG4gIGRycExpc3RlbmluZ0NoYXJ0cy5zZXQoY2hhcnQsIHJlc2l6ZSk7XG59XG5mdW5jdGlvbiB1bmxpc3RlbkRldmljZVBpeGVsUmF0aW9DaGFuZ2VzKGNoYXJ0KSB7XG4gIGRycExpc3RlbmluZ0NoYXJ0cy5kZWxldGUoY2hhcnQpO1xuICBpZiAoIWRycExpc3RlbmluZ0NoYXJ0cy5zaXplKSB7XG4gICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIG9uV2luZG93UmVzaXplKTtcbiAgfVxufVxuZnVuY3Rpb24gY3JlYXRlUmVzaXplT2JzZXJ2ZXIoY2hhcnQsIHR5cGUsIGxpc3RlbmVyKSB7XG4gIGNvbnN0IGNhbnZhcyA9IGNoYXJ0LmNhbnZhcztcbiAgY29uc3QgY29udGFpbmVyID0gY2FudmFzICYmIF9nZXRQYXJlbnROb2RlKGNhbnZhcyk7XG4gIGlmICghY29udGFpbmVyKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGNvbnN0IHJlc2l6ZSA9IHRocm90dGxlZCgod2lkdGgsIGhlaWdodCkgPT4ge1xuICAgIGNvbnN0IHcgPSBjb250YWluZXIuY2xpZW50V2lkdGg7XG4gICAgbGlzdGVuZXIod2lkdGgsIGhlaWdodCk7XG4gICAgaWYgKHcgPCBjb250YWluZXIuY2xpZW50V2lkdGgpIHtcbiAgICAgIGxpc3RlbmVyKCk7XG4gICAgfVxuICB9LCB3aW5kb3cpO1xuICBjb25zdCBvYnNlcnZlciA9IG5ldyBSZXNpemVPYnNlcnZlcihlbnRyaWVzID0+IHtcbiAgICBjb25zdCBlbnRyeSA9IGVudHJpZXNbMF07XG4gICAgY29uc3Qgd2lkdGggPSBlbnRyeS5jb250ZW50UmVjdC53aWR0aDtcbiAgICBjb25zdCBoZWlnaHQgPSBlbnRyeS5jb250ZW50UmVjdC5oZWlnaHQ7XG4gICAgaWYgKHdpZHRoID09PSAwICYmIGhlaWdodCA9PT0gMCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICByZXNpemUod2lkdGgsIGhlaWdodCk7XG4gIH0pO1xuICBvYnNlcnZlci5vYnNlcnZlKGNvbnRhaW5lcik7XG4gIGxpc3RlbkRldmljZVBpeGVsUmF0aW9DaGFuZ2VzKGNoYXJ0LCByZXNpemUpO1xuICByZXR1cm4gb2JzZXJ2ZXI7XG59XG5mdW5jdGlvbiByZWxlYXNlT2JzZXJ2ZXIoY2hhcnQsIHR5cGUsIG9ic2VydmVyKSB7XG4gIGlmIChvYnNlcnZlcikge1xuICAgIG9ic2VydmVyLmRpc2Nvbm5lY3QoKTtcbiAgfVxuICBpZiAodHlwZSA9PT0gJ3Jlc2l6ZScpIHtcbiAgICB1bmxpc3RlbkRldmljZVBpeGVsUmF0aW9DaGFuZ2VzKGNoYXJ0KTtcbiAgfVxufVxuZnVuY3Rpb24gY3JlYXRlUHJveHlBbmRMaXN0ZW4oY2hhcnQsIHR5cGUsIGxpc3RlbmVyKSB7XG4gIGNvbnN0IGNhbnZhcyA9IGNoYXJ0LmNhbnZhcztcbiAgY29uc3QgcHJveHkgPSB0aHJvdHRsZWQoKGV2ZW50KSA9PiB7XG4gICAgaWYgKGNoYXJ0LmN0eCAhPT0gbnVsbCkge1xuICAgICAgbGlzdGVuZXIoZnJvbU5hdGl2ZUV2ZW50KGV2ZW50LCBjaGFydCkpO1xuICAgIH1cbiAgfSwgY2hhcnQsIChhcmdzKSA9PiB7XG4gICAgY29uc3QgZXZlbnQgPSBhcmdzWzBdO1xuICAgIHJldHVybiBbZXZlbnQsIGV2ZW50Lm9mZnNldFgsIGV2ZW50Lm9mZnNldFldO1xuICB9KTtcbiAgYWRkTGlzdGVuZXIoY2FudmFzLCB0eXBlLCBwcm94eSk7XG4gIHJldHVybiBwcm94eTtcbn1cbmNsYXNzIERvbVBsYXRmb3JtIGV4dGVuZHMgQmFzZVBsYXRmb3JtIHtcbiAgYWNxdWlyZUNvbnRleHQoY2FudmFzLCBhc3BlY3RSYXRpbykge1xuICAgIGNvbnN0IGNvbnRleHQgPSBjYW52YXMgJiYgY2FudmFzLmdldENvbnRleHQgJiYgY2FudmFzLmdldENvbnRleHQoJzJkJyk7XG4gICAgaWYgKGNvbnRleHQgJiYgY29udGV4dC5jYW52YXMgPT09IGNhbnZhcykge1xuICAgICAgaW5pdENhbnZhcyhjYW52YXMsIGFzcGVjdFJhdGlvKTtcbiAgICAgIHJldHVybiBjb250ZXh0O1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICByZWxlYXNlQ29udGV4dChjb250ZXh0KSB7XG4gICAgY29uc3QgY2FudmFzID0gY29udGV4dC5jYW52YXM7XG4gICAgaWYgKCFjYW52YXNbRVhQQU5ET19LRVldKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGNvbnN0IGluaXRpYWwgPSBjYW52YXNbRVhQQU5ET19LRVldLmluaXRpYWw7XG4gICAgWydoZWlnaHQnLCAnd2lkdGgnXS5mb3JFYWNoKChwcm9wKSA9PiB7XG4gICAgICBjb25zdCB2YWx1ZSA9IGluaXRpYWxbcHJvcF07XG4gICAgICBpZiAoaXNOdWxsT3JVbmRlZih2YWx1ZSkpIHtcbiAgICAgICAgY2FudmFzLnJlbW92ZUF0dHJpYnV0ZShwcm9wKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNhbnZhcy5zZXRBdHRyaWJ1dGUocHJvcCwgdmFsdWUpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIGNvbnN0IHN0eWxlID0gaW5pdGlhbC5zdHlsZSB8fCB7fTtcbiAgICBPYmplY3Qua2V5cyhzdHlsZSkuZm9yRWFjaCgoa2V5KSA9PiB7XG4gICAgICBjYW52YXMuc3R5bGVba2V5XSA9IHN0eWxlW2tleV07XG4gICAgfSk7XG4gICAgY2FudmFzLndpZHRoID0gY2FudmFzLndpZHRoO1xuICAgIGRlbGV0ZSBjYW52YXNbRVhQQU5ET19LRVldO1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIGFkZEV2ZW50TGlzdGVuZXIoY2hhcnQsIHR5cGUsIGxpc3RlbmVyKSB7XG4gICAgdGhpcy5yZW1vdmVFdmVudExpc3RlbmVyKGNoYXJ0LCB0eXBlKTtcbiAgICBjb25zdCBwcm94aWVzID0gY2hhcnQuJHByb3hpZXMgfHwgKGNoYXJ0LiRwcm94aWVzID0ge30pO1xuICAgIGNvbnN0IGhhbmRsZXJzID0ge1xuICAgICAgYXR0YWNoOiBjcmVhdGVBdHRhY2hPYnNlcnZlcixcbiAgICAgIGRldGFjaDogY3JlYXRlRGV0YWNoT2JzZXJ2ZXIsXG4gICAgICByZXNpemU6IGNyZWF0ZVJlc2l6ZU9ic2VydmVyXG4gICAgfTtcbiAgICBjb25zdCBoYW5kbGVyID0gaGFuZGxlcnNbdHlwZV0gfHwgY3JlYXRlUHJveHlBbmRMaXN0ZW47XG4gICAgcHJveGllc1t0eXBlXSA9IGhhbmRsZXIoY2hhcnQsIHR5cGUsIGxpc3RlbmVyKTtcbiAgfVxuICByZW1vdmVFdmVudExpc3RlbmVyKGNoYXJ0LCB0eXBlKSB7XG4gICAgY29uc3QgcHJveGllcyA9IGNoYXJ0LiRwcm94aWVzIHx8IChjaGFydC4kcHJveGllcyA9IHt9KTtcbiAgICBjb25zdCBwcm94eSA9IHByb3hpZXNbdHlwZV07XG4gICAgaWYgKCFwcm94eSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBoYW5kbGVycyA9IHtcbiAgICAgIGF0dGFjaDogcmVsZWFzZU9ic2VydmVyLFxuICAgICAgZGV0YWNoOiByZWxlYXNlT2JzZXJ2ZXIsXG4gICAgICByZXNpemU6IHJlbGVhc2VPYnNlcnZlclxuICAgIH07XG4gICAgY29uc3QgaGFuZGxlciA9IGhhbmRsZXJzW3R5cGVdIHx8IHJlbW92ZUxpc3RlbmVyO1xuICAgIGhhbmRsZXIoY2hhcnQsIHR5cGUsIHByb3h5KTtcbiAgICBwcm94aWVzW3R5cGVdID0gdW5kZWZpbmVkO1xuICB9XG4gIGdldERldmljZVBpeGVsUmF0aW8oKSB7XG4gICAgcmV0dXJuIHdpbmRvdy5kZXZpY2VQaXhlbFJhdGlvO1xuICB9XG4gIGdldE1heGltdW1TaXplKGNhbnZhcywgd2lkdGgsIGhlaWdodCwgYXNwZWN0UmF0aW8pIHtcbiAgICByZXR1cm4gZ2V0TWF4aW11bVNpemUoY2FudmFzLCB3aWR0aCwgaGVpZ2h0LCBhc3BlY3RSYXRpbyk7XG4gIH1cbiAgaXNBdHRhY2hlZChjYW52YXMpIHtcbiAgICBjb25zdCBjb250YWluZXIgPSBfZ2V0UGFyZW50Tm9kZShjYW52YXMpO1xuICAgIHJldHVybiAhIShjb250YWluZXIgJiYgY29udGFpbmVyLmlzQ29ubmVjdGVkKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBfZGV0ZWN0UGxhdGZvcm0oY2FudmFzKSB7XG4gIGlmICghX2lzRG9tU3VwcG9ydGVkKCkgfHwgKHR5cGVvZiBPZmZzY3JlZW5DYW52YXMgIT09ICd1bmRlZmluZWQnICYmIGNhbnZhcyBpbnN0YW5jZW9mIE9mZnNjcmVlbkNhbnZhcykpIHtcbiAgICByZXR1cm4gQmFzaWNQbGF0Zm9ybTtcbiAgfVxuICByZXR1cm4gRG9tUGxhdGZvcm07XG59XG5cbmNsYXNzIEVsZW1lbnQge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLnggPSB1bmRlZmluZWQ7XG4gICAgdGhpcy55ID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuYWN0aXZlID0gZmFsc2U7XG4gICAgdGhpcy5vcHRpb25zID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuJGFuaW1hdGlvbnMgPSB1bmRlZmluZWQ7XG4gIH1cbiAgdG9vbHRpcFBvc2l0aW9uKHVzZUZpbmFsUG9zaXRpb24pIHtcbiAgICBjb25zdCB7eCwgeX0gPSB0aGlzLmdldFByb3BzKFsneCcsICd5J10sIHVzZUZpbmFsUG9zaXRpb24pO1xuICAgIHJldHVybiB7eCwgeX07XG4gIH1cbiAgaGFzVmFsdWUoKSB7XG4gICAgcmV0dXJuIGlzTnVtYmVyKHRoaXMueCkgJiYgaXNOdW1iZXIodGhpcy55KTtcbiAgfVxuICBnZXRQcm9wcyhwcm9wcywgZmluYWwpIHtcbiAgICBjb25zdCBhbmltcyA9IHRoaXMuJGFuaW1hdGlvbnM7XG4gICAgaWYgKCFmaW5hbCB8fCAhYW5pbXMpIHtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICBjb25zdCByZXQgPSB7fTtcbiAgICBwcm9wcy5mb3JFYWNoKHByb3AgPT4ge1xuICAgICAgcmV0W3Byb3BdID0gYW5pbXNbcHJvcF0gJiYgYW5pbXNbcHJvcF0uYWN0aXZlKCkgPyBhbmltc1twcm9wXS5fdG8gOiB0aGlzW3Byb3BdO1xuICAgIH0pO1xuICAgIHJldHVybiByZXQ7XG4gIH1cbn1cbkVsZW1lbnQuZGVmYXVsdHMgPSB7fTtcbkVsZW1lbnQuZGVmYXVsdFJvdXRlcyA9IHVuZGVmaW5lZDtcblxuY29uc3QgZm9ybWF0dGVycyA9IHtcbiAgdmFsdWVzKHZhbHVlKSB7XG4gICAgcmV0dXJuIGlzQXJyYXkodmFsdWUpID8gdmFsdWUgOiAnJyArIHZhbHVlO1xuICB9LFxuICBudW1lcmljKHRpY2tWYWx1ZSwgaW5kZXgsIHRpY2tzKSB7XG4gICAgaWYgKHRpY2tWYWx1ZSA9PT0gMCkge1xuICAgICAgcmV0dXJuICcwJztcbiAgICB9XG4gICAgY29uc3QgbG9jYWxlID0gdGhpcy5jaGFydC5vcHRpb25zLmxvY2FsZTtcbiAgICBsZXQgbm90YXRpb247XG4gICAgbGV0IGRlbHRhID0gdGlja1ZhbHVlO1xuICAgIGlmICh0aWNrcy5sZW5ndGggPiAxKSB7XG4gICAgICBjb25zdCBtYXhUaWNrID0gTWF0aC5tYXgoTWF0aC5hYnModGlja3NbMF0udmFsdWUpLCBNYXRoLmFicyh0aWNrc1t0aWNrcy5sZW5ndGggLSAxXS52YWx1ZSkpO1xuICAgICAgaWYgKG1heFRpY2sgPCAxZS00IHx8IG1heFRpY2sgPiAxZSsxNSkge1xuICAgICAgICBub3RhdGlvbiA9ICdzY2llbnRpZmljJztcbiAgICAgIH1cbiAgICAgIGRlbHRhID0gY2FsY3VsYXRlRGVsdGEodGlja1ZhbHVlLCB0aWNrcyk7XG4gICAgfVxuICAgIGNvbnN0IGxvZ0RlbHRhID0gbG9nMTAoTWF0aC5hYnMoZGVsdGEpKTtcbiAgICBjb25zdCBudW1EZWNpbWFsID0gTWF0aC5tYXgoTWF0aC5taW4oLTEgKiBNYXRoLmZsb29yKGxvZ0RlbHRhKSwgMjApLCAwKTtcbiAgICBjb25zdCBvcHRpb25zID0ge25vdGF0aW9uLCBtaW5pbXVtRnJhY3Rpb25EaWdpdHM6IG51bURlY2ltYWwsIG1heGltdW1GcmFjdGlvbkRpZ2l0czogbnVtRGVjaW1hbH07XG4gICAgT2JqZWN0LmFzc2lnbihvcHRpb25zLCB0aGlzLm9wdGlvbnMudGlja3MuZm9ybWF0KTtcbiAgICByZXR1cm4gZm9ybWF0TnVtYmVyKHRpY2tWYWx1ZSwgbG9jYWxlLCBvcHRpb25zKTtcbiAgfSxcbiAgbG9nYXJpdGhtaWModGlja1ZhbHVlLCBpbmRleCwgdGlja3MpIHtcbiAgICBpZiAodGlja1ZhbHVlID09PSAwKSB7XG4gICAgICByZXR1cm4gJzAnO1xuICAgIH1cbiAgICBjb25zdCByZW1haW4gPSB0aWNrVmFsdWUgLyAoTWF0aC5wb3coMTAsIE1hdGguZmxvb3IobG9nMTAodGlja1ZhbHVlKSkpKTtcbiAgICBpZiAocmVtYWluID09PSAxIHx8IHJlbWFpbiA9PT0gMiB8fCByZW1haW4gPT09IDUpIHtcbiAgICAgIHJldHVybiBmb3JtYXR0ZXJzLm51bWVyaWMuY2FsbCh0aGlzLCB0aWNrVmFsdWUsIGluZGV4LCB0aWNrcyk7XG4gICAgfVxuICAgIHJldHVybiAnJztcbiAgfVxufTtcbmZ1bmN0aW9uIGNhbGN1bGF0ZURlbHRhKHRpY2tWYWx1ZSwgdGlja3MpIHtcbiAgbGV0IGRlbHRhID0gdGlja3MubGVuZ3RoID4gMyA/IHRpY2tzWzJdLnZhbHVlIC0gdGlja3NbMV0udmFsdWUgOiB0aWNrc1sxXS52YWx1ZSAtIHRpY2tzWzBdLnZhbHVlO1xuICBpZiAoTWF0aC5hYnMoZGVsdGEpID49IDEgJiYgdGlja1ZhbHVlICE9PSBNYXRoLmZsb29yKHRpY2tWYWx1ZSkpIHtcbiAgICBkZWx0YSA9IHRpY2tWYWx1ZSAtIE1hdGguZmxvb3IodGlja1ZhbHVlKTtcbiAgfVxuICByZXR1cm4gZGVsdGE7XG59XG52YXIgVGlja3MgPSB7Zm9ybWF0dGVyc307XG5cbmRlZmF1bHRzLnNldCgnc2NhbGUnLCB7XG4gIGRpc3BsYXk6IHRydWUsXG4gIG9mZnNldDogZmFsc2UsXG4gIHJldmVyc2U6IGZhbHNlLFxuICBiZWdpbkF0WmVybzogZmFsc2UsXG4gIGJvdW5kczogJ3RpY2tzJyxcbiAgZ3JhY2U6IDAsXG4gIGdyaWQ6IHtcbiAgICBkaXNwbGF5OiB0cnVlLFxuICAgIGxpbmVXaWR0aDogMSxcbiAgICBkcmF3Qm9yZGVyOiB0cnVlLFxuICAgIGRyYXdPbkNoYXJ0QXJlYTogdHJ1ZSxcbiAgICBkcmF3VGlja3M6IHRydWUsXG4gICAgdGlja0xlbmd0aDogOCxcbiAgICB0aWNrV2lkdGg6IChfY3R4LCBvcHRpb25zKSA9PiBvcHRpb25zLmxpbmVXaWR0aCxcbiAgICB0aWNrQ29sb3I6IChfY3R4LCBvcHRpb25zKSA9PiBvcHRpb25zLmNvbG9yLFxuICAgIG9mZnNldDogZmFsc2UsXG4gICAgYm9yZGVyRGFzaDogW10sXG4gICAgYm9yZGVyRGFzaE9mZnNldDogMC4wLFxuICAgIGJvcmRlcldpZHRoOiAxXG4gIH0sXG4gIHRpdGxlOiB7XG4gICAgZGlzcGxheTogZmFsc2UsXG4gICAgdGV4dDogJycsXG4gICAgcGFkZGluZzoge1xuICAgICAgdG9wOiA0LFxuICAgICAgYm90dG9tOiA0XG4gICAgfVxuICB9LFxuICB0aWNrczoge1xuICAgIG1pblJvdGF0aW9uOiAwLFxuICAgIG1heFJvdGF0aW9uOiA1MCxcbiAgICBtaXJyb3I6IGZhbHNlLFxuICAgIHRleHRTdHJva2VXaWR0aDogMCxcbiAgICB0ZXh0U3Ryb2tlQ29sb3I6ICcnLFxuICAgIHBhZGRpbmc6IDMsXG4gICAgZGlzcGxheTogdHJ1ZSxcbiAgICBhdXRvU2tpcDogdHJ1ZSxcbiAgICBhdXRvU2tpcFBhZGRpbmc6IDMsXG4gICAgbGFiZWxPZmZzZXQ6IDAsXG4gICAgY2FsbGJhY2s6IFRpY2tzLmZvcm1hdHRlcnMudmFsdWVzLFxuICAgIG1pbm9yOiB7fSxcbiAgICBtYWpvcjoge30sXG4gICAgYWxpZ246ICdjZW50ZXInLFxuICAgIGNyb3NzQWxpZ246ICduZWFyJyxcbiAgICBzaG93TGFiZWxCYWNrZHJvcDogZmFsc2UsXG4gICAgYmFja2Ryb3BDb2xvcjogJ3JnYmEoMjU1LCAyNTUsIDI1NSwgMC43NSknLFxuICAgIGJhY2tkcm9wUGFkZGluZzogMixcbiAgfVxufSk7XG5kZWZhdWx0cy5yb3V0ZSgnc2NhbGUudGlja3MnLCAnY29sb3InLCAnJywgJ2NvbG9yJyk7XG5kZWZhdWx0cy5yb3V0ZSgnc2NhbGUuZ3JpZCcsICdjb2xvcicsICcnLCAnYm9yZGVyQ29sb3InKTtcbmRlZmF1bHRzLnJvdXRlKCdzY2FsZS5ncmlkJywgJ2JvcmRlckNvbG9yJywgJycsICdib3JkZXJDb2xvcicpO1xuZGVmYXVsdHMucm91dGUoJ3NjYWxlLnRpdGxlJywgJ2NvbG9yJywgJycsICdjb2xvcicpO1xuZGVmYXVsdHMuZGVzY3JpYmUoJ3NjYWxlJywge1xuICBfZmFsbGJhY2s6IGZhbHNlLFxuICBfc2NyaXB0YWJsZTogKG5hbWUpID0+ICFuYW1lLnN0YXJ0c1dpdGgoJ2JlZm9yZScpICYmICFuYW1lLnN0YXJ0c1dpdGgoJ2FmdGVyJykgJiYgbmFtZSAhPT0gJ2NhbGxiYWNrJyAmJiBuYW1lICE9PSAncGFyc2VyJyxcbiAgX2luZGV4YWJsZTogKG5hbWUpID0+IG5hbWUgIT09ICdib3JkZXJEYXNoJyAmJiBuYW1lICE9PSAndGlja0JvcmRlckRhc2gnLFxufSk7XG5kZWZhdWx0cy5kZXNjcmliZSgnc2NhbGVzJywge1xuICBfZmFsbGJhY2s6ICdzY2FsZScsXG59KTtcbmRlZmF1bHRzLmRlc2NyaWJlKCdzY2FsZS50aWNrcycsIHtcbiAgX3NjcmlwdGFibGU6IChuYW1lKSA9PiBuYW1lICE9PSAnYmFja2Ryb3BQYWRkaW5nJyAmJiBuYW1lICE9PSAnY2FsbGJhY2snLFxuICBfaW5kZXhhYmxlOiAobmFtZSkgPT4gbmFtZSAhPT0gJ2JhY2tkcm9wUGFkZGluZycsXG59KTtcblxuZnVuY3Rpb24gYXV0b1NraXAoc2NhbGUsIHRpY2tzKSB7XG4gIGNvbnN0IHRpY2tPcHRzID0gc2NhbGUub3B0aW9ucy50aWNrcztcbiAgY29uc3QgdGlja3NMaW1pdCA9IHRpY2tPcHRzLm1heFRpY2tzTGltaXQgfHwgZGV0ZXJtaW5lTWF4VGlja3Moc2NhbGUpO1xuICBjb25zdCBtYWpvckluZGljZXMgPSB0aWNrT3B0cy5tYWpvci5lbmFibGVkID8gZ2V0TWFqb3JJbmRpY2VzKHRpY2tzKSA6IFtdO1xuICBjb25zdCBudW1NYWpvckluZGljZXMgPSBtYWpvckluZGljZXMubGVuZ3RoO1xuICBjb25zdCBmaXJzdCA9IG1ham9ySW5kaWNlc1swXTtcbiAgY29uc3QgbGFzdCA9IG1ham9ySW5kaWNlc1tudW1NYWpvckluZGljZXMgLSAxXTtcbiAgY29uc3QgbmV3VGlja3MgPSBbXTtcbiAgaWYgKG51bU1ham9ySW5kaWNlcyA+IHRpY2tzTGltaXQpIHtcbiAgICBza2lwTWFqb3JzKHRpY2tzLCBuZXdUaWNrcywgbWFqb3JJbmRpY2VzLCBudW1NYWpvckluZGljZXMgLyB0aWNrc0xpbWl0KTtcbiAgICByZXR1cm4gbmV3VGlja3M7XG4gIH1cbiAgY29uc3Qgc3BhY2luZyA9IGNhbGN1bGF0ZVNwYWNpbmcobWFqb3JJbmRpY2VzLCB0aWNrcywgdGlja3NMaW1pdCk7XG4gIGlmIChudW1NYWpvckluZGljZXMgPiAwKSB7XG4gICAgbGV0IGksIGlsZW47XG4gICAgY29uc3QgYXZnTWFqb3JTcGFjaW5nID0gbnVtTWFqb3JJbmRpY2VzID4gMSA/IE1hdGgucm91bmQoKGxhc3QgLSBmaXJzdCkgLyAobnVtTWFqb3JJbmRpY2VzIC0gMSkpIDogbnVsbDtcbiAgICBza2lwKHRpY2tzLCBuZXdUaWNrcywgc3BhY2luZywgaXNOdWxsT3JVbmRlZihhdmdNYWpvclNwYWNpbmcpID8gMCA6IGZpcnN0IC0gYXZnTWFqb3JTcGFjaW5nLCBmaXJzdCk7XG4gICAgZm9yIChpID0gMCwgaWxlbiA9IG51bU1ham9ySW5kaWNlcyAtIDE7IGkgPCBpbGVuOyBpKyspIHtcbiAgICAgIHNraXAodGlja3MsIG5ld1RpY2tzLCBzcGFjaW5nLCBtYWpvckluZGljZXNbaV0sIG1ham9ySW5kaWNlc1tpICsgMV0pO1xuICAgIH1cbiAgICBza2lwKHRpY2tzLCBuZXdUaWNrcywgc3BhY2luZywgbGFzdCwgaXNOdWxsT3JVbmRlZihhdmdNYWpvclNwYWNpbmcpID8gdGlja3MubGVuZ3RoIDogbGFzdCArIGF2Z01ham9yU3BhY2luZyk7XG4gICAgcmV0dXJuIG5ld1RpY2tzO1xuICB9XG4gIHNraXAodGlja3MsIG5ld1RpY2tzLCBzcGFjaW5nKTtcbiAgcmV0dXJuIG5ld1RpY2tzO1xufVxuZnVuY3Rpb24gZGV0ZXJtaW5lTWF4VGlja3Moc2NhbGUpIHtcbiAgY29uc3Qgb2Zmc2V0ID0gc2NhbGUub3B0aW9ucy5vZmZzZXQ7XG4gIGNvbnN0IHRpY2tMZW5ndGggPSBzY2FsZS5fdGlja1NpemUoKTtcbiAgY29uc3QgbWF4U2NhbGUgPSBzY2FsZS5fbGVuZ3RoIC8gdGlja0xlbmd0aCArIChvZmZzZXQgPyAwIDogMSk7XG4gIGNvbnN0IG1heENoYXJ0ID0gc2NhbGUuX21heExlbmd0aCAvIHRpY2tMZW5ndGg7XG4gIHJldHVybiBNYXRoLmZsb29yKE1hdGgubWluKG1heFNjYWxlLCBtYXhDaGFydCkpO1xufVxuZnVuY3Rpb24gY2FsY3VsYXRlU3BhY2luZyhtYWpvckluZGljZXMsIHRpY2tzLCB0aWNrc0xpbWl0KSB7XG4gIGNvbnN0IGV2ZW5NYWpvclNwYWNpbmcgPSBnZXRFdmVuU3BhY2luZyhtYWpvckluZGljZXMpO1xuICBjb25zdCBzcGFjaW5nID0gdGlja3MubGVuZ3RoIC8gdGlja3NMaW1pdDtcbiAgaWYgKCFldmVuTWFqb3JTcGFjaW5nKSB7XG4gICAgcmV0dXJuIE1hdGgubWF4KHNwYWNpbmcsIDEpO1xuICB9XG4gIGNvbnN0IGZhY3RvcnMgPSBfZmFjdG9yaXplKGV2ZW5NYWpvclNwYWNpbmcpO1xuICBmb3IgKGxldCBpID0gMCwgaWxlbiA9IGZhY3RvcnMubGVuZ3RoIC0gMTsgaSA8IGlsZW47IGkrKykge1xuICAgIGNvbnN0IGZhY3RvciA9IGZhY3RvcnNbaV07XG4gICAgaWYgKGZhY3RvciA+IHNwYWNpbmcpIHtcbiAgICAgIHJldHVybiBmYWN0b3I7XG4gICAgfVxuICB9XG4gIHJldHVybiBNYXRoLm1heChzcGFjaW5nLCAxKTtcbn1cbmZ1bmN0aW9uIGdldE1ham9ySW5kaWNlcyh0aWNrcykge1xuICBjb25zdCByZXN1bHQgPSBbXTtcbiAgbGV0IGksIGlsZW47XG4gIGZvciAoaSA9IDAsIGlsZW4gPSB0aWNrcy5sZW5ndGg7IGkgPCBpbGVuOyBpKyspIHtcbiAgICBpZiAodGlja3NbaV0ubWFqb3IpIHtcbiAgICAgIHJlc3VsdC5wdXNoKGkpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuZnVuY3Rpb24gc2tpcE1ham9ycyh0aWNrcywgbmV3VGlja3MsIG1ham9ySW5kaWNlcywgc3BhY2luZykge1xuICBsZXQgY291bnQgPSAwO1xuICBsZXQgbmV4dCA9IG1ham9ySW5kaWNlc1swXTtcbiAgbGV0IGk7XG4gIHNwYWNpbmcgPSBNYXRoLmNlaWwoc3BhY2luZyk7XG4gIGZvciAoaSA9IDA7IGkgPCB0aWNrcy5sZW5ndGg7IGkrKykge1xuICAgIGlmIChpID09PSBuZXh0KSB7XG4gICAgICBuZXdUaWNrcy5wdXNoKHRpY2tzW2ldKTtcbiAgICAgIGNvdW50Kys7XG4gICAgICBuZXh0ID0gbWFqb3JJbmRpY2VzW2NvdW50ICogc3BhY2luZ107XG4gICAgfVxuICB9XG59XG5mdW5jdGlvbiBza2lwKHRpY2tzLCBuZXdUaWNrcywgc3BhY2luZywgbWFqb3JTdGFydCwgbWFqb3JFbmQpIHtcbiAgY29uc3Qgc3RhcnQgPSB2YWx1ZU9yRGVmYXVsdChtYWpvclN0YXJ0LCAwKTtcbiAgY29uc3QgZW5kID0gTWF0aC5taW4odmFsdWVPckRlZmF1bHQobWFqb3JFbmQsIHRpY2tzLmxlbmd0aCksIHRpY2tzLmxlbmd0aCk7XG4gIGxldCBjb3VudCA9IDA7XG4gIGxldCBsZW5ndGgsIGksIG5leHQ7XG4gIHNwYWNpbmcgPSBNYXRoLmNlaWwoc3BhY2luZyk7XG4gIGlmIChtYWpvckVuZCkge1xuICAgIGxlbmd0aCA9IG1ham9yRW5kIC0gbWFqb3JTdGFydDtcbiAgICBzcGFjaW5nID0gbGVuZ3RoIC8gTWF0aC5mbG9vcihsZW5ndGggLyBzcGFjaW5nKTtcbiAgfVxuICBuZXh0ID0gc3RhcnQ7XG4gIHdoaWxlIChuZXh0IDwgMCkge1xuICAgIGNvdW50Kys7XG4gICAgbmV4dCA9IE1hdGgucm91bmQoc3RhcnQgKyBjb3VudCAqIHNwYWNpbmcpO1xuICB9XG4gIGZvciAoaSA9IE1hdGgubWF4KHN0YXJ0LCAwKTsgaSA8IGVuZDsgaSsrKSB7XG4gICAgaWYgKGkgPT09IG5leHQpIHtcbiAgICAgIG5ld1RpY2tzLnB1c2godGlja3NbaV0pO1xuICAgICAgY291bnQrKztcbiAgICAgIG5leHQgPSBNYXRoLnJvdW5kKHN0YXJ0ICsgY291bnQgKiBzcGFjaW5nKTtcbiAgICB9XG4gIH1cbn1cbmZ1bmN0aW9uIGdldEV2ZW5TcGFjaW5nKGFycikge1xuICBjb25zdCBsZW4gPSBhcnIubGVuZ3RoO1xuICBsZXQgaSwgZGlmZjtcbiAgaWYgKGxlbiA8IDIpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgZm9yIChkaWZmID0gYXJyWzBdLCBpID0gMTsgaSA8IGxlbjsgKytpKSB7XG4gICAgaWYgKGFycltpXSAtIGFycltpIC0gMV0gIT09IGRpZmYpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGRpZmY7XG59XG5cbmNvbnN0IHJldmVyc2VBbGlnbiA9IChhbGlnbikgPT4gYWxpZ24gPT09ICdsZWZ0JyA/ICdyaWdodCcgOiBhbGlnbiA9PT0gJ3JpZ2h0JyA/ICdsZWZ0JyA6IGFsaWduO1xuY29uc3Qgb2Zmc2V0RnJvbUVkZ2UgPSAoc2NhbGUsIGVkZ2UsIG9mZnNldCkgPT4gZWRnZSA9PT0gJ3RvcCcgfHwgZWRnZSA9PT0gJ2xlZnQnID8gc2NhbGVbZWRnZV0gKyBvZmZzZXQgOiBzY2FsZVtlZGdlXSAtIG9mZnNldDtcbmZ1bmN0aW9uIHNhbXBsZShhcnIsIG51bUl0ZW1zKSB7XG4gIGNvbnN0IHJlc3VsdCA9IFtdO1xuICBjb25zdCBpbmNyZW1lbnQgPSBhcnIubGVuZ3RoIC8gbnVtSXRlbXM7XG4gIGNvbnN0IGxlbiA9IGFyci5sZW5ndGg7XG4gIGxldCBpID0gMDtcbiAgZm9yICg7IGkgPCBsZW47IGkgKz0gaW5jcmVtZW50KSB7XG4gICAgcmVzdWx0LnB1c2goYXJyW01hdGguZmxvb3IoaSldKTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuZnVuY3Rpb24gZ2V0UGl4ZWxGb3JHcmlkTGluZShzY2FsZSwgaW5kZXgsIG9mZnNldEdyaWRMaW5lcykge1xuICBjb25zdCBsZW5ndGggPSBzY2FsZS50aWNrcy5sZW5ndGg7XG4gIGNvbnN0IHZhbGlkSW5kZXggPSBNYXRoLm1pbihpbmRleCwgbGVuZ3RoIC0gMSk7XG4gIGNvbnN0IHN0YXJ0ID0gc2NhbGUuX3N0YXJ0UGl4ZWw7XG4gIGNvbnN0IGVuZCA9IHNjYWxlLl9lbmRQaXhlbDtcbiAgY29uc3QgZXBzaWxvbiA9IDFlLTY7XG4gIGxldCBsaW5lVmFsdWUgPSBzY2FsZS5nZXRQaXhlbEZvclRpY2sodmFsaWRJbmRleCk7XG4gIGxldCBvZmZzZXQ7XG4gIGlmIChvZmZzZXRHcmlkTGluZXMpIHtcbiAgICBpZiAobGVuZ3RoID09PSAxKSB7XG4gICAgICBvZmZzZXQgPSBNYXRoLm1heChsaW5lVmFsdWUgLSBzdGFydCwgZW5kIC0gbGluZVZhbHVlKTtcbiAgICB9IGVsc2UgaWYgKGluZGV4ID09PSAwKSB7XG4gICAgICBvZmZzZXQgPSAoc2NhbGUuZ2V0UGl4ZWxGb3JUaWNrKDEpIC0gbGluZVZhbHVlKSAvIDI7XG4gICAgfSBlbHNlIHtcbiAgICAgIG9mZnNldCA9IChsaW5lVmFsdWUgLSBzY2FsZS5nZXRQaXhlbEZvclRpY2sodmFsaWRJbmRleCAtIDEpKSAvIDI7XG4gICAgfVxuICAgIGxpbmVWYWx1ZSArPSB2YWxpZEluZGV4IDwgaW5kZXggPyBvZmZzZXQgOiAtb2Zmc2V0O1xuICAgIGlmIChsaW5lVmFsdWUgPCBzdGFydCAtIGVwc2lsb24gfHwgbGluZVZhbHVlID4gZW5kICsgZXBzaWxvbikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgfVxuICByZXR1cm4gbGluZVZhbHVlO1xufVxuZnVuY3Rpb24gZ2FyYmFnZUNvbGxlY3QoY2FjaGVzLCBsZW5ndGgpIHtcbiAgZWFjaChjYWNoZXMsIChjYWNoZSkgPT4ge1xuICAgIGNvbnN0IGdjID0gY2FjaGUuZ2M7XG4gICAgY29uc3QgZ2NMZW4gPSBnYy5sZW5ndGggLyAyO1xuICAgIGxldCBpO1xuICAgIGlmIChnY0xlbiA+IGxlbmd0aCkge1xuICAgICAgZm9yIChpID0gMDsgaSA8IGdjTGVuOyArK2kpIHtcbiAgICAgICAgZGVsZXRlIGNhY2hlLmRhdGFbZ2NbaV1dO1xuICAgICAgfVxuICAgICAgZ2Muc3BsaWNlKDAsIGdjTGVuKTtcbiAgICB9XG4gIH0pO1xufVxuZnVuY3Rpb24gZ2V0VGlja01hcmtMZW5ndGgob3B0aW9ucykge1xuICByZXR1cm4gb3B0aW9ucy5kcmF3VGlja3MgPyBvcHRpb25zLnRpY2tMZW5ndGggOiAwO1xufVxuZnVuY3Rpb24gZ2V0VGl0bGVIZWlnaHQob3B0aW9ucywgZmFsbGJhY2spIHtcbiAgaWYgKCFvcHRpb25zLmRpc3BsYXkpIHtcbiAgICByZXR1cm4gMDtcbiAgfVxuICBjb25zdCBmb250ID0gdG9Gb250KG9wdGlvbnMuZm9udCwgZmFsbGJhY2spO1xuICBjb25zdCBwYWRkaW5nID0gdG9QYWRkaW5nKG9wdGlvbnMucGFkZGluZyk7XG4gIGNvbnN0IGxpbmVzID0gaXNBcnJheShvcHRpb25zLnRleHQpID8gb3B0aW9ucy50ZXh0Lmxlbmd0aCA6IDE7XG4gIHJldHVybiAobGluZXMgKiBmb250LmxpbmVIZWlnaHQpICsgcGFkZGluZy5oZWlnaHQ7XG59XG5mdW5jdGlvbiBjcmVhdGVTY2FsZUNvbnRleHQocGFyZW50LCBzY2FsZSkge1xuICByZXR1cm4gY3JlYXRlQ29udGV4dChwYXJlbnQsIHtcbiAgICBzY2FsZSxcbiAgICB0eXBlOiAnc2NhbGUnXG4gIH0pO1xufVxuZnVuY3Rpb24gY3JlYXRlVGlja0NvbnRleHQocGFyZW50LCBpbmRleCwgdGljaykge1xuICByZXR1cm4gY3JlYXRlQ29udGV4dChwYXJlbnQsIHtcbiAgICB0aWNrLFxuICAgIGluZGV4LFxuICAgIHR5cGU6ICd0aWNrJ1xuICB9KTtcbn1cbmZ1bmN0aW9uIHRpdGxlQWxpZ24oYWxpZ24sIHBvc2l0aW9uLCByZXZlcnNlKSB7XG4gIGxldCByZXQgPSBfdG9MZWZ0UmlnaHRDZW50ZXIoYWxpZ24pO1xuICBpZiAoKHJldmVyc2UgJiYgcG9zaXRpb24gIT09ICdyaWdodCcpIHx8ICghcmV2ZXJzZSAmJiBwb3NpdGlvbiA9PT0gJ3JpZ2h0JykpIHtcbiAgICByZXQgPSByZXZlcnNlQWxpZ24ocmV0KTtcbiAgfVxuICByZXR1cm4gcmV0O1xufVxuZnVuY3Rpb24gdGl0bGVBcmdzKHNjYWxlLCBvZmZzZXQsIHBvc2l0aW9uLCBhbGlnbikge1xuICBjb25zdCB7dG9wLCBsZWZ0LCBib3R0b20sIHJpZ2h0LCBjaGFydH0gPSBzY2FsZTtcbiAgY29uc3Qge2NoYXJ0QXJlYSwgc2NhbGVzfSA9IGNoYXJ0O1xuICBsZXQgcm90YXRpb24gPSAwO1xuICBsZXQgbWF4V2lkdGgsIHRpdGxlWCwgdGl0bGVZO1xuICBjb25zdCBoZWlnaHQgPSBib3R0b20gLSB0b3A7XG4gIGNvbnN0IHdpZHRoID0gcmlnaHQgLSBsZWZ0O1xuICBpZiAoc2NhbGUuaXNIb3Jpem9udGFsKCkpIHtcbiAgICB0aXRsZVggPSBfYWxpZ25TdGFydEVuZChhbGlnbiwgbGVmdCwgcmlnaHQpO1xuICAgIGlmIChpc09iamVjdChwb3NpdGlvbikpIHtcbiAgICAgIGNvbnN0IHBvc2l0aW9uQXhpc0lEID0gT2JqZWN0LmtleXMocG9zaXRpb24pWzBdO1xuICAgICAgY29uc3QgdmFsdWUgPSBwb3NpdGlvbltwb3NpdGlvbkF4aXNJRF07XG4gICAgICB0aXRsZVkgPSBzY2FsZXNbcG9zaXRpb25BeGlzSURdLmdldFBpeGVsRm9yVmFsdWUodmFsdWUpICsgaGVpZ2h0IC0gb2Zmc2V0O1xuICAgIH0gZWxzZSBpZiAocG9zaXRpb24gPT09ICdjZW50ZXInKSB7XG4gICAgICB0aXRsZVkgPSAoY2hhcnRBcmVhLmJvdHRvbSArIGNoYXJ0QXJlYS50b3ApIC8gMiArIGhlaWdodCAtIG9mZnNldDtcbiAgICB9IGVsc2Uge1xuICAgICAgdGl0bGVZID0gb2Zmc2V0RnJvbUVkZ2Uoc2NhbGUsIHBvc2l0aW9uLCBvZmZzZXQpO1xuICAgIH1cbiAgICBtYXhXaWR0aCA9IHJpZ2h0IC0gbGVmdDtcbiAgfSBlbHNlIHtcbiAgICBpZiAoaXNPYmplY3QocG9zaXRpb24pKSB7XG4gICAgICBjb25zdCBwb3NpdGlvbkF4aXNJRCA9IE9iamVjdC5rZXlzKHBvc2l0aW9uKVswXTtcbiAgICAgIGNvbnN0IHZhbHVlID0gcG9zaXRpb25bcG9zaXRpb25BeGlzSURdO1xuICAgICAgdGl0bGVYID0gc2NhbGVzW3Bvc2l0aW9uQXhpc0lEXS5nZXRQaXhlbEZvclZhbHVlKHZhbHVlKSAtIHdpZHRoICsgb2Zmc2V0O1xuICAgIH0gZWxzZSBpZiAocG9zaXRpb24gPT09ICdjZW50ZXInKSB7XG4gICAgICB0aXRsZVggPSAoY2hhcnRBcmVhLmxlZnQgKyBjaGFydEFyZWEucmlnaHQpIC8gMiAtIHdpZHRoICsgb2Zmc2V0O1xuICAgIH0gZWxzZSB7XG4gICAgICB0aXRsZVggPSBvZmZzZXRGcm9tRWRnZShzY2FsZSwgcG9zaXRpb24sIG9mZnNldCk7XG4gICAgfVxuICAgIHRpdGxlWSA9IF9hbGlnblN0YXJ0RW5kKGFsaWduLCBib3R0b20sIHRvcCk7XG4gICAgcm90YXRpb24gPSBwb3NpdGlvbiA9PT0gJ2xlZnQnID8gLUhBTEZfUEkgOiBIQUxGX1BJO1xuICB9XG4gIHJldHVybiB7dGl0bGVYLCB0aXRsZVksIG1heFdpZHRoLCByb3RhdGlvbn07XG59XG5jbGFzcyBTY2FsZSBleHRlbmRzIEVsZW1lbnQge1xuICBjb25zdHJ1Y3RvcihjZmcpIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuaWQgPSBjZmcuaWQ7XG4gICAgdGhpcy50eXBlID0gY2ZnLnR5cGU7XG4gICAgdGhpcy5vcHRpb25zID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuY3R4ID0gY2ZnLmN0eDtcbiAgICB0aGlzLmNoYXJ0ID0gY2ZnLmNoYXJ0O1xuICAgIHRoaXMudG9wID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuYm90dG9tID0gdW5kZWZpbmVkO1xuICAgIHRoaXMubGVmdCA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLnJpZ2h0ID0gdW5kZWZpbmVkO1xuICAgIHRoaXMud2lkdGggPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5oZWlnaHQgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5fbWFyZ2lucyA9IHtcbiAgICAgIGxlZnQ6IDAsXG4gICAgICByaWdodDogMCxcbiAgICAgIHRvcDogMCxcbiAgICAgIGJvdHRvbTogMFxuICAgIH07XG4gICAgdGhpcy5tYXhXaWR0aCA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLm1heEhlaWdodCA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLnBhZGRpbmdUb3AgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5wYWRkaW5nQm90dG9tID0gdW5kZWZpbmVkO1xuICAgIHRoaXMucGFkZGluZ0xlZnQgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5wYWRkaW5nUmlnaHQgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5heGlzID0gdW5kZWZpbmVkO1xuICAgIHRoaXMubGFiZWxSb3RhdGlvbiA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLm1pbiA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLm1heCA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLl9yYW5nZSA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLnRpY2tzID0gW107XG4gICAgdGhpcy5fZ3JpZExpbmVJdGVtcyA9IG51bGw7XG4gICAgdGhpcy5fbGFiZWxJdGVtcyA9IG51bGw7XG4gICAgdGhpcy5fbGFiZWxTaXplcyA9IG51bGw7XG4gICAgdGhpcy5fbGVuZ3RoID0gMDtcbiAgICB0aGlzLl9tYXhMZW5ndGggPSAwO1xuICAgIHRoaXMuX2xvbmdlc3RUZXh0Q2FjaGUgPSB7fTtcbiAgICB0aGlzLl9zdGFydFBpeGVsID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuX2VuZFBpeGVsID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuX3JldmVyc2VQaXhlbHMgPSBmYWxzZTtcbiAgICB0aGlzLl91c2VyTWF4ID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuX3VzZXJNaW4gPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5fc3VnZ2VzdGVkTWF4ID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuX3N1Z2dlc3RlZE1pbiA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLl90aWNrc0xlbmd0aCA9IDA7XG4gICAgdGhpcy5fYm9yZGVyVmFsdWUgPSAwO1xuICAgIHRoaXMuX2NhY2hlID0ge307XG4gICAgdGhpcy5fZGF0YUxpbWl0c0NhY2hlZCA9IGZhbHNlO1xuICAgIHRoaXMuJGNvbnRleHQgPSB1bmRlZmluZWQ7XG4gIH1cbiAgaW5pdChvcHRpb25zKSB7XG4gICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucy5zZXRDb250ZXh0KHRoaXMuZ2V0Q29udGV4dCgpKTtcbiAgICB0aGlzLmF4aXMgPSBvcHRpb25zLmF4aXM7XG4gICAgdGhpcy5fdXNlck1pbiA9IHRoaXMucGFyc2Uob3B0aW9ucy5taW4pO1xuICAgIHRoaXMuX3VzZXJNYXggPSB0aGlzLnBhcnNlKG9wdGlvbnMubWF4KTtcbiAgICB0aGlzLl9zdWdnZXN0ZWRNaW4gPSB0aGlzLnBhcnNlKG9wdGlvbnMuc3VnZ2VzdGVkTWluKTtcbiAgICB0aGlzLl9zdWdnZXN0ZWRNYXggPSB0aGlzLnBhcnNlKG9wdGlvbnMuc3VnZ2VzdGVkTWF4KTtcbiAgfVxuICBwYXJzZShyYXcsIGluZGV4KSB7XG4gICAgcmV0dXJuIHJhdztcbiAgfVxuICBnZXRVc2VyQm91bmRzKCkge1xuICAgIGxldCB7X3VzZXJNaW4sIF91c2VyTWF4LCBfc3VnZ2VzdGVkTWluLCBfc3VnZ2VzdGVkTWF4fSA9IHRoaXM7XG4gICAgX3VzZXJNaW4gPSBmaW5pdGVPckRlZmF1bHQoX3VzZXJNaW4sIE51bWJlci5QT1NJVElWRV9JTkZJTklUWSk7XG4gICAgX3VzZXJNYXggPSBmaW5pdGVPckRlZmF1bHQoX3VzZXJNYXgsIE51bWJlci5ORUdBVElWRV9JTkZJTklUWSk7XG4gICAgX3N1Z2dlc3RlZE1pbiA9IGZpbml0ZU9yRGVmYXVsdChfc3VnZ2VzdGVkTWluLCBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFkpO1xuICAgIF9zdWdnZXN0ZWRNYXggPSBmaW5pdGVPckRlZmF1bHQoX3N1Z2dlc3RlZE1heCwgTnVtYmVyLk5FR0FUSVZFX0lORklOSVRZKTtcbiAgICByZXR1cm4ge1xuICAgICAgbWluOiBmaW5pdGVPckRlZmF1bHQoX3VzZXJNaW4sIF9zdWdnZXN0ZWRNaW4pLFxuICAgICAgbWF4OiBmaW5pdGVPckRlZmF1bHQoX3VzZXJNYXgsIF9zdWdnZXN0ZWRNYXgpLFxuICAgICAgbWluRGVmaW5lZDogaXNOdW1iZXJGaW5pdGUoX3VzZXJNaW4pLFxuICAgICAgbWF4RGVmaW5lZDogaXNOdW1iZXJGaW5pdGUoX3VzZXJNYXgpXG4gICAgfTtcbiAgfVxuICBnZXRNaW5NYXgoY2FuU3RhY2spIHtcbiAgICBsZXQge21pbiwgbWF4LCBtaW5EZWZpbmVkLCBtYXhEZWZpbmVkfSA9IHRoaXMuZ2V0VXNlckJvdW5kcygpO1xuICAgIGxldCByYW5nZTtcbiAgICBpZiAobWluRGVmaW5lZCAmJiBtYXhEZWZpbmVkKSB7XG4gICAgICByZXR1cm4ge21pbiwgbWF4fTtcbiAgICB9XG4gICAgY29uc3QgbWV0YXMgPSB0aGlzLmdldE1hdGNoaW5nVmlzaWJsZU1ldGFzKCk7XG4gICAgZm9yIChsZXQgaSA9IDAsIGlsZW4gPSBtZXRhcy5sZW5ndGg7IGkgPCBpbGVuOyArK2kpIHtcbiAgICAgIHJhbmdlID0gbWV0YXNbaV0uY29udHJvbGxlci5nZXRNaW5NYXgodGhpcywgY2FuU3RhY2spO1xuICAgICAgaWYgKCFtaW5EZWZpbmVkKSB7XG4gICAgICAgIG1pbiA9IE1hdGgubWluKG1pbiwgcmFuZ2UubWluKTtcbiAgICAgIH1cbiAgICAgIGlmICghbWF4RGVmaW5lZCkge1xuICAgICAgICBtYXggPSBNYXRoLm1heChtYXgsIHJhbmdlLm1heCk7XG4gICAgICB9XG4gICAgfVxuICAgIG1pbiA9IG1heERlZmluZWQgJiYgbWluID4gbWF4ID8gbWF4IDogbWluO1xuICAgIG1heCA9IG1pbkRlZmluZWQgJiYgbWluID4gbWF4ID8gbWluIDogbWF4O1xuICAgIHJldHVybiB7XG4gICAgICBtaW46IGZpbml0ZU9yRGVmYXVsdChtaW4sIGZpbml0ZU9yRGVmYXVsdChtYXgsIG1pbikpLFxuICAgICAgbWF4OiBmaW5pdGVPckRlZmF1bHQobWF4LCBmaW5pdGVPckRlZmF1bHQobWluLCBtYXgpKVxuICAgIH07XG4gIH1cbiAgZ2V0UGFkZGluZygpIHtcbiAgICByZXR1cm4ge1xuICAgICAgbGVmdDogdGhpcy5wYWRkaW5nTGVmdCB8fCAwLFxuICAgICAgdG9wOiB0aGlzLnBhZGRpbmdUb3AgfHwgMCxcbiAgICAgIHJpZ2h0OiB0aGlzLnBhZGRpbmdSaWdodCB8fCAwLFxuICAgICAgYm90dG9tOiB0aGlzLnBhZGRpbmdCb3R0b20gfHwgMFxuICAgIH07XG4gIH1cbiAgZ2V0VGlja3MoKSB7XG4gICAgcmV0dXJuIHRoaXMudGlja3M7XG4gIH1cbiAgZ2V0TGFiZWxzKCkge1xuICAgIGNvbnN0IGRhdGEgPSB0aGlzLmNoYXJ0LmRhdGE7XG4gICAgcmV0dXJuIHRoaXMub3B0aW9ucy5sYWJlbHMgfHwgKHRoaXMuaXNIb3Jpem9udGFsKCkgPyBkYXRhLnhMYWJlbHMgOiBkYXRhLnlMYWJlbHMpIHx8IGRhdGEubGFiZWxzIHx8IFtdO1xuICB9XG4gIGJlZm9yZUxheW91dCgpIHtcbiAgICB0aGlzLl9jYWNoZSA9IHt9O1xuICAgIHRoaXMuX2RhdGFMaW1pdHNDYWNoZWQgPSBmYWxzZTtcbiAgfVxuICBiZWZvcmVVcGRhdGUoKSB7XG4gICAgY2FsbGJhY2sodGhpcy5vcHRpb25zLmJlZm9yZVVwZGF0ZSwgW3RoaXNdKTtcbiAgfVxuICB1cGRhdGUobWF4V2lkdGgsIG1heEhlaWdodCwgbWFyZ2lucykge1xuICAgIGNvbnN0IHtiZWdpbkF0WmVybywgZ3JhY2UsIHRpY2tzOiB0aWNrT3B0c30gPSB0aGlzLm9wdGlvbnM7XG4gICAgY29uc3Qgc2FtcGxlU2l6ZSA9IHRpY2tPcHRzLnNhbXBsZVNpemU7XG4gICAgdGhpcy5iZWZvcmVVcGRhdGUoKTtcbiAgICB0aGlzLm1heFdpZHRoID0gbWF4V2lkdGg7XG4gICAgdGhpcy5tYXhIZWlnaHQgPSBtYXhIZWlnaHQ7XG4gICAgdGhpcy5fbWFyZ2lucyA9IG1hcmdpbnMgPSBPYmplY3QuYXNzaWduKHtcbiAgICAgIGxlZnQ6IDAsXG4gICAgICByaWdodDogMCxcbiAgICAgIHRvcDogMCxcbiAgICAgIGJvdHRvbTogMFxuICAgIH0sIG1hcmdpbnMpO1xuICAgIHRoaXMudGlja3MgPSBudWxsO1xuICAgIHRoaXMuX2xhYmVsU2l6ZXMgPSBudWxsO1xuICAgIHRoaXMuX2dyaWRMaW5lSXRlbXMgPSBudWxsO1xuICAgIHRoaXMuX2xhYmVsSXRlbXMgPSBudWxsO1xuICAgIHRoaXMuYmVmb3JlU2V0RGltZW5zaW9ucygpO1xuICAgIHRoaXMuc2V0RGltZW5zaW9ucygpO1xuICAgIHRoaXMuYWZ0ZXJTZXREaW1lbnNpb25zKCk7XG4gICAgdGhpcy5fbWF4TGVuZ3RoID0gdGhpcy5pc0hvcml6b250YWwoKVxuICAgICAgPyB0aGlzLndpZHRoICsgbWFyZ2lucy5sZWZ0ICsgbWFyZ2lucy5yaWdodFxuICAgICAgOiB0aGlzLmhlaWdodCArIG1hcmdpbnMudG9wICsgbWFyZ2lucy5ib3R0b207XG4gICAgaWYgKCF0aGlzLl9kYXRhTGltaXRzQ2FjaGVkKSB7XG4gICAgICB0aGlzLmJlZm9yZURhdGFMaW1pdHMoKTtcbiAgICAgIHRoaXMuZGV0ZXJtaW5lRGF0YUxpbWl0cygpO1xuICAgICAgdGhpcy5hZnRlckRhdGFMaW1pdHMoKTtcbiAgICAgIHRoaXMuX3JhbmdlID0gX2FkZEdyYWNlKHRoaXMsIGdyYWNlLCBiZWdpbkF0WmVybyk7XG4gICAgICB0aGlzLl9kYXRhTGltaXRzQ2FjaGVkID0gdHJ1ZTtcbiAgICB9XG4gICAgdGhpcy5iZWZvcmVCdWlsZFRpY2tzKCk7XG4gICAgdGhpcy50aWNrcyA9IHRoaXMuYnVpbGRUaWNrcygpIHx8IFtdO1xuICAgIHRoaXMuYWZ0ZXJCdWlsZFRpY2tzKCk7XG4gICAgY29uc3Qgc2FtcGxpbmdFbmFibGVkID0gc2FtcGxlU2l6ZSA8IHRoaXMudGlja3MubGVuZ3RoO1xuICAgIHRoaXMuX2NvbnZlcnRUaWNrc1RvTGFiZWxzKHNhbXBsaW5nRW5hYmxlZCA/IHNhbXBsZSh0aGlzLnRpY2tzLCBzYW1wbGVTaXplKSA6IHRoaXMudGlja3MpO1xuICAgIHRoaXMuY29uZmlndXJlKCk7XG4gICAgdGhpcy5iZWZvcmVDYWxjdWxhdGVMYWJlbFJvdGF0aW9uKCk7XG4gICAgdGhpcy5jYWxjdWxhdGVMYWJlbFJvdGF0aW9uKCk7XG4gICAgdGhpcy5hZnRlckNhbGN1bGF0ZUxhYmVsUm90YXRpb24oKTtcbiAgICBpZiAodGlja09wdHMuZGlzcGxheSAmJiAodGlja09wdHMuYXV0b1NraXAgfHwgdGlja09wdHMuc291cmNlID09PSAnYXV0bycpKSB7XG4gICAgICB0aGlzLnRpY2tzID0gYXV0b1NraXAodGhpcywgdGhpcy50aWNrcyk7XG4gICAgICB0aGlzLl9sYWJlbFNpemVzID0gbnVsbDtcbiAgICB9XG4gICAgaWYgKHNhbXBsaW5nRW5hYmxlZCkge1xuICAgICAgdGhpcy5fY29udmVydFRpY2tzVG9MYWJlbHModGhpcy50aWNrcyk7XG4gICAgfVxuICAgIHRoaXMuYmVmb3JlRml0KCk7XG4gICAgdGhpcy5maXQoKTtcbiAgICB0aGlzLmFmdGVyRml0KCk7XG4gICAgdGhpcy5hZnRlclVwZGF0ZSgpO1xuICB9XG4gIGNvbmZpZ3VyZSgpIHtcbiAgICBsZXQgcmV2ZXJzZVBpeGVscyA9IHRoaXMub3B0aW9ucy5yZXZlcnNlO1xuICAgIGxldCBzdGFydFBpeGVsLCBlbmRQaXhlbDtcbiAgICBpZiAodGhpcy5pc0hvcml6b250YWwoKSkge1xuICAgICAgc3RhcnRQaXhlbCA9IHRoaXMubGVmdDtcbiAgICAgIGVuZFBpeGVsID0gdGhpcy5yaWdodDtcbiAgICB9IGVsc2Uge1xuICAgICAgc3RhcnRQaXhlbCA9IHRoaXMudG9wO1xuICAgICAgZW5kUGl4ZWwgPSB0aGlzLmJvdHRvbTtcbiAgICAgIHJldmVyc2VQaXhlbHMgPSAhcmV2ZXJzZVBpeGVscztcbiAgICB9XG4gICAgdGhpcy5fc3RhcnRQaXhlbCA9IHN0YXJ0UGl4ZWw7XG4gICAgdGhpcy5fZW5kUGl4ZWwgPSBlbmRQaXhlbDtcbiAgICB0aGlzLl9yZXZlcnNlUGl4ZWxzID0gcmV2ZXJzZVBpeGVscztcbiAgICB0aGlzLl9sZW5ndGggPSBlbmRQaXhlbCAtIHN0YXJ0UGl4ZWw7XG4gICAgdGhpcy5fYWxpZ25Ub1BpeGVscyA9IHRoaXMub3B0aW9ucy5hbGlnblRvUGl4ZWxzO1xuICB9XG4gIGFmdGVyVXBkYXRlKCkge1xuICAgIGNhbGxiYWNrKHRoaXMub3B0aW9ucy5hZnRlclVwZGF0ZSwgW3RoaXNdKTtcbiAgfVxuICBiZWZvcmVTZXREaW1lbnNpb25zKCkge1xuICAgIGNhbGxiYWNrKHRoaXMub3B0aW9ucy5iZWZvcmVTZXREaW1lbnNpb25zLCBbdGhpc10pO1xuICB9XG4gIHNldERpbWVuc2lvbnMoKSB7XG4gICAgaWYgKHRoaXMuaXNIb3Jpem9udGFsKCkpIHtcbiAgICAgIHRoaXMud2lkdGggPSB0aGlzLm1heFdpZHRoO1xuICAgICAgdGhpcy5sZWZ0ID0gMDtcbiAgICAgIHRoaXMucmlnaHQgPSB0aGlzLndpZHRoO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmhlaWdodCA9IHRoaXMubWF4SGVpZ2h0O1xuICAgICAgdGhpcy50b3AgPSAwO1xuICAgICAgdGhpcy5ib3R0b20gPSB0aGlzLmhlaWdodDtcbiAgICB9XG4gICAgdGhpcy5wYWRkaW5nTGVmdCA9IDA7XG4gICAgdGhpcy5wYWRkaW5nVG9wID0gMDtcbiAgICB0aGlzLnBhZGRpbmdSaWdodCA9IDA7XG4gICAgdGhpcy5wYWRkaW5nQm90dG9tID0gMDtcbiAgfVxuICBhZnRlclNldERpbWVuc2lvbnMoKSB7XG4gICAgY2FsbGJhY2sodGhpcy5vcHRpb25zLmFmdGVyU2V0RGltZW5zaW9ucywgW3RoaXNdKTtcbiAgfVxuICBfY2FsbEhvb2tzKG5hbWUpIHtcbiAgICB0aGlzLmNoYXJ0Lm5vdGlmeVBsdWdpbnMobmFtZSwgdGhpcy5nZXRDb250ZXh0KCkpO1xuICAgIGNhbGxiYWNrKHRoaXMub3B0aW9uc1tuYW1lXSwgW3RoaXNdKTtcbiAgfVxuICBiZWZvcmVEYXRhTGltaXRzKCkge1xuICAgIHRoaXMuX2NhbGxIb29rcygnYmVmb3JlRGF0YUxpbWl0cycpO1xuICB9XG4gIGRldGVybWluZURhdGFMaW1pdHMoKSB7fVxuICBhZnRlckRhdGFMaW1pdHMoKSB7XG4gICAgdGhpcy5fY2FsbEhvb2tzKCdhZnRlckRhdGFMaW1pdHMnKTtcbiAgfVxuICBiZWZvcmVCdWlsZFRpY2tzKCkge1xuICAgIHRoaXMuX2NhbGxIb29rcygnYmVmb3JlQnVpbGRUaWNrcycpO1xuICB9XG4gIGJ1aWxkVGlja3MoKSB7XG4gICAgcmV0dXJuIFtdO1xuICB9XG4gIGFmdGVyQnVpbGRUaWNrcygpIHtcbiAgICB0aGlzLl9jYWxsSG9va3MoJ2FmdGVyQnVpbGRUaWNrcycpO1xuICB9XG4gIGJlZm9yZVRpY2tUb0xhYmVsQ29udmVyc2lvbigpIHtcbiAgICBjYWxsYmFjayh0aGlzLm9wdGlvbnMuYmVmb3JlVGlja1RvTGFiZWxDb252ZXJzaW9uLCBbdGhpc10pO1xuICB9XG4gIGdlbmVyYXRlVGlja0xhYmVscyh0aWNrcykge1xuICAgIGNvbnN0IHRpY2tPcHRzID0gdGhpcy5vcHRpb25zLnRpY2tzO1xuICAgIGxldCBpLCBpbGVuLCB0aWNrO1xuICAgIGZvciAoaSA9IDAsIGlsZW4gPSB0aWNrcy5sZW5ndGg7IGkgPCBpbGVuOyBpKyspIHtcbiAgICAgIHRpY2sgPSB0aWNrc1tpXTtcbiAgICAgIHRpY2subGFiZWwgPSBjYWxsYmFjayh0aWNrT3B0cy5jYWxsYmFjaywgW3RpY2sudmFsdWUsIGksIHRpY2tzXSwgdGhpcyk7XG4gICAgfVxuICB9XG4gIGFmdGVyVGlja1RvTGFiZWxDb252ZXJzaW9uKCkge1xuICAgIGNhbGxiYWNrKHRoaXMub3B0aW9ucy5hZnRlclRpY2tUb0xhYmVsQ29udmVyc2lvbiwgW3RoaXNdKTtcbiAgfVxuICBiZWZvcmVDYWxjdWxhdGVMYWJlbFJvdGF0aW9uKCkge1xuICAgIGNhbGxiYWNrKHRoaXMub3B0aW9ucy5iZWZvcmVDYWxjdWxhdGVMYWJlbFJvdGF0aW9uLCBbdGhpc10pO1xuICB9XG4gIGNhbGN1bGF0ZUxhYmVsUm90YXRpb24oKSB7XG4gICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMub3B0aW9ucztcbiAgICBjb25zdCB0aWNrT3B0cyA9IG9wdGlvbnMudGlja3M7XG4gICAgY29uc3QgbnVtVGlja3MgPSB0aGlzLnRpY2tzLmxlbmd0aDtcbiAgICBjb25zdCBtaW5Sb3RhdGlvbiA9IHRpY2tPcHRzLm1pblJvdGF0aW9uIHx8IDA7XG4gICAgY29uc3QgbWF4Um90YXRpb24gPSB0aWNrT3B0cy5tYXhSb3RhdGlvbjtcbiAgICBsZXQgbGFiZWxSb3RhdGlvbiA9IG1pblJvdGF0aW9uO1xuICAgIGxldCB0aWNrV2lkdGgsIG1heEhlaWdodCwgbWF4TGFiZWxEaWFnb25hbDtcbiAgICBpZiAoIXRoaXMuX2lzVmlzaWJsZSgpIHx8ICF0aWNrT3B0cy5kaXNwbGF5IHx8IG1pblJvdGF0aW9uID49IG1heFJvdGF0aW9uIHx8IG51bVRpY2tzIDw9IDEgfHwgIXRoaXMuaXNIb3Jpem9udGFsKCkpIHtcbiAgICAgIHRoaXMubGFiZWxSb3RhdGlvbiA9IG1pblJvdGF0aW9uO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBsYWJlbFNpemVzID0gdGhpcy5fZ2V0TGFiZWxTaXplcygpO1xuICAgIGNvbnN0IG1heExhYmVsV2lkdGggPSBsYWJlbFNpemVzLndpZGVzdC53aWR0aDtcbiAgICBjb25zdCBtYXhMYWJlbEhlaWdodCA9IGxhYmVsU2l6ZXMuaGlnaGVzdC5oZWlnaHQ7XG4gICAgY29uc3QgbWF4V2lkdGggPSBfbGltaXRWYWx1ZSh0aGlzLmNoYXJ0LndpZHRoIC0gbWF4TGFiZWxXaWR0aCwgMCwgdGhpcy5tYXhXaWR0aCk7XG4gICAgdGlja1dpZHRoID0gb3B0aW9ucy5vZmZzZXQgPyB0aGlzLm1heFdpZHRoIC8gbnVtVGlja3MgOiBtYXhXaWR0aCAvIChudW1UaWNrcyAtIDEpO1xuICAgIGlmIChtYXhMYWJlbFdpZHRoICsgNiA+IHRpY2tXaWR0aCkge1xuICAgICAgdGlja1dpZHRoID0gbWF4V2lkdGggLyAobnVtVGlja3MgLSAob3B0aW9ucy5vZmZzZXQgPyAwLjUgOiAxKSk7XG4gICAgICBtYXhIZWlnaHQgPSB0aGlzLm1heEhlaWdodCAtIGdldFRpY2tNYXJrTGVuZ3RoKG9wdGlvbnMuZ3JpZClcblx0XHRcdFx0LSB0aWNrT3B0cy5wYWRkaW5nIC0gZ2V0VGl0bGVIZWlnaHQob3B0aW9ucy50aXRsZSwgdGhpcy5jaGFydC5vcHRpb25zLmZvbnQpO1xuICAgICAgbWF4TGFiZWxEaWFnb25hbCA9IE1hdGguc3FydChtYXhMYWJlbFdpZHRoICogbWF4TGFiZWxXaWR0aCArIG1heExhYmVsSGVpZ2h0ICogbWF4TGFiZWxIZWlnaHQpO1xuICAgICAgbGFiZWxSb3RhdGlvbiA9IHRvRGVncmVlcyhNYXRoLm1pbihcbiAgICAgICAgTWF0aC5hc2luKF9saW1pdFZhbHVlKChsYWJlbFNpemVzLmhpZ2hlc3QuaGVpZ2h0ICsgNikgLyB0aWNrV2lkdGgsIC0xLCAxKSksXG4gICAgICAgIE1hdGguYXNpbihfbGltaXRWYWx1ZShtYXhIZWlnaHQgLyBtYXhMYWJlbERpYWdvbmFsLCAtMSwgMSkpIC0gTWF0aC5hc2luKF9saW1pdFZhbHVlKG1heExhYmVsSGVpZ2h0IC8gbWF4TGFiZWxEaWFnb25hbCwgLTEsIDEpKVxuICAgICAgKSk7XG4gICAgICBsYWJlbFJvdGF0aW9uID0gTWF0aC5tYXgobWluUm90YXRpb24sIE1hdGgubWluKG1heFJvdGF0aW9uLCBsYWJlbFJvdGF0aW9uKSk7XG4gICAgfVxuICAgIHRoaXMubGFiZWxSb3RhdGlvbiA9IGxhYmVsUm90YXRpb247XG4gIH1cbiAgYWZ0ZXJDYWxjdWxhdGVMYWJlbFJvdGF0aW9uKCkge1xuICAgIGNhbGxiYWNrKHRoaXMub3B0aW9ucy5hZnRlckNhbGN1bGF0ZUxhYmVsUm90YXRpb24sIFt0aGlzXSk7XG4gIH1cbiAgYmVmb3JlRml0KCkge1xuICAgIGNhbGxiYWNrKHRoaXMub3B0aW9ucy5iZWZvcmVGaXQsIFt0aGlzXSk7XG4gIH1cbiAgZml0KCkge1xuICAgIGNvbnN0IG1pblNpemUgPSB7XG4gICAgICB3aWR0aDogMCxcbiAgICAgIGhlaWdodDogMFxuICAgIH07XG4gICAgY29uc3Qge2NoYXJ0LCBvcHRpb25zOiB7dGlja3M6IHRpY2tPcHRzLCB0aXRsZTogdGl0bGVPcHRzLCBncmlkOiBncmlkT3B0c319ID0gdGhpcztcbiAgICBjb25zdCBkaXNwbGF5ID0gdGhpcy5faXNWaXNpYmxlKCk7XG4gICAgY29uc3QgaXNIb3Jpem9udGFsID0gdGhpcy5pc0hvcml6b250YWwoKTtcbiAgICBpZiAoZGlzcGxheSkge1xuICAgICAgY29uc3QgdGl0bGVIZWlnaHQgPSBnZXRUaXRsZUhlaWdodCh0aXRsZU9wdHMsIGNoYXJ0Lm9wdGlvbnMuZm9udCk7XG4gICAgICBpZiAoaXNIb3Jpem9udGFsKSB7XG4gICAgICAgIG1pblNpemUud2lkdGggPSB0aGlzLm1heFdpZHRoO1xuICAgICAgICBtaW5TaXplLmhlaWdodCA9IGdldFRpY2tNYXJrTGVuZ3RoKGdyaWRPcHRzKSArIHRpdGxlSGVpZ2h0O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbWluU2l6ZS5oZWlnaHQgPSB0aGlzLm1heEhlaWdodDtcbiAgICAgICAgbWluU2l6ZS53aWR0aCA9IGdldFRpY2tNYXJrTGVuZ3RoKGdyaWRPcHRzKSArIHRpdGxlSGVpZ2h0O1xuICAgICAgfVxuICAgICAgaWYgKHRpY2tPcHRzLmRpc3BsYXkgJiYgdGhpcy50aWNrcy5sZW5ndGgpIHtcbiAgICAgICAgY29uc3Qge2ZpcnN0LCBsYXN0LCB3aWRlc3QsIGhpZ2hlc3R9ID0gdGhpcy5fZ2V0TGFiZWxTaXplcygpO1xuICAgICAgICBjb25zdCB0aWNrUGFkZGluZyA9IHRpY2tPcHRzLnBhZGRpbmcgKiAyO1xuICAgICAgICBjb25zdCBhbmdsZVJhZGlhbnMgPSB0b1JhZGlhbnModGhpcy5sYWJlbFJvdGF0aW9uKTtcbiAgICAgICAgY29uc3QgY29zID0gTWF0aC5jb3MoYW5nbGVSYWRpYW5zKTtcbiAgICAgICAgY29uc3Qgc2luID0gTWF0aC5zaW4oYW5nbGVSYWRpYW5zKTtcbiAgICAgICAgaWYgKGlzSG9yaXpvbnRhbCkge1xuICAgICAgICAgIGNvbnN0IGxhYmVsSGVpZ2h0ID0gdGlja09wdHMubWlycm9yID8gMCA6IHNpbiAqIHdpZGVzdC53aWR0aCArIGNvcyAqIGhpZ2hlc3QuaGVpZ2h0O1xuICAgICAgICAgIG1pblNpemUuaGVpZ2h0ID0gTWF0aC5taW4odGhpcy5tYXhIZWlnaHQsIG1pblNpemUuaGVpZ2h0ICsgbGFiZWxIZWlnaHQgKyB0aWNrUGFkZGluZyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY29uc3QgbGFiZWxXaWR0aCA9IHRpY2tPcHRzLm1pcnJvciA/IDAgOiBjb3MgKiB3aWRlc3Qud2lkdGggKyBzaW4gKiBoaWdoZXN0LmhlaWdodDtcbiAgICAgICAgICBtaW5TaXplLndpZHRoID0gTWF0aC5taW4odGhpcy5tYXhXaWR0aCwgbWluU2l6ZS53aWR0aCArIGxhYmVsV2lkdGggKyB0aWNrUGFkZGluZyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fY2FsY3VsYXRlUGFkZGluZyhmaXJzdCwgbGFzdCwgc2luLCBjb3MpO1xuICAgICAgfVxuICAgIH1cbiAgICB0aGlzLl9oYW5kbGVNYXJnaW5zKCk7XG4gICAgaWYgKGlzSG9yaXpvbnRhbCkge1xuICAgICAgdGhpcy53aWR0aCA9IHRoaXMuX2xlbmd0aCA9IGNoYXJ0LndpZHRoIC0gdGhpcy5fbWFyZ2lucy5sZWZ0IC0gdGhpcy5fbWFyZ2lucy5yaWdodDtcbiAgICAgIHRoaXMuaGVpZ2h0ID0gbWluU2l6ZS5oZWlnaHQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMud2lkdGggPSBtaW5TaXplLndpZHRoO1xuICAgICAgdGhpcy5oZWlnaHQgPSB0aGlzLl9sZW5ndGggPSBjaGFydC5oZWlnaHQgLSB0aGlzLl9tYXJnaW5zLnRvcCAtIHRoaXMuX21hcmdpbnMuYm90dG9tO1xuICAgIH1cbiAgfVxuICBfY2FsY3VsYXRlUGFkZGluZyhmaXJzdCwgbGFzdCwgc2luLCBjb3MpIHtcbiAgICBjb25zdCB7dGlja3M6IHthbGlnbiwgcGFkZGluZ30sIHBvc2l0aW9ufSA9IHRoaXMub3B0aW9ucztcbiAgICBjb25zdCBpc1JvdGF0ZWQgPSB0aGlzLmxhYmVsUm90YXRpb24gIT09IDA7XG4gICAgY29uc3QgbGFiZWxzQmVsb3dUaWNrcyA9IHBvc2l0aW9uICE9PSAndG9wJyAmJiB0aGlzLmF4aXMgPT09ICd4JztcbiAgICBpZiAodGhpcy5pc0hvcml6b250YWwoKSkge1xuICAgICAgY29uc3Qgb2Zmc2V0TGVmdCA9IHRoaXMuZ2V0UGl4ZWxGb3JUaWNrKDApIC0gdGhpcy5sZWZ0O1xuICAgICAgY29uc3Qgb2Zmc2V0UmlnaHQgPSB0aGlzLnJpZ2h0IC0gdGhpcy5nZXRQaXhlbEZvclRpY2sodGhpcy50aWNrcy5sZW5ndGggLSAxKTtcbiAgICAgIGxldCBwYWRkaW5nTGVmdCA9IDA7XG4gICAgICBsZXQgcGFkZGluZ1JpZ2h0ID0gMDtcbiAgICAgIGlmIChpc1JvdGF0ZWQpIHtcbiAgICAgICAgaWYgKGxhYmVsc0JlbG93VGlja3MpIHtcbiAgICAgICAgICBwYWRkaW5nTGVmdCA9IGNvcyAqIGZpcnN0LndpZHRoO1xuICAgICAgICAgIHBhZGRpbmdSaWdodCA9IHNpbiAqIGxhc3QuaGVpZ2h0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHBhZGRpbmdMZWZ0ID0gc2luICogZmlyc3QuaGVpZ2h0O1xuICAgICAgICAgIHBhZGRpbmdSaWdodCA9IGNvcyAqIGxhc3Qud2lkdGg7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoYWxpZ24gPT09ICdzdGFydCcpIHtcbiAgICAgICAgcGFkZGluZ1JpZ2h0ID0gbGFzdC53aWR0aDtcbiAgICAgIH0gZWxzZSBpZiAoYWxpZ24gPT09ICdlbmQnKSB7XG4gICAgICAgIHBhZGRpbmdMZWZ0ID0gZmlyc3Qud2lkdGg7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwYWRkaW5nTGVmdCA9IGZpcnN0LndpZHRoIC8gMjtcbiAgICAgICAgcGFkZGluZ1JpZ2h0ID0gbGFzdC53aWR0aCAvIDI7XG4gICAgICB9XG4gICAgICB0aGlzLnBhZGRpbmdMZWZ0ID0gTWF0aC5tYXgoKHBhZGRpbmdMZWZ0IC0gb2Zmc2V0TGVmdCArIHBhZGRpbmcpICogdGhpcy53aWR0aCAvICh0aGlzLndpZHRoIC0gb2Zmc2V0TGVmdCksIDApO1xuICAgICAgdGhpcy5wYWRkaW5nUmlnaHQgPSBNYXRoLm1heCgocGFkZGluZ1JpZ2h0IC0gb2Zmc2V0UmlnaHQgKyBwYWRkaW5nKSAqIHRoaXMud2lkdGggLyAodGhpcy53aWR0aCAtIG9mZnNldFJpZ2h0KSwgMCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxldCBwYWRkaW5nVG9wID0gbGFzdC5oZWlnaHQgLyAyO1xuICAgICAgbGV0IHBhZGRpbmdCb3R0b20gPSBmaXJzdC5oZWlnaHQgLyAyO1xuICAgICAgaWYgKGFsaWduID09PSAnc3RhcnQnKSB7XG4gICAgICAgIHBhZGRpbmdUb3AgPSAwO1xuICAgICAgICBwYWRkaW5nQm90dG9tID0gZmlyc3QuaGVpZ2h0O1xuICAgICAgfSBlbHNlIGlmIChhbGlnbiA9PT0gJ2VuZCcpIHtcbiAgICAgICAgcGFkZGluZ1RvcCA9IGxhc3QuaGVpZ2h0O1xuICAgICAgICBwYWRkaW5nQm90dG9tID0gMDtcbiAgICAgIH1cbiAgICAgIHRoaXMucGFkZGluZ1RvcCA9IHBhZGRpbmdUb3AgKyBwYWRkaW5nO1xuICAgICAgdGhpcy5wYWRkaW5nQm90dG9tID0gcGFkZGluZ0JvdHRvbSArIHBhZGRpbmc7XG4gICAgfVxuICB9XG4gIF9oYW5kbGVNYXJnaW5zKCkge1xuICAgIGlmICh0aGlzLl9tYXJnaW5zKSB7XG4gICAgICB0aGlzLl9tYXJnaW5zLmxlZnQgPSBNYXRoLm1heCh0aGlzLnBhZGRpbmdMZWZ0LCB0aGlzLl9tYXJnaW5zLmxlZnQpO1xuICAgICAgdGhpcy5fbWFyZ2lucy50b3AgPSBNYXRoLm1heCh0aGlzLnBhZGRpbmdUb3AsIHRoaXMuX21hcmdpbnMudG9wKTtcbiAgICAgIHRoaXMuX21hcmdpbnMucmlnaHQgPSBNYXRoLm1heCh0aGlzLnBhZGRpbmdSaWdodCwgdGhpcy5fbWFyZ2lucy5yaWdodCk7XG4gICAgICB0aGlzLl9tYXJnaW5zLmJvdHRvbSA9IE1hdGgubWF4KHRoaXMucGFkZGluZ0JvdHRvbSwgdGhpcy5fbWFyZ2lucy5ib3R0b20pO1xuICAgIH1cbiAgfVxuICBhZnRlckZpdCgpIHtcbiAgICBjYWxsYmFjayh0aGlzLm9wdGlvbnMuYWZ0ZXJGaXQsIFt0aGlzXSk7XG4gIH1cbiAgaXNIb3Jpem9udGFsKCkge1xuICAgIGNvbnN0IHtheGlzLCBwb3NpdGlvbn0gPSB0aGlzLm9wdGlvbnM7XG4gICAgcmV0dXJuIHBvc2l0aW9uID09PSAndG9wJyB8fCBwb3NpdGlvbiA9PT0gJ2JvdHRvbScgfHwgYXhpcyA9PT0gJ3gnO1xuICB9XG4gIGlzRnVsbFNpemUoKSB7XG4gICAgcmV0dXJuIHRoaXMub3B0aW9ucy5mdWxsU2l6ZTtcbiAgfVxuICBfY29udmVydFRpY2tzVG9MYWJlbHModGlja3MpIHtcbiAgICB0aGlzLmJlZm9yZVRpY2tUb0xhYmVsQ29udmVyc2lvbigpO1xuICAgIHRoaXMuZ2VuZXJhdGVUaWNrTGFiZWxzKHRpY2tzKTtcbiAgICBsZXQgaSwgaWxlbjtcbiAgICBmb3IgKGkgPSAwLCBpbGVuID0gdGlja3MubGVuZ3RoOyBpIDwgaWxlbjsgaSsrKSB7XG4gICAgICBpZiAoaXNOdWxsT3JVbmRlZih0aWNrc1tpXS5sYWJlbCkpIHtcbiAgICAgICAgdGlja3Muc3BsaWNlKGksIDEpO1xuICAgICAgICBpbGVuLS07XG4gICAgICAgIGktLTtcbiAgICAgIH1cbiAgICB9XG4gICAgdGhpcy5hZnRlclRpY2tUb0xhYmVsQ29udmVyc2lvbigpO1xuICB9XG4gIF9nZXRMYWJlbFNpemVzKCkge1xuICAgIGxldCBsYWJlbFNpemVzID0gdGhpcy5fbGFiZWxTaXplcztcbiAgICBpZiAoIWxhYmVsU2l6ZXMpIHtcbiAgICAgIGNvbnN0IHNhbXBsZVNpemUgPSB0aGlzLm9wdGlvbnMudGlja3Muc2FtcGxlU2l6ZTtcbiAgICAgIGxldCB0aWNrcyA9IHRoaXMudGlja3M7XG4gICAgICBpZiAoc2FtcGxlU2l6ZSA8IHRpY2tzLmxlbmd0aCkge1xuICAgICAgICB0aWNrcyA9IHNhbXBsZSh0aWNrcywgc2FtcGxlU2l6ZSk7XG4gICAgICB9XG4gICAgICB0aGlzLl9sYWJlbFNpemVzID0gbGFiZWxTaXplcyA9IHRoaXMuX2NvbXB1dGVMYWJlbFNpemVzKHRpY2tzLCB0aWNrcy5sZW5ndGgpO1xuICAgIH1cbiAgICByZXR1cm4gbGFiZWxTaXplcztcbiAgfVxuICBfY29tcHV0ZUxhYmVsU2l6ZXModGlja3MsIGxlbmd0aCkge1xuICAgIGNvbnN0IHtjdHgsIF9sb25nZXN0VGV4dENhY2hlOiBjYWNoZXN9ID0gdGhpcztcbiAgICBjb25zdCB3aWR0aHMgPSBbXTtcbiAgICBjb25zdCBoZWlnaHRzID0gW107XG4gICAgbGV0IHdpZGVzdExhYmVsU2l6ZSA9IDA7XG4gICAgbGV0IGhpZ2hlc3RMYWJlbFNpemUgPSAwO1xuICAgIGxldCBpLCBqLCBqbGVuLCBsYWJlbCwgdGlja0ZvbnQsIGZvbnRTdHJpbmcsIGNhY2hlLCBsaW5lSGVpZ2h0LCB3aWR0aCwgaGVpZ2h0LCBuZXN0ZWRMYWJlbDtcbiAgICBmb3IgKGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHtcbiAgICAgIGxhYmVsID0gdGlja3NbaV0ubGFiZWw7XG4gICAgICB0aWNrRm9udCA9IHRoaXMuX3Jlc29sdmVUaWNrRm9udE9wdGlvbnMoaSk7XG4gICAgICBjdHguZm9udCA9IGZvbnRTdHJpbmcgPSB0aWNrRm9udC5zdHJpbmc7XG4gICAgICBjYWNoZSA9IGNhY2hlc1tmb250U3RyaW5nXSA9IGNhY2hlc1tmb250U3RyaW5nXSB8fCB7ZGF0YToge30sIGdjOiBbXX07XG4gICAgICBsaW5lSGVpZ2h0ID0gdGlja0ZvbnQubGluZUhlaWdodDtcbiAgICAgIHdpZHRoID0gaGVpZ2h0ID0gMDtcbiAgICAgIGlmICghaXNOdWxsT3JVbmRlZihsYWJlbCkgJiYgIWlzQXJyYXkobGFiZWwpKSB7XG4gICAgICAgIHdpZHRoID0gX21lYXN1cmVUZXh0KGN0eCwgY2FjaGUuZGF0YSwgY2FjaGUuZ2MsIHdpZHRoLCBsYWJlbCk7XG4gICAgICAgIGhlaWdodCA9IGxpbmVIZWlnaHQ7XG4gICAgICB9IGVsc2UgaWYgKGlzQXJyYXkobGFiZWwpKSB7XG4gICAgICAgIGZvciAoaiA9IDAsIGpsZW4gPSBsYWJlbC5sZW5ndGg7IGogPCBqbGVuOyArK2opIHtcbiAgICAgICAgICBuZXN0ZWRMYWJlbCA9IGxhYmVsW2pdO1xuICAgICAgICAgIGlmICghaXNOdWxsT3JVbmRlZihuZXN0ZWRMYWJlbCkgJiYgIWlzQXJyYXkobmVzdGVkTGFiZWwpKSB7XG4gICAgICAgICAgICB3aWR0aCA9IF9tZWFzdXJlVGV4dChjdHgsIGNhY2hlLmRhdGEsIGNhY2hlLmdjLCB3aWR0aCwgbmVzdGVkTGFiZWwpO1xuICAgICAgICAgICAgaGVpZ2h0ICs9IGxpbmVIZWlnaHQ7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICB3aWR0aHMucHVzaCh3aWR0aCk7XG4gICAgICBoZWlnaHRzLnB1c2goaGVpZ2h0KTtcbiAgICAgIHdpZGVzdExhYmVsU2l6ZSA9IE1hdGgubWF4KHdpZHRoLCB3aWRlc3RMYWJlbFNpemUpO1xuICAgICAgaGlnaGVzdExhYmVsU2l6ZSA9IE1hdGgubWF4KGhlaWdodCwgaGlnaGVzdExhYmVsU2l6ZSk7XG4gICAgfVxuICAgIGdhcmJhZ2VDb2xsZWN0KGNhY2hlcywgbGVuZ3RoKTtcbiAgICBjb25zdCB3aWRlc3QgPSB3aWR0aHMuaW5kZXhPZih3aWRlc3RMYWJlbFNpemUpO1xuICAgIGNvbnN0IGhpZ2hlc3QgPSBoZWlnaHRzLmluZGV4T2YoaGlnaGVzdExhYmVsU2l6ZSk7XG4gICAgY29uc3QgdmFsdWVBdCA9IChpZHgpID0+ICh7d2lkdGg6IHdpZHRoc1tpZHhdIHx8IDAsIGhlaWdodDogaGVpZ2h0c1tpZHhdIHx8IDB9KTtcbiAgICByZXR1cm4ge1xuICAgICAgZmlyc3Q6IHZhbHVlQXQoMCksXG4gICAgICBsYXN0OiB2YWx1ZUF0KGxlbmd0aCAtIDEpLFxuICAgICAgd2lkZXN0OiB2YWx1ZUF0KHdpZGVzdCksXG4gICAgICBoaWdoZXN0OiB2YWx1ZUF0KGhpZ2hlc3QpLFxuICAgICAgd2lkdGhzLFxuICAgICAgaGVpZ2h0cyxcbiAgICB9O1xuICB9XG4gIGdldExhYmVsRm9yVmFsdWUodmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cbiAgZ2V0UGl4ZWxGb3JWYWx1ZSh2YWx1ZSwgaW5kZXgpIHtcbiAgICByZXR1cm4gTmFOO1xuICB9XG4gIGdldFZhbHVlRm9yUGl4ZWwocGl4ZWwpIHt9XG4gIGdldFBpeGVsRm9yVGljayhpbmRleCkge1xuICAgIGNvbnN0IHRpY2tzID0gdGhpcy50aWNrcztcbiAgICBpZiAoaW5kZXggPCAwIHx8IGluZGV4ID4gdGlja3MubGVuZ3RoIC0gMSkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLmdldFBpeGVsRm9yVmFsdWUodGlja3NbaW5kZXhdLnZhbHVlKTtcbiAgfVxuICBnZXRQaXhlbEZvckRlY2ltYWwoZGVjaW1hbCkge1xuICAgIGlmICh0aGlzLl9yZXZlcnNlUGl4ZWxzKSB7XG4gICAgICBkZWNpbWFsID0gMSAtIGRlY2ltYWw7XG4gICAgfVxuICAgIGNvbnN0IHBpeGVsID0gdGhpcy5fc3RhcnRQaXhlbCArIGRlY2ltYWwgKiB0aGlzLl9sZW5ndGg7XG4gICAgcmV0dXJuIF9pbnQxNlJhbmdlKHRoaXMuX2FsaWduVG9QaXhlbHMgPyBfYWxpZ25QaXhlbCh0aGlzLmNoYXJ0LCBwaXhlbCwgMCkgOiBwaXhlbCk7XG4gIH1cbiAgZ2V0RGVjaW1hbEZvclBpeGVsKHBpeGVsKSB7XG4gICAgY29uc3QgZGVjaW1hbCA9IChwaXhlbCAtIHRoaXMuX3N0YXJ0UGl4ZWwpIC8gdGhpcy5fbGVuZ3RoO1xuICAgIHJldHVybiB0aGlzLl9yZXZlcnNlUGl4ZWxzID8gMSAtIGRlY2ltYWwgOiBkZWNpbWFsO1xuICB9XG4gIGdldEJhc2VQaXhlbCgpIHtcbiAgICByZXR1cm4gdGhpcy5nZXRQaXhlbEZvclZhbHVlKHRoaXMuZ2V0QmFzZVZhbHVlKCkpO1xuICB9XG4gIGdldEJhc2VWYWx1ZSgpIHtcbiAgICBjb25zdCB7bWluLCBtYXh9ID0gdGhpcztcbiAgICByZXR1cm4gbWluIDwgMCAmJiBtYXggPCAwID8gbWF4IDpcbiAgICAgIG1pbiA+IDAgJiYgbWF4ID4gMCA/IG1pbiA6XG4gICAgICAwO1xuICB9XG4gIGdldENvbnRleHQoaW5kZXgpIHtcbiAgICBjb25zdCB0aWNrcyA9IHRoaXMudGlja3MgfHwgW107XG4gICAgaWYgKGluZGV4ID49IDAgJiYgaW5kZXggPCB0aWNrcy5sZW5ndGgpIHtcbiAgICAgIGNvbnN0IHRpY2sgPSB0aWNrc1tpbmRleF07XG4gICAgICByZXR1cm4gdGljay4kY29udGV4dCB8fFxuXHRcdFx0XHQodGljay4kY29udGV4dCA9IGNyZWF0ZVRpY2tDb250ZXh0KHRoaXMuZ2V0Q29udGV4dCgpLCBpbmRleCwgdGljaykpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy4kY29udGV4dCB8fFxuXHRcdFx0KHRoaXMuJGNvbnRleHQgPSBjcmVhdGVTY2FsZUNvbnRleHQodGhpcy5jaGFydC5nZXRDb250ZXh0KCksIHRoaXMpKTtcbiAgfVxuICBfdGlja1NpemUoKSB7XG4gICAgY29uc3Qgb3B0aW9uVGlja3MgPSB0aGlzLm9wdGlvbnMudGlja3M7XG4gICAgY29uc3Qgcm90ID0gdG9SYWRpYW5zKHRoaXMubGFiZWxSb3RhdGlvbik7XG4gICAgY29uc3QgY29zID0gTWF0aC5hYnMoTWF0aC5jb3Mocm90KSk7XG4gICAgY29uc3Qgc2luID0gTWF0aC5hYnMoTWF0aC5zaW4ocm90KSk7XG4gICAgY29uc3QgbGFiZWxTaXplcyA9IHRoaXMuX2dldExhYmVsU2l6ZXMoKTtcbiAgICBjb25zdCBwYWRkaW5nID0gb3B0aW9uVGlja3MuYXV0b1NraXBQYWRkaW5nIHx8IDA7XG4gICAgY29uc3QgdyA9IGxhYmVsU2l6ZXMgPyBsYWJlbFNpemVzLndpZGVzdC53aWR0aCArIHBhZGRpbmcgOiAwO1xuICAgIGNvbnN0IGggPSBsYWJlbFNpemVzID8gbGFiZWxTaXplcy5oaWdoZXN0LmhlaWdodCArIHBhZGRpbmcgOiAwO1xuICAgIHJldHVybiB0aGlzLmlzSG9yaXpvbnRhbCgpXG4gICAgICA/IGggKiBjb3MgPiB3ICogc2luID8gdyAvIGNvcyA6IGggLyBzaW5cbiAgICAgIDogaCAqIHNpbiA8IHcgKiBjb3MgPyBoIC8gY29zIDogdyAvIHNpbjtcbiAgfVxuICBfaXNWaXNpYmxlKCkge1xuICAgIGNvbnN0IGRpc3BsYXkgPSB0aGlzLm9wdGlvbnMuZGlzcGxheTtcbiAgICBpZiAoZGlzcGxheSAhPT0gJ2F1dG8nKSB7XG4gICAgICByZXR1cm4gISFkaXNwbGF5O1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5nZXRNYXRjaGluZ1Zpc2libGVNZXRhcygpLmxlbmd0aCA+IDA7XG4gIH1cbiAgX2NvbXB1dGVHcmlkTGluZUl0ZW1zKGNoYXJ0QXJlYSkge1xuICAgIGNvbnN0IGF4aXMgPSB0aGlzLmF4aXM7XG4gICAgY29uc3QgY2hhcnQgPSB0aGlzLmNoYXJ0O1xuICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG4gICAgY29uc3Qge2dyaWQsIHBvc2l0aW9ufSA9IG9wdGlvbnM7XG4gICAgY29uc3Qgb2Zmc2V0ID0gZ3JpZC5vZmZzZXQ7XG4gICAgY29uc3QgaXNIb3Jpem9udGFsID0gdGhpcy5pc0hvcml6b250YWwoKTtcbiAgICBjb25zdCB0aWNrcyA9IHRoaXMudGlja3M7XG4gICAgY29uc3QgdGlja3NMZW5ndGggPSB0aWNrcy5sZW5ndGggKyAob2Zmc2V0ID8gMSA6IDApO1xuICAgIGNvbnN0IHRsID0gZ2V0VGlja01hcmtMZW5ndGgoZ3JpZCk7XG4gICAgY29uc3QgaXRlbXMgPSBbXTtcbiAgICBjb25zdCBib3JkZXJPcHRzID0gZ3JpZC5zZXRDb250ZXh0KHRoaXMuZ2V0Q29udGV4dCgpKTtcbiAgICBjb25zdCBheGlzV2lkdGggPSBib3JkZXJPcHRzLmRyYXdCb3JkZXIgPyBib3JkZXJPcHRzLmJvcmRlcldpZHRoIDogMDtcbiAgICBjb25zdCBheGlzSGFsZldpZHRoID0gYXhpc1dpZHRoIC8gMjtcbiAgICBjb25zdCBhbGlnbkJvcmRlclZhbHVlID0gZnVuY3Rpb24ocGl4ZWwpIHtcbiAgICAgIHJldHVybiBfYWxpZ25QaXhlbChjaGFydCwgcGl4ZWwsIGF4aXNXaWR0aCk7XG4gICAgfTtcbiAgICBsZXQgYm9yZGVyVmFsdWUsIGksIGxpbmVWYWx1ZSwgYWxpZ25lZExpbmVWYWx1ZTtcbiAgICBsZXQgdHgxLCB0eTEsIHR4MiwgdHkyLCB4MSwgeTEsIHgyLCB5MjtcbiAgICBpZiAocG9zaXRpb24gPT09ICd0b3AnKSB7XG4gICAgICBib3JkZXJWYWx1ZSA9IGFsaWduQm9yZGVyVmFsdWUodGhpcy5ib3R0b20pO1xuICAgICAgdHkxID0gdGhpcy5ib3R0b20gLSB0bDtcbiAgICAgIHR5MiA9IGJvcmRlclZhbHVlIC0gYXhpc0hhbGZXaWR0aDtcbiAgICAgIHkxID0gYWxpZ25Cb3JkZXJWYWx1ZShjaGFydEFyZWEudG9wKSArIGF4aXNIYWxmV2lkdGg7XG4gICAgICB5MiA9IGNoYXJ0QXJlYS5ib3R0b207XG4gICAgfSBlbHNlIGlmIChwb3NpdGlvbiA9PT0gJ2JvdHRvbScpIHtcbiAgICAgIGJvcmRlclZhbHVlID0gYWxpZ25Cb3JkZXJWYWx1ZSh0aGlzLnRvcCk7XG4gICAgICB5MSA9IGNoYXJ0QXJlYS50b3A7XG4gICAgICB5MiA9IGFsaWduQm9yZGVyVmFsdWUoY2hhcnRBcmVhLmJvdHRvbSkgLSBheGlzSGFsZldpZHRoO1xuICAgICAgdHkxID0gYm9yZGVyVmFsdWUgKyBheGlzSGFsZldpZHRoO1xuICAgICAgdHkyID0gdGhpcy50b3AgKyB0bDtcbiAgICB9IGVsc2UgaWYgKHBvc2l0aW9uID09PSAnbGVmdCcpIHtcbiAgICAgIGJvcmRlclZhbHVlID0gYWxpZ25Cb3JkZXJWYWx1ZSh0aGlzLnJpZ2h0KTtcbiAgICAgIHR4MSA9IHRoaXMucmlnaHQgLSB0bDtcbiAgICAgIHR4MiA9IGJvcmRlclZhbHVlIC0gYXhpc0hhbGZXaWR0aDtcbiAgICAgIHgxID0gYWxpZ25Cb3JkZXJWYWx1ZShjaGFydEFyZWEubGVmdCkgKyBheGlzSGFsZldpZHRoO1xuICAgICAgeDIgPSBjaGFydEFyZWEucmlnaHQ7XG4gICAgfSBlbHNlIGlmIChwb3NpdGlvbiA9PT0gJ3JpZ2h0Jykge1xuICAgICAgYm9yZGVyVmFsdWUgPSBhbGlnbkJvcmRlclZhbHVlKHRoaXMubGVmdCk7XG4gICAgICB4MSA9IGNoYXJ0QXJlYS5sZWZ0O1xuICAgICAgeDIgPSBhbGlnbkJvcmRlclZhbHVlKGNoYXJ0QXJlYS5yaWdodCkgLSBheGlzSGFsZldpZHRoO1xuICAgICAgdHgxID0gYm9yZGVyVmFsdWUgKyBheGlzSGFsZldpZHRoO1xuICAgICAgdHgyID0gdGhpcy5sZWZ0ICsgdGw7XG4gICAgfSBlbHNlIGlmIChheGlzID09PSAneCcpIHtcbiAgICAgIGlmIChwb3NpdGlvbiA9PT0gJ2NlbnRlcicpIHtcbiAgICAgICAgYm9yZGVyVmFsdWUgPSBhbGlnbkJvcmRlclZhbHVlKChjaGFydEFyZWEudG9wICsgY2hhcnRBcmVhLmJvdHRvbSkgLyAyICsgMC41KTtcbiAgICAgIH0gZWxzZSBpZiAoaXNPYmplY3QocG9zaXRpb24pKSB7XG4gICAgICAgIGNvbnN0IHBvc2l0aW9uQXhpc0lEID0gT2JqZWN0LmtleXMocG9zaXRpb24pWzBdO1xuICAgICAgICBjb25zdCB2YWx1ZSA9IHBvc2l0aW9uW3Bvc2l0aW9uQXhpc0lEXTtcbiAgICAgICAgYm9yZGVyVmFsdWUgPSBhbGlnbkJvcmRlclZhbHVlKHRoaXMuY2hhcnQuc2NhbGVzW3Bvc2l0aW9uQXhpc0lEXS5nZXRQaXhlbEZvclZhbHVlKHZhbHVlKSk7XG4gICAgICB9XG4gICAgICB5MSA9IGNoYXJ0QXJlYS50b3A7XG4gICAgICB5MiA9IGNoYXJ0QXJlYS5ib3R0b207XG4gICAgICB0eTEgPSBib3JkZXJWYWx1ZSArIGF4aXNIYWxmV2lkdGg7XG4gICAgICB0eTIgPSB0eTEgKyB0bDtcbiAgICB9IGVsc2UgaWYgKGF4aXMgPT09ICd5Jykge1xuICAgICAgaWYgKHBvc2l0aW9uID09PSAnY2VudGVyJykge1xuICAgICAgICBib3JkZXJWYWx1ZSA9IGFsaWduQm9yZGVyVmFsdWUoKGNoYXJ0QXJlYS5sZWZ0ICsgY2hhcnRBcmVhLnJpZ2h0KSAvIDIpO1xuICAgICAgfSBlbHNlIGlmIChpc09iamVjdChwb3NpdGlvbikpIHtcbiAgICAgICAgY29uc3QgcG9zaXRpb25BeGlzSUQgPSBPYmplY3Qua2V5cyhwb3NpdGlvbilbMF07XG4gICAgICAgIGNvbnN0IHZhbHVlID0gcG9zaXRpb25bcG9zaXRpb25BeGlzSURdO1xuICAgICAgICBib3JkZXJWYWx1ZSA9IGFsaWduQm9yZGVyVmFsdWUodGhpcy5jaGFydC5zY2FsZXNbcG9zaXRpb25BeGlzSURdLmdldFBpeGVsRm9yVmFsdWUodmFsdWUpKTtcbiAgICAgIH1cbiAgICAgIHR4MSA9IGJvcmRlclZhbHVlIC0gYXhpc0hhbGZXaWR0aDtcbiAgICAgIHR4MiA9IHR4MSAtIHRsO1xuICAgICAgeDEgPSBjaGFydEFyZWEubGVmdDtcbiAgICAgIHgyID0gY2hhcnRBcmVhLnJpZ2h0O1xuICAgIH1cbiAgICBjb25zdCBsaW1pdCA9IHZhbHVlT3JEZWZhdWx0KG9wdGlvbnMudGlja3MubWF4VGlja3NMaW1pdCwgdGlja3NMZW5ndGgpO1xuICAgIGNvbnN0IHN0ZXAgPSBNYXRoLm1heCgxLCBNYXRoLmNlaWwodGlja3NMZW5ndGggLyBsaW1pdCkpO1xuICAgIGZvciAoaSA9IDA7IGkgPCB0aWNrc0xlbmd0aDsgaSArPSBzdGVwKSB7XG4gICAgICBjb25zdCBvcHRzQXRJbmRleCA9IGdyaWQuc2V0Q29udGV4dCh0aGlzLmdldENvbnRleHQoaSkpO1xuICAgICAgY29uc3QgbGluZVdpZHRoID0gb3B0c0F0SW5kZXgubGluZVdpZHRoO1xuICAgICAgY29uc3QgbGluZUNvbG9yID0gb3B0c0F0SW5kZXguY29sb3I7XG4gICAgICBjb25zdCBib3JkZXJEYXNoID0gZ3JpZC5ib3JkZXJEYXNoIHx8IFtdO1xuICAgICAgY29uc3QgYm9yZGVyRGFzaE9mZnNldCA9IG9wdHNBdEluZGV4LmJvcmRlckRhc2hPZmZzZXQ7XG4gICAgICBjb25zdCB0aWNrV2lkdGggPSBvcHRzQXRJbmRleC50aWNrV2lkdGg7XG4gICAgICBjb25zdCB0aWNrQ29sb3IgPSBvcHRzQXRJbmRleC50aWNrQ29sb3I7XG4gICAgICBjb25zdCB0aWNrQm9yZGVyRGFzaCA9IG9wdHNBdEluZGV4LnRpY2tCb3JkZXJEYXNoIHx8IFtdO1xuICAgICAgY29uc3QgdGlja0JvcmRlckRhc2hPZmZzZXQgPSBvcHRzQXRJbmRleC50aWNrQm9yZGVyRGFzaE9mZnNldDtcbiAgICAgIGxpbmVWYWx1ZSA9IGdldFBpeGVsRm9yR3JpZExpbmUodGhpcywgaSwgb2Zmc2V0KTtcbiAgICAgIGlmIChsaW5lVmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIGFsaWduZWRMaW5lVmFsdWUgPSBfYWxpZ25QaXhlbChjaGFydCwgbGluZVZhbHVlLCBsaW5lV2lkdGgpO1xuICAgICAgaWYgKGlzSG9yaXpvbnRhbCkge1xuICAgICAgICB0eDEgPSB0eDIgPSB4MSA9IHgyID0gYWxpZ25lZExpbmVWYWx1ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHR5MSA9IHR5MiA9IHkxID0geTIgPSBhbGlnbmVkTGluZVZhbHVlO1xuICAgICAgfVxuICAgICAgaXRlbXMucHVzaCh7XG4gICAgICAgIHR4MSxcbiAgICAgICAgdHkxLFxuICAgICAgICB0eDIsXG4gICAgICAgIHR5MixcbiAgICAgICAgeDEsXG4gICAgICAgIHkxLFxuICAgICAgICB4MixcbiAgICAgICAgeTIsXG4gICAgICAgIHdpZHRoOiBsaW5lV2lkdGgsXG4gICAgICAgIGNvbG9yOiBsaW5lQ29sb3IsXG4gICAgICAgIGJvcmRlckRhc2gsXG4gICAgICAgIGJvcmRlckRhc2hPZmZzZXQsXG4gICAgICAgIHRpY2tXaWR0aCxcbiAgICAgICAgdGlja0NvbG9yLFxuICAgICAgICB0aWNrQm9yZGVyRGFzaCxcbiAgICAgICAgdGlja0JvcmRlckRhc2hPZmZzZXQsXG4gICAgICB9KTtcbiAgICB9XG4gICAgdGhpcy5fdGlja3NMZW5ndGggPSB0aWNrc0xlbmd0aDtcbiAgICB0aGlzLl9ib3JkZXJWYWx1ZSA9IGJvcmRlclZhbHVlO1xuICAgIHJldHVybiBpdGVtcztcbiAgfVxuICBfY29tcHV0ZUxhYmVsSXRlbXMoY2hhcnRBcmVhKSB7XG4gICAgY29uc3QgYXhpcyA9IHRoaXMuYXhpcztcbiAgICBjb25zdCBvcHRpb25zID0gdGhpcy5vcHRpb25zO1xuICAgIGNvbnN0IHtwb3NpdGlvbiwgdGlja3M6IG9wdGlvblRpY2tzfSA9IG9wdGlvbnM7XG4gICAgY29uc3QgaXNIb3Jpem9udGFsID0gdGhpcy5pc0hvcml6b250YWwoKTtcbiAgICBjb25zdCB0aWNrcyA9IHRoaXMudGlja3M7XG4gICAgY29uc3Qge2FsaWduLCBjcm9zc0FsaWduLCBwYWRkaW5nLCBtaXJyb3J9ID0gb3B0aW9uVGlja3M7XG4gICAgY29uc3QgdGwgPSBnZXRUaWNrTWFya0xlbmd0aChvcHRpb25zLmdyaWQpO1xuICAgIGNvbnN0IHRpY2tBbmRQYWRkaW5nID0gdGwgKyBwYWRkaW5nO1xuICAgIGNvbnN0IGhUaWNrQW5kUGFkZGluZyA9IG1pcnJvciA/IC1wYWRkaW5nIDogdGlja0FuZFBhZGRpbmc7XG4gICAgY29uc3Qgcm90YXRpb24gPSAtdG9SYWRpYW5zKHRoaXMubGFiZWxSb3RhdGlvbik7XG4gICAgY29uc3QgaXRlbXMgPSBbXTtcbiAgICBsZXQgaSwgaWxlbiwgdGljaywgbGFiZWwsIHgsIHksIHRleHRBbGlnbiwgcGl4ZWwsIGZvbnQsIGxpbmVIZWlnaHQsIGxpbmVDb3VudCwgdGV4dE9mZnNldDtcbiAgICBsZXQgdGV4dEJhc2VsaW5lID0gJ21pZGRsZSc7XG4gICAgaWYgKHBvc2l0aW9uID09PSAndG9wJykge1xuICAgICAgeSA9IHRoaXMuYm90dG9tIC0gaFRpY2tBbmRQYWRkaW5nO1xuICAgICAgdGV4dEFsaWduID0gdGhpcy5fZ2V0WEF4aXNMYWJlbEFsaWdubWVudCgpO1xuICAgIH0gZWxzZSBpZiAocG9zaXRpb24gPT09ICdib3R0b20nKSB7XG4gICAgICB5ID0gdGhpcy50b3AgKyBoVGlja0FuZFBhZGRpbmc7XG4gICAgICB0ZXh0QWxpZ24gPSB0aGlzLl9nZXRYQXhpc0xhYmVsQWxpZ25tZW50KCk7XG4gICAgfSBlbHNlIGlmIChwb3NpdGlvbiA9PT0gJ2xlZnQnKSB7XG4gICAgICBjb25zdCByZXQgPSB0aGlzLl9nZXRZQXhpc0xhYmVsQWxpZ25tZW50KHRsKTtcbiAgICAgIHRleHRBbGlnbiA9IHJldC50ZXh0QWxpZ247XG4gICAgICB4ID0gcmV0Lng7XG4gICAgfSBlbHNlIGlmIChwb3NpdGlvbiA9PT0gJ3JpZ2h0Jykge1xuICAgICAgY29uc3QgcmV0ID0gdGhpcy5fZ2V0WUF4aXNMYWJlbEFsaWdubWVudCh0bCk7XG4gICAgICB0ZXh0QWxpZ24gPSByZXQudGV4dEFsaWduO1xuICAgICAgeCA9IHJldC54O1xuICAgIH0gZWxzZSBpZiAoYXhpcyA9PT0gJ3gnKSB7XG4gICAgICBpZiAocG9zaXRpb24gPT09ICdjZW50ZXInKSB7XG4gICAgICAgIHkgPSAoKGNoYXJ0QXJlYS50b3AgKyBjaGFydEFyZWEuYm90dG9tKSAvIDIpICsgdGlja0FuZFBhZGRpbmc7XG4gICAgICB9IGVsc2UgaWYgKGlzT2JqZWN0KHBvc2l0aW9uKSkge1xuICAgICAgICBjb25zdCBwb3NpdGlvbkF4aXNJRCA9IE9iamVjdC5rZXlzKHBvc2l0aW9uKVswXTtcbiAgICAgICAgY29uc3QgdmFsdWUgPSBwb3NpdGlvbltwb3NpdGlvbkF4aXNJRF07XG4gICAgICAgIHkgPSB0aGlzLmNoYXJ0LnNjYWxlc1twb3NpdGlvbkF4aXNJRF0uZ2V0UGl4ZWxGb3JWYWx1ZSh2YWx1ZSkgKyB0aWNrQW5kUGFkZGluZztcbiAgICAgIH1cbiAgICAgIHRleHRBbGlnbiA9IHRoaXMuX2dldFhBeGlzTGFiZWxBbGlnbm1lbnQoKTtcbiAgICB9IGVsc2UgaWYgKGF4aXMgPT09ICd5Jykge1xuICAgICAgaWYgKHBvc2l0aW9uID09PSAnY2VudGVyJykge1xuICAgICAgICB4ID0gKChjaGFydEFyZWEubGVmdCArIGNoYXJ0QXJlYS5yaWdodCkgLyAyKSAtIHRpY2tBbmRQYWRkaW5nO1xuICAgICAgfSBlbHNlIGlmIChpc09iamVjdChwb3NpdGlvbikpIHtcbiAgICAgICAgY29uc3QgcG9zaXRpb25BeGlzSUQgPSBPYmplY3Qua2V5cyhwb3NpdGlvbilbMF07XG4gICAgICAgIGNvbnN0IHZhbHVlID0gcG9zaXRpb25bcG9zaXRpb25BeGlzSURdO1xuICAgICAgICB4ID0gdGhpcy5jaGFydC5zY2FsZXNbcG9zaXRpb25BeGlzSURdLmdldFBpeGVsRm9yVmFsdWUodmFsdWUpO1xuICAgICAgfVxuICAgICAgdGV4dEFsaWduID0gdGhpcy5fZ2V0WUF4aXNMYWJlbEFsaWdubWVudCh0bCkudGV4dEFsaWduO1xuICAgIH1cbiAgICBpZiAoYXhpcyA9PT0gJ3knKSB7XG4gICAgICBpZiAoYWxpZ24gPT09ICdzdGFydCcpIHtcbiAgICAgICAgdGV4dEJhc2VsaW5lID0gJ3RvcCc7XG4gICAgICB9IGVsc2UgaWYgKGFsaWduID09PSAnZW5kJykge1xuICAgICAgICB0ZXh0QmFzZWxpbmUgPSAnYm90dG9tJztcbiAgICAgIH1cbiAgICB9XG4gICAgY29uc3QgbGFiZWxTaXplcyA9IHRoaXMuX2dldExhYmVsU2l6ZXMoKTtcbiAgICBmb3IgKGkgPSAwLCBpbGVuID0gdGlja3MubGVuZ3RoOyBpIDwgaWxlbjsgKytpKSB7XG4gICAgICB0aWNrID0gdGlja3NbaV07XG4gICAgICBsYWJlbCA9IHRpY2subGFiZWw7XG4gICAgICBjb25zdCBvcHRzQXRJbmRleCA9IG9wdGlvblRpY2tzLnNldENvbnRleHQodGhpcy5nZXRDb250ZXh0KGkpKTtcbiAgICAgIHBpeGVsID0gdGhpcy5nZXRQaXhlbEZvclRpY2soaSkgKyBvcHRpb25UaWNrcy5sYWJlbE9mZnNldDtcbiAgICAgIGZvbnQgPSB0aGlzLl9yZXNvbHZlVGlja0ZvbnRPcHRpb25zKGkpO1xuICAgICAgbGluZUhlaWdodCA9IGZvbnQubGluZUhlaWdodDtcbiAgICAgIGxpbmVDb3VudCA9IGlzQXJyYXkobGFiZWwpID8gbGFiZWwubGVuZ3RoIDogMTtcbiAgICAgIGNvbnN0IGhhbGZDb3VudCA9IGxpbmVDb3VudCAvIDI7XG4gICAgICBjb25zdCBjb2xvciA9IG9wdHNBdEluZGV4LmNvbG9yO1xuICAgICAgY29uc3Qgc3Ryb2tlQ29sb3IgPSBvcHRzQXRJbmRleC50ZXh0U3Ryb2tlQ29sb3I7XG4gICAgICBjb25zdCBzdHJva2VXaWR0aCA9IG9wdHNBdEluZGV4LnRleHRTdHJva2VXaWR0aDtcbiAgICAgIGlmIChpc0hvcml6b250YWwpIHtcbiAgICAgICAgeCA9IHBpeGVsO1xuICAgICAgICBpZiAocG9zaXRpb24gPT09ICd0b3AnKSB7XG4gICAgICAgICAgaWYgKGNyb3NzQWxpZ24gPT09ICduZWFyJyB8fCByb3RhdGlvbiAhPT0gMCkge1xuICAgICAgICAgICAgdGV4dE9mZnNldCA9IC1saW5lQ291bnQgKiBsaW5lSGVpZ2h0ICsgbGluZUhlaWdodCAvIDI7XG4gICAgICAgICAgfSBlbHNlIGlmIChjcm9zc0FsaWduID09PSAnY2VudGVyJykge1xuICAgICAgICAgICAgdGV4dE9mZnNldCA9IC1sYWJlbFNpemVzLmhpZ2hlc3QuaGVpZ2h0IC8gMiAtIGhhbGZDb3VudCAqIGxpbmVIZWlnaHQgKyBsaW5lSGVpZ2h0O1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0ZXh0T2Zmc2V0ID0gLWxhYmVsU2l6ZXMuaGlnaGVzdC5oZWlnaHQgKyBsaW5lSGVpZ2h0IC8gMjtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKGNyb3NzQWxpZ24gPT09ICduZWFyJyB8fCByb3RhdGlvbiAhPT0gMCkge1xuICAgICAgICAgICAgdGV4dE9mZnNldCA9IGxpbmVIZWlnaHQgLyAyO1xuICAgICAgICAgIH0gZWxzZSBpZiAoY3Jvc3NBbGlnbiA9PT0gJ2NlbnRlcicpIHtcbiAgICAgICAgICAgIHRleHRPZmZzZXQgPSBsYWJlbFNpemVzLmhpZ2hlc3QuaGVpZ2h0IC8gMiAtIGhhbGZDb3VudCAqIGxpbmVIZWlnaHQ7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRleHRPZmZzZXQgPSBsYWJlbFNpemVzLmhpZ2hlc3QuaGVpZ2h0IC0gbGluZUNvdW50ICogbGluZUhlaWdodDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1pcnJvcikge1xuICAgICAgICAgIHRleHRPZmZzZXQgKj0gLTE7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHkgPSBwaXhlbDtcbiAgICAgICAgdGV4dE9mZnNldCA9ICgxIC0gbGluZUNvdW50KSAqIGxpbmVIZWlnaHQgLyAyO1xuICAgICAgfVxuICAgICAgbGV0IGJhY2tkcm9wO1xuICAgICAgaWYgKG9wdHNBdEluZGV4LnNob3dMYWJlbEJhY2tkcm9wKSB7XG4gICAgICAgIGNvbnN0IGxhYmVsUGFkZGluZyA9IHRvUGFkZGluZyhvcHRzQXRJbmRleC5iYWNrZHJvcFBhZGRpbmcpO1xuICAgICAgICBjb25zdCBoZWlnaHQgPSBsYWJlbFNpemVzLmhlaWdodHNbaV07XG4gICAgICAgIGNvbnN0IHdpZHRoID0gbGFiZWxTaXplcy53aWR0aHNbaV07XG4gICAgICAgIGxldCB0b3AgPSB5ICsgdGV4dE9mZnNldCAtIGxhYmVsUGFkZGluZy50b3A7XG4gICAgICAgIGxldCBsZWZ0ID0geCAtIGxhYmVsUGFkZGluZy5sZWZ0O1xuICAgICAgICBzd2l0Y2ggKHRleHRCYXNlbGluZSkge1xuICAgICAgICBjYXNlICdtaWRkbGUnOlxuICAgICAgICAgIHRvcCAtPSBoZWlnaHQgLyAyO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdib3R0b20nOlxuICAgICAgICAgIHRvcCAtPSBoZWlnaHQ7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgc3dpdGNoICh0ZXh0QWxpZ24pIHtcbiAgICAgICAgY2FzZSAnY2VudGVyJzpcbiAgICAgICAgICBsZWZ0IC09IHdpZHRoIC8gMjtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAncmlnaHQnOlxuICAgICAgICAgIGxlZnQgLT0gd2lkdGg7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgYmFja2Ryb3AgPSB7XG4gICAgICAgICAgbGVmdCxcbiAgICAgICAgICB0b3AsXG4gICAgICAgICAgd2lkdGg6IHdpZHRoICsgbGFiZWxQYWRkaW5nLndpZHRoLFxuICAgICAgICAgIGhlaWdodDogaGVpZ2h0ICsgbGFiZWxQYWRkaW5nLmhlaWdodCxcbiAgICAgICAgICBjb2xvcjogb3B0c0F0SW5kZXguYmFja2Ryb3BDb2xvcixcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICAgIGl0ZW1zLnB1c2goe1xuICAgICAgICByb3RhdGlvbixcbiAgICAgICAgbGFiZWwsXG4gICAgICAgIGZvbnQsXG4gICAgICAgIGNvbG9yLFxuICAgICAgICBzdHJva2VDb2xvcixcbiAgICAgICAgc3Ryb2tlV2lkdGgsXG4gICAgICAgIHRleHRPZmZzZXQsXG4gICAgICAgIHRleHRBbGlnbixcbiAgICAgICAgdGV4dEJhc2VsaW5lLFxuICAgICAgICB0cmFuc2xhdGlvbjogW3gsIHldLFxuICAgICAgICBiYWNrZHJvcCxcbiAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gaXRlbXM7XG4gIH1cbiAgX2dldFhBeGlzTGFiZWxBbGlnbm1lbnQoKSB7XG4gICAgY29uc3Qge3Bvc2l0aW9uLCB0aWNrc30gPSB0aGlzLm9wdGlvbnM7XG4gICAgY29uc3Qgcm90YXRpb24gPSAtdG9SYWRpYW5zKHRoaXMubGFiZWxSb3RhdGlvbik7XG4gICAgaWYgKHJvdGF0aW9uKSB7XG4gICAgICByZXR1cm4gcG9zaXRpb24gPT09ICd0b3AnID8gJ2xlZnQnIDogJ3JpZ2h0JztcbiAgICB9XG4gICAgbGV0IGFsaWduID0gJ2NlbnRlcic7XG4gICAgaWYgKHRpY2tzLmFsaWduID09PSAnc3RhcnQnKSB7XG4gICAgICBhbGlnbiA9ICdsZWZ0JztcbiAgICB9IGVsc2UgaWYgKHRpY2tzLmFsaWduID09PSAnZW5kJykge1xuICAgICAgYWxpZ24gPSAncmlnaHQnO1xuICAgIH1cbiAgICByZXR1cm4gYWxpZ247XG4gIH1cbiAgX2dldFlBeGlzTGFiZWxBbGlnbm1lbnQodGwpIHtcbiAgICBjb25zdCB7cG9zaXRpb24sIHRpY2tzOiB7Y3Jvc3NBbGlnbiwgbWlycm9yLCBwYWRkaW5nfX0gPSB0aGlzLm9wdGlvbnM7XG4gICAgY29uc3QgbGFiZWxTaXplcyA9IHRoaXMuX2dldExhYmVsU2l6ZXMoKTtcbiAgICBjb25zdCB0aWNrQW5kUGFkZGluZyA9IHRsICsgcGFkZGluZztcbiAgICBjb25zdCB3aWRlc3QgPSBsYWJlbFNpemVzLndpZGVzdC53aWR0aDtcbiAgICBsZXQgdGV4dEFsaWduO1xuICAgIGxldCB4O1xuICAgIGlmIChwb3NpdGlvbiA9PT0gJ2xlZnQnKSB7XG4gICAgICBpZiAobWlycm9yKSB7XG4gICAgICAgIHggPSB0aGlzLnJpZ2h0ICsgcGFkZGluZztcbiAgICAgICAgaWYgKGNyb3NzQWxpZ24gPT09ICduZWFyJykge1xuICAgICAgICAgIHRleHRBbGlnbiA9ICdsZWZ0JztcbiAgICAgICAgfSBlbHNlIGlmIChjcm9zc0FsaWduID09PSAnY2VudGVyJykge1xuICAgICAgICAgIHRleHRBbGlnbiA9ICdjZW50ZXInO1xuICAgICAgICAgIHggKz0gKHdpZGVzdCAvIDIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRleHRBbGlnbiA9ICdyaWdodCc7XG4gICAgICAgICAgeCArPSB3aWRlc3Q7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHggPSB0aGlzLnJpZ2h0IC0gdGlja0FuZFBhZGRpbmc7XG4gICAgICAgIGlmIChjcm9zc0FsaWduID09PSAnbmVhcicpIHtcbiAgICAgICAgICB0ZXh0QWxpZ24gPSAncmlnaHQnO1xuICAgICAgICB9IGVsc2UgaWYgKGNyb3NzQWxpZ24gPT09ICdjZW50ZXInKSB7XG4gICAgICAgICAgdGV4dEFsaWduID0gJ2NlbnRlcic7XG4gICAgICAgICAgeCAtPSAod2lkZXN0IC8gMik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGV4dEFsaWduID0gJ2xlZnQnO1xuICAgICAgICAgIHggPSB0aGlzLmxlZnQ7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHBvc2l0aW9uID09PSAncmlnaHQnKSB7XG4gICAgICBpZiAobWlycm9yKSB7XG4gICAgICAgIHggPSB0aGlzLmxlZnQgKyBwYWRkaW5nO1xuICAgICAgICBpZiAoY3Jvc3NBbGlnbiA9PT0gJ25lYXInKSB7XG4gICAgICAgICAgdGV4dEFsaWduID0gJ3JpZ2h0JztcbiAgICAgICAgfSBlbHNlIGlmIChjcm9zc0FsaWduID09PSAnY2VudGVyJykge1xuICAgICAgICAgIHRleHRBbGlnbiA9ICdjZW50ZXInO1xuICAgICAgICAgIHggLT0gKHdpZGVzdCAvIDIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRleHRBbGlnbiA9ICdsZWZ0JztcbiAgICAgICAgICB4IC09IHdpZGVzdDtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgeCA9IHRoaXMubGVmdCArIHRpY2tBbmRQYWRkaW5nO1xuICAgICAgICBpZiAoY3Jvc3NBbGlnbiA9PT0gJ25lYXInKSB7XG4gICAgICAgICAgdGV4dEFsaWduID0gJ2xlZnQnO1xuICAgICAgICB9IGVsc2UgaWYgKGNyb3NzQWxpZ24gPT09ICdjZW50ZXInKSB7XG4gICAgICAgICAgdGV4dEFsaWduID0gJ2NlbnRlcic7XG4gICAgICAgICAgeCArPSB3aWRlc3QgLyAyO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRleHRBbGlnbiA9ICdyaWdodCc7XG4gICAgICAgICAgeCA9IHRoaXMucmlnaHQ7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdGV4dEFsaWduID0gJ3JpZ2h0JztcbiAgICB9XG4gICAgcmV0dXJuIHt0ZXh0QWxpZ24sIHh9O1xuICB9XG4gIF9jb21wdXRlTGFiZWxBcmVhKCkge1xuICAgIGlmICh0aGlzLm9wdGlvbnMudGlja3MubWlycm9yKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IGNoYXJ0ID0gdGhpcy5jaGFydDtcbiAgICBjb25zdCBwb3NpdGlvbiA9IHRoaXMub3B0aW9ucy5wb3NpdGlvbjtcbiAgICBpZiAocG9zaXRpb24gPT09ICdsZWZ0JyB8fCBwb3NpdGlvbiA9PT0gJ3JpZ2h0Jykge1xuICAgICAgcmV0dXJuIHt0b3A6IDAsIGxlZnQ6IHRoaXMubGVmdCwgYm90dG9tOiBjaGFydC5oZWlnaHQsIHJpZ2h0OiB0aGlzLnJpZ2h0fTtcbiAgICB9IGlmIChwb3NpdGlvbiA9PT0gJ3RvcCcgfHwgcG9zaXRpb24gPT09ICdib3R0b20nKSB7XG4gICAgICByZXR1cm4ge3RvcDogdGhpcy50b3AsIGxlZnQ6IDAsIGJvdHRvbTogdGhpcy5ib3R0b20sIHJpZ2h0OiBjaGFydC53aWR0aH07XG4gICAgfVxuICB9XG4gIGRyYXdCYWNrZ3JvdW5kKCkge1xuICAgIGNvbnN0IHtjdHgsIG9wdGlvbnM6IHtiYWNrZ3JvdW5kQ29sb3J9LCBsZWZ0LCB0b3AsIHdpZHRoLCBoZWlnaHR9ID0gdGhpcztcbiAgICBpZiAoYmFja2dyb3VuZENvbG9yKSB7XG4gICAgICBjdHguc2F2ZSgpO1xuICAgICAgY3R4LmZpbGxTdHlsZSA9IGJhY2tncm91bmRDb2xvcjtcbiAgICAgIGN0eC5maWxsUmVjdChsZWZ0LCB0b3AsIHdpZHRoLCBoZWlnaHQpO1xuICAgICAgY3R4LnJlc3RvcmUoKTtcbiAgICB9XG4gIH1cbiAgZ2V0TGluZVdpZHRoRm9yVmFsdWUodmFsdWUpIHtcbiAgICBjb25zdCBncmlkID0gdGhpcy5vcHRpb25zLmdyaWQ7XG4gICAgaWYgKCF0aGlzLl9pc1Zpc2libGUoKSB8fCAhZ3JpZC5kaXNwbGF5KSB7XG4gICAgICByZXR1cm4gMDtcbiAgICB9XG4gICAgY29uc3QgdGlja3MgPSB0aGlzLnRpY2tzO1xuICAgIGNvbnN0IGluZGV4ID0gdGlja3MuZmluZEluZGV4KHQgPT4gdC52YWx1ZSA9PT0gdmFsdWUpO1xuICAgIGlmIChpbmRleCA+PSAwKSB7XG4gICAgICBjb25zdCBvcHRzID0gZ3JpZC5zZXRDb250ZXh0KHRoaXMuZ2V0Q29udGV4dChpbmRleCkpO1xuICAgICAgcmV0dXJuIG9wdHMubGluZVdpZHRoO1xuICAgIH1cbiAgICByZXR1cm4gMDtcbiAgfVxuICBkcmF3R3JpZChjaGFydEFyZWEpIHtcbiAgICBjb25zdCBncmlkID0gdGhpcy5vcHRpb25zLmdyaWQ7XG4gICAgY29uc3QgY3R4ID0gdGhpcy5jdHg7XG4gICAgY29uc3QgaXRlbXMgPSB0aGlzLl9ncmlkTGluZUl0ZW1zIHx8ICh0aGlzLl9ncmlkTGluZUl0ZW1zID0gdGhpcy5fY29tcHV0ZUdyaWRMaW5lSXRlbXMoY2hhcnRBcmVhKSk7XG4gICAgbGV0IGksIGlsZW47XG4gICAgY29uc3QgZHJhd0xpbmUgPSAocDEsIHAyLCBzdHlsZSkgPT4ge1xuICAgICAgaWYgKCFzdHlsZS53aWR0aCB8fCAhc3R5bGUuY29sb3IpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgY3R4LnNhdmUoKTtcbiAgICAgIGN0eC5saW5lV2lkdGggPSBzdHlsZS53aWR0aDtcbiAgICAgIGN0eC5zdHJva2VTdHlsZSA9IHN0eWxlLmNvbG9yO1xuICAgICAgY3R4LnNldExpbmVEYXNoKHN0eWxlLmJvcmRlckRhc2ggfHwgW10pO1xuICAgICAgY3R4LmxpbmVEYXNoT2Zmc2V0ID0gc3R5bGUuYm9yZGVyRGFzaE9mZnNldDtcbiAgICAgIGN0eC5iZWdpblBhdGgoKTtcbiAgICAgIGN0eC5tb3ZlVG8ocDEueCwgcDEueSk7XG4gICAgICBjdHgubGluZVRvKHAyLngsIHAyLnkpO1xuICAgICAgY3R4LnN0cm9rZSgpO1xuICAgICAgY3R4LnJlc3RvcmUoKTtcbiAgICB9O1xuICAgIGlmIChncmlkLmRpc3BsYXkpIHtcbiAgICAgIGZvciAoaSA9IDAsIGlsZW4gPSBpdGVtcy5sZW5ndGg7IGkgPCBpbGVuOyArK2kpIHtcbiAgICAgICAgY29uc3QgaXRlbSA9IGl0ZW1zW2ldO1xuICAgICAgICBpZiAoZ3JpZC5kcmF3T25DaGFydEFyZWEpIHtcbiAgICAgICAgICBkcmF3TGluZShcbiAgICAgICAgICAgIHt4OiBpdGVtLngxLCB5OiBpdGVtLnkxfSxcbiAgICAgICAgICAgIHt4OiBpdGVtLngyLCB5OiBpdGVtLnkyfSxcbiAgICAgICAgICAgIGl0ZW1cbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICAgIGlmIChncmlkLmRyYXdUaWNrcykge1xuICAgICAgICAgIGRyYXdMaW5lKFxuICAgICAgICAgICAge3g6IGl0ZW0udHgxLCB5OiBpdGVtLnR5MX0sXG4gICAgICAgICAgICB7eDogaXRlbS50eDIsIHk6IGl0ZW0udHkyfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgY29sb3I6IGl0ZW0udGlja0NvbG9yLFxuICAgICAgICAgICAgICB3aWR0aDogaXRlbS50aWNrV2lkdGgsXG4gICAgICAgICAgICAgIGJvcmRlckRhc2g6IGl0ZW0udGlja0JvcmRlckRhc2gsXG4gICAgICAgICAgICAgIGJvcmRlckRhc2hPZmZzZXQ6IGl0ZW0udGlja0JvcmRlckRhc2hPZmZzZXRcbiAgICAgICAgICAgIH1cbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGRyYXdCb3JkZXIoKSB7XG4gICAgY29uc3Qge2NoYXJ0LCBjdHgsIG9wdGlvbnM6IHtncmlkfX0gPSB0aGlzO1xuICAgIGNvbnN0IGJvcmRlck9wdHMgPSBncmlkLnNldENvbnRleHQodGhpcy5nZXRDb250ZXh0KCkpO1xuICAgIGNvbnN0IGF4aXNXaWR0aCA9IGdyaWQuZHJhd0JvcmRlciA/IGJvcmRlck9wdHMuYm9yZGVyV2lkdGggOiAwO1xuICAgIGlmICghYXhpc1dpZHRoKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IGxhc3RMaW5lV2lkdGggPSBncmlkLnNldENvbnRleHQodGhpcy5nZXRDb250ZXh0KDApKS5saW5lV2lkdGg7XG4gICAgY29uc3QgYm9yZGVyVmFsdWUgPSB0aGlzLl9ib3JkZXJWYWx1ZTtcbiAgICBsZXQgeDEsIHgyLCB5MSwgeTI7XG4gICAgaWYgKHRoaXMuaXNIb3Jpem9udGFsKCkpIHtcbiAgICAgIHgxID0gX2FsaWduUGl4ZWwoY2hhcnQsIHRoaXMubGVmdCwgYXhpc1dpZHRoKSAtIGF4aXNXaWR0aCAvIDI7XG4gICAgICB4MiA9IF9hbGlnblBpeGVsKGNoYXJ0LCB0aGlzLnJpZ2h0LCBsYXN0TGluZVdpZHRoKSArIGxhc3RMaW5lV2lkdGggLyAyO1xuICAgICAgeTEgPSB5MiA9IGJvcmRlclZhbHVlO1xuICAgIH0gZWxzZSB7XG4gICAgICB5MSA9IF9hbGlnblBpeGVsKGNoYXJ0LCB0aGlzLnRvcCwgYXhpc1dpZHRoKSAtIGF4aXNXaWR0aCAvIDI7XG4gICAgICB5MiA9IF9hbGlnblBpeGVsKGNoYXJ0LCB0aGlzLmJvdHRvbSwgbGFzdExpbmVXaWR0aCkgKyBsYXN0TGluZVdpZHRoIC8gMjtcbiAgICAgIHgxID0geDIgPSBib3JkZXJWYWx1ZTtcbiAgICB9XG4gICAgY3R4LnNhdmUoKTtcbiAgICBjdHgubGluZVdpZHRoID0gYm9yZGVyT3B0cy5ib3JkZXJXaWR0aDtcbiAgICBjdHguc3Ryb2tlU3R5bGUgPSBib3JkZXJPcHRzLmJvcmRlckNvbG9yO1xuICAgIGN0eC5iZWdpblBhdGgoKTtcbiAgICBjdHgubW92ZVRvKHgxLCB5MSk7XG4gICAgY3R4LmxpbmVUbyh4MiwgeTIpO1xuICAgIGN0eC5zdHJva2UoKTtcbiAgICBjdHgucmVzdG9yZSgpO1xuICB9XG4gIGRyYXdMYWJlbHMoY2hhcnRBcmVhKSB7XG4gICAgY29uc3Qgb3B0aW9uVGlja3MgPSB0aGlzLm9wdGlvbnMudGlja3M7XG4gICAgaWYgKCFvcHRpb25UaWNrcy5kaXNwbGF5KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IGN0eCA9IHRoaXMuY3R4O1xuICAgIGNvbnN0IGFyZWEgPSB0aGlzLl9jb21wdXRlTGFiZWxBcmVhKCk7XG4gICAgaWYgKGFyZWEpIHtcbiAgICAgIGNsaXBBcmVhKGN0eCwgYXJlYSk7XG4gICAgfVxuICAgIGNvbnN0IGl0ZW1zID0gdGhpcy5fbGFiZWxJdGVtcyB8fCAodGhpcy5fbGFiZWxJdGVtcyA9IHRoaXMuX2NvbXB1dGVMYWJlbEl0ZW1zKGNoYXJ0QXJlYSkpO1xuICAgIGxldCBpLCBpbGVuO1xuICAgIGZvciAoaSA9IDAsIGlsZW4gPSBpdGVtcy5sZW5ndGg7IGkgPCBpbGVuOyArK2kpIHtcbiAgICAgIGNvbnN0IGl0ZW0gPSBpdGVtc1tpXTtcbiAgICAgIGNvbnN0IHRpY2tGb250ID0gaXRlbS5mb250O1xuICAgICAgY29uc3QgbGFiZWwgPSBpdGVtLmxhYmVsO1xuICAgICAgaWYgKGl0ZW0uYmFja2Ryb3ApIHtcbiAgICAgICAgY3R4LmZpbGxTdHlsZSA9IGl0ZW0uYmFja2Ryb3AuY29sb3I7XG4gICAgICAgIGN0eC5maWxsUmVjdChpdGVtLmJhY2tkcm9wLmxlZnQsIGl0ZW0uYmFja2Ryb3AudG9wLCBpdGVtLmJhY2tkcm9wLndpZHRoLCBpdGVtLmJhY2tkcm9wLmhlaWdodCk7XG4gICAgICB9XG4gICAgICBsZXQgeSA9IGl0ZW0udGV4dE9mZnNldDtcbiAgICAgIHJlbmRlclRleHQoY3R4LCBsYWJlbCwgMCwgeSwgdGlja0ZvbnQsIGl0ZW0pO1xuICAgIH1cbiAgICBpZiAoYXJlYSkge1xuICAgICAgdW5jbGlwQXJlYShjdHgpO1xuICAgIH1cbiAgfVxuICBkcmF3VGl0bGUoKSB7XG4gICAgY29uc3Qge2N0eCwgb3B0aW9uczoge3Bvc2l0aW9uLCB0aXRsZSwgcmV2ZXJzZX19ID0gdGhpcztcbiAgICBpZiAoIXRpdGxlLmRpc3BsYXkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgZm9udCA9IHRvRm9udCh0aXRsZS5mb250KTtcbiAgICBjb25zdCBwYWRkaW5nID0gdG9QYWRkaW5nKHRpdGxlLnBhZGRpbmcpO1xuICAgIGNvbnN0IGFsaWduID0gdGl0bGUuYWxpZ247XG4gICAgbGV0IG9mZnNldCA9IGZvbnQubGluZUhlaWdodCAvIDI7XG4gICAgaWYgKHBvc2l0aW9uID09PSAnYm90dG9tJyB8fCBwb3NpdGlvbiA9PT0gJ2NlbnRlcicgfHwgaXNPYmplY3QocG9zaXRpb24pKSB7XG4gICAgICBvZmZzZXQgKz0gcGFkZGluZy5ib3R0b207XG4gICAgICBpZiAoaXNBcnJheSh0aXRsZS50ZXh0KSkge1xuICAgICAgICBvZmZzZXQgKz0gZm9udC5saW5lSGVpZ2h0ICogKHRpdGxlLnRleHQubGVuZ3RoIC0gMSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIG9mZnNldCArPSBwYWRkaW5nLnRvcDtcbiAgICB9XG4gICAgY29uc3Qge3RpdGxlWCwgdGl0bGVZLCBtYXhXaWR0aCwgcm90YXRpb259ID0gdGl0bGVBcmdzKHRoaXMsIG9mZnNldCwgcG9zaXRpb24sIGFsaWduKTtcbiAgICByZW5kZXJUZXh0KGN0eCwgdGl0bGUudGV4dCwgMCwgMCwgZm9udCwge1xuICAgICAgY29sb3I6IHRpdGxlLmNvbG9yLFxuICAgICAgbWF4V2lkdGgsXG4gICAgICByb3RhdGlvbixcbiAgICAgIHRleHRBbGlnbjogdGl0bGVBbGlnbihhbGlnbiwgcG9zaXRpb24sIHJldmVyc2UpLFxuICAgICAgdGV4dEJhc2VsaW5lOiAnbWlkZGxlJyxcbiAgICAgIHRyYW5zbGF0aW9uOiBbdGl0bGVYLCB0aXRsZVldLFxuICAgIH0pO1xuICB9XG4gIGRyYXcoY2hhcnRBcmVhKSB7XG4gICAgaWYgKCF0aGlzLl9pc1Zpc2libGUoKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLmRyYXdCYWNrZ3JvdW5kKCk7XG4gICAgdGhpcy5kcmF3R3JpZChjaGFydEFyZWEpO1xuICAgIHRoaXMuZHJhd0JvcmRlcigpO1xuICAgIHRoaXMuZHJhd1RpdGxlKCk7XG4gICAgdGhpcy5kcmF3TGFiZWxzKGNoYXJ0QXJlYSk7XG4gIH1cbiAgX2xheWVycygpIHtcbiAgICBjb25zdCBvcHRzID0gdGhpcy5vcHRpb25zO1xuICAgIGNvbnN0IHR6ID0gb3B0cy50aWNrcyAmJiBvcHRzLnRpY2tzLnogfHwgMDtcbiAgICBjb25zdCBneiA9IHZhbHVlT3JEZWZhdWx0KG9wdHMuZ3JpZCAmJiBvcHRzLmdyaWQueiwgLTEpO1xuICAgIGlmICghdGhpcy5faXNWaXNpYmxlKCkgfHwgdGhpcy5kcmF3ICE9PSBTY2FsZS5wcm90b3R5cGUuZHJhdykge1xuICAgICAgcmV0dXJuIFt7XG4gICAgICAgIHo6IHR6LFxuICAgICAgICBkcmF3OiAoY2hhcnRBcmVhKSA9PiB7XG4gICAgICAgICAgdGhpcy5kcmF3KGNoYXJ0QXJlYSk7XG4gICAgICAgIH1cbiAgICAgIH1dO1xuICAgIH1cbiAgICByZXR1cm4gW3tcbiAgICAgIHo6IGd6LFxuICAgICAgZHJhdzogKGNoYXJ0QXJlYSkgPT4ge1xuICAgICAgICB0aGlzLmRyYXdCYWNrZ3JvdW5kKCk7XG4gICAgICAgIHRoaXMuZHJhd0dyaWQoY2hhcnRBcmVhKTtcbiAgICAgICAgdGhpcy5kcmF3VGl0bGUoKTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICB6OiBneiArIDEsXG4gICAgICBkcmF3OiAoKSA9PiB7XG4gICAgICAgIHRoaXMuZHJhd0JvcmRlcigpO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIHo6IHR6LFxuICAgICAgZHJhdzogKGNoYXJ0QXJlYSkgPT4ge1xuICAgICAgICB0aGlzLmRyYXdMYWJlbHMoY2hhcnRBcmVhKTtcbiAgICAgIH1cbiAgICB9XTtcbiAgfVxuICBnZXRNYXRjaGluZ1Zpc2libGVNZXRhcyh0eXBlKSB7XG4gICAgY29uc3QgbWV0YXMgPSB0aGlzLmNoYXJ0LmdldFNvcnRlZFZpc2libGVEYXRhc2V0TWV0YXMoKTtcbiAgICBjb25zdCBheGlzSUQgPSB0aGlzLmF4aXMgKyAnQXhpc0lEJztcbiAgICBjb25zdCByZXN1bHQgPSBbXTtcbiAgICBsZXQgaSwgaWxlbjtcbiAgICBmb3IgKGkgPSAwLCBpbGVuID0gbWV0YXMubGVuZ3RoOyBpIDwgaWxlbjsgKytpKSB7XG4gICAgICBjb25zdCBtZXRhID0gbWV0YXNbaV07XG4gICAgICBpZiAobWV0YVtheGlzSURdID09PSB0aGlzLmlkICYmICghdHlwZSB8fCBtZXRhLnR5cGUgPT09IHR5cGUpKSB7XG4gICAgICAgIHJlc3VsdC5wdXNoKG1ldGEpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG4gIF9yZXNvbHZlVGlja0ZvbnRPcHRpb25zKGluZGV4KSB7XG4gICAgY29uc3Qgb3B0cyA9IHRoaXMub3B0aW9ucy50aWNrcy5zZXRDb250ZXh0KHRoaXMuZ2V0Q29udGV4dChpbmRleCkpO1xuICAgIHJldHVybiB0b0ZvbnQob3B0cy5mb250KTtcbiAgfVxuICBfbWF4RGlnaXRzKCkge1xuICAgIGNvbnN0IGZvbnRTaXplID0gdGhpcy5fcmVzb2x2ZVRpY2tGb250T3B0aW9ucygwKS5saW5lSGVpZ2h0O1xuICAgIHJldHVybiAodGhpcy5pc0hvcml6b250YWwoKSA/IHRoaXMud2lkdGggOiB0aGlzLmhlaWdodCkgLyBmb250U2l6ZTtcbiAgfVxufVxuXG5jbGFzcyBUeXBlZFJlZ2lzdHJ5IHtcbiAgY29uc3RydWN0b3IodHlwZSwgc2NvcGUsIG92ZXJyaWRlKSB7XG4gICAgdGhpcy50eXBlID0gdHlwZTtcbiAgICB0aGlzLnNjb3BlID0gc2NvcGU7XG4gICAgdGhpcy5vdmVycmlkZSA9IG92ZXJyaWRlO1xuICAgIHRoaXMuaXRlbXMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICB9XG4gIGlzRm9yVHlwZSh0eXBlKSB7XG4gICAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaXNQcm90b3R5cGVPZi5jYWxsKHRoaXMudHlwZS5wcm90b3R5cGUsIHR5cGUucHJvdG90eXBlKTtcbiAgfVxuICByZWdpc3RlcihpdGVtKSB7XG4gICAgY29uc3QgcHJvdG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YoaXRlbSk7XG4gICAgbGV0IHBhcmVudFNjb3BlO1xuICAgIGlmIChpc0lDaGFydENvbXBvbmVudChwcm90bykpIHtcbiAgICAgIHBhcmVudFNjb3BlID0gdGhpcy5yZWdpc3Rlcihwcm90byk7XG4gICAgfVxuICAgIGNvbnN0IGl0ZW1zID0gdGhpcy5pdGVtcztcbiAgICBjb25zdCBpZCA9IGl0ZW0uaWQ7XG4gICAgY29uc3Qgc2NvcGUgPSB0aGlzLnNjb3BlICsgJy4nICsgaWQ7XG4gICAgaWYgKCFpZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdjbGFzcyBkb2VzIG5vdCBoYXZlIGlkOiAnICsgaXRlbSk7XG4gICAgfVxuICAgIGlmIChpZCBpbiBpdGVtcykge1xuICAgICAgcmV0dXJuIHNjb3BlO1xuICAgIH1cbiAgICBpdGVtc1tpZF0gPSBpdGVtO1xuICAgIHJlZ2lzdGVyRGVmYXVsdHMoaXRlbSwgc2NvcGUsIHBhcmVudFNjb3BlKTtcbiAgICBpZiAodGhpcy5vdmVycmlkZSkge1xuICAgICAgZGVmYXVsdHMub3ZlcnJpZGUoaXRlbS5pZCwgaXRlbS5vdmVycmlkZXMpO1xuICAgIH1cbiAgICByZXR1cm4gc2NvcGU7XG4gIH1cbiAgZ2V0KGlkKSB7XG4gICAgcmV0dXJuIHRoaXMuaXRlbXNbaWRdO1xuICB9XG4gIHVucmVnaXN0ZXIoaXRlbSkge1xuICAgIGNvbnN0IGl0ZW1zID0gdGhpcy5pdGVtcztcbiAgICBjb25zdCBpZCA9IGl0ZW0uaWQ7XG4gICAgY29uc3Qgc2NvcGUgPSB0aGlzLnNjb3BlO1xuICAgIGlmIChpZCBpbiBpdGVtcykge1xuICAgICAgZGVsZXRlIGl0ZW1zW2lkXTtcbiAgICB9XG4gICAgaWYgKHNjb3BlICYmIGlkIGluIGRlZmF1bHRzW3Njb3BlXSkge1xuICAgICAgZGVsZXRlIGRlZmF1bHRzW3Njb3BlXVtpZF07XG4gICAgICBpZiAodGhpcy5vdmVycmlkZSkge1xuICAgICAgICBkZWxldGUgb3ZlcnJpZGVzW2lkXTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cbmZ1bmN0aW9uIHJlZ2lzdGVyRGVmYXVsdHMoaXRlbSwgc2NvcGUsIHBhcmVudFNjb3BlKSB7XG4gIGNvbnN0IGl0ZW1EZWZhdWx0cyA9IG1lcmdlKE9iamVjdC5jcmVhdGUobnVsbCksIFtcbiAgICBwYXJlbnRTY29wZSA/IGRlZmF1bHRzLmdldChwYXJlbnRTY29wZSkgOiB7fSxcbiAgICBkZWZhdWx0cy5nZXQoc2NvcGUpLFxuICAgIGl0ZW0uZGVmYXVsdHNcbiAgXSk7XG4gIGRlZmF1bHRzLnNldChzY29wZSwgaXRlbURlZmF1bHRzKTtcbiAgaWYgKGl0ZW0uZGVmYXVsdFJvdXRlcykge1xuICAgIHJvdXRlRGVmYXVsdHMoc2NvcGUsIGl0ZW0uZGVmYXVsdFJvdXRlcyk7XG4gIH1cbiAgaWYgKGl0ZW0uZGVzY3JpcHRvcnMpIHtcbiAgICBkZWZhdWx0cy5kZXNjcmliZShzY29wZSwgaXRlbS5kZXNjcmlwdG9ycyk7XG4gIH1cbn1cbmZ1bmN0aW9uIHJvdXRlRGVmYXVsdHMoc2NvcGUsIHJvdXRlcykge1xuICBPYmplY3Qua2V5cyhyb3V0ZXMpLmZvckVhY2gocHJvcGVydHkgPT4ge1xuICAgIGNvbnN0IHByb3BlcnR5UGFydHMgPSBwcm9wZXJ0eS5zcGxpdCgnLicpO1xuICAgIGNvbnN0IHNvdXJjZU5hbWUgPSBwcm9wZXJ0eVBhcnRzLnBvcCgpO1xuICAgIGNvbnN0IHNvdXJjZVNjb3BlID0gW3Njb3BlXS5jb25jYXQocHJvcGVydHlQYXJ0cykuam9pbignLicpO1xuICAgIGNvbnN0IHBhcnRzID0gcm91dGVzW3Byb3BlcnR5XS5zcGxpdCgnLicpO1xuICAgIGNvbnN0IHRhcmdldE5hbWUgPSBwYXJ0cy5wb3AoKTtcbiAgICBjb25zdCB0YXJnZXRTY29wZSA9IHBhcnRzLmpvaW4oJy4nKTtcbiAgICBkZWZhdWx0cy5yb3V0ZShzb3VyY2VTY29wZSwgc291cmNlTmFtZSwgdGFyZ2V0U2NvcGUsIHRhcmdldE5hbWUpO1xuICB9KTtcbn1cbmZ1bmN0aW9uIGlzSUNoYXJ0Q29tcG9uZW50KHByb3RvKSB7XG4gIHJldHVybiAnaWQnIGluIHByb3RvICYmICdkZWZhdWx0cycgaW4gcHJvdG87XG59XG5cbmNsYXNzIFJlZ2lzdHJ5IHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5jb250cm9sbGVycyA9IG5ldyBUeXBlZFJlZ2lzdHJ5KERhdGFzZXRDb250cm9sbGVyLCAnZGF0YXNldHMnLCB0cnVlKTtcbiAgICB0aGlzLmVsZW1lbnRzID0gbmV3IFR5cGVkUmVnaXN0cnkoRWxlbWVudCwgJ2VsZW1lbnRzJyk7XG4gICAgdGhpcy5wbHVnaW5zID0gbmV3IFR5cGVkUmVnaXN0cnkoT2JqZWN0LCAncGx1Z2lucycpO1xuICAgIHRoaXMuc2NhbGVzID0gbmV3IFR5cGVkUmVnaXN0cnkoU2NhbGUsICdzY2FsZXMnKTtcbiAgICB0aGlzLl90eXBlZFJlZ2lzdHJpZXMgPSBbdGhpcy5jb250cm9sbGVycywgdGhpcy5zY2FsZXMsIHRoaXMuZWxlbWVudHNdO1xuICB9XG4gIGFkZCguLi5hcmdzKSB7XG4gICAgdGhpcy5fZWFjaCgncmVnaXN0ZXInLCBhcmdzKTtcbiAgfVxuICByZW1vdmUoLi4uYXJncykge1xuICAgIHRoaXMuX2VhY2goJ3VucmVnaXN0ZXInLCBhcmdzKTtcbiAgfVxuICBhZGRDb250cm9sbGVycyguLi5hcmdzKSB7XG4gICAgdGhpcy5fZWFjaCgncmVnaXN0ZXInLCBhcmdzLCB0aGlzLmNvbnRyb2xsZXJzKTtcbiAgfVxuICBhZGRFbGVtZW50cyguLi5hcmdzKSB7XG4gICAgdGhpcy5fZWFjaCgncmVnaXN0ZXInLCBhcmdzLCB0aGlzLmVsZW1lbnRzKTtcbiAgfVxuICBhZGRQbHVnaW5zKC4uLmFyZ3MpIHtcbiAgICB0aGlzLl9lYWNoKCdyZWdpc3RlcicsIGFyZ3MsIHRoaXMucGx1Z2lucyk7XG4gIH1cbiAgYWRkU2NhbGVzKC4uLmFyZ3MpIHtcbiAgICB0aGlzLl9lYWNoKCdyZWdpc3RlcicsIGFyZ3MsIHRoaXMuc2NhbGVzKTtcbiAgfVxuICBnZXRDb250cm9sbGVyKGlkKSB7XG4gICAgcmV0dXJuIHRoaXMuX2dldChpZCwgdGhpcy5jb250cm9sbGVycywgJ2NvbnRyb2xsZXInKTtcbiAgfVxuICBnZXRFbGVtZW50KGlkKSB7XG4gICAgcmV0dXJuIHRoaXMuX2dldChpZCwgdGhpcy5lbGVtZW50cywgJ2VsZW1lbnQnKTtcbiAgfVxuICBnZXRQbHVnaW4oaWQpIHtcbiAgICByZXR1cm4gdGhpcy5fZ2V0KGlkLCB0aGlzLnBsdWdpbnMsICdwbHVnaW4nKTtcbiAgfVxuICBnZXRTY2FsZShpZCkge1xuICAgIHJldHVybiB0aGlzLl9nZXQoaWQsIHRoaXMuc2NhbGVzLCAnc2NhbGUnKTtcbiAgfVxuICByZW1vdmVDb250cm9sbGVycyguLi5hcmdzKSB7XG4gICAgdGhpcy5fZWFjaCgndW5yZWdpc3RlcicsIGFyZ3MsIHRoaXMuY29udHJvbGxlcnMpO1xuICB9XG4gIHJlbW92ZUVsZW1lbnRzKC4uLmFyZ3MpIHtcbiAgICB0aGlzLl9lYWNoKCd1bnJlZ2lzdGVyJywgYXJncywgdGhpcy5lbGVtZW50cyk7XG4gIH1cbiAgcmVtb3ZlUGx1Z2lucyguLi5hcmdzKSB7XG4gICAgdGhpcy5fZWFjaCgndW5yZWdpc3RlcicsIGFyZ3MsIHRoaXMucGx1Z2lucyk7XG4gIH1cbiAgcmVtb3ZlU2NhbGVzKC4uLmFyZ3MpIHtcbiAgICB0aGlzLl9lYWNoKCd1bnJlZ2lzdGVyJywgYXJncywgdGhpcy5zY2FsZXMpO1xuICB9XG4gIF9lYWNoKG1ldGhvZCwgYXJncywgdHlwZWRSZWdpc3RyeSkge1xuICAgIFsuLi5hcmdzXS5mb3JFYWNoKGFyZyA9PiB7XG4gICAgICBjb25zdCByZWcgPSB0eXBlZFJlZ2lzdHJ5IHx8IHRoaXMuX2dldFJlZ2lzdHJ5Rm9yVHlwZShhcmcpO1xuICAgICAgaWYgKHR5cGVkUmVnaXN0cnkgfHwgcmVnLmlzRm9yVHlwZShhcmcpIHx8IChyZWcgPT09IHRoaXMucGx1Z2lucyAmJiBhcmcuaWQpKSB7XG4gICAgICAgIHRoaXMuX2V4ZWMobWV0aG9kLCByZWcsIGFyZyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBlYWNoKGFyZywgaXRlbSA9PiB7XG4gICAgICAgICAgY29uc3QgaXRlbVJlZyA9IHR5cGVkUmVnaXN0cnkgfHwgdGhpcy5fZ2V0UmVnaXN0cnlGb3JUeXBlKGl0ZW0pO1xuICAgICAgICAgIHRoaXMuX2V4ZWMobWV0aG9kLCBpdGVtUmVnLCBpdGVtKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbiAgX2V4ZWMobWV0aG9kLCByZWdpc3RyeSwgY29tcG9uZW50KSB7XG4gICAgY29uc3QgY2FtZWxNZXRob2QgPSBfY2FwaXRhbGl6ZShtZXRob2QpO1xuICAgIGNhbGxiYWNrKGNvbXBvbmVudFsnYmVmb3JlJyArIGNhbWVsTWV0aG9kXSwgW10sIGNvbXBvbmVudCk7XG4gICAgcmVnaXN0cnlbbWV0aG9kXShjb21wb25lbnQpO1xuICAgIGNhbGxiYWNrKGNvbXBvbmVudFsnYWZ0ZXInICsgY2FtZWxNZXRob2RdLCBbXSwgY29tcG9uZW50KTtcbiAgfVxuICBfZ2V0UmVnaXN0cnlGb3JUeXBlKHR5cGUpIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuX3R5cGVkUmVnaXN0cmllcy5sZW5ndGg7IGkrKykge1xuICAgICAgY29uc3QgcmVnID0gdGhpcy5fdHlwZWRSZWdpc3RyaWVzW2ldO1xuICAgICAgaWYgKHJlZy5pc0ZvclR5cGUodHlwZSkpIHtcbiAgICAgICAgcmV0dXJuIHJlZztcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRoaXMucGx1Z2lucztcbiAgfVxuICBfZ2V0KGlkLCB0eXBlZFJlZ2lzdHJ5LCB0eXBlKSB7XG4gICAgY29uc3QgaXRlbSA9IHR5cGVkUmVnaXN0cnkuZ2V0KGlkKTtcbiAgICBpZiAoaXRlbSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1wiJyArIGlkICsgJ1wiIGlzIG5vdCBhIHJlZ2lzdGVyZWQgJyArIHR5cGUgKyAnLicpO1xuICAgIH1cbiAgICByZXR1cm4gaXRlbTtcbiAgfVxufVxudmFyIHJlZ2lzdHJ5ID0gbmV3IFJlZ2lzdHJ5KCk7XG5cbmNsYXNzIFBsdWdpblNlcnZpY2Uge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLl9pbml0ID0gW107XG4gIH1cbiAgbm90aWZ5KGNoYXJ0LCBob29rLCBhcmdzLCBmaWx0ZXIpIHtcbiAgICBpZiAoaG9vayA9PT0gJ2JlZm9yZUluaXQnKSB7XG4gICAgICB0aGlzLl9pbml0ID0gdGhpcy5fY3JlYXRlRGVzY3JpcHRvcnMoY2hhcnQsIHRydWUpO1xuICAgICAgdGhpcy5fbm90aWZ5KHRoaXMuX2luaXQsIGNoYXJ0LCAnaW5zdGFsbCcpO1xuICAgIH1cbiAgICBjb25zdCBkZXNjcmlwdG9ycyA9IGZpbHRlciA/IHRoaXMuX2Rlc2NyaXB0b3JzKGNoYXJ0KS5maWx0ZXIoZmlsdGVyKSA6IHRoaXMuX2Rlc2NyaXB0b3JzKGNoYXJ0KTtcbiAgICBjb25zdCByZXN1bHQgPSB0aGlzLl9ub3RpZnkoZGVzY3JpcHRvcnMsIGNoYXJ0LCBob29rLCBhcmdzKTtcbiAgICBpZiAoaG9vayA9PT0gJ2FmdGVyRGVzdHJveScpIHtcbiAgICAgIHRoaXMuX25vdGlmeShkZXNjcmlwdG9ycywgY2hhcnQsICdzdG9wJyk7XG4gICAgICB0aGlzLl9ub3RpZnkodGhpcy5faW5pdCwgY2hhcnQsICd1bmluc3RhbGwnKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuICBfbm90aWZ5KGRlc2NyaXB0b3JzLCBjaGFydCwgaG9vaywgYXJncykge1xuICAgIGFyZ3MgPSBhcmdzIHx8IHt9O1xuICAgIGZvciAoY29uc3QgZGVzY3JpcHRvciBvZiBkZXNjcmlwdG9ycykge1xuICAgICAgY29uc3QgcGx1Z2luID0gZGVzY3JpcHRvci5wbHVnaW47XG4gICAgICBjb25zdCBtZXRob2QgPSBwbHVnaW5baG9va107XG4gICAgICBjb25zdCBwYXJhbXMgPSBbY2hhcnQsIGFyZ3MsIGRlc2NyaXB0b3Iub3B0aW9uc107XG4gICAgICBpZiAoY2FsbGJhY2sobWV0aG9kLCBwYXJhbXMsIHBsdWdpbikgPT09IGZhbHNlICYmIGFyZ3MuY2FuY2VsYWJsZSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIGludmFsaWRhdGUoKSB7XG4gICAgaWYgKCFpc051bGxPclVuZGVmKHRoaXMuX2NhY2hlKSkge1xuICAgICAgdGhpcy5fb2xkQ2FjaGUgPSB0aGlzLl9jYWNoZTtcbiAgICAgIHRoaXMuX2NhY2hlID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgfVxuICBfZGVzY3JpcHRvcnMoY2hhcnQpIHtcbiAgICBpZiAodGhpcy5fY2FjaGUpIHtcbiAgICAgIHJldHVybiB0aGlzLl9jYWNoZTtcbiAgICB9XG4gICAgY29uc3QgZGVzY3JpcHRvcnMgPSB0aGlzLl9jYWNoZSA9IHRoaXMuX2NyZWF0ZURlc2NyaXB0b3JzKGNoYXJ0KTtcbiAgICB0aGlzLl9ub3RpZnlTdGF0ZUNoYW5nZXMoY2hhcnQpO1xuICAgIHJldHVybiBkZXNjcmlwdG9ycztcbiAgfVxuICBfY3JlYXRlRGVzY3JpcHRvcnMoY2hhcnQsIGFsbCkge1xuICAgIGNvbnN0IGNvbmZpZyA9IGNoYXJ0ICYmIGNoYXJ0LmNvbmZpZztcbiAgICBjb25zdCBvcHRpb25zID0gdmFsdWVPckRlZmF1bHQoY29uZmlnLm9wdGlvbnMgJiYgY29uZmlnLm9wdGlvbnMucGx1Z2lucywge30pO1xuICAgIGNvbnN0IHBsdWdpbnMgPSBhbGxQbHVnaW5zKGNvbmZpZyk7XG4gICAgcmV0dXJuIG9wdGlvbnMgPT09IGZhbHNlICYmICFhbGwgPyBbXSA6IGNyZWF0ZURlc2NyaXB0b3JzKGNoYXJ0LCBwbHVnaW5zLCBvcHRpb25zLCBhbGwpO1xuICB9XG4gIF9ub3RpZnlTdGF0ZUNoYW5nZXMoY2hhcnQpIHtcbiAgICBjb25zdCBwcmV2aW91c0Rlc2NyaXB0b3JzID0gdGhpcy5fb2xkQ2FjaGUgfHwgW107XG4gICAgY29uc3QgZGVzY3JpcHRvcnMgPSB0aGlzLl9jYWNoZTtcbiAgICBjb25zdCBkaWZmID0gKGEsIGIpID0+IGEuZmlsdGVyKHggPT4gIWIuc29tZSh5ID0+IHgucGx1Z2luLmlkID09PSB5LnBsdWdpbi5pZCkpO1xuICAgIHRoaXMuX25vdGlmeShkaWZmKHByZXZpb3VzRGVzY3JpcHRvcnMsIGRlc2NyaXB0b3JzKSwgY2hhcnQsICdzdG9wJyk7XG4gICAgdGhpcy5fbm90aWZ5KGRpZmYoZGVzY3JpcHRvcnMsIHByZXZpb3VzRGVzY3JpcHRvcnMpLCBjaGFydCwgJ3N0YXJ0Jyk7XG4gIH1cbn1cbmZ1bmN0aW9uIGFsbFBsdWdpbnMoY29uZmlnKSB7XG4gIGNvbnN0IHBsdWdpbnMgPSBbXTtcbiAgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKHJlZ2lzdHJ5LnBsdWdpbnMuaXRlbXMpO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcbiAgICBwbHVnaW5zLnB1c2gocmVnaXN0cnkuZ2V0UGx1Z2luKGtleXNbaV0pKTtcbiAgfVxuICBjb25zdCBsb2NhbCA9IGNvbmZpZy5wbHVnaW5zIHx8IFtdO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGxvY2FsLmxlbmd0aDsgaSsrKSB7XG4gICAgY29uc3QgcGx1Z2luID0gbG9jYWxbaV07XG4gICAgaWYgKHBsdWdpbnMuaW5kZXhPZihwbHVnaW4pID09PSAtMSkge1xuICAgICAgcGx1Z2lucy5wdXNoKHBsdWdpbik7XG4gICAgfVxuICB9XG4gIHJldHVybiBwbHVnaW5zO1xufVxuZnVuY3Rpb24gZ2V0T3B0cyhvcHRpb25zLCBhbGwpIHtcbiAgaWYgKCFhbGwgJiYgb3B0aW9ucyA9PT0gZmFsc2UpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICBpZiAob3B0aW9ucyA9PT0gdHJ1ZSkge1xuICAgIHJldHVybiB7fTtcbiAgfVxuICByZXR1cm4gb3B0aW9ucztcbn1cbmZ1bmN0aW9uIGNyZWF0ZURlc2NyaXB0b3JzKGNoYXJ0LCBwbHVnaW5zLCBvcHRpb25zLCBhbGwpIHtcbiAgY29uc3QgcmVzdWx0ID0gW107XG4gIGNvbnN0IGNvbnRleHQgPSBjaGFydC5nZXRDb250ZXh0KCk7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgcGx1Z2lucy5sZW5ndGg7IGkrKykge1xuICAgIGNvbnN0IHBsdWdpbiA9IHBsdWdpbnNbaV07XG4gICAgY29uc3QgaWQgPSBwbHVnaW4uaWQ7XG4gICAgY29uc3Qgb3B0cyA9IGdldE9wdHMob3B0aW9uc1tpZF0sIGFsbCk7XG4gICAgaWYgKG9wdHMgPT09IG51bGwpIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICByZXN1bHQucHVzaCh7XG4gICAgICBwbHVnaW4sXG4gICAgICBvcHRpb25zOiBwbHVnaW5PcHRzKGNoYXJ0LmNvbmZpZywgcGx1Z2luLCBvcHRzLCBjb250ZXh0KVxuICAgIH0pO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5mdW5jdGlvbiBwbHVnaW5PcHRzKGNvbmZpZywgcGx1Z2luLCBvcHRzLCBjb250ZXh0KSB7XG4gIGNvbnN0IGtleXMgPSBjb25maWcucGx1Z2luU2NvcGVLZXlzKHBsdWdpbik7XG4gIGNvbnN0IHNjb3BlcyA9IGNvbmZpZy5nZXRPcHRpb25TY29wZXMob3B0cywga2V5cyk7XG4gIHJldHVybiBjb25maWcuY3JlYXRlUmVzb2x2ZXIoc2NvcGVzLCBjb250ZXh0LCBbJyddLCB7c2NyaXB0YWJsZTogZmFsc2UsIGluZGV4YWJsZTogZmFsc2UsIGFsbEtleXM6IHRydWV9KTtcbn1cblxuZnVuY3Rpb24gZ2V0SW5kZXhBeGlzKHR5cGUsIG9wdGlvbnMpIHtcbiAgY29uc3QgZGF0YXNldERlZmF1bHRzID0gZGVmYXVsdHMuZGF0YXNldHNbdHlwZV0gfHwge307XG4gIGNvbnN0IGRhdGFzZXRPcHRpb25zID0gKG9wdGlvbnMuZGF0YXNldHMgfHwge30pW3R5cGVdIHx8IHt9O1xuICByZXR1cm4gZGF0YXNldE9wdGlvbnMuaW5kZXhBeGlzIHx8IG9wdGlvbnMuaW5kZXhBeGlzIHx8IGRhdGFzZXREZWZhdWx0cy5pbmRleEF4aXMgfHwgJ3gnO1xufVxuZnVuY3Rpb24gZ2V0QXhpc0Zyb21EZWZhdWx0U2NhbGVJRChpZCwgaW5kZXhBeGlzKSB7XG4gIGxldCBheGlzID0gaWQ7XG4gIGlmIChpZCA9PT0gJ19pbmRleF8nKSB7XG4gICAgYXhpcyA9IGluZGV4QXhpcztcbiAgfSBlbHNlIGlmIChpZCA9PT0gJ192YWx1ZV8nKSB7XG4gICAgYXhpcyA9IGluZGV4QXhpcyA9PT0gJ3gnID8gJ3knIDogJ3gnO1xuICB9XG4gIHJldHVybiBheGlzO1xufVxuZnVuY3Rpb24gZ2V0RGVmYXVsdFNjYWxlSURGcm9tQXhpcyhheGlzLCBpbmRleEF4aXMpIHtcbiAgcmV0dXJuIGF4aXMgPT09IGluZGV4QXhpcyA/ICdfaW5kZXhfJyA6ICdfdmFsdWVfJztcbn1cbmZ1bmN0aW9uIGF4aXNGcm9tUG9zaXRpb24ocG9zaXRpb24pIHtcbiAgaWYgKHBvc2l0aW9uID09PSAndG9wJyB8fCBwb3NpdGlvbiA9PT0gJ2JvdHRvbScpIHtcbiAgICByZXR1cm4gJ3gnO1xuICB9XG4gIGlmIChwb3NpdGlvbiA9PT0gJ2xlZnQnIHx8IHBvc2l0aW9uID09PSAncmlnaHQnKSB7XG4gICAgcmV0dXJuICd5JztcbiAgfVxufVxuZnVuY3Rpb24gZGV0ZXJtaW5lQXhpcyhpZCwgc2NhbGVPcHRpb25zKSB7XG4gIGlmIChpZCA9PT0gJ3gnIHx8IGlkID09PSAneScpIHtcbiAgICByZXR1cm4gaWQ7XG4gIH1cbiAgcmV0dXJuIHNjYWxlT3B0aW9ucy5heGlzIHx8IGF4aXNGcm9tUG9zaXRpb24oc2NhbGVPcHRpb25zLnBvc2l0aW9uKSB8fCBpZC5jaGFyQXQoMCkudG9Mb3dlckNhc2UoKTtcbn1cbmZ1bmN0aW9uIG1lcmdlU2NhbGVDb25maWcoY29uZmlnLCBvcHRpb25zKSB7XG4gIGNvbnN0IGNoYXJ0RGVmYXVsdHMgPSBvdmVycmlkZXNbY29uZmlnLnR5cGVdIHx8IHtzY2FsZXM6IHt9fTtcbiAgY29uc3QgY29uZmlnU2NhbGVzID0gb3B0aW9ucy5zY2FsZXMgfHwge307XG4gIGNvbnN0IGNoYXJ0SW5kZXhBeGlzID0gZ2V0SW5kZXhBeGlzKGNvbmZpZy50eXBlLCBvcHRpb25zKTtcbiAgY29uc3QgZmlyc3RJRHMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICBjb25zdCBzY2FsZXMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICBPYmplY3Qua2V5cyhjb25maWdTY2FsZXMpLmZvckVhY2goaWQgPT4ge1xuICAgIGNvbnN0IHNjYWxlQ29uZiA9IGNvbmZpZ1NjYWxlc1tpZF07XG4gICAgaWYgKCFpc09iamVjdChzY2FsZUNvbmYpKSB7XG4gICAgICByZXR1cm4gY29uc29sZS5lcnJvcihgSW52YWxpZCBzY2FsZSBjb25maWd1cmF0aW9uIGZvciBzY2FsZTogJHtpZH1gKTtcbiAgICB9XG4gICAgaWYgKHNjYWxlQ29uZi5fcHJveHkpIHtcbiAgICAgIHJldHVybiBjb25zb2xlLndhcm4oYElnbm9yaW5nIHJlc29sdmVyIHBhc3NlZCBhcyBvcHRpb25zIGZvciBzY2FsZTogJHtpZH1gKTtcbiAgICB9XG4gICAgY29uc3QgYXhpcyA9IGRldGVybWluZUF4aXMoaWQsIHNjYWxlQ29uZik7XG4gICAgY29uc3QgZGVmYXVsdElkID0gZ2V0RGVmYXVsdFNjYWxlSURGcm9tQXhpcyhheGlzLCBjaGFydEluZGV4QXhpcyk7XG4gICAgY29uc3QgZGVmYXVsdFNjYWxlT3B0aW9ucyA9IGNoYXJ0RGVmYXVsdHMuc2NhbGVzIHx8IHt9O1xuICAgIGZpcnN0SURzW2F4aXNdID0gZmlyc3RJRHNbYXhpc10gfHwgaWQ7XG4gICAgc2NhbGVzW2lkXSA9IG1lcmdlSWYoT2JqZWN0LmNyZWF0ZShudWxsKSwgW3theGlzfSwgc2NhbGVDb25mLCBkZWZhdWx0U2NhbGVPcHRpb25zW2F4aXNdLCBkZWZhdWx0U2NhbGVPcHRpb25zW2RlZmF1bHRJZF1dKTtcbiAgfSk7XG4gIGNvbmZpZy5kYXRhLmRhdGFzZXRzLmZvckVhY2goZGF0YXNldCA9PiB7XG4gICAgY29uc3QgdHlwZSA9IGRhdGFzZXQudHlwZSB8fCBjb25maWcudHlwZTtcbiAgICBjb25zdCBpbmRleEF4aXMgPSBkYXRhc2V0LmluZGV4QXhpcyB8fCBnZXRJbmRleEF4aXModHlwZSwgb3B0aW9ucyk7XG4gICAgY29uc3QgZGF0YXNldERlZmF1bHRzID0gb3ZlcnJpZGVzW3R5cGVdIHx8IHt9O1xuICAgIGNvbnN0IGRlZmF1bHRTY2FsZU9wdGlvbnMgPSBkYXRhc2V0RGVmYXVsdHMuc2NhbGVzIHx8IHt9O1xuICAgIE9iamVjdC5rZXlzKGRlZmF1bHRTY2FsZU9wdGlvbnMpLmZvckVhY2goZGVmYXVsdElEID0+IHtcbiAgICAgIGNvbnN0IGF4aXMgPSBnZXRBeGlzRnJvbURlZmF1bHRTY2FsZUlEKGRlZmF1bHRJRCwgaW5kZXhBeGlzKTtcbiAgICAgIGNvbnN0IGlkID0gZGF0YXNldFtheGlzICsgJ0F4aXNJRCddIHx8IGZpcnN0SURzW2F4aXNdIHx8IGF4aXM7XG4gICAgICBzY2FsZXNbaWRdID0gc2NhbGVzW2lkXSB8fCBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgICAgbWVyZ2VJZihzY2FsZXNbaWRdLCBbe2F4aXN9LCBjb25maWdTY2FsZXNbaWRdLCBkZWZhdWx0U2NhbGVPcHRpb25zW2RlZmF1bHRJRF1dKTtcbiAgICB9KTtcbiAgfSk7XG4gIE9iamVjdC5rZXlzKHNjYWxlcykuZm9yRWFjaChrZXkgPT4ge1xuICAgIGNvbnN0IHNjYWxlID0gc2NhbGVzW2tleV07XG4gICAgbWVyZ2VJZihzY2FsZSwgW2RlZmF1bHRzLnNjYWxlc1tzY2FsZS50eXBlXSwgZGVmYXVsdHMuc2NhbGVdKTtcbiAgfSk7XG4gIHJldHVybiBzY2FsZXM7XG59XG5mdW5jdGlvbiBpbml0T3B0aW9ucyhjb25maWcpIHtcbiAgY29uc3Qgb3B0aW9ucyA9IGNvbmZpZy5vcHRpb25zIHx8IChjb25maWcub3B0aW9ucyA9IHt9KTtcbiAgb3B0aW9ucy5wbHVnaW5zID0gdmFsdWVPckRlZmF1bHQob3B0aW9ucy5wbHVnaW5zLCB7fSk7XG4gIG9wdGlvbnMuc2NhbGVzID0gbWVyZ2VTY2FsZUNvbmZpZyhjb25maWcsIG9wdGlvbnMpO1xufVxuZnVuY3Rpb24gaW5pdERhdGEoZGF0YSkge1xuICBkYXRhID0gZGF0YSB8fCB7fTtcbiAgZGF0YS5kYXRhc2V0cyA9IGRhdGEuZGF0YXNldHMgfHwgW107XG4gIGRhdGEubGFiZWxzID0gZGF0YS5sYWJlbHMgfHwgW107XG4gIHJldHVybiBkYXRhO1xufVxuZnVuY3Rpb24gaW5pdENvbmZpZyhjb25maWcpIHtcbiAgY29uZmlnID0gY29uZmlnIHx8IHt9O1xuICBjb25maWcuZGF0YSA9IGluaXREYXRhKGNvbmZpZy5kYXRhKTtcbiAgaW5pdE9wdGlvbnMoY29uZmlnKTtcbiAgcmV0dXJuIGNvbmZpZztcbn1cbmNvbnN0IGtleUNhY2hlID0gbmV3IE1hcCgpO1xuY29uc3Qga2V5c0NhY2hlZCA9IG5ldyBTZXQoKTtcbmZ1bmN0aW9uIGNhY2hlZEtleXMoY2FjaGVLZXksIGdlbmVyYXRlKSB7XG4gIGxldCBrZXlzID0ga2V5Q2FjaGUuZ2V0KGNhY2hlS2V5KTtcbiAgaWYgKCFrZXlzKSB7XG4gICAga2V5cyA9IGdlbmVyYXRlKCk7XG4gICAga2V5Q2FjaGUuc2V0KGNhY2hlS2V5LCBrZXlzKTtcbiAgICBrZXlzQ2FjaGVkLmFkZChrZXlzKTtcbiAgfVxuICByZXR1cm4ga2V5cztcbn1cbmNvbnN0IGFkZElmRm91bmQgPSAoc2V0LCBvYmosIGtleSkgPT4ge1xuICBjb25zdCBvcHRzID0gcmVzb2x2ZU9iamVjdEtleShvYmosIGtleSk7XG4gIGlmIChvcHRzICE9PSB1bmRlZmluZWQpIHtcbiAgICBzZXQuYWRkKG9wdHMpO1xuICB9XG59O1xuY2xhc3MgQ29uZmlnIHtcbiAgY29uc3RydWN0b3IoY29uZmlnKSB7XG4gICAgdGhpcy5fY29uZmlnID0gaW5pdENvbmZpZyhjb25maWcpO1xuICAgIHRoaXMuX3Njb3BlQ2FjaGUgPSBuZXcgTWFwKCk7XG4gICAgdGhpcy5fcmVzb2x2ZXJDYWNoZSA9IG5ldyBNYXAoKTtcbiAgfVxuICBnZXQgcGxhdGZvcm0oKSB7XG4gICAgcmV0dXJuIHRoaXMuX2NvbmZpZy5wbGF0Zm9ybTtcbiAgfVxuICBnZXQgdHlwZSgpIHtcbiAgICByZXR1cm4gdGhpcy5fY29uZmlnLnR5cGU7XG4gIH1cbiAgc2V0IHR5cGUodHlwZSkge1xuICAgIHRoaXMuX2NvbmZpZy50eXBlID0gdHlwZTtcbiAgfVxuICBnZXQgZGF0YSgpIHtcbiAgICByZXR1cm4gdGhpcy5fY29uZmlnLmRhdGE7XG4gIH1cbiAgc2V0IGRhdGEoZGF0YSkge1xuICAgIHRoaXMuX2NvbmZpZy5kYXRhID0gaW5pdERhdGEoZGF0YSk7XG4gIH1cbiAgZ2V0IG9wdGlvbnMoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2NvbmZpZy5vcHRpb25zO1xuICB9XG4gIHNldCBvcHRpb25zKG9wdGlvbnMpIHtcbiAgICB0aGlzLl9jb25maWcub3B0aW9ucyA9IG9wdGlvbnM7XG4gIH1cbiAgZ2V0IHBsdWdpbnMoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2NvbmZpZy5wbHVnaW5zO1xuICB9XG4gIHVwZGF0ZSgpIHtcbiAgICBjb25zdCBjb25maWcgPSB0aGlzLl9jb25maWc7XG4gICAgdGhpcy5jbGVhckNhY2hlKCk7XG4gICAgaW5pdE9wdGlvbnMoY29uZmlnKTtcbiAgfVxuICBjbGVhckNhY2hlKCkge1xuICAgIHRoaXMuX3Njb3BlQ2FjaGUuY2xlYXIoKTtcbiAgICB0aGlzLl9yZXNvbHZlckNhY2hlLmNsZWFyKCk7XG4gIH1cbiAgZGF0YXNldFNjb3BlS2V5cyhkYXRhc2V0VHlwZSkge1xuICAgIHJldHVybiBjYWNoZWRLZXlzKGRhdGFzZXRUeXBlLFxuICAgICAgKCkgPT4gW1tcbiAgICAgICAgYGRhdGFzZXRzLiR7ZGF0YXNldFR5cGV9YCxcbiAgICAgICAgJydcbiAgICAgIF1dKTtcbiAgfVxuICBkYXRhc2V0QW5pbWF0aW9uU2NvcGVLZXlzKGRhdGFzZXRUeXBlLCB0cmFuc2l0aW9uKSB7XG4gICAgcmV0dXJuIGNhY2hlZEtleXMoYCR7ZGF0YXNldFR5cGV9LnRyYW5zaXRpb24uJHt0cmFuc2l0aW9ufWAsXG4gICAgICAoKSA9PiBbXG4gICAgICAgIFtcbiAgICAgICAgICBgZGF0YXNldHMuJHtkYXRhc2V0VHlwZX0udHJhbnNpdGlvbnMuJHt0cmFuc2l0aW9ufWAsXG4gICAgICAgICAgYHRyYW5zaXRpb25zLiR7dHJhbnNpdGlvbn1gLFxuICAgICAgICBdLFxuICAgICAgICBbXG4gICAgICAgICAgYGRhdGFzZXRzLiR7ZGF0YXNldFR5cGV9YCxcbiAgICAgICAgICAnJ1xuICAgICAgICBdXG4gICAgICBdKTtcbiAgfVxuICBkYXRhc2V0RWxlbWVudFNjb3BlS2V5cyhkYXRhc2V0VHlwZSwgZWxlbWVudFR5cGUpIHtcbiAgICByZXR1cm4gY2FjaGVkS2V5cyhgJHtkYXRhc2V0VHlwZX0tJHtlbGVtZW50VHlwZX1gLFxuICAgICAgKCkgPT4gW1tcbiAgICAgICAgYGRhdGFzZXRzLiR7ZGF0YXNldFR5cGV9LmVsZW1lbnRzLiR7ZWxlbWVudFR5cGV9YCxcbiAgICAgICAgYGRhdGFzZXRzLiR7ZGF0YXNldFR5cGV9YCxcbiAgICAgICAgYGVsZW1lbnRzLiR7ZWxlbWVudFR5cGV9YCxcbiAgICAgICAgJydcbiAgICAgIF1dKTtcbiAgfVxuICBwbHVnaW5TY29wZUtleXMocGx1Z2luKSB7XG4gICAgY29uc3QgaWQgPSBwbHVnaW4uaWQ7XG4gICAgY29uc3QgdHlwZSA9IHRoaXMudHlwZTtcbiAgICByZXR1cm4gY2FjaGVkS2V5cyhgJHt0eXBlfS1wbHVnaW4tJHtpZH1gLFxuICAgICAgKCkgPT4gW1tcbiAgICAgICAgYHBsdWdpbnMuJHtpZH1gLFxuICAgICAgICAuLi5wbHVnaW4uYWRkaXRpb25hbE9wdGlvblNjb3BlcyB8fCBbXSxcbiAgICAgIF1dKTtcbiAgfVxuICBfY2FjaGVkU2NvcGVzKG1haW5TY29wZSwgcmVzZXRDYWNoZSkge1xuICAgIGNvbnN0IF9zY29wZUNhY2hlID0gdGhpcy5fc2NvcGVDYWNoZTtcbiAgICBsZXQgY2FjaGUgPSBfc2NvcGVDYWNoZS5nZXQobWFpblNjb3BlKTtcbiAgICBpZiAoIWNhY2hlIHx8IHJlc2V0Q2FjaGUpIHtcbiAgICAgIGNhY2hlID0gbmV3IE1hcCgpO1xuICAgICAgX3Njb3BlQ2FjaGUuc2V0KG1haW5TY29wZSwgY2FjaGUpO1xuICAgIH1cbiAgICByZXR1cm4gY2FjaGU7XG4gIH1cbiAgZ2V0T3B0aW9uU2NvcGVzKG1haW5TY29wZSwga2V5TGlzdHMsIHJlc2V0Q2FjaGUpIHtcbiAgICBjb25zdCB7b3B0aW9ucywgdHlwZX0gPSB0aGlzO1xuICAgIGNvbnN0IGNhY2hlID0gdGhpcy5fY2FjaGVkU2NvcGVzKG1haW5TY29wZSwgcmVzZXRDYWNoZSk7XG4gICAgY29uc3QgY2FjaGVkID0gY2FjaGUuZ2V0KGtleUxpc3RzKTtcbiAgICBpZiAoY2FjaGVkKSB7XG4gICAgICByZXR1cm4gY2FjaGVkO1xuICAgIH1cbiAgICBjb25zdCBzY29wZXMgPSBuZXcgU2V0KCk7XG4gICAga2V5TGlzdHMuZm9yRWFjaChrZXlzID0+IHtcbiAgICAgIGlmIChtYWluU2NvcGUpIHtcbiAgICAgICAgc2NvcGVzLmFkZChtYWluU2NvcGUpO1xuICAgICAgICBrZXlzLmZvckVhY2goa2V5ID0+IGFkZElmRm91bmQoc2NvcGVzLCBtYWluU2NvcGUsIGtleSkpO1xuICAgICAgfVxuICAgICAga2V5cy5mb3JFYWNoKGtleSA9PiBhZGRJZkZvdW5kKHNjb3Blcywgb3B0aW9ucywga2V5KSk7XG4gICAgICBrZXlzLmZvckVhY2goa2V5ID0+IGFkZElmRm91bmQoc2NvcGVzLCBvdmVycmlkZXNbdHlwZV0gfHwge30sIGtleSkpO1xuICAgICAga2V5cy5mb3JFYWNoKGtleSA9PiBhZGRJZkZvdW5kKHNjb3BlcywgZGVmYXVsdHMsIGtleSkpO1xuICAgICAga2V5cy5mb3JFYWNoKGtleSA9PiBhZGRJZkZvdW5kKHNjb3BlcywgZGVzY3JpcHRvcnMsIGtleSkpO1xuICAgIH0pO1xuICAgIGNvbnN0IGFycmF5ID0gQXJyYXkuZnJvbShzY29wZXMpO1xuICAgIGlmIChhcnJheS5sZW5ndGggPT09IDApIHtcbiAgICAgIGFycmF5LnB1c2goT2JqZWN0LmNyZWF0ZShudWxsKSk7XG4gICAgfVxuICAgIGlmIChrZXlzQ2FjaGVkLmhhcyhrZXlMaXN0cykpIHtcbiAgICAgIGNhY2hlLnNldChrZXlMaXN0cywgYXJyYXkpO1xuICAgIH1cbiAgICByZXR1cm4gYXJyYXk7XG4gIH1cbiAgY2hhcnRPcHRpb25TY29wZXMoKSB7XG4gICAgY29uc3Qge29wdGlvbnMsIHR5cGV9ID0gdGhpcztcbiAgICByZXR1cm4gW1xuICAgICAgb3B0aW9ucyxcbiAgICAgIG92ZXJyaWRlc1t0eXBlXSB8fCB7fSxcbiAgICAgIGRlZmF1bHRzLmRhdGFzZXRzW3R5cGVdIHx8IHt9LFxuICAgICAge3R5cGV9LFxuICAgICAgZGVmYXVsdHMsXG4gICAgICBkZXNjcmlwdG9yc1xuICAgIF07XG4gIH1cbiAgcmVzb2x2ZU5hbWVkT3B0aW9ucyhzY29wZXMsIG5hbWVzLCBjb250ZXh0LCBwcmVmaXhlcyA9IFsnJ10pIHtcbiAgICBjb25zdCByZXN1bHQgPSB7JHNoYXJlZDogdHJ1ZX07XG4gICAgY29uc3Qge3Jlc29sdmVyLCBzdWJQcmVmaXhlc30gPSBnZXRSZXNvbHZlcih0aGlzLl9yZXNvbHZlckNhY2hlLCBzY29wZXMsIHByZWZpeGVzKTtcbiAgICBsZXQgb3B0aW9ucyA9IHJlc29sdmVyO1xuICAgIGlmIChuZWVkQ29udGV4dChyZXNvbHZlciwgbmFtZXMpKSB7XG4gICAgICByZXN1bHQuJHNoYXJlZCA9IGZhbHNlO1xuICAgICAgY29udGV4dCA9IGlzRnVuY3Rpb24oY29udGV4dCkgPyBjb250ZXh0KCkgOiBjb250ZXh0O1xuICAgICAgY29uc3Qgc3ViUmVzb2x2ZXIgPSB0aGlzLmNyZWF0ZVJlc29sdmVyKHNjb3BlcywgY29udGV4dCwgc3ViUHJlZml4ZXMpO1xuICAgICAgb3B0aW9ucyA9IF9hdHRhY2hDb250ZXh0KHJlc29sdmVyLCBjb250ZXh0LCBzdWJSZXNvbHZlcik7XG4gICAgfVxuICAgIGZvciAoY29uc3QgcHJvcCBvZiBuYW1lcykge1xuICAgICAgcmVzdWx0W3Byb3BdID0gb3B0aW9uc1twcm9wXTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuICBjcmVhdGVSZXNvbHZlcihzY29wZXMsIGNvbnRleHQsIHByZWZpeGVzID0gWycnXSwgZGVzY3JpcHRvckRlZmF1bHRzKSB7XG4gICAgY29uc3Qge3Jlc29sdmVyfSA9IGdldFJlc29sdmVyKHRoaXMuX3Jlc29sdmVyQ2FjaGUsIHNjb3BlcywgcHJlZml4ZXMpO1xuICAgIHJldHVybiBpc09iamVjdChjb250ZXh0KVxuICAgICAgPyBfYXR0YWNoQ29udGV4dChyZXNvbHZlciwgY29udGV4dCwgdW5kZWZpbmVkLCBkZXNjcmlwdG9yRGVmYXVsdHMpXG4gICAgICA6IHJlc29sdmVyO1xuICB9XG59XG5mdW5jdGlvbiBnZXRSZXNvbHZlcihyZXNvbHZlckNhY2hlLCBzY29wZXMsIHByZWZpeGVzKSB7XG4gIGxldCBjYWNoZSA9IHJlc29sdmVyQ2FjaGUuZ2V0KHNjb3Blcyk7XG4gIGlmICghY2FjaGUpIHtcbiAgICBjYWNoZSA9IG5ldyBNYXAoKTtcbiAgICByZXNvbHZlckNhY2hlLnNldChzY29wZXMsIGNhY2hlKTtcbiAgfVxuICBjb25zdCBjYWNoZUtleSA9IHByZWZpeGVzLmpvaW4oKTtcbiAgbGV0IGNhY2hlZCA9IGNhY2hlLmdldChjYWNoZUtleSk7XG4gIGlmICghY2FjaGVkKSB7XG4gICAgY29uc3QgcmVzb2x2ZXIgPSBfY3JlYXRlUmVzb2x2ZXIoc2NvcGVzLCBwcmVmaXhlcyk7XG4gICAgY2FjaGVkID0ge1xuICAgICAgcmVzb2x2ZXIsXG4gICAgICBzdWJQcmVmaXhlczogcHJlZml4ZXMuZmlsdGVyKHAgPT4gIXAudG9Mb3dlckNhc2UoKS5pbmNsdWRlcygnaG92ZXInKSlcbiAgICB9O1xuICAgIGNhY2hlLnNldChjYWNoZUtleSwgY2FjaGVkKTtcbiAgfVxuICByZXR1cm4gY2FjaGVkO1xufVxuY29uc3QgaGFzRnVuY3Rpb24gPSB2YWx1ZSA9PiBpc09iamVjdCh2YWx1ZSlcbiAgJiYgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModmFsdWUpLnJlZHVjZSgoYWNjLCBrZXkpID0+IGFjYyB8fCBpc0Z1bmN0aW9uKHZhbHVlW2tleV0pLCBmYWxzZSk7XG5mdW5jdGlvbiBuZWVkQ29udGV4dChwcm94eSwgbmFtZXMpIHtcbiAgY29uc3Qge2lzU2NyaXB0YWJsZSwgaXNJbmRleGFibGV9ID0gX2Rlc2NyaXB0b3JzKHByb3h5KTtcbiAgZm9yIChjb25zdCBwcm9wIG9mIG5hbWVzKSB7XG4gICAgY29uc3Qgc2NyaXB0YWJsZSA9IGlzU2NyaXB0YWJsZShwcm9wKTtcbiAgICBjb25zdCBpbmRleGFibGUgPSBpc0luZGV4YWJsZShwcm9wKTtcbiAgICBjb25zdCB2YWx1ZSA9IChpbmRleGFibGUgfHwgc2NyaXB0YWJsZSkgJiYgcHJveHlbcHJvcF07XG4gICAgaWYgKChzY3JpcHRhYmxlICYmIChpc0Z1bmN0aW9uKHZhbHVlKSB8fCBoYXNGdW5jdGlvbih2YWx1ZSkpKVxuICAgICAgfHwgKGluZGV4YWJsZSAmJiBpc0FycmF5KHZhbHVlKSkpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gZmFsc2U7XG59XG5cbnZhciB2ZXJzaW9uID0gXCIzLjcuMVwiO1xuXG5jb25zdCBLTk9XTl9QT1NJVElPTlMgPSBbJ3RvcCcsICdib3R0b20nLCAnbGVmdCcsICdyaWdodCcsICdjaGFydEFyZWEnXTtcbmZ1bmN0aW9uIHBvc2l0aW9uSXNIb3Jpem9udGFsKHBvc2l0aW9uLCBheGlzKSB7XG4gIHJldHVybiBwb3NpdGlvbiA9PT0gJ3RvcCcgfHwgcG9zaXRpb24gPT09ICdib3R0b20nIHx8IChLTk9XTl9QT1NJVElPTlMuaW5kZXhPZihwb3NpdGlvbikgPT09IC0xICYmIGF4aXMgPT09ICd4Jyk7XG59XG5mdW5jdGlvbiBjb21wYXJlMkxldmVsKGwxLCBsMikge1xuICByZXR1cm4gZnVuY3Rpb24oYSwgYikge1xuICAgIHJldHVybiBhW2wxXSA9PT0gYltsMV1cbiAgICAgID8gYVtsMl0gLSBiW2wyXVxuICAgICAgOiBhW2wxXSAtIGJbbDFdO1xuICB9O1xufVxuZnVuY3Rpb24gb25BbmltYXRpb25zQ29tcGxldGUoY29udGV4dCkge1xuICBjb25zdCBjaGFydCA9IGNvbnRleHQuY2hhcnQ7XG4gIGNvbnN0IGFuaW1hdGlvbk9wdGlvbnMgPSBjaGFydC5vcHRpb25zLmFuaW1hdGlvbjtcbiAgY2hhcnQubm90aWZ5UGx1Z2lucygnYWZ0ZXJSZW5kZXInKTtcbiAgY2FsbGJhY2soYW5pbWF0aW9uT3B0aW9ucyAmJiBhbmltYXRpb25PcHRpb25zLm9uQ29tcGxldGUsIFtjb250ZXh0XSwgY2hhcnQpO1xufVxuZnVuY3Rpb24gb25BbmltYXRpb25Qcm9ncmVzcyhjb250ZXh0KSB7XG4gIGNvbnN0IGNoYXJ0ID0gY29udGV4dC5jaGFydDtcbiAgY29uc3QgYW5pbWF0aW9uT3B0aW9ucyA9IGNoYXJ0Lm9wdGlvbnMuYW5pbWF0aW9uO1xuICBjYWxsYmFjayhhbmltYXRpb25PcHRpb25zICYmIGFuaW1hdGlvbk9wdGlvbnMub25Qcm9ncmVzcywgW2NvbnRleHRdLCBjaGFydCk7XG59XG5mdW5jdGlvbiBnZXRDYW52YXMoaXRlbSkge1xuICBpZiAoX2lzRG9tU3VwcG9ydGVkKCkgJiYgdHlwZW9mIGl0ZW0gPT09ICdzdHJpbmcnKSB7XG4gICAgaXRlbSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGl0ZW0pO1xuICB9IGVsc2UgaWYgKGl0ZW0gJiYgaXRlbS5sZW5ndGgpIHtcbiAgICBpdGVtID0gaXRlbVswXTtcbiAgfVxuICBpZiAoaXRlbSAmJiBpdGVtLmNhbnZhcykge1xuICAgIGl0ZW0gPSBpdGVtLmNhbnZhcztcbiAgfVxuICByZXR1cm4gaXRlbTtcbn1cbmNvbnN0IGluc3RhbmNlcyA9IHt9O1xuY29uc3QgZ2V0Q2hhcnQgPSAoa2V5KSA9PiB7XG4gIGNvbnN0IGNhbnZhcyA9IGdldENhbnZhcyhrZXkpO1xuICByZXR1cm4gT2JqZWN0LnZhbHVlcyhpbnN0YW5jZXMpLmZpbHRlcigoYykgPT4gYy5jYW52YXMgPT09IGNhbnZhcykucG9wKCk7XG59O1xuZnVuY3Rpb24gbW92ZU51bWVyaWNLZXlzKG9iaiwgc3RhcnQsIG1vdmUpIHtcbiAgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKG9iaik7XG4gIGZvciAoY29uc3Qga2V5IG9mIGtleXMpIHtcbiAgICBjb25zdCBpbnRLZXkgPSAra2V5O1xuICAgIGlmIChpbnRLZXkgPj0gc3RhcnQpIHtcbiAgICAgIGNvbnN0IHZhbHVlID0gb2JqW2tleV07XG4gICAgICBkZWxldGUgb2JqW2tleV07XG4gICAgICBpZiAobW92ZSA+IDAgfHwgaW50S2V5ID4gc3RhcnQpIHtcbiAgICAgICAgb2JqW2ludEtleSArIG1vdmVdID0gdmFsdWU7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5mdW5jdGlvbiBkZXRlcm1pbmVMYXN0RXZlbnQoZSwgbGFzdEV2ZW50LCBpbkNoYXJ0QXJlYSwgaXNDbGljaykge1xuICBpZiAoIWluQ2hhcnRBcmVhIHx8IGUudHlwZSA9PT0gJ21vdXNlb3V0Jykge1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIGlmIChpc0NsaWNrKSB7XG4gICAgcmV0dXJuIGxhc3RFdmVudDtcbiAgfVxuICByZXR1cm4gZTtcbn1cbmNsYXNzIENoYXJ0IHtcbiAgY29uc3RydWN0b3IoaXRlbSwgdXNlckNvbmZpZykge1xuICAgIGNvbnN0IGNvbmZpZyA9IHRoaXMuY29uZmlnID0gbmV3IENvbmZpZyh1c2VyQ29uZmlnKTtcbiAgICBjb25zdCBpbml0aWFsQ2FudmFzID0gZ2V0Q2FudmFzKGl0ZW0pO1xuICAgIGNvbnN0IGV4aXN0aW5nQ2hhcnQgPSBnZXRDaGFydChpbml0aWFsQ2FudmFzKTtcbiAgICBpZiAoZXhpc3RpbmdDaGFydCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAnQ2FudmFzIGlzIGFscmVhZHkgaW4gdXNlLiBDaGFydCB3aXRoIElEIFxcJycgKyBleGlzdGluZ0NoYXJ0LmlkICsgJ1xcJycgK1xuXHRcdFx0XHQnIG11c3QgYmUgZGVzdHJveWVkIGJlZm9yZSB0aGUgY2FudmFzIGNhbiBiZSByZXVzZWQuJ1xuICAgICAgKTtcbiAgICB9XG4gICAgY29uc3Qgb3B0aW9ucyA9IGNvbmZpZy5jcmVhdGVSZXNvbHZlcihjb25maWcuY2hhcnRPcHRpb25TY29wZXMoKSwgdGhpcy5nZXRDb250ZXh0KCkpO1xuICAgIHRoaXMucGxhdGZvcm0gPSBuZXcgKGNvbmZpZy5wbGF0Zm9ybSB8fCBfZGV0ZWN0UGxhdGZvcm0oaW5pdGlhbENhbnZhcykpKCk7XG4gICAgdGhpcy5wbGF0Zm9ybS51cGRhdGVDb25maWcoY29uZmlnKTtcbiAgICBjb25zdCBjb250ZXh0ID0gdGhpcy5wbGF0Zm9ybS5hY3F1aXJlQ29udGV4dChpbml0aWFsQ2FudmFzLCBvcHRpb25zLmFzcGVjdFJhdGlvKTtcbiAgICBjb25zdCBjYW52YXMgPSBjb250ZXh0ICYmIGNvbnRleHQuY2FudmFzO1xuICAgIGNvbnN0IGhlaWdodCA9IGNhbnZhcyAmJiBjYW52YXMuaGVpZ2h0O1xuICAgIGNvbnN0IHdpZHRoID0gY2FudmFzICYmIGNhbnZhcy53aWR0aDtcbiAgICB0aGlzLmlkID0gdWlkKCk7XG4gICAgdGhpcy5jdHggPSBjb250ZXh0O1xuICAgIHRoaXMuY2FudmFzID0gY2FudmFzO1xuICAgIHRoaXMud2lkdGggPSB3aWR0aDtcbiAgICB0aGlzLmhlaWdodCA9IGhlaWdodDtcbiAgICB0aGlzLl9vcHRpb25zID0gb3B0aW9ucztcbiAgICB0aGlzLl9hc3BlY3RSYXRpbyA9IHRoaXMuYXNwZWN0UmF0aW87XG4gICAgdGhpcy5fbGF5ZXJzID0gW107XG4gICAgdGhpcy5fbWV0YXNldHMgPSBbXTtcbiAgICB0aGlzLl9zdGFja3MgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5ib3hlcyA9IFtdO1xuICAgIHRoaXMuY3VycmVudERldmljZVBpeGVsUmF0aW8gPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5jaGFydEFyZWEgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5fYWN0aXZlID0gW107XG4gICAgdGhpcy5fbGFzdEV2ZW50ID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuX2xpc3RlbmVycyA9IHt9O1xuICAgIHRoaXMuX3Jlc3BvbnNpdmVMaXN0ZW5lcnMgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5fc29ydGVkTWV0YXNldHMgPSBbXTtcbiAgICB0aGlzLnNjYWxlcyA9IHt9O1xuICAgIHRoaXMuX3BsdWdpbnMgPSBuZXcgUGx1Z2luU2VydmljZSgpO1xuICAgIHRoaXMuJHByb3hpZXMgPSB7fTtcbiAgICB0aGlzLl9oaWRkZW5JbmRpY2VzID0ge307XG4gICAgdGhpcy5hdHRhY2hlZCA9IGZhbHNlO1xuICAgIHRoaXMuX2FuaW1hdGlvbnNEaXNhYmxlZCA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLiRjb250ZXh0ID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuX2RvUmVzaXplID0gZGVib3VuY2UobW9kZSA9PiB0aGlzLnVwZGF0ZShtb2RlKSwgb3B0aW9ucy5yZXNpemVEZWxheSB8fCAwKTtcbiAgICB0aGlzLl9kYXRhQ2hhbmdlcyA9IFtdO1xuICAgIGluc3RhbmNlc1t0aGlzLmlkXSA9IHRoaXM7XG4gICAgaWYgKCFjb250ZXh0IHx8ICFjYW52YXMpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoXCJGYWlsZWQgdG8gY3JlYXRlIGNoYXJ0OiBjYW4ndCBhY3F1aXJlIGNvbnRleHQgZnJvbSB0aGUgZ2l2ZW4gaXRlbVwiKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgYW5pbWF0b3IubGlzdGVuKHRoaXMsICdjb21wbGV0ZScsIG9uQW5pbWF0aW9uc0NvbXBsZXRlKTtcbiAgICBhbmltYXRvci5saXN0ZW4odGhpcywgJ3Byb2dyZXNzJywgb25BbmltYXRpb25Qcm9ncmVzcyk7XG4gICAgdGhpcy5faW5pdGlhbGl6ZSgpO1xuICAgIGlmICh0aGlzLmF0dGFjaGVkKSB7XG4gICAgICB0aGlzLnVwZGF0ZSgpO1xuICAgIH1cbiAgfVxuICBnZXQgYXNwZWN0UmF0aW8oKSB7XG4gICAgY29uc3Qge29wdGlvbnM6IHthc3BlY3RSYXRpbywgbWFpbnRhaW5Bc3BlY3RSYXRpb30sIHdpZHRoLCBoZWlnaHQsIF9hc3BlY3RSYXRpb30gPSB0aGlzO1xuICAgIGlmICghaXNOdWxsT3JVbmRlZihhc3BlY3RSYXRpbykpIHtcbiAgICAgIHJldHVybiBhc3BlY3RSYXRpbztcbiAgICB9XG4gICAgaWYgKG1haW50YWluQXNwZWN0UmF0aW8gJiYgX2FzcGVjdFJhdGlvKSB7XG4gICAgICByZXR1cm4gX2FzcGVjdFJhdGlvO1xuICAgIH1cbiAgICByZXR1cm4gaGVpZ2h0ID8gd2lkdGggLyBoZWlnaHQgOiBudWxsO1xuICB9XG4gIGdldCBkYXRhKCkge1xuICAgIHJldHVybiB0aGlzLmNvbmZpZy5kYXRhO1xuICB9XG4gIHNldCBkYXRhKGRhdGEpIHtcbiAgICB0aGlzLmNvbmZpZy5kYXRhID0gZGF0YTtcbiAgfVxuICBnZXQgb3B0aW9ucygpIHtcbiAgICByZXR1cm4gdGhpcy5fb3B0aW9ucztcbiAgfVxuICBzZXQgb3B0aW9ucyhvcHRpb25zKSB7XG4gICAgdGhpcy5jb25maWcub3B0aW9ucyA9IG9wdGlvbnM7XG4gIH1cbiAgX2luaXRpYWxpemUoKSB7XG4gICAgdGhpcy5ub3RpZnlQbHVnaW5zKCdiZWZvcmVJbml0Jyk7XG4gICAgaWYgKHRoaXMub3B0aW9ucy5yZXNwb25zaXZlKSB7XG4gICAgICB0aGlzLnJlc2l6ZSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXRpbmFTY2FsZSh0aGlzLCB0aGlzLm9wdGlvbnMuZGV2aWNlUGl4ZWxSYXRpbyk7XG4gICAgfVxuICAgIHRoaXMuYmluZEV2ZW50cygpO1xuICAgIHRoaXMubm90aWZ5UGx1Z2lucygnYWZ0ZXJJbml0Jyk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbiAgY2xlYXIoKSB7XG4gICAgY2xlYXJDYW52YXModGhpcy5jYW52YXMsIHRoaXMuY3R4KTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICBzdG9wKCkge1xuICAgIGFuaW1hdG9yLnN0b3AodGhpcyk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbiAgcmVzaXplKHdpZHRoLCBoZWlnaHQpIHtcbiAgICBpZiAoIWFuaW1hdG9yLnJ1bm5pbmcodGhpcykpIHtcbiAgICAgIHRoaXMuX3Jlc2l6ZSh3aWR0aCwgaGVpZ2h0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5fcmVzaXplQmVmb3JlRHJhdyA9IHt3aWR0aCwgaGVpZ2h0fTtcbiAgICB9XG4gIH1cbiAgX3Jlc2l6ZSh3aWR0aCwgaGVpZ2h0KSB7XG4gICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMub3B0aW9ucztcbiAgICBjb25zdCBjYW52YXMgPSB0aGlzLmNhbnZhcztcbiAgICBjb25zdCBhc3BlY3RSYXRpbyA9IG9wdGlvbnMubWFpbnRhaW5Bc3BlY3RSYXRpbyAmJiB0aGlzLmFzcGVjdFJhdGlvO1xuICAgIGNvbnN0IG5ld1NpemUgPSB0aGlzLnBsYXRmb3JtLmdldE1heGltdW1TaXplKGNhbnZhcywgd2lkdGgsIGhlaWdodCwgYXNwZWN0UmF0aW8pO1xuICAgIGNvbnN0IG5ld1JhdGlvID0gb3B0aW9ucy5kZXZpY2VQaXhlbFJhdGlvIHx8IHRoaXMucGxhdGZvcm0uZ2V0RGV2aWNlUGl4ZWxSYXRpbygpO1xuICAgIGNvbnN0IG1vZGUgPSB0aGlzLndpZHRoID8gJ3Jlc2l6ZScgOiAnYXR0YWNoJztcbiAgICB0aGlzLndpZHRoID0gbmV3U2l6ZS53aWR0aDtcbiAgICB0aGlzLmhlaWdodCA9IG5ld1NpemUuaGVpZ2h0O1xuICAgIHRoaXMuX2FzcGVjdFJhdGlvID0gdGhpcy5hc3BlY3RSYXRpbztcbiAgICBpZiAoIXJldGluYVNjYWxlKHRoaXMsIG5ld1JhdGlvLCB0cnVlKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLm5vdGlmeVBsdWdpbnMoJ3Jlc2l6ZScsIHtzaXplOiBuZXdTaXplfSk7XG4gICAgY2FsbGJhY2sob3B0aW9ucy5vblJlc2l6ZSwgW3RoaXMsIG5ld1NpemVdLCB0aGlzKTtcbiAgICBpZiAodGhpcy5hdHRhY2hlZCkge1xuICAgICAgaWYgKHRoaXMuX2RvUmVzaXplKG1vZGUpKSB7XG4gICAgICAgIHRoaXMucmVuZGVyKCk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGVuc3VyZVNjYWxlc0hhdmVJRHMoKSB7XG4gICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMub3B0aW9ucztcbiAgICBjb25zdCBzY2FsZXNPcHRpb25zID0gb3B0aW9ucy5zY2FsZXMgfHwge307XG4gICAgZWFjaChzY2FsZXNPcHRpb25zLCAoYXhpc09wdGlvbnMsIGF4aXNJRCkgPT4ge1xuICAgICAgYXhpc09wdGlvbnMuaWQgPSBheGlzSUQ7XG4gICAgfSk7XG4gIH1cbiAgYnVpbGRPclVwZGF0ZVNjYWxlcygpIHtcbiAgICBjb25zdCBvcHRpb25zID0gdGhpcy5vcHRpb25zO1xuICAgIGNvbnN0IHNjYWxlT3B0cyA9IG9wdGlvbnMuc2NhbGVzO1xuICAgIGNvbnN0IHNjYWxlcyA9IHRoaXMuc2NhbGVzO1xuICAgIGNvbnN0IHVwZGF0ZWQgPSBPYmplY3Qua2V5cyhzY2FsZXMpLnJlZHVjZSgob2JqLCBpZCkgPT4ge1xuICAgICAgb2JqW2lkXSA9IGZhbHNlO1xuICAgICAgcmV0dXJuIG9iajtcbiAgICB9LCB7fSk7XG4gICAgbGV0IGl0ZW1zID0gW107XG4gICAgaWYgKHNjYWxlT3B0cykge1xuICAgICAgaXRlbXMgPSBpdGVtcy5jb25jYXQoXG4gICAgICAgIE9iamVjdC5rZXlzKHNjYWxlT3B0cykubWFwKChpZCkgPT4ge1xuICAgICAgICAgIGNvbnN0IHNjYWxlT3B0aW9ucyA9IHNjYWxlT3B0c1tpZF07XG4gICAgICAgICAgY29uc3QgYXhpcyA9IGRldGVybWluZUF4aXMoaWQsIHNjYWxlT3B0aW9ucyk7XG4gICAgICAgICAgY29uc3QgaXNSYWRpYWwgPSBheGlzID09PSAncic7XG4gICAgICAgICAgY29uc3QgaXNIb3Jpem9udGFsID0gYXhpcyA9PT0gJ3gnO1xuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBvcHRpb25zOiBzY2FsZU9wdGlvbnMsXG4gICAgICAgICAgICBkcG9zaXRpb246IGlzUmFkaWFsID8gJ2NoYXJ0QXJlYScgOiBpc0hvcml6b250YWwgPyAnYm90dG9tJyA6ICdsZWZ0JyxcbiAgICAgICAgICAgIGR0eXBlOiBpc1JhZGlhbCA/ICdyYWRpYWxMaW5lYXInIDogaXNIb3Jpem9udGFsID8gJ2NhdGVnb3J5JyA6ICdsaW5lYXInXG4gICAgICAgICAgfTtcbiAgICAgICAgfSlcbiAgICAgICk7XG4gICAgfVxuICAgIGVhY2goaXRlbXMsIChpdGVtKSA9PiB7XG4gICAgICBjb25zdCBzY2FsZU9wdGlvbnMgPSBpdGVtLm9wdGlvbnM7XG4gICAgICBjb25zdCBpZCA9IHNjYWxlT3B0aW9ucy5pZDtcbiAgICAgIGNvbnN0IGF4aXMgPSBkZXRlcm1pbmVBeGlzKGlkLCBzY2FsZU9wdGlvbnMpO1xuICAgICAgY29uc3Qgc2NhbGVUeXBlID0gdmFsdWVPckRlZmF1bHQoc2NhbGVPcHRpb25zLnR5cGUsIGl0ZW0uZHR5cGUpO1xuICAgICAgaWYgKHNjYWxlT3B0aW9ucy5wb3NpdGlvbiA9PT0gdW5kZWZpbmVkIHx8IHBvc2l0aW9uSXNIb3Jpem9udGFsKHNjYWxlT3B0aW9ucy5wb3NpdGlvbiwgYXhpcykgIT09IHBvc2l0aW9uSXNIb3Jpem9udGFsKGl0ZW0uZHBvc2l0aW9uKSkge1xuICAgICAgICBzY2FsZU9wdGlvbnMucG9zaXRpb24gPSBpdGVtLmRwb3NpdGlvbjtcbiAgICAgIH1cbiAgICAgIHVwZGF0ZWRbaWRdID0gdHJ1ZTtcbiAgICAgIGxldCBzY2FsZSA9IG51bGw7XG4gICAgICBpZiAoaWQgaW4gc2NhbGVzICYmIHNjYWxlc1tpZF0udHlwZSA9PT0gc2NhbGVUeXBlKSB7XG4gICAgICAgIHNjYWxlID0gc2NhbGVzW2lkXTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnN0IHNjYWxlQ2xhc3MgPSByZWdpc3RyeS5nZXRTY2FsZShzY2FsZVR5cGUpO1xuICAgICAgICBzY2FsZSA9IG5ldyBzY2FsZUNsYXNzKHtcbiAgICAgICAgICBpZCxcbiAgICAgICAgICB0eXBlOiBzY2FsZVR5cGUsXG4gICAgICAgICAgY3R4OiB0aGlzLmN0eCxcbiAgICAgICAgICBjaGFydDogdGhpc1xuICAgICAgICB9KTtcbiAgICAgICAgc2NhbGVzW3NjYWxlLmlkXSA9IHNjYWxlO1xuICAgICAgfVxuICAgICAgc2NhbGUuaW5pdChzY2FsZU9wdGlvbnMsIG9wdGlvbnMpO1xuICAgIH0pO1xuICAgIGVhY2godXBkYXRlZCwgKGhhc1VwZGF0ZWQsIGlkKSA9PiB7XG4gICAgICBpZiAoIWhhc1VwZGF0ZWQpIHtcbiAgICAgICAgZGVsZXRlIHNjYWxlc1tpZF07XG4gICAgICB9XG4gICAgfSk7XG4gICAgZWFjaChzY2FsZXMsIChzY2FsZSkgPT4ge1xuICAgICAgbGF5b3V0cy5jb25maWd1cmUodGhpcywgc2NhbGUsIHNjYWxlLm9wdGlvbnMpO1xuICAgICAgbGF5b3V0cy5hZGRCb3godGhpcywgc2NhbGUpO1xuICAgIH0pO1xuICB9XG4gIF91cGRhdGVNZXRhc2V0cygpIHtcbiAgICBjb25zdCBtZXRhc2V0cyA9IHRoaXMuX21ldGFzZXRzO1xuICAgIGNvbnN0IG51bURhdGEgPSB0aGlzLmRhdGEuZGF0YXNldHMubGVuZ3RoO1xuICAgIGNvbnN0IG51bU1ldGEgPSBtZXRhc2V0cy5sZW5ndGg7XG4gICAgbWV0YXNldHMuc29ydCgoYSwgYikgPT4gYS5pbmRleCAtIGIuaW5kZXgpO1xuICAgIGlmIChudW1NZXRhID4gbnVtRGF0YSkge1xuICAgICAgZm9yIChsZXQgaSA9IG51bURhdGE7IGkgPCBudW1NZXRhOyArK2kpIHtcbiAgICAgICAgdGhpcy5fZGVzdHJveURhdGFzZXRNZXRhKGkpO1xuICAgICAgfVxuICAgICAgbWV0YXNldHMuc3BsaWNlKG51bURhdGEsIG51bU1ldGEgLSBudW1EYXRhKTtcbiAgICB9XG4gICAgdGhpcy5fc29ydGVkTWV0YXNldHMgPSBtZXRhc2V0cy5zbGljZSgwKS5zb3J0KGNvbXBhcmUyTGV2ZWwoJ29yZGVyJywgJ2luZGV4JykpO1xuICB9XG4gIF9yZW1vdmVVbnJlZmVyZW5jZWRNZXRhc2V0cygpIHtcbiAgICBjb25zdCB7X21ldGFzZXRzOiBtZXRhc2V0cywgZGF0YToge2RhdGFzZXRzfX0gPSB0aGlzO1xuICAgIGlmIChtZXRhc2V0cy5sZW5ndGggPiBkYXRhc2V0cy5sZW5ndGgpIHtcbiAgICAgIGRlbGV0ZSB0aGlzLl9zdGFja3M7XG4gICAgfVxuICAgIG1ldGFzZXRzLmZvckVhY2goKG1ldGEsIGluZGV4KSA9PiB7XG4gICAgICBpZiAoZGF0YXNldHMuZmlsdGVyKHggPT4geCA9PT0gbWV0YS5fZGF0YXNldCkubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHRoaXMuX2Rlc3Ryb3lEYXRhc2V0TWV0YShpbmRleCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbiAgYnVpbGRPclVwZGF0ZUNvbnRyb2xsZXJzKCkge1xuICAgIGNvbnN0IG5ld0NvbnRyb2xsZXJzID0gW107XG4gICAgY29uc3QgZGF0YXNldHMgPSB0aGlzLmRhdGEuZGF0YXNldHM7XG4gICAgbGV0IGksIGlsZW47XG4gICAgdGhpcy5fcmVtb3ZlVW5yZWZlcmVuY2VkTWV0YXNldHMoKTtcbiAgICBmb3IgKGkgPSAwLCBpbGVuID0gZGF0YXNldHMubGVuZ3RoOyBpIDwgaWxlbjsgaSsrKSB7XG4gICAgICBjb25zdCBkYXRhc2V0ID0gZGF0YXNldHNbaV07XG4gICAgICBsZXQgbWV0YSA9IHRoaXMuZ2V0RGF0YXNldE1ldGEoaSk7XG4gICAgICBjb25zdCB0eXBlID0gZGF0YXNldC50eXBlIHx8IHRoaXMuY29uZmlnLnR5cGU7XG4gICAgICBpZiAobWV0YS50eXBlICYmIG1ldGEudHlwZSAhPT0gdHlwZSkge1xuICAgICAgICB0aGlzLl9kZXN0cm95RGF0YXNldE1ldGEoaSk7XG4gICAgICAgIG1ldGEgPSB0aGlzLmdldERhdGFzZXRNZXRhKGkpO1xuICAgICAgfVxuICAgICAgbWV0YS50eXBlID0gdHlwZTtcbiAgICAgIG1ldGEuaW5kZXhBeGlzID0gZGF0YXNldC5pbmRleEF4aXMgfHwgZ2V0SW5kZXhBeGlzKHR5cGUsIHRoaXMub3B0aW9ucyk7XG4gICAgICBtZXRhLm9yZGVyID0gZGF0YXNldC5vcmRlciB8fCAwO1xuICAgICAgbWV0YS5pbmRleCA9IGk7XG4gICAgICBtZXRhLmxhYmVsID0gJycgKyBkYXRhc2V0LmxhYmVsO1xuICAgICAgbWV0YS52aXNpYmxlID0gdGhpcy5pc0RhdGFzZXRWaXNpYmxlKGkpO1xuICAgICAgaWYgKG1ldGEuY29udHJvbGxlcikge1xuICAgICAgICBtZXRhLmNvbnRyb2xsZXIudXBkYXRlSW5kZXgoaSk7XG4gICAgICAgIG1ldGEuY29udHJvbGxlci5saW5rU2NhbGVzKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zdCBDb250cm9sbGVyQ2xhc3MgPSByZWdpc3RyeS5nZXRDb250cm9sbGVyKHR5cGUpO1xuICAgICAgICBjb25zdCB7ZGF0YXNldEVsZW1lbnRUeXBlLCBkYXRhRWxlbWVudFR5cGV9ID0gZGVmYXVsdHMuZGF0YXNldHNbdHlwZV07XG4gICAgICAgIE9iamVjdC5hc3NpZ24oQ29udHJvbGxlckNsYXNzLnByb3RvdHlwZSwge1xuICAgICAgICAgIGRhdGFFbGVtZW50VHlwZTogcmVnaXN0cnkuZ2V0RWxlbWVudChkYXRhRWxlbWVudFR5cGUpLFxuICAgICAgICAgIGRhdGFzZXRFbGVtZW50VHlwZTogZGF0YXNldEVsZW1lbnRUeXBlICYmIHJlZ2lzdHJ5LmdldEVsZW1lbnQoZGF0YXNldEVsZW1lbnRUeXBlKVxuICAgICAgICB9KTtcbiAgICAgICAgbWV0YS5jb250cm9sbGVyID0gbmV3IENvbnRyb2xsZXJDbGFzcyh0aGlzLCBpKTtcbiAgICAgICAgbmV3Q29udHJvbGxlcnMucHVzaChtZXRhLmNvbnRyb2xsZXIpO1xuICAgICAgfVxuICAgIH1cbiAgICB0aGlzLl91cGRhdGVNZXRhc2V0cygpO1xuICAgIHJldHVybiBuZXdDb250cm9sbGVycztcbiAgfVxuICBfcmVzZXRFbGVtZW50cygpIHtcbiAgICBlYWNoKHRoaXMuZGF0YS5kYXRhc2V0cywgKGRhdGFzZXQsIGRhdGFzZXRJbmRleCkgPT4ge1xuICAgICAgdGhpcy5nZXREYXRhc2V0TWV0YShkYXRhc2V0SW5kZXgpLmNvbnRyb2xsZXIucmVzZXQoKTtcbiAgICB9LCB0aGlzKTtcbiAgfVxuICByZXNldCgpIHtcbiAgICB0aGlzLl9yZXNldEVsZW1lbnRzKCk7XG4gICAgdGhpcy5ub3RpZnlQbHVnaW5zKCdyZXNldCcpO1xuICB9XG4gIHVwZGF0ZShtb2RlKSB7XG4gICAgY29uc3QgY29uZmlnID0gdGhpcy5jb25maWc7XG4gICAgY29uZmlnLnVwZGF0ZSgpO1xuICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLl9vcHRpb25zID0gY29uZmlnLmNyZWF0ZVJlc29sdmVyKGNvbmZpZy5jaGFydE9wdGlvblNjb3BlcygpLCB0aGlzLmdldENvbnRleHQoKSk7XG4gICAgY29uc3QgYW5pbXNEaXNhYmxlZCA9IHRoaXMuX2FuaW1hdGlvbnNEaXNhYmxlZCA9ICFvcHRpb25zLmFuaW1hdGlvbjtcbiAgICB0aGlzLl91cGRhdGVTY2FsZXMoKTtcbiAgICB0aGlzLl9jaGVja0V2ZW50QmluZGluZ3MoKTtcbiAgICB0aGlzLl91cGRhdGVIaWRkZW5JbmRpY2VzKCk7XG4gICAgdGhpcy5fcGx1Z2lucy5pbnZhbGlkYXRlKCk7XG4gICAgaWYgKHRoaXMubm90aWZ5UGx1Z2lucygnYmVmb3JlVXBkYXRlJywge21vZGUsIGNhbmNlbGFibGU6IHRydWV9KSA9PT0gZmFsc2UpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgbmV3Q29udHJvbGxlcnMgPSB0aGlzLmJ1aWxkT3JVcGRhdGVDb250cm9sbGVycygpO1xuICAgIHRoaXMubm90aWZ5UGx1Z2lucygnYmVmb3JlRWxlbWVudHNVcGRhdGUnKTtcbiAgICBsZXQgbWluUGFkZGluZyA9IDA7XG4gICAgZm9yIChsZXQgaSA9IDAsIGlsZW4gPSB0aGlzLmRhdGEuZGF0YXNldHMubGVuZ3RoOyBpIDwgaWxlbjsgaSsrKSB7XG4gICAgICBjb25zdCB7Y29udHJvbGxlcn0gPSB0aGlzLmdldERhdGFzZXRNZXRhKGkpO1xuICAgICAgY29uc3QgcmVzZXQgPSAhYW5pbXNEaXNhYmxlZCAmJiBuZXdDb250cm9sbGVycy5pbmRleE9mKGNvbnRyb2xsZXIpID09PSAtMTtcbiAgICAgIGNvbnRyb2xsZXIuYnVpbGRPclVwZGF0ZUVsZW1lbnRzKHJlc2V0KTtcbiAgICAgIG1pblBhZGRpbmcgPSBNYXRoLm1heCgrY29udHJvbGxlci5nZXRNYXhPdmVyZmxvdygpLCBtaW5QYWRkaW5nKTtcbiAgICB9XG4gICAgbWluUGFkZGluZyA9IHRoaXMuX21pblBhZGRpbmcgPSBvcHRpb25zLmxheW91dC5hdXRvUGFkZGluZyA/IG1pblBhZGRpbmcgOiAwO1xuICAgIHRoaXMuX3VwZGF0ZUxheW91dChtaW5QYWRkaW5nKTtcbiAgICBpZiAoIWFuaW1zRGlzYWJsZWQpIHtcbiAgICAgIGVhY2gobmV3Q29udHJvbGxlcnMsIChjb250cm9sbGVyKSA9PiB7XG4gICAgICAgIGNvbnRyb2xsZXIucmVzZXQoKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICB0aGlzLl91cGRhdGVEYXRhc2V0cyhtb2RlKTtcbiAgICB0aGlzLm5vdGlmeVBsdWdpbnMoJ2FmdGVyVXBkYXRlJywge21vZGV9KTtcbiAgICB0aGlzLl9sYXllcnMuc29ydChjb21wYXJlMkxldmVsKCd6JywgJ19pZHgnKSk7XG4gICAgY29uc3Qge19hY3RpdmUsIF9sYXN0RXZlbnR9ID0gdGhpcztcbiAgICBpZiAoX2xhc3RFdmVudCkge1xuICAgICAgdGhpcy5fZXZlbnRIYW5kbGVyKF9sYXN0RXZlbnQsIHRydWUpO1xuICAgIH0gZWxzZSBpZiAoX2FjdGl2ZS5sZW5ndGgpIHtcbiAgICAgIHRoaXMuX3VwZGF0ZUhvdmVyU3R5bGVzKF9hY3RpdmUsIF9hY3RpdmUsIHRydWUpO1xuICAgIH1cbiAgICB0aGlzLnJlbmRlcigpO1xuICB9XG4gIF91cGRhdGVTY2FsZXMoKSB7XG4gICAgZWFjaCh0aGlzLnNjYWxlcywgKHNjYWxlKSA9PiB7XG4gICAgICBsYXlvdXRzLnJlbW92ZUJveCh0aGlzLCBzY2FsZSk7XG4gICAgfSk7XG4gICAgdGhpcy5lbnN1cmVTY2FsZXNIYXZlSURzKCk7XG4gICAgdGhpcy5idWlsZE9yVXBkYXRlU2NhbGVzKCk7XG4gIH1cbiAgX2NoZWNrRXZlbnRCaW5kaW5ncygpIHtcbiAgICBjb25zdCBvcHRpb25zID0gdGhpcy5vcHRpb25zO1xuICAgIGNvbnN0IGV4aXN0aW5nRXZlbnRzID0gbmV3IFNldChPYmplY3Qua2V5cyh0aGlzLl9saXN0ZW5lcnMpKTtcbiAgICBjb25zdCBuZXdFdmVudHMgPSBuZXcgU2V0KG9wdGlvbnMuZXZlbnRzKTtcbiAgICBpZiAoIXNldHNFcXVhbChleGlzdGluZ0V2ZW50cywgbmV3RXZlbnRzKSB8fCAhIXRoaXMuX3Jlc3BvbnNpdmVMaXN0ZW5lcnMgIT09IG9wdGlvbnMucmVzcG9uc2l2ZSkge1xuICAgICAgdGhpcy51bmJpbmRFdmVudHMoKTtcbiAgICAgIHRoaXMuYmluZEV2ZW50cygpO1xuICAgIH1cbiAgfVxuICBfdXBkYXRlSGlkZGVuSW5kaWNlcygpIHtcbiAgICBjb25zdCB7X2hpZGRlbkluZGljZXN9ID0gdGhpcztcbiAgICBjb25zdCBjaGFuZ2VzID0gdGhpcy5fZ2V0VW5pZm9ybURhdGFDaGFuZ2VzKCkgfHwgW107XG4gICAgZm9yIChjb25zdCB7bWV0aG9kLCBzdGFydCwgY291bnR9IG9mIGNoYW5nZXMpIHtcbiAgICAgIGNvbnN0IG1vdmUgPSBtZXRob2QgPT09ICdfcmVtb3ZlRWxlbWVudHMnID8gLWNvdW50IDogY291bnQ7XG4gICAgICBtb3ZlTnVtZXJpY0tleXMoX2hpZGRlbkluZGljZXMsIHN0YXJ0LCBtb3ZlKTtcbiAgICB9XG4gIH1cbiAgX2dldFVuaWZvcm1EYXRhQ2hhbmdlcygpIHtcbiAgICBjb25zdCBfZGF0YUNoYW5nZXMgPSB0aGlzLl9kYXRhQ2hhbmdlcztcbiAgICBpZiAoIV9kYXRhQ2hhbmdlcyB8fCAhX2RhdGFDaGFuZ2VzLmxlbmd0aCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLl9kYXRhQ2hhbmdlcyA9IFtdO1xuICAgIGNvbnN0IGRhdGFzZXRDb3VudCA9IHRoaXMuZGF0YS5kYXRhc2V0cy5sZW5ndGg7XG4gICAgY29uc3QgbWFrZVNldCA9IChpZHgpID0+IG5ldyBTZXQoXG4gICAgICBfZGF0YUNoYW5nZXNcbiAgICAgICAgLmZpbHRlcihjID0+IGNbMF0gPT09IGlkeClcbiAgICAgICAgLm1hcCgoYywgaSkgPT4gaSArICcsJyArIGMuc3BsaWNlKDEpLmpvaW4oJywnKSlcbiAgICApO1xuICAgIGNvbnN0IGNoYW5nZVNldCA9IG1ha2VTZXQoMCk7XG4gICAgZm9yIChsZXQgaSA9IDE7IGkgPCBkYXRhc2V0Q291bnQ7IGkrKykge1xuICAgICAgaWYgKCFzZXRzRXF1YWwoY2hhbmdlU2V0LCBtYWtlU2V0KGkpKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBBcnJheS5mcm9tKGNoYW5nZVNldClcbiAgICAgIC5tYXAoYyA9PiBjLnNwbGl0KCcsJykpXG4gICAgICAubWFwKGEgPT4gKHttZXRob2Q6IGFbMV0sIHN0YXJ0OiArYVsyXSwgY291bnQ6ICthWzNdfSkpO1xuICB9XG4gIF91cGRhdGVMYXlvdXQobWluUGFkZGluZykge1xuICAgIGlmICh0aGlzLm5vdGlmeVBsdWdpbnMoJ2JlZm9yZUxheW91dCcsIHtjYW5jZWxhYmxlOiB0cnVlfSkgPT09IGZhbHNlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGxheW91dHMudXBkYXRlKHRoaXMsIHRoaXMud2lkdGgsIHRoaXMuaGVpZ2h0LCBtaW5QYWRkaW5nKTtcbiAgICBjb25zdCBhcmVhID0gdGhpcy5jaGFydEFyZWE7XG4gICAgY29uc3Qgbm9BcmVhID0gYXJlYS53aWR0aCA8PSAwIHx8IGFyZWEuaGVpZ2h0IDw9IDA7XG4gICAgdGhpcy5fbGF5ZXJzID0gW107XG4gICAgZWFjaCh0aGlzLmJveGVzLCAoYm94KSA9PiB7XG4gICAgICBpZiAobm9BcmVhICYmIGJveC5wb3NpdGlvbiA9PT0gJ2NoYXJ0QXJlYScpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYgKGJveC5jb25maWd1cmUpIHtcbiAgICAgICAgYm94LmNvbmZpZ3VyZSgpO1xuICAgICAgfVxuICAgICAgdGhpcy5fbGF5ZXJzLnB1c2goLi4uYm94Ll9sYXllcnMoKSk7XG4gICAgfSwgdGhpcyk7XG4gICAgdGhpcy5fbGF5ZXJzLmZvckVhY2goKGl0ZW0sIGluZGV4KSA9PiB7XG4gICAgICBpdGVtLl9pZHggPSBpbmRleDtcbiAgICB9KTtcbiAgICB0aGlzLm5vdGlmeVBsdWdpbnMoJ2FmdGVyTGF5b3V0Jyk7XG4gIH1cbiAgX3VwZGF0ZURhdGFzZXRzKG1vZGUpIHtcbiAgICBpZiAodGhpcy5ub3RpZnlQbHVnaW5zKCdiZWZvcmVEYXRhc2V0c1VwZGF0ZScsIHttb2RlLCBjYW5jZWxhYmxlOiB0cnVlfSkgPT09IGZhbHNlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGZvciAobGV0IGkgPSAwLCBpbGVuID0gdGhpcy5kYXRhLmRhdGFzZXRzLmxlbmd0aDsgaSA8IGlsZW47ICsraSkge1xuICAgICAgdGhpcy5nZXREYXRhc2V0TWV0YShpKS5jb250cm9sbGVyLmNvbmZpZ3VyZSgpO1xuICAgIH1cbiAgICBmb3IgKGxldCBpID0gMCwgaWxlbiA9IHRoaXMuZGF0YS5kYXRhc2V0cy5sZW5ndGg7IGkgPCBpbGVuOyArK2kpIHtcbiAgICAgIHRoaXMuX3VwZGF0ZURhdGFzZXQoaSwgaXNGdW5jdGlvbihtb2RlKSA/IG1vZGUoe2RhdGFzZXRJbmRleDogaX0pIDogbW9kZSk7XG4gICAgfVxuICAgIHRoaXMubm90aWZ5UGx1Z2lucygnYWZ0ZXJEYXRhc2V0c1VwZGF0ZScsIHttb2RlfSk7XG4gIH1cbiAgX3VwZGF0ZURhdGFzZXQoaW5kZXgsIG1vZGUpIHtcbiAgICBjb25zdCBtZXRhID0gdGhpcy5nZXREYXRhc2V0TWV0YShpbmRleCk7XG4gICAgY29uc3QgYXJncyA9IHttZXRhLCBpbmRleCwgbW9kZSwgY2FuY2VsYWJsZTogdHJ1ZX07XG4gICAgaWYgKHRoaXMubm90aWZ5UGx1Z2lucygnYmVmb3JlRGF0YXNldFVwZGF0ZScsIGFyZ3MpID09PSBmYWxzZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBtZXRhLmNvbnRyb2xsZXIuX3VwZGF0ZShtb2RlKTtcbiAgICBhcmdzLmNhbmNlbGFibGUgPSBmYWxzZTtcbiAgICB0aGlzLm5vdGlmeVBsdWdpbnMoJ2FmdGVyRGF0YXNldFVwZGF0ZScsIGFyZ3MpO1xuICB9XG4gIHJlbmRlcigpIHtcbiAgICBpZiAodGhpcy5ub3RpZnlQbHVnaW5zKCdiZWZvcmVSZW5kZXInLCB7Y2FuY2VsYWJsZTogdHJ1ZX0pID09PSBmYWxzZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoYW5pbWF0b3IuaGFzKHRoaXMpKSB7XG4gICAgICBpZiAodGhpcy5hdHRhY2hlZCAmJiAhYW5pbWF0b3IucnVubmluZyh0aGlzKSkge1xuICAgICAgICBhbmltYXRvci5zdGFydCh0aGlzKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5kcmF3KCk7XG4gICAgICBvbkFuaW1hdGlvbnNDb21wbGV0ZSh7Y2hhcnQ6IHRoaXN9KTtcbiAgICB9XG4gIH1cbiAgZHJhdygpIHtcbiAgICBsZXQgaTtcbiAgICBpZiAodGhpcy5fcmVzaXplQmVmb3JlRHJhdykge1xuICAgICAgY29uc3Qge3dpZHRoLCBoZWlnaHR9ID0gdGhpcy5fcmVzaXplQmVmb3JlRHJhdztcbiAgICAgIHRoaXMuX3Jlc2l6ZSh3aWR0aCwgaGVpZ2h0KTtcbiAgICAgIHRoaXMuX3Jlc2l6ZUJlZm9yZURyYXcgPSBudWxsO1xuICAgIH1cbiAgICB0aGlzLmNsZWFyKCk7XG4gICAgaWYgKHRoaXMud2lkdGggPD0gMCB8fCB0aGlzLmhlaWdodCA8PSAwKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmICh0aGlzLm5vdGlmeVBsdWdpbnMoJ2JlZm9yZURyYXcnLCB7Y2FuY2VsYWJsZTogdHJ1ZX0pID09PSBmYWxzZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBsYXllcnMgPSB0aGlzLl9sYXllcnM7XG4gICAgZm9yIChpID0gMDsgaSA8IGxheWVycy5sZW5ndGggJiYgbGF5ZXJzW2ldLnogPD0gMDsgKytpKSB7XG4gICAgICBsYXllcnNbaV0uZHJhdyh0aGlzLmNoYXJ0QXJlYSk7XG4gICAgfVxuICAgIHRoaXMuX2RyYXdEYXRhc2V0cygpO1xuICAgIGZvciAoOyBpIDwgbGF5ZXJzLmxlbmd0aDsgKytpKSB7XG4gICAgICBsYXllcnNbaV0uZHJhdyh0aGlzLmNoYXJ0QXJlYSk7XG4gICAgfVxuICAgIHRoaXMubm90aWZ5UGx1Z2lucygnYWZ0ZXJEcmF3Jyk7XG4gIH1cbiAgX2dldFNvcnRlZERhdGFzZXRNZXRhcyhmaWx0ZXJWaXNpYmxlKSB7XG4gICAgY29uc3QgbWV0YXNldHMgPSB0aGlzLl9zb3J0ZWRNZXRhc2V0cztcbiAgICBjb25zdCByZXN1bHQgPSBbXTtcbiAgICBsZXQgaSwgaWxlbjtcbiAgICBmb3IgKGkgPSAwLCBpbGVuID0gbWV0YXNldHMubGVuZ3RoOyBpIDwgaWxlbjsgKytpKSB7XG4gICAgICBjb25zdCBtZXRhID0gbWV0YXNldHNbaV07XG4gICAgICBpZiAoIWZpbHRlclZpc2libGUgfHwgbWV0YS52aXNpYmxlKSB7XG4gICAgICAgIHJlc3VsdC5wdXNoKG1ldGEpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG4gIGdldFNvcnRlZFZpc2libGVEYXRhc2V0TWV0YXMoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2dldFNvcnRlZERhdGFzZXRNZXRhcyh0cnVlKTtcbiAgfVxuICBfZHJhd0RhdGFzZXRzKCkge1xuICAgIGlmICh0aGlzLm5vdGlmeVBsdWdpbnMoJ2JlZm9yZURhdGFzZXRzRHJhdycsIHtjYW5jZWxhYmxlOiB0cnVlfSkgPT09IGZhbHNlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IG1ldGFzZXRzID0gdGhpcy5nZXRTb3J0ZWRWaXNpYmxlRGF0YXNldE1ldGFzKCk7XG4gICAgZm9yIChsZXQgaSA9IG1ldGFzZXRzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICB0aGlzLl9kcmF3RGF0YXNldChtZXRhc2V0c1tpXSk7XG4gICAgfVxuICAgIHRoaXMubm90aWZ5UGx1Z2lucygnYWZ0ZXJEYXRhc2V0c0RyYXcnKTtcbiAgfVxuICBfZHJhd0RhdGFzZXQobWV0YSkge1xuICAgIGNvbnN0IGN0eCA9IHRoaXMuY3R4O1xuICAgIGNvbnN0IGNsaXAgPSBtZXRhLl9jbGlwO1xuICAgIGNvbnN0IHVzZUNsaXAgPSAhY2xpcC5kaXNhYmxlZDtcbiAgICBjb25zdCBhcmVhID0gdGhpcy5jaGFydEFyZWE7XG4gICAgY29uc3QgYXJncyA9IHtcbiAgICAgIG1ldGEsXG4gICAgICBpbmRleDogbWV0YS5pbmRleCxcbiAgICAgIGNhbmNlbGFibGU6IHRydWVcbiAgICB9O1xuICAgIGlmICh0aGlzLm5vdGlmeVBsdWdpbnMoJ2JlZm9yZURhdGFzZXREcmF3JywgYXJncykgPT09IGZhbHNlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmICh1c2VDbGlwKSB7XG4gICAgICBjbGlwQXJlYShjdHgsIHtcbiAgICAgICAgbGVmdDogY2xpcC5sZWZ0ID09PSBmYWxzZSA/IDAgOiBhcmVhLmxlZnQgLSBjbGlwLmxlZnQsXG4gICAgICAgIHJpZ2h0OiBjbGlwLnJpZ2h0ID09PSBmYWxzZSA/IHRoaXMud2lkdGggOiBhcmVhLnJpZ2h0ICsgY2xpcC5yaWdodCxcbiAgICAgICAgdG9wOiBjbGlwLnRvcCA9PT0gZmFsc2UgPyAwIDogYXJlYS50b3AgLSBjbGlwLnRvcCxcbiAgICAgICAgYm90dG9tOiBjbGlwLmJvdHRvbSA9PT0gZmFsc2UgPyB0aGlzLmhlaWdodCA6IGFyZWEuYm90dG9tICsgY2xpcC5ib3R0b21cbiAgICAgIH0pO1xuICAgIH1cbiAgICBtZXRhLmNvbnRyb2xsZXIuZHJhdygpO1xuICAgIGlmICh1c2VDbGlwKSB7XG4gICAgICB1bmNsaXBBcmVhKGN0eCk7XG4gICAgfVxuICAgIGFyZ3MuY2FuY2VsYWJsZSA9IGZhbHNlO1xuICAgIHRoaXMubm90aWZ5UGx1Z2lucygnYWZ0ZXJEYXRhc2V0RHJhdycsIGFyZ3MpO1xuICB9XG4gIGdldEVsZW1lbnRzQXRFdmVudEZvck1vZGUoZSwgbW9kZSwgb3B0aW9ucywgdXNlRmluYWxQb3NpdGlvbikge1xuICAgIGNvbnN0IG1ldGhvZCA9IEludGVyYWN0aW9uLm1vZGVzW21vZGVdO1xuICAgIGlmICh0eXBlb2YgbWV0aG9kID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICByZXR1cm4gbWV0aG9kKHRoaXMsIGUsIG9wdGlvbnMsIHVzZUZpbmFsUG9zaXRpb24pO1xuICAgIH1cbiAgICByZXR1cm4gW107XG4gIH1cbiAgZ2V0RGF0YXNldE1ldGEoZGF0YXNldEluZGV4KSB7XG4gICAgY29uc3QgZGF0YXNldCA9IHRoaXMuZGF0YS5kYXRhc2V0c1tkYXRhc2V0SW5kZXhdO1xuICAgIGNvbnN0IG1ldGFzZXRzID0gdGhpcy5fbWV0YXNldHM7XG4gICAgbGV0IG1ldGEgPSBtZXRhc2V0cy5maWx0ZXIoeCA9PiB4ICYmIHguX2RhdGFzZXQgPT09IGRhdGFzZXQpLnBvcCgpO1xuICAgIGlmICghbWV0YSkge1xuICAgICAgbWV0YSA9IHtcbiAgICAgICAgdHlwZTogbnVsbCxcbiAgICAgICAgZGF0YTogW10sXG4gICAgICAgIGRhdGFzZXQ6IG51bGwsXG4gICAgICAgIGNvbnRyb2xsZXI6IG51bGwsXG4gICAgICAgIGhpZGRlbjogbnVsbCxcbiAgICAgICAgeEF4aXNJRDogbnVsbCxcbiAgICAgICAgeUF4aXNJRDogbnVsbCxcbiAgICAgICAgb3JkZXI6IGRhdGFzZXQgJiYgZGF0YXNldC5vcmRlciB8fCAwLFxuICAgICAgICBpbmRleDogZGF0YXNldEluZGV4LFxuICAgICAgICBfZGF0YXNldDogZGF0YXNldCxcbiAgICAgICAgX3BhcnNlZDogW10sXG4gICAgICAgIF9zb3J0ZWQ6IGZhbHNlXG4gICAgICB9O1xuICAgICAgbWV0YXNldHMucHVzaChtZXRhKTtcbiAgICB9XG4gICAgcmV0dXJuIG1ldGE7XG4gIH1cbiAgZ2V0Q29udGV4dCgpIHtcbiAgICByZXR1cm4gdGhpcy4kY29udGV4dCB8fCAodGhpcy4kY29udGV4dCA9IGNyZWF0ZUNvbnRleHQobnVsbCwge2NoYXJ0OiB0aGlzLCB0eXBlOiAnY2hhcnQnfSkpO1xuICB9XG4gIGdldFZpc2libGVEYXRhc2V0Q291bnQoKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0U29ydGVkVmlzaWJsZURhdGFzZXRNZXRhcygpLmxlbmd0aDtcbiAgfVxuICBpc0RhdGFzZXRWaXNpYmxlKGRhdGFzZXRJbmRleCkge1xuICAgIGNvbnN0IGRhdGFzZXQgPSB0aGlzLmRhdGEuZGF0YXNldHNbZGF0YXNldEluZGV4XTtcbiAgICBpZiAoIWRhdGFzZXQpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgY29uc3QgbWV0YSA9IHRoaXMuZ2V0RGF0YXNldE1ldGEoZGF0YXNldEluZGV4KTtcbiAgICByZXR1cm4gdHlwZW9mIG1ldGEuaGlkZGVuID09PSAnYm9vbGVhbicgPyAhbWV0YS5oaWRkZW4gOiAhZGF0YXNldC5oaWRkZW47XG4gIH1cbiAgc2V0RGF0YXNldFZpc2liaWxpdHkoZGF0YXNldEluZGV4LCB2aXNpYmxlKSB7XG4gICAgY29uc3QgbWV0YSA9IHRoaXMuZ2V0RGF0YXNldE1ldGEoZGF0YXNldEluZGV4KTtcbiAgICBtZXRhLmhpZGRlbiA9ICF2aXNpYmxlO1xuICB9XG4gIHRvZ2dsZURhdGFWaXNpYmlsaXR5KGluZGV4KSB7XG4gICAgdGhpcy5faGlkZGVuSW5kaWNlc1tpbmRleF0gPSAhdGhpcy5faGlkZGVuSW5kaWNlc1tpbmRleF07XG4gIH1cbiAgZ2V0RGF0YVZpc2liaWxpdHkoaW5kZXgpIHtcbiAgICByZXR1cm4gIXRoaXMuX2hpZGRlbkluZGljZXNbaW5kZXhdO1xuICB9XG4gIF91cGRhdGVWaXNpYmlsaXR5KGRhdGFzZXRJbmRleCwgZGF0YUluZGV4LCB2aXNpYmxlKSB7XG4gICAgY29uc3QgbW9kZSA9IHZpc2libGUgPyAnc2hvdycgOiAnaGlkZSc7XG4gICAgY29uc3QgbWV0YSA9IHRoaXMuZ2V0RGF0YXNldE1ldGEoZGF0YXNldEluZGV4KTtcbiAgICBjb25zdCBhbmltcyA9IG1ldGEuY29udHJvbGxlci5fcmVzb2x2ZUFuaW1hdGlvbnModW5kZWZpbmVkLCBtb2RlKTtcbiAgICBpZiAoZGVmaW5lZChkYXRhSW5kZXgpKSB7XG4gICAgICBtZXRhLmRhdGFbZGF0YUluZGV4XS5oaWRkZW4gPSAhdmlzaWJsZTtcbiAgICAgIHRoaXMudXBkYXRlKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuc2V0RGF0YXNldFZpc2liaWxpdHkoZGF0YXNldEluZGV4LCB2aXNpYmxlKTtcbiAgICAgIGFuaW1zLnVwZGF0ZShtZXRhLCB7dmlzaWJsZX0pO1xuICAgICAgdGhpcy51cGRhdGUoKGN0eCkgPT4gY3R4LmRhdGFzZXRJbmRleCA9PT0gZGF0YXNldEluZGV4ID8gbW9kZSA6IHVuZGVmaW5lZCk7XG4gICAgfVxuICB9XG4gIGhpZGUoZGF0YXNldEluZGV4LCBkYXRhSW5kZXgpIHtcbiAgICB0aGlzLl91cGRhdGVWaXNpYmlsaXR5KGRhdGFzZXRJbmRleCwgZGF0YUluZGV4LCBmYWxzZSk7XG4gIH1cbiAgc2hvdyhkYXRhc2V0SW5kZXgsIGRhdGFJbmRleCkge1xuICAgIHRoaXMuX3VwZGF0ZVZpc2liaWxpdHkoZGF0YXNldEluZGV4LCBkYXRhSW5kZXgsIHRydWUpO1xuICB9XG4gIF9kZXN0cm95RGF0YXNldE1ldGEoZGF0YXNldEluZGV4KSB7XG4gICAgY29uc3QgbWV0YSA9IHRoaXMuX21ldGFzZXRzW2RhdGFzZXRJbmRleF07XG4gICAgaWYgKG1ldGEgJiYgbWV0YS5jb250cm9sbGVyKSB7XG4gICAgICBtZXRhLmNvbnRyb2xsZXIuX2Rlc3Ryb3koKTtcbiAgICB9XG4gICAgZGVsZXRlIHRoaXMuX21ldGFzZXRzW2RhdGFzZXRJbmRleF07XG4gIH1cbiAgX3N0b3AoKSB7XG4gICAgbGV0IGksIGlsZW47XG4gICAgdGhpcy5zdG9wKCk7XG4gICAgYW5pbWF0b3IucmVtb3ZlKHRoaXMpO1xuICAgIGZvciAoaSA9IDAsIGlsZW4gPSB0aGlzLmRhdGEuZGF0YXNldHMubGVuZ3RoOyBpIDwgaWxlbjsgKytpKSB7XG4gICAgICB0aGlzLl9kZXN0cm95RGF0YXNldE1ldGEoaSk7XG4gICAgfVxuICB9XG4gIGRlc3Ryb3koKSB7XG4gICAgdGhpcy5ub3RpZnlQbHVnaW5zKCdiZWZvcmVEZXN0cm95Jyk7XG4gICAgY29uc3Qge2NhbnZhcywgY3R4fSA9IHRoaXM7XG4gICAgdGhpcy5fc3RvcCgpO1xuICAgIHRoaXMuY29uZmlnLmNsZWFyQ2FjaGUoKTtcbiAgICBpZiAoY2FudmFzKSB7XG4gICAgICB0aGlzLnVuYmluZEV2ZW50cygpO1xuICAgICAgY2xlYXJDYW52YXMoY2FudmFzLCBjdHgpO1xuICAgICAgdGhpcy5wbGF0Zm9ybS5yZWxlYXNlQ29udGV4dChjdHgpO1xuICAgICAgdGhpcy5jYW52YXMgPSBudWxsO1xuICAgICAgdGhpcy5jdHggPSBudWxsO1xuICAgIH1cbiAgICB0aGlzLm5vdGlmeVBsdWdpbnMoJ2Rlc3Ryb3knKTtcbiAgICBkZWxldGUgaW5zdGFuY2VzW3RoaXMuaWRdO1xuICAgIHRoaXMubm90aWZ5UGx1Z2lucygnYWZ0ZXJEZXN0cm95Jyk7XG4gIH1cbiAgdG9CYXNlNjRJbWFnZSguLi5hcmdzKSB7XG4gICAgcmV0dXJuIHRoaXMuY2FudmFzLnRvRGF0YVVSTCguLi5hcmdzKTtcbiAgfVxuICBiaW5kRXZlbnRzKCkge1xuICAgIHRoaXMuYmluZFVzZXJFdmVudHMoKTtcbiAgICBpZiAodGhpcy5vcHRpb25zLnJlc3BvbnNpdmUpIHtcbiAgICAgIHRoaXMuYmluZFJlc3BvbnNpdmVFdmVudHMoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5hdHRhY2hlZCA9IHRydWU7XG4gICAgfVxuICB9XG4gIGJpbmRVc2VyRXZlbnRzKCkge1xuICAgIGNvbnN0IGxpc3RlbmVycyA9IHRoaXMuX2xpc3RlbmVycztcbiAgICBjb25zdCBwbGF0Zm9ybSA9IHRoaXMucGxhdGZvcm07XG4gICAgY29uc3QgX2FkZCA9ICh0eXBlLCBsaXN0ZW5lcikgPT4ge1xuICAgICAgcGxhdGZvcm0uYWRkRXZlbnRMaXN0ZW5lcih0aGlzLCB0eXBlLCBsaXN0ZW5lcik7XG4gICAgICBsaXN0ZW5lcnNbdHlwZV0gPSBsaXN0ZW5lcjtcbiAgICB9O1xuICAgIGNvbnN0IGxpc3RlbmVyID0gKGUsIHgsIHkpID0+IHtcbiAgICAgIGUub2Zmc2V0WCA9IHg7XG4gICAgICBlLm9mZnNldFkgPSB5O1xuICAgICAgdGhpcy5fZXZlbnRIYW5kbGVyKGUpO1xuICAgIH07XG4gICAgZWFjaCh0aGlzLm9wdGlvbnMuZXZlbnRzLCAodHlwZSkgPT4gX2FkZCh0eXBlLCBsaXN0ZW5lcikpO1xuICB9XG4gIGJpbmRSZXNwb25zaXZlRXZlbnRzKCkge1xuICAgIGlmICghdGhpcy5fcmVzcG9uc2l2ZUxpc3RlbmVycykge1xuICAgICAgdGhpcy5fcmVzcG9uc2l2ZUxpc3RlbmVycyA9IHt9O1xuICAgIH1cbiAgICBjb25zdCBsaXN0ZW5lcnMgPSB0aGlzLl9yZXNwb25zaXZlTGlzdGVuZXJzO1xuICAgIGNvbnN0IHBsYXRmb3JtID0gdGhpcy5wbGF0Zm9ybTtcbiAgICBjb25zdCBfYWRkID0gKHR5cGUsIGxpc3RlbmVyKSA9PiB7XG4gICAgICBwbGF0Zm9ybS5hZGRFdmVudExpc3RlbmVyKHRoaXMsIHR5cGUsIGxpc3RlbmVyKTtcbiAgICAgIGxpc3RlbmVyc1t0eXBlXSA9IGxpc3RlbmVyO1xuICAgIH07XG4gICAgY29uc3QgX3JlbW92ZSA9ICh0eXBlLCBsaXN0ZW5lcikgPT4ge1xuICAgICAgaWYgKGxpc3RlbmVyc1t0eXBlXSkge1xuICAgICAgICBwbGF0Zm9ybS5yZW1vdmVFdmVudExpc3RlbmVyKHRoaXMsIHR5cGUsIGxpc3RlbmVyKTtcbiAgICAgICAgZGVsZXRlIGxpc3RlbmVyc1t0eXBlXTtcbiAgICAgIH1cbiAgICB9O1xuICAgIGNvbnN0IGxpc3RlbmVyID0gKHdpZHRoLCBoZWlnaHQpID0+IHtcbiAgICAgIGlmICh0aGlzLmNhbnZhcykge1xuICAgICAgICB0aGlzLnJlc2l6ZSh3aWR0aCwgaGVpZ2h0KTtcbiAgICAgIH1cbiAgICB9O1xuICAgIGxldCBkZXRhY2hlZDtcbiAgICBjb25zdCBhdHRhY2hlZCA9ICgpID0+IHtcbiAgICAgIF9yZW1vdmUoJ2F0dGFjaCcsIGF0dGFjaGVkKTtcbiAgICAgIHRoaXMuYXR0YWNoZWQgPSB0cnVlO1xuICAgICAgdGhpcy5yZXNpemUoKTtcbiAgICAgIF9hZGQoJ3Jlc2l6ZScsIGxpc3RlbmVyKTtcbiAgICAgIF9hZGQoJ2RldGFjaCcsIGRldGFjaGVkKTtcbiAgICB9O1xuICAgIGRldGFjaGVkID0gKCkgPT4ge1xuICAgICAgdGhpcy5hdHRhY2hlZCA9IGZhbHNlO1xuICAgICAgX3JlbW92ZSgncmVzaXplJywgbGlzdGVuZXIpO1xuICAgICAgdGhpcy5fc3RvcCgpO1xuICAgICAgdGhpcy5fcmVzaXplKDAsIDApO1xuICAgICAgX2FkZCgnYXR0YWNoJywgYXR0YWNoZWQpO1xuICAgIH07XG4gICAgaWYgKHBsYXRmb3JtLmlzQXR0YWNoZWQodGhpcy5jYW52YXMpKSB7XG4gICAgICBhdHRhY2hlZCgpO1xuICAgIH0gZWxzZSB7XG4gICAgICBkZXRhY2hlZCgpO1xuICAgIH1cbiAgfVxuICB1bmJpbmRFdmVudHMoKSB7XG4gICAgZWFjaCh0aGlzLl9saXN0ZW5lcnMsIChsaXN0ZW5lciwgdHlwZSkgPT4ge1xuICAgICAgdGhpcy5wbGF0Zm9ybS5yZW1vdmVFdmVudExpc3RlbmVyKHRoaXMsIHR5cGUsIGxpc3RlbmVyKTtcbiAgICB9KTtcbiAgICB0aGlzLl9saXN0ZW5lcnMgPSB7fTtcbiAgICBlYWNoKHRoaXMuX3Jlc3BvbnNpdmVMaXN0ZW5lcnMsIChsaXN0ZW5lciwgdHlwZSkgPT4ge1xuICAgICAgdGhpcy5wbGF0Zm9ybS5yZW1vdmVFdmVudExpc3RlbmVyKHRoaXMsIHR5cGUsIGxpc3RlbmVyKTtcbiAgICB9KTtcbiAgICB0aGlzLl9yZXNwb25zaXZlTGlzdGVuZXJzID0gdW5kZWZpbmVkO1xuICB9XG4gIHVwZGF0ZUhvdmVyU3R5bGUoaXRlbXMsIG1vZGUsIGVuYWJsZWQpIHtcbiAgICBjb25zdCBwcmVmaXggPSBlbmFibGVkID8gJ3NldCcgOiAncmVtb3ZlJztcbiAgICBsZXQgbWV0YSwgaXRlbSwgaSwgaWxlbjtcbiAgICBpZiAobW9kZSA9PT0gJ2RhdGFzZXQnKSB7XG4gICAgICBtZXRhID0gdGhpcy5nZXREYXRhc2V0TWV0YShpdGVtc1swXS5kYXRhc2V0SW5kZXgpO1xuICAgICAgbWV0YS5jb250cm9sbGVyWydfJyArIHByZWZpeCArICdEYXRhc2V0SG92ZXJTdHlsZSddKCk7XG4gICAgfVxuICAgIGZvciAoaSA9IDAsIGlsZW4gPSBpdGVtcy5sZW5ndGg7IGkgPCBpbGVuOyArK2kpIHtcbiAgICAgIGl0ZW0gPSBpdGVtc1tpXTtcbiAgICAgIGNvbnN0IGNvbnRyb2xsZXIgPSBpdGVtICYmIHRoaXMuZ2V0RGF0YXNldE1ldGEoaXRlbS5kYXRhc2V0SW5kZXgpLmNvbnRyb2xsZXI7XG4gICAgICBpZiAoY29udHJvbGxlcikge1xuICAgICAgICBjb250cm9sbGVyW3ByZWZpeCArICdIb3ZlclN0eWxlJ10oaXRlbS5lbGVtZW50LCBpdGVtLmRhdGFzZXRJbmRleCwgaXRlbS5pbmRleCk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGdldEFjdGl2ZUVsZW1lbnRzKCkge1xuICAgIHJldHVybiB0aGlzLl9hY3RpdmUgfHwgW107XG4gIH1cbiAgc2V0QWN0aXZlRWxlbWVudHMoYWN0aXZlRWxlbWVudHMpIHtcbiAgICBjb25zdCBsYXN0QWN0aXZlID0gdGhpcy5fYWN0aXZlIHx8IFtdO1xuICAgIGNvbnN0IGFjdGl2ZSA9IGFjdGl2ZUVsZW1lbnRzLm1hcCgoe2RhdGFzZXRJbmRleCwgaW5kZXh9KSA9PiB7XG4gICAgICBjb25zdCBtZXRhID0gdGhpcy5nZXREYXRhc2V0TWV0YShkYXRhc2V0SW5kZXgpO1xuICAgICAgaWYgKCFtZXRhKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignTm8gZGF0YXNldCBmb3VuZCBhdCBpbmRleCAnICsgZGF0YXNldEluZGV4KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB7XG4gICAgICAgIGRhdGFzZXRJbmRleCxcbiAgICAgICAgZWxlbWVudDogbWV0YS5kYXRhW2luZGV4XSxcbiAgICAgICAgaW5kZXgsXG4gICAgICB9O1xuICAgIH0pO1xuICAgIGNvbnN0IGNoYW5nZWQgPSAhX2VsZW1lbnRzRXF1YWwoYWN0aXZlLCBsYXN0QWN0aXZlKTtcbiAgICBpZiAoY2hhbmdlZCkge1xuICAgICAgdGhpcy5fYWN0aXZlID0gYWN0aXZlO1xuICAgICAgdGhpcy5fbGFzdEV2ZW50ID0gbnVsbDtcbiAgICAgIHRoaXMuX3VwZGF0ZUhvdmVyU3R5bGVzKGFjdGl2ZSwgbGFzdEFjdGl2ZSk7XG4gICAgfVxuICB9XG4gIG5vdGlmeVBsdWdpbnMoaG9vaywgYXJncywgZmlsdGVyKSB7XG4gICAgcmV0dXJuIHRoaXMuX3BsdWdpbnMubm90aWZ5KHRoaXMsIGhvb2ssIGFyZ3MsIGZpbHRlcik7XG4gIH1cbiAgX3VwZGF0ZUhvdmVyU3R5bGVzKGFjdGl2ZSwgbGFzdEFjdGl2ZSwgcmVwbGF5KSB7XG4gICAgY29uc3QgaG92ZXJPcHRpb25zID0gdGhpcy5vcHRpb25zLmhvdmVyO1xuICAgIGNvbnN0IGRpZmYgPSAoYSwgYikgPT4gYS5maWx0ZXIoeCA9PiAhYi5zb21lKHkgPT4geC5kYXRhc2V0SW5kZXggPT09IHkuZGF0YXNldEluZGV4ICYmIHguaW5kZXggPT09IHkuaW5kZXgpKTtcbiAgICBjb25zdCBkZWFjdGl2YXRlZCA9IGRpZmYobGFzdEFjdGl2ZSwgYWN0aXZlKTtcbiAgICBjb25zdCBhY3RpdmF0ZWQgPSByZXBsYXkgPyBhY3RpdmUgOiBkaWZmKGFjdGl2ZSwgbGFzdEFjdGl2ZSk7XG4gICAgaWYgKGRlYWN0aXZhdGVkLmxlbmd0aCkge1xuICAgICAgdGhpcy51cGRhdGVIb3ZlclN0eWxlKGRlYWN0aXZhdGVkLCBob3Zlck9wdGlvbnMubW9kZSwgZmFsc2UpO1xuICAgIH1cbiAgICBpZiAoYWN0aXZhdGVkLmxlbmd0aCAmJiBob3Zlck9wdGlvbnMubW9kZSkge1xuICAgICAgdGhpcy51cGRhdGVIb3ZlclN0eWxlKGFjdGl2YXRlZCwgaG92ZXJPcHRpb25zLm1vZGUsIHRydWUpO1xuICAgIH1cbiAgfVxuICBfZXZlbnRIYW5kbGVyKGUsIHJlcGxheSkge1xuICAgIGNvbnN0IGFyZ3MgPSB7XG4gICAgICBldmVudDogZSxcbiAgICAgIHJlcGxheSxcbiAgICAgIGNhbmNlbGFibGU6IHRydWUsXG4gICAgICBpbkNoYXJ0QXJlYTogX2lzUG9pbnRJbkFyZWEoZSwgdGhpcy5jaGFydEFyZWEsIHRoaXMuX21pblBhZGRpbmcpXG4gICAgfTtcbiAgICBjb25zdCBldmVudEZpbHRlciA9IChwbHVnaW4pID0+IChwbHVnaW4ub3B0aW9ucy5ldmVudHMgfHwgdGhpcy5vcHRpb25zLmV2ZW50cykuaW5jbHVkZXMoZS5uYXRpdmUudHlwZSk7XG4gICAgaWYgKHRoaXMubm90aWZ5UGx1Z2lucygnYmVmb3JlRXZlbnQnLCBhcmdzLCBldmVudEZpbHRlcikgPT09IGZhbHNlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IGNoYW5nZWQgPSB0aGlzLl9oYW5kbGVFdmVudChlLCByZXBsYXksIGFyZ3MuaW5DaGFydEFyZWEpO1xuICAgIGFyZ3MuY2FuY2VsYWJsZSA9IGZhbHNlO1xuICAgIHRoaXMubm90aWZ5UGx1Z2lucygnYWZ0ZXJFdmVudCcsIGFyZ3MsIGV2ZW50RmlsdGVyKTtcbiAgICBpZiAoY2hhbmdlZCB8fCBhcmdzLmNoYW5nZWQpIHtcbiAgICAgIHRoaXMucmVuZGVyKCk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIF9oYW5kbGVFdmVudChlLCByZXBsYXksIGluQ2hhcnRBcmVhKSB7XG4gICAgY29uc3Qge19hY3RpdmU6IGxhc3RBY3RpdmUgPSBbXSwgb3B0aW9uc30gPSB0aGlzO1xuICAgIGNvbnN0IHVzZUZpbmFsUG9zaXRpb24gPSByZXBsYXk7XG4gICAgY29uc3QgYWN0aXZlID0gdGhpcy5fZ2V0QWN0aXZlRWxlbWVudHMoZSwgbGFzdEFjdGl2ZSwgaW5DaGFydEFyZWEsIHVzZUZpbmFsUG9zaXRpb24pO1xuICAgIGNvbnN0IGlzQ2xpY2sgPSBfaXNDbGlja0V2ZW50KGUpO1xuICAgIGNvbnN0IGxhc3RFdmVudCA9IGRldGVybWluZUxhc3RFdmVudChlLCB0aGlzLl9sYXN0RXZlbnQsIGluQ2hhcnRBcmVhLCBpc0NsaWNrKTtcbiAgICBpZiAoaW5DaGFydEFyZWEpIHtcbiAgICAgIHRoaXMuX2xhc3RFdmVudCA9IG51bGw7XG4gICAgICBjYWxsYmFjayhvcHRpb25zLm9uSG92ZXIsIFtlLCBhY3RpdmUsIHRoaXNdLCB0aGlzKTtcbiAgICAgIGlmIChpc0NsaWNrKSB7XG4gICAgICAgIGNhbGxiYWNrKG9wdGlvbnMub25DbGljaywgW2UsIGFjdGl2ZSwgdGhpc10sIHRoaXMpO1xuICAgICAgfVxuICAgIH1cbiAgICBjb25zdCBjaGFuZ2VkID0gIV9lbGVtZW50c0VxdWFsKGFjdGl2ZSwgbGFzdEFjdGl2ZSk7XG4gICAgaWYgKGNoYW5nZWQgfHwgcmVwbGF5KSB7XG4gICAgICB0aGlzLl9hY3RpdmUgPSBhY3RpdmU7XG4gICAgICB0aGlzLl91cGRhdGVIb3ZlclN0eWxlcyhhY3RpdmUsIGxhc3RBY3RpdmUsIHJlcGxheSk7XG4gICAgfVxuICAgIHRoaXMuX2xhc3RFdmVudCA9IGxhc3RFdmVudDtcbiAgICByZXR1cm4gY2hhbmdlZDtcbiAgfVxuICBfZ2V0QWN0aXZlRWxlbWVudHMoZSwgbGFzdEFjdGl2ZSwgaW5DaGFydEFyZWEsIHVzZUZpbmFsUG9zaXRpb24pIHtcbiAgICBpZiAoZS50eXBlID09PSAnbW91c2VvdXQnKSB7XG4gICAgICByZXR1cm4gW107XG4gICAgfVxuICAgIGlmICghaW5DaGFydEFyZWEpIHtcbiAgICAgIHJldHVybiBsYXN0QWN0aXZlO1xuICAgIH1cbiAgICBjb25zdCBob3Zlck9wdGlvbnMgPSB0aGlzLm9wdGlvbnMuaG92ZXI7XG4gICAgcmV0dXJuIHRoaXMuZ2V0RWxlbWVudHNBdEV2ZW50Rm9yTW9kZShlLCBob3Zlck9wdGlvbnMubW9kZSwgaG92ZXJPcHRpb25zLCB1c2VGaW5hbFBvc2l0aW9uKTtcbiAgfVxufVxuY29uc3QgaW52YWxpZGF0ZVBsdWdpbnMgPSAoKSA9PiBlYWNoKENoYXJ0Lmluc3RhbmNlcywgKGNoYXJ0KSA9PiBjaGFydC5fcGx1Z2lucy5pbnZhbGlkYXRlKCkpO1xuY29uc3QgZW51bWVyYWJsZSA9IHRydWU7XG5PYmplY3QuZGVmaW5lUHJvcGVydGllcyhDaGFydCwge1xuICBkZWZhdWx0czoge1xuICAgIGVudW1lcmFibGUsXG4gICAgdmFsdWU6IGRlZmF1bHRzXG4gIH0sXG4gIGluc3RhbmNlczoge1xuICAgIGVudW1lcmFibGUsXG4gICAgdmFsdWU6IGluc3RhbmNlc1xuICB9LFxuICBvdmVycmlkZXM6IHtcbiAgICBlbnVtZXJhYmxlLFxuICAgIHZhbHVlOiBvdmVycmlkZXNcbiAgfSxcbiAgcmVnaXN0cnk6IHtcbiAgICBlbnVtZXJhYmxlLFxuICAgIHZhbHVlOiByZWdpc3RyeVxuICB9LFxuICB2ZXJzaW9uOiB7XG4gICAgZW51bWVyYWJsZSxcbiAgICB2YWx1ZTogdmVyc2lvblxuICB9LFxuICBnZXRDaGFydDoge1xuICAgIGVudW1lcmFibGUsXG4gICAgdmFsdWU6IGdldENoYXJ0XG4gIH0sXG4gIHJlZ2lzdGVyOiB7XG4gICAgZW51bWVyYWJsZSxcbiAgICB2YWx1ZTogKC4uLml0ZW1zKSA9PiB7XG4gICAgICByZWdpc3RyeS5hZGQoLi4uaXRlbXMpO1xuICAgICAgaW52YWxpZGF0ZVBsdWdpbnMoKTtcbiAgICB9XG4gIH0sXG4gIHVucmVnaXN0ZXI6IHtcbiAgICBlbnVtZXJhYmxlLFxuICAgIHZhbHVlOiAoLi4uaXRlbXMpID0+IHtcbiAgICAgIHJlZ2lzdHJ5LnJlbW92ZSguLi5pdGVtcyk7XG4gICAgICBpbnZhbGlkYXRlUGx1Z2lucygpO1xuICAgIH1cbiAgfVxufSk7XG5cbmZ1bmN0aW9uIGNsaXBBcmMoY3R4LCBlbGVtZW50LCBlbmRBbmdsZSkge1xuICBjb25zdCB7c3RhcnRBbmdsZSwgcGl4ZWxNYXJnaW4sIHgsIHksIG91dGVyUmFkaXVzLCBpbm5lclJhZGl1c30gPSBlbGVtZW50O1xuICBsZXQgYW5nbGVNYXJnaW4gPSBwaXhlbE1hcmdpbiAvIG91dGVyUmFkaXVzO1xuICBjdHguYmVnaW5QYXRoKCk7XG4gIGN0eC5hcmMoeCwgeSwgb3V0ZXJSYWRpdXMsIHN0YXJ0QW5nbGUgLSBhbmdsZU1hcmdpbiwgZW5kQW5nbGUgKyBhbmdsZU1hcmdpbik7XG4gIGlmIChpbm5lclJhZGl1cyA+IHBpeGVsTWFyZ2luKSB7XG4gICAgYW5nbGVNYXJnaW4gPSBwaXhlbE1hcmdpbiAvIGlubmVyUmFkaXVzO1xuICAgIGN0eC5hcmMoeCwgeSwgaW5uZXJSYWRpdXMsIGVuZEFuZ2xlICsgYW5nbGVNYXJnaW4sIHN0YXJ0QW5nbGUgLSBhbmdsZU1hcmdpbiwgdHJ1ZSk7XG4gIH0gZWxzZSB7XG4gICAgY3R4LmFyYyh4LCB5LCBwaXhlbE1hcmdpbiwgZW5kQW5nbGUgKyBIQUxGX1BJLCBzdGFydEFuZ2xlIC0gSEFMRl9QSSk7XG4gIH1cbiAgY3R4LmNsb3NlUGF0aCgpO1xuICBjdHguY2xpcCgpO1xufVxuZnVuY3Rpb24gdG9SYWRpdXNDb3JuZXJzKHZhbHVlKSB7XG4gIHJldHVybiBfcmVhZFZhbHVlVG9Qcm9wcyh2YWx1ZSwgWydvdXRlclN0YXJ0JywgJ291dGVyRW5kJywgJ2lubmVyU3RhcnQnLCAnaW5uZXJFbmQnXSk7XG59XG5mdW5jdGlvbiBwYXJzZUJvcmRlclJhZGl1cyQxKGFyYywgaW5uZXJSYWRpdXMsIG91dGVyUmFkaXVzLCBhbmdsZURlbHRhKSB7XG4gIGNvbnN0IG8gPSB0b1JhZGl1c0Nvcm5lcnMoYXJjLm9wdGlvbnMuYm9yZGVyUmFkaXVzKTtcbiAgY29uc3QgaGFsZlRoaWNrbmVzcyA9IChvdXRlclJhZGl1cyAtIGlubmVyUmFkaXVzKSAvIDI7XG4gIGNvbnN0IGlubmVyTGltaXQgPSBNYXRoLm1pbihoYWxmVGhpY2tuZXNzLCBhbmdsZURlbHRhICogaW5uZXJSYWRpdXMgLyAyKTtcbiAgY29uc3QgY29tcHV0ZU91dGVyTGltaXQgPSAodmFsKSA9PiB7XG4gICAgY29uc3Qgb3V0ZXJBcmNMaW1pdCA9IChvdXRlclJhZGl1cyAtIE1hdGgubWluKGhhbGZUaGlja25lc3MsIHZhbCkpICogYW5nbGVEZWx0YSAvIDI7XG4gICAgcmV0dXJuIF9saW1pdFZhbHVlKHZhbCwgMCwgTWF0aC5taW4oaGFsZlRoaWNrbmVzcywgb3V0ZXJBcmNMaW1pdCkpO1xuICB9O1xuICByZXR1cm4ge1xuICAgIG91dGVyU3RhcnQ6IGNvbXB1dGVPdXRlckxpbWl0KG8ub3V0ZXJTdGFydCksXG4gICAgb3V0ZXJFbmQ6IGNvbXB1dGVPdXRlckxpbWl0KG8ub3V0ZXJFbmQpLFxuICAgIGlubmVyU3RhcnQ6IF9saW1pdFZhbHVlKG8uaW5uZXJTdGFydCwgMCwgaW5uZXJMaW1pdCksXG4gICAgaW5uZXJFbmQ6IF9saW1pdFZhbHVlKG8uaW5uZXJFbmQsIDAsIGlubmVyTGltaXQpLFxuICB9O1xufVxuZnVuY3Rpb24gclRoZXRhVG9YWShyLCB0aGV0YSwgeCwgeSkge1xuICByZXR1cm4ge1xuICAgIHg6IHggKyByICogTWF0aC5jb3ModGhldGEpLFxuICAgIHk6IHkgKyByICogTWF0aC5zaW4odGhldGEpLFxuICB9O1xufVxuZnVuY3Rpb24gcGF0aEFyYyhjdHgsIGVsZW1lbnQsIG9mZnNldCwgc3BhY2luZywgZW5kKSB7XG4gIGNvbnN0IHt4LCB5LCBzdGFydEFuZ2xlOiBzdGFydCwgcGl4ZWxNYXJnaW4sIGlubmVyUmFkaXVzOiBpbm5lclJ9ID0gZWxlbWVudDtcbiAgY29uc3Qgb3V0ZXJSYWRpdXMgPSBNYXRoLm1heChlbGVtZW50Lm91dGVyUmFkaXVzICsgc3BhY2luZyArIG9mZnNldCAtIHBpeGVsTWFyZ2luLCAwKTtcbiAgY29uc3QgaW5uZXJSYWRpdXMgPSBpbm5lclIgPiAwID8gaW5uZXJSICsgc3BhY2luZyArIG9mZnNldCArIHBpeGVsTWFyZ2luIDogMDtcbiAgbGV0IHNwYWNpbmdPZmZzZXQgPSAwO1xuICBjb25zdCBhbHBoYSA9IGVuZCAtIHN0YXJ0O1xuICBpZiAoc3BhY2luZykge1xuICAgIGNvbnN0IG5vU3BhY2luZ0lubmVyUmFkaXVzID0gaW5uZXJSID4gMCA/IGlubmVyUiAtIHNwYWNpbmcgOiAwO1xuICAgIGNvbnN0IG5vU3BhY2luZ091dGVyUmFkaXVzID0gb3V0ZXJSYWRpdXMgPiAwID8gb3V0ZXJSYWRpdXMgLSBzcGFjaW5nIDogMDtcbiAgICBjb25zdCBhdk5vZ1NwYWNpbmdSYWRpdXMgPSAobm9TcGFjaW5nSW5uZXJSYWRpdXMgKyBub1NwYWNpbmdPdXRlclJhZGl1cykgLyAyO1xuICAgIGNvbnN0IGFkanVzdGVkQW5nbGUgPSBhdk5vZ1NwYWNpbmdSYWRpdXMgIT09IDAgPyAoYWxwaGEgKiBhdk5vZ1NwYWNpbmdSYWRpdXMpIC8gKGF2Tm9nU3BhY2luZ1JhZGl1cyArIHNwYWNpbmcpIDogYWxwaGE7XG4gICAgc3BhY2luZ09mZnNldCA9IChhbHBoYSAtIGFkanVzdGVkQW5nbGUpIC8gMjtcbiAgfVxuICBjb25zdCBiZXRhID0gTWF0aC5tYXgoMC4wMDEsIGFscGhhICogb3V0ZXJSYWRpdXMgLSBvZmZzZXQgLyBQSSkgLyBvdXRlclJhZGl1cztcbiAgY29uc3QgYW5nbGVPZmZzZXQgPSAoYWxwaGEgLSBiZXRhKSAvIDI7XG4gIGNvbnN0IHN0YXJ0QW5nbGUgPSBzdGFydCArIGFuZ2xlT2Zmc2V0ICsgc3BhY2luZ09mZnNldDtcbiAgY29uc3QgZW5kQW5nbGUgPSBlbmQgLSBhbmdsZU9mZnNldCAtIHNwYWNpbmdPZmZzZXQ7XG4gIGNvbnN0IHtvdXRlclN0YXJ0LCBvdXRlckVuZCwgaW5uZXJTdGFydCwgaW5uZXJFbmR9ID0gcGFyc2VCb3JkZXJSYWRpdXMkMShlbGVtZW50LCBpbm5lclJhZGl1cywgb3V0ZXJSYWRpdXMsIGVuZEFuZ2xlIC0gc3RhcnRBbmdsZSk7XG4gIGNvbnN0IG91dGVyU3RhcnRBZGp1c3RlZFJhZGl1cyA9IG91dGVyUmFkaXVzIC0gb3V0ZXJTdGFydDtcbiAgY29uc3Qgb3V0ZXJFbmRBZGp1c3RlZFJhZGl1cyA9IG91dGVyUmFkaXVzIC0gb3V0ZXJFbmQ7XG4gIGNvbnN0IG91dGVyU3RhcnRBZGp1c3RlZEFuZ2xlID0gc3RhcnRBbmdsZSArIG91dGVyU3RhcnQgLyBvdXRlclN0YXJ0QWRqdXN0ZWRSYWRpdXM7XG4gIGNvbnN0IG91dGVyRW5kQWRqdXN0ZWRBbmdsZSA9IGVuZEFuZ2xlIC0gb3V0ZXJFbmQgLyBvdXRlckVuZEFkanVzdGVkUmFkaXVzO1xuICBjb25zdCBpbm5lclN0YXJ0QWRqdXN0ZWRSYWRpdXMgPSBpbm5lclJhZGl1cyArIGlubmVyU3RhcnQ7XG4gIGNvbnN0IGlubmVyRW5kQWRqdXN0ZWRSYWRpdXMgPSBpbm5lclJhZGl1cyArIGlubmVyRW5kO1xuICBjb25zdCBpbm5lclN0YXJ0QWRqdXN0ZWRBbmdsZSA9IHN0YXJ0QW5nbGUgKyBpbm5lclN0YXJ0IC8gaW5uZXJTdGFydEFkanVzdGVkUmFkaXVzO1xuICBjb25zdCBpbm5lckVuZEFkanVzdGVkQW5nbGUgPSBlbmRBbmdsZSAtIGlubmVyRW5kIC8gaW5uZXJFbmRBZGp1c3RlZFJhZGl1cztcbiAgY3R4LmJlZ2luUGF0aCgpO1xuICBjdHguYXJjKHgsIHksIG91dGVyUmFkaXVzLCBvdXRlclN0YXJ0QWRqdXN0ZWRBbmdsZSwgb3V0ZXJFbmRBZGp1c3RlZEFuZ2xlKTtcbiAgaWYgKG91dGVyRW5kID4gMCkge1xuICAgIGNvbnN0IHBDZW50ZXIgPSByVGhldGFUb1hZKG91dGVyRW5kQWRqdXN0ZWRSYWRpdXMsIG91dGVyRW5kQWRqdXN0ZWRBbmdsZSwgeCwgeSk7XG4gICAgY3R4LmFyYyhwQ2VudGVyLngsIHBDZW50ZXIueSwgb3V0ZXJFbmQsIG91dGVyRW5kQWRqdXN0ZWRBbmdsZSwgZW5kQW5nbGUgKyBIQUxGX1BJKTtcbiAgfVxuICBjb25zdCBwNCA9IHJUaGV0YVRvWFkoaW5uZXJFbmRBZGp1c3RlZFJhZGl1cywgZW5kQW5nbGUsIHgsIHkpO1xuICBjdHgubGluZVRvKHA0LngsIHA0LnkpO1xuICBpZiAoaW5uZXJFbmQgPiAwKSB7XG4gICAgY29uc3QgcENlbnRlciA9IHJUaGV0YVRvWFkoaW5uZXJFbmRBZGp1c3RlZFJhZGl1cywgaW5uZXJFbmRBZGp1c3RlZEFuZ2xlLCB4LCB5KTtcbiAgICBjdHguYXJjKHBDZW50ZXIueCwgcENlbnRlci55LCBpbm5lckVuZCwgZW5kQW5nbGUgKyBIQUxGX1BJLCBpbm5lckVuZEFkanVzdGVkQW5nbGUgKyBNYXRoLlBJKTtcbiAgfVxuICBjdHguYXJjKHgsIHksIGlubmVyUmFkaXVzLCBlbmRBbmdsZSAtIChpbm5lckVuZCAvIGlubmVyUmFkaXVzKSwgc3RhcnRBbmdsZSArIChpbm5lclN0YXJ0IC8gaW5uZXJSYWRpdXMpLCB0cnVlKTtcbiAgaWYgKGlubmVyU3RhcnQgPiAwKSB7XG4gICAgY29uc3QgcENlbnRlciA9IHJUaGV0YVRvWFkoaW5uZXJTdGFydEFkanVzdGVkUmFkaXVzLCBpbm5lclN0YXJ0QWRqdXN0ZWRBbmdsZSwgeCwgeSk7XG4gICAgY3R4LmFyYyhwQ2VudGVyLngsIHBDZW50ZXIueSwgaW5uZXJTdGFydCwgaW5uZXJTdGFydEFkanVzdGVkQW5nbGUgKyBNYXRoLlBJLCBzdGFydEFuZ2xlIC0gSEFMRl9QSSk7XG4gIH1cbiAgY29uc3QgcDggPSByVGhldGFUb1hZKG91dGVyU3RhcnRBZGp1c3RlZFJhZGl1cywgc3RhcnRBbmdsZSwgeCwgeSk7XG4gIGN0eC5saW5lVG8ocDgueCwgcDgueSk7XG4gIGlmIChvdXRlclN0YXJ0ID4gMCkge1xuICAgIGNvbnN0IHBDZW50ZXIgPSByVGhldGFUb1hZKG91dGVyU3RhcnRBZGp1c3RlZFJhZGl1cywgb3V0ZXJTdGFydEFkanVzdGVkQW5nbGUsIHgsIHkpO1xuICAgIGN0eC5hcmMocENlbnRlci54LCBwQ2VudGVyLnksIG91dGVyU3RhcnQsIHN0YXJ0QW5nbGUgLSBIQUxGX1BJLCBvdXRlclN0YXJ0QWRqdXN0ZWRBbmdsZSk7XG4gIH1cbiAgY3R4LmNsb3NlUGF0aCgpO1xufVxuZnVuY3Rpb24gZHJhd0FyYyhjdHgsIGVsZW1lbnQsIG9mZnNldCwgc3BhY2luZykge1xuICBjb25zdCB7ZnVsbENpcmNsZXMsIHN0YXJ0QW5nbGUsIGNpcmN1bWZlcmVuY2V9ID0gZWxlbWVudDtcbiAgbGV0IGVuZEFuZ2xlID0gZWxlbWVudC5lbmRBbmdsZTtcbiAgaWYgKGZ1bGxDaXJjbGVzKSB7XG4gICAgcGF0aEFyYyhjdHgsIGVsZW1lbnQsIG9mZnNldCwgc3BhY2luZywgc3RhcnRBbmdsZSArIFRBVSk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBmdWxsQ2lyY2xlczsgKytpKSB7XG4gICAgICBjdHguZmlsbCgpO1xuICAgIH1cbiAgICBpZiAoIWlzTmFOKGNpcmN1bWZlcmVuY2UpKSB7XG4gICAgICBlbmRBbmdsZSA9IHN0YXJ0QW5nbGUgKyBjaXJjdW1mZXJlbmNlICUgVEFVO1xuICAgICAgaWYgKGNpcmN1bWZlcmVuY2UgJSBUQVUgPT09IDApIHtcbiAgICAgICAgZW5kQW5nbGUgKz0gVEFVO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBwYXRoQXJjKGN0eCwgZWxlbWVudCwgb2Zmc2V0LCBzcGFjaW5nLCBlbmRBbmdsZSk7XG4gIGN0eC5maWxsKCk7XG4gIHJldHVybiBlbmRBbmdsZTtcbn1cbmZ1bmN0aW9uIGRyYXdGdWxsQ2lyY2xlQm9yZGVycyhjdHgsIGVsZW1lbnQsIGlubmVyKSB7XG4gIGNvbnN0IHt4LCB5LCBzdGFydEFuZ2xlLCBwaXhlbE1hcmdpbiwgZnVsbENpcmNsZXN9ID0gZWxlbWVudDtcbiAgY29uc3Qgb3V0ZXJSYWRpdXMgPSBNYXRoLm1heChlbGVtZW50Lm91dGVyUmFkaXVzIC0gcGl4ZWxNYXJnaW4sIDApO1xuICBjb25zdCBpbm5lclJhZGl1cyA9IGVsZW1lbnQuaW5uZXJSYWRpdXMgKyBwaXhlbE1hcmdpbjtcbiAgbGV0IGk7XG4gIGlmIChpbm5lcikge1xuICAgIGNsaXBBcmMoY3R4LCBlbGVtZW50LCBzdGFydEFuZ2xlICsgVEFVKTtcbiAgfVxuICBjdHguYmVnaW5QYXRoKCk7XG4gIGN0eC5hcmMoeCwgeSwgaW5uZXJSYWRpdXMsIHN0YXJ0QW5nbGUgKyBUQVUsIHN0YXJ0QW5nbGUsIHRydWUpO1xuICBmb3IgKGkgPSAwOyBpIDwgZnVsbENpcmNsZXM7ICsraSkge1xuICAgIGN0eC5zdHJva2UoKTtcbiAgfVxuICBjdHguYmVnaW5QYXRoKCk7XG4gIGN0eC5hcmMoeCwgeSwgb3V0ZXJSYWRpdXMsIHN0YXJ0QW5nbGUsIHN0YXJ0QW5nbGUgKyBUQVUpO1xuICBmb3IgKGkgPSAwOyBpIDwgZnVsbENpcmNsZXM7ICsraSkge1xuICAgIGN0eC5zdHJva2UoKTtcbiAgfVxufVxuZnVuY3Rpb24gZHJhd0JvcmRlcihjdHgsIGVsZW1lbnQsIG9mZnNldCwgc3BhY2luZywgZW5kQW5nbGUpIHtcbiAgY29uc3Qge29wdGlvbnN9ID0gZWxlbWVudDtcbiAgY29uc3Qge2JvcmRlcldpZHRoLCBib3JkZXJKb2luU3R5bGV9ID0gb3B0aW9ucztcbiAgY29uc3QgaW5uZXIgPSBvcHRpb25zLmJvcmRlckFsaWduID09PSAnaW5uZXInO1xuICBpZiAoIWJvcmRlcldpZHRoKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmIChpbm5lcikge1xuICAgIGN0eC5saW5lV2lkdGggPSBib3JkZXJXaWR0aCAqIDI7XG4gICAgY3R4LmxpbmVKb2luID0gYm9yZGVySm9pblN0eWxlIHx8ICdyb3VuZCc7XG4gIH0gZWxzZSB7XG4gICAgY3R4LmxpbmVXaWR0aCA9IGJvcmRlcldpZHRoO1xuICAgIGN0eC5saW5lSm9pbiA9IGJvcmRlckpvaW5TdHlsZSB8fCAnYmV2ZWwnO1xuICB9XG4gIGlmIChlbGVtZW50LmZ1bGxDaXJjbGVzKSB7XG4gICAgZHJhd0Z1bGxDaXJjbGVCb3JkZXJzKGN0eCwgZWxlbWVudCwgaW5uZXIpO1xuICB9XG4gIGlmIChpbm5lcikge1xuICAgIGNsaXBBcmMoY3R4LCBlbGVtZW50LCBlbmRBbmdsZSk7XG4gIH1cbiAgcGF0aEFyYyhjdHgsIGVsZW1lbnQsIG9mZnNldCwgc3BhY2luZywgZW5kQW5nbGUpO1xuICBjdHguc3Ryb2tlKCk7XG59XG5jbGFzcyBBcmNFbGVtZW50IGV4dGVuZHMgRWxlbWVudCB7XG4gIGNvbnN0cnVjdG9yKGNmZykge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5vcHRpb25zID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuY2lyY3VtZmVyZW5jZSA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLnN0YXJ0QW5nbGUgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5lbmRBbmdsZSA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLmlubmVyUmFkaXVzID0gdW5kZWZpbmVkO1xuICAgIHRoaXMub3V0ZXJSYWRpdXMgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5waXhlbE1hcmdpbiA9IDA7XG4gICAgdGhpcy5mdWxsQ2lyY2xlcyA9IDA7XG4gICAgaWYgKGNmZykge1xuICAgICAgT2JqZWN0LmFzc2lnbih0aGlzLCBjZmcpO1xuICAgIH1cbiAgfVxuICBpblJhbmdlKGNoYXJ0WCwgY2hhcnRZLCB1c2VGaW5hbFBvc2l0aW9uKSB7XG4gICAgY29uc3QgcG9pbnQgPSB0aGlzLmdldFByb3BzKFsneCcsICd5J10sIHVzZUZpbmFsUG9zaXRpb24pO1xuICAgIGNvbnN0IHthbmdsZSwgZGlzdGFuY2V9ID0gZ2V0QW5nbGVGcm9tUG9pbnQocG9pbnQsIHt4OiBjaGFydFgsIHk6IGNoYXJ0WX0pO1xuICAgIGNvbnN0IHtzdGFydEFuZ2xlLCBlbmRBbmdsZSwgaW5uZXJSYWRpdXMsIG91dGVyUmFkaXVzLCBjaXJjdW1mZXJlbmNlfSA9IHRoaXMuZ2V0UHJvcHMoW1xuICAgICAgJ3N0YXJ0QW5nbGUnLFxuICAgICAgJ2VuZEFuZ2xlJyxcbiAgICAgICdpbm5lclJhZGl1cycsXG4gICAgICAnb3V0ZXJSYWRpdXMnLFxuICAgICAgJ2NpcmN1bWZlcmVuY2UnXG4gICAgXSwgdXNlRmluYWxQb3NpdGlvbik7XG4gICAgY29uc3QgckFkanVzdCA9IHRoaXMub3B0aW9ucy5zcGFjaW5nIC8gMjtcbiAgICBjb25zdCBfY2lyY3VtZmVyZW5jZSA9IHZhbHVlT3JEZWZhdWx0KGNpcmN1bWZlcmVuY2UsIGVuZEFuZ2xlIC0gc3RhcnRBbmdsZSk7XG4gICAgY29uc3QgYmV0d2VlbkFuZ2xlcyA9IF9jaXJjdW1mZXJlbmNlID49IFRBVSB8fCBfYW5nbGVCZXR3ZWVuKGFuZ2xlLCBzdGFydEFuZ2xlLCBlbmRBbmdsZSk7XG4gICAgY29uc3Qgd2l0aGluUmFkaXVzID0gX2lzQmV0d2VlbihkaXN0YW5jZSwgaW5uZXJSYWRpdXMgKyByQWRqdXN0LCBvdXRlclJhZGl1cyArIHJBZGp1c3QpO1xuICAgIHJldHVybiAoYmV0d2VlbkFuZ2xlcyAmJiB3aXRoaW5SYWRpdXMpO1xuICB9XG4gIGdldENlbnRlclBvaW50KHVzZUZpbmFsUG9zaXRpb24pIHtcbiAgICBjb25zdCB7eCwgeSwgc3RhcnRBbmdsZSwgZW5kQW5nbGUsIGlubmVyUmFkaXVzLCBvdXRlclJhZGl1c30gPSB0aGlzLmdldFByb3BzKFtcbiAgICAgICd4JyxcbiAgICAgICd5JyxcbiAgICAgICdzdGFydEFuZ2xlJyxcbiAgICAgICdlbmRBbmdsZScsXG4gICAgICAnaW5uZXJSYWRpdXMnLFxuICAgICAgJ291dGVyUmFkaXVzJyxcbiAgICAgICdjaXJjdW1mZXJlbmNlJyxcbiAgICBdLCB1c2VGaW5hbFBvc2l0aW9uKTtcbiAgICBjb25zdCB7b2Zmc2V0LCBzcGFjaW5nfSA9IHRoaXMub3B0aW9ucztcbiAgICBjb25zdCBoYWxmQW5nbGUgPSAoc3RhcnRBbmdsZSArIGVuZEFuZ2xlKSAvIDI7XG4gICAgY29uc3QgaGFsZlJhZGl1cyA9IChpbm5lclJhZGl1cyArIG91dGVyUmFkaXVzICsgc3BhY2luZyArIG9mZnNldCkgLyAyO1xuICAgIHJldHVybiB7XG4gICAgICB4OiB4ICsgTWF0aC5jb3MoaGFsZkFuZ2xlKSAqIGhhbGZSYWRpdXMsXG4gICAgICB5OiB5ICsgTWF0aC5zaW4oaGFsZkFuZ2xlKSAqIGhhbGZSYWRpdXNcbiAgICB9O1xuICB9XG4gIHRvb2x0aXBQb3NpdGlvbih1c2VGaW5hbFBvc2l0aW9uKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0Q2VudGVyUG9pbnQodXNlRmluYWxQb3NpdGlvbik7XG4gIH1cbiAgZHJhdyhjdHgpIHtcbiAgICBjb25zdCB7b3B0aW9ucywgY2lyY3VtZmVyZW5jZX0gPSB0aGlzO1xuICAgIGNvbnN0IG9mZnNldCA9IChvcHRpb25zLm9mZnNldCB8fCAwKSAvIDI7XG4gICAgY29uc3Qgc3BhY2luZyA9IChvcHRpb25zLnNwYWNpbmcgfHwgMCkgLyAyO1xuICAgIHRoaXMucGl4ZWxNYXJnaW4gPSAob3B0aW9ucy5ib3JkZXJBbGlnbiA9PT0gJ2lubmVyJykgPyAwLjMzIDogMDtcbiAgICB0aGlzLmZ1bGxDaXJjbGVzID0gY2lyY3VtZmVyZW5jZSA+IFRBVSA/IE1hdGguZmxvb3IoY2lyY3VtZmVyZW5jZSAvIFRBVSkgOiAwO1xuICAgIGlmIChjaXJjdW1mZXJlbmNlID09PSAwIHx8IHRoaXMuaW5uZXJSYWRpdXMgPCAwIHx8IHRoaXMub3V0ZXJSYWRpdXMgPCAwKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGN0eC5zYXZlKCk7XG4gICAgbGV0IHJhZGl1c09mZnNldCA9IDA7XG4gICAgaWYgKG9mZnNldCkge1xuICAgICAgcmFkaXVzT2Zmc2V0ID0gb2Zmc2V0IC8gMjtcbiAgICAgIGNvbnN0IGhhbGZBbmdsZSA9ICh0aGlzLnN0YXJ0QW5nbGUgKyB0aGlzLmVuZEFuZ2xlKSAvIDI7XG4gICAgICBjdHgudHJhbnNsYXRlKE1hdGguY29zKGhhbGZBbmdsZSkgKiByYWRpdXNPZmZzZXQsIE1hdGguc2luKGhhbGZBbmdsZSkgKiByYWRpdXNPZmZzZXQpO1xuICAgICAgaWYgKHRoaXMuY2lyY3VtZmVyZW5jZSA+PSBQSSkge1xuICAgICAgICByYWRpdXNPZmZzZXQgPSBvZmZzZXQ7XG4gICAgICB9XG4gICAgfVxuICAgIGN0eC5maWxsU3R5bGUgPSBvcHRpb25zLmJhY2tncm91bmRDb2xvcjtcbiAgICBjdHguc3Ryb2tlU3R5bGUgPSBvcHRpb25zLmJvcmRlckNvbG9yO1xuICAgIGNvbnN0IGVuZEFuZ2xlID0gZHJhd0FyYyhjdHgsIHRoaXMsIHJhZGl1c09mZnNldCwgc3BhY2luZyk7XG4gICAgZHJhd0JvcmRlcihjdHgsIHRoaXMsIHJhZGl1c09mZnNldCwgc3BhY2luZywgZW5kQW5nbGUpO1xuICAgIGN0eC5yZXN0b3JlKCk7XG4gIH1cbn1cbkFyY0VsZW1lbnQuaWQgPSAnYXJjJztcbkFyY0VsZW1lbnQuZGVmYXVsdHMgPSB7XG4gIGJvcmRlckFsaWduOiAnY2VudGVyJyxcbiAgYm9yZGVyQ29sb3I6ICcjZmZmJyxcbiAgYm9yZGVySm9pblN0eWxlOiB1bmRlZmluZWQsXG4gIGJvcmRlclJhZGl1czogMCxcbiAgYm9yZGVyV2lkdGg6IDIsXG4gIG9mZnNldDogMCxcbiAgc3BhY2luZzogMCxcbiAgYW5nbGU6IHVuZGVmaW5lZCxcbn07XG5BcmNFbGVtZW50LmRlZmF1bHRSb3V0ZXMgPSB7XG4gIGJhY2tncm91bmRDb2xvcjogJ2JhY2tncm91bmRDb2xvcidcbn07XG5cbmZ1bmN0aW9uIHNldFN0eWxlKGN0eCwgb3B0aW9ucywgc3R5bGUgPSBvcHRpb25zKSB7XG4gIGN0eC5saW5lQ2FwID0gdmFsdWVPckRlZmF1bHQoc3R5bGUuYm9yZGVyQ2FwU3R5bGUsIG9wdGlvbnMuYm9yZGVyQ2FwU3R5bGUpO1xuICBjdHguc2V0TGluZURhc2godmFsdWVPckRlZmF1bHQoc3R5bGUuYm9yZGVyRGFzaCwgb3B0aW9ucy5ib3JkZXJEYXNoKSk7XG4gIGN0eC5saW5lRGFzaE9mZnNldCA9IHZhbHVlT3JEZWZhdWx0KHN0eWxlLmJvcmRlckRhc2hPZmZzZXQsIG9wdGlvbnMuYm9yZGVyRGFzaE9mZnNldCk7XG4gIGN0eC5saW5lSm9pbiA9IHZhbHVlT3JEZWZhdWx0KHN0eWxlLmJvcmRlckpvaW5TdHlsZSwgb3B0aW9ucy5ib3JkZXJKb2luU3R5bGUpO1xuICBjdHgubGluZVdpZHRoID0gdmFsdWVPckRlZmF1bHQoc3R5bGUuYm9yZGVyV2lkdGgsIG9wdGlvbnMuYm9yZGVyV2lkdGgpO1xuICBjdHguc3Ryb2tlU3R5bGUgPSB2YWx1ZU9yRGVmYXVsdChzdHlsZS5ib3JkZXJDb2xvciwgb3B0aW9ucy5ib3JkZXJDb2xvcik7XG59XG5mdW5jdGlvbiBsaW5lVG8oY3R4LCBwcmV2aW91cywgdGFyZ2V0KSB7XG4gIGN0eC5saW5lVG8odGFyZ2V0LngsIHRhcmdldC55KTtcbn1cbmZ1bmN0aW9uIGdldExpbmVNZXRob2Qob3B0aW9ucykge1xuICBpZiAob3B0aW9ucy5zdGVwcGVkKSB7XG4gICAgcmV0dXJuIF9zdGVwcGVkTGluZVRvO1xuICB9XG4gIGlmIChvcHRpb25zLnRlbnNpb24gfHwgb3B0aW9ucy5jdWJpY0ludGVycG9sYXRpb25Nb2RlID09PSAnbW9ub3RvbmUnKSB7XG4gICAgcmV0dXJuIF9iZXppZXJDdXJ2ZVRvO1xuICB9XG4gIHJldHVybiBsaW5lVG87XG59XG5mdW5jdGlvbiBwYXRoVmFycyhwb2ludHMsIHNlZ21lbnQsIHBhcmFtcyA9IHt9KSB7XG4gIGNvbnN0IGNvdW50ID0gcG9pbnRzLmxlbmd0aDtcbiAgY29uc3Qge3N0YXJ0OiBwYXJhbXNTdGFydCA9IDAsIGVuZDogcGFyYW1zRW5kID0gY291bnQgLSAxfSA9IHBhcmFtcztcbiAgY29uc3Qge3N0YXJ0OiBzZWdtZW50U3RhcnQsIGVuZDogc2VnbWVudEVuZH0gPSBzZWdtZW50O1xuICBjb25zdCBzdGFydCA9IE1hdGgubWF4KHBhcmFtc1N0YXJ0LCBzZWdtZW50U3RhcnQpO1xuICBjb25zdCBlbmQgPSBNYXRoLm1pbihwYXJhbXNFbmQsIHNlZ21lbnRFbmQpO1xuICBjb25zdCBvdXRzaWRlID0gcGFyYW1zU3RhcnQgPCBzZWdtZW50U3RhcnQgJiYgcGFyYW1zRW5kIDwgc2VnbWVudFN0YXJ0IHx8IHBhcmFtc1N0YXJ0ID4gc2VnbWVudEVuZCAmJiBwYXJhbXNFbmQgPiBzZWdtZW50RW5kO1xuICByZXR1cm4ge1xuICAgIGNvdW50LFxuICAgIHN0YXJ0LFxuICAgIGxvb3A6IHNlZ21lbnQubG9vcCxcbiAgICBpbGVuOiBlbmQgPCBzdGFydCAmJiAhb3V0c2lkZSA/IGNvdW50ICsgZW5kIC0gc3RhcnQgOiBlbmQgLSBzdGFydFxuICB9O1xufVxuZnVuY3Rpb24gcGF0aFNlZ21lbnQoY3R4LCBsaW5lLCBzZWdtZW50LCBwYXJhbXMpIHtcbiAgY29uc3Qge3BvaW50cywgb3B0aW9uc30gPSBsaW5lO1xuICBjb25zdCB7Y291bnQsIHN0YXJ0LCBsb29wLCBpbGVufSA9IHBhdGhWYXJzKHBvaW50cywgc2VnbWVudCwgcGFyYW1zKTtcbiAgY29uc3QgbGluZU1ldGhvZCA9IGdldExpbmVNZXRob2Qob3B0aW9ucyk7XG4gIGxldCB7bW92ZSA9IHRydWUsIHJldmVyc2V9ID0gcGFyYW1zIHx8IHt9O1xuICBsZXQgaSwgcG9pbnQsIHByZXY7XG4gIGZvciAoaSA9IDA7IGkgPD0gaWxlbjsgKytpKSB7XG4gICAgcG9pbnQgPSBwb2ludHNbKHN0YXJ0ICsgKHJldmVyc2UgPyBpbGVuIC0gaSA6IGkpKSAlIGNvdW50XTtcbiAgICBpZiAocG9pbnQuc2tpcCkge1xuICAgICAgY29udGludWU7XG4gICAgfSBlbHNlIGlmIChtb3ZlKSB7XG4gICAgICBjdHgubW92ZVRvKHBvaW50LngsIHBvaW50LnkpO1xuICAgICAgbW92ZSA9IGZhbHNlO1xuICAgIH0gZWxzZSB7XG4gICAgICBsaW5lTWV0aG9kKGN0eCwgcHJldiwgcG9pbnQsIHJldmVyc2UsIG9wdGlvbnMuc3RlcHBlZCk7XG4gICAgfVxuICAgIHByZXYgPSBwb2ludDtcbiAgfVxuICBpZiAobG9vcCkge1xuICAgIHBvaW50ID0gcG9pbnRzWyhzdGFydCArIChyZXZlcnNlID8gaWxlbiA6IDApKSAlIGNvdW50XTtcbiAgICBsaW5lTWV0aG9kKGN0eCwgcHJldiwgcG9pbnQsIHJldmVyc2UsIG9wdGlvbnMuc3RlcHBlZCk7XG4gIH1cbiAgcmV0dXJuICEhbG9vcDtcbn1cbmZ1bmN0aW9uIGZhc3RQYXRoU2VnbWVudChjdHgsIGxpbmUsIHNlZ21lbnQsIHBhcmFtcykge1xuICBjb25zdCBwb2ludHMgPSBsaW5lLnBvaW50cztcbiAgY29uc3Qge2NvdW50LCBzdGFydCwgaWxlbn0gPSBwYXRoVmFycyhwb2ludHMsIHNlZ21lbnQsIHBhcmFtcyk7XG4gIGNvbnN0IHttb3ZlID0gdHJ1ZSwgcmV2ZXJzZX0gPSBwYXJhbXMgfHwge307XG4gIGxldCBhdmdYID0gMDtcbiAgbGV0IGNvdW50WCA9IDA7XG4gIGxldCBpLCBwb2ludCwgcHJldlgsIG1pblksIG1heFksIGxhc3RZO1xuICBjb25zdCBwb2ludEluZGV4ID0gKGluZGV4KSA9PiAoc3RhcnQgKyAocmV2ZXJzZSA/IGlsZW4gLSBpbmRleCA6IGluZGV4KSkgJSBjb3VudDtcbiAgY29uc3QgZHJhd1ggPSAoKSA9PiB7XG4gICAgaWYgKG1pblkgIT09IG1heFkpIHtcbiAgICAgIGN0eC5saW5lVG8oYXZnWCwgbWF4WSk7XG4gICAgICBjdHgubGluZVRvKGF2Z1gsIG1pblkpO1xuICAgICAgY3R4LmxpbmVUbyhhdmdYLCBsYXN0WSk7XG4gICAgfVxuICB9O1xuICBpZiAobW92ZSkge1xuICAgIHBvaW50ID0gcG9pbnRzW3BvaW50SW5kZXgoMCldO1xuICAgIGN0eC5tb3ZlVG8ocG9pbnQueCwgcG9pbnQueSk7XG4gIH1cbiAgZm9yIChpID0gMDsgaSA8PSBpbGVuOyArK2kpIHtcbiAgICBwb2ludCA9IHBvaW50c1twb2ludEluZGV4KGkpXTtcbiAgICBpZiAocG9pbnQuc2tpcCkge1xuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIGNvbnN0IHggPSBwb2ludC54O1xuICAgIGNvbnN0IHkgPSBwb2ludC55O1xuICAgIGNvbnN0IHRydW5jWCA9IHggfCAwO1xuICAgIGlmICh0cnVuY1ggPT09IHByZXZYKSB7XG4gICAgICBpZiAoeSA8IG1pblkpIHtcbiAgICAgICAgbWluWSA9IHk7XG4gICAgICB9IGVsc2UgaWYgKHkgPiBtYXhZKSB7XG4gICAgICAgIG1heFkgPSB5O1xuICAgICAgfVxuICAgICAgYXZnWCA9IChjb3VudFggKiBhdmdYICsgeCkgLyArK2NvdW50WDtcbiAgICB9IGVsc2Uge1xuICAgICAgZHJhd1goKTtcbiAgICAgIGN0eC5saW5lVG8oeCwgeSk7XG4gICAgICBwcmV2WCA9IHRydW5jWDtcbiAgICAgIGNvdW50WCA9IDA7XG4gICAgICBtaW5ZID0gbWF4WSA9IHk7XG4gICAgfVxuICAgIGxhc3RZID0geTtcbiAgfVxuICBkcmF3WCgpO1xufVxuZnVuY3Rpb24gX2dldFNlZ21lbnRNZXRob2QobGluZSkge1xuICBjb25zdCBvcHRzID0gbGluZS5vcHRpb25zO1xuICBjb25zdCBib3JkZXJEYXNoID0gb3B0cy5ib3JkZXJEYXNoICYmIG9wdHMuYm9yZGVyRGFzaC5sZW5ndGg7XG4gIGNvbnN0IHVzZUZhc3RQYXRoID0gIWxpbmUuX2RlY2ltYXRlZCAmJiAhbGluZS5fbG9vcCAmJiAhb3B0cy50ZW5zaW9uICYmIG9wdHMuY3ViaWNJbnRlcnBvbGF0aW9uTW9kZSAhPT0gJ21vbm90b25lJyAmJiAhb3B0cy5zdGVwcGVkICYmICFib3JkZXJEYXNoO1xuICByZXR1cm4gdXNlRmFzdFBhdGggPyBmYXN0UGF0aFNlZ21lbnQgOiBwYXRoU2VnbWVudDtcbn1cbmZ1bmN0aW9uIF9nZXRJbnRlcnBvbGF0aW9uTWV0aG9kKG9wdGlvbnMpIHtcbiAgaWYgKG9wdGlvbnMuc3RlcHBlZCkge1xuICAgIHJldHVybiBfc3RlcHBlZEludGVycG9sYXRpb247XG4gIH1cbiAgaWYgKG9wdGlvbnMudGVuc2lvbiB8fCBvcHRpb25zLmN1YmljSW50ZXJwb2xhdGlvbk1vZGUgPT09ICdtb25vdG9uZScpIHtcbiAgICByZXR1cm4gX2JlemllckludGVycG9sYXRpb247XG4gIH1cbiAgcmV0dXJuIF9wb2ludEluTGluZTtcbn1cbmZ1bmN0aW9uIHN0cm9rZVBhdGhXaXRoQ2FjaGUoY3R4LCBsaW5lLCBzdGFydCwgY291bnQpIHtcbiAgbGV0IHBhdGggPSBsaW5lLl9wYXRoO1xuICBpZiAoIXBhdGgpIHtcbiAgICBwYXRoID0gbGluZS5fcGF0aCA9IG5ldyBQYXRoMkQoKTtcbiAgICBpZiAobGluZS5wYXRoKHBhdGgsIHN0YXJ0LCBjb3VudCkpIHtcbiAgICAgIHBhdGguY2xvc2VQYXRoKCk7XG4gICAgfVxuICB9XG4gIHNldFN0eWxlKGN0eCwgbGluZS5vcHRpb25zKTtcbiAgY3R4LnN0cm9rZShwYXRoKTtcbn1cbmZ1bmN0aW9uIHN0cm9rZVBhdGhEaXJlY3QoY3R4LCBsaW5lLCBzdGFydCwgY291bnQpIHtcbiAgY29uc3Qge3NlZ21lbnRzLCBvcHRpb25zfSA9IGxpbmU7XG4gIGNvbnN0IHNlZ21lbnRNZXRob2QgPSBfZ2V0U2VnbWVudE1ldGhvZChsaW5lKTtcbiAgZm9yIChjb25zdCBzZWdtZW50IG9mIHNlZ21lbnRzKSB7XG4gICAgc2V0U3R5bGUoY3R4LCBvcHRpb25zLCBzZWdtZW50LnN0eWxlKTtcbiAgICBjdHguYmVnaW5QYXRoKCk7XG4gICAgaWYgKHNlZ21lbnRNZXRob2QoY3R4LCBsaW5lLCBzZWdtZW50LCB7c3RhcnQsIGVuZDogc3RhcnQgKyBjb3VudCAtIDF9KSkge1xuICAgICAgY3R4LmNsb3NlUGF0aCgpO1xuICAgIH1cbiAgICBjdHguc3Ryb2tlKCk7XG4gIH1cbn1cbmNvbnN0IHVzZVBhdGgyRCA9IHR5cGVvZiBQYXRoMkQgPT09ICdmdW5jdGlvbic7XG5mdW5jdGlvbiBkcmF3KGN0eCwgbGluZSwgc3RhcnQsIGNvdW50KSB7XG4gIGlmICh1c2VQYXRoMkQgJiYgIWxpbmUub3B0aW9ucy5zZWdtZW50KSB7XG4gICAgc3Ryb2tlUGF0aFdpdGhDYWNoZShjdHgsIGxpbmUsIHN0YXJ0LCBjb3VudCk7XG4gIH0gZWxzZSB7XG4gICAgc3Ryb2tlUGF0aERpcmVjdChjdHgsIGxpbmUsIHN0YXJ0LCBjb3VudCk7XG4gIH1cbn1cbmNsYXNzIExpbmVFbGVtZW50IGV4dGVuZHMgRWxlbWVudCB7XG4gIGNvbnN0cnVjdG9yKGNmZykge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5hbmltYXRlZCA9IHRydWU7XG4gICAgdGhpcy5vcHRpb25zID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuX2NoYXJ0ID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuX2xvb3AgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5fZnVsbExvb3AgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5fcGF0aCA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLl9wb2ludHMgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5fc2VnbWVudHMgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5fZGVjaW1hdGVkID0gZmFsc2U7XG4gICAgdGhpcy5fcG9pbnRzVXBkYXRlZCA9IGZhbHNlO1xuICAgIHRoaXMuX2RhdGFzZXRJbmRleCA9IHVuZGVmaW5lZDtcbiAgICBpZiAoY2ZnKSB7XG4gICAgICBPYmplY3QuYXNzaWduKHRoaXMsIGNmZyk7XG4gICAgfVxuICB9XG4gIHVwZGF0ZUNvbnRyb2xQb2ludHMoY2hhcnRBcmVhLCBpbmRleEF4aXMpIHtcbiAgICBjb25zdCBvcHRpb25zID0gdGhpcy5vcHRpb25zO1xuICAgIGlmICgob3B0aW9ucy50ZW5zaW9uIHx8IG9wdGlvbnMuY3ViaWNJbnRlcnBvbGF0aW9uTW9kZSA9PT0gJ21vbm90b25lJykgJiYgIW9wdGlvbnMuc3RlcHBlZCAmJiAhdGhpcy5fcG9pbnRzVXBkYXRlZCkge1xuICAgICAgY29uc3QgbG9vcCA9IG9wdGlvbnMuc3BhbkdhcHMgPyB0aGlzLl9sb29wIDogdGhpcy5fZnVsbExvb3A7XG4gICAgICBfdXBkYXRlQmV6aWVyQ29udHJvbFBvaW50cyh0aGlzLl9wb2ludHMsIG9wdGlvbnMsIGNoYXJ0QXJlYSwgbG9vcCwgaW5kZXhBeGlzKTtcbiAgICAgIHRoaXMuX3BvaW50c1VwZGF0ZWQgPSB0cnVlO1xuICAgIH1cbiAgfVxuICBzZXQgcG9pbnRzKHBvaW50cykge1xuICAgIHRoaXMuX3BvaW50cyA9IHBvaW50cztcbiAgICBkZWxldGUgdGhpcy5fc2VnbWVudHM7XG4gICAgZGVsZXRlIHRoaXMuX3BhdGg7XG4gICAgdGhpcy5fcG9pbnRzVXBkYXRlZCA9IGZhbHNlO1xuICB9XG4gIGdldCBwb2ludHMoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3BvaW50cztcbiAgfVxuICBnZXQgc2VnbWVudHMoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3NlZ21lbnRzIHx8ICh0aGlzLl9zZWdtZW50cyA9IF9jb21wdXRlU2VnbWVudHModGhpcywgdGhpcy5vcHRpb25zLnNlZ21lbnQpKTtcbiAgfVxuICBmaXJzdCgpIHtcbiAgICBjb25zdCBzZWdtZW50cyA9IHRoaXMuc2VnbWVudHM7XG4gICAgY29uc3QgcG9pbnRzID0gdGhpcy5wb2ludHM7XG4gICAgcmV0dXJuIHNlZ21lbnRzLmxlbmd0aCAmJiBwb2ludHNbc2VnbWVudHNbMF0uc3RhcnRdO1xuICB9XG4gIGxhc3QoKSB7XG4gICAgY29uc3Qgc2VnbWVudHMgPSB0aGlzLnNlZ21lbnRzO1xuICAgIGNvbnN0IHBvaW50cyA9IHRoaXMucG9pbnRzO1xuICAgIGNvbnN0IGNvdW50ID0gc2VnbWVudHMubGVuZ3RoO1xuICAgIHJldHVybiBjb3VudCAmJiBwb2ludHNbc2VnbWVudHNbY291bnQgLSAxXS5lbmRdO1xuICB9XG4gIGludGVycG9sYXRlKHBvaW50LCBwcm9wZXJ0eSkge1xuICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG4gICAgY29uc3QgdmFsdWUgPSBwb2ludFtwcm9wZXJ0eV07XG4gICAgY29uc3QgcG9pbnRzID0gdGhpcy5wb2ludHM7XG4gICAgY29uc3Qgc2VnbWVudHMgPSBfYm91bmRTZWdtZW50cyh0aGlzLCB7cHJvcGVydHksIHN0YXJ0OiB2YWx1ZSwgZW5kOiB2YWx1ZX0pO1xuICAgIGlmICghc2VnbWVudHMubGVuZ3RoKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IHJlc3VsdCA9IFtdO1xuICAgIGNvbnN0IF9pbnRlcnBvbGF0ZSA9IF9nZXRJbnRlcnBvbGF0aW9uTWV0aG9kKG9wdGlvbnMpO1xuICAgIGxldCBpLCBpbGVuO1xuICAgIGZvciAoaSA9IDAsIGlsZW4gPSBzZWdtZW50cy5sZW5ndGg7IGkgPCBpbGVuOyArK2kpIHtcbiAgICAgIGNvbnN0IHtzdGFydCwgZW5kfSA9IHNlZ21lbnRzW2ldO1xuICAgICAgY29uc3QgcDEgPSBwb2ludHNbc3RhcnRdO1xuICAgICAgY29uc3QgcDIgPSBwb2ludHNbZW5kXTtcbiAgICAgIGlmIChwMSA9PT0gcDIpIHtcbiAgICAgICAgcmVzdWx0LnB1c2gocDEpO1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IHQgPSBNYXRoLmFicygodmFsdWUgLSBwMVtwcm9wZXJ0eV0pIC8gKHAyW3Byb3BlcnR5XSAtIHAxW3Byb3BlcnR5XSkpO1xuICAgICAgY29uc3QgaW50ZXJwb2xhdGVkID0gX2ludGVycG9sYXRlKHAxLCBwMiwgdCwgb3B0aW9ucy5zdGVwcGVkKTtcbiAgICAgIGludGVycG9sYXRlZFtwcm9wZXJ0eV0gPSBwb2ludFtwcm9wZXJ0eV07XG4gICAgICByZXN1bHQucHVzaChpbnRlcnBvbGF0ZWQpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0Lmxlbmd0aCA9PT0gMSA/IHJlc3VsdFswXSA6IHJlc3VsdDtcbiAgfVxuICBwYXRoU2VnbWVudChjdHgsIHNlZ21lbnQsIHBhcmFtcykge1xuICAgIGNvbnN0IHNlZ21lbnRNZXRob2QgPSBfZ2V0U2VnbWVudE1ldGhvZCh0aGlzKTtcbiAgICByZXR1cm4gc2VnbWVudE1ldGhvZChjdHgsIHRoaXMsIHNlZ21lbnQsIHBhcmFtcyk7XG4gIH1cbiAgcGF0aChjdHgsIHN0YXJ0LCBjb3VudCkge1xuICAgIGNvbnN0IHNlZ21lbnRzID0gdGhpcy5zZWdtZW50cztcbiAgICBjb25zdCBzZWdtZW50TWV0aG9kID0gX2dldFNlZ21lbnRNZXRob2QodGhpcyk7XG4gICAgbGV0IGxvb3AgPSB0aGlzLl9sb29wO1xuICAgIHN0YXJ0ID0gc3RhcnQgfHwgMDtcbiAgICBjb3VudCA9IGNvdW50IHx8ICh0aGlzLnBvaW50cy5sZW5ndGggLSBzdGFydCk7XG4gICAgZm9yIChjb25zdCBzZWdtZW50IG9mIHNlZ21lbnRzKSB7XG4gICAgICBsb29wICY9IHNlZ21lbnRNZXRob2QoY3R4LCB0aGlzLCBzZWdtZW50LCB7c3RhcnQsIGVuZDogc3RhcnQgKyBjb3VudCAtIDF9KTtcbiAgICB9XG4gICAgcmV0dXJuICEhbG9vcDtcbiAgfVxuICBkcmF3KGN0eCwgY2hhcnRBcmVhLCBzdGFydCwgY291bnQpIHtcbiAgICBjb25zdCBvcHRpb25zID0gdGhpcy5vcHRpb25zIHx8IHt9O1xuICAgIGNvbnN0IHBvaW50cyA9IHRoaXMucG9pbnRzIHx8IFtdO1xuICAgIGlmIChwb2ludHMubGVuZ3RoICYmIG9wdGlvbnMuYm9yZGVyV2lkdGgpIHtcbiAgICAgIGN0eC5zYXZlKCk7XG4gICAgICBkcmF3KGN0eCwgdGhpcywgc3RhcnQsIGNvdW50KTtcbiAgICAgIGN0eC5yZXN0b3JlKCk7XG4gICAgfVxuICAgIGlmICh0aGlzLmFuaW1hdGVkKSB7XG4gICAgICB0aGlzLl9wb2ludHNVcGRhdGVkID0gZmFsc2U7XG4gICAgICB0aGlzLl9wYXRoID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgfVxufVxuTGluZUVsZW1lbnQuaWQgPSAnbGluZSc7XG5MaW5lRWxlbWVudC5kZWZhdWx0cyA9IHtcbiAgYm9yZGVyQ2FwU3R5bGU6ICdidXR0JyxcbiAgYm9yZGVyRGFzaDogW10sXG4gIGJvcmRlckRhc2hPZmZzZXQ6IDAsXG4gIGJvcmRlckpvaW5TdHlsZTogJ21pdGVyJyxcbiAgYm9yZGVyV2lkdGg6IDMsXG4gIGNhcEJlemllclBvaW50czogdHJ1ZSxcbiAgY3ViaWNJbnRlcnBvbGF0aW9uTW9kZTogJ2RlZmF1bHQnLFxuICBmaWxsOiBmYWxzZSxcbiAgc3BhbkdhcHM6IGZhbHNlLFxuICBzdGVwcGVkOiBmYWxzZSxcbiAgdGVuc2lvbjogMCxcbn07XG5MaW5lRWxlbWVudC5kZWZhdWx0Um91dGVzID0ge1xuICBiYWNrZ3JvdW5kQ29sb3I6ICdiYWNrZ3JvdW5kQ29sb3InLFxuICBib3JkZXJDb2xvcjogJ2JvcmRlckNvbG9yJ1xufTtcbkxpbmVFbGVtZW50LmRlc2NyaXB0b3JzID0ge1xuICBfc2NyaXB0YWJsZTogdHJ1ZSxcbiAgX2luZGV4YWJsZTogKG5hbWUpID0+IG5hbWUgIT09ICdib3JkZXJEYXNoJyAmJiBuYW1lICE9PSAnZmlsbCcsXG59O1xuXG5mdW5jdGlvbiBpblJhbmdlJDEoZWwsIHBvcywgYXhpcywgdXNlRmluYWxQb3NpdGlvbikge1xuICBjb25zdCBvcHRpb25zID0gZWwub3B0aW9ucztcbiAgY29uc3Qge1theGlzXTogdmFsdWV9ID0gZWwuZ2V0UHJvcHMoW2F4aXNdLCB1c2VGaW5hbFBvc2l0aW9uKTtcbiAgcmV0dXJuIChNYXRoLmFicyhwb3MgLSB2YWx1ZSkgPCBvcHRpb25zLnJhZGl1cyArIG9wdGlvbnMuaGl0UmFkaXVzKTtcbn1cbmNsYXNzIFBvaW50RWxlbWVudCBleHRlbmRzIEVsZW1lbnQge1xuICBjb25zdHJ1Y3RvcihjZmcpIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMub3B0aW9ucyA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLnBhcnNlZCA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLnNraXAgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5zdG9wID0gdW5kZWZpbmVkO1xuICAgIGlmIChjZmcpIHtcbiAgICAgIE9iamVjdC5hc3NpZ24odGhpcywgY2ZnKTtcbiAgICB9XG4gIH1cbiAgaW5SYW5nZShtb3VzZVgsIG1vdXNlWSwgdXNlRmluYWxQb3NpdGlvbikge1xuICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG4gICAgY29uc3Qge3gsIHl9ID0gdGhpcy5nZXRQcm9wcyhbJ3gnLCAneSddLCB1c2VGaW5hbFBvc2l0aW9uKTtcbiAgICByZXR1cm4gKChNYXRoLnBvdyhtb3VzZVggLSB4LCAyKSArIE1hdGgucG93KG1vdXNlWSAtIHksIDIpKSA8IE1hdGgucG93KG9wdGlvbnMuaGl0UmFkaXVzICsgb3B0aW9ucy5yYWRpdXMsIDIpKTtcbiAgfVxuICBpblhSYW5nZShtb3VzZVgsIHVzZUZpbmFsUG9zaXRpb24pIHtcbiAgICByZXR1cm4gaW5SYW5nZSQxKHRoaXMsIG1vdXNlWCwgJ3gnLCB1c2VGaW5hbFBvc2l0aW9uKTtcbiAgfVxuICBpbllSYW5nZShtb3VzZVksIHVzZUZpbmFsUG9zaXRpb24pIHtcbiAgICByZXR1cm4gaW5SYW5nZSQxKHRoaXMsIG1vdXNlWSwgJ3knLCB1c2VGaW5hbFBvc2l0aW9uKTtcbiAgfVxuICBnZXRDZW50ZXJQb2ludCh1c2VGaW5hbFBvc2l0aW9uKSB7XG4gICAgY29uc3Qge3gsIHl9ID0gdGhpcy5nZXRQcm9wcyhbJ3gnLCAneSddLCB1c2VGaW5hbFBvc2l0aW9uKTtcbiAgICByZXR1cm4ge3gsIHl9O1xuICB9XG4gIHNpemUob3B0aW9ucykge1xuICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHRoaXMub3B0aW9ucyB8fCB7fTtcbiAgICBsZXQgcmFkaXVzID0gb3B0aW9ucy5yYWRpdXMgfHwgMDtcbiAgICByYWRpdXMgPSBNYXRoLm1heChyYWRpdXMsIHJhZGl1cyAmJiBvcHRpb25zLmhvdmVyUmFkaXVzIHx8IDApO1xuICAgIGNvbnN0IGJvcmRlcldpZHRoID0gcmFkaXVzICYmIG9wdGlvbnMuYm9yZGVyV2lkdGggfHwgMDtcbiAgICByZXR1cm4gKHJhZGl1cyArIGJvcmRlcldpZHRoKSAqIDI7XG4gIH1cbiAgZHJhdyhjdHgsIGFyZWEpIHtcbiAgICBjb25zdCBvcHRpb25zID0gdGhpcy5vcHRpb25zO1xuICAgIGlmICh0aGlzLnNraXAgfHwgb3B0aW9ucy5yYWRpdXMgPCAwLjEgfHwgIV9pc1BvaW50SW5BcmVhKHRoaXMsIGFyZWEsIHRoaXMuc2l6ZShvcHRpb25zKSAvIDIpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGN0eC5zdHJva2VTdHlsZSA9IG9wdGlvbnMuYm9yZGVyQ29sb3I7XG4gICAgY3R4LmxpbmVXaWR0aCA9IG9wdGlvbnMuYm9yZGVyV2lkdGg7XG4gICAgY3R4LmZpbGxTdHlsZSA9IG9wdGlvbnMuYmFja2dyb3VuZENvbG9yO1xuICAgIGRyYXdQb2ludChjdHgsIG9wdGlvbnMsIHRoaXMueCwgdGhpcy55KTtcbiAgfVxuICBnZXRSYW5nZSgpIHtcbiAgICBjb25zdCBvcHRpb25zID0gdGhpcy5vcHRpb25zIHx8IHt9O1xuICAgIHJldHVybiBvcHRpb25zLnJhZGl1cyArIG9wdGlvbnMuaGl0UmFkaXVzO1xuICB9XG59XG5Qb2ludEVsZW1lbnQuaWQgPSAncG9pbnQnO1xuUG9pbnRFbGVtZW50LmRlZmF1bHRzID0ge1xuICBib3JkZXJXaWR0aDogMSxcbiAgaGl0UmFkaXVzOiAxLFxuICBob3ZlckJvcmRlcldpZHRoOiAxLFxuICBob3ZlclJhZGl1czogNCxcbiAgcG9pbnRTdHlsZTogJ2NpcmNsZScsXG4gIHJhZGl1czogMyxcbiAgcm90YXRpb246IDBcbn07XG5Qb2ludEVsZW1lbnQuZGVmYXVsdFJvdXRlcyA9IHtcbiAgYmFja2dyb3VuZENvbG9yOiAnYmFja2dyb3VuZENvbG9yJyxcbiAgYm9yZGVyQ29sb3I6ICdib3JkZXJDb2xvcidcbn07XG5cbmZ1bmN0aW9uIGdldEJhckJvdW5kcyhiYXIsIHVzZUZpbmFsUG9zaXRpb24pIHtcbiAgY29uc3Qge3gsIHksIGJhc2UsIHdpZHRoLCBoZWlnaHR9ID0gYmFyLmdldFByb3BzKFsneCcsICd5JywgJ2Jhc2UnLCAnd2lkdGgnLCAnaGVpZ2h0J10sIHVzZUZpbmFsUG9zaXRpb24pO1xuICBsZXQgbGVmdCwgcmlnaHQsIHRvcCwgYm90dG9tLCBoYWxmO1xuICBpZiAoYmFyLmhvcml6b250YWwpIHtcbiAgICBoYWxmID0gaGVpZ2h0IC8gMjtcbiAgICBsZWZ0ID0gTWF0aC5taW4oeCwgYmFzZSk7XG4gICAgcmlnaHQgPSBNYXRoLm1heCh4LCBiYXNlKTtcbiAgICB0b3AgPSB5IC0gaGFsZjtcbiAgICBib3R0b20gPSB5ICsgaGFsZjtcbiAgfSBlbHNlIHtcbiAgICBoYWxmID0gd2lkdGggLyAyO1xuICAgIGxlZnQgPSB4IC0gaGFsZjtcbiAgICByaWdodCA9IHggKyBoYWxmO1xuICAgIHRvcCA9IE1hdGgubWluKHksIGJhc2UpO1xuICAgIGJvdHRvbSA9IE1hdGgubWF4KHksIGJhc2UpO1xuICB9XG4gIHJldHVybiB7bGVmdCwgdG9wLCByaWdodCwgYm90dG9tfTtcbn1cbmZ1bmN0aW9uIHNraXBPckxpbWl0KHNraXAsIHZhbHVlLCBtaW4sIG1heCkge1xuICByZXR1cm4gc2tpcCA/IDAgOiBfbGltaXRWYWx1ZSh2YWx1ZSwgbWluLCBtYXgpO1xufVxuZnVuY3Rpb24gcGFyc2VCb3JkZXJXaWR0aChiYXIsIG1heFcsIG1heEgpIHtcbiAgY29uc3QgdmFsdWUgPSBiYXIub3B0aW9ucy5ib3JkZXJXaWR0aDtcbiAgY29uc3Qgc2tpcCA9IGJhci5ib3JkZXJTa2lwcGVkO1xuICBjb25zdCBvID0gdG9UUkJMKHZhbHVlKTtcbiAgcmV0dXJuIHtcbiAgICB0OiBza2lwT3JMaW1pdChza2lwLnRvcCwgby50b3AsIDAsIG1heEgpLFxuICAgIHI6IHNraXBPckxpbWl0KHNraXAucmlnaHQsIG8ucmlnaHQsIDAsIG1heFcpLFxuICAgIGI6IHNraXBPckxpbWl0KHNraXAuYm90dG9tLCBvLmJvdHRvbSwgMCwgbWF4SCksXG4gICAgbDogc2tpcE9yTGltaXQoc2tpcC5sZWZ0LCBvLmxlZnQsIDAsIG1heFcpXG4gIH07XG59XG5mdW5jdGlvbiBwYXJzZUJvcmRlclJhZGl1cyhiYXIsIG1heFcsIG1heEgpIHtcbiAgY29uc3Qge2VuYWJsZUJvcmRlclJhZGl1c30gPSBiYXIuZ2V0UHJvcHMoWydlbmFibGVCb3JkZXJSYWRpdXMnXSk7XG4gIGNvbnN0IHZhbHVlID0gYmFyLm9wdGlvbnMuYm9yZGVyUmFkaXVzO1xuICBjb25zdCBvID0gdG9UUkJMQ29ybmVycyh2YWx1ZSk7XG4gIGNvbnN0IG1heFIgPSBNYXRoLm1pbihtYXhXLCBtYXhIKTtcbiAgY29uc3Qgc2tpcCA9IGJhci5ib3JkZXJTa2lwcGVkO1xuICBjb25zdCBlbmFibGVCb3JkZXIgPSBlbmFibGVCb3JkZXJSYWRpdXMgfHwgaXNPYmplY3QodmFsdWUpO1xuICByZXR1cm4ge1xuICAgIHRvcExlZnQ6IHNraXBPckxpbWl0KCFlbmFibGVCb3JkZXIgfHwgc2tpcC50b3AgfHwgc2tpcC5sZWZ0LCBvLnRvcExlZnQsIDAsIG1heFIpLFxuICAgIHRvcFJpZ2h0OiBza2lwT3JMaW1pdCghZW5hYmxlQm9yZGVyIHx8IHNraXAudG9wIHx8IHNraXAucmlnaHQsIG8udG9wUmlnaHQsIDAsIG1heFIpLFxuICAgIGJvdHRvbUxlZnQ6IHNraXBPckxpbWl0KCFlbmFibGVCb3JkZXIgfHwgc2tpcC5ib3R0b20gfHwgc2tpcC5sZWZ0LCBvLmJvdHRvbUxlZnQsIDAsIG1heFIpLFxuICAgIGJvdHRvbVJpZ2h0OiBza2lwT3JMaW1pdCghZW5hYmxlQm9yZGVyIHx8IHNraXAuYm90dG9tIHx8IHNraXAucmlnaHQsIG8uYm90dG9tUmlnaHQsIDAsIG1heFIpXG4gIH07XG59XG5mdW5jdGlvbiBib3VuZGluZ1JlY3RzKGJhcikge1xuICBjb25zdCBib3VuZHMgPSBnZXRCYXJCb3VuZHMoYmFyKTtcbiAgY29uc3Qgd2lkdGggPSBib3VuZHMucmlnaHQgLSBib3VuZHMubGVmdDtcbiAgY29uc3QgaGVpZ2h0ID0gYm91bmRzLmJvdHRvbSAtIGJvdW5kcy50b3A7XG4gIGNvbnN0IGJvcmRlciA9IHBhcnNlQm9yZGVyV2lkdGgoYmFyLCB3aWR0aCAvIDIsIGhlaWdodCAvIDIpO1xuICBjb25zdCByYWRpdXMgPSBwYXJzZUJvcmRlclJhZGl1cyhiYXIsIHdpZHRoIC8gMiwgaGVpZ2h0IC8gMik7XG4gIHJldHVybiB7XG4gICAgb3V0ZXI6IHtcbiAgICAgIHg6IGJvdW5kcy5sZWZ0LFxuICAgICAgeTogYm91bmRzLnRvcCxcbiAgICAgIHc6IHdpZHRoLFxuICAgICAgaDogaGVpZ2h0LFxuICAgICAgcmFkaXVzXG4gICAgfSxcbiAgICBpbm5lcjoge1xuICAgICAgeDogYm91bmRzLmxlZnQgKyBib3JkZXIubCxcbiAgICAgIHk6IGJvdW5kcy50b3AgKyBib3JkZXIudCxcbiAgICAgIHc6IHdpZHRoIC0gYm9yZGVyLmwgLSBib3JkZXIucixcbiAgICAgIGg6IGhlaWdodCAtIGJvcmRlci50IC0gYm9yZGVyLmIsXG4gICAgICByYWRpdXM6IHtcbiAgICAgICAgdG9wTGVmdDogTWF0aC5tYXgoMCwgcmFkaXVzLnRvcExlZnQgLSBNYXRoLm1heChib3JkZXIudCwgYm9yZGVyLmwpKSxcbiAgICAgICAgdG9wUmlnaHQ6IE1hdGgubWF4KDAsIHJhZGl1cy50b3BSaWdodCAtIE1hdGgubWF4KGJvcmRlci50LCBib3JkZXIucikpLFxuICAgICAgICBib3R0b21MZWZ0OiBNYXRoLm1heCgwLCByYWRpdXMuYm90dG9tTGVmdCAtIE1hdGgubWF4KGJvcmRlci5iLCBib3JkZXIubCkpLFxuICAgICAgICBib3R0b21SaWdodDogTWF0aC5tYXgoMCwgcmFkaXVzLmJvdHRvbVJpZ2h0IC0gTWF0aC5tYXgoYm9yZGVyLmIsIGJvcmRlci5yKSksXG4gICAgICB9XG4gICAgfVxuICB9O1xufVxuZnVuY3Rpb24gaW5SYW5nZShiYXIsIHgsIHksIHVzZUZpbmFsUG9zaXRpb24pIHtcbiAgY29uc3Qgc2tpcFggPSB4ID09PSBudWxsO1xuICBjb25zdCBza2lwWSA9IHkgPT09IG51bGw7XG4gIGNvbnN0IHNraXBCb3RoID0gc2tpcFggJiYgc2tpcFk7XG4gIGNvbnN0IGJvdW5kcyA9IGJhciAmJiAhc2tpcEJvdGggJiYgZ2V0QmFyQm91bmRzKGJhciwgdXNlRmluYWxQb3NpdGlvbik7XG4gIHJldHVybiBib3VuZHNcblx0XHQmJiAoc2tpcFggfHwgX2lzQmV0d2Vlbih4LCBib3VuZHMubGVmdCwgYm91bmRzLnJpZ2h0KSlcblx0XHQmJiAoc2tpcFkgfHwgX2lzQmV0d2Vlbih5LCBib3VuZHMudG9wLCBib3VuZHMuYm90dG9tKSk7XG59XG5mdW5jdGlvbiBoYXNSYWRpdXMocmFkaXVzKSB7XG4gIHJldHVybiByYWRpdXMudG9wTGVmdCB8fCByYWRpdXMudG9wUmlnaHQgfHwgcmFkaXVzLmJvdHRvbUxlZnQgfHwgcmFkaXVzLmJvdHRvbVJpZ2h0O1xufVxuZnVuY3Rpb24gYWRkTm9ybWFsUmVjdFBhdGgoY3R4LCByZWN0KSB7XG4gIGN0eC5yZWN0KHJlY3QueCwgcmVjdC55LCByZWN0LncsIHJlY3QuaCk7XG59XG5mdW5jdGlvbiBpbmZsYXRlUmVjdChyZWN0LCBhbW91bnQsIHJlZlJlY3QgPSB7fSkge1xuICBjb25zdCB4ID0gcmVjdC54ICE9PSByZWZSZWN0LnggPyAtYW1vdW50IDogMDtcbiAgY29uc3QgeSA9IHJlY3QueSAhPT0gcmVmUmVjdC55ID8gLWFtb3VudCA6IDA7XG4gIGNvbnN0IHcgPSAocmVjdC54ICsgcmVjdC53ICE9PSByZWZSZWN0LnggKyByZWZSZWN0LncgPyBhbW91bnQgOiAwKSAtIHg7XG4gIGNvbnN0IGggPSAocmVjdC55ICsgcmVjdC5oICE9PSByZWZSZWN0LnkgKyByZWZSZWN0LmggPyBhbW91bnQgOiAwKSAtIHk7XG4gIHJldHVybiB7XG4gICAgeDogcmVjdC54ICsgeCxcbiAgICB5OiByZWN0LnkgKyB5LFxuICAgIHc6IHJlY3QudyArIHcsXG4gICAgaDogcmVjdC5oICsgaCxcbiAgICByYWRpdXM6IHJlY3QucmFkaXVzXG4gIH07XG59XG5jbGFzcyBCYXJFbGVtZW50IGV4dGVuZHMgRWxlbWVudCB7XG4gIGNvbnN0cnVjdG9yKGNmZykge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5vcHRpb25zID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuaG9yaXpvbnRhbCA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLmJhc2UgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy53aWR0aCA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLmhlaWdodCA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLmluZmxhdGVBbW91bnQgPSB1bmRlZmluZWQ7XG4gICAgaWYgKGNmZykge1xuICAgICAgT2JqZWN0LmFzc2lnbih0aGlzLCBjZmcpO1xuICAgIH1cbiAgfVxuICBkcmF3KGN0eCkge1xuICAgIGNvbnN0IHtpbmZsYXRlQW1vdW50LCBvcHRpb25zOiB7Ym9yZGVyQ29sb3IsIGJhY2tncm91bmRDb2xvcn19ID0gdGhpcztcbiAgICBjb25zdCB7aW5uZXIsIG91dGVyfSA9IGJvdW5kaW5nUmVjdHModGhpcyk7XG4gICAgY29uc3QgYWRkUmVjdFBhdGggPSBoYXNSYWRpdXMob3V0ZXIucmFkaXVzKSA/IGFkZFJvdW5kZWRSZWN0UGF0aCA6IGFkZE5vcm1hbFJlY3RQYXRoO1xuICAgIGN0eC5zYXZlKCk7XG4gICAgaWYgKG91dGVyLncgIT09IGlubmVyLncgfHwgb3V0ZXIuaCAhPT0gaW5uZXIuaCkge1xuICAgICAgY3R4LmJlZ2luUGF0aCgpO1xuICAgICAgYWRkUmVjdFBhdGgoY3R4LCBpbmZsYXRlUmVjdChvdXRlciwgaW5mbGF0ZUFtb3VudCwgaW5uZXIpKTtcbiAgICAgIGN0eC5jbGlwKCk7XG4gICAgICBhZGRSZWN0UGF0aChjdHgsIGluZmxhdGVSZWN0KGlubmVyLCAtaW5mbGF0ZUFtb3VudCwgb3V0ZXIpKTtcbiAgICAgIGN0eC5maWxsU3R5bGUgPSBib3JkZXJDb2xvcjtcbiAgICAgIGN0eC5maWxsKCdldmVub2RkJyk7XG4gICAgfVxuICAgIGN0eC5iZWdpblBhdGgoKTtcbiAgICBhZGRSZWN0UGF0aChjdHgsIGluZmxhdGVSZWN0KGlubmVyLCBpbmZsYXRlQW1vdW50KSk7XG4gICAgY3R4LmZpbGxTdHlsZSA9IGJhY2tncm91bmRDb2xvcjtcbiAgICBjdHguZmlsbCgpO1xuICAgIGN0eC5yZXN0b3JlKCk7XG4gIH1cbiAgaW5SYW5nZShtb3VzZVgsIG1vdXNlWSwgdXNlRmluYWxQb3NpdGlvbikge1xuICAgIHJldHVybiBpblJhbmdlKHRoaXMsIG1vdXNlWCwgbW91c2VZLCB1c2VGaW5hbFBvc2l0aW9uKTtcbiAgfVxuICBpblhSYW5nZShtb3VzZVgsIHVzZUZpbmFsUG9zaXRpb24pIHtcbiAgICByZXR1cm4gaW5SYW5nZSh0aGlzLCBtb3VzZVgsIG51bGwsIHVzZUZpbmFsUG9zaXRpb24pO1xuICB9XG4gIGluWVJhbmdlKG1vdXNlWSwgdXNlRmluYWxQb3NpdGlvbikge1xuICAgIHJldHVybiBpblJhbmdlKHRoaXMsIG51bGwsIG1vdXNlWSwgdXNlRmluYWxQb3NpdGlvbik7XG4gIH1cbiAgZ2V0Q2VudGVyUG9pbnQodXNlRmluYWxQb3NpdGlvbikge1xuICAgIGNvbnN0IHt4LCB5LCBiYXNlLCBob3Jpem9udGFsfSA9IHRoaXMuZ2V0UHJvcHMoWyd4JywgJ3knLCAnYmFzZScsICdob3Jpem9udGFsJ10sIHVzZUZpbmFsUG9zaXRpb24pO1xuICAgIHJldHVybiB7XG4gICAgICB4OiBob3Jpem9udGFsID8gKHggKyBiYXNlKSAvIDIgOiB4LFxuICAgICAgeTogaG9yaXpvbnRhbCA/IHkgOiAoeSArIGJhc2UpIC8gMlxuICAgIH07XG4gIH1cbiAgZ2V0UmFuZ2UoYXhpcykge1xuICAgIHJldHVybiBheGlzID09PSAneCcgPyB0aGlzLndpZHRoIC8gMiA6IHRoaXMuaGVpZ2h0IC8gMjtcbiAgfVxufVxuQmFyRWxlbWVudC5pZCA9ICdiYXInO1xuQmFyRWxlbWVudC5kZWZhdWx0cyA9IHtcbiAgYm9yZGVyU2tpcHBlZDogJ3N0YXJ0JyxcbiAgYm9yZGVyV2lkdGg6IDAsXG4gIGJvcmRlclJhZGl1czogMCxcbiAgaW5mbGF0ZUFtb3VudDogJ2F1dG8nLFxuICBwb2ludFN0eWxlOiB1bmRlZmluZWRcbn07XG5CYXJFbGVtZW50LmRlZmF1bHRSb3V0ZXMgPSB7XG4gIGJhY2tncm91bmRDb2xvcjogJ2JhY2tncm91bmRDb2xvcicsXG4gIGJvcmRlckNvbG9yOiAnYm9yZGVyQ29sb3InXG59O1xuXG52YXIgZWxlbWVudHMgPSAvKiNfX1BVUkVfXyovT2JqZWN0LmZyZWV6ZSh7XG5fX3Byb3RvX186IG51bGwsXG5BcmNFbGVtZW50OiBBcmNFbGVtZW50LFxuTGluZUVsZW1lbnQ6IExpbmVFbGVtZW50LFxuUG9pbnRFbGVtZW50OiBQb2ludEVsZW1lbnQsXG5CYXJFbGVtZW50OiBCYXJFbGVtZW50XG59KTtcblxuZnVuY3Rpb24gbHR0YkRlY2ltYXRpb24oZGF0YSwgc3RhcnQsIGNvdW50LCBhdmFpbGFibGVXaWR0aCwgb3B0aW9ucykge1xuICBjb25zdCBzYW1wbGVzID0gb3B0aW9ucy5zYW1wbGVzIHx8IGF2YWlsYWJsZVdpZHRoO1xuICBpZiAoc2FtcGxlcyA+PSBjb3VudCkge1xuICAgIHJldHVybiBkYXRhLnNsaWNlKHN0YXJ0LCBzdGFydCArIGNvdW50KTtcbiAgfVxuICBjb25zdCBkZWNpbWF0ZWQgPSBbXTtcbiAgY29uc3QgYnVja2V0V2lkdGggPSAoY291bnQgLSAyKSAvIChzYW1wbGVzIC0gMik7XG4gIGxldCBzYW1wbGVkSW5kZXggPSAwO1xuICBjb25zdCBlbmRJbmRleCA9IHN0YXJ0ICsgY291bnQgLSAxO1xuICBsZXQgYSA9IHN0YXJ0O1xuICBsZXQgaSwgbWF4QXJlYVBvaW50LCBtYXhBcmVhLCBhcmVhLCBuZXh0QTtcbiAgZGVjaW1hdGVkW3NhbXBsZWRJbmRleCsrXSA9IGRhdGFbYV07XG4gIGZvciAoaSA9IDA7IGkgPCBzYW1wbGVzIC0gMjsgaSsrKSB7XG4gICAgbGV0IGF2Z1ggPSAwO1xuICAgIGxldCBhdmdZID0gMDtcbiAgICBsZXQgajtcbiAgICBjb25zdCBhdmdSYW5nZVN0YXJ0ID0gTWF0aC5mbG9vcigoaSArIDEpICogYnVja2V0V2lkdGgpICsgMSArIHN0YXJ0O1xuICAgIGNvbnN0IGF2Z1JhbmdlRW5kID0gTWF0aC5taW4oTWF0aC5mbG9vcigoaSArIDIpICogYnVja2V0V2lkdGgpICsgMSwgY291bnQpICsgc3RhcnQ7XG4gICAgY29uc3QgYXZnUmFuZ2VMZW5ndGggPSBhdmdSYW5nZUVuZCAtIGF2Z1JhbmdlU3RhcnQ7XG4gICAgZm9yIChqID0gYXZnUmFuZ2VTdGFydDsgaiA8IGF2Z1JhbmdlRW5kOyBqKyspIHtcbiAgICAgIGF2Z1ggKz0gZGF0YVtqXS54O1xuICAgICAgYXZnWSArPSBkYXRhW2pdLnk7XG4gICAgfVxuICAgIGF2Z1ggLz0gYXZnUmFuZ2VMZW5ndGg7XG4gICAgYXZnWSAvPSBhdmdSYW5nZUxlbmd0aDtcbiAgICBjb25zdCByYW5nZU9mZnMgPSBNYXRoLmZsb29yKGkgKiBidWNrZXRXaWR0aCkgKyAxICsgc3RhcnQ7XG4gICAgY29uc3QgcmFuZ2VUbyA9IE1hdGgubWluKE1hdGguZmxvb3IoKGkgKyAxKSAqIGJ1Y2tldFdpZHRoKSArIDEsIGNvdW50KSArIHN0YXJ0O1xuICAgIGNvbnN0IHt4OiBwb2ludEF4LCB5OiBwb2ludEF5fSA9IGRhdGFbYV07XG4gICAgbWF4QXJlYSA9IGFyZWEgPSAtMTtcbiAgICBmb3IgKGogPSByYW5nZU9mZnM7IGogPCByYW5nZVRvOyBqKyspIHtcbiAgICAgIGFyZWEgPSAwLjUgKiBNYXRoLmFicyhcbiAgICAgICAgKHBvaW50QXggLSBhdmdYKSAqIChkYXRhW2pdLnkgLSBwb2ludEF5KSAtXG4gICAgICAgIChwb2ludEF4IC0gZGF0YVtqXS54KSAqIChhdmdZIC0gcG9pbnRBeSlcbiAgICAgICk7XG4gICAgICBpZiAoYXJlYSA+IG1heEFyZWEpIHtcbiAgICAgICAgbWF4QXJlYSA9IGFyZWE7XG4gICAgICAgIG1heEFyZWFQb2ludCA9IGRhdGFbal07XG4gICAgICAgIG5leHRBID0gajtcbiAgICAgIH1cbiAgICB9XG4gICAgZGVjaW1hdGVkW3NhbXBsZWRJbmRleCsrXSA9IG1heEFyZWFQb2ludDtcbiAgICBhID0gbmV4dEE7XG4gIH1cbiAgZGVjaW1hdGVkW3NhbXBsZWRJbmRleCsrXSA9IGRhdGFbZW5kSW5kZXhdO1xuICByZXR1cm4gZGVjaW1hdGVkO1xufVxuZnVuY3Rpb24gbWluTWF4RGVjaW1hdGlvbihkYXRhLCBzdGFydCwgY291bnQsIGF2YWlsYWJsZVdpZHRoKSB7XG4gIGxldCBhdmdYID0gMDtcbiAgbGV0IGNvdW50WCA9IDA7XG4gIGxldCBpLCBwb2ludCwgeCwgeSwgcHJldlgsIG1pbkluZGV4LCBtYXhJbmRleCwgc3RhcnRJbmRleCwgbWluWSwgbWF4WTtcbiAgY29uc3QgZGVjaW1hdGVkID0gW107XG4gIGNvbnN0IGVuZEluZGV4ID0gc3RhcnQgKyBjb3VudCAtIDE7XG4gIGNvbnN0IHhNaW4gPSBkYXRhW3N0YXJ0XS54O1xuICBjb25zdCB4TWF4ID0gZGF0YVtlbmRJbmRleF0ueDtcbiAgY29uc3QgZHggPSB4TWF4IC0geE1pbjtcbiAgZm9yIChpID0gc3RhcnQ7IGkgPCBzdGFydCArIGNvdW50OyArK2kpIHtcbiAgICBwb2ludCA9IGRhdGFbaV07XG4gICAgeCA9IChwb2ludC54IC0geE1pbikgLyBkeCAqIGF2YWlsYWJsZVdpZHRoO1xuICAgIHkgPSBwb2ludC55O1xuICAgIGNvbnN0IHRydW5jWCA9IHggfCAwO1xuICAgIGlmICh0cnVuY1ggPT09IHByZXZYKSB7XG4gICAgICBpZiAoeSA8IG1pblkpIHtcbiAgICAgICAgbWluWSA9IHk7XG4gICAgICAgIG1pbkluZGV4ID0gaTtcbiAgICAgIH0gZWxzZSBpZiAoeSA+IG1heFkpIHtcbiAgICAgICAgbWF4WSA9IHk7XG4gICAgICAgIG1heEluZGV4ID0gaTtcbiAgICAgIH1cbiAgICAgIGF2Z1ggPSAoY291bnRYICogYXZnWCArIHBvaW50LngpIC8gKytjb3VudFg7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IGxhc3RJbmRleCA9IGkgLSAxO1xuICAgICAgaWYgKCFpc051bGxPclVuZGVmKG1pbkluZGV4KSAmJiAhaXNOdWxsT3JVbmRlZihtYXhJbmRleCkpIHtcbiAgICAgICAgY29uc3QgaW50ZXJtZWRpYXRlSW5kZXgxID0gTWF0aC5taW4obWluSW5kZXgsIG1heEluZGV4KTtcbiAgICAgICAgY29uc3QgaW50ZXJtZWRpYXRlSW5kZXgyID0gTWF0aC5tYXgobWluSW5kZXgsIG1heEluZGV4KTtcbiAgICAgICAgaWYgKGludGVybWVkaWF0ZUluZGV4MSAhPT0gc3RhcnRJbmRleCAmJiBpbnRlcm1lZGlhdGVJbmRleDEgIT09IGxhc3RJbmRleCkge1xuICAgICAgICAgIGRlY2ltYXRlZC5wdXNoKHtcbiAgICAgICAgICAgIC4uLmRhdGFbaW50ZXJtZWRpYXRlSW5kZXgxXSxcbiAgICAgICAgICAgIHg6IGF2Z1gsXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGludGVybWVkaWF0ZUluZGV4MiAhPT0gc3RhcnRJbmRleCAmJiBpbnRlcm1lZGlhdGVJbmRleDIgIT09IGxhc3RJbmRleCkge1xuICAgICAgICAgIGRlY2ltYXRlZC5wdXNoKHtcbiAgICAgICAgICAgIC4uLmRhdGFbaW50ZXJtZWRpYXRlSW5kZXgyXSxcbiAgICAgICAgICAgIHg6IGF2Z1hcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGkgPiAwICYmIGxhc3RJbmRleCAhPT0gc3RhcnRJbmRleCkge1xuICAgICAgICBkZWNpbWF0ZWQucHVzaChkYXRhW2xhc3RJbmRleF0pO1xuICAgICAgfVxuICAgICAgZGVjaW1hdGVkLnB1c2gocG9pbnQpO1xuICAgICAgcHJldlggPSB0cnVuY1g7XG4gICAgICBjb3VudFggPSAwO1xuICAgICAgbWluWSA9IG1heFkgPSB5O1xuICAgICAgbWluSW5kZXggPSBtYXhJbmRleCA9IHN0YXJ0SW5kZXggPSBpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gZGVjaW1hdGVkO1xufVxuZnVuY3Rpb24gY2xlYW5EZWNpbWF0ZWREYXRhc2V0KGRhdGFzZXQpIHtcbiAgaWYgKGRhdGFzZXQuX2RlY2ltYXRlZCkge1xuICAgIGNvbnN0IGRhdGEgPSBkYXRhc2V0Ll9kYXRhO1xuICAgIGRlbGV0ZSBkYXRhc2V0Ll9kZWNpbWF0ZWQ7XG4gICAgZGVsZXRlIGRhdGFzZXQuX2RhdGE7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGRhdGFzZXQsICdkYXRhJywge3ZhbHVlOiBkYXRhfSk7XG4gIH1cbn1cbmZ1bmN0aW9uIGNsZWFuRGVjaW1hdGVkRGF0YShjaGFydCkge1xuICBjaGFydC5kYXRhLmRhdGFzZXRzLmZvckVhY2goKGRhdGFzZXQpID0+IHtcbiAgICBjbGVhbkRlY2ltYXRlZERhdGFzZXQoZGF0YXNldCk7XG4gIH0pO1xufVxuZnVuY3Rpb24gZ2V0U3RhcnRBbmRDb3VudE9mVmlzaWJsZVBvaW50c1NpbXBsaWZpZWQobWV0YSwgcG9pbnRzKSB7XG4gIGNvbnN0IHBvaW50Q291bnQgPSBwb2ludHMubGVuZ3RoO1xuICBsZXQgc3RhcnQgPSAwO1xuICBsZXQgY291bnQ7XG4gIGNvbnN0IHtpU2NhbGV9ID0gbWV0YTtcbiAgY29uc3Qge21pbiwgbWF4LCBtaW5EZWZpbmVkLCBtYXhEZWZpbmVkfSA9IGlTY2FsZS5nZXRVc2VyQm91bmRzKCk7XG4gIGlmIChtaW5EZWZpbmVkKSB7XG4gICAgc3RhcnQgPSBfbGltaXRWYWx1ZShfbG9va3VwQnlLZXkocG9pbnRzLCBpU2NhbGUuYXhpcywgbWluKS5sbywgMCwgcG9pbnRDb3VudCAtIDEpO1xuICB9XG4gIGlmIChtYXhEZWZpbmVkKSB7XG4gICAgY291bnQgPSBfbGltaXRWYWx1ZShfbG9va3VwQnlLZXkocG9pbnRzLCBpU2NhbGUuYXhpcywgbWF4KS5oaSArIDEsIHN0YXJ0LCBwb2ludENvdW50KSAtIHN0YXJ0O1xuICB9IGVsc2Uge1xuICAgIGNvdW50ID0gcG9pbnRDb3VudCAtIHN0YXJ0O1xuICB9XG4gIHJldHVybiB7c3RhcnQsIGNvdW50fTtcbn1cbnZhciBwbHVnaW5fZGVjaW1hdGlvbiA9IHtcbiAgaWQ6ICdkZWNpbWF0aW9uJyxcbiAgZGVmYXVsdHM6IHtcbiAgICBhbGdvcml0aG06ICdtaW4tbWF4JyxcbiAgICBlbmFibGVkOiBmYWxzZSxcbiAgfSxcbiAgYmVmb3JlRWxlbWVudHNVcGRhdGU6IChjaGFydCwgYXJncywgb3B0aW9ucykgPT4ge1xuICAgIGlmICghb3B0aW9ucy5lbmFibGVkKSB7XG4gICAgICBjbGVhbkRlY2ltYXRlZERhdGEoY2hhcnQpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBhdmFpbGFibGVXaWR0aCA9IGNoYXJ0LndpZHRoO1xuICAgIGNoYXJ0LmRhdGEuZGF0YXNldHMuZm9yRWFjaCgoZGF0YXNldCwgZGF0YXNldEluZGV4KSA9PiB7XG4gICAgICBjb25zdCB7X2RhdGEsIGluZGV4QXhpc30gPSBkYXRhc2V0O1xuICAgICAgY29uc3QgbWV0YSA9IGNoYXJ0LmdldERhdGFzZXRNZXRhKGRhdGFzZXRJbmRleCk7XG4gICAgICBjb25zdCBkYXRhID0gX2RhdGEgfHwgZGF0YXNldC5kYXRhO1xuICAgICAgaWYgKHJlc29sdmUoW2luZGV4QXhpcywgY2hhcnQub3B0aW9ucy5pbmRleEF4aXNdKSA9PT0gJ3knKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmIChtZXRhLnR5cGUgIT09ICdsaW5lJykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBjb25zdCB4QXhpcyA9IGNoYXJ0LnNjYWxlc1ttZXRhLnhBeGlzSURdO1xuICAgICAgaWYgKHhBeGlzLnR5cGUgIT09ICdsaW5lYXInICYmIHhBeGlzLnR5cGUgIT09ICd0aW1lJykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBpZiAoY2hhcnQub3B0aW9ucy5wYXJzaW5nKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGxldCB7c3RhcnQsIGNvdW50fSA9IGdldFN0YXJ0QW5kQ291bnRPZlZpc2libGVQb2ludHNTaW1wbGlmaWVkKG1ldGEsIGRhdGEpO1xuICAgICAgY29uc3QgdGhyZXNob2xkID0gb3B0aW9ucy50aHJlc2hvbGQgfHwgNCAqIGF2YWlsYWJsZVdpZHRoO1xuICAgICAgaWYgKGNvdW50IDw9IHRocmVzaG9sZCkge1xuICAgICAgICBjbGVhbkRlY2ltYXRlZERhdGFzZXQoZGF0YXNldCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmIChpc051bGxPclVuZGVmKF9kYXRhKSkge1xuICAgICAgICBkYXRhc2V0Ll9kYXRhID0gZGF0YTtcbiAgICAgICAgZGVsZXRlIGRhdGFzZXQuZGF0YTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGRhdGFzZXQsICdkYXRhJywge1xuICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fZGVjaW1hdGVkO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgc2V0OiBmdW5jdGlvbihkKSB7XG4gICAgICAgICAgICB0aGlzLl9kYXRhID0gZDtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgbGV0IGRlY2ltYXRlZDtcbiAgICAgIHN3aXRjaCAob3B0aW9ucy5hbGdvcml0aG0pIHtcbiAgICAgIGNhc2UgJ2x0dGInOlxuICAgICAgICBkZWNpbWF0ZWQgPSBsdHRiRGVjaW1hdGlvbihkYXRhLCBzdGFydCwgY291bnQsIGF2YWlsYWJsZVdpZHRoLCBvcHRpb25zKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdtaW4tbWF4JzpcbiAgICAgICAgZGVjaW1hdGVkID0gbWluTWF4RGVjaW1hdGlvbihkYXRhLCBzdGFydCwgY291bnQsIGF2YWlsYWJsZVdpZHRoKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFVuc3VwcG9ydGVkIGRlY2ltYXRpb24gYWxnb3JpdGhtICcke29wdGlvbnMuYWxnb3JpdGhtfSdgKTtcbiAgICAgIH1cbiAgICAgIGRhdGFzZXQuX2RlY2ltYXRlZCA9IGRlY2ltYXRlZDtcbiAgICB9KTtcbiAgfSxcbiAgZGVzdHJveShjaGFydCkge1xuICAgIGNsZWFuRGVjaW1hdGVkRGF0YShjaGFydCk7XG4gIH1cbn07XG5cbmZ1bmN0aW9uIGdldExpbmVCeUluZGV4KGNoYXJ0LCBpbmRleCkge1xuICBjb25zdCBtZXRhID0gY2hhcnQuZ2V0RGF0YXNldE1ldGEoaW5kZXgpO1xuICBjb25zdCB2aXNpYmxlID0gbWV0YSAmJiBjaGFydC5pc0RhdGFzZXRWaXNpYmxlKGluZGV4KTtcbiAgcmV0dXJuIHZpc2libGUgPyBtZXRhLmRhdGFzZXQgOiBudWxsO1xufVxuZnVuY3Rpb24gcGFyc2VGaWxsT3B0aW9uKGxpbmUpIHtcbiAgY29uc3Qgb3B0aW9ucyA9IGxpbmUub3B0aW9ucztcbiAgY29uc3QgZmlsbE9wdGlvbiA9IG9wdGlvbnMuZmlsbDtcbiAgbGV0IGZpbGwgPSB2YWx1ZU9yRGVmYXVsdChmaWxsT3B0aW9uICYmIGZpbGxPcHRpb24udGFyZ2V0LCBmaWxsT3B0aW9uKTtcbiAgaWYgKGZpbGwgPT09IHVuZGVmaW5lZCkge1xuICAgIGZpbGwgPSAhIW9wdGlvbnMuYmFja2dyb3VuZENvbG9yO1xuICB9XG4gIGlmIChmaWxsID09PSBmYWxzZSB8fCBmaWxsID09PSBudWxsKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGlmIChmaWxsID09PSB0cnVlKSB7XG4gICAgcmV0dXJuICdvcmlnaW4nO1xuICB9XG4gIHJldHVybiBmaWxsO1xufVxuZnVuY3Rpb24gZGVjb2RlRmlsbChsaW5lLCBpbmRleCwgY291bnQpIHtcbiAgY29uc3QgZmlsbCA9IHBhcnNlRmlsbE9wdGlvbihsaW5lKTtcbiAgaWYgKGlzT2JqZWN0KGZpbGwpKSB7XG4gICAgcmV0dXJuIGlzTmFOKGZpbGwudmFsdWUpID8gZmFsc2UgOiBmaWxsO1xuICB9XG4gIGxldCB0YXJnZXQgPSBwYXJzZUZsb2F0KGZpbGwpO1xuICBpZiAoaXNOdW1iZXJGaW5pdGUodGFyZ2V0KSAmJiBNYXRoLmZsb29yKHRhcmdldCkgPT09IHRhcmdldCkge1xuICAgIGlmIChmaWxsWzBdID09PSAnLScgfHwgZmlsbFswXSA9PT0gJysnKSB7XG4gICAgICB0YXJnZXQgPSBpbmRleCArIHRhcmdldDtcbiAgICB9XG4gICAgaWYgKHRhcmdldCA9PT0gaW5kZXggfHwgdGFyZ2V0IDwgMCB8fCB0YXJnZXQgPj0gY291bnQpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIHRhcmdldDtcbiAgfVxuICByZXR1cm4gWydvcmlnaW4nLCAnc3RhcnQnLCAnZW5kJywgJ3N0YWNrJywgJ3NoYXBlJ10uaW5kZXhPZihmaWxsKSA+PSAwICYmIGZpbGw7XG59XG5mdW5jdGlvbiBjb21wdXRlTGluZWFyQm91bmRhcnkoc291cmNlKSB7XG4gIGNvbnN0IHtzY2FsZSA9IHt9LCBmaWxsfSA9IHNvdXJjZTtcbiAgbGV0IHRhcmdldCA9IG51bGw7XG4gIGxldCBob3Jpem9udGFsO1xuICBpZiAoZmlsbCA9PT0gJ3N0YXJ0Jykge1xuICAgIHRhcmdldCA9IHNjYWxlLmJvdHRvbTtcbiAgfSBlbHNlIGlmIChmaWxsID09PSAnZW5kJykge1xuICAgIHRhcmdldCA9IHNjYWxlLnRvcDtcbiAgfSBlbHNlIGlmIChpc09iamVjdChmaWxsKSkge1xuICAgIHRhcmdldCA9IHNjYWxlLmdldFBpeGVsRm9yVmFsdWUoZmlsbC52YWx1ZSk7XG4gIH0gZWxzZSBpZiAoc2NhbGUuZ2V0QmFzZVBpeGVsKSB7XG4gICAgdGFyZ2V0ID0gc2NhbGUuZ2V0QmFzZVBpeGVsKCk7XG4gIH1cbiAgaWYgKGlzTnVtYmVyRmluaXRlKHRhcmdldCkpIHtcbiAgICBob3Jpem9udGFsID0gc2NhbGUuaXNIb3Jpem9udGFsKCk7XG4gICAgcmV0dXJuIHtcbiAgICAgIHg6IGhvcml6b250YWwgPyB0YXJnZXQgOiBudWxsLFxuICAgICAgeTogaG9yaXpvbnRhbCA/IG51bGwgOiB0YXJnZXRcbiAgICB9O1xuICB9XG4gIHJldHVybiBudWxsO1xufVxuY2xhc3Mgc2ltcGxlQXJjIHtcbiAgY29uc3RydWN0b3Iob3B0cykge1xuICAgIHRoaXMueCA9IG9wdHMueDtcbiAgICB0aGlzLnkgPSBvcHRzLnk7XG4gICAgdGhpcy5yYWRpdXMgPSBvcHRzLnJhZGl1cztcbiAgfVxuICBwYXRoU2VnbWVudChjdHgsIGJvdW5kcywgb3B0cykge1xuICAgIGNvbnN0IHt4LCB5LCByYWRpdXN9ID0gdGhpcztcbiAgICBib3VuZHMgPSBib3VuZHMgfHwge3N0YXJ0OiAwLCBlbmQ6IFRBVX07XG4gICAgY3R4LmFyYyh4LCB5LCByYWRpdXMsIGJvdW5kcy5lbmQsIGJvdW5kcy5zdGFydCwgdHJ1ZSk7XG4gICAgcmV0dXJuICFvcHRzLmJvdW5kcztcbiAgfVxuICBpbnRlcnBvbGF0ZShwb2ludCkge1xuICAgIGNvbnN0IHt4LCB5LCByYWRpdXN9ID0gdGhpcztcbiAgICBjb25zdCBhbmdsZSA9IHBvaW50LmFuZ2xlO1xuICAgIHJldHVybiB7XG4gICAgICB4OiB4ICsgTWF0aC5jb3MoYW5nbGUpICogcmFkaXVzLFxuICAgICAgeTogeSArIE1hdGguc2luKGFuZ2xlKSAqIHJhZGl1cyxcbiAgICAgIGFuZ2xlXG4gICAgfTtcbiAgfVxufVxuZnVuY3Rpb24gY29tcHV0ZUNpcmN1bGFyQm91bmRhcnkoc291cmNlKSB7XG4gIGNvbnN0IHtzY2FsZSwgZmlsbH0gPSBzb3VyY2U7XG4gIGNvbnN0IG9wdGlvbnMgPSBzY2FsZS5vcHRpb25zO1xuICBjb25zdCBsZW5ndGggPSBzY2FsZS5nZXRMYWJlbHMoKS5sZW5ndGg7XG4gIGNvbnN0IHRhcmdldCA9IFtdO1xuICBjb25zdCBzdGFydCA9IG9wdGlvbnMucmV2ZXJzZSA/IHNjYWxlLm1heCA6IHNjYWxlLm1pbjtcbiAgY29uc3QgZW5kID0gb3B0aW9ucy5yZXZlcnNlID8gc2NhbGUubWluIDogc2NhbGUubWF4O1xuICBsZXQgaSwgY2VudGVyLCB2YWx1ZTtcbiAgaWYgKGZpbGwgPT09ICdzdGFydCcpIHtcbiAgICB2YWx1ZSA9IHN0YXJ0O1xuICB9IGVsc2UgaWYgKGZpbGwgPT09ICdlbmQnKSB7XG4gICAgdmFsdWUgPSBlbmQ7XG4gIH0gZWxzZSBpZiAoaXNPYmplY3QoZmlsbCkpIHtcbiAgICB2YWx1ZSA9IGZpbGwudmFsdWU7XG4gIH0gZWxzZSB7XG4gICAgdmFsdWUgPSBzY2FsZS5nZXRCYXNlVmFsdWUoKTtcbiAgfVxuICBpZiAob3B0aW9ucy5ncmlkLmNpcmN1bGFyKSB7XG4gICAgY2VudGVyID0gc2NhbGUuZ2V0UG9pbnRQb3NpdGlvbkZvclZhbHVlKDAsIHN0YXJ0KTtcbiAgICByZXR1cm4gbmV3IHNpbXBsZUFyYyh7XG4gICAgICB4OiBjZW50ZXIueCxcbiAgICAgIHk6IGNlbnRlci55LFxuICAgICAgcmFkaXVzOiBzY2FsZS5nZXREaXN0YW5jZUZyb21DZW50ZXJGb3JWYWx1ZSh2YWx1ZSlcbiAgICB9KTtcbiAgfVxuICBmb3IgKGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHtcbiAgICB0YXJnZXQucHVzaChzY2FsZS5nZXRQb2ludFBvc2l0aW9uRm9yVmFsdWUoaSwgdmFsdWUpKTtcbiAgfVxuICByZXR1cm4gdGFyZ2V0O1xufVxuZnVuY3Rpb24gY29tcHV0ZUJvdW5kYXJ5KHNvdXJjZSkge1xuICBjb25zdCBzY2FsZSA9IHNvdXJjZS5zY2FsZSB8fCB7fTtcbiAgaWYgKHNjYWxlLmdldFBvaW50UG9zaXRpb25Gb3JWYWx1ZSkge1xuICAgIHJldHVybiBjb21wdXRlQ2lyY3VsYXJCb3VuZGFyeShzb3VyY2UpO1xuICB9XG4gIHJldHVybiBjb21wdXRlTGluZWFyQm91bmRhcnkoc291cmNlKTtcbn1cbmZ1bmN0aW9uIGZpbmRTZWdtZW50RW5kKHN0YXJ0LCBlbmQsIHBvaW50cykge1xuICBmb3IgKDtlbmQgPiBzdGFydDsgZW5kLS0pIHtcbiAgICBjb25zdCBwb2ludCA9IHBvaW50c1tlbmRdO1xuICAgIGlmICghaXNOYU4ocG9pbnQueCkgJiYgIWlzTmFOKHBvaW50LnkpKSB7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGVuZDtcbn1cbmZ1bmN0aW9uIHBvaW50c0Zyb21TZWdtZW50cyhib3VuZGFyeSwgbGluZSkge1xuICBjb25zdCB7eCA9IG51bGwsIHkgPSBudWxsfSA9IGJvdW5kYXJ5IHx8IHt9O1xuICBjb25zdCBsaW5lUG9pbnRzID0gbGluZS5wb2ludHM7XG4gIGNvbnN0IHBvaW50cyA9IFtdO1xuICBsaW5lLnNlZ21lbnRzLmZvckVhY2goKHtzdGFydCwgZW5kfSkgPT4ge1xuICAgIGVuZCA9IGZpbmRTZWdtZW50RW5kKHN0YXJ0LCBlbmQsIGxpbmVQb2ludHMpO1xuICAgIGNvbnN0IGZpcnN0ID0gbGluZVBvaW50c1tzdGFydF07XG4gICAgY29uc3QgbGFzdCA9IGxpbmVQb2ludHNbZW5kXTtcbiAgICBpZiAoeSAhPT0gbnVsbCkge1xuICAgICAgcG9pbnRzLnB1c2goe3g6IGZpcnN0LngsIHl9KTtcbiAgICAgIHBvaW50cy5wdXNoKHt4OiBsYXN0LngsIHl9KTtcbiAgICB9IGVsc2UgaWYgKHggIT09IG51bGwpIHtcbiAgICAgIHBvaW50cy5wdXNoKHt4LCB5OiBmaXJzdC55fSk7XG4gICAgICBwb2ludHMucHVzaCh7eCwgeTogbGFzdC55fSk7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIHBvaW50cztcbn1cbmZ1bmN0aW9uIGJ1aWxkU3RhY2tMaW5lKHNvdXJjZSkge1xuICBjb25zdCB7c2NhbGUsIGluZGV4LCBsaW5lfSA9IHNvdXJjZTtcbiAgY29uc3QgcG9pbnRzID0gW107XG4gIGNvbnN0IHNlZ21lbnRzID0gbGluZS5zZWdtZW50cztcbiAgY29uc3Qgc291cmNlUG9pbnRzID0gbGluZS5wb2ludHM7XG4gIGNvbnN0IGxpbmVzQmVsb3cgPSBnZXRMaW5lc0JlbG93KHNjYWxlLCBpbmRleCk7XG4gIGxpbmVzQmVsb3cucHVzaChjcmVhdGVCb3VuZGFyeUxpbmUoe3g6IG51bGwsIHk6IHNjYWxlLmJvdHRvbX0sIGxpbmUpKTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBzZWdtZW50cy5sZW5ndGg7IGkrKykge1xuICAgIGNvbnN0IHNlZ21lbnQgPSBzZWdtZW50c1tpXTtcbiAgICBmb3IgKGxldCBqID0gc2VnbWVudC5zdGFydDsgaiA8PSBzZWdtZW50LmVuZDsgaisrKSB7XG4gICAgICBhZGRQb2ludHNCZWxvdyhwb2ludHMsIHNvdXJjZVBvaW50c1tqXSwgbGluZXNCZWxvdyk7XG4gICAgfVxuICB9XG4gIHJldHVybiBuZXcgTGluZUVsZW1lbnQoe3BvaW50cywgb3B0aW9uczoge319KTtcbn1cbmZ1bmN0aW9uIGdldExpbmVzQmVsb3coc2NhbGUsIGluZGV4KSB7XG4gIGNvbnN0IGJlbG93ID0gW107XG4gIGNvbnN0IG1ldGFzID0gc2NhbGUuZ2V0TWF0Y2hpbmdWaXNpYmxlTWV0YXMoJ2xpbmUnKTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBtZXRhcy5sZW5ndGg7IGkrKykge1xuICAgIGNvbnN0IG1ldGEgPSBtZXRhc1tpXTtcbiAgICBpZiAobWV0YS5pbmRleCA9PT0gaW5kZXgpIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICBpZiAoIW1ldGEuaGlkZGVuKSB7XG4gICAgICBiZWxvdy51bnNoaWZ0KG1ldGEuZGF0YXNldCk7XG4gICAgfVxuICB9XG4gIHJldHVybiBiZWxvdztcbn1cbmZ1bmN0aW9uIGFkZFBvaW50c0JlbG93KHBvaW50cywgc291cmNlUG9pbnQsIGxpbmVzQmVsb3cpIHtcbiAgY29uc3QgcG9zdHBvbmVkID0gW107XG4gIGZvciAobGV0IGogPSAwOyBqIDwgbGluZXNCZWxvdy5sZW5ndGg7IGorKykge1xuICAgIGNvbnN0IGxpbmUgPSBsaW5lc0JlbG93W2pdO1xuICAgIGNvbnN0IHtmaXJzdCwgbGFzdCwgcG9pbnR9ID0gZmluZFBvaW50KGxpbmUsIHNvdXJjZVBvaW50LCAneCcpO1xuICAgIGlmICghcG9pbnQgfHwgKGZpcnN0ICYmIGxhc3QpKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgaWYgKGZpcnN0KSB7XG4gICAgICBwb3N0cG9uZWQudW5zaGlmdChwb2ludCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHBvaW50cy5wdXNoKHBvaW50KTtcbiAgICAgIGlmICghbGFzdCkge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcG9pbnRzLnB1c2goLi4ucG9zdHBvbmVkKTtcbn1cbmZ1bmN0aW9uIGZpbmRQb2ludChsaW5lLCBzb3VyY2VQb2ludCwgcHJvcGVydHkpIHtcbiAgY29uc3QgcG9pbnQgPSBsaW5lLmludGVycG9sYXRlKHNvdXJjZVBvaW50LCBwcm9wZXJ0eSk7XG4gIGlmICghcG9pbnQpIHtcbiAgICByZXR1cm4ge307XG4gIH1cbiAgY29uc3QgcG9pbnRWYWx1ZSA9IHBvaW50W3Byb3BlcnR5XTtcbiAgY29uc3Qgc2VnbWVudHMgPSBsaW5lLnNlZ21lbnRzO1xuICBjb25zdCBsaW5lUG9pbnRzID0gbGluZS5wb2ludHM7XG4gIGxldCBmaXJzdCA9IGZhbHNlO1xuICBsZXQgbGFzdCA9IGZhbHNlO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IHNlZ21lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgY29uc3Qgc2VnbWVudCA9IHNlZ21lbnRzW2ldO1xuICAgIGNvbnN0IGZpcnN0VmFsdWUgPSBsaW5lUG9pbnRzW3NlZ21lbnQuc3RhcnRdW3Byb3BlcnR5XTtcbiAgICBjb25zdCBsYXN0VmFsdWUgPSBsaW5lUG9pbnRzW3NlZ21lbnQuZW5kXVtwcm9wZXJ0eV07XG4gICAgaWYgKF9pc0JldHdlZW4ocG9pbnRWYWx1ZSwgZmlyc3RWYWx1ZSwgbGFzdFZhbHVlKSkge1xuICAgICAgZmlyc3QgPSBwb2ludFZhbHVlID09PSBmaXJzdFZhbHVlO1xuICAgICAgbGFzdCA9IHBvaW50VmFsdWUgPT09IGxhc3RWYWx1ZTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuICByZXR1cm4ge2ZpcnN0LCBsYXN0LCBwb2ludH07XG59XG5mdW5jdGlvbiBnZXRUYXJnZXQoc291cmNlKSB7XG4gIGNvbnN0IHtjaGFydCwgZmlsbCwgbGluZX0gPSBzb3VyY2U7XG4gIGlmIChpc051bWJlckZpbml0ZShmaWxsKSkge1xuICAgIHJldHVybiBnZXRMaW5lQnlJbmRleChjaGFydCwgZmlsbCk7XG4gIH1cbiAgaWYgKGZpbGwgPT09ICdzdGFjaycpIHtcbiAgICByZXR1cm4gYnVpbGRTdGFja0xpbmUoc291cmNlKTtcbiAgfVxuICBpZiAoZmlsbCA9PT0gJ3NoYXBlJykge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIGNvbnN0IGJvdW5kYXJ5ID0gY29tcHV0ZUJvdW5kYXJ5KHNvdXJjZSk7XG4gIGlmIChib3VuZGFyeSBpbnN0YW5jZW9mIHNpbXBsZUFyYykge1xuICAgIHJldHVybiBib3VuZGFyeTtcbiAgfVxuICByZXR1cm4gY3JlYXRlQm91bmRhcnlMaW5lKGJvdW5kYXJ5LCBsaW5lKTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZUJvdW5kYXJ5TGluZShib3VuZGFyeSwgbGluZSkge1xuICBsZXQgcG9pbnRzID0gW107XG4gIGxldCBfbG9vcCA9IGZhbHNlO1xuICBpZiAoaXNBcnJheShib3VuZGFyeSkpIHtcbiAgICBfbG9vcCA9IHRydWU7XG4gICAgcG9pbnRzID0gYm91bmRhcnk7XG4gIH0gZWxzZSB7XG4gICAgcG9pbnRzID0gcG9pbnRzRnJvbVNlZ21lbnRzKGJvdW5kYXJ5LCBsaW5lKTtcbiAgfVxuICByZXR1cm4gcG9pbnRzLmxlbmd0aCA/IG5ldyBMaW5lRWxlbWVudCh7XG4gICAgcG9pbnRzLFxuICAgIG9wdGlvbnM6IHt0ZW5zaW9uOiAwfSxcbiAgICBfbG9vcCxcbiAgICBfZnVsbExvb3A6IF9sb29wXG4gIH0pIDogbnVsbDtcbn1cbmZ1bmN0aW9uIHJlc29sdmVUYXJnZXQoc291cmNlcywgaW5kZXgsIHByb3BhZ2F0ZSkge1xuICBjb25zdCBzb3VyY2UgPSBzb3VyY2VzW2luZGV4XTtcbiAgbGV0IGZpbGwgPSBzb3VyY2UuZmlsbDtcbiAgY29uc3QgdmlzaXRlZCA9IFtpbmRleF07XG4gIGxldCB0YXJnZXQ7XG4gIGlmICghcHJvcGFnYXRlKSB7XG4gICAgcmV0dXJuIGZpbGw7XG4gIH1cbiAgd2hpbGUgKGZpbGwgIT09IGZhbHNlICYmIHZpc2l0ZWQuaW5kZXhPZihmaWxsKSA9PT0gLTEpIHtcbiAgICBpZiAoIWlzTnVtYmVyRmluaXRlKGZpbGwpKSB7XG4gICAgICByZXR1cm4gZmlsbDtcbiAgICB9XG4gICAgdGFyZ2V0ID0gc291cmNlc1tmaWxsXTtcbiAgICBpZiAoIXRhcmdldCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBpZiAodGFyZ2V0LnZpc2libGUpIHtcbiAgICAgIHJldHVybiBmaWxsO1xuICAgIH1cbiAgICB2aXNpdGVkLnB1c2goZmlsbCk7XG4gICAgZmlsbCA9IHRhcmdldC5maWxsO1xuICB9XG4gIHJldHVybiBmYWxzZTtcbn1cbmZ1bmN0aW9uIF9jbGlwKGN0eCwgdGFyZ2V0LCBjbGlwWSkge1xuICBjb25zdCB7c2VnbWVudHMsIHBvaW50c30gPSB0YXJnZXQ7XG4gIGxldCBmaXJzdCA9IHRydWU7XG4gIGxldCBsaW5lTG9vcCA9IGZhbHNlO1xuICBjdHguYmVnaW5QYXRoKCk7XG4gIGZvciAoY29uc3Qgc2VnbWVudCBvZiBzZWdtZW50cykge1xuICAgIGNvbnN0IHtzdGFydCwgZW5kfSA9IHNlZ21lbnQ7XG4gICAgY29uc3QgZmlyc3RQb2ludCA9IHBvaW50c1tzdGFydF07XG4gICAgY29uc3QgbGFzdFBvaW50ID0gcG9pbnRzW2ZpbmRTZWdtZW50RW5kKHN0YXJ0LCBlbmQsIHBvaW50cyldO1xuICAgIGlmIChmaXJzdCkge1xuICAgICAgY3R4Lm1vdmVUbyhmaXJzdFBvaW50LngsIGZpcnN0UG9pbnQueSk7XG4gICAgICBmaXJzdCA9IGZhbHNlO1xuICAgIH0gZWxzZSB7XG4gICAgICBjdHgubGluZVRvKGZpcnN0UG9pbnQueCwgY2xpcFkpO1xuICAgICAgY3R4LmxpbmVUbyhmaXJzdFBvaW50LngsIGZpcnN0UG9pbnQueSk7XG4gICAgfVxuICAgIGxpbmVMb29wID0gISF0YXJnZXQucGF0aFNlZ21lbnQoY3R4LCBzZWdtZW50LCB7bW92ZTogbGluZUxvb3B9KTtcbiAgICBpZiAobGluZUxvb3ApIHtcbiAgICAgIGN0eC5jbG9zZVBhdGgoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY3R4LmxpbmVUbyhsYXN0UG9pbnQueCwgY2xpcFkpO1xuICAgIH1cbiAgfVxuICBjdHgubGluZVRvKHRhcmdldC5maXJzdCgpLngsIGNsaXBZKTtcbiAgY3R4LmNsb3NlUGF0aCgpO1xuICBjdHguY2xpcCgpO1xufVxuZnVuY3Rpb24gZ2V0Qm91bmRzKHByb3BlcnR5LCBmaXJzdCwgbGFzdCwgbG9vcCkge1xuICBpZiAobG9vcCkge1xuICAgIHJldHVybjtcbiAgfVxuICBsZXQgc3RhcnQgPSBmaXJzdFtwcm9wZXJ0eV07XG4gIGxldCBlbmQgPSBsYXN0W3Byb3BlcnR5XTtcbiAgaWYgKHByb3BlcnR5ID09PSAnYW5nbGUnKSB7XG4gICAgc3RhcnQgPSBfbm9ybWFsaXplQW5nbGUoc3RhcnQpO1xuICAgIGVuZCA9IF9ub3JtYWxpemVBbmdsZShlbmQpO1xuICB9XG4gIHJldHVybiB7cHJvcGVydHksIHN0YXJ0LCBlbmR9O1xufVxuZnVuY3Rpb24gX2dldEVkZ2UoYSwgYiwgcHJvcCwgZm4pIHtcbiAgaWYgKGEgJiYgYikge1xuICAgIHJldHVybiBmbihhW3Byb3BdLCBiW3Byb3BdKTtcbiAgfVxuICByZXR1cm4gYSA/IGFbcHJvcF0gOiBiID8gYltwcm9wXSA6IDA7XG59XG5mdW5jdGlvbiBfc2VnbWVudHMobGluZSwgdGFyZ2V0LCBwcm9wZXJ0eSkge1xuICBjb25zdCBzZWdtZW50cyA9IGxpbmUuc2VnbWVudHM7XG4gIGNvbnN0IHBvaW50cyA9IGxpbmUucG9pbnRzO1xuICBjb25zdCB0cG9pbnRzID0gdGFyZ2V0LnBvaW50cztcbiAgY29uc3QgcGFydHMgPSBbXTtcbiAgZm9yIChjb25zdCBzZWdtZW50IG9mIHNlZ21lbnRzKSB7XG4gICAgbGV0IHtzdGFydCwgZW5kfSA9IHNlZ21lbnQ7XG4gICAgZW5kID0gZmluZFNlZ21lbnRFbmQoc3RhcnQsIGVuZCwgcG9pbnRzKTtcbiAgICBjb25zdCBib3VuZHMgPSBnZXRCb3VuZHMocHJvcGVydHksIHBvaW50c1tzdGFydF0sIHBvaW50c1tlbmRdLCBzZWdtZW50Lmxvb3ApO1xuICAgIGlmICghdGFyZ2V0LnNlZ21lbnRzKSB7XG4gICAgICBwYXJ0cy5wdXNoKHtcbiAgICAgICAgc291cmNlOiBzZWdtZW50LFxuICAgICAgICB0YXJnZXQ6IGJvdW5kcyxcbiAgICAgICAgc3RhcnQ6IHBvaW50c1tzdGFydF0sXG4gICAgICAgIGVuZDogcG9pbnRzW2VuZF1cbiAgICAgIH0pO1xuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIGNvbnN0IHRhcmdldFNlZ21lbnRzID0gX2JvdW5kU2VnbWVudHModGFyZ2V0LCBib3VuZHMpO1xuICAgIGZvciAoY29uc3QgdGd0IG9mIHRhcmdldFNlZ21lbnRzKSB7XG4gICAgICBjb25zdCBzdWJCb3VuZHMgPSBnZXRCb3VuZHMocHJvcGVydHksIHRwb2ludHNbdGd0LnN0YXJ0XSwgdHBvaW50c1t0Z3QuZW5kXSwgdGd0Lmxvb3ApO1xuICAgICAgY29uc3QgZmlsbFNvdXJjZXMgPSBfYm91bmRTZWdtZW50KHNlZ21lbnQsIHBvaW50cywgc3ViQm91bmRzKTtcbiAgICAgIGZvciAoY29uc3QgZmlsbFNvdXJjZSBvZiBmaWxsU291cmNlcykge1xuICAgICAgICBwYXJ0cy5wdXNoKHtcbiAgICAgICAgICBzb3VyY2U6IGZpbGxTb3VyY2UsXG4gICAgICAgICAgdGFyZ2V0OiB0Z3QsXG4gICAgICAgICAgc3RhcnQ6IHtcbiAgICAgICAgICAgIFtwcm9wZXJ0eV06IF9nZXRFZGdlKGJvdW5kcywgc3ViQm91bmRzLCAnc3RhcnQnLCBNYXRoLm1heClcbiAgICAgICAgICB9LFxuICAgICAgICAgIGVuZDoge1xuICAgICAgICAgICAgW3Byb3BlcnR5XTogX2dldEVkZ2UoYm91bmRzLCBzdWJCb3VuZHMsICdlbmQnLCBNYXRoLm1pbilcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gcGFydHM7XG59XG5mdW5jdGlvbiBjbGlwQm91bmRzKGN0eCwgc2NhbGUsIGJvdW5kcykge1xuICBjb25zdCB7dG9wLCBib3R0b219ID0gc2NhbGUuY2hhcnQuY2hhcnRBcmVhO1xuICBjb25zdCB7cHJvcGVydHksIHN0YXJ0LCBlbmR9ID0gYm91bmRzIHx8IHt9O1xuICBpZiAocHJvcGVydHkgPT09ICd4Jykge1xuICAgIGN0eC5iZWdpblBhdGgoKTtcbiAgICBjdHgucmVjdChzdGFydCwgdG9wLCBlbmQgLSBzdGFydCwgYm90dG9tIC0gdG9wKTtcbiAgICBjdHguY2xpcCgpO1xuICB9XG59XG5mdW5jdGlvbiBpbnRlcnBvbGF0ZWRMaW5lVG8oY3R4LCB0YXJnZXQsIHBvaW50LCBwcm9wZXJ0eSkge1xuICBjb25zdCBpbnRlcnBvbGF0ZWRQb2ludCA9IHRhcmdldC5pbnRlcnBvbGF0ZShwb2ludCwgcHJvcGVydHkpO1xuICBpZiAoaW50ZXJwb2xhdGVkUG9pbnQpIHtcbiAgICBjdHgubGluZVRvKGludGVycG9sYXRlZFBvaW50LngsIGludGVycG9sYXRlZFBvaW50LnkpO1xuICB9XG59XG5mdW5jdGlvbiBfZmlsbChjdHgsIGNmZykge1xuICBjb25zdCB7bGluZSwgdGFyZ2V0LCBwcm9wZXJ0eSwgY29sb3IsIHNjYWxlfSA9IGNmZztcbiAgY29uc3Qgc2VnbWVudHMgPSBfc2VnbWVudHMobGluZSwgdGFyZ2V0LCBwcm9wZXJ0eSk7XG4gIGZvciAoY29uc3Qge3NvdXJjZTogc3JjLCB0YXJnZXQ6IHRndCwgc3RhcnQsIGVuZH0gb2Ygc2VnbWVudHMpIHtcbiAgICBjb25zdCB7c3R5bGU6IHtiYWNrZ3JvdW5kQ29sb3IgPSBjb2xvcn0gPSB7fX0gPSBzcmM7XG4gICAgY29uc3Qgbm90U2hhcGUgPSB0YXJnZXQgIT09IHRydWU7XG4gICAgY3R4LnNhdmUoKTtcbiAgICBjdHguZmlsbFN0eWxlID0gYmFja2dyb3VuZENvbG9yO1xuICAgIGNsaXBCb3VuZHMoY3R4LCBzY2FsZSwgbm90U2hhcGUgJiYgZ2V0Qm91bmRzKHByb3BlcnR5LCBzdGFydCwgZW5kKSk7XG4gICAgY3R4LmJlZ2luUGF0aCgpO1xuICAgIGNvbnN0IGxpbmVMb29wID0gISFsaW5lLnBhdGhTZWdtZW50KGN0eCwgc3JjKTtcbiAgICBsZXQgbG9vcDtcbiAgICBpZiAobm90U2hhcGUpIHtcbiAgICAgIGlmIChsaW5lTG9vcCkge1xuICAgICAgICBjdHguY2xvc2VQYXRoKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpbnRlcnBvbGF0ZWRMaW5lVG8oY3R4LCB0YXJnZXQsIGVuZCwgcHJvcGVydHkpO1xuICAgICAgfVxuICAgICAgY29uc3QgdGFyZ2V0TG9vcCA9ICEhdGFyZ2V0LnBhdGhTZWdtZW50KGN0eCwgdGd0LCB7bW92ZTogbGluZUxvb3AsIHJldmVyc2U6IHRydWV9KTtcbiAgICAgIGxvb3AgPSBsaW5lTG9vcCAmJiB0YXJnZXRMb29wO1xuICAgICAgaWYgKCFsb29wKSB7XG4gICAgICAgIGludGVycG9sYXRlZExpbmVUbyhjdHgsIHRhcmdldCwgc3RhcnQsIHByb3BlcnR5KTtcbiAgICAgIH1cbiAgICB9XG4gICAgY3R4LmNsb3NlUGF0aCgpO1xuICAgIGN0eC5maWxsKGxvb3AgPyAnZXZlbm9kZCcgOiAnbm9uemVybycpO1xuICAgIGN0eC5yZXN0b3JlKCk7XG4gIH1cbn1cbmZ1bmN0aW9uIGRvRmlsbChjdHgsIGNmZykge1xuICBjb25zdCB7bGluZSwgdGFyZ2V0LCBhYm92ZSwgYmVsb3csIGFyZWEsIHNjYWxlfSA9IGNmZztcbiAgY29uc3QgcHJvcGVydHkgPSBsaW5lLl9sb29wID8gJ2FuZ2xlJyA6IGNmZy5heGlzO1xuICBjdHguc2F2ZSgpO1xuICBpZiAocHJvcGVydHkgPT09ICd4JyAmJiBiZWxvdyAhPT0gYWJvdmUpIHtcbiAgICBfY2xpcChjdHgsIHRhcmdldCwgYXJlYS50b3ApO1xuICAgIF9maWxsKGN0eCwge2xpbmUsIHRhcmdldCwgY29sb3I6IGFib3ZlLCBzY2FsZSwgcHJvcGVydHl9KTtcbiAgICBjdHgucmVzdG9yZSgpO1xuICAgIGN0eC5zYXZlKCk7XG4gICAgX2NsaXAoY3R4LCB0YXJnZXQsIGFyZWEuYm90dG9tKTtcbiAgfVxuICBfZmlsbChjdHgsIHtsaW5lLCB0YXJnZXQsIGNvbG9yOiBiZWxvdywgc2NhbGUsIHByb3BlcnR5fSk7XG4gIGN0eC5yZXN0b3JlKCk7XG59XG5mdW5jdGlvbiBkcmF3ZmlsbChjdHgsIHNvdXJjZSwgYXJlYSkge1xuICBjb25zdCB0YXJnZXQgPSBnZXRUYXJnZXQoc291cmNlKTtcbiAgY29uc3Qge2xpbmUsIHNjYWxlLCBheGlzfSA9IHNvdXJjZTtcbiAgY29uc3QgbGluZU9wdHMgPSBsaW5lLm9wdGlvbnM7XG4gIGNvbnN0IGZpbGxPcHRpb24gPSBsaW5lT3B0cy5maWxsO1xuICBjb25zdCBjb2xvciA9IGxpbmVPcHRzLmJhY2tncm91bmRDb2xvcjtcbiAgY29uc3Qge2Fib3ZlID0gY29sb3IsIGJlbG93ID0gY29sb3J9ID0gZmlsbE9wdGlvbiB8fCB7fTtcbiAgaWYgKHRhcmdldCAmJiBsaW5lLnBvaW50cy5sZW5ndGgpIHtcbiAgICBjbGlwQXJlYShjdHgsIGFyZWEpO1xuICAgIGRvRmlsbChjdHgsIHtsaW5lLCB0YXJnZXQsIGFib3ZlLCBiZWxvdywgYXJlYSwgc2NhbGUsIGF4aXN9KTtcbiAgICB1bmNsaXBBcmVhKGN0eCk7XG4gIH1cbn1cbnZhciBwbHVnaW5fZmlsbGVyID0ge1xuICBpZDogJ2ZpbGxlcicsXG4gIGFmdGVyRGF0YXNldHNVcGRhdGUoY2hhcnQsIF9hcmdzLCBvcHRpb25zKSB7XG4gICAgY29uc3QgY291bnQgPSAoY2hhcnQuZGF0YS5kYXRhc2V0cyB8fCBbXSkubGVuZ3RoO1xuICAgIGNvbnN0IHNvdXJjZXMgPSBbXTtcbiAgICBsZXQgbWV0YSwgaSwgbGluZSwgc291cmNlO1xuICAgIGZvciAoaSA9IDA7IGkgPCBjb3VudDsgKytpKSB7XG4gICAgICBtZXRhID0gY2hhcnQuZ2V0RGF0YXNldE1ldGEoaSk7XG4gICAgICBsaW5lID0gbWV0YS5kYXRhc2V0O1xuICAgICAgc291cmNlID0gbnVsbDtcbiAgICAgIGlmIChsaW5lICYmIGxpbmUub3B0aW9ucyAmJiBsaW5lIGluc3RhbmNlb2YgTGluZUVsZW1lbnQpIHtcbiAgICAgICAgc291cmNlID0ge1xuICAgICAgICAgIHZpc2libGU6IGNoYXJ0LmlzRGF0YXNldFZpc2libGUoaSksXG4gICAgICAgICAgaW5kZXg6IGksXG4gICAgICAgICAgZmlsbDogZGVjb2RlRmlsbChsaW5lLCBpLCBjb3VudCksXG4gICAgICAgICAgY2hhcnQsXG4gICAgICAgICAgYXhpczogbWV0YS5jb250cm9sbGVyLm9wdGlvbnMuaW5kZXhBeGlzLFxuICAgICAgICAgIHNjYWxlOiBtZXRhLnZTY2FsZSxcbiAgICAgICAgICBsaW5lLFxuICAgICAgICB9O1xuICAgICAgfVxuICAgICAgbWV0YS4kZmlsbGVyID0gc291cmNlO1xuICAgICAgc291cmNlcy5wdXNoKHNvdXJjZSk7XG4gICAgfVxuICAgIGZvciAoaSA9IDA7IGkgPCBjb3VudDsgKytpKSB7XG4gICAgICBzb3VyY2UgPSBzb3VyY2VzW2ldO1xuICAgICAgaWYgKCFzb3VyY2UgfHwgc291cmNlLmZpbGwgPT09IGZhbHNlKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgc291cmNlLmZpbGwgPSByZXNvbHZlVGFyZ2V0KHNvdXJjZXMsIGksIG9wdGlvbnMucHJvcGFnYXRlKTtcbiAgICB9XG4gIH0sXG4gIGJlZm9yZURyYXcoY2hhcnQsIF9hcmdzLCBvcHRpb25zKSB7XG4gICAgY29uc3QgZHJhdyA9IG9wdGlvbnMuZHJhd1RpbWUgPT09ICdiZWZvcmVEcmF3JztcbiAgICBjb25zdCBtZXRhc2V0cyA9IGNoYXJ0LmdldFNvcnRlZFZpc2libGVEYXRhc2V0TWV0YXMoKTtcbiAgICBjb25zdCBhcmVhID0gY2hhcnQuY2hhcnRBcmVhO1xuICAgIGZvciAobGV0IGkgPSBtZXRhc2V0cy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgY29uc3Qgc291cmNlID0gbWV0YXNldHNbaV0uJGZpbGxlcjtcbiAgICAgIGlmICghc291cmNlKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgc291cmNlLmxpbmUudXBkYXRlQ29udHJvbFBvaW50cyhhcmVhLCBzb3VyY2UuYXhpcyk7XG4gICAgICBpZiAoZHJhdykge1xuICAgICAgICBkcmF3ZmlsbChjaGFydC5jdHgsIHNvdXJjZSwgYXJlYSk7XG4gICAgICB9XG4gICAgfVxuICB9LFxuICBiZWZvcmVEYXRhc2V0c0RyYXcoY2hhcnQsIF9hcmdzLCBvcHRpb25zKSB7XG4gICAgaWYgKG9wdGlvbnMuZHJhd1RpbWUgIT09ICdiZWZvcmVEYXRhc2V0c0RyYXcnKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IG1ldGFzZXRzID0gY2hhcnQuZ2V0U29ydGVkVmlzaWJsZURhdGFzZXRNZXRhcygpO1xuICAgIGZvciAobGV0IGkgPSBtZXRhc2V0cy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgY29uc3Qgc291cmNlID0gbWV0YXNldHNbaV0uJGZpbGxlcjtcbiAgICAgIGlmIChzb3VyY2UpIHtcbiAgICAgICAgZHJhd2ZpbGwoY2hhcnQuY3R4LCBzb3VyY2UsIGNoYXJ0LmNoYXJ0QXJlYSk7XG4gICAgICB9XG4gICAgfVxuICB9LFxuICBiZWZvcmVEYXRhc2V0RHJhdyhjaGFydCwgYXJncywgb3B0aW9ucykge1xuICAgIGNvbnN0IHNvdXJjZSA9IGFyZ3MubWV0YS4kZmlsbGVyO1xuICAgIGlmICghc291cmNlIHx8IHNvdXJjZS5maWxsID09PSBmYWxzZSB8fCBvcHRpb25zLmRyYXdUaW1lICE9PSAnYmVmb3JlRGF0YXNldERyYXcnKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGRyYXdmaWxsKGNoYXJ0LmN0eCwgc291cmNlLCBjaGFydC5jaGFydEFyZWEpO1xuICB9LFxuICBkZWZhdWx0czoge1xuICAgIHByb3BhZ2F0ZTogdHJ1ZSxcbiAgICBkcmF3VGltZTogJ2JlZm9yZURhdGFzZXREcmF3J1xuICB9XG59O1xuXG5jb25zdCBnZXRCb3hTaXplID0gKGxhYmVsT3B0cywgZm9udFNpemUpID0+IHtcbiAgbGV0IHtib3hIZWlnaHQgPSBmb250U2l6ZSwgYm94V2lkdGggPSBmb250U2l6ZX0gPSBsYWJlbE9wdHM7XG4gIGlmIChsYWJlbE9wdHMudXNlUG9pbnRTdHlsZSkge1xuICAgIGJveEhlaWdodCA9IE1hdGgubWluKGJveEhlaWdodCwgZm9udFNpemUpO1xuICAgIGJveFdpZHRoID0gTWF0aC5taW4oYm94V2lkdGgsIGZvbnRTaXplKTtcbiAgfVxuICByZXR1cm4ge1xuICAgIGJveFdpZHRoLFxuICAgIGJveEhlaWdodCxcbiAgICBpdGVtSGVpZ2h0OiBNYXRoLm1heChmb250U2l6ZSwgYm94SGVpZ2h0KVxuICB9O1xufTtcbmNvbnN0IGl0ZW1zRXF1YWwgPSAoYSwgYikgPT4gYSAhPT0gbnVsbCAmJiBiICE9PSBudWxsICYmIGEuZGF0YXNldEluZGV4ID09PSBiLmRhdGFzZXRJbmRleCAmJiBhLmluZGV4ID09PSBiLmluZGV4O1xuY2xhc3MgTGVnZW5kIGV4dGVuZHMgRWxlbWVudCB7XG4gIGNvbnN0cnVjdG9yKGNvbmZpZykge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5fYWRkZWQgPSBmYWxzZTtcbiAgICB0aGlzLmxlZ2VuZEhpdEJveGVzID0gW107XG4gICAgdGhpcy5faG92ZXJlZEl0ZW0gPSBudWxsO1xuICAgIHRoaXMuZG91Z2hudXRNb2RlID0gZmFsc2U7XG4gICAgdGhpcy5jaGFydCA9IGNvbmZpZy5jaGFydDtcbiAgICB0aGlzLm9wdGlvbnMgPSBjb25maWcub3B0aW9ucztcbiAgICB0aGlzLmN0eCA9IGNvbmZpZy5jdHg7XG4gICAgdGhpcy5sZWdlbmRJdGVtcyA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLmNvbHVtblNpemVzID0gdW5kZWZpbmVkO1xuICAgIHRoaXMubGluZVdpZHRocyA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLm1heEhlaWdodCA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLm1heFdpZHRoID0gdW5kZWZpbmVkO1xuICAgIHRoaXMudG9wID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuYm90dG9tID0gdW5kZWZpbmVkO1xuICAgIHRoaXMubGVmdCA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLnJpZ2h0ID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuaGVpZ2h0ID0gdW5kZWZpbmVkO1xuICAgIHRoaXMud2lkdGggPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5fbWFyZ2lucyA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLnBvc2l0aW9uID0gdW5kZWZpbmVkO1xuICAgIHRoaXMud2VpZ2h0ID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuZnVsbFNpemUgPSB1bmRlZmluZWQ7XG4gIH1cbiAgdXBkYXRlKG1heFdpZHRoLCBtYXhIZWlnaHQsIG1hcmdpbnMpIHtcbiAgICB0aGlzLm1heFdpZHRoID0gbWF4V2lkdGg7XG4gICAgdGhpcy5tYXhIZWlnaHQgPSBtYXhIZWlnaHQ7XG4gICAgdGhpcy5fbWFyZ2lucyA9IG1hcmdpbnM7XG4gICAgdGhpcy5zZXREaW1lbnNpb25zKCk7XG4gICAgdGhpcy5idWlsZExhYmVscygpO1xuICAgIHRoaXMuZml0KCk7XG4gIH1cbiAgc2V0RGltZW5zaW9ucygpIHtcbiAgICBpZiAodGhpcy5pc0hvcml6b250YWwoKSkge1xuICAgICAgdGhpcy53aWR0aCA9IHRoaXMubWF4V2lkdGg7XG4gICAgICB0aGlzLmxlZnQgPSB0aGlzLl9tYXJnaW5zLmxlZnQ7XG4gICAgICB0aGlzLnJpZ2h0ID0gdGhpcy53aWR0aDtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5oZWlnaHQgPSB0aGlzLm1heEhlaWdodDtcbiAgICAgIHRoaXMudG9wID0gdGhpcy5fbWFyZ2lucy50b3A7XG4gICAgICB0aGlzLmJvdHRvbSA9IHRoaXMuaGVpZ2h0O1xuICAgIH1cbiAgfVxuICBidWlsZExhYmVscygpIHtcbiAgICBjb25zdCBsYWJlbE9wdHMgPSB0aGlzLm9wdGlvbnMubGFiZWxzIHx8IHt9O1xuICAgIGxldCBsZWdlbmRJdGVtcyA9IGNhbGxiYWNrKGxhYmVsT3B0cy5nZW5lcmF0ZUxhYmVscywgW3RoaXMuY2hhcnRdLCB0aGlzKSB8fCBbXTtcbiAgICBpZiAobGFiZWxPcHRzLmZpbHRlcikge1xuICAgICAgbGVnZW5kSXRlbXMgPSBsZWdlbmRJdGVtcy5maWx0ZXIoKGl0ZW0pID0+IGxhYmVsT3B0cy5maWx0ZXIoaXRlbSwgdGhpcy5jaGFydC5kYXRhKSk7XG4gICAgfVxuICAgIGlmIChsYWJlbE9wdHMuc29ydCkge1xuICAgICAgbGVnZW5kSXRlbXMgPSBsZWdlbmRJdGVtcy5zb3J0KChhLCBiKSA9PiBsYWJlbE9wdHMuc29ydChhLCBiLCB0aGlzLmNoYXJ0LmRhdGEpKTtcbiAgICB9XG4gICAgaWYgKHRoaXMub3B0aW9ucy5yZXZlcnNlKSB7XG4gICAgICBsZWdlbmRJdGVtcy5yZXZlcnNlKCk7XG4gICAgfVxuICAgIHRoaXMubGVnZW5kSXRlbXMgPSBsZWdlbmRJdGVtcztcbiAgfVxuICBmaXQoKSB7XG4gICAgY29uc3Qge29wdGlvbnMsIGN0eH0gPSB0aGlzO1xuICAgIGlmICghb3B0aW9ucy5kaXNwbGF5KSB7XG4gICAgICB0aGlzLndpZHRoID0gdGhpcy5oZWlnaHQgPSAwO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBsYWJlbE9wdHMgPSBvcHRpb25zLmxhYmVscztcbiAgICBjb25zdCBsYWJlbEZvbnQgPSB0b0ZvbnQobGFiZWxPcHRzLmZvbnQpO1xuICAgIGNvbnN0IGZvbnRTaXplID0gbGFiZWxGb250LnNpemU7XG4gICAgY29uc3QgdGl0bGVIZWlnaHQgPSB0aGlzLl9jb21wdXRlVGl0bGVIZWlnaHQoKTtcbiAgICBjb25zdCB7Ym94V2lkdGgsIGl0ZW1IZWlnaHR9ID0gZ2V0Qm94U2l6ZShsYWJlbE9wdHMsIGZvbnRTaXplKTtcbiAgICBsZXQgd2lkdGgsIGhlaWdodDtcbiAgICBjdHguZm9udCA9IGxhYmVsRm9udC5zdHJpbmc7XG4gICAgaWYgKHRoaXMuaXNIb3Jpem9udGFsKCkpIHtcbiAgICAgIHdpZHRoID0gdGhpcy5tYXhXaWR0aDtcbiAgICAgIGhlaWdodCA9IHRoaXMuX2ZpdFJvd3ModGl0bGVIZWlnaHQsIGZvbnRTaXplLCBib3hXaWR0aCwgaXRlbUhlaWdodCkgKyAxMDtcbiAgICB9IGVsc2Uge1xuICAgICAgaGVpZ2h0ID0gdGhpcy5tYXhIZWlnaHQ7XG4gICAgICB3aWR0aCA9IHRoaXMuX2ZpdENvbHModGl0bGVIZWlnaHQsIGZvbnRTaXplLCBib3hXaWR0aCwgaXRlbUhlaWdodCkgKyAxMDtcbiAgICB9XG4gICAgdGhpcy53aWR0aCA9IE1hdGgubWluKHdpZHRoLCBvcHRpb25zLm1heFdpZHRoIHx8IHRoaXMubWF4V2lkdGgpO1xuICAgIHRoaXMuaGVpZ2h0ID0gTWF0aC5taW4oaGVpZ2h0LCBvcHRpb25zLm1heEhlaWdodCB8fCB0aGlzLm1heEhlaWdodCk7XG4gIH1cbiAgX2ZpdFJvd3ModGl0bGVIZWlnaHQsIGZvbnRTaXplLCBib3hXaWR0aCwgaXRlbUhlaWdodCkge1xuICAgIGNvbnN0IHtjdHgsIG1heFdpZHRoLCBvcHRpb25zOiB7bGFiZWxzOiB7cGFkZGluZ319fSA9IHRoaXM7XG4gICAgY29uc3QgaGl0Ym94ZXMgPSB0aGlzLmxlZ2VuZEhpdEJveGVzID0gW107XG4gICAgY29uc3QgbGluZVdpZHRocyA9IHRoaXMubGluZVdpZHRocyA9IFswXTtcbiAgICBjb25zdCBsaW5lSGVpZ2h0ID0gaXRlbUhlaWdodCArIHBhZGRpbmc7XG4gICAgbGV0IHRvdGFsSGVpZ2h0ID0gdGl0bGVIZWlnaHQ7XG4gICAgY3R4LnRleHRBbGlnbiA9ICdsZWZ0JztcbiAgICBjdHgudGV4dEJhc2VsaW5lID0gJ21pZGRsZSc7XG4gICAgbGV0IHJvdyA9IC0xO1xuICAgIGxldCB0b3AgPSAtbGluZUhlaWdodDtcbiAgICB0aGlzLmxlZ2VuZEl0ZW1zLmZvckVhY2goKGxlZ2VuZEl0ZW0sIGkpID0+IHtcbiAgICAgIGNvbnN0IGl0ZW1XaWR0aCA9IGJveFdpZHRoICsgKGZvbnRTaXplIC8gMikgKyBjdHgubWVhc3VyZVRleHQobGVnZW5kSXRlbS50ZXh0KS53aWR0aDtcbiAgICAgIGlmIChpID09PSAwIHx8IGxpbmVXaWR0aHNbbGluZVdpZHRocy5sZW5ndGggLSAxXSArIGl0ZW1XaWR0aCArIDIgKiBwYWRkaW5nID4gbWF4V2lkdGgpIHtcbiAgICAgICAgdG90YWxIZWlnaHQgKz0gbGluZUhlaWdodDtcbiAgICAgICAgbGluZVdpZHRoc1tsaW5lV2lkdGhzLmxlbmd0aCAtIChpID4gMCA/IDAgOiAxKV0gPSAwO1xuICAgICAgICB0b3AgKz0gbGluZUhlaWdodDtcbiAgICAgICAgcm93Kys7XG4gICAgICB9XG4gICAgICBoaXRib3hlc1tpXSA9IHtsZWZ0OiAwLCB0b3AsIHJvdywgd2lkdGg6IGl0ZW1XaWR0aCwgaGVpZ2h0OiBpdGVtSGVpZ2h0fTtcbiAgICAgIGxpbmVXaWR0aHNbbGluZVdpZHRocy5sZW5ndGggLSAxXSArPSBpdGVtV2lkdGggKyBwYWRkaW5nO1xuICAgIH0pO1xuICAgIHJldHVybiB0b3RhbEhlaWdodDtcbiAgfVxuICBfZml0Q29scyh0aXRsZUhlaWdodCwgZm9udFNpemUsIGJveFdpZHRoLCBpdGVtSGVpZ2h0KSB7XG4gICAgY29uc3Qge2N0eCwgbWF4SGVpZ2h0LCBvcHRpb25zOiB7bGFiZWxzOiB7cGFkZGluZ319fSA9IHRoaXM7XG4gICAgY29uc3QgaGl0Ym94ZXMgPSB0aGlzLmxlZ2VuZEhpdEJveGVzID0gW107XG4gICAgY29uc3QgY29sdW1uU2l6ZXMgPSB0aGlzLmNvbHVtblNpemVzID0gW107XG4gICAgY29uc3QgaGVpZ2h0TGltaXQgPSBtYXhIZWlnaHQgLSB0aXRsZUhlaWdodDtcbiAgICBsZXQgdG90YWxXaWR0aCA9IHBhZGRpbmc7XG4gICAgbGV0IGN1cnJlbnRDb2xXaWR0aCA9IDA7XG4gICAgbGV0IGN1cnJlbnRDb2xIZWlnaHQgPSAwO1xuICAgIGxldCBsZWZ0ID0gMDtcbiAgICBsZXQgY29sID0gMDtcbiAgICB0aGlzLmxlZ2VuZEl0ZW1zLmZvckVhY2goKGxlZ2VuZEl0ZW0sIGkpID0+IHtcbiAgICAgIGNvbnN0IGl0ZW1XaWR0aCA9IGJveFdpZHRoICsgKGZvbnRTaXplIC8gMikgKyBjdHgubWVhc3VyZVRleHQobGVnZW5kSXRlbS50ZXh0KS53aWR0aDtcbiAgICAgIGlmIChpID4gMCAmJiBjdXJyZW50Q29sSGVpZ2h0ICsgaXRlbUhlaWdodCArIDIgKiBwYWRkaW5nID4gaGVpZ2h0TGltaXQpIHtcbiAgICAgICAgdG90YWxXaWR0aCArPSBjdXJyZW50Q29sV2lkdGggKyBwYWRkaW5nO1xuICAgICAgICBjb2x1bW5TaXplcy5wdXNoKHt3aWR0aDogY3VycmVudENvbFdpZHRoLCBoZWlnaHQ6IGN1cnJlbnRDb2xIZWlnaHR9KTtcbiAgICAgICAgbGVmdCArPSBjdXJyZW50Q29sV2lkdGggKyBwYWRkaW5nO1xuICAgICAgICBjb2wrKztcbiAgICAgICAgY3VycmVudENvbFdpZHRoID0gY3VycmVudENvbEhlaWdodCA9IDA7XG4gICAgICB9XG4gICAgICBoaXRib3hlc1tpXSA9IHtsZWZ0LCB0b3A6IGN1cnJlbnRDb2xIZWlnaHQsIGNvbCwgd2lkdGg6IGl0ZW1XaWR0aCwgaGVpZ2h0OiBpdGVtSGVpZ2h0fTtcbiAgICAgIGN1cnJlbnRDb2xXaWR0aCA9IE1hdGgubWF4KGN1cnJlbnRDb2xXaWR0aCwgaXRlbVdpZHRoKTtcbiAgICAgIGN1cnJlbnRDb2xIZWlnaHQgKz0gaXRlbUhlaWdodCArIHBhZGRpbmc7XG4gICAgfSk7XG4gICAgdG90YWxXaWR0aCArPSBjdXJyZW50Q29sV2lkdGg7XG4gICAgY29sdW1uU2l6ZXMucHVzaCh7d2lkdGg6IGN1cnJlbnRDb2xXaWR0aCwgaGVpZ2h0OiBjdXJyZW50Q29sSGVpZ2h0fSk7XG4gICAgcmV0dXJuIHRvdGFsV2lkdGg7XG4gIH1cbiAgYWRqdXN0SGl0Qm94ZXMoKSB7XG4gICAgaWYgKCF0aGlzLm9wdGlvbnMuZGlzcGxheSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCB0aXRsZUhlaWdodCA9IHRoaXMuX2NvbXB1dGVUaXRsZUhlaWdodCgpO1xuICAgIGNvbnN0IHtsZWdlbmRIaXRCb3hlczogaGl0Ym94ZXMsIG9wdGlvbnM6IHthbGlnbiwgbGFiZWxzOiB7cGFkZGluZ30sIHJ0bH19ID0gdGhpcztcbiAgICBjb25zdCBydGxIZWxwZXIgPSBnZXRSdGxBZGFwdGVyKHJ0bCwgdGhpcy5sZWZ0LCB0aGlzLndpZHRoKTtcbiAgICBpZiAodGhpcy5pc0hvcml6b250YWwoKSkge1xuICAgICAgbGV0IHJvdyA9IDA7XG4gICAgICBsZXQgbGVmdCA9IF9hbGlnblN0YXJ0RW5kKGFsaWduLCB0aGlzLmxlZnQgKyBwYWRkaW5nLCB0aGlzLnJpZ2h0IC0gdGhpcy5saW5lV2lkdGhzW3Jvd10pO1xuICAgICAgZm9yIChjb25zdCBoaXRib3ggb2YgaGl0Ym94ZXMpIHtcbiAgICAgICAgaWYgKHJvdyAhPT0gaGl0Ym94LnJvdykge1xuICAgICAgICAgIHJvdyA9IGhpdGJveC5yb3c7XG4gICAgICAgICAgbGVmdCA9IF9hbGlnblN0YXJ0RW5kKGFsaWduLCB0aGlzLmxlZnQgKyBwYWRkaW5nLCB0aGlzLnJpZ2h0IC0gdGhpcy5saW5lV2lkdGhzW3Jvd10pO1xuICAgICAgICB9XG4gICAgICAgIGhpdGJveC50b3AgKz0gdGhpcy50b3AgKyB0aXRsZUhlaWdodCArIHBhZGRpbmc7XG4gICAgICAgIGhpdGJveC5sZWZ0ID0gcnRsSGVscGVyLmxlZnRGb3JMdHIocnRsSGVscGVyLngobGVmdCksIGhpdGJveC53aWR0aCk7XG4gICAgICAgIGxlZnQgKz0gaGl0Ym94LndpZHRoICsgcGFkZGluZztcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgbGV0IGNvbCA9IDA7XG4gICAgICBsZXQgdG9wID0gX2FsaWduU3RhcnRFbmQoYWxpZ24sIHRoaXMudG9wICsgdGl0bGVIZWlnaHQgKyBwYWRkaW5nLCB0aGlzLmJvdHRvbSAtIHRoaXMuY29sdW1uU2l6ZXNbY29sXS5oZWlnaHQpO1xuICAgICAgZm9yIChjb25zdCBoaXRib3ggb2YgaGl0Ym94ZXMpIHtcbiAgICAgICAgaWYgKGhpdGJveC5jb2wgIT09IGNvbCkge1xuICAgICAgICAgIGNvbCA9IGhpdGJveC5jb2w7XG4gICAgICAgICAgdG9wID0gX2FsaWduU3RhcnRFbmQoYWxpZ24sIHRoaXMudG9wICsgdGl0bGVIZWlnaHQgKyBwYWRkaW5nLCB0aGlzLmJvdHRvbSAtIHRoaXMuY29sdW1uU2l6ZXNbY29sXS5oZWlnaHQpO1xuICAgICAgICB9XG4gICAgICAgIGhpdGJveC50b3AgPSB0b3A7XG4gICAgICAgIGhpdGJveC5sZWZ0ICs9IHRoaXMubGVmdCArIHBhZGRpbmc7XG4gICAgICAgIGhpdGJveC5sZWZ0ID0gcnRsSGVscGVyLmxlZnRGb3JMdHIocnRsSGVscGVyLngoaGl0Ym94LmxlZnQpLCBoaXRib3gud2lkdGgpO1xuICAgICAgICB0b3AgKz0gaGl0Ym94LmhlaWdodCArIHBhZGRpbmc7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGlzSG9yaXpvbnRhbCgpIHtcbiAgICByZXR1cm4gdGhpcy5vcHRpb25zLnBvc2l0aW9uID09PSAndG9wJyB8fCB0aGlzLm9wdGlvbnMucG9zaXRpb24gPT09ICdib3R0b20nO1xuICB9XG4gIGRyYXcoKSB7XG4gICAgaWYgKHRoaXMub3B0aW9ucy5kaXNwbGF5KSB7XG4gICAgICBjb25zdCBjdHggPSB0aGlzLmN0eDtcbiAgICAgIGNsaXBBcmVhKGN0eCwgdGhpcyk7XG4gICAgICB0aGlzLl9kcmF3KCk7XG4gICAgICB1bmNsaXBBcmVhKGN0eCk7XG4gICAgfVxuICB9XG4gIF9kcmF3KCkge1xuICAgIGNvbnN0IHtvcHRpb25zOiBvcHRzLCBjb2x1bW5TaXplcywgbGluZVdpZHRocywgY3R4fSA9IHRoaXM7XG4gICAgY29uc3Qge2FsaWduLCBsYWJlbHM6IGxhYmVsT3B0c30gPSBvcHRzO1xuICAgIGNvbnN0IGRlZmF1bHRDb2xvciA9IGRlZmF1bHRzLmNvbG9yO1xuICAgIGNvbnN0IHJ0bEhlbHBlciA9IGdldFJ0bEFkYXB0ZXIob3B0cy5ydGwsIHRoaXMubGVmdCwgdGhpcy53aWR0aCk7XG4gICAgY29uc3QgbGFiZWxGb250ID0gdG9Gb250KGxhYmVsT3B0cy5mb250KTtcbiAgICBjb25zdCB7Y29sb3I6IGZvbnRDb2xvciwgcGFkZGluZ30gPSBsYWJlbE9wdHM7XG4gICAgY29uc3QgZm9udFNpemUgPSBsYWJlbEZvbnQuc2l6ZTtcbiAgICBjb25zdCBoYWxmRm9udFNpemUgPSBmb250U2l6ZSAvIDI7XG4gICAgbGV0IGN1cnNvcjtcbiAgICB0aGlzLmRyYXdUaXRsZSgpO1xuICAgIGN0eC50ZXh0QWxpZ24gPSBydGxIZWxwZXIudGV4dEFsaWduKCdsZWZ0Jyk7XG4gICAgY3R4LnRleHRCYXNlbGluZSA9ICdtaWRkbGUnO1xuICAgIGN0eC5saW5lV2lkdGggPSAwLjU7XG4gICAgY3R4LmZvbnQgPSBsYWJlbEZvbnQuc3RyaW5nO1xuICAgIGNvbnN0IHtib3hXaWR0aCwgYm94SGVpZ2h0LCBpdGVtSGVpZ2h0fSA9IGdldEJveFNpemUobGFiZWxPcHRzLCBmb250U2l6ZSk7XG4gICAgY29uc3QgZHJhd0xlZ2VuZEJveCA9IGZ1bmN0aW9uKHgsIHksIGxlZ2VuZEl0ZW0pIHtcbiAgICAgIGlmIChpc05hTihib3hXaWR0aCkgfHwgYm94V2lkdGggPD0gMCB8fCBpc05hTihib3hIZWlnaHQpIHx8IGJveEhlaWdodCA8IDApIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgY3R4LnNhdmUoKTtcbiAgICAgIGNvbnN0IGxpbmVXaWR0aCA9IHZhbHVlT3JEZWZhdWx0KGxlZ2VuZEl0ZW0ubGluZVdpZHRoLCAxKTtcbiAgICAgIGN0eC5maWxsU3R5bGUgPSB2YWx1ZU9yRGVmYXVsdChsZWdlbmRJdGVtLmZpbGxTdHlsZSwgZGVmYXVsdENvbG9yKTtcbiAgICAgIGN0eC5saW5lQ2FwID0gdmFsdWVPckRlZmF1bHQobGVnZW5kSXRlbS5saW5lQ2FwLCAnYnV0dCcpO1xuICAgICAgY3R4LmxpbmVEYXNoT2Zmc2V0ID0gdmFsdWVPckRlZmF1bHQobGVnZW5kSXRlbS5saW5lRGFzaE9mZnNldCwgMCk7XG4gICAgICBjdHgubGluZUpvaW4gPSB2YWx1ZU9yRGVmYXVsdChsZWdlbmRJdGVtLmxpbmVKb2luLCAnbWl0ZXInKTtcbiAgICAgIGN0eC5saW5lV2lkdGggPSBsaW5lV2lkdGg7XG4gICAgICBjdHguc3Ryb2tlU3R5bGUgPSB2YWx1ZU9yRGVmYXVsdChsZWdlbmRJdGVtLnN0cm9rZVN0eWxlLCBkZWZhdWx0Q29sb3IpO1xuICAgICAgY3R4LnNldExpbmVEYXNoKHZhbHVlT3JEZWZhdWx0KGxlZ2VuZEl0ZW0ubGluZURhc2gsIFtdKSk7XG4gICAgICBpZiAobGFiZWxPcHRzLnVzZVBvaW50U3R5bGUpIHtcbiAgICAgICAgY29uc3QgZHJhd09wdGlvbnMgPSB7XG4gICAgICAgICAgcmFkaXVzOiBib3hXaWR0aCAqIE1hdGguU1FSVDIgLyAyLFxuICAgICAgICAgIHBvaW50U3R5bGU6IGxlZ2VuZEl0ZW0ucG9pbnRTdHlsZSxcbiAgICAgICAgICByb3RhdGlvbjogbGVnZW5kSXRlbS5yb3RhdGlvbixcbiAgICAgICAgICBib3JkZXJXaWR0aDogbGluZVdpZHRoXG4gICAgICAgIH07XG4gICAgICAgIGNvbnN0IGNlbnRlclggPSBydGxIZWxwZXIueFBsdXMoeCwgYm94V2lkdGggLyAyKTtcbiAgICAgICAgY29uc3QgY2VudGVyWSA9IHkgKyBoYWxmRm9udFNpemU7XG4gICAgICAgIGRyYXdQb2ludChjdHgsIGRyYXdPcHRpb25zLCBjZW50ZXJYLCBjZW50ZXJZKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnN0IHlCb3hUb3AgPSB5ICsgTWF0aC5tYXgoKGZvbnRTaXplIC0gYm94SGVpZ2h0KSAvIDIsIDApO1xuICAgICAgICBjb25zdCB4Qm94TGVmdCA9IHJ0bEhlbHBlci5sZWZ0Rm9yTHRyKHgsIGJveFdpZHRoKTtcbiAgICAgICAgY29uc3QgYm9yZGVyUmFkaXVzID0gdG9UUkJMQ29ybmVycyhsZWdlbmRJdGVtLmJvcmRlclJhZGl1cyk7XG4gICAgICAgIGN0eC5iZWdpblBhdGgoKTtcbiAgICAgICAgaWYgKE9iamVjdC52YWx1ZXMoYm9yZGVyUmFkaXVzKS5zb21lKHYgPT4gdiAhPT0gMCkpIHtcbiAgICAgICAgICBhZGRSb3VuZGVkUmVjdFBhdGgoY3R4LCB7XG4gICAgICAgICAgICB4OiB4Qm94TGVmdCxcbiAgICAgICAgICAgIHk6IHlCb3hUb3AsXG4gICAgICAgICAgICB3OiBib3hXaWR0aCxcbiAgICAgICAgICAgIGg6IGJveEhlaWdodCxcbiAgICAgICAgICAgIHJhZGl1czogYm9yZGVyUmFkaXVzLFxuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGN0eC5yZWN0KHhCb3hMZWZ0LCB5Qm94VG9wLCBib3hXaWR0aCwgYm94SGVpZ2h0KTtcbiAgICAgICAgfVxuICAgICAgICBjdHguZmlsbCgpO1xuICAgICAgICBpZiAobGluZVdpZHRoICE9PSAwKSB7XG4gICAgICAgICAgY3R4LnN0cm9rZSgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBjdHgucmVzdG9yZSgpO1xuICAgIH07XG4gICAgY29uc3QgZmlsbFRleHQgPSBmdW5jdGlvbih4LCB5LCBsZWdlbmRJdGVtKSB7XG4gICAgICByZW5kZXJUZXh0KGN0eCwgbGVnZW5kSXRlbS50ZXh0LCB4LCB5ICsgKGl0ZW1IZWlnaHQgLyAyKSwgbGFiZWxGb250LCB7XG4gICAgICAgIHN0cmlrZXRocm91Z2g6IGxlZ2VuZEl0ZW0uaGlkZGVuLFxuICAgICAgICB0ZXh0QWxpZ246IHJ0bEhlbHBlci50ZXh0QWxpZ24obGVnZW5kSXRlbS50ZXh0QWxpZ24pXG4gICAgICB9KTtcbiAgICB9O1xuICAgIGNvbnN0IGlzSG9yaXpvbnRhbCA9IHRoaXMuaXNIb3Jpem9udGFsKCk7XG4gICAgY29uc3QgdGl0bGVIZWlnaHQgPSB0aGlzLl9jb21wdXRlVGl0bGVIZWlnaHQoKTtcbiAgICBpZiAoaXNIb3Jpem9udGFsKSB7XG4gICAgICBjdXJzb3IgPSB7XG4gICAgICAgIHg6IF9hbGlnblN0YXJ0RW5kKGFsaWduLCB0aGlzLmxlZnQgKyBwYWRkaW5nLCB0aGlzLnJpZ2h0IC0gbGluZVdpZHRoc1swXSksXG4gICAgICAgIHk6IHRoaXMudG9wICsgcGFkZGluZyArIHRpdGxlSGVpZ2h0LFxuICAgICAgICBsaW5lOiAwXG4gICAgICB9O1xuICAgIH0gZWxzZSB7XG4gICAgICBjdXJzb3IgPSB7XG4gICAgICAgIHg6IHRoaXMubGVmdCArIHBhZGRpbmcsXG4gICAgICAgIHk6IF9hbGlnblN0YXJ0RW5kKGFsaWduLCB0aGlzLnRvcCArIHRpdGxlSGVpZ2h0ICsgcGFkZGluZywgdGhpcy5ib3R0b20gLSBjb2x1bW5TaXplc1swXS5oZWlnaHQpLFxuICAgICAgICBsaW5lOiAwXG4gICAgICB9O1xuICAgIH1cbiAgICBvdmVycmlkZVRleHREaXJlY3Rpb24odGhpcy5jdHgsIG9wdHMudGV4dERpcmVjdGlvbik7XG4gICAgY29uc3QgbGluZUhlaWdodCA9IGl0ZW1IZWlnaHQgKyBwYWRkaW5nO1xuICAgIHRoaXMubGVnZW5kSXRlbXMuZm9yRWFjaCgobGVnZW5kSXRlbSwgaSkgPT4ge1xuICAgICAgY3R4LnN0cm9rZVN0eWxlID0gbGVnZW5kSXRlbS5mb250Q29sb3IgfHwgZm9udENvbG9yO1xuICAgICAgY3R4LmZpbGxTdHlsZSA9IGxlZ2VuZEl0ZW0uZm9udENvbG9yIHx8IGZvbnRDb2xvcjtcbiAgICAgIGNvbnN0IHRleHRXaWR0aCA9IGN0eC5tZWFzdXJlVGV4dChsZWdlbmRJdGVtLnRleHQpLndpZHRoO1xuICAgICAgY29uc3QgdGV4dEFsaWduID0gcnRsSGVscGVyLnRleHRBbGlnbihsZWdlbmRJdGVtLnRleHRBbGlnbiB8fCAobGVnZW5kSXRlbS50ZXh0QWxpZ24gPSBsYWJlbE9wdHMudGV4dEFsaWduKSk7XG4gICAgICBjb25zdCB3aWR0aCA9IGJveFdpZHRoICsgaGFsZkZvbnRTaXplICsgdGV4dFdpZHRoO1xuICAgICAgbGV0IHggPSBjdXJzb3IueDtcbiAgICAgIGxldCB5ID0gY3Vyc29yLnk7XG4gICAgICBydGxIZWxwZXIuc2V0V2lkdGgodGhpcy53aWR0aCk7XG4gICAgICBpZiAoaXNIb3Jpem9udGFsKSB7XG4gICAgICAgIGlmIChpID4gMCAmJiB4ICsgd2lkdGggKyBwYWRkaW5nID4gdGhpcy5yaWdodCkge1xuICAgICAgICAgIHkgPSBjdXJzb3IueSArPSBsaW5lSGVpZ2h0O1xuICAgICAgICAgIGN1cnNvci5saW5lKys7XG4gICAgICAgICAgeCA9IGN1cnNvci54ID0gX2FsaWduU3RhcnRFbmQoYWxpZ24sIHRoaXMubGVmdCArIHBhZGRpbmcsIHRoaXMucmlnaHQgLSBsaW5lV2lkdGhzW2N1cnNvci5saW5lXSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoaSA+IDAgJiYgeSArIGxpbmVIZWlnaHQgPiB0aGlzLmJvdHRvbSkge1xuICAgICAgICB4ID0gY3Vyc29yLnggPSB4ICsgY29sdW1uU2l6ZXNbY3Vyc29yLmxpbmVdLndpZHRoICsgcGFkZGluZztcbiAgICAgICAgY3Vyc29yLmxpbmUrKztcbiAgICAgICAgeSA9IGN1cnNvci55ID0gX2FsaWduU3RhcnRFbmQoYWxpZ24sIHRoaXMudG9wICsgdGl0bGVIZWlnaHQgKyBwYWRkaW5nLCB0aGlzLmJvdHRvbSAtIGNvbHVtblNpemVzW2N1cnNvci5saW5lXS5oZWlnaHQpO1xuICAgICAgfVxuICAgICAgY29uc3QgcmVhbFggPSBydGxIZWxwZXIueCh4KTtcbiAgICAgIGRyYXdMZWdlbmRCb3gocmVhbFgsIHksIGxlZ2VuZEl0ZW0pO1xuICAgICAgeCA9IF90ZXh0WCh0ZXh0QWxpZ24sIHggKyBib3hXaWR0aCArIGhhbGZGb250U2l6ZSwgaXNIb3Jpem9udGFsID8geCArIHdpZHRoIDogdGhpcy5yaWdodCwgb3B0cy5ydGwpO1xuICAgICAgZmlsbFRleHQocnRsSGVscGVyLngoeCksIHksIGxlZ2VuZEl0ZW0pO1xuICAgICAgaWYgKGlzSG9yaXpvbnRhbCkge1xuICAgICAgICBjdXJzb3IueCArPSB3aWR0aCArIHBhZGRpbmc7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjdXJzb3IueSArPSBsaW5lSGVpZ2h0O1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJlc3RvcmVUZXh0RGlyZWN0aW9uKHRoaXMuY3R4LCBvcHRzLnRleHREaXJlY3Rpb24pO1xuICB9XG4gIGRyYXdUaXRsZSgpIHtcbiAgICBjb25zdCBvcHRzID0gdGhpcy5vcHRpb25zO1xuICAgIGNvbnN0IHRpdGxlT3B0cyA9IG9wdHMudGl0bGU7XG4gICAgY29uc3QgdGl0bGVGb250ID0gdG9Gb250KHRpdGxlT3B0cy5mb250KTtcbiAgICBjb25zdCB0aXRsZVBhZGRpbmcgPSB0b1BhZGRpbmcodGl0bGVPcHRzLnBhZGRpbmcpO1xuICAgIGlmICghdGl0bGVPcHRzLmRpc3BsYXkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgcnRsSGVscGVyID0gZ2V0UnRsQWRhcHRlcihvcHRzLnJ0bCwgdGhpcy5sZWZ0LCB0aGlzLndpZHRoKTtcbiAgICBjb25zdCBjdHggPSB0aGlzLmN0eDtcbiAgICBjb25zdCBwb3NpdGlvbiA9IHRpdGxlT3B0cy5wb3NpdGlvbjtcbiAgICBjb25zdCBoYWxmRm9udFNpemUgPSB0aXRsZUZvbnQuc2l6ZSAvIDI7XG4gICAgY29uc3QgdG9wUGFkZGluZ1BsdXNIYWxmRm9udFNpemUgPSB0aXRsZVBhZGRpbmcudG9wICsgaGFsZkZvbnRTaXplO1xuICAgIGxldCB5O1xuICAgIGxldCBsZWZ0ID0gdGhpcy5sZWZ0O1xuICAgIGxldCBtYXhXaWR0aCA9IHRoaXMud2lkdGg7XG4gICAgaWYgKHRoaXMuaXNIb3Jpem9udGFsKCkpIHtcbiAgICAgIG1heFdpZHRoID0gTWF0aC5tYXgoLi4udGhpcy5saW5lV2lkdGhzKTtcbiAgICAgIHkgPSB0aGlzLnRvcCArIHRvcFBhZGRpbmdQbHVzSGFsZkZvbnRTaXplO1xuICAgICAgbGVmdCA9IF9hbGlnblN0YXJ0RW5kKG9wdHMuYWxpZ24sIGxlZnQsIHRoaXMucmlnaHQgLSBtYXhXaWR0aCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IG1heEhlaWdodCA9IHRoaXMuY29sdW1uU2l6ZXMucmVkdWNlKChhY2MsIHNpemUpID0+IE1hdGgubWF4KGFjYywgc2l6ZS5oZWlnaHQpLCAwKTtcbiAgICAgIHkgPSB0b3BQYWRkaW5nUGx1c0hhbGZGb250U2l6ZSArIF9hbGlnblN0YXJ0RW5kKG9wdHMuYWxpZ24sIHRoaXMudG9wLCB0aGlzLmJvdHRvbSAtIG1heEhlaWdodCAtIG9wdHMubGFiZWxzLnBhZGRpbmcgLSB0aGlzLl9jb21wdXRlVGl0bGVIZWlnaHQoKSk7XG4gICAgfVxuICAgIGNvbnN0IHggPSBfYWxpZ25TdGFydEVuZChwb3NpdGlvbiwgbGVmdCwgbGVmdCArIG1heFdpZHRoKTtcbiAgICBjdHgudGV4dEFsaWduID0gcnRsSGVscGVyLnRleHRBbGlnbihfdG9MZWZ0UmlnaHRDZW50ZXIocG9zaXRpb24pKTtcbiAgICBjdHgudGV4dEJhc2VsaW5lID0gJ21pZGRsZSc7XG4gICAgY3R4LnN0cm9rZVN0eWxlID0gdGl0bGVPcHRzLmNvbG9yO1xuICAgIGN0eC5maWxsU3R5bGUgPSB0aXRsZU9wdHMuY29sb3I7XG4gICAgY3R4LmZvbnQgPSB0aXRsZUZvbnQuc3RyaW5nO1xuICAgIHJlbmRlclRleHQoY3R4LCB0aXRsZU9wdHMudGV4dCwgeCwgeSwgdGl0bGVGb250KTtcbiAgfVxuICBfY29tcHV0ZVRpdGxlSGVpZ2h0KCkge1xuICAgIGNvbnN0IHRpdGxlT3B0cyA9IHRoaXMub3B0aW9ucy50aXRsZTtcbiAgICBjb25zdCB0aXRsZUZvbnQgPSB0b0ZvbnQodGl0bGVPcHRzLmZvbnQpO1xuICAgIGNvbnN0IHRpdGxlUGFkZGluZyA9IHRvUGFkZGluZyh0aXRsZU9wdHMucGFkZGluZyk7XG4gICAgcmV0dXJuIHRpdGxlT3B0cy5kaXNwbGF5ID8gdGl0bGVGb250LmxpbmVIZWlnaHQgKyB0aXRsZVBhZGRpbmcuaGVpZ2h0IDogMDtcbiAgfVxuICBfZ2V0TGVnZW5kSXRlbUF0KHgsIHkpIHtcbiAgICBsZXQgaSwgaGl0Qm94LCBsaDtcbiAgICBpZiAoX2lzQmV0d2Vlbih4LCB0aGlzLmxlZnQsIHRoaXMucmlnaHQpXG4gICAgICAmJiBfaXNCZXR3ZWVuKHksIHRoaXMudG9wLCB0aGlzLmJvdHRvbSkpIHtcbiAgICAgIGxoID0gdGhpcy5sZWdlbmRIaXRCb3hlcztcbiAgICAgIGZvciAoaSA9IDA7IGkgPCBsaC5sZW5ndGg7ICsraSkge1xuICAgICAgICBoaXRCb3ggPSBsaFtpXTtcbiAgICAgICAgaWYgKF9pc0JldHdlZW4oeCwgaGl0Qm94LmxlZnQsIGhpdEJveC5sZWZ0ICsgaGl0Qm94LndpZHRoKVxuICAgICAgICAgICYmIF9pc0JldHdlZW4oeSwgaGl0Qm94LnRvcCwgaGl0Qm94LnRvcCArIGhpdEJveC5oZWlnaHQpKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMubGVnZW5kSXRlbXNbaV07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgaGFuZGxlRXZlbnQoZSkge1xuICAgIGNvbnN0IG9wdHMgPSB0aGlzLm9wdGlvbnM7XG4gICAgaWYgKCFpc0xpc3RlbmVkKGUudHlwZSwgb3B0cykpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgaG92ZXJlZEl0ZW0gPSB0aGlzLl9nZXRMZWdlbmRJdGVtQXQoZS54LCBlLnkpO1xuICAgIGlmIChlLnR5cGUgPT09ICdtb3VzZW1vdmUnKSB7XG4gICAgICBjb25zdCBwcmV2aW91cyA9IHRoaXMuX2hvdmVyZWRJdGVtO1xuICAgICAgY29uc3Qgc2FtZUl0ZW0gPSBpdGVtc0VxdWFsKHByZXZpb3VzLCBob3ZlcmVkSXRlbSk7XG4gICAgICBpZiAocHJldmlvdXMgJiYgIXNhbWVJdGVtKSB7XG4gICAgICAgIGNhbGxiYWNrKG9wdHMub25MZWF2ZSwgW2UsIHByZXZpb3VzLCB0aGlzXSwgdGhpcyk7XG4gICAgICB9XG4gICAgICB0aGlzLl9ob3ZlcmVkSXRlbSA9IGhvdmVyZWRJdGVtO1xuICAgICAgaWYgKGhvdmVyZWRJdGVtICYmICFzYW1lSXRlbSkge1xuICAgICAgICBjYWxsYmFjayhvcHRzLm9uSG92ZXIsIFtlLCBob3ZlcmVkSXRlbSwgdGhpc10sIHRoaXMpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoaG92ZXJlZEl0ZW0pIHtcbiAgICAgIGNhbGxiYWNrKG9wdHMub25DbGljaywgW2UsIGhvdmVyZWRJdGVtLCB0aGlzXSwgdGhpcyk7XG4gICAgfVxuICB9XG59XG5mdW5jdGlvbiBpc0xpc3RlbmVkKHR5cGUsIG9wdHMpIHtcbiAgaWYgKHR5cGUgPT09ICdtb3VzZW1vdmUnICYmIChvcHRzLm9uSG92ZXIgfHwgb3B0cy5vbkxlYXZlKSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIGlmIChvcHRzLm9uQ2xpY2sgJiYgKHR5cGUgPT09ICdjbGljaycgfHwgdHlwZSA9PT0gJ21vdXNldXAnKSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIHJldHVybiBmYWxzZTtcbn1cbnZhciBwbHVnaW5fbGVnZW5kID0ge1xuICBpZDogJ2xlZ2VuZCcsXG4gIF9lbGVtZW50OiBMZWdlbmQsXG4gIHN0YXJ0KGNoYXJ0LCBfYXJncywgb3B0aW9ucykge1xuICAgIGNvbnN0IGxlZ2VuZCA9IGNoYXJ0LmxlZ2VuZCA9IG5ldyBMZWdlbmQoe2N0eDogY2hhcnQuY3R4LCBvcHRpb25zLCBjaGFydH0pO1xuICAgIGxheW91dHMuY29uZmlndXJlKGNoYXJ0LCBsZWdlbmQsIG9wdGlvbnMpO1xuICAgIGxheW91dHMuYWRkQm94KGNoYXJ0LCBsZWdlbmQpO1xuICB9LFxuICBzdG9wKGNoYXJ0KSB7XG4gICAgbGF5b3V0cy5yZW1vdmVCb3goY2hhcnQsIGNoYXJ0LmxlZ2VuZCk7XG4gICAgZGVsZXRlIGNoYXJ0LmxlZ2VuZDtcbiAgfSxcbiAgYmVmb3JlVXBkYXRlKGNoYXJ0LCBfYXJncywgb3B0aW9ucykge1xuICAgIGNvbnN0IGxlZ2VuZCA9IGNoYXJ0LmxlZ2VuZDtcbiAgICBsYXlvdXRzLmNvbmZpZ3VyZShjaGFydCwgbGVnZW5kLCBvcHRpb25zKTtcbiAgICBsZWdlbmQub3B0aW9ucyA9IG9wdGlvbnM7XG4gIH0sXG4gIGFmdGVyVXBkYXRlKGNoYXJ0KSB7XG4gICAgY29uc3QgbGVnZW5kID0gY2hhcnQubGVnZW5kO1xuICAgIGxlZ2VuZC5idWlsZExhYmVscygpO1xuICAgIGxlZ2VuZC5hZGp1c3RIaXRCb3hlcygpO1xuICB9LFxuICBhZnRlckV2ZW50KGNoYXJ0LCBhcmdzKSB7XG4gICAgaWYgKCFhcmdzLnJlcGxheSkge1xuICAgICAgY2hhcnQubGVnZW5kLmhhbmRsZUV2ZW50KGFyZ3MuZXZlbnQpO1xuICAgIH1cbiAgfSxcbiAgZGVmYXVsdHM6IHtcbiAgICBkaXNwbGF5OiB0cnVlLFxuICAgIHBvc2l0aW9uOiAndG9wJyxcbiAgICBhbGlnbjogJ2NlbnRlcicsXG4gICAgZnVsbFNpemU6IHRydWUsXG4gICAgcmV2ZXJzZTogZmFsc2UsXG4gICAgd2VpZ2h0OiAxMDAwLFxuICAgIG9uQ2xpY2soZSwgbGVnZW5kSXRlbSwgbGVnZW5kKSB7XG4gICAgICBjb25zdCBpbmRleCA9IGxlZ2VuZEl0ZW0uZGF0YXNldEluZGV4O1xuICAgICAgY29uc3QgY2kgPSBsZWdlbmQuY2hhcnQ7XG4gICAgICBpZiAoY2kuaXNEYXRhc2V0VmlzaWJsZShpbmRleCkpIHtcbiAgICAgICAgY2kuaGlkZShpbmRleCk7XG4gICAgICAgIGxlZ2VuZEl0ZW0uaGlkZGVuID0gdHJ1ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNpLnNob3coaW5kZXgpO1xuICAgICAgICBsZWdlbmRJdGVtLmhpZGRlbiA9IGZhbHNlO1xuICAgICAgfVxuICAgIH0sXG4gICAgb25Ib3ZlcjogbnVsbCxcbiAgICBvbkxlYXZlOiBudWxsLFxuICAgIGxhYmVsczoge1xuICAgICAgY29sb3I6IChjdHgpID0+IGN0eC5jaGFydC5vcHRpb25zLmNvbG9yLFxuICAgICAgYm94V2lkdGg6IDQwLFxuICAgICAgcGFkZGluZzogMTAsXG4gICAgICBnZW5lcmF0ZUxhYmVscyhjaGFydCkge1xuICAgICAgICBjb25zdCBkYXRhc2V0cyA9IGNoYXJ0LmRhdGEuZGF0YXNldHM7XG4gICAgICAgIGNvbnN0IHtsYWJlbHM6IHt1c2VQb2ludFN0eWxlLCBwb2ludFN0eWxlLCB0ZXh0QWxpZ24sIGNvbG9yfX0gPSBjaGFydC5sZWdlbmQub3B0aW9ucztcbiAgICAgICAgcmV0dXJuIGNoYXJ0Ll9nZXRTb3J0ZWREYXRhc2V0TWV0YXMoKS5tYXAoKG1ldGEpID0+IHtcbiAgICAgICAgICBjb25zdCBzdHlsZSA9IG1ldGEuY29udHJvbGxlci5nZXRTdHlsZSh1c2VQb2ludFN0eWxlID8gMCA6IHVuZGVmaW5lZCk7XG4gICAgICAgICAgY29uc3QgYm9yZGVyV2lkdGggPSB0b1BhZGRpbmcoc3R5bGUuYm9yZGVyV2lkdGgpO1xuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB0ZXh0OiBkYXRhc2V0c1ttZXRhLmluZGV4XS5sYWJlbCxcbiAgICAgICAgICAgIGZpbGxTdHlsZTogc3R5bGUuYmFja2dyb3VuZENvbG9yLFxuICAgICAgICAgICAgZm9udENvbG9yOiBjb2xvcixcbiAgICAgICAgICAgIGhpZGRlbjogIW1ldGEudmlzaWJsZSxcbiAgICAgICAgICAgIGxpbmVDYXA6IHN0eWxlLmJvcmRlckNhcFN0eWxlLFxuICAgICAgICAgICAgbGluZURhc2g6IHN0eWxlLmJvcmRlckRhc2gsXG4gICAgICAgICAgICBsaW5lRGFzaE9mZnNldDogc3R5bGUuYm9yZGVyRGFzaE9mZnNldCxcbiAgICAgICAgICAgIGxpbmVKb2luOiBzdHlsZS5ib3JkZXJKb2luU3R5bGUsXG4gICAgICAgICAgICBsaW5lV2lkdGg6IChib3JkZXJXaWR0aC53aWR0aCArIGJvcmRlcldpZHRoLmhlaWdodCkgLyA0LFxuICAgICAgICAgICAgc3Ryb2tlU3R5bGU6IHN0eWxlLmJvcmRlckNvbG9yLFxuICAgICAgICAgICAgcG9pbnRTdHlsZTogcG9pbnRTdHlsZSB8fCBzdHlsZS5wb2ludFN0eWxlLFxuICAgICAgICAgICAgcm90YXRpb246IHN0eWxlLnJvdGF0aW9uLFxuICAgICAgICAgICAgdGV4dEFsaWduOiB0ZXh0QWxpZ24gfHwgc3R5bGUudGV4dEFsaWduLFxuICAgICAgICAgICAgYm9yZGVyUmFkaXVzOiAwLFxuICAgICAgICAgICAgZGF0YXNldEluZGV4OiBtZXRhLmluZGV4XG4gICAgICAgICAgfTtcbiAgICAgICAgfSwgdGhpcyk7XG4gICAgICB9XG4gICAgfSxcbiAgICB0aXRsZToge1xuICAgICAgY29sb3I6IChjdHgpID0+IGN0eC5jaGFydC5vcHRpb25zLmNvbG9yLFxuICAgICAgZGlzcGxheTogZmFsc2UsXG4gICAgICBwb3NpdGlvbjogJ2NlbnRlcicsXG4gICAgICB0ZXh0OiAnJyxcbiAgICB9XG4gIH0sXG4gIGRlc2NyaXB0b3JzOiB7XG4gICAgX3NjcmlwdGFibGU6IChuYW1lKSA9PiAhbmFtZS5zdGFydHNXaXRoKCdvbicpLFxuICAgIGxhYmVsczoge1xuICAgICAgX3NjcmlwdGFibGU6IChuYW1lKSA9PiAhWydnZW5lcmF0ZUxhYmVscycsICdmaWx0ZXInLCAnc29ydCddLmluY2x1ZGVzKG5hbWUpLFxuICAgIH1cbiAgfSxcbn07XG5cbmNsYXNzIFRpdGxlIGV4dGVuZHMgRWxlbWVudCB7XG4gIGNvbnN0cnVjdG9yKGNvbmZpZykge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5jaGFydCA9IGNvbmZpZy5jaGFydDtcbiAgICB0aGlzLm9wdGlvbnMgPSBjb25maWcub3B0aW9ucztcbiAgICB0aGlzLmN0eCA9IGNvbmZpZy5jdHg7XG4gICAgdGhpcy5fcGFkZGluZyA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLnRvcCA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLmJvdHRvbSA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLmxlZnQgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5yaWdodCA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLndpZHRoID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuaGVpZ2h0ID0gdW5kZWZpbmVkO1xuICAgIHRoaXMucG9zaXRpb24gPSB1bmRlZmluZWQ7XG4gICAgdGhpcy53ZWlnaHQgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5mdWxsU2l6ZSA9IHVuZGVmaW5lZDtcbiAgfVxuICB1cGRhdGUobWF4V2lkdGgsIG1heEhlaWdodCkge1xuICAgIGNvbnN0IG9wdHMgPSB0aGlzLm9wdGlvbnM7XG4gICAgdGhpcy5sZWZ0ID0gMDtcbiAgICB0aGlzLnRvcCA9IDA7XG4gICAgaWYgKCFvcHRzLmRpc3BsYXkpIHtcbiAgICAgIHRoaXMud2lkdGggPSB0aGlzLmhlaWdodCA9IHRoaXMucmlnaHQgPSB0aGlzLmJvdHRvbSA9IDA7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMud2lkdGggPSB0aGlzLnJpZ2h0ID0gbWF4V2lkdGg7XG4gICAgdGhpcy5oZWlnaHQgPSB0aGlzLmJvdHRvbSA9IG1heEhlaWdodDtcbiAgICBjb25zdCBsaW5lQ291bnQgPSBpc0FycmF5KG9wdHMudGV4dCkgPyBvcHRzLnRleHQubGVuZ3RoIDogMTtcbiAgICB0aGlzLl9wYWRkaW5nID0gdG9QYWRkaW5nKG9wdHMucGFkZGluZyk7XG4gICAgY29uc3QgdGV4dFNpemUgPSBsaW5lQ291bnQgKiB0b0ZvbnQob3B0cy5mb250KS5saW5lSGVpZ2h0ICsgdGhpcy5fcGFkZGluZy5oZWlnaHQ7XG4gICAgaWYgKHRoaXMuaXNIb3Jpem9udGFsKCkpIHtcbiAgICAgIHRoaXMuaGVpZ2h0ID0gdGV4dFNpemU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMud2lkdGggPSB0ZXh0U2l6ZTtcbiAgICB9XG4gIH1cbiAgaXNIb3Jpem9udGFsKCkge1xuICAgIGNvbnN0IHBvcyA9IHRoaXMub3B0aW9ucy5wb3NpdGlvbjtcbiAgICByZXR1cm4gcG9zID09PSAndG9wJyB8fCBwb3MgPT09ICdib3R0b20nO1xuICB9XG4gIF9kcmF3QXJncyhvZmZzZXQpIHtcbiAgICBjb25zdCB7dG9wLCBsZWZ0LCBib3R0b20sIHJpZ2h0LCBvcHRpb25zfSA9IHRoaXM7XG4gICAgY29uc3QgYWxpZ24gPSBvcHRpb25zLmFsaWduO1xuICAgIGxldCByb3RhdGlvbiA9IDA7XG4gICAgbGV0IG1heFdpZHRoLCB0aXRsZVgsIHRpdGxlWTtcbiAgICBpZiAodGhpcy5pc0hvcml6b250YWwoKSkge1xuICAgICAgdGl0bGVYID0gX2FsaWduU3RhcnRFbmQoYWxpZ24sIGxlZnQsIHJpZ2h0KTtcbiAgICAgIHRpdGxlWSA9IHRvcCArIG9mZnNldDtcbiAgICAgIG1heFdpZHRoID0gcmlnaHQgLSBsZWZ0O1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAob3B0aW9ucy5wb3NpdGlvbiA9PT0gJ2xlZnQnKSB7XG4gICAgICAgIHRpdGxlWCA9IGxlZnQgKyBvZmZzZXQ7XG4gICAgICAgIHRpdGxlWSA9IF9hbGlnblN0YXJ0RW5kKGFsaWduLCBib3R0b20sIHRvcCk7XG4gICAgICAgIHJvdGF0aW9uID0gUEkgKiAtMC41O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGl0bGVYID0gcmlnaHQgLSBvZmZzZXQ7XG4gICAgICAgIHRpdGxlWSA9IF9hbGlnblN0YXJ0RW5kKGFsaWduLCB0b3AsIGJvdHRvbSk7XG4gICAgICAgIHJvdGF0aW9uID0gUEkgKiAwLjU7XG4gICAgICB9XG4gICAgICBtYXhXaWR0aCA9IGJvdHRvbSAtIHRvcDtcbiAgICB9XG4gICAgcmV0dXJuIHt0aXRsZVgsIHRpdGxlWSwgbWF4V2lkdGgsIHJvdGF0aW9ufTtcbiAgfVxuICBkcmF3KCkge1xuICAgIGNvbnN0IGN0eCA9IHRoaXMuY3R4O1xuICAgIGNvbnN0IG9wdHMgPSB0aGlzLm9wdGlvbnM7XG4gICAgaWYgKCFvcHRzLmRpc3BsYXkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgZm9udE9wdHMgPSB0b0ZvbnQob3B0cy5mb250KTtcbiAgICBjb25zdCBsaW5lSGVpZ2h0ID0gZm9udE9wdHMubGluZUhlaWdodDtcbiAgICBjb25zdCBvZmZzZXQgPSBsaW5lSGVpZ2h0IC8gMiArIHRoaXMuX3BhZGRpbmcudG9wO1xuICAgIGNvbnN0IHt0aXRsZVgsIHRpdGxlWSwgbWF4V2lkdGgsIHJvdGF0aW9ufSA9IHRoaXMuX2RyYXdBcmdzKG9mZnNldCk7XG4gICAgcmVuZGVyVGV4dChjdHgsIG9wdHMudGV4dCwgMCwgMCwgZm9udE9wdHMsIHtcbiAgICAgIGNvbG9yOiBvcHRzLmNvbG9yLFxuICAgICAgbWF4V2lkdGgsXG4gICAgICByb3RhdGlvbixcbiAgICAgIHRleHRBbGlnbjogX3RvTGVmdFJpZ2h0Q2VudGVyKG9wdHMuYWxpZ24pLFxuICAgICAgdGV4dEJhc2VsaW5lOiAnbWlkZGxlJyxcbiAgICAgIHRyYW5zbGF0aW9uOiBbdGl0bGVYLCB0aXRsZVldLFxuICAgIH0pO1xuICB9XG59XG5mdW5jdGlvbiBjcmVhdGVUaXRsZShjaGFydCwgdGl0bGVPcHRzKSB7XG4gIGNvbnN0IHRpdGxlID0gbmV3IFRpdGxlKHtcbiAgICBjdHg6IGNoYXJ0LmN0eCxcbiAgICBvcHRpb25zOiB0aXRsZU9wdHMsXG4gICAgY2hhcnRcbiAgfSk7XG4gIGxheW91dHMuY29uZmlndXJlKGNoYXJ0LCB0aXRsZSwgdGl0bGVPcHRzKTtcbiAgbGF5b3V0cy5hZGRCb3goY2hhcnQsIHRpdGxlKTtcbiAgY2hhcnQudGl0bGVCbG9jayA9IHRpdGxlO1xufVxudmFyIHBsdWdpbl90aXRsZSA9IHtcbiAgaWQ6ICd0aXRsZScsXG4gIF9lbGVtZW50OiBUaXRsZSxcbiAgc3RhcnQoY2hhcnQsIF9hcmdzLCBvcHRpb25zKSB7XG4gICAgY3JlYXRlVGl0bGUoY2hhcnQsIG9wdGlvbnMpO1xuICB9LFxuICBzdG9wKGNoYXJ0KSB7XG4gICAgY29uc3QgdGl0bGVCbG9jayA9IGNoYXJ0LnRpdGxlQmxvY2s7XG4gICAgbGF5b3V0cy5yZW1vdmVCb3goY2hhcnQsIHRpdGxlQmxvY2spO1xuICAgIGRlbGV0ZSBjaGFydC50aXRsZUJsb2NrO1xuICB9LFxuICBiZWZvcmVVcGRhdGUoY2hhcnQsIF9hcmdzLCBvcHRpb25zKSB7XG4gICAgY29uc3QgdGl0bGUgPSBjaGFydC50aXRsZUJsb2NrO1xuICAgIGxheW91dHMuY29uZmlndXJlKGNoYXJ0LCB0aXRsZSwgb3B0aW9ucyk7XG4gICAgdGl0bGUub3B0aW9ucyA9IG9wdGlvbnM7XG4gIH0sXG4gIGRlZmF1bHRzOiB7XG4gICAgYWxpZ246ICdjZW50ZXInLFxuICAgIGRpc3BsYXk6IGZhbHNlLFxuICAgIGZvbnQ6IHtcbiAgICAgIHdlaWdodDogJ2JvbGQnLFxuICAgIH0sXG4gICAgZnVsbFNpemU6IHRydWUsXG4gICAgcGFkZGluZzogMTAsXG4gICAgcG9zaXRpb246ICd0b3AnLFxuICAgIHRleHQ6ICcnLFxuICAgIHdlaWdodDogMjAwMFxuICB9LFxuICBkZWZhdWx0Um91dGVzOiB7XG4gICAgY29sb3I6ICdjb2xvcidcbiAgfSxcbiAgZGVzY3JpcHRvcnM6IHtcbiAgICBfc2NyaXB0YWJsZTogdHJ1ZSxcbiAgICBfaW5kZXhhYmxlOiBmYWxzZSxcbiAgfSxcbn07XG5cbmNvbnN0IG1hcCA9IG5ldyBXZWFrTWFwKCk7XG52YXIgcGx1Z2luX3N1YnRpdGxlID0ge1xuICBpZDogJ3N1YnRpdGxlJyxcbiAgc3RhcnQoY2hhcnQsIF9hcmdzLCBvcHRpb25zKSB7XG4gICAgY29uc3QgdGl0bGUgPSBuZXcgVGl0bGUoe1xuICAgICAgY3R4OiBjaGFydC5jdHgsXG4gICAgICBvcHRpb25zLFxuICAgICAgY2hhcnRcbiAgICB9KTtcbiAgICBsYXlvdXRzLmNvbmZpZ3VyZShjaGFydCwgdGl0bGUsIG9wdGlvbnMpO1xuICAgIGxheW91dHMuYWRkQm94KGNoYXJ0LCB0aXRsZSk7XG4gICAgbWFwLnNldChjaGFydCwgdGl0bGUpO1xuICB9LFxuICBzdG9wKGNoYXJ0KSB7XG4gICAgbGF5b3V0cy5yZW1vdmVCb3goY2hhcnQsIG1hcC5nZXQoY2hhcnQpKTtcbiAgICBtYXAuZGVsZXRlKGNoYXJ0KTtcbiAgfSxcbiAgYmVmb3JlVXBkYXRlKGNoYXJ0LCBfYXJncywgb3B0aW9ucykge1xuICAgIGNvbnN0IHRpdGxlID0gbWFwLmdldChjaGFydCk7XG4gICAgbGF5b3V0cy5jb25maWd1cmUoY2hhcnQsIHRpdGxlLCBvcHRpb25zKTtcbiAgICB0aXRsZS5vcHRpb25zID0gb3B0aW9ucztcbiAgfSxcbiAgZGVmYXVsdHM6IHtcbiAgICBhbGlnbjogJ2NlbnRlcicsXG4gICAgZGlzcGxheTogZmFsc2UsXG4gICAgZm9udDoge1xuICAgICAgd2VpZ2h0OiAnbm9ybWFsJyxcbiAgICB9LFxuICAgIGZ1bGxTaXplOiB0cnVlLFxuICAgIHBhZGRpbmc6IDAsXG4gICAgcG9zaXRpb246ICd0b3AnLFxuICAgIHRleHQ6ICcnLFxuICAgIHdlaWdodDogMTUwMFxuICB9LFxuICBkZWZhdWx0Um91dGVzOiB7XG4gICAgY29sb3I6ICdjb2xvcidcbiAgfSxcbiAgZGVzY3JpcHRvcnM6IHtcbiAgICBfc2NyaXB0YWJsZTogdHJ1ZSxcbiAgICBfaW5kZXhhYmxlOiBmYWxzZSxcbiAgfSxcbn07XG5cbmNvbnN0IHBvc2l0aW9uZXJzID0ge1xuICBhdmVyYWdlKGl0ZW1zKSB7XG4gICAgaWYgKCFpdGVtcy5sZW5ndGgpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgbGV0IGksIGxlbjtcbiAgICBsZXQgeCA9IDA7XG4gICAgbGV0IHkgPSAwO1xuICAgIGxldCBjb3VudCA9IDA7XG4gICAgZm9yIChpID0gMCwgbGVuID0gaXRlbXMubGVuZ3RoOyBpIDwgbGVuOyArK2kpIHtcbiAgICAgIGNvbnN0IGVsID0gaXRlbXNbaV0uZWxlbWVudDtcbiAgICAgIGlmIChlbCAmJiBlbC5oYXNWYWx1ZSgpKSB7XG4gICAgICAgIGNvbnN0IHBvcyA9IGVsLnRvb2x0aXBQb3NpdGlvbigpO1xuICAgICAgICB4ICs9IHBvcy54O1xuICAgICAgICB5ICs9IHBvcy55O1xuICAgICAgICArK2NvdW50O1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgeDogeCAvIGNvdW50LFxuICAgICAgeTogeSAvIGNvdW50XG4gICAgfTtcbiAgfSxcbiAgbmVhcmVzdChpdGVtcywgZXZlbnRQb3NpdGlvbikge1xuICAgIGlmICghaXRlbXMubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGxldCB4ID0gZXZlbnRQb3NpdGlvbi54O1xuICAgIGxldCB5ID0gZXZlbnRQb3NpdGlvbi55O1xuICAgIGxldCBtaW5EaXN0YW5jZSA9IE51bWJlci5QT1NJVElWRV9JTkZJTklUWTtcbiAgICBsZXQgaSwgbGVuLCBuZWFyZXN0RWxlbWVudDtcbiAgICBmb3IgKGkgPSAwLCBsZW4gPSBpdGVtcy5sZW5ndGg7IGkgPCBsZW47ICsraSkge1xuICAgICAgY29uc3QgZWwgPSBpdGVtc1tpXS5lbGVtZW50O1xuICAgICAgaWYgKGVsICYmIGVsLmhhc1ZhbHVlKCkpIHtcbiAgICAgICAgY29uc3QgY2VudGVyID0gZWwuZ2V0Q2VudGVyUG9pbnQoKTtcbiAgICAgICAgY29uc3QgZCA9IGRpc3RhbmNlQmV0d2VlblBvaW50cyhldmVudFBvc2l0aW9uLCBjZW50ZXIpO1xuICAgICAgICBpZiAoZCA8IG1pbkRpc3RhbmNlKSB7XG4gICAgICAgICAgbWluRGlzdGFuY2UgPSBkO1xuICAgICAgICAgIG5lYXJlc3RFbGVtZW50ID0gZWw7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKG5lYXJlc3RFbGVtZW50KSB7XG4gICAgICBjb25zdCB0cCA9IG5lYXJlc3RFbGVtZW50LnRvb2x0aXBQb3NpdGlvbigpO1xuICAgICAgeCA9IHRwLng7XG4gICAgICB5ID0gdHAueTtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgIHgsXG4gICAgICB5XG4gICAgfTtcbiAgfVxufTtcbmZ1bmN0aW9uIHB1c2hPckNvbmNhdChiYXNlLCB0b1B1c2gpIHtcbiAgaWYgKHRvUHVzaCkge1xuICAgIGlmIChpc0FycmF5KHRvUHVzaCkpIHtcbiAgICAgIEFycmF5LnByb3RvdHlwZS5wdXNoLmFwcGx5KGJhc2UsIHRvUHVzaCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGJhc2UucHVzaCh0b1B1c2gpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gYmFzZTtcbn1cbmZ1bmN0aW9uIHNwbGl0TmV3bGluZXMoc3RyKSB7XG4gIGlmICgodHlwZW9mIHN0ciA9PT0gJ3N0cmluZycgfHwgc3RyIGluc3RhbmNlb2YgU3RyaW5nKSAmJiBzdHIuaW5kZXhPZignXFxuJykgPiAtMSkge1xuICAgIHJldHVybiBzdHIuc3BsaXQoJ1xcbicpO1xuICB9XG4gIHJldHVybiBzdHI7XG59XG5mdW5jdGlvbiBjcmVhdGVUb29sdGlwSXRlbShjaGFydCwgaXRlbSkge1xuICBjb25zdCB7ZWxlbWVudCwgZGF0YXNldEluZGV4LCBpbmRleH0gPSBpdGVtO1xuICBjb25zdCBjb250cm9sbGVyID0gY2hhcnQuZ2V0RGF0YXNldE1ldGEoZGF0YXNldEluZGV4KS5jb250cm9sbGVyO1xuICBjb25zdCB7bGFiZWwsIHZhbHVlfSA9IGNvbnRyb2xsZXIuZ2V0TGFiZWxBbmRWYWx1ZShpbmRleCk7XG4gIHJldHVybiB7XG4gICAgY2hhcnQsXG4gICAgbGFiZWwsXG4gICAgcGFyc2VkOiBjb250cm9sbGVyLmdldFBhcnNlZChpbmRleCksXG4gICAgcmF3OiBjaGFydC5kYXRhLmRhdGFzZXRzW2RhdGFzZXRJbmRleF0uZGF0YVtpbmRleF0sXG4gICAgZm9ybWF0dGVkVmFsdWU6IHZhbHVlLFxuICAgIGRhdGFzZXQ6IGNvbnRyb2xsZXIuZ2V0RGF0YXNldCgpLFxuICAgIGRhdGFJbmRleDogaW5kZXgsXG4gICAgZGF0YXNldEluZGV4LFxuICAgIGVsZW1lbnRcbiAgfTtcbn1cbmZ1bmN0aW9uIGdldFRvb2x0aXBTaXplKHRvb2x0aXAsIG9wdGlvbnMpIHtcbiAgY29uc3QgY3R4ID0gdG9vbHRpcC5jaGFydC5jdHg7XG4gIGNvbnN0IHtib2R5LCBmb290ZXIsIHRpdGxlfSA9IHRvb2x0aXA7XG4gIGNvbnN0IHtib3hXaWR0aCwgYm94SGVpZ2h0fSA9IG9wdGlvbnM7XG4gIGNvbnN0IGJvZHlGb250ID0gdG9Gb250KG9wdGlvbnMuYm9keUZvbnQpO1xuICBjb25zdCB0aXRsZUZvbnQgPSB0b0ZvbnQob3B0aW9ucy50aXRsZUZvbnQpO1xuICBjb25zdCBmb290ZXJGb250ID0gdG9Gb250KG9wdGlvbnMuZm9vdGVyRm9udCk7XG4gIGNvbnN0IHRpdGxlTGluZUNvdW50ID0gdGl0bGUubGVuZ3RoO1xuICBjb25zdCBmb290ZXJMaW5lQ291bnQgPSBmb290ZXIubGVuZ3RoO1xuICBjb25zdCBib2R5TGluZUl0ZW1Db3VudCA9IGJvZHkubGVuZ3RoO1xuICBjb25zdCBwYWRkaW5nID0gdG9QYWRkaW5nKG9wdGlvbnMucGFkZGluZyk7XG4gIGxldCBoZWlnaHQgPSBwYWRkaW5nLmhlaWdodDtcbiAgbGV0IHdpZHRoID0gMDtcbiAgbGV0IGNvbWJpbmVkQm9keUxlbmd0aCA9IGJvZHkucmVkdWNlKChjb3VudCwgYm9keUl0ZW0pID0+IGNvdW50ICsgYm9keUl0ZW0uYmVmb3JlLmxlbmd0aCArIGJvZHlJdGVtLmxpbmVzLmxlbmd0aCArIGJvZHlJdGVtLmFmdGVyLmxlbmd0aCwgMCk7XG4gIGNvbWJpbmVkQm9keUxlbmd0aCArPSB0b29sdGlwLmJlZm9yZUJvZHkubGVuZ3RoICsgdG9vbHRpcC5hZnRlckJvZHkubGVuZ3RoO1xuICBpZiAodGl0bGVMaW5lQ291bnQpIHtcbiAgICBoZWlnaHQgKz0gdGl0bGVMaW5lQ291bnQgKiB0aXRsZUZvbnQubGluZUhlaWdodFxuXHRcdFx0KyAodGl0bGVMaW5lQ291bnQgLSAxKSAqIG9wdGlvbnMudGl0bGVTcGFjaW5nXG5cdFx0XHQrIG9wdGlvbnMudGl0bGVNYXJnaW5Cb3R0b207XG4gIH1cbiAgaWYgKGNvbWJpbmVkQm9keUxlbmd0aCkge1xuICAgIGNvbnN0IGJvZHlMaW5lSGVpZ2h0ID0gb3B0aW9ucy5kaXNwbGF5Q29sb3JzID8gTWF0aC5tYXgoYm94SGVpZ2h0LCBib2R5Rm9udC5saW5lSGVpZ2h0KSA6IGJvZHlGb250LmxpbmVIZWlnaHQ7XG4gICAgaGVpZ2h0ICs9IGJvZHlMaW5lSXRlbUNvdW50ICogYm9keUxpbmVIZWlnaHRcblx0XHRcdCsgKGNvbWJpbmVkQm9keUxlbmd0aCAtIGJvZHlMaW5lSXRlbUNvdW50KSAqIGJvZHlGb250LmxpbmVIZWlnaHRcblx0XHRcdCsgKGNvbWJpbmVkQm9keUxlbmd0aCAtIDEpICogb3B0aW9ucy5ib2R5U3BhY2luZztcbiAgfVxuICBpZiAoZm9vdGVyTGluZUNvdW50KSB7XG4gICAgaGVpZ2h0ICs9IG9wdGlvbnMuZm9vdGVyTWFyZ2luVG9wXG5cdFx0XHQrIGZvb3RlckxpbmVDb3VudCAqIGZvb3RlckZvbnQubGluZUhlaWdodFxuXHRcdFx0KyAoZm9vdGVyTGluZUNvdW50IC0gMSkgKiBvcHRpb25zLmZvb3RlclNwYWNpbmc7XG4gIH1cbiAgbGV0IHdpZHRoUGFkZGluZyA9IDA7XG4gIGNvbnN0IG1heExpbmVXaWR0aCA9IGZ1bmN0aW9uKGxpbmUpIHtcbiAgICB3aWR0aCA9IE1hdGgubWF4KHdpZHRoLCBjdHgubWVhc3VyZVRleHQobGluZSkud2lkdGggKyB3aWR0aFBhZGRpbmcpO1xuICB9O1xuICBjdHguc2F2ZSgpO1xuICBjdHguZm9udCA9IHRpdGxlRm9udC5zdHJpbmc7XG4gIGVhY2godG9vbHRpcC50aXRsZSwgbWF4TGluZVdpZHRoKTtcbiAgY3R4LmZvbnQgPSBib2R5Rm9udC5zdHJpbmc7XG4gIGVhY2godG9vbHRpcC5iZWZvcmVCb2R5LmNvbmNhdCh0b29sdGlwLmFmdGVyQm9keSksIG1heExpbmVXaWR0aCk7XG4gIHdpZHRoUGFkZGluZyA9IG9wdGlvbnMuZGlzcGxheUNvbG9ycyA/IChib3hXaWR0aCArIDIgKyBvcHRpb25zLmJveFBhZGRpbmcpIDogMDtcbiAgZWFjaChib2R5LCAoYm9keUl0ZW0pID0+IHtcbiAgICBlYWNoKGJvZHlJdGVtLmJlZm9yZSwgbWF4TGluZVdpZHRoKTtcbiAgICBlYWNoKGJvZHlJdGVtLmxpbmVzLCBtYXhMaW5lV2lkdGgpO1xuICAgIGVhY2goYm9keUl0ZW0uYWZ0ZXIsIG1heExpbmVXaWR0aCk7XG4gIH0pO1xuICB3aWR0aFBhZGRpbmcgPSAwO1xuICBjdHguZm9udCA9IGZvb3RlckZvbnQuc3RyaW5nO1xuICBlYWNoKHRvb2x0aXAuZm9vdGVyLCBtYXhMaW5lV2lkdGgpO1xuICBjdHgucmVzdG9yZSgpO1xuICB3aWR0aCArPSBwYWRkaW5nLndpZHRoO1xuICByZXR1cm4ge3dpZHRoLCBoZWlnaHR9O1xufVxuZnVuY3Rpb24gZGV0ZXJtaW5lWUFsaWduKGNoYXJ0LCBzaXplKSB7XG4gIGNvbnN0IHt5LCBoZWlnaHR9ID0gc2l6ZTtcbiAgaWYgKHkgPCBoZWlnaHQgLyAyKSB7XG4gICAgcmV0dXJuICd0b3AnO1xuICB9IGVsc2UgaWYgKHkgPiAoY2hhcnQuaGVpZ2h0IC0gaGVpZ2h0IC8gMikpIHtcbiAgICByZXR1cm4gJ2JvdHRvbSc7XG4gIH1cbiAgcmV0dXJuICdjZW50ZXInO1xufVxuZnVuY3Rpb24gZG9lc05vdEZpdFdpdGhBbGlnbih4QWxpZ24sIGNoYXJ0LCBvcHRpb25zLCBzaXplKSB7XG4gIGNvbnN0IHt4LCB3aWR0aH0gPSBzaXplO1xuICBjb25zdCBjYXJldCA9IG9wdGlvbnMuY2FyZXRTaXplICsgb3B0aW9ucy5jYXJldFBhZGRpbmc7XG4gIGlmICh4QWxpZ24gPT09ICdsZWZ0JyAmJiB4ICsgd2lkdGggKyBjYXJldCA+IGNoYXJ0LndpZHRoKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgaWYgKHhBbGlnbiA9PT0gJ3JpZ2h0JyAmJiB4IC0gd2lkdGggLSBjYXJldCA8IDApIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxufVxuZnVuY3Rpb24gZGV0ZXJtaW5lWEFsaWduKGNoYXJ0LCBvcHRpb25zLCBzaXplLCB5QWxpZ24pIHtcbiAgY29uc3Qge3gsIHdpZHRofSA9IHNpemU7XG4gIGNvbnN0IHt3aWR0aDogY2hhcnRXaWR0aCwgY2hhcnRBcmVhOiB7bGVmdCwgcmlnaHR9fSA9IGNoYXJ0O1xuICBsZXQgeEFsaWduID0gJ2NlbnRlcic7XG4gIGlmICh5QWxpZ24gPT09ICdjZW50ZXInKSB7XG4gICAgeEFsaWduID0geCA8PSAobGVmdCArIHJpZ2h0KSAvIDIgPyAnbGVmdCcgOiAncmlnaHQnO1xuICB9IGVsc2UgaWYgKHggPD0gd2lkdGggLyAyKSB7XG4gICAgeEFsaWduID0gJ2xlZnQnO1xuICB9IGVsc2UgaWYgKHggPj0gY2hhcnRXaWR0aCAtIHdpZHRoIC8gMikge1xuICAgIHhBbGlnbiA9ICdyaWdodCc7XG4gIH1cbiAgaWYgKGRvZXNOb3RGaXRXaXRoQWxpZ24oeEFsaWduLCBjaGFydCwgb3B0aW9ucywgc2l6ZSkpIHtcbiAgICB4QWxpZ24gPSAnY2VudGVyJztcbiAgfVxuICByZXR1cm4geEFsaWduO1xufVxuZnVuY3Rpb24gZGV0ZXJtaW5lQWxpZ25tZW50KGNoYXJ0LCBvcHRpb25zLCBzaXplKSB7XG4gIGNvbnN0IHlBbGlnbiA9IHNpemUueUFsaWduIHx8IG9wdGlvbnMueUFsaWduIHx8IGRldGVybWluZVlBbGlnbihjaGFydCwgc2l6ZSk7XG4gIHJldHVybiB7XG4gICAgeEFsaWduOiBzaXplLnhBbGlnbiB8fCBvcHRpb25zLnhBbGlnbiB8fCBkZXRlcm1pbmVYQWxpZ24oY2hhcnQsIG9wdGlvbnMsIHNpemUsIHlBbGlnbiksXG4gICAgeUFsaWduXG4gIH07XG59XG5mdW5jdGlvbiBhbGlnblgoc2l6ZSwgeEFsaWduKSB7XG4gIGxldCB7eCwgd2lkdGh9ID0gc2l6ZTtcbiAgaWYgKHhBbGlnbiA9PT0gJ3JpZ2h0Jykge1xuICAgIHggLT0gd2lkdGg7XG4gIH0gZWxzZSBpZiAoeEFsaWduID09PSAnY2VudGVyJykge1xuICAgIHggLT0gKHdpZHRoIC8gMik7XG4gIH1cbiAgcmV0dXJuIHg7XG59XG5mdW5jdGlvbiBhbGlnblkoc2l6ZSwgeUFsaWduLCBwYWRkaW5nQW5kU2l6ZSkge1xuICBsZXQge3ksIGhlaWdodH0gPSBzaXplO1xuICBpZiAoeUFsaWduID09PSAndG9wJykge1xuICAgIHkgKz0gcGFkZGluZ0FuZFNpemU7XG4gIH0gZWxzZSBpZiAoeUFsaWduID09PSAnYm90dG9tJykge1xuICAgIHkgLT0gaGVpZ2h0ICsgcGFkZGluZ0FuZFNpemU7XG4gIH0gZWxzZSB7XG4gICAgeSAtPSAoaGVpZ2h0IC8gMik7XG4gIH1cbiAgcmV0dXJuIHk7XG59XG5mdW5jdGlvbiBnZXRCYWNrZ3JvdW5kUG9pbnQob3B0aW9ucywgc2l6ZSwgYWxpZ25tZW50LCBjaGFydCkge1xuICBjb25zdCB7Y2FyZXRTaXplLCBjYXJldFBhZGRpbmcsIGNvcm5lclJhZGl1c30gPSBvcHRpb25zO1xuICBjb25zdCB7eEFsaWduLCB5QWxpZ259ID0gYWxpZ25tZW50O1xuICBjb25zdCBwYWRkaW5nQW5kU2l6ZSA9IGNhcmV0U2l6ZSArIGNhcmV0UGFkZGluZztcbiAgY29uc3Qge3RvcExlZnQsIHRvcFJpZ2h0LCBib3R0b21MZWZ0LCBib3R0b21SaWdodH0gPSB0b1RSQkxDb3JuZXJzKGNvcm5lclJhZGl1cyk7XG4gIGxldCB4ID0gYWxpZ25YKHNpemUsIHhBbGlnbik7XG4gIGNvbnN0IHkgPSBhbGlnblkoc2l6ZSwgeUFsaWduLCBwYWRkaW5nQW5kU2l6ZSk7XG4gIGlmICh5QWxpZ24gPT09ICdjZW50ZXInKSB7XG4gICAgaWYgKHhBbGlnbiA9PT0gJ2xlZnQnKSB7XG4gICAgICB4ICs9IHBhZGRpbmdBbmRTaXplO1xuICAgIH0gZWxzZSBpZiAoeEFsaWduID09PSAncmlnaHQnKSB7XG4gICAgICB4IC09IHBhZGRpbmdBbmRTaXplO1xuICAgIH1cbiAgfSBlbHNlIGlmICh4QWxpZ24gPT09ICdsZWZ0Jykge1xuICAgIHggLT0gTWF0aC5tYXgodG9wTGVmdCwgYm90dG9tTGVmdCkgKyBjYXJldFNpemU7XG4gIH0gZWxzZSBpZiAoeEFsaWduID09PSAncmlnaHQnKSB7XG4gICAgeCArPSBNYXRoLm1heCh0b3BSaWdodCwgYm90dG9tUmlnaHQpICsgY2FyZXRTaXplO1xuICB9XG4gIHJldHVybiB7XG4gICAgeDogX2xpbWl0VmFsdWUoeCwgMCwgY2hhcnQud2lkdGggLSBzaXplLndpZHRoKSxcbiAgICB5OiBfbGltaXRWYWx1ZSh5LCAwLCBjaGFydC5oZWlnaHQgLSBzaXplLmhlaWdodClcbiAgfTtcbn1cbmZ1bmN0aW9uIGdldEFsaWduZWRYKHRvb2x0aXAsIGFsaWduLCBvcHRpb25zKSB7XG4gIGNvbnN0IHBhZGRpbmcgPSB0b1BhZGRpbmcob3B0aW9ucy5wYWRkaW5nKTtcbiAgcmV0dXJuIGFsaWduID09PSAnY2VudGVyJ1xuICAgID8gdG9vbHRpcC54ICsgdG9vbHRpcC53aWR0aCAvIDJcbiAgICA6IGFsaWduID09PSAncmlnaHQnXG4gICAgICA/IHRvb2x0aXAueCArIHRvb2x0aXAud2lkdGggLSBwYWRkaW5nLnJpZ2h0XG4gICAgICA6IHRvb2x0aXAueCArIHBhZGRpbmcubGVmdDtcbn1cbmZ1bmN0aW9uIGdldEJlZm9yZUFmdGVyQm9keUxpbmVzKGNhbGxiYWNrKSB7XG4gIHJldHVybiBwdXNoT3JDb25jYXQoW10sIHNwbGl0TmV3bGluZXMoY2FsbGJhY2spKTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZVRvb2x0aXBDb250ZXh0KHBhcmVudCwgdG9vbHRpcCwgdG9vbHRpcEl0ZW1zKSB7XG4gIHJldHVybiBjcmVhdGVDb250ZXh0KHBhcmVudCwge1xuICAgIHRvb2x0aXAsXG4gICAgdG9vbHRpcEl0ZW1zLFxuICAgIHR5cGU6ICd0b29sdGlwJ1xuICB9KTtcbn1cbmZ1bmN0aW9uIG92ZXJyaWRlQ2FsbGJhY2tzKGNhbGxiYWNrcywgY29udGV4dCkge1xuICBjb25zdCBvdmVycmlkZSA9IGNvbnRleHQgJiYgY29udGV4dC5kYXRhc2V0ICYmIGNvbnRleHQuZGF0YXNldC50b29sdGlwICYmIGNvbnRleHQuZGF0YXNldC50b29sdGlwLmNhbGxiYWNrcztcbiAgcmV0dXJuIG92ZXJyaWRlID8gY2FsbGJhY2tzLm92ZXJyaWRlKG92ZXJyaWRlKSA6IGNhbGxiYWNrcztcbn1cbmNsYXNzIFRvb2x0aXAgZXh0ZW5kcyBFbGVtZW50IHtcbiAgY29uc3RydWN0b3IoY29uZmlnKSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLm9wYWNpdHkgPSAwO1xuICAgIHRoaXMuX2FjdGl2ZSA9IFtdO1xuICAgIHRoaXMuX2V2ZW50UG9zaXRpb24gPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5fc2l6ZSA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLl9jYWNoZWRBbmltYXRpb25zID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuX3Rvb2x0aXBJdGVtcyA9IFtdO1xuICAgIHRoaXMuJGFuaW1hdGlvbnMgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy4kY29udGV4dCA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLmNoYXJ0ID0gY29uZmlnLmNoYXJ0IHx8IGNvbmZpZy5fY2hhcnQ7XG4gICAgdGhpcy5fY2hhcnQgPSB0aGlzLmNoYXJ0O1xuICAgIHRoaXMub3B0aW9ucyA9IGNvbmZpZy5vcHRpb25zO1xuICAgIHRoaXMuZGF0YVBvaW50cyA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLnRpdGxlID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuYmVmb3JlQm9keSA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLmJvZHkgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5hZnRlckJvZHkgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5mb290ZXIgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy54QWxpZ24gPSB1bmRlZmluZWQ7XG4gICAgdGhpcy55QWxpZ24gPSB1bmRlZmluZWQ7XG4gICAgdGhpcy54ID0gdW5kZWZpbmVkO1xuICAgIHRoaXMueSA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLmhlaWdodCA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLndpZHRoID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuY2FyZXRYID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuY2FyZXRZID0gdW5kZWZpbmVkO1xuICAgIHRoaXMubGFiZWxDb2xvcnMgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5sYWJlbFBvaW50U3R5bGVzID0gdW5kZWZpbmVkO1xuICAgIHRoaXMubGFiZWxUZXh0Q29sb3JzID0gdW5kZWZpbmVkO1xuICB9XG4gIGluaXRpYWxpemUob3B0aW9ucykge1xuICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgdGhpcy5fY2FjaGVkQW5pbWF0aW9ucyA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLiRjb250ZXh0ID0gdW5kZWZpbmVkO1xuICB9XG4gIF9yZXNvbHZlQW5pbWF0aW9ucygpIHtcbiAgICBjb25zdCBjYWNoZWQgPSB0aGlzLl9jYWNoZWRBbmltYXRpb25zO1xuICAgIGlmIChjYWNoZWQpIHtcbiAgICAgIHJldHVybiBjYWNoZWQ7XG4gICAgfVxuICAgIGNvbnN0IGNoYXJ0ID0gdGhpcy5jaGFydDtcbiAgICBjb25zdCBvcHRpb25zID0gdGhpcy5vcHRpb25zLnNldENvbnRleHQodGhpcy5nZXRDb250ZXh0KCkpO1xuICAgIGNvbnN0IG9wdHMgPSBvcHRpb25zLmVuYWJsZWQgJiYgY2hhcnQub3B0aW9ucy5hbmltYXRpb24gJiYgb3B0aW9ucy5hbmltYXRpb25zO1xuICAgIGNvbnN0IGFuaW1hdGlvbnMgPSBuZXcgQW5pbWF0aW9ucyh0aGlzLmNoYXJ0LCBvcHRzKTtcbiAgICBpZiAob3B0cy5fY2FjaGVhYmxlKSB7XG4gICAgICB0aGlzLl9jYWNoZWRBbmltYXRpb25zID0gT2JqZWN0LmZyZWV6ZShhbmltYXRpb25zKTtcbiAgICB9XG4gICAgcmV0dXJuIGFuaW1hdGlvbnM7XG4gIH1cbiAgZ2V0Q29udGV4dCgpIHtcbiAgICByZXR1cm4gdGhpcy4kY29udGV4dCB8fFxuXHRcdFx0KHRoaXMuJGNvbnRleHQgPSBjcmVhdGVUb29sdGlwQ29udGV4dCh0aGlzLmNoYXJ0LmdldENvbnRleHQoKSwgdGhpcywgdGhpcy5fdG9vbHRpcEl0ZW1zKSk7XG4gIH1cbiAgZ2V0VGl0bGUoY29udGV4dCwgb3B0aW9ucykge1xuICAgIGNvbnN0IHtjYWxsYmFja3N9ID0gb3B0aW9ucztcbiAgICBjb25zdCBiZWZvcmVUaXRsZSA9IGNhbGxiYWNrcy5iZWZvcmVUaXRsZS5hcHBseSh0aGlzLCBbY29udGV4dF0pO1xuICAgIGNvbnN0IHRpdGxlID0gY2FsbGJhY2tzLnRpdGxlLmFwcGx5KHRoaXMsIFtjb250ZXh0XSk7XG4gICAgY29uc3QgYWZ0ZXJUaXRsZSA9IGNhbGxiYWNrcy5hZnRlclRpdGxlLmFwcGx5KHRoaXMsIFtjb250ZXh0XSk7XG4gICAgbGV0IGxpbmVzID0gW107XG4gICAgbGluZXMgPSBwdXNoT3JDb25jYXQobGluZXMsIHNwbGl0TmV3bGluZXMoYmVmb3JlVGl0bGUpKTtcbiAgICBsaW5lcyA9IHB1c2hPckNvbmNhdChsaW5lcywgc3BsaXROZXdsaW5lcyh0aXRsZSkpO1xuICAgIGxpbmVzID0gcHVzaE9yQ29uY2F0KGxpbmVzLCBzcGxpdE5ld2xpbmVzKGFmdGVyVGl0bGUpKTtcbiAgICByZXR1cm4gbGluZXM7XG4gIH1cbiAgZ2V0QmVmb3JlQm9keSh0b29sdGlwSXRlbXMsIG9wdGlvbnMpIHtcbiAgICByZXR1cm4gZ2V0QmVmb3JlQWZ0ZXJCb2R5TGluZXMob3B0aW9ucy5jYWxsYmFja3MuYmVmb3JlQm9keS5hcHBseSh0aGlzLCBbdG9vbHRpcEl0ZW1zXSkpO1xuICB9XG4gIGdldEJvZHkodG9vbHRpcEl0ZW1zLCBvcHRpb25zKSB7XG4gICAgY29uc3Qge2NhbGxiYWNrc30gPSBvcHRpb25zO1xuICAgIGNvbnN0IGJvZHlJdGVtcyA9IFtdO1xuICAgIGVhY2godG9vbHRpcEl0ZW1zLCAoY29udGV4dCkgPT4ge1xuICAgICAgY29uc3QgYm9keUl0ZW0gPSB7XG4gICAgICAgIGJlZm9yZTogW10sXG4gICAgICAgIGxpbmVzOiBbXSxcbiAgICAgICAgYWZ0ZXI6IFtdXG4gICAgICB9O1xuICAgICAgY29uc3Qgc2NvcGVkID0gb3ZlcnJpZGVDYWxsYmFja3MoY2FsbGJhY2tzLCBjb250ZXh0KTtcbiAgICAgIHB1c2hPckNvbmNhdChib2R5SXRlbS5iZWZvcmUsIHNwbGl0TmV3bGluZXMoc2NvcGVkLmJlZm9yZUxhYmVsLmNhbGwodGhpcywgY29udGV4dCkpKTtcbiAgICAgIHB1c2hPckNvbmNhdChib2R5SXRlbS5saW5lcywgc2NvcGVkLmxhYmVsLmNhbGwodGhpcywgY29udGV4dCkpO1xuICAgICAgcHVzaE9yQ29uY2F0KGJvZHlJdGVtLmFmdGVyLCBzcGxpdE5ld2xpbmVzKHNjb3BlZC5hZnRlckxhYmVsLmNhbGwodGhpcywgY29udGV4dCkpKTtcbiAgICAgIGJvZHlJdGVtcy5wdXNoKGJvZHlJdGVtKTtcbiAgICB9KTtcbiAgICByZXR1cm4gYm9keUl0ZW1zO1xuICB9XG4gIGdldEFmdGVyQm9keSh0b29sdGlwSXRlbXMsIG9wdGlvbnMpIHtcbiAgICByZXR1cm4gZ2V0QmVmb3JlQWZ0ZXJCb2R5TGluZXMob3B0aW9ucy5jYWxsYmFja3MuYWZ0ZXJCb2R5LmFwcGx5KHRoaXMsIFt0b29sdGlwSXRlbXNdKSk7XG4gIH1cbiAgZ2V0Rm9vdGVyKHRvb2x0aXBJdGVtcywgb3B0aW9ucykge1xuICAgIGNvbnN0IHtjYWxsYmFja3N9ID0gb3B0aW9ucztcbiAgICBjb25zdCBiZWZvcmVGb290ZXIgPSBjYWxsYmFja3MuYmVmb3JlRm9vdGVyLmFwcGx5KHRoaXMsIFt0b29sdGlwSXRlbXNdKTtcbiAgICBjb25zdCBmb290ZXIgPSBjYWxsYmFja3MuZm9vdGVyLmFwcGx5KHRoaXMsIFt0b29sdGlwSXRlbXNdKTtcbiAgICBjb25zdCBhZnRlckZvb3RlciA9IGNhbGxiYWNrcy5hZnRlckZvb3Rlci5hcHBseSh0aGlzLCBbdG9vbHRpcEl0ZW1zXSk7XG4gICAgbGV0IGxpbmVzID0gW107XG4gICAgbGluZXMgPSBwdXNoT3JDb25jYXQobGluZXMsIHNwbGl0TmV3bGluZXMoYmVmb3JlRm9vdGVyKSk7XG4gICAgbGluZXMgPSBwdXNoT3JDb25jYXQobGluZXMsIHNwbGl0TmV3bGluZXMoZm9vdGVyKSk7XG4gICAgbGluZXMgPSBwdXNoT3JDb25jYXQobGluZXMsIHNwbGl0TmV3bGluZXMoYWZ0ZXJGb290ZXIpKTtcbiAgICByZXR1cm4gbGluZXM7XG4gIH1cbiAgX2NyZWF0ZUl0ZW1zKG9wdGlvbnMpIHtcbiAgICBjb25zdCBhY3RpdmUgPSB0aGlzLl9hY3RpdmU7XG4gICAgY29uc3QgZGF0YSA9IHRoaXMuY2hhcnQuZGF0YTtcbiAgICBjb25zdCBsYWJlbENvbG9ycyA9IFtdO1xuICAgIGNvbnN0IGxhYmVsUG9pbnRTdHlsZXMgPSBbXTtcbiAgICBjb25zdCBsYWJlbFRleHRDb2xvcnMgPSBbXTtcbiAgICBsZXQgdG9vbHRpcEl0ZW1zID0gW107XG4gICAgbGV0IGksIGxlbjtcbiAgICBmb3IgKGkgPSAwLCBsZW4gPSBhY3RpdmUubGVuZ3RoOyBpIDwgbGVuOyArK2kpIHtcbiAgICAgIHRvb2x0aXBJdGVtcy5wdXNoKGNyZWF0ZVRvb2x0aXBJdGVtKHRoaXMuY2hhcnQsIGFjdGl2ZVtpXSkpO1xuICAgIH1cbiAgICBpZiAob3B0aW9ucy5maWx0ZXIpIHtcbiAgICAgIHRvb2x0aXBJdGVtcyA9IHRvb2x0aXBJdGVtcy5maWx0ZXIoKGVsZW1lbnQsIGluZGV4LCBhcnJheSkgPT4gb3B0aW9ucy5maWx0ZXIoZWxlbWVudCwgaW5kZXgsIGFycmF5LCBkYXRhKSk7XG4gICAgfVxuICAgIGlmIChvcHRpb25zLml0ZW1Tb3J0KSB7XG4gICAgICB0b29sdGlwSXRlbXMgPSB0b29sdGlwSXRlbXMuc29ydCgoYSwgYikgPT4gb3B0aW9ucy5pdGVtU29ydChhLCBiLCBkYXRhKSk7XG4gICAgfVxuICAgIGVhY2godG9vbHRpcEl0ZW1zLCAoY29udGV4dCkgPT4ge1xuICAgICAgY29uc3Qgc2NvcGVkID0gb3ZlcnJpZGVDYWxsYmFja3Mob3B0aW9ucy5jYWxsYmFja3MsIGNvbnRleHQpO1xuICAgICAgbGFiZWxDb2xvcnMucHVzaChzY29wZWQubGFiZWxDb2xvci5jYWxsKHRoaXMsIGNvbnRleHQpKTtcbiAgICAgIGxhYmVsUG9pbnRTdHlsZXMucHVzaChzY29wZWQubGFiZWxQb2ludFN0eWxlLmNhbGwodGhpcywgY29udGV4dCkpO1xuICAgICAgbGFiZWxUZXh0Q29sb3JzLnB1c2goc2NvcGVkLmxhYmVsVGV4dENvbG9yLmNhbGwodGhpcywgY29udGV4dCkpO1xuICAgIH0pO1xuICAgIHRoaXMubGFiZWxDb2xvcnMgPSBsYWJlbENvbG9ycztcbiAgICB0aGlzLmxhYmVsUG9pbnRTdHlsZXMgPSBsYWJlbFBvaW50U3R5bGVzO1xuICAgIHRoaXMubGFiZWxUZXh0Q29sb3JzID0gbGFiZWxUZXh0Q29sb3JzO1xuICAgIHRoaXMuZGF0YVBvaW50cyA9IHRvb2x0aXBJdGVtcztcbiAgICByZXR1cm4gdG9vbHRpcEl0ZW1zO1xuICB9XG4gIHVwZGF0ZShjaGFuZ2VkLCByZXBsYXkpIHtcbiAgICBjb25zdCBvcHRpb25zID0gdGhpcy5vcHRpb25zLnNldENvbnRleHQodGhpcy5nZXRDb250ZXh0KCkpO1xuICAgIGNvbnN0IGFjdGl2ZSA9IHRoaXMuX2FjdGl2ZTtcbiAgICBsZXQgcHJvcGVydGllcztcbiAgICBsZXQgdG9vbHRpcEl0ZW1zID0gW107XG4gICAgaWYgKCFhY3RpdmUubGVuZ3RoKSB7XG4gICAgICBpZiAodGhpcy5vcGFjaXR5ICE9PSAwKSB7XG4gICAgICAgIHByb3BlcnRpZXMgPSB7XG4gICAgICAgICAgb3BhY2l0eTogMFxuICAgICAgICB9O1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBwb3NpdGlvbiA9IHBvc2l0aW9uZXJzW29wdGlvbnMucG9zaXRpb25dLmNhbGwodGhpcywgYWN0aXZlLCB0aGlzLl9ldmVudFBvc2l0aW9uKTtcbiAgICAgIHRvb2x0aXBJdGVtcyA9IHRoaXMuX2NyZWF0ZUl0ZW1zKG9wdGlvbnMpO1xuICAgICAgdGhpcy50aXRsZSA9IHRoaXMuZ2V0VGl0bGUodG9vbHRpcEl0ZW1zLCBvcHRpb25zKTtcbiAgICAgIHRoaXMuYmVmb3JlQm9keSA9IHRoaXMuZ2V0QmVmb3JlQm9keSh0b29sdGlwSXRlbXMsIG9wdGlvbnMpO1xuICAgICAgdGhpcy5ib2R5ID0gdGhpcy5nZXRCb2R5KHRvb2x0aXBJdGVtcywgb3B0aW9ucyk7XG4gICAgICB0aGlzLmFmdGVyQm9keSA9IHRoaXMuZ2V0QWZ0ZXJCb2R5KHRvb2x0aXBJdGVtcywgb3B0aW9ucyk7XG4gICAgICB0aGlzLmZvb3RlciA9IHRoaXMuZ2V0Rm9vdGVyKHRvb2x0aXBJdGVtcywgb3B0aW9ucyk7XG4gICAgICBjb25zdCBzaXplID0gdGhpcy5fc2l6ZSA9IGdldFRvb2x0aXBTaXplKHRoaXMsIG9wdGlvbnMpO1xuICAgICAgY29uc3QgcG9zaXRpb25BbmRTaXplID0gT2JqZWN0LmFzc2lnbih7fSwgcG9zaXRpb24sIHNpemUpO1xuICAgICAgY29uc3QgYWxpZ25tZW50ID0gZGV0ZXJtaW5lQWxpZ25tZW50KHRoaXMuY2hhcnQsIG9wdGlvbnMsIHBvc2l0aW9uQW5kU2l6ZSk7XG4gICAgICBjb25zdCBiYWNrZ3JvdW5kUG9pbnQgPSBnZXRCYWNrZ3JvdW5kUG9pbnQob3B0aW9ucywgcG9zaXRpb25BbmRTaXplLCBhbGlnbm1lbnQsIHRoaXMuY2hhcnQpO1xuICAgICAgdGhpcy54QWxpZ24gPSBhbGlnbm1lbnQueEFsaWduO1xuICAgICAgdGhpcy55QWxpZ24gPSBhbGlnbm1lbnQueUFsaWduO1xuICAgICAgcHJvcGVydGllcyA9IHtcbiAgICAgICAgb3BhY2l0eTogMSxcbiAgICAgICAgeDogYmFja2dyb3VuZFBvaW50LngsXG4gICAgICAgIHk6IGJhY2tncm91bmRQb2ludC55LFxuICAgICAgICB3aWR0aDogc2l6ZS53aWR0aCxcbiAgICAgICAgaGVpZ2h0OiBzaXplLmhlaWdodCxcbiAgICAgICAgY2FyZXRYOiBwb3NpdGlvbi54LFxuICAgICAgICBjYXJldFk6IHBvc2l0aW9uLnlcbiAgICAgIH07XG4gICAgfVxuICAgIHRoaXMuX3Rvb2x0aXBJdGVtcyA9IHRvb2x0aXBJdGVtcztcbiAgICB0aGlzLiRjb250ZXh0ID0gdW5kZWZpbmVkO1xuICAgIGlmIChwcm9wZXJ0aWVzKSB7XG4gICAgICB0aGlzLl9yZXNvbHZlQW5pbWF0aW9ucygpLnVwZGF0ZSh0aGlzLCBwcm9wZXJ0aWVzKTtcbiAgICB9XG4gICAgaWYgKGNoYW5nZWQgJiYgb3B0aW9ucy5leHRlcm5hbCkge1xuICAgICAgb3B0aW9ucy5leHRlcm5hbC5jYWxsKHRoaXMsIHtjaGFydDogdGhpcy5jaGFydCwgdG9vbHRpcDogdGhpcywgcmVwbGF5fSk7XG4gICAgfVxuICB9XG4gIGRyYXdDYXJldCh0b29sdGlwUG9pbnQsIGN0eCwgc2l6ZSwgb3B0aW9ucykge1xuICAgIGNvbnN0IGNhcmV0UG9zaXRpb24gPSB0aGlzLmdldENhcmV0UG9zaXRpb24odG9vbHRpcFBvaW50LCBzaXplLCBvcHRpb25zKTtcbiAgICBjdHgubGluZVRvKGNhcmV0UG9zaXRpb24ueDEsIGNhcmV0UG9zaXRpb24ueTEpO1xuICAgIGN0eC5saW5lVG8oY2FyZXRQb3NpdGlvbi54MiwgY2FyZXRQb3NpdGlvbi55Mik7XG4gICAgY3R4LmxpbmVUbyhjYXJldFBvc2l0aW9uLngzLCBjYXJldFBvc2l0aW9uLnkzKTtcbiAgfVxuICBnZXRDYXJldFBvc2l0aW9uKHRvb2x0aXBQb2ludCwgc2l6ZSwgb3B0aW9ucykge1xuICAgIGNvbnN0IHt4QWxpZ24sIHlBbGlnbn0gPSB0aGlzO1xuICAgIGNvbnN0IHtjYXJldFNpemUsIGNvcm5lclJhZGl1c30gPSBvcHRpb25zO1xuICAgIGNvbnN0IHt0b3BMZWZ0LCB0b3BSaWdodCwgYm90dG9tTGVmdCwgYm90dG9tUmlnaHR9ID0gdG9UUkJMQ29ybmVycyhjb3JuZXJSYWRpdXMpO1xuICAgIGNvbnN0IHt4OiBwdFgsIHk6IHB0WX0gPSB0b29sdGlwUG9pbnQ7XG4gICAgY29uc3Qge3dpZHRoLCBoZWlnaHR9ID0gc2l6ZTtcbiAgICBsZXQgeDEsIHgyLCB4MywgeTEsIHkyLCB5MztcbiAgICBpZiAoeUFsaWduID09PSAnY2VudGVyJykge1xuICAgICAgeTIgPSBwdFkgKyAoaGVpZ2h0IC8gMik7XG4gICAgICBpZiAoeEFsaWduID09PSAnbGVmdCcpIHtcbiAgICAgICAgeDEgPSBwdFg7XG4gICAgICAgIHgyID0geDEgLSBjYXJldFNpemU7XG4gICAgICAgIHkxID0geTIgKyBjYXJldFNpemU7XG4gICAgICAgIHkzID0geTIgLSBjYXJldFNpemU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB4MSA9IHB0WCArIHdpZHRoO1xuICAgICAgICB4MiA9IHgxICsgY2FyZXRTaXplO1xuICAgICAgICB5MSA9IHkyIC0gY2FyZXRTaXplO1xuICAgICAgICB5MyA9IHkyICsgY2FyZXRTaXplO1xuICAgICAgfVxuICAgICAgeDMgPSB4MTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHhBbGlnbiA9PT0gJ2xlZnQnKSB7XG4gICAgICAgIHgyID0gcHRYICsgTWF0aC5tYXgodG9wTGVmdCwgYm90dG9tTGVmdCkgKyAoY2FyZXRTaXplKTtcbiAgICAgIH0gZWxzZSBpZiAoeEFsaWduID09PSAncmlnaHQnKSB7XG4gICAgICAgIHgyID0gcHRYICsgd2lkdGggLSBNYXRoLm1heCh0b3BSaWdodCwgYm90dG9tUmlnaHQpIC0gY2FyZXRTaXplO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgeDIgPSB0aGlzLmNhcmV0WDtcbiAgICAgIH1cbiAgICAgIGlmICh5QWxpZ24gPT09ICd0b3AnKSB7XG4gICAgICAgIHkxID0gcHRZO1xuICAgICAgICB5MiA9IHkxIC0gY2FyZXRTaXplO1xuICAgICAgICB4MSA9IHgyIC0gY2FyZXRTaXplO1xuICAgICAgICB4MyA9IHgyICsgY2FyZXRTaXplO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgeTEgPSBwdFkgKyBoZWlnaHQ7XG4gICAgICAgIHkyID0geTEgKyBjYXJldFNpemU7XG4gICAgICAgIHgxID0geDIgKyBjYXJldFNpemU7XG4gICAgICAgIHgzID0geDIgLSBjYXJldFNpemU7XG4gICAgICB9XG4gICAgICB5MyA9IHkxO1xuICAgIH1cbiAgICByZXR1cm4ge3gxLCB4MiwgeDMsIHkxLCB5MiwgeTN9O1xuICB9XG4gIGRyYXdUaXRsZShwdCwgY3R4LCBvcHRpb25zKSB7XG4gICAgY29uc3QgdGl0bGUgPSB0aGlzLnRpdGxlO1xuICAgIGNvbnN0IGxlbmd0aCA9IHRpdGxlLmxlbmd0aDtcbiAgICBsZXQgdGl0bGVGb250LCB0aXRsZVNwYWNpbmcsIGk7XG4gICAgaWYgKGxlbmd0aCkge1xuICAgICAgY29uc3QgcnRsSGVscGVyID0gZ2V0UnRsQWRhcHRlcihvcHRpb25zLnJ0bCwgdGhpcy54LCB0aGlzLndpZHRoKTtcbiAgICAgIHB0LnggPSBnZXRBbGlnbmVkWCh0aGlzLCBvcHRpb25zLnRpdGxlQWxpZ24sIG9wdGlvbnMpO1xuICAgICAgY3R4LnRleHRBbGlnbiA9IHJ0bEhlbHBlci50ZXh0QWxpZ24ob3B0aW9ucy50aXRsZUFsaWduKTtcbiAgICAgIGN0eC50ZXh0QmFzZWxpbmUgPSAnbWlkZGxlJztcbiAgICAgIHRpdGxlRm9udCA9IHRvRm9udChvcHRpb25zLnRpdGxlRm9udCk7XG4gICAgICB0aXRsZVNwYWNpbmcgPSBvcHRpb25zLnRpdGxlU3BhY2luZztcbiAgICAgIGN0eC5maWxsU3R5bGUgPSBvcHRpb25zLnRpdGxlQ29sb3I7XG4gICAgICBjdHguZm9udCA9IHRpdGxlRm9udC5zdHJpbmc7XG4gICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHtcbiAgICAgICAgY3R4LmZpbGxUZXh0KHRpdGxlW2ldLCBydGxIZWxwZXIueChwdC54KSwgcHQueSArIHRpdGxlRm9udC5saW5lSGVpZ2h0IC8gMik7XG4gICAgICAgIHB0LnkgKz0gdGl0bGVGb250LmxpbmVIZWlnaHQgKyB0aXRsZVNwYWNpbmc7XG4gICAgICAgIGlmIChpICsgMSA9PT0gbGVuZ3RoKSB7XG4gICAgICAgICAgcHQueSArPSBvcHRpb25zLnRpdGxlTWFyZ2luQm90dG9tIC0gdGl0bGVTcGFjaW5nO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG4gIF9kcmF3Q29sb3JCb3goY3R4LCBwdCwgaSwgcnRsSGVscGVyLCBvcHRpb25zKSB7XG4gICAgY29uc3QgbGFiZWxDb2xvcnMgPSB0aGlzLmxhYmVsQ29sb3JzW2ldO1xuICAgIGNvbnN0IGxhYmVsUG9pbnRTdHlsZSA9IHRoaXMubGFiZWxQb2ludFN0eWxlc1tpXTtcbiAgICBjb25zdCB7Ym94SGVpZ2h0LCBib3hXaWR0aCwgYm94UGFkZGluZ30gPSBvcHRpb25zO1xuICAgIGNvbnN0IGJvZHlGb250ID0gdG9Gb250KG9wdGlvbnMuYm9keUZvbnQpO1xuICAgIGNvbnN0IGNvbG9yWCA9IGdldEFsaWduZWRYKHRoaXMsICdsZWZ0Jywgb3B0aW9ucyk7XG4gICAgY29uc3QgcnRsQ29sb3JYID0gcnRsSGVscGVyLngoY29sb3JYKTtcbiAgICBjb25zdCB5T2ZmU2V0ID0gYm94SGVpZ2h0IDwgYm9keUZvbnQubGluZUhlaWdodCA/IChib2R5Rm9udC5saW5lSGVpZ2h0IC0gYm94SGVpZ2h0KSAvIDIgOiAwO1xuICAgIGNvbnN0IGNvbG9yWSA9IHB0LnkgKyB5T2ZmU2V0O1xuICAgIGlmIChvcHRpb25zLnVzZVBvaW50U3R5bGUpIHtcbiAgICAgIGNvbnN0IGRyYXdPcHRpb25zID0ge1xuICAgICAgICByYWRpdXM6IE1hdGgubWluKGJveFdpZHRoLCBib3hIZWlnaHQpIC8gMixcbiAgICAgICAgcG9pbnRTdHlsZTogbGFiZWxQb2ludFN0eWxlLnBvaW50U3R5bGUsXG4gICAgICAgIHJvdGF0aW9uOiBsYWJlbFBvaW50U3R5bGUucm90YXRpb24sXG4gICAgICAgIGJvcmRlcldpZHRoOiAxXG4gICAgICB9O1xuICAgICAgY29uc3QgY2VudGVyWCA9IHJ0bEhlbHBlci5sZWZ0Rm9yTHRyKHJ0bENvbG9yWCwgYm94V2lkdGgpICsgYm94V2lkdGggLyAyO1xuICAgICAgY29uc3QgY2VudGVyWSA9IGNvbG9yWSArIGJveEhlaWdodCAvIDI7XG4gICAgICBjdHguc3Ryb2tlU3R5bGUgPSBvcHRpb25zLm11bHRpS2V5QmFja2dyb3VuZDtcbiAgICAgIGN0eC5maWxsU3R5bGUgPSBvcHRpb25zLm11bHRpS2V5QmFja2dyb3VuZDtcbiAgICAgIGRyYXdQb2ludChjdHgsIGRyYXdPcHRpb25zLCBjZW50ZXJYLCBjZW50ZXJZKTtcbiAgICAgIGN0eC5zdHJva2VTdHlsZSA9IGxhYmVsQ29sb3JzLmJvcmRlckNvbG9yO1xuICAgICAgY3R4LmZpbGxTdHlsZSA9IGxhYmVsQ29sb3JzLmJhY2tncm91bmRDb2xvcjtcbiAgICAgIGRyYXdQb2ludChjdHgsIGRyYXdPcHRpb25zLCBjZW50ZXJYLCBjZW50ZXJZKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY3R4LmxpbmVXaWR0aCA9IGxhYmVsQ29sb3JzLmJvcmRlcldpZHRoIHx8IDE7XG4gICAgICBjdHguc3Ryb2tlU3R5bGUgPSBsYWJlbENvbG9ycy5ib3JkZXJDb2xvcjtcbiAgICAgIGN0eC5zZXRMaW5lRGFzaChsYWJlbENvbG9ycy5ib3JkZXJEYXNoIHx8IFtdKTtcbiAgICAgIGN0eC5saW5lRGFzaE9mZnNldCA9IGxhYmVsQ29sb3JzLmJvcmRlckRhc2hPZmZzZXQgfHwgMDtcbiAgICAgIGNvbnN0IG91dGVyWCA9IHJ0bEhlbHBlci5sZWZ0Rm9yTHRyKHJ0bENvbG9yWCwgYm94V2lkdGggLSBib3hQYWRkaW5nKTtcbiAgICAgIGNvbnN0IGlubmVyWCA9IHJ0bEhlbHBlci5sZWZ0Rm9yTHRyKHJ0bEhlbHBlci54UGx1cyhydGxDb2xvclgsIDEpLCBib3hXaWR0aCAtIGJveFBhZGRpbmcgLSAyKTtcbiAgICAgIGNvbnN0IGJvcmRlclJhZGl1cyA9IHRvVFJCTENvcm5lcnMobGFiZWxDb2xvcnMuYm9yZGVyUmFkaXVzKTtcbiAgICAgIGlmIChPYmplY3QudmFsdWVzKGJvcmRlclJhZGl1cykuc29tZSh2ID0+IHYgIT09IDApKSB7XG4gICAgICAgIGN0eC5iZWdpblBhdGgoKTtcbiAgICAgICAgY3R4LmZpbGxTdHlsZSA9IG9wdGlvbnMubXVsdGlLZXlCYWNrZ3JvdW5kO1xuICAgICAgICBhZGRSb3VuZGVkUmVjdFBhdGgoY3R4LCB7XG4gICAgICAgICAgeDogb3V0ZXJYLFxuICAgICAgICAgIHk6IGNvbG9yWSxcbiAgICAgICAgICB3OiBib3hXaWR0aCxcbiAgICAgICAgICBoOiBib3hIZWlnaHQsXG4gICAgICAgICAgcmFkaXVzOiBib3JkZXJSYWRpdXMsXG4gICAgICAgIH0pO1xuICAgICAgICBjdHguZmlsbCgpO1xuICAgICAgICBjdHguc3Ryb2tlKCk7XG4gICAgICAgIGN0eC5maWxsU3R5bGUgPSBsYWJlbENvbG9ycy5iYWNrZ3JvdW5kQ29sb3I7XG4gICAgICAgIGN0eC5iZWdpblBhdGgoKTtcbiAgICAgICAgYWRkUm91bmRlZFJlY3RQYXRoKGN0eCwge1xuICAgICAgICAgIHg6IGlubmVyWCxcbiAgICAgICAgICB5OiBjb2xvclkgKyAxLFxuICAgICAgICAgIHc6IGJveFdpZHRoIC0gMixcbiAgICAgICAgICBoOiBib3hIZWlnaHQgLSAyLFxuICAgICAgICAgIHJhZGl1czogYm9yZGVyUmFkaXVzLFxuICAgICAgICB9KTtcbiAgICAgICAgY3R4LmZpbGwoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGN0eC5maWxsU3R5bGUgPSBvcHRpb25zLm11bHRpS2V5QmFja2dyb3VuZDtcbiAgICAgICAgY3R4LmZpbGxSZWN0KG91dGVyWCwgY29sb3JZLCBib3hXaWR0aCwgYm94SGVpZ2h0KTtcbiAgICAgICAgY3R4LnN0cm9rZVJlY3Qob3V0ZXJYLCBjb2xvclksIGJveFdpZHRoLCBib3hIZWlnaHQpO1xuICAgICAgICBjdHguZmlsbFN0eWxlID0gbGFiZWxDb2xvcnMuYmFja2dyb3VuZENvbG9yO1xuICAgICAgICBjdHguZmlsbFJlY3QoaW5uZXJYLCBjb2xvclkgKyAxLCBib3hXaWR0aCAtIDIsIGJveEhlaWdodCAtIDIpO1xuICAgICAgfVxuICAgIH1cbiAgICBjdHguZmlsbFN0eWxlID0gdGhpcy5sYWJlbFRleHRDb2xvcnNbaV07XG4gIH1cbiAgZHJhd0JvZHkocHQsIGN0eCwgb3B0aW9ucykge1xuICAgIGNvbnN0IHtib2R5fSA9IHRoaXM7XG4gICAgY29uc3Qge2JvZHlTcGFjaW5nLCBib2R5QWxpZ24sIGRpc3BsYXlDb2xvcnMsIGJveEhlaWdodCwgYm94V2lkdGgsIGJveFBhZGRpbmd9ID0gb3B0aW9ucztcbiAgICBjb25zdCBib2R5Rm9udCA9IHRvRm9udChvcHRpb25zLmJvZHlGb250KTtcbiAgICBsZXQgYm9keUxpbmVIZWlnaHQgPSBib2R5Rm9udC5saW5lSGVpZ2h0O1xuICAgIGxldCB4TGluZVBhZGRpbmcgPSAwO1xuICAgIGNvbnN0IHJ0bEhlbHBlciA9IGdldFJ0bEFkYXB0ZXIob3B0aW9ucy5ydGwsIHRoaXMueCwgdGhpcy53aWR0aCk7XG4gICAgY29uc3QgZmlsbExpbmVPZlRleHQgPSBmdW5jdGlvbihsaW5lKSB7XG4gICAgICBjdHguZmlsbFRleHQobGluZSwgcnRsSGVscGVyLngocHQueCArIHhMaW5lUGFkZGluZyksIHB0LnkgKyBib2R5TGluZUhlaWdodCAvIDIpO1xuICAgICAgcHQueSArPSBib2R5TGluZUhlaWdodCArIGJvZHlTcGFjaW5nO1xuICAgIH07XG4gICAgY29uc3QgYm9keUFsaWduRm9yQ2FsY3VsYXRpb24gPSBydGxIZWxwZXIudGV4dEFsaWduKGJvZHlBbGlnbik7XG4gICAgbGV0IGJvZHlJdGVtLCB0ZXh0Q29sb3IsIGxpbmVzLCBpLCBqLCBpbGVuLCBqbGVuO1xuICAgIGN0eC50ZXh0QWxpZ24gPSBib2R5QWxpZ247XG4gICAgY3R4LnRleHRCYXNlbGluZSA9ICdtaWRkbGUnO1xuICAgIGN0eC5mb250ID0gYm9keUZvbnQuc3RyaW5nO1xuICAgIHB0LnggPSBnZXRBbGlnbmVkWCh0aGlzLCBib2R5QWxpZ25Gb3JDYWxjdWxhdGlvbiwgb3B0aW9ucyk7XG4gICAgY3R4LmZpbGxTdHlsZSA9IG9wdGlvbnMuYm9keUNvbG9yO1xuICAgIGVhY2godGhpcy5iZWZvcmVCb2R5LCBmaWxsTGluZU9mVGV4dCk7XG4gICAgeExpbmVQYWRkaW5nID0gZGlzcGxheUNvbG9ycyAmJiBib2R5QWxpZ25Gb3JDYWxjdWxhdGlvbiAhPT0gJ3JpZ2h0J1xuICAgICAgPyBib2R5QWxpZ24gPT09ICdjZW50ZXInID8gKGJveFdpZHRoIC8gMiArIGJveFBhZGRpbmcpIDogKGJveFdpZHRoICsgMiArIGJveFBhZGRpbmcpXG4gICAgICA6IDA7XG4gICAgZm9yIChpID0gMCwgaWxlbiA9IGJvZHkubGVuZ3RoOyBpIDwgaWxlbjsgKytpKSB7XG4gICAgICBib2R5SXRlbSA9IGJvZHlbaV07XG4gICAgICB0ZXh0Q29sb3IgPSB0aGlzLmxhYmVsVGV4dENvbG9yc1tpXTtcbiAgICAgIGN0eC5maWxsU3R5bGUgPSB0ZXh0Q29sb3I7XG4gICAgICBlYWNoKGJvZHlJdGVtLmJlZm9yZSwgZmlsbExpbmVPZlRleHQpO1xuICAgICAgbGluZXMgPSBib2R5SXRlbS5saW5lcztcbiAgICAgIGlmIChkaXNwbGF5Q29sb3JzICYmIGxpbmVzLmxlbmd0aCkge1xuICAgICAgICB0aGlzLl9kcmF3Q29sb3JCb3goY3R4LCBwdCwgaSwgcnRsSGVscGVyLCBvcHRpb25zKTtcbiAgICAgICAgYm9keUxpbmVIZWlnaHQgPSBNYXRoLm1heChib2R5Rm9udC5saW5lSGVpZ2h0LCBib3hIZWlnaHQpO1xuICAgICAgfVxuICAgICAgZm9yIChqID0gMCwgamxlbiA9IGxpbmVzLmxlbmd0aDsgaiA8IGpsZW47ICsraikge1xuICAgICAgICBmaWxsTGluZU9mVGV4dChsaW5lc1tqXSk7XG4gICAgICAgIGJvZHlMaW5lSGVpZ2h0ID0gYm9keUZvbnQubGluZUhlaWdodDtcbiAgICAgIH1cbiAgICAgIGVhY2goYm9keUl0ZW0uYWZ0ZXIsIGZpbGxMaW5lT2ZUZXh0KTtcbiAgICB9XG4gICAgeExpbmVQYWRkaW5nID0gMDtcbiAgICBib2R5TGluZUhlaWdodCA9IGJvZHlGb250LmxpbmVIZWlnaHQ7XG4gICAgZWFjaCh0aGlzLmFmdGVyQm9keSwgZmlsbExpbmVPZlRleHQpO1xuICAgIHB0LnkgLT0gYm9keVNwYWNpbmc7XG4gIH1cbiAgZHJhd0Zvb3RlcihwdCwgY3R4LCBvcHRpb25zKSB7XG4gICAgY29uc3QgZm9vdGVyID0gdGhpcy5mb290ZXI7XG4gICAgY29uc3QgbGVuZ3RoID0gZm9vdGVyLmxlbmd0aDtcbiAgICBsZXQgZm9vdGVyRm9udCwgaTtcbiAgICBpZiAobGVuZ3RoKSB7XG4gICAgICBjb25zdCBydGxIZWxwZXIgPSBnZXRSdGxBZGFwdGVyKG9wdGlvbnMucnRsLCB0aGlzLngsIHRoaXMud2lkdGgpO1xuICAgICAgcHQueCA9IGdldEFsaWduZWRYKHRoaXMsIG9wdGlvbnMuZm9vdGVyQWxpZ24sIG9wdGlvbnMpO1xuICAgICAgcHQueSArPSBvcHRpb25zLmZvb3Rlck1hcmdpblRvcDtcbiAgICAgIGN0eC50ZXh0QWxpZ24gPSBydGxIZWxwZXIudGV4dEFsaWduKG9wdGlvbnMuZm9vdGVyQWxpZ24pO1xuICAgICAgY3R4LnRleHRCYXNlbGluZSA9ICdtaWRkbGUnO1xuICAgICAgZm9vdGVyRm9udCA9IHRvRm9udChvcHRpb25zLmZvb3RlckZvbnQpO1xuICAgICAgY3R4LmZpbGxTdHlsZSA9IG9wdGlvbnMuZm9vdGVyQ29sb3I7XG4gICAgICBjdHguZm9udCA9IGZvb3RlckZvbnQuc3RyaW5nO1xuICAgICAgZm9yIChpID0gMDsgaSA8IGxlbmd0aDsgKytpKSB7XG4gICAgICAgIGN0eC5maWxsVGV4dChmb290ZXJbaV0sIHJ0bEhlbHBlci54KHB0LngpLCBwdC55ICsgZm9vdGVyRm9udC5saW5lSGVpZ2h0IC8gMik7XG4gICAgICAgIHB0LnkgKz0gZm9vdGVyRm9udC5saW5lSGVpZ2h0ICsgb3B0aW9ucy5mb290ZXJTcGFjaW5nO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBkcmF3QmFja2dyb3VuZChwdCwgY3R4LCB0b29sdGlwU2l6ZSwgb3B0aW9ucykge1xuICAgIGNvbnN0IHt4QWxpZ24sIHlBbGlnbn0gPSB0aGlzO1xuICAgIGNvbnN0IHt4LCB5fSA9IHB0O1xuICAgIGNvbnN0IHt3aWR0aCwgaGVpZ2h0fSA9IHRvb2x0aXBTaXplO1xuICAgIGNvbnN0IHt0b3BMZWZ0LCB0b3BSaWdodCwgYm90dG9tTGVmdCwgYm90dG9tUmlnaHR9ID0gdG9UUkJMQ29ybmVycyhvcHRpb25zLmNvcm5lclJhZGl1cyk7XG4gICAgY3R4LmZpbGxTdHlsZSA9IG9wdGlvbnMuYmFja2dyb3VuZENvbG9yO1xuICAgIGN0eC5zdHJva2VTdHlsZSA9IG9wdGlvbnMuYm9yZGVyQ29sb3I7XG4gICAgY3R4LmxpbmVXaWR0aCA9IG9wdGlvbnMuYm9yZGVyV2lkdGg7XG4gICAgY3R4LmJlZ2luUGF0aCgpO1xuICAgIGN0eC5tb3ZlVG8oeCArIHRvcExlZnQsIHkpO1xuICAgIGlmICh5QWxpZ24gPT09ICd0b3AnKSB7XG4gICAgICB0aGlzLmRyYXdDYXJldChwdCwgY3R4LCB0b29sdGlwU2l6ZSwgb3B0aW9ucyk7XG4gICAgfVxuICAgIGN0eC5saW5lVG8oeCArIHdpZHRoIC0gdG9wUmlnaHQsIHkpO1xuICAgIGN0eC5xdWFkcmF0aWNDdXJ2ZVRvKHggKyB3aWR0aCwgeSwgeCArIHdpZHRoLCB5ICsgdG9wUmlnaHQpO1xuICAgIGlmICh5QWxpZ24gPT09ICdjZW50ZXInICYmIHhBbGlnbiA9PT0gJ3JpZ2h0Jykge1xuICAgICAgdGhpcy5kcmF3Q2FyZXQocHQsIGN0eCwgdG9vbHRpcFNpemUsIG9wdGlvbnMpO1xuICAgIH1cbiAgICBjdHgubGluZVRvKHggKyB3aWR0aCwgeSArIGhlaWdodCAtIGJvdHRvbVJpZ2h0KTtcbiAgICBjdHgucXVhZHJhdGljQ3VydmVUbyh4ICsgd2lkdGgsIHkgKyBoZWlnaHQsIHggKyB3aWR0aCAtIGJvdHRvbVJpZ2h0LCB5ICsgaGVpZ2h0KTtcbiAgICBpZiAoeUFsaWduID09PSAnYm90dG9tJykge1xuICAgICAgdGhpcy5kcmF3Q2FyZXQocHQsIGN0eCwgdG9vbHRpcFNpemUsIG9wdGlvbnMpO1xuICAgIH1cbiAgICBjdHgubGluZVRvKHggKyBib3R0b21MZWZ0LCB5ICsgaGVpZ2h0KTtcbiAgICBjdHgucXVhZHJhdGljQ3VydmVUbyh4LCB5ICsgaGVpZ2h0LCB4LCB5ICsgaGVpZ2h0IC0gYm90dG9tTGVmdCk7XG4gICAgaWYgKHlBbGlnbiA9PT0gJ2NlbnRlcicgJiYgeEFsaWduID09PSAnbGVmdCcpIHtcbiAgICAgIHRoaXMuZHJhd0NhcmV0KHB0LCBjdHgsIHRvb2x0aXBTaXplLCBvcHRpb25zKTtcbiAgICB9XG4gICAgY3R4LmxpbmVUbyh4LCB5ICsgdG9wTGVmdCk7XG4gICAgY3R4LnF1YWRyYXRpY0N1cnZlVG8oeCwgeSwgeCArIHRvcExlZnQsIHkpO1xuICAgIGN0eC5jbG9zZVBhdGgoKTtcbiAgICBjdHguZmlsbCgpO1xuICAgIGlmIChvcHRpb25zLmJvcmRlcldpZHRoID4gMCkge1xuICAgICAgY3R4LnN0cm9rZSgpO1xuICAgIH1cbiAgfVxuICBfdXBkYXRlQW5pbWF0aW9uVGFyZ2V0KG9wdGlvbnMpIHtcbiAgICBjb25zdCBjaGFydCA9IHRoaXMuY2hhcnQ7XG4gICAgY29uc3QgYW5pbXMgPSB0aGlzLiRhbmltYXRpb25zO1xuICAgIGNvbnN0IGFuaW1YID0gYW5pbXMgJiYgYW5pbXMueDtcbiAgICBjb25zdCBhbmltWSA9IGFuaW1zICYmIGFuaW1zLnk7XG4gICAgaWYgKGFuaW1YIHx8IGFuaW1ZKSB7XG4gICAgICBjb25zdCBwb3NpdGlvbiA9IHBvc2l0aW9uZXJzW29wdGlvbnMucG9zaXRpb25dLmNhbGwodGhpcywgdGhpcy5fYWN0aXZlLCB0aGlzLl9ldmVudFBvc2l0aW9uKTtcbiAgICAgIGlmICghcG9zaXRpb24pIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgY29uc3Qgc2l6ZSA9IHRoaXMuX3NpemUgPSBnZXRUb29sdGlwU2l6ZSh0aGlzLCBvcHRpb25zKTtcbiAgICAgIGNvbnN0IHBvc2l0aW9uQW5kU2l6ZSA9IE9iamVjdC5hc3NpZ24oe30sIHBvc2l0aW9uLCB0aGlzLl9zaXplKTtcbiAgICAgIGNvbnN0IGFsaWdubWVudCA9IGRldGVybWluZUFsaWdubWVudChjaGFydCwgb3B0aW9ucywgcG9zaXRpb25BbmRTaXplKTtcbiAgICAgIGNvbnN0IHBvaW50ID0gZ2V0QmFja2dyb3VuZFBvaW50KG9wdGlvbnMsIHBvc2l0aW9uQW5kU2l6ZSwgYWxpZ25tZW50LCBjaGFydCk7XG4gICAgICBpZiAoYW5pbVguX3RvICE9PSBwb2ludC54IHx8IGFuaW1ZLl90byAhPT0gcG9pbnQueSkge1xuICAgICAgICB0aGlzLnhBbGlnbiA9IGFsaWdubWVudC54QWxpZ247XG4gICAgICAgIHRoaXMueUFsaWduID0gYWxpZ25tZW50LnlBbGlnbjtcbiAgICAgICAgdGhpcy53aWR0aCA9IHNpemUud2lkdGg7XG4gICAgICAgIHRoaXMuaGVpZ2h0ID0gc2l6ZS5oZWlnaHQ7XG4gICAgICAgIHRoaXMuY2FyZXRYID0gcG9zaXRpb24ueDtcbiAgICAgICAgdGhpcy5jYXJldFkgPSBwb3NpdGlvbi55O1xuICAgICAgICB0aGlzLl9yZXNvbHZlQW5pbWF0aW9ucygpLnVwZGF0ZSh0aGlzLCBwb2ludCk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGRyYXcoY3R4KSB7XG4gICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMub3B0aW9ucy5zZXRDb250ZXh0KHRoaXMuZ2V0Q29udGV4dCgpKTtcbiAgICBsZXQgb3BhY2l0eSA9IHRoaXMub3BhY2l0eTtcbiAgICBpZiAoIW9wYWNpdHkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy5fdXBkYXRlQW5pbWF0aW9uVGFyZ2V0KG9wdGlvbnMpO1xuICAgIGNvbnN0IHRvb2x0aXBTaXplID0ge1xuICAgICAgd2lkdGg6IHRoaXMud2lkdGgsXG4gICAgICBoZWlnaHQ6IHRoaXMuaGVpZ2h0XG4gICAgfTtcbiAgICBjb25zdCBwdCA9IHtcbiAgICAgIHg6IHRoaXMueCxcbiAgICAgIHk6IHRoaXMueVxuICAgIH07XG4gICAgb3BhY2l0eSA9IE1hdGguYWJzKG9wYWNpdHkpIDwgMWUtMyA/IDAgOiBvcGFjaXR5O1xuICAgIGNvbnN0IHBhZGRpbmcgPSB0b1BhZGRpbmcob3B0aW9ucy5wYWRkaW5nKTtcbiAgICBjb25zdCBoYXNUb29sdGlwQ29udGVudCA9IHRoaXMudGl0bGUubGVuZ3RoIHx8IHRoaXMuYmVmb3JlQm9keS5sZW5ndGggfHwgdGhpcy5ib2R5Lmxlbmd0aCB8fCB0aGlzLmFmdGVyQm9keS5sZW5ndGggfHwgdGhpcy5mb290ZXIubGVuZ3RoO1xuICAgIGlmIChvcHRpb25zLmVuYWJsZWQgJiYgaGFzVG9vbHRpcENvbnRlbnQpIHtcbiAgICAgIGN0eC5zYXZlKCk7XG4gICAgICBjdHguZ2xvYmFsQWxwaGEgPSBvcGFjaXR5O1xuICAgICAgdGhpcy5kcmF3QmFja2dyb3VuZChwdCwgY3R4LCB0b29sdGlwU2l6ZSwgb3B0aW9ucyk7XG4gICAgICBvdmVycmlkZVRleHREaXJlY3Rpb24oY3R4LCBvcHRpb25zLnRleHREaXJlY3Rpb24pO1xuICAgICAgcHQueSArPSBwYWRkaW5nLnRvcDtcbiAgICAgIHRoaXMuZHJhd1RpdGxlKHB0LCBjdHgsIG9wdGlvbnMpO1xuICAgICAgdGhpcy5kcmF3Qm9keShwdCwgY3R4LCBvcHRpb25zKTtcbiAgICAgIHRoaXMuZHJhd0Zvb3RlcihwdCwgY3R4LCBvcHRpb25zKTtcbiAgICAgIHJlc3RvcmVUZXh0RGlyZWN0aW9uKGN0eCwgb3B0aW9ucy50ZXh0RGlyZWN0aW9uKTtcbiAgICAgIGN0eC5yZXN0b3JlKCk7XG4gICAgfVxuICB9XG4gIGdldEFjdGl2ZUVsZW1lbnRzKCkge1xuICAgIHJldHVybiB0aGlzLl9hY3RpdmUgfHwgW107XG4gIH1cbiAgc2V0QWN0aXZlRWxlbWVudHMoYWN0aXZlRWxlbWVudHMsIGV2ZW50UG9zaXRpb24pIHtcbiAgICBjb25zdCBsYXN0QWN0aXZlID0gdGhpcy5fYWN0aXZlO1xuICAgIGNvbnN0IGFjdGl2ZSA9IGFjdGl2ZUVsZW1lbnRzLm1hcCgoe2RhdGFzZXRJbmRleCwgaW5kZXh9KSA9PiB7XG4gICAgICBjb25zdCBtZXRhID0gdGhpcy5jaGFydC5nZXREYXRhc2V0TWV0YShkYXRhc2V0SW5kZXgpO1xuICAgICAgaWYgKCFtZXRhKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignQ2Fubm90IGZpbmQgYSBkYXRhc2V0IGF0IGluZGV4ICcgKyBkYXRhc2V0SW5kZXgpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgZGF0YXNldEluZGV4LFxuICAgICAgICBlbGVtZW50OiBtZXRhLmRhdGFbaW5kZXhdLFxuICAgICAgICBpbmRleCxcbiAgICAgIH07XG4gICAgfSk7XG4gICAgY29uc3QgY2hhbmdlZCA9ICFfZWxlbWVudHNFcXVhbChsYXN0QWN0aXZlLCBhY3RpdmUpO1xuICAgIGNvbnN0IHBvc2l0aW9uQ2hhbmdlZCA9IHRoaXMuX3Bvc2l0aW9uQ2hhbmdlZChhY3RpdmUsIGV2ZW50UG9zaXRpb24pO1xuICAgIGlmIChjaGFuZ2VkIHx8IHBvc2l0aW9uQ2hhbmdlZCkge1xuICAgICAgdGhpcy5fYWN0aXZlID0gYWN0aXZlO1xuICAgICAgdGhpcy5fZXZlbnRQb3NpdGlvbiA9IGV2ZW50UG9zaXRpb247XG4gICAgICB0aGlzLl9pZ25vcmVSZXBsYXlFdmVudHMgPSB0cnVlO1xuICAgICAgdGhpcy51cGRhdGUodHJ1ZSk7XG4gICAgfVxuICB9XG4gIGhhbmRsZUV2ZW50KGUsIHJlcGxheSwgaW5DaGFydEFyZWEgPSB0cnVlKSB7XG4gICAgaWYgKHJlcGxheSAmJiB0aGlzLl9pZ25vcmVSZXBsYXlFdmVudHMpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgdGhpcy5faWdub3JlUmVwbGF5RXZlbnRzID0gZmFsc2U7XG4gICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMub3B0aW9ucztcbiAgICBjb25zdCBsYXN0QWN0aXZlID0gdGhpcy5fYWN0aXZlIHx8IFtdO1xuICAgIGNvbnN0IGFjdGl2ZSA9IHRoaXMuX2dldEFjdGl2ZUVsZW1lbnRzKGUsIGxhc3RBY3RpdmUsIHJlcGxheSwgaW5DaGFydEFyZWEpO1xuICAgIGNvbnN0IHBvc2l0aW9uQ2hhbmdlZCA9IHRoaXMuX3Bvc2l0aW9uQ2hhbmdlZChhY3RpdmUsIGUpO1xuICAgIGNvbnN0IGNoYW5nZWQgPSByZXBsYXkgfHwgIV9lbGVtZW50c0VxdWFsKGFjdGl2ZSwgbGFzdEFjdGl2ZSkgfHwgcG9zaXRpb25DaGFuZ2VkO1xuICAgIGlmIChjaGFuZ2VkKSB7XG4gICAgICB0aGlzLl9hY3RpdmUgPSBhY3RpdmU7XG4gICAgICBpZiAob3B0aW9ucy5lbmFibGVkIHx8IG9wdGlvbnMuZXh0ZXJuYWwpIHtcbiAgICAgICAgdGhpcy5fZXZlbnRQb3NpdGlvbiA9IHtcbiAgICAgICAgICB4OiBlLngsXG4gICAgICAgICAgeTogZS55XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMudXBkYXRlKHRydWUsIHJlcGxheSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBjaGFuZ2VkO1xuICB9XG4gIF9nZXRBY3RpdmVFbGVtZW50cyhlLCBsYXN0QWN0aXZlLCByZXBsYXksIGluQ2hhcnRBcmVhKSB7XG4gICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMub3B0aW9ucztcbiAgICBpZiAoZS50eXBlID09PSAnbW91c2VvdXQnKSB7XG4gICAgICByZXR1cm4gW107XG4gICAgfVxuICAgIGlmICghaW5DaGFydEFyZWEpIHtcbiAgICAgIHJldHVybiBsYXN0QWN0aXZlO1xuICAgIH1cbiAgICBjb25zdCBhY3RpdmUgPSB0aGlzLmNoYXJ0LmdldEVsZW1lbnRzQXRFdmVudEZvck1vZGUoZSwgb3B0aW9ucy5tb2RlLCBvcHRpb25zLCByZXBsYXkpO1xuICAgIGlmIChvcHRpb25zLnJldmVyc2UpIHtcbiAgICAgIGFjdGl2ZS5yZXZlcnNlKCk7XG4gICAgfVxuICAgIHJldHVybiBhY3RpdmU7XG4gIH1cbiAgX3Bvc2l0aW9uQ2hhbmdlZChhY3RpdmUsIGUpIHtcbiAgICBjb25zdCB7Y2FyZXRYLCBjYXJldFksIG9wdGlvbnN9ID0gdGhpcztcbiAgICBjb25zdCBwb3NpdGlvbiA9IHBvc2l0aW9uZXJzW29wdGlvbnMucG9zaXRpb25dLmNhbGwodGhpcywgYWN0aXZlLCBlKTtcbiAgICByZXR1cm4gcG9zaXRpb24gIT09IGZhbHNlICYmIChjYXJldFggIT09IHBvc2l0aW9uLnggfHwgY2FyZXRZICE9PSBwb3NpdGlvbi55KTtcbiAgfVxufVxuVG9vbHRpcC5wb3NpdGlvbmVycyA9IHBvc2l0aW9uZXJzO1xudmFyIHBsdWdpbl90b29sdGlwID0ge1xuICBpZDogJ3Rvb2x0aXAnLFxuICBfZWxlbWVudDogVG9vbHRpcCxcbiAgcG9zaXRpb25lcnMsXG4gIGFmdGVySW5pdChjaGFydCwgX2FyZ3MsIG9wdGlvbnMpIHtcbiAgICBpZiAob3B0aW9ucykge1xuICAgICAgY2hhcnQudG9vbHRpcCA9IG5ldyBUb29sdGlwKHtjaGFydCwgb3B0aW9uc30pO1xuICAgIH1cbiAgfSxcbiAgYmVmb3JlVXBkYXRlKGNoYXJ0LCBfYXJncywgb3B0aW9ucykge1xuICAgIGlmIChjaGFydC50b29sdGlwKSB7XG4gICAgICBjaGFydC50b29sdGlwLmluaXRpYWxpemUob3B0aW9ucyk7XG4gICAgfVxuICB9LFxuICByZXNldChjaGFydCwgX2FyZ3MsIG9wdGlvbnMpIHtcbiAgICBpZiAoY2hhcnQudG9vbHRpcCkge1xuICAgICAgY2hhcnQudG9vbHRpcC5pbml0aWFsaXplKG9wdGlvbnMpO1xuICAgIH1cbiAgfSxcbiAgYWZ0ZXJEcmF3KGNoYXJ0KSB7XG4gICAgY29uc3QgdG9vbHRpcCA9IGNoYXJ0LnRvb2x0aXA7XG4gICAgY29uc3QgYXJncyA9IHtcbiAgICAgIHRvb2x0aXBcbiAgICB9O1xuICAgIGlmIChjaGFydC5ub3RpZnlQbHVnaW5zKCdiZWZvcmVUb29sdGlwRHJhdycsIGFyZ3MpID09PSBmYWxzZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAodG9vbHRpcCkge1xuICAgICAgdG9vbHRpcC5kcmF3KGNoYXJ0LmN0eCk7XG4gICAgfVxuICAgIGNoYXJ0Lm5vdGlmeVBsdWdpbnMoJ2FmdGVyVG9vbHRpcERyYXcnLCBhcmdzKTtcbiAgfSxcbiAgYWZ0ZXJFdmVudChjaGFydCwgYXJncykge1xuICAgIGlmIChjaGFydC50b29sdGlwKSB7XG4gICAgICBjb25zdCB1c2VGaW5hbFBvc2l0aW9uID0gYXJncy5yZXBsYXk7XG4gICAgICBpZiAoY2hhcnQudG9vbHRpcC5oYW5kbGVFdmVudChhcmdzLmV2ZW50LCB1c2VGaW5hbFBvc2l0aW9uLCBhcmdzLmluQ2hhcnRBcmVhKSkge1xuICAgICAgICBhcmdzLmNoYW5nZWQgPSB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgfSxcbiAgZGVmYXVsdHM6IHtcbiAgICBlbmFibGVkOiB0cnVlLFxuICAgIGV4dGVybmFsOiBudWxsLFxuICAgIHBvc2l0aW9uOiAnYXZlcmFnZScsXG4gICAgYmFja2dyb3VuZENvbG9yOiAncmdiYSgwLDAsMCwwLjgpJyxcbiAgICB0aXRsZUNvbG9yOiAnI2ZmZicsXG4gICAgdGl0bGVGb250OiB7XG4gICAgICB3ZWlnaHQ6ICdib2xkJyxcbiAgICB9LFxuICAgIHRpdGxlU3BhY2luZzogMixcbiAgICB0aXRsZU1hcmdpbkJvdHRvbTogNixcbiAgICB0aXRsZUFsaWduOiAnbGVmdCcsXG4gICAgYm9keUNvbG9yOiAnI2ZmZicsXG4gICAgYm9keVNwYWNpbmc6IDIsXG4gICAgYm9keUZvbnQ6IHtcbiAgICB9LFxuICAgIGJvZHlBbGlnbjogJ2xlZnQnLFxuICAgIGZvb3RlckNvbG9yOiAnI2ZmZicsXG4gICAgZm9vdGVyU3BhY2luZzogMixcbiAgICBmb290ZXJNYXJnaW5Ub3A6IDYsXG4gICAgZm9vdGVyRm9udDoge1xuICAgICAgd2VpZ2h0OiAnYm9sZCcsXG4gICAgfSxcbiAgICBmb290ZXJBbGlnbjogJ2xlZnQnLFxuICAgIHBhZGRpbmc6IDYsXG4gICAgY2FyZXRQYWRkaW5nOiAyLFxuICAgIGNhcmV0U2l6ZTogNSxcbiAgICBjb3JuZXJSYWRpdXM6IDYsXG4gICAgYm94SGVpZ2h0OiAoY3R4LCBvcHRzKSA9PiBvcHRzLmJvZHlGb250LnNpemUsXG4gICAgYm94V2lkdGg6IChjdHgsIG9wdHMpID0+IG9wdHMuYm9keUZvbnQuc2l6ZSxcbiAgICBtdWx0aUtleUJhY2tncm91bmQ6ICcjZmZmJyxcbiAgICBkaXNwbGF5Q29sb3JzOiB0cnVlLFxuICAgIGJveFBhZGRpbmc6IDAsXG4gICAgYm9yZGVyQ29sb3I6ICdyZ2JhKDAsMCwwLDApJyxcbiAgICBib3JkZXJXaWR0aDogMCxcbiAgICBhbmltYXRpb246IHtcbiAgICAgIGR1cmF0aW9uOiA0MDAsXG4gICAgICBlYXNpbmc6ICdlYXNlT3V0UXVhcnQnLFxuICAgIH0sXG4gICAgYW5pbWF0aW9uczoge1xuICAgICAgbnVtYmVyczoge1xuICAgICAgICB0eXBlOiAnbnVtYmVyJyxcbiAgICAgICAgcHJvcGVydGllczogWyd4JywgJ3knLCAnd2lkdGgnLCAnaGVpZ2h0JywgJ2NhcmV0WCcsICdjYXJldFknXSxcbiAgICAgIH0sXG4gICAgICBvcGFjaXR5OiB7XG4gICAgICAgIGVhc2luZzogJ2xpbmVhcicsXG4gICAgICAgIGR1cmF0aW9uOiAyMDBcbiAgICAgIH1cbiAgICB9LFxuICAgIGNhbGxiYWNrczoge1xuICAgICAgYmVmb3JlVGl0bGU6IG5vb3AsXG4gICAgICB0aXRsZSh0b29sdGlwSXRlbXMpIHtcbiAgICAgICAgaWYgKHRvb2x0aXBJdGVtcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgY29uc3QgaXRlbSA9IHRvb2x0aXBJdGVtc1swXTtcbiAgICAgICAgICBjb25zdCBsYWJlbHMgPSBpdGVtLmNoYXJ0LmRhdGEubGFiZWxzO1xuICAgICAgICAgIGNvbnN0IGxhYmVsQ291bnQgPSBsYWJlbHMgPyBsYWJlbHMubGVuZ3RoIDogMDtcbiAgICAgICAgICBpZiAodGhpcyAmJiB0aGlzLm9wdGlvbnMgJiYgdGhpcy5vcHRpb25zLm1vZGUgPT09ICdkYXRhc2V0Jykge1xuICAgICAgICAgICAgcmV0dXJuIGl0ZW0uZGF0YXNldC5sYWJlbCB8fCAnJztcbiAgICAgICAgICB9IGVsc2UgaWYgKGl0ZW0ubGFiZWwpIHtcbiAgICAgICAgICAgIHJldHVybiBpdGVtLmxhYmVsO1xuICAgICAgICAgIH0gZWxzZSBpZiAobGFiZWxDb3VudCA+IDAgJiYgaXRlbS5kYXRhSW5kZXggPCBsYWJlbENvdW50KSB7XG4gICAgICAgICAgICByZXR1cm4gbGFiZWxzW2l0ZW0uZGF0YUluZGV4XTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICcnO1xuICAgICAgfSxcbiAgICAgIGFmdGVyVGl0bGU6IG5vb3AsXG4gICAgICBiZWZvcmVCb2R5OiBub29wLFxuICAgICAgYmVmb3JlTGFiZWw6IG5vb3AsXG4gICAgICBsYWJlbCh0b29sdGlwSXRlbSkge1xuICAgICAgICBpZiAodGhpcyAmJiB0aGlzLm9wdGlvbnMgJiYgdGhpcy5vcHRpb25zLm1vZGUgPT09ICdkYXRhc2V0Jykge1xuICAgICAgICAgIHJldHVybiB0b29sdGlwSXRlbS5sYWJlbCArICc6ICcgKyB0b29sdGlwSXRlbS5mb3JtYXR0ZWRWYWx1ZSB8fCB0b29sdGlwSXRlbS5mb3JtYXR0ZWRWYWx1ZTtcbiAgICAgICAgfVxuICAgICAgICBsZXQgbGFiZWwgPSB0b29sdGlwSXRlbS5kYXRhc2V0LmxhYmVsIHx8ICcnO1xuICAgICAgICBpZiAobGFiZWwpIHtcbiAgICAgICAgICBsYWJlbCArPSAnOiAnO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHZhbHVlID0gdG9vbHRpcEl0ZW0uZm9ybWF0dGVkVmFsdWU7XG4gICAgICAgIGlmICghaXNOdWxsT3JVbmRlZih2YWx1ZSkpIHtcbiAgICAgICAgICBsYWJlbCArPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbGFiZWw7XG4gICAgICB9LFxuICAgICAgbGFiZWxDb2xvcih0b29sdGlwSXRlbSkge1xuICAgICAgICBjb25zdCBtZXRhID0gdG9vbHRpcEl0ZW0uY2hhcnQuZ2V0RGF0YXNldE1ldGEodG9vbHRpcEl0ZW0uZGF0YXNldEluZGV4KTtcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IG1ldGEuY29udHJvbGxlci5nZXRTdHlsZSh0b29sdGlwSXRlbS5kYXRhSW5kZXgpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGJvcmRlckNvbG9yOiBvcHRpb25zLmJvcmRlckNvbG9yLFxuICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogb3B0aW9ucy5iYWNrZ3JvdW5kQ29sb3IsXG4gICAgICAgICAgYm9yZGVyV2lkdGg6IG9wdGlvbnMuYm9yZGVyV2lkdGgsXG4gICAgICAgICAgYm9yZGVyRGFzaDogb3B0aW9ucy5ib3JkZXJEYXNoLFxuICAgICAgICAgIGJvcmRlckRhc2hPZmZzZXQ6IG9wdGlvbnMuYm9yZGVyRGFzaE9mZnNldCxcbiAgICAgICAgICBib3JkZXJSYWRpdXM6IDAsXG4gICAgICAgIH07XG4gICAgICB9LFxuICAgICAgbGFiZWxUZXh0Q29sb3IoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm9wdGlvbnMuYm9keUNvbG9yO1xuICAgICAgfSxcbiAgICAgIGxhYmVsUG9pbnRTdHlsZSh0b29sdGlwSXRlbSkge1xuICAgICAgICBjb25zdCBtZXRhID0gdG9vbHRpcEl0ZW0uY2hhcnQuZ2V0RGF0YXNldE1ldGEodG9vbHRpcEl0ZW0uZGF0YXNldEluZGV4KTtcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IG1ldGEuY29udHJvbGxlci5nZXRTdHlsZSh0b29sdGlwSXRlbS5kYXRhSW5kZXgpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHBvaW50U3R5bGU6IG9wdGlvbnMucG9pbnRTdHlsZSxcbiAgICAgICAgICByb3RhdGlvbjogb3B0aW9ucy5yb3RhdGlvbixcbiAgICAgICAgfTtcbiAgICAgIH0sXG4gICAgICBhZnRlckxhYmVsOiBub29wLFxuICAgICAgYWZ0ZXJCb2R5OiBub29wLFxuICAgICAgYmVmb3JlRm9vdGVyOiBub29wLFxuICAgICAgZm9vdGVyOiBub29wLFxuICAgICAgYWZ0ZXJGb290ZXI6IG5vb3BcbiAgICB9XG4gIH0sXG4gIGRlZmF1bHRSb3V0ZXM6IHtcbiAgICBib2R5Rm9udDogJ2ZvbnQnLFxuICAgIGZvb3RlckZvbnQ6ICdmb250JyxcbiAgICB0aXRsZUZvbnQ6ICdmb250J1xuICB9LFxuICBkZXNjcmlwdG9yczoge1xuICAgIF9zY3JpcHRhYmxlOiAobmFtZSkgPT4gbmFtZSAhPT0gJ2ZpbHRlcicgJiYgbmFtZSAhPT0gJ2l0ZW1Tb3J0JyAmJiBuYW1lICE9PSAnZXh0ZXJuYWwnLFxuICAgIF9pbmRleGFibGU6IGZhbHNlLFxuICAgIGNhbGxiYWNrczoge1xuICAgICAgX3NjcmlwdGFibGU6IGZhbHNlLFxuICAgICAgX2luZGV4YWJsZTogZmFsc2UsXG4gICAgfSxcbiAgICBhbmltYXRpb246IHtcbiAgICAgIF9mYWxsYmFjazogZmFsc2VcbiAgICB9LFxuICAgIGFuaW1hdGlvbnM6IHtcbiAgICAgIF9mYWxsYmFjazogJ2FuaW1hdGlvbidcbiAgICB9XG4gIH0sXG4gIGFkZGl0aW9uYWxPcHRpb25TY29wZXM6IFsnaW50ZXJhY3Rpb24nXVxufTtcblxudmFyIHBsdWdpbnMgPSAvKiNfX1BVUkVfXyovT2JqZWN0LmZyZWV6ZSh7XG5fX3Byb3RvX186IG51bGwsXG5EZWNpbWF0aW9uOiBwbHVnaW5fZGVjaW1hdGlvbixcbkZpbGxlcjogcGx1Z2luX2ZpbGxlcixcbkxlZ2VuZDogcGx1Z2luX2xlZ2VuZCxcblN1YlRpdGxlOiBwbHVnaW5fc3VidGl0bGUsXG5UaXRsZTogcGx1Z2luX3RpdGxlLFxuVG9vbHRpcDogcGx1Z2luX3Rvb2x0aXBcbn0pO1xuXG5jb25zdCBhZGRJZlN0cmluZyA9IChsYWJlbHMsIHJhdywgaW5kZXgsIGFkZGVkTGFiZWxzKSA9PiB7XG4gIGlmICh0eXBlb2YgcmF3ID09PSAnc3RyaW5nJykge1xuICAgIGluZGV4ID0gbGFiZWxzLnB1c2gocmF3KSAtIDE7XG4gICAgYWRkZWRMYWJlbHMudW5zaGlmdCh7aW5kZXgsIGxhYmVsOiByYXd9KTtcbiAgfSBlbHNlIGlmIChpc05hTihyYXcpKSB7XG4gICAgaW5kZXggPSBudWxsO1xuICB9XG4gIHJldHVybiBpbmRleDtcbn07XG5mdW5jdGlvbiBmaW5kT3JBZGRMYWJlbChsYWJlbHMsIHJhdywgaW5kZXgsIGFkZGVkTGFiZWxzKSB7XG4gIGNvbnN0IGZpcnN0ID0gbGFiZWxzLmluZGV4T2YocmF3KTtcbiAgaWYgKGZpcnN0ID09PSAtMSkge1xuICAgIHJldHVybiBhZGRJZlN0cmluZyhsYWJlbHMsIHJhdywgaW5kZXgsIGFkZGVkTGFiZWxzKTtcbiAgfVxuICBjb25zdCBsYXN0ID0gbGFiZWxzLmxhc3RJbmRleE9mKHJhdyk7XG4gIHJldHVybiBmaXJzdCAhPT0gbGFzdCA/IGluZGV4IDogZmlyc3Q7XG59XG5jb25zdCB2YWxpZEluZGV4ID0gKGluZGV4LCBtYXgpID0+IGluZGV4ID09PSBudWxsID8gbnVsbCA6IF9saW1pdFZhbHVlKE1hdGgucm91bmQoaW5kZXgpLCAwLCBtYXgpO1xuY2xhc3MgQ2F0ZWdvcnlTY2FsZSBleHRlbmRzIFNjYWxlIHtcbiAgY29uc3RydWN0b3IoY2ZnKSB7XG4gICAgc3VwZXIoY2ZnKTtcbiAgICB0aGlzLl9zdGFydFZhbHVlID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuX3ZhbHVlUmFuZ2UgPSAwO1xuICAgIHRoaXMuX2FkZGVkTGFiZWxzID0gW107XG4gIH1cbiAgaW5pdChzY2FsZU9wdGlvbnMpIHtcbiAgICBjb25zdCBhZGRlZCA9IHRoaXMuX2FkZGVkTGFiZWxzO1xuICAgIGlmIChhZGRlZC5sZW5ndGgpIHtcbiAgICAgIGNvbnN0IGxhYmVscyA9IHRoaXMuZ2V0TGFiZWxzKCk7XG4gICAgICBmb3IgKGNvbnN0IHtpbmRleCwgbGFiZWx9IG9mIGFkZGVkKSB7XG4gICAgICAgIGlmIChsYWJlbHNbaW5kZXhdID09PSBsYWJlbCkge1xuICAgICAgICAgIGxhYmVscy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICB0aGlzLl9hZGRlZExhYmVscyA9IFtdO1xuICAgIH1cbiAgICBzdXBlci5pbml0KHNjYWxlT3B0aW9ucyk7XG4gIH1cbiAgcGFyc2UocmF3LCBpbmRleCkge1xuICAgIGlmIChpc051bGxPclVuZGVmKHJhdykpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBjb25zdCBsYWJlbHMgPSB0aGlzLmdldExhYmVscygpO1xuICAgIGluZGV4ID0gaXNGaW5pdGUoaW5kZXgpICYmIGxhYmVsc1tpbmRleF0gPT09IHJhdyA/IGluZGV4XG4gICAgICA6IGZpbmRPckFkZExhYmVsKGxhYmVscywgcmF3LCB2YWx1ZU9yRGVmYXVsdChpbmRleCwgcmF3KSwgdGhpcy5fYWRkZWRMYWJlbHMpO1xuICAgIHJldHVybiB2YWxpZEluZGV4KGluZGV4LCBsYWJlbHMubGVuZ3RoIC0gMSk7XG4gIH1cbiAgZGV0ZXJtaW5lRGF0YUxpbWl0cygpIHtcbiAgICBjb25zdCB7bWluRGVmaW5lZCwgbWF4RGVmaW5lZH0gPSB0aGlzLmdldFVzZXJCb3VuZHMoKTtcbiAgICBsZXQge21pbiwgbWF4fSA9IHRoaXMuZ2V0TWluTWF4KHRydWUpO1xuICAgIGlmICh0aGlzLm9wdGlvbnMuYm91bmRzID09PSAndGlja3MnKSB7XG4gICAgICBpZiAoIW1pbkRlZmluZWQpIHtcbiAgICAgICAgbWluID0gMDtcbiAgICAgIH1cbiAgICAgIGlmICghbWF4RGVmaW5lZCkge1xuICAgICAgICBtYXggPSB0aGlzLmdldExhYmVscygpLmxlbmd0aCAtIDE7XG4gICAgICB9XG4gICAgfVxuICAgIHRoaXMubWluID0gbWluO1xuICAgIHRoaXMubWF4ID0gbWF4O1xuICB9XG4gIGJ1aWxkVGlja3MoKSB7XG4gICAgY29uc3QgbWluID0gdGhpcy5taW47XG4gICAgY29uc3QgbWF4ID0gdGhpcy5tYXg7XG4gICAgY29uc3Qgb2Zmc2V0ID0gdGhpcy5vcHRpb25zLm9mZnNldDtcbiAgICBjb25zdCB0aWNrcyA9IFtdO1xuICAgIGxldCBsYWJlbHMgPSB0aGlzLmdldExhYmVscygpO1xuICAgIGxhYmVscyA9IChtaW4gPT09IDAgJiYgbWF4ID09PSBsYWJlbHMubGVuZ3RoIC0gMSkgPyBsYWJlbHMgOiBsYWJlbHMuc2xpY2UobWluLCBtYXggKyAxKTtcbiAgICB0aGlzLl92YWx1ZVJhbmdlID0gTWF0aC5tYXgobGFiZWxzLmxlbmd0aCAtIChvZmZzZXQgPyAwIDogMSksIDEpO1xuICAgIHRoaXMuX3N0YXJ0VmFsdWUgPSB0aGlzLm1pbiAtIChvZmZzZXQgPyAwLjUgOiAwKTtcbiAgICBmb3IgKGxldCB2YWx1ZSA9IG1pbjsgdmFsdWUgPD0gbWF4OyB2YWx1ZSsrKSB7XG4gICAgICB0aWNrcy5wdXNoKHt2YWx1ZX0pO1xuICAgIH1cbiAgICByZXR1cm4gdGlja3M7XG4gIH1cbiAgZ2V0TGFiZWxGb3JWYWx1ZSh2YWx1ZSkge1xuICAgIGNvbnN0IGxhYmVscyA9IHRoaXMuZ2V0TGFiZWxzKCk7XG4gICAgaWYgKHZhbHVlID49IDAgJiYgdmFsdWUgPCBsYWJlbHMubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gbGFiZWxzW3ZhbHVlXTtcbiAgICB9XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG4gIGNvbmZpZ3VyZSgpIHtcbiAgICBzdXBlci5jb25maWd1cmUoKTtcbiAgICBpZiAoIXRoaXMuaXNIb3Jpem9udGFsKCkpIHtcbiAgICAgIHRoaXMuX3JldmVyc2VQaXhlbHMgPSAhdGhpcy5fcmV2ZXJzZVBpeGVscztcbiAgICB9XG4gIH1cbiAgZ2V0UGl4ZWxGb3JWYWx1ZSh2YWx1ZSkge1xuICAgIGlmICh0eXBlb2YgdmFsdWUgIT09ICdudW1iZXInKSB7XG4gICAgICB2YWx1ZSA9IHRoaXMucGFyc2UodmFsdWUpO1xuICAgIH1cbiAgICByZXR1cm4gdmFsdWUgPT09IG51bGwgPyBOYU4gOiB0aGlzLmdldFBpeGVsRm9yRGVjaW1hbCgodmFsdWUgLSB0aGlzLl9zdGFydFZhbHVlKSAvIHRoaXMuX3ZhbHVlUmFuZ2UpO1xuICB9XG4gIGdldFBpeGVsRm9yVGljayhpbmRleCkge1xuICAgIGNvbnN0IHRpY2tzID0gdGhpcy50aWNrcztcbiAgICBpZiAoaW5kZXggPCAwIHx8IGluZGV4ID4gdGlja3MubGVuZ3RoIC0gMSkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLmdldFBpeGVsRm9yVmFsdWUodGlja3NbaW5kZXhdLnZhbHVlKTtcbiAgfVxuICBnZXRWYWx1ZUZvclBpeGVsKHBpeGVsKSB7XG4gICAgcmV0dXJuIE1hdGgucm91bmQodGhpcy5fc3RhcnRWYWx1ZSArIHRoaXMuZ2V0RGVjaW1hbEZvclBpeGVsKHBpeGVsKSAqIHRoaXMuX3ZhbHVlUmFuZ2UpO1xuICB9XG4gIGdldEJhc2VQaXhlbCgpIHtcbiAgICByZXR1cm4gdGhpcy5ib3R0b207XG4gIH1cbn1cbkNhdGVnb3J5U2NhbGUuaWQgPSAnY2F0ZWdvcnknO1xuQ2F0ZWdvcnlTY2FsZS5kZWZhdWx0cyA9IHtcbiAgdGlja3M6IHtcbiAgICBjYWxsYmFjazogQ2F0ZWdvcnlTY2FsZS5wcm90b3R5cGUuZ2V0TGFiZWxGb3JWYWx1ZVxuICB9XG59O1xuXG5mdW5jdGlvbiBnZW5lcmF0ZVRpY2tzJDEoZ2VuZXJhdGlvbk9wdGlvbnMsIGRhdGFSYW5nZSkge1xuICBjb25zdCB0aWNrcyA9IFtdO1xuICBjb25zdCBNSU5fU1BBQ0lORyA9IDFlLTE0O1xuICBjb25zdCB7Ym91bmRzLCBzdGVwLCBtaW4sIG1heCwgcHJlY2lzaW9uLCBjb3VudCwgbWF4VGlja3MsIG1heERpZ2l0cywgaW5jbHVkZUJvdW5kc30gPSBnZW5lcmF0aW9uT3B0aW9ucztcbiAgY29uc3QgdW5pdCA9IHN0ZXAgfHwgMTtcbiAgY29uc3QgbWF4U3BhY2VzID0gbWF4VGlja3MgLSAxO1xuICBjb25zdCB7bWluOiBybWluLCBtYXg6IHJtYXh9ID0gZGF0YVJhbmdlO1xuICBjb25zdCBtaW5EZWZpbmVkID0gIWlzTnVsbE9yVW5kZWYobWluKTtcbiAgY29uc3QgbWF4RGVmaW5lZCA9ICFpc051bGxPclVuZGVmKG1heCk7XG4gIGNvbnN0IGNvdW50RGVmaW5lZCA9ICFpc051bGxPclVuZGVmKGNvdW50KTtcbiAgY29uc3QgbWluU3BhY2luZyA9IChybWF4IC0gcm1pbikgLyAobWF4RGlnaXRzICsgMSk7XG4gIGxldCBzcGFjaW5nID0gbmljZU51bSgocm1heCAtIHJtaW4pIC8gbWF4U3BhY2VzIC8gdW5pdCkgKiB1bml0O1xuICBsZXQgZmFjdG9yLCBuaWNlTWluLCBuaWNlTWF4LCBudW1TcGFjZXM7XG4gIGlmIChzcGFjaW5nIDwgTUlOX1NQQUNJTkcgJiYgIW1pbkRlZmluZWQgJiYgIW1heERlZmluZWQpIHtcbiAgICByZXR1cm4gW3t2YWx1ZTogcm1pbn0sIHt2YWx1ZTogcm1heH1dO1xuICB9XG4gIG51bVNwYWNlcyA9IE1hdGguY2VpbChybWF4IC8gc3BhY2luZykgLSBNYXRoLmZsb29yKHJtaW4gLyBzcGFjaW5nKTtcbiAgaWYgKG51bVNwYWNlcyA+IG1heFNwYWNlcykge1xuICAgIHNwYWNpbmcgPSBuaWNlTnVtKG51bVNwYWNlcyAqIHNwYWNpbmcgLyBtYXhTcGFjZXMgLyB1bml0KSAqIHVuaXQ7XG4gIH1cbiAgaWYgKCFpc051bGxPclVuZGVmKHByZWNpc2lvbikpIHtcbiAgICBmYWN0b3IgPSBNYXRoLnBvdygxMCwgcHJlY2lzaW9uKTtcbiAgICBzcGFjaW5nID0gTWF0aC5jZWlsKHNwYWNpbmcgKiBmYWN0b3IpIC8gZmFjdG9yO1xuICB9XG4gIGlmIChib3VuZHMgPT09ICd0aWNrcycpIHtcbiAgICBuaWNlTWluID0gTWF0aC5mbG9vcihybWluIC8gc3BhY2luZykgKiBzcGFjaW5nO1xuICAgIG5pY2VNYXggPSBNYXRoLmNlaWwocm1heCAvIHNwYWNpbmcpICogc3BhY2luZztcbiAgfSBlbHNlIHtcbiAgICBuaWNlTWluID0gcm1pbjtcbiAgICBuaWNlTWF4ID0gcm1heDtcbiAgfVxuICBpZiAobWluRGVmaW5lZCAmJiBtYXhEZWZpbmVkICYmIHN0ZXAgJiYgYWxtb3N0V2hvbGUoKG1heCAtIG1pbikgLyBzdGVwLCBzcGFjaW5nIC8gMTAwMCkpIHtcbiAgICBudW1TcGFjZXMgPSBNYXRoLnJvdW5kKE1hdGgubWluKChtYXggLSBtaW4pIC8gc3BhY2luZywgbWF4VGlja3MpKTtcbiAgICBzcGFjaW5nID0gKG1heCAtIG1pbikgLyBudW1TcGFjZXM7XG4gICAgbmljZU1pbiA9IG1pbjtcbiAgICBuaWNlTWF4ID0gbWF4O1xuICB9IGVsc2UgaWYgKGNvdW50RGVmaW5lZCkge1xuICAgIG5pY2VNaW4gPSBtaW5EZWZpbmVkID8gbWluIDogbmljZU1pbjtcbiAgICBuaWNlTWF4ID0gbWF4RGVmaW5lZCA/IG1heCA6IG5pY2VNYXg7XG4gICAgbnVtU3BhY2VzID0gY291bnQgLSAxO1xuICAgIHNwYWNpbmcgPSAobmljZU1heCAtIG5pY2VNaW4pIC8gbnVtU3BhY2VzO1xuICB9IGVsc2Uge1xuICAgIG51bVNwYWNlcyA9IChuaWNlTWF4IC0gbmljZU1pbikgLyBzcGFjaW5nO1xuICAgIGlmIChhbG1vc3RFcXVhbHMobnVtU3BhY2VzLCBNYXRoLnJvdW5kKG51bVNwYWNlcyksIHNwYWNpbmcgLyAxMDAwKSkge1xuICAgICAgbnVtU3BhY2VzID0gTWF0aC5yb3VuZChudW1TcGFjZXMpO1xuICAgIH0gZWxzZSB7XG4gICAgICBudW1TcGFjZXMgPSBNYXRoLmNlaWwobnVtU3BhY2VzKTtcbiAgICB9XG4gIH1cbiAgY29uc3QgZGVjaW1hbFBsYWNlcyA9IE1hdGgubWF4KFxuICAgIF9kZWNpbWFsUGxhY2VzKHNwYWNpbmcpLFxuICAgIF9kZWNpbWFsUGxhY2VzKG5pY2VNaW4pXG4gICk7XG4gIGZhY3RvciA9IE1hdGgucG93KDEwLCBpc051bGxPclVuZGVmKHByZWNpc2lvbikgPyBkZWNpbWFsUGxhY2VzIDogcHJlY2lzaW9uKTtcbiAgbmljZU1pbiA9IE1hdGgucm91bmQobmljZU1pbiAqIGZhY3RvcikgLyBmYWN0b3I7XG4gIG5pY2VNYXggPSBNYXRoLnJvdW5kKG5pY2VNYXggKiBmYWN0b3IpIC8gZmFjdG9yO1xuICBsZXQgaiA9IDA7XG4gIGlmIChtaW5EZWZpbmVkKSB7XG4gICAgaWYgKGluY2x1ZGVCb3VuZHMgJiYgbmljZU1pbiAhPT0gbWluKSB7XG4gICAgICB0aWNrcy5wdXNoKHt2YWx1ZTogbWlufSk7XG4gICAgICBpZiAobmljZU1pbiA8IG1pbikge1xuICAgICAgICBqKys7XG4gICAgICB9XG4gICAgICBpZiAoYWxtb3N0RXF1YWxzKE1hdGgucm91bmQoKG5pY2VNaW4gKyBqICogc3BhY2luZykgKiBmYWN0b3IpIC8gZmFjdG9yLCBtaW4sIHJlbGF0aXZlTGFiZWxTaXplKG1pbiwgbWluU3BhY2luZywgZ2VuZXJhdGlvbk9wdGlvbnMpKSkge1xuICAgICAgICBqKys7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChuaWNlTWluIDwgbWluKSB7XG4gICAgICBqKys7XG4gICAgfVxuICB9XG4gIGZvciAoOyBqIDwgbnVtU3BhY2VzOyArK2opIHtcbiAgICB0aWNrcy5wdXNoKHt2YWx1ZTogTWF0aC5yb3VuZCgobmljZU1pbiArIGogKiBzcGFjaW5nKSAqIGZhY3RvcikgLyBmYWN0b3J9KTtcbiAgfVxuICBpZiAobWF4RGVmaW5lZCAmJiBpbmNsdWRlQm91bmRzICYmIG5pY2VNYXggIT09IG1heCkge1xuICAgIGlmICh0aWNrcy5sZW5ndGggJiYgYWxtb3N0RXF1YWxzKHRpY2tzW3RpY2tzLmxlbmd0aCAtIDFdLnZhbHVlLCBtYXgsIHJlbGF0aXZlTGFiZWxTaXplKG1heCwgbWluU3BhY2luZywgZ2VuZXJhdGlvbk9wdGlvbnMpKSkge1xuICAgICAgdGlja3NbdGlja3MubGVuZ3RoIC0gMV0udmFsdWUgPSBtYXg7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRpY2tzLnB1c2goe3ZhbHVlOiBtYXh9KTtcbiAgICB9XG4gIH0gZWxzZSBpZiAoIW1heERlZmluZWQgfHwgbmljZU1heCA9PT0gbWF4KSB7XG4gICAgdGlja3MucHVzaCh7dmFsdWU6IG5pY2VNYXh9KTtcbiAgfVxuICByZXR1cm4gdGlja3M7XG59XG5mdW5jdGlvbiByZWxhdGl2ZUxhYmVsU2l6ZSh2YWx1ZSwgbWluU3BhY2luZywge2hvcml6b250YWwsIG1pblJvdGF0aW9ufSkge1xuICBjb25zdCByYWQgPSB0b1JhZGlhbnMobWluUm90YXRpb24pO1xuICBjb25zdCByYXRpbyA9IChob3Jpem9udGFsID8gTWF0aC5zaW4ocmFkKSA6IE1hdGguY29zKHJhZCkpIHx8IDAuMDAxO1xuICBjb25zdCBsZW5ndGggPSAwLjc1ICogbWluU3BhY2luZyAqICgnJyArIHZhbHVlKS5sZW5ndGg7XG4gIHJldHVybiBNYXRoLm1pbihtaW5TcGFjaW5nIC8gcmF0aW8sIGxlbmd0aCk7XG59XG5jbGFzcyBMaW5lYXJTY2FsZUJhc2UgZXh0ZW5kcyBTY2FsZSB7XG4gIGNvbnN0cnVjdG9yKGNmZykge1xuICAgIHN1cGVyKGNmZyk7XG4gICAgdGhpcy5zdGFydCA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLmVuZCA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLl9zdGFydFZhbHVlID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuX2VuZFZhbHVlID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuX3ZhbHVlUmFuZ2UgPSAwO1xuICB9XG4gIHBhcnNlKHJhdywgaW5kZXgpIHtcbiAgICBpZiAoaXNOdWxsT3JVbmRlZihyYXcpKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgaWYgKCh0eXBlb2YgcmF3ID09PSAnbnVtYmVyJyB8fCByYXcgaW5zdGFuY2VvZiBOdW1iZXIpICYmICFpc0Zpbml0ZSgrcmF3KSkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHJldHVybiArcmF3O1xuICB9XG4gIGhhbmRsZVRpY2tSYW5nZU9wdGlvbnMoKSB7XG4gICAgY29uc3Qge2JlZ2luQXRaZXJvfSA9IHRoaXMub3B0aW9ucztcbiAgICBjb25zdCB7bWluRGVmaW5lZCwgbWF4RGVmaW5lZH0gPSB0aGlzLmdldFVzZXJCb3VuZHMoKTtcbiAgICBsZXQge21pbiwgbWF4fSA9IHRoaXM7XG4gICAgY29uc3Qgc2V0TWluID0gdiA9PiAobWluID0gbWluRGVmaW5lZCA/IG1pbiA6IHYpO1xuICAgIGNvbnN0IHNldE1heCA9IHYgPT4gKG1heCA9IG1heERlZmluZWQgPyBtYXggOiB2KTtcbiAgICBpZiAoYmVnaW5BdFplcm8pIHtcbiAgICAgIGNvbnN0IG1pblNpZ24gPSBzaWduKG1pbik7XG4gICAgICBjb25zdCBtYXhTaWduID0gc2lnbihtYXgpO1xuICAgICAgaWYgKG1pblNpZ24gPCAwICYmIG1heFNpZ24gPCAwKSB7XG4gICAgICAgIHNldE1heCgwKTtcbiAgICAgIH0gZWxzZSBpZiAobWluU2lnbiA+IDAgJiYgbWF4U2lnbiA+IDApIHtcbiAgICAgICAgc2V0TWluKDApO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAobWluID09PSBtYXgpIHtcbiAgICAgIGxldCBvZmZzZXQgPSAxO1xuICAgICAgaWYgKG1heCA+PSBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUiB8fCBtaW4gPD0gTnVtYmVyLk1JTl9TQUZFX0lOVEVHRVIpIHtcbiAgICAgICAgb2Zmc2V0ID0gTWF0aC5hYnMobWF4ICogMC4wNSk7XG4gICAgICB9XG4gICAgICBzZXRNYXgobWF4ICsgb2Zmc2V0KTtcbiAgICAgIGlmICghYmVnaW5BdFplcm8pIHtcbiAgICAgICAgc2V0TWluKG1pbiAtIG9mZnNldCk7XG4gICAgICB9XG4gICAgfVxuICAgIHRoaXMubWluID0gbWluO1xuICAgIHRoaXMubWF4ID0gbWF4O1xuICB9XG4gIGdldFRpY2tMaW1pdCgpIHtcbiAgICBjb25zdCB0aWNrT3B0cyA9IHRoaXMub3B0aW9ucy50aWNrcztcbiAgICBsZXQge21heFRpY2tzTGltaXQsIHN0ZXBTaXplfSA9IHRpY2tPcHRzO1xuICAgIGxldCBtYXhUaWNrcztcbiAgICBpZiAoc3RlcFNpemUpIHtcbiAgICAgIG1heFRpY2tzID0gTWF0aC5jZWlsKHRoaXMubWF4IC8gc3RlcFNpemUpIC0gTWF0aC5mbG9vcih0aGlzLm1pbiAvIHN0ZXBTaXplKSArIDE7XG4gICAgICBpZiAobWF4VGlja3MgPiAxMDAwKSB7XG4gICAgICAgIGNvbnNvbGUud2Fybihgc2NhbGVzLiR7dGhpcy5pZH0udGlja3Muc3RlcFNpemU6ICR7c3RlcFNpemV9IHdvdWxkIHJlc3VsdCBnZW5lcmF0aW5nIHVwIHRvICR7bWF4VGlja3N9IHRpY2tzLiBMaW1pdGluZyB0byAxMDAwLmApO1xuICAgICAgICBtYXhUaWNrcyA9IDEwMDA7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIG1heFRpY2tzID0gdGhpcy5jb21wdXRlVGlja0xpbWl0KCk7XG4gICAgICBtYXhUaWNrc0xpbWl0ID0gbWF4VGlja3NMaW1pdCB8fCAxMTtcbiAgICB9XG4gICAgaWYgKG1heFRpY2tzTGltaXQpIHtcbiAgICAgIG1heFRpY2tzID0gTWF0aC5taW4obWF4VGlja3NMaW1pdCwgbWF4VGlja3MpO1xuICAgIH1cbiAgICByZXR1cm4gbWF4VGlja3M7XG4gIH1cbiAgY29tcHV0ZVRpY2tMaW1pdCgpIHtcbiAgICByZXR1cm4gTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZO1xuICB9XG4gIGJ1aWxkVGlja3MoKSB7XG4gICAgY29uc3Qgb3B0cyA9IHRoaXMub3B0aW9ucztcbiAgICBjb25zdCB0aWNrT3B0cyA9IG9wdHMudGlja3M7XG4gICAgbGV0IG1heFRpY2tzID0gdGhpcy5nZXRUaWNrTGltaXQoKTtcbiAgICBtYXhUaWNrcyA9IE1hdGgubWF4KDIsIG1heFRpY2tzKTtcbiAgICBjb25zdCBudW1lcmljR2VuZXJhdG9yT3B0aW9ucyA9IHtcbiAgICAgIG1heFRpY2tzLFxuICAgICAgYm91bmRzOiBvcHRzLmJvdW5kcyxcbiAgICAgIG1pbjogb3B0cy5taW4sXG4gICAgICBtYXg6IG9wdHMubWF4LFxuICAgICAgcHJlY2lzaW9uOiB0aWNrT3B0cy5wcmVjaXNpb24sXG4gICAgICBzdGVwOiB0aWNrT3B0cy5zdGVwU2l6ZSxcbiAgICAgIGNvdW50OiB0aWNrT3B0cy5jb3VudCxcbiAgICAgIG1heERpZ2l0czogdGhpcy5fbWF4RGlnaXRzKCksXG4gICAgICBob3Jpem9udGFsOiB0aGlzLmlzSG9yaXpvbnRhbCgpLFxuICAgICAgbWluUm90YXRpb246IHRpY2tPcHRzLm1pblJvdGF0aW9uIHx8IDAsXG4gICAgICBpbmNsdWRlQm91bmRzOiB0aWNrT3B0cy5pbmNsdWRlQm91bmRzICE9PSBmYWxzZVxuICAgIH07XG4gICAgY29uc3QgZGF0YVJhbmdlID0gdGhpcy5fcmFuZ2UgfHwgdGhpcztcbiAgICBjb25zdCB0aWNrcyA9IGdlbmVyYXRlVGlja3MkMShudW1lcmljR2VuZXJhdG9yT3B0aW9ucywgZGF0YVJhbmdlKTtcbiAgICBpZiAob3B0cy5ib3VuZHMgPT09ICd0aWNrcycpIHtcbiAgICAgIF9zZXRNaW5BbmRNYXhCeUtleSh0aWNrcywgdGhpcywgJ3ZhbHVlJyk7XG4gICAgfVxuICAgIGlmIChvcHRzLnJldmVyc2UpIHtcbiAgICAgIHRpY2tzLnJldmVyc2UoKTtcbiAgICAgIHRoaXMuc3RhcnQgPSB0aGlzLm1heDtcbiAgICAgIHRoaXMuZW5kID0gdGhpcy5taW47XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuc3RhcnQgPSB0aGlzLm1pbjtcbiAgICAgIHRoaXMuZW5kID0gdGhpcy5tYXg7XG4gICAgfVxuICAgIHJldHVybiB0aWNrcztcbiAgfVxuICBjb25maWd1cmUoKSB7XG4gICAgY29uc3QgdGlja3MgPSB0aGlzLnRpY2tzO1xuICAgIGxldCBzdGFydCA9IHRoaXMubWluO1xuICAgIGxldCBlbmQgPSB0aGlzLm1heDtcbiAgICBzdXBlci5jb25maWd1cmUoKTtcbiAgICBpZiAodGhpcy5vcHRpb25zLm9mZnNldCAmJiB0aWNrcy5sZW5ndGgpIHtcbiAgICAgIGNvbnN0IG9mZnNldCA9IChlbmQgLSBzdGFydCkgLyBNYXRoLm1heCh0aWNrcy5sZW5ndGggLSAxLCAxKSAvIDI7XG4gICAgICBzdGFydCAtPSBvZmZzZXQ7XG4gICAgICBlbmQgKz0gb2Zmc2V0O1xuICAgIH1cbiAgICB0aGlzLl9zdGFydFZhbHVlID0gc3RhcnQ7XG4gICAgdGhpcy5fZW5kVmFsdWUgPSBlbmQ7XG4gICAgdGhpcy5fdmFsdWVSYW5nZSA9IGVuZCAtIHN0YXJ0O1xuICB9XG4gIGdldExhYmVsRm9yVmFsdWUodmFsdWUpIHtcbiAgICByZXR1cm4gZm9ybWF0TnVtYmVyKHZhbHVlLCB0aGlzLmNoYXJ0Lm9wdGlvbnMubG9jYWxlLCB0aGlzLm9wdGlvbnMudGlja3MuZm9ybWF0KTtcbiAgfVxufVxuXG5jbGFzcyBMaW5lYXJTY2FsZSBleHRlbmRzIExpbmVhclNjYWxlQmFzZSB7XG4gIGRldGVybWluZURhdGFMaW1pdHMoKSB7XG4gICAgY29uc3Qge21pbiwgbWF4fSA9IHRoaXMuZ2V0TWluTWF4KHRydWUpO1xuICAgIHRoaXMubWluID0gaXNOdW1iZXJGaW5pdGUobWluKSA/IG1pbiA6IDA7XG4gICAgdGhpcy5tYXggPSBpc051bWJlckZpbml0ZShtYXgpID8gbWF4IDogMTtcbiAgICB0aGlzLmhhbmRsZVRpY2tSYW5nZU9wdGlvbnMoKTtcbiAgfVxuICBjb21wdXRlVGlja0xpbWl0KCkge1xuICAgIGNvbnN0IGhvcml6b250YWwgPSB0aGlzLmlzSG9yaXpvbnRhbCgpO1xuICAgIGNvbnN0IGxlbmd0aCA9IGhvcml6b250YWwgPyB0aGlzLndpZHRoIDogdGhpcy5oZWlnaHQ7XG4gICAgY29uc3QgbWluUm90YXRpb24gPSB0b1JhZGlhbnModGhpcy5vcHRpb25zLnRpY2tzLm1pblJvdGF0aW9uKTtcbiAgICBjb25zdCByYXRpbyA9IChob3Jpem9udGFsID8gTWF0aC5zaW4obWluUm90YXRpb24pIDogTWF0aC5jb3MobWluUm90YXRpb24pKSB8fCAwLjAwMTtcbiAgICBjb25zdCB0aWNrRm9udCA9IHRoaXMuX3Jlc29sdmVUaWNrRm9udE9wdGlvbnMoMCk7XG4gICAgcmV0dXJuIE1hdGguY2VpbChsZW5ndGggLyBNYXRoLm1pbig0MCwgdGlja0ZvbnQubGluZUhlaWdodCAvIHJhdGlvKSk7XG4gIH1cbiAgZ2V0UGl4ZWxGb3JWYWx1ZSh2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZSA9PT0gbnVsbCA/IE5hTiA6IHRoaXMuZ2V0UGl4ZWxGb3JEZWNpbWFsKCh2YWx1ZSAtIHRoaXMuX3N0YXJ0VmFsdWUpIC8gdGhpcy5fdmFsdWVSYW5nZSk7XG4gIH1cbiAgZ2V0VmFsdWVGb3JQaXhlbChwaXhlbCkge1xuICAgIHJldHVybiB0aGlzLl9zdGFydFZhbHVlICsgdGhpcy5nZXREZWNpbWFsRm9yUGl4ZWwocGl4ZWwpICogdGhpcy5fdmFsdWVSYW5nZTtcbiAgfVxufVxuTGluZWFyU2NhbGUuaWQgPSAnbGluZWFyJztcbkxpbmVhclNjYWxlLmRlZmF1bHRzID0ge1xuICB0aWNrczoge1xuICAgIGNhbGxiYWNrOiBUaWNrcy5mb3JtYXR0ZXJzLm51bWVyaWNcbiAgfVxufTtcblxuZnVuY3Rpb24gaXNNYWpvcih0aWNrVmFsKSB7XG4gIGNvbnN0IHJlbWFpbiA9IHRpY2tWYWwgLyAoTWF0aC5wb3coMTAsIE1hdGguZmxvb3IobG9nMTAodGlja1ZhbCkpKSk7XG4gIHJldHVybiByZW1haW4gPT09IDE7XG59XG5mdW5jdGlvbiBnZW5lcmF0ZVRpY2tzKGdlbmVyYXRpb25PcHRpb25zLCBkYXRhUmFuZ2UpIHtcbiAgY29uc3QgZW5kRXhwID0gTWF0aC5mbG9vcihsb2cxMChkYXRhUmFuZ2UubWF4KSk7XG4gIGNvbnN0IGVuZFNpZ25pZmljYW5kID0gTWF0aC5jZWlsKGRhdGFSYW5nZS5tYXggLyBNYXRoLnBvdygxMCwgZW5kRXhwKSk7XG4gIGNvbnN0IHRpY2tzID0gW107XG4gIGxldCB0aWNrVmFsID0gZmluaXRlT3JEZWZhdWx0KGdlbmVyYXRpb25PcHRpb25zLm1pbiwgTWF0aC5wb3coMTAsIE1hdGguZmxvb3IobG9nMTAoZGF0YVJhbmdlLm1pbikpKSk7XG4gIGxldCBleHAgPSBNYXRoLmZsb29yKGxvZzEwKHRpY2tWYWwpKTtcbiAgbGV0IHNpZ25pZmljYW5kID0gTWF0aC5mbG9vcih0aWNrVmFsIC8gTWF0aC5wb3coMTAsIGV4cCkpO1xuICBsZXQgcHJlY2lzaW9uID0gZXhwIDwgMCA/IE1hdGgucG93KDEwLCBNYXRoLmFicyhleHApKSA6IDE7XG4gIGRvIHtcbiAgICB0aWNrcy5wdXNoKHt2YWx1ZTogdGlja1ZhbCwgbWFqb3I6IGlzTWFqb3IodGlja1ZhbCl9KTtcbiAgICArK3NpZ25pZmljYW5kO1xuICAgIGlmIChzaWduaWZpY2FuZCA9PT0gMTApIHtcbiAgICAgIHNpZ25pZmljYW5kID0gMTtcbiAgICAgICsrZXhwO1xuICAgICAgcHJlY2lzaW9uID0gZXhwID49IDAgPyAxIDogcHJlY2lzaW9uO1xuICAgIH1cbiAgICB0aWNrVmFsID0gTWF0aC5yb3VuZChzaWduaWZpY2FuZCAqIE1hdGgucG93KDEwLCBleHApICogcHJlY2lzaW9uKSAvIHByZWNpc2lvbjtcbiAgfSB3aGlsZSAoZXhwIDwgZW5kRXhwIHx8IChleHAgPT09IGVuZEV4cCAmJiBzaWduaWZpY2FuZCA8IGVuZFNpZ25pZmljYW5kKSk7XG4gIGNvbnN0IGxhc3RUaWNrID0gZmluaXRlT3JEZWZhdWx0KGdlbmVyYXRpb25PcHRpb25zLm1heCwgdGlja1ZhbCk7XG4gIHRpY2tzLnB1c2goe3ZhbHVlOiBsYXN0VGljaywgbWFqb3I6IGlzTWFqb3IodGlja1ZhbCl9KTtcbiAgcmV0dXJuIHRpY2tzO1xufVxuY2xhc3MgTG9nYXJpdGhtaWNTY2FsZSBleHRlbmRzIFNjYWxlIHtcbiAgY29uc3RydWN0b3IoY2ZnKSB7XG4gICAgc3VwZXIoY2ZnKTtcbiAgICB0aGlzLnN0YXJ0ID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuZW5kID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuX3N0YXJ0VmFsdWUgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5fdmFsdWVSYW5nZSA9IDA7XG4gIH1cbiAgcGFyc2UocmF3LCBpbmRleCkge1xuICAgIGNvbnN0IHZhbHVlID0gTGluZWFyU2NhbGVCYXNlLnByb3RvdHlwZS5wYXJzZS5hcHBseSh0aGlzLCBbcmF3LCBpbmRleF0pO1xuICAgIGlmICh2YWx1ZSA9PT0gMCkge1xuICAgICAgdGhpcy5femVybyA9IHRydWU7XG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbiAgICByZXR1cm4gaXNOdW1iZXJGaW5pdGUodmFsdWUpICYmIHZhbHVlID4gMCA/IHZhbHVlIDogbnVsbDtcbiAgfVxuICBkZXRlcm1pbmVEYXRhTGltaXRzKCkge1xuICAgIGNvbnN0IHttaW4sIG1heH0gPSB0aGlzLmdldE1pbk1heCh0cnVlKTtcbiAgICB0aGlzLm1pbiA9IGlzTnVtYmVyRmluaXRlKG1pbikgPyBNYXRoLm1heCgwLCBtaW4pIDogbnVsbDtcbiAgICB0aGlzLm1heCA9IGlzTnVtYmVyRmluaXRlKG1heCkgPyBNYXRoLm1heCgwLCBtYXgpIDogbnVsbDtcbiAgICBpZiAodGhpcy5vcHRpb25zLmJlZ2luQXRaZXJvKSB7XG4gICAgICB0aGlzLl96ZXJvID0gdHJ1ZTtcbiAgICB9XG4gICAgdGhpcy5oYW5kbGVUaWNrUmFuZ2VPcHRpb25zKCk7XG4gIH1cbiAgaGFuZGxlVGlja1JhbmdlT3B0aW9ucygpIHtcbiAgICBjb25zdCB7bWluRGVmaW5lZCwgbWF4RGVmaW5lZH0gPSB0aGlzLmdldFVzZXJCb3VuZHMoKTtcbiAgICBsZXQgbWluID0gdGhpcy5taW47XG4gICAgbGV0IG1heCA9IHRoaXMubWF4O1xuICAgIGNvbnN0IHNldE1pbiA9IHYgPT4gKG1pbiA9IG1pbkRlZmluZWQgPyBtaW4gOiB2KTtcbiAgICBjb25zdCBzZXRNYXggPSB2ID0+IChtYXggPSBtYXhEZWZpbmVkID8gbWF4IDogdik7XG4gICAgY29uc3QgZXhwID0gKHYsIG0pID0+IE1hdGgucG93KDEwLCBNYXRoLmZsb29yKGxvZzEwKHYpKSArIG0pO1xuICAgIGlmIChtaW4gPT09IG1heCkge1xuICAgICAgaWYgKG1pbiA8PSAwKSB7XG4gICAgICAgIHNldE1pbigxKTtcbiAgICAgICAgc2V0TWF4KDEwKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNldE1pbihleHAobWluLCAtMSkpO1xuICAgICAgICBzZXRNYXgoZXhwKG1heCwgKzEpKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKG1pbiA8PSAwKSB7XG4gICAgICBzZXRNaW4oZXhwKG1heCwgLTEpKTtcbiAgICB9XG4gICAgaWYgKG1heCA8PSAwKSB7XG4gICAgICBzZXRNYXgoZXhwKG1pbiwgKzEpKTtcbiAgICB9XG4gICAgaWYgKHRoaXMuX3plcm8gJiYgdGhpcy5taW4gIT09IHRoaXMuX3N1Z2dlc3RlZE1pbiAmJiBtaW4gPT09IGV4cCh0aGlzLm1pbiwgMCkpIHtcbiAgICAgIHNldE1pbihleHAobWluLCAtMSkpO1xuICAgIH1cbiAgICB0aGlzLm1pbiA9IG1pbjtcbiAgICB0aGlzLm1heCA9IG1heDtcbiAgfVxuICBidWlsZFRpY2tzKCkge1xuICAgIGNvbnN0IG9wdHMgPSB0aGlzLm9wdGlvbnM7XG4gICAgY29uc3QgZ2VuZXJhdGlvbk9wdGlvbnMgPSB7XG4gICAgICBtaW46IHRoaXMuX3VzZXJNaW4sXG4gICAgICBtYXg6IHRoaXMuX3VzZXJNYXhcbiAgICB9O1xuICAgIGNvbnN0IHRpY2tzID0gZ2VuZXJhdGVUaWNrcyhnZW5lcmF0aW9uT3B0aW9ucywgdGhpcyk7XG4gICAgaWYgKG9wdHMuYm91bmRzID09PSAndGlja3MnKSB7XG4gICAgICBfc2V0TWluQW5kTWF4QnlLZXkodGlja3MsIHRoaXMsICd2YWx1ZScpO1xuICAgIH1cbiAgICBpZiAob3B0cy5yZXZlcnNlKSB7XG4gICAgICB0aWNrcy5yZXZlcnNlKCk7XG4gICAgICB0aGlzLnN0YXJ0ID0gdGhpcy5tYXg7XG4gICAgICB0aGlzLmVuZCA9IHRoaXMubWluO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnN0YXJ0ID0gdGhpcy5taW47XG4gICAgICB0aGlzLmVuZCA9IHRoaXMubWF4O1xuICAgIH1cbiAgICByZXR1cm4gdGlja3M7XG4gIH1cbiAgZ2V0TGFiZWxGb3JWYWx1ZSh2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZSA9PT0gdW5kZWZpbmVkXG4gICAgICA/ICcwJ1xuICAgICAgOiBmb3JtYXROdW1iZXIodmFsdWUsIHRoaXMuY2hhcnQub3B0aW9ucy5sb2NhbGUsIHRoaXMub3B0aW9ucy50aWNrcy5mb3JtYXQpO1xuICB9XG4gIGNvbmZpZ3VyZSgpIHtcbiAgICBjb25zdCBzdGFydCA9IHRoaXMubWluO1xuICAgIHN1cGVyLmNvbmZpZ3VyZSgpO1xuICAgIHRoaXMuX3N0YXJ0VmFsdWUgPSBsb2cxMChzdGFydCk7XG4gICAgdGhpcy5fdmFsdWVSYW5nZSA9IGxvZzEwKHRoaXMubWF4KSAtIGxvZzEwKHN0YXJ0KTtcbiAgfVxuICBnZXRQaXhlbEZvclZhbHVlKHZhbHVlKSB7XG4gICAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQgfHwgdmFsdWUgPT09IDApIHtcbiAgICAgIHZhbHVlID0gdGhpcy5taW47XG4gICAgfVxuICAgIGlmICh2YWx1ZSA9PT0gbnVsbCB8fCBpc05hTih2YWx1ZSkpIHtcbiAgICAgIHJldHVybiBOYU47XG4gICAgfVxuICAgIHJldHVybiB0aGlzLmdldFBpeGVsRm9yRGVjaW1hbCh2YWx1ZSA9PT0gdGhpcy5taW5cbiAgICAgID8gMFxuICAgICAgOiAobG9nMTAodmFsdWUpIC0gdGhpcy5fc3RhcnRWYWx1ZSkgLyB0aGlzLl92YWx1ZVJhbmdlKTtcbiAgfVxuICBnZXRWYWx1ZUZvclBpeGVsKHBpeGVsKSB7XG4gICAgY29uc3QgZGVjaW1hbCA9IHRoaXMuZ2V0RGVjaW1hbEZvclBpeGVsKHBpeGVsKTtcbiAgICByZXR1cm4gTWF0aC5wb3coMTAsIHRoaXMuX3N0YXJ0VmFsdWUgKyBkZWNpbWFsICogdGhpcy5fdmFsdWVSYW5nZSk7XG4gIH1cbn1cbkxvZ2FyaXRobWljU2NhbGUuaWQgPSAnbG9nYXJpdGhtaWMnO1xuTG9nYXJpdGhtaWNTY2FsZS5kZWZhdWx0cyA9IHtcbiAgdGlja3M6IHtcbiAgICBjYWxsYmFjazogVGlja3MuZm9ybWF0dGVycy5sb2dhcml0aG1pYyxcbiAgICBtYWpvcjoge1xuICAgICAgZW5hYmxlZDogdHJ1ZVxuICAgIH1cbiAgfVxufTtcblxuZnVuY3Rpb24gZ2V0VGlja0JhY2tkcm9wSGVpZ2h0KG9wdHMpIHtcbiAgY29uc3QgdGlja09wdHMgPSBvcHRzLnRpY2tzO1xuICBpZiAodGlja09wdHMuZGlzcGxheSAmJiBvcHRzLmRpc3BsYXkpIHtcbiAgICBjb25zdCBwYWRkaW5nID0gdG9QYWRkaW5nKHRpY2tPcHRzLmJhY2tkcm9wUGFkZGluZyk7XG4gICAgcmV0dXJuIHZhbHVlT3JEZWZhdWx0KHRpY2tPcHRzLmZvbnQgJiYgdGlja09wdHMuZm9udC5zaXplLCBkZWZhdWx0cy5mb250LnNpemUpICsgcGFkZGluZy5oZWlnaHQ7XG4gIH1cbiAgcmV0dXJuIDA7XG59XG5mdW5jdGlvbiBtZWFzdXJlTGFiZWxTaXplKGN0eCwgZm9udCwgbGFiZWwpIHtcbiAgbGFiZWwgPSBpc0FycmF5KGxhYmVsKSA/IGxhYmVsIDogW2xhYmVsXTtcbiAgcmV0dXJuIHtcbiAgICB3OiBfbG9uZ2VzdFRleHQoY3R4LCBmb250LnN0cmluZywgbGFiZWwpLFxuICAgIGg6IGxhYmVsLmxlbmd0aCAqIGZvbnQubGluZUhlaWdodFxuICB9O1xufVxuZnVuY3Rpb24gZGV0ZXJtaW5lTGltaXRzKGFuZ2xlLCBwb3MsIHNpemUsIG1pbiwgbWF4KSB7XG4gIGlmIChhbmdsZSA9PT0gbWluIHx8IGFuZ2xlID09PSBtYXgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgc3RhcnQ6IHBvcyAtIChzaXplIC8gMiksXG4gICAgICBlbmQ6IHBvcyArIChzaXplIC8gMilcbiAgICB9O1xuICB9IGVsc2UgaWYgKGFuZ2xlIDwgbWluIHx8IGFuZ2xlID4gbWF4KSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHN0YXJ0OiBwb3MgLSBzaXplLFxuICAgICAgZW5kOiBwb3NcbiAgICB9O1xuICB9XG4gIHJldHVybiB7XG4gICAgc3RhcnQ6IHBvcyxcbiAgICBlbmQ6IHBvcyArIHNpemVcbiAgfTtcbn1cbmZ1bmN0aW9uIGZpdFdpdGhQb2ludExhYmVscyhzY2FsZSkge1xuICBjb25zdCBvcmlnID0ge1xuICAgIGw6IHNjYWxlLmxlZnQgKyBzY2FsZS5fcGFkZGluZy5sZWZ0LFxuICAgIHI6IHNjYWxlLnJpZ2h0IC0gc2NhbGUuX3BhZGRpbmcucmlnaHQsXG4gICAgdDogc2NhbGUudG9wICsgc2NhbGUuX3BhZGRpbmcudG9wLFxuICAgIGI6IHNjYWxlLmJvdHRvbSAtIHNjYWxlLl9wYWRkaW5nLmJvdHRvbVxuICB9O1xuICBjb25zdCBsaW1pdHMgPSBPYmplY3QuYXNzaWduKHt9LCBvcmlnKTtcbiAgY29uc3QgbGFiZWxTaXplcyA9IFtdO1xuICBjb25zdCBwYWRkaW5nID0gW107XG4gIGNvbnN0IHZhbHVlQ291bnQgPSBzY2FsZS5fcG9pbnRMYWJlbHMubGVuZ3RoO1xuICBjb25zdCBwb2ludExhYmVsT3B0cyA9IHNjYWxlLm9wdGlvbnMucG9pbnRMYWJlbHM7XG4gIGNvbnN0IGFkZGl0aW9uYWxBbmdsZSA9IHBvaW50TGFiZWxPcHRzLmNlbnRlclBvaW50TGFiZWxzID8gUEkgLyB2YWx1ZUNvdW50IDogMDtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCB2YWx1ZUNvdW50OyBpKyspIHtcbiAgICBjb25zdCBvcHRzID0gcG9pbnRMYWJlbE9wdHMuc2V0Q29udGV4dChzY2FsZS5nZXRQb2ludExhYmVsQ29udGV4dChpKSk7XG4gICAgcGFkZGluZ1tpXSA9IG9wdHMucGFkZGluZztcbiAgICBjb25zdCBwb2ludFBvc2l0aW9uID0gc2NhbGUuZ2V0UG9pbnRQb3NpdGlvbihpLCBzY2FsZS5kcmF3aW5nQXJlYSArIHBhZGRpbmdbaV0sIGFkZGl0aW9uYWxBbmdsZSk7XG4gICAgY29uc3QgcGxGb250ID0gdG9Gb250KG9wdHMuZm9udCk7XG4gICAgY29uc3QgdGV4dFNpemUgPSBtZWFzdXJlTGFiZWxTaXplKHNjYWxlLmN0eCwgcGxGb250LCBzY2FsZS5fcG9pbnRMYWJlbHNbaV0pO1xuICAgIGxhYmVsU2l6ZXNbaV0gPSB0ZXh0U2l6ZTtcbiAgICBjb25zdCBhbmdsZVJhZGlhbnMgPSBfbm9ybWFsaXplQW5nbGUoc2NhbGUuZ2V0SW5kZXhBbmdsZShpKSArIGFkZGl0aW9uYWxBbmdsZSk7XG4gICAgY29uc3QgYW5nbGUgPSBNYXRoLnJvdW5kKHRvRGVncmVlcyhhbmdsZVJhZGlhbnMpKTtcbiAgICBjb25zdCBoTGltaXRzID0gZGV0ZXJtaW5lTGltaXRzKGFuZ2xlLCBwb2ludFBvc2l0aW9uLngsIHRleHRTaXplLncsIDAsIDE4MCk7XG4gICAgY29uc3QgdkxpbWl0cyA9IGRldGVybWluZUxpbWl0cyhhbmdsZSwgcG9pbnRQb3NpdGlvbi55LCB0ZXh0U2l6ZS5oLCA5MCwgMjcwKTtcbiAgICB1cGRhdGVMaW1pdHMobGltaXRzLCBvcmlnLCBhbmdsZVJhZGlhbnMsIGhMaW1pdHMsIHZMaW1pdHMpO1xuICB9XG4gIHNjYWxlLnNldENlbnRlclBvaW50KFxuICAgIG9yaWcubCAtIGxpbWl0cy5sLFxuICAgIGxpbWl0cy5yIC0gb3JpZy5yLFxuICAgIG9yaWcudCAtIGxpbWl0cy50LFxuICAgIGxpbWl0cy5iIC0gb3JpZy5iXG4gICk7XG4gIHNjYWxlLl9wb2ludExhYmVsSXRlbXMgPSBidWlsZFBvaW50TGFiZWxJdGVtcyhzY2FsZSwgbGFiZWxTaXplcywgcGFkZGluZyk7XG59XG5mdW5jdGlvbiB1cGRhdGVMaW1pdHMobGltaXRzLCBvcmlnLCBhbmdsZSwgaExpbWl0cywgdkxpbWl0cykge1xuICBjb25zdCBzaW4gPSBNYXRoLmFicyhNYXRoLnNpbihhbmdsZSkpO1xuICBjb25zdCBjb3MgPSBNYXRoLmFicyhNYXRoLmNvcyhhbmdsZSkpO1xuICBsZXQgeCA9IDA7XG4gIGxldCB5ID0gMDtcbiAgaWYgKGhMaW1pdHMuc3RhcnQgPCBvcmlnLmwpIHtcbiAgICB4ID0gKG9yaWcubCAtIGhMaW1pdHMuc3RhcnQpIC8gc2luO1xuICAgIGxpbWl0cy5sID0gTWF0aC5taW4obGltaXRzLmwsIG9yaWcubCAtIHgpO1xuICB9IGVsc2UgaWYgKGhMaW1pdHMuZW5kID4gb3JpZy5yKSB7XG4gICAgeCA9IChoTGltaXRzLmVuZCAtIG9yaWcucikgLyBzaW47XG4gICAgbGltaXRzLnIgPSBNYXRoLm1heChsaW1pdHMuciwgb3JpZy5yICsgeCk7XG4gIH1cbiAgaWYgKHZMaW1pdHMuc3RhcnQgPCBvcmlnLnQpIHtcbiAgICB5ID0gKG9yaWcudCAtIHZMaW1pdHMuc3RhcnQpIC8gY29zO1xuICAgIGxpbWl0cy50ID0gTWF0aC5taW4obGltaXRzLnQsIG9yaWcudCAtIHkpO1xuICB9IGVsc2UgaWYgKHZMaW1pdHMuZW5kID4gb3JpZy5iKSB7XG4gICAgeSA9ICh2TGltaXRzLmVuZCAtIG9yaWcuYikgLyBjb3M7XG4gICAgbGltaXRzLmIgPSBNYXRoLm1heChsaW1pdHMuYiwgb3JpZy5iICsgeSk7XG4gIH1cbn1cbmZ1bmN0aW9uIGJ1aWxkUG9pbnRMYWJlbEl0ZW1zKHNjYWxlLCBsYWJlbFNpemVzLCBwYWRkaW5nKSB7XG4gIGNvbnN0IGl0ZW1zID0gW107XG4gIGNvbnN0IHZhbHVlQ291bnQgPSBzY2FsZS5fcG9pbnRMYWJlbHMubGVuZ3RoO1xuICBjb25zdCBvcHRzID0gc2NhbGUub3B0aW9ucztcbiAgY29uc3QgZXh0cmEgPSBnZXRUaWNrQmFja2Ryb3BIZWlnaHQob3B0cykgLyAyO1xuICBjb25zdCBvdXRlckRpc3RhbmNlID0gc2NhbGUuZHJhd2luZ0FyZWE7XG4gIGNvbnN0IGFkZGl0aW9uYWxBbmdsZSA9IG9wdHMucG9pbnRMYWJlbHMuY2VudGVyUG9pbnRMYWJlbHMgPyBQSSAvIHZhbHVlQ291bnQgOiAwO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IHZhbHVlQ291bnQ7IGkrKykge1xuICAgIGNvbnN0IHBvaW50TGFiZWxQb3NpdGlvbiA9IHNjYWxlLmdldFBvaW50UG9zaXRpb24oaSwgb3V0ZXJEaXN0YW5jZSArIGV4dHJhICsgcGFkZGluZ1tpXSwgYWRkaXRpb25hbEFuZ2xlKTtcbiAgICBjb25zdCBhbmdsZSA9IE1hdGgucm91bmQodG9EZWdyZWVzKF9ub3JtYWxpemVBbmdsZShwb2ludExhYmVsUG9zaXRpb24uYW5nbGUgKyBIQUxGX1BJKSkpO1xuICAgIGNvbnN0IHNpemUgPSBsYWJlbFNpemVzW2ldO1xuICAgIGNvbnN0IHkgPSB5Rm9yQW5nbGUocG9pbnRMYWJlbFBvc2l0aW9uLnksIHNpemUuaCwgYW5nbGUpO1xuICAgIGNvbnN0IHRleHRBbGlnbiA9IGdldFRleHRBbGlnbkZvckFuZ2xlKGFuZ2xlKTtcbiAgICBjb25zdCBsZWZ0ID0gbGVmdEZvclRleHRBbGlnbihwb2ludExhYmVsUG9zaXRpb24ueCwgc2l6ZS53LCB0ZXh0QWxpZ24pO1xuICAgIGl0ZW1zLnB1c2goe1xuICAgICAgeDogcG9pbnRMYWJlbFBvc2l0aW9uLngsXG4gICAgICB5LFxuICAgICAgdGV4dEFsaWduLFxuICAgICAgbGVmdCxcbiAgICAgIHRvcDogeSxcbiAgICAgIHJpZ2h0OiBsZWZ0ICsgc2l6ZS53LFxuICAgICAgYm90dG9tOiB5ICsgc2l6ZS5oXG4gICAgfSk7XG4gIH1cbiAgcmV0dXJuIGl0ZW1zO1xufVxuZnVuY3Rpb24gZ2V0VGV4dEFsaWduRm9yQW5nbGUoYW5nbGUpIHtcbiAgaWYgKGFuZ2xlID09PSAwIHx8IGFuZ2xlID09PSAxODApIHtcbiAgICByZXR1cm4gJ2NlbnRlcic7XG4gIH0gZWxzZSBpZiAoYW5nbGUgPCAxODApIHtcbiAgICByZXR1cm4gJ2xlZnQnO1xuICB9XG4gIHJldHVybiAncmlnaHQnO1xufVxuZnVuY3Rpb24gbGVmdEZvclRleHRBbGlnbih4LCB3LCBhbGlnbikge1xuICBpZiAoYWxpZ24gPT09ICdyaWdodCcpIHtcbiAgICB4IC09IHc7XG4gIH0gZWxzZSBpZiAoYWxpZ24gPT09ICdjZW50ZXInKSB7XG4gICAgeCAtPSAodyAvIDIpO1xuICB9XG4gIHJldHVybiB4O1xufVxuZnVuY3Rpb24geUZvckFuZ2xlKHksIGgsIGFuZ2xlKSB7XG4gIGlmIChhbmdsZSA9PT0gOTAgfHwgYW5nbGUgPT09IDI3MCkge1xuICAgIHkgLT0gKGggLyAyKTtcbiAgfSBlbHNlIGlmIChhbmdsZSA+IDI3MCB8fCBhbmdsZSA8IDkwKSB7XG4gICAgeSAtPSBoO1xuICB9XG4gIHJldHVybiB5O1xufVxuZnVuY3Rpb24gZHJhd1BvaW50TGFiZWxzKHNjYWxlLCBsYWJlbENvdW50KSB7XG4gIGNvbnN0IHtjdHgsIG9wdGlvbnM6IHtwb2ludExhYmVsc319ID0gc2NhbGU7XG4gIGZvciAobGV0IGkgPSBsYWJlbENvdW50IC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICBjb25zdCBvcHRzQXRJbmRleCA9IHBvaW50TGFiZWxzLnNldENvbnRleHQoc2NhbGUuZ2V0UG9pbnRMYWJlbENvbnRleHQoaSkpO1xuICAgIGNvbnN0IHBsRm9udCA9IHRvRm9udChvcHRzQXRJbmRleC5mb250KTtcbiAgICBjb25zdCB7eCwgeSwgdGV4dEFsaWduLCBsZWZ0LCB0b3AsIHJpZ2h0LCBib3R0b219ID0gc2NhbGUuX3BvaW50TGFiZWxJdGVtc1tpXTtcbiAgICBjb25zdCB7YmFja2Ryb3BDb2xvcn0gPSBvcHRzQXRJbmRleDtcbiAgICBpZiAoIWlzTnVsbE9yVW5kZWYoYmFja2Ryb3BDb2xvcikpIHtcbiAgICAgIGNvbnN0IHBhZGRpbmcgPSB0b1BhZGRpbmcob3B0c0F0SW5kZXguYmFja2Ryb3BQYWRkaW5nKTtcbiAgICAgIGN0eC5maWxsU3R5bGUgPSBiYWNrZHJvcENvbG9yO1xuICAgICAgY3R4LmZpbGxSZWN0KGxlZnQgLSBwYWRkaW5nLmxlZnQsIHRvcCAtIHBhZGRpbmcudG9wLCByaWdodCAtIGxlZnQgKyBwYWRkaW5nLndpZHRoLCBib3R0b20gLSB0b3AgKyBwYWRkaW5nLmhlaWdodCk7XG4gICAgfVxuICAgIHJlbmRlclRleHQoXG4gICAgICBjdHgsXG4gICAgICBzY2FsZS5fcG9pbnRMYWJlbHNbaV0sXG4gICAgICB4LFxuICAgICAgeSArIChwbEZvbnQubGluZUhlaWdodCAvIDIpLFxuICAgICAgcGxGb250LFxuICAgICAge1xuICAgICAgICBjb2xvcjogb3B0c0F0SW5kZXguY29sb3IsXG4gICAgICAgIHRleHRBbGlnbjogdGV4dEFsaWduLFxuICAgICAgICB0ZXh0QmFzZWxpbmU6ICdtaWRkbGUnXG4gICAgICB9XG4gICAgKTtcbiAgfVxufVxuZnVuY3Rpb24gcGF0aFJhZGl1c0xpbmUoc2NhbGUsIHJhZGl1cywgY2lyY3VsYXIsIGxhYmVsQ291bnQpIHtcbiAgY29uc3Qge2N0eH0gPSBzY2FsZTtcbiAgaWYgKGNpcmN1bGFyKSB7XG4gICAgY3R4LmFyYyhzY2FsZS54Q2VudGVyLCBzY2FsZS55Q2VudGVyLCByYWRpdXMsIDAsIFRBVSk7XG4gIH0gZWxzZSB7XG4gICAgbGV0IHBvaW50UG9zaXRpb24gPSBzY2FsZS5nZXRQb2ludFBvc2l0aW9uKDAsIHJhZGl1cyk7XG4gICAgY3R4Lm1vdmVUbyhwb2ludFBvc2l0aW9uLngsIHBvaW50UG9zaXRpb24ueSk7XG4gICAgZm9yIChsZXQgaSA9IDE7IGkgPCBsYWJlbENvdW50OyBpKyspIHtcbiAgICAgIHBvaW50UG9zaXRpb24gPSBzY2FsZS5nZXRQb2ludFBvc2l0aW9uKGksIHJhZGl1cyk7XG4gICAgICBjdHgubGluZVRvKHBvaW50UG9zaXRpb24ueCwgcG9pbnRQb3NpdGlvbi55KTtcbiAgICB9XG4gIH1cbn1cbmZ1bmN0aW9uIGRyYXdSYWRpdXNMaW5lKHNjYWxlLCBncmlkTGluZU9wdHMsIHJhZGl1cywgbGFiZWxDb3VudCkge1xuICBjb25zdCBjdHggPSBzY2FsZS5jdHg7XG4gIGNvbnN0IGNpcmN1bGFyID0gZ3JpZExpbmVPcHRzLmNpcmN1bGFyO1xuICBjb25zdCB7Y29sb3IsIGxpbmVXaWR0aH0gPSBncmlkTGluZU9wdHM7XG4gIGlmICgoIWNpcmN1bGFyICYmICFsYWJlbENvdW50KSB8fCAhY29sb3IgfHwgIWxpbmVXaWR0aCB8fCByYWRpdXMgPCAwKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGN0eC5zYXZlKCk7XG4gIGN0eC5zdHJva2VTdHlsZSA9IGNvbG9yO1xuICBjdHgubGluZVdpZHRoID0gbGluZVdpZHRoO1xuICBjdHguc2V0TGluZURhc2goZ3JpZExpbmVPcHRzLmJvcmRlckRhc2gpO1xuICBjdHgubGluZURhc2hPZmZzZXQgPSBncmlkTGluZU9wdHMuYm9yZGVyRGFzaE9mZnNldDtcbiAgY3R4LmJlZ2luUGF0aCgpO1xuICBwYXRoUmFkaXVzTGluZShzY2FsZSwgcmFkaXVzLCBjaXJjdWxhciwgbGFiZWxDb3VudCk7XG4gIGN0eC5jbG9zZVBhdGgoKTtcbiAgY3R4LnN0cm9rZSgpO1xuICBjdHgucmVzdG9yZSgpO1xufVxuZnVuY3Rpb24gY3JlYXRlUG9pbnRMYWJlbENvbnRleHQocGFyZW50LCBpbmRleCwgbGFiZWwpIHtcbiAgcmV0dXJuIGNyZWF0ZUNvbnRleHQocGFyZW50LCB7XG4gICAgbGFiZWwsXG4gICAgaW5kZXgsXG4gICAgdHlwZTogJ3BvaW50TGFiZWwnXG4gIH0pO1xufVxuY2xhc3MgUmFkaWFsTGluZWFyU2NhbGUgZXh0ZW5kcyBMaW5lYXJTY2FsZUJhc2Uge1xuICBjb25zdHJ1Y3RvcihjZmcpIHtcbiAgICBzdXBlcihjZmcpO1xuICAgIHRoaXMueENlbnRlciA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLnlDZW50ZXIgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5kcmF3aW5nQXJlYSA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLl9wb2ludExhYmVscyA9IFtdO1xuICAgIHRoaXMuX3BvaW50TGFiZWxJdGVtcyA9IFtdO1xuICB9XG4gIHNldERpbWVuc2lvbnMoKSB7XG4gICAgY29uc3QgcGFkZGluZyA9IHRoaXMuX3BhZGRpbmcgPSB0b1BhZGRpbmcoZ2V0VGlja0JhY2tkcm9wSGVpZ2h0KHRoaXMub3B0aW9ucykgLyAyKTtcbiAgICBjb25zdCB3ID0gdGhpcy53aWR0aCA9IHRoaXMubWF4V2lkdGggLSBwYWRkaW5nLndpZHRoO1xuICAgIGNvbnN0IGggPSB0aGlzLmhlaWdodCA9IHRoaXMubWF4SGVpZ2h0IC0gcGFkZGluZy5oZWlnaHQ7XG4gICAgdGhpcy54Q2VudGVyID0gTWF0aC5mbG9vcih0aGlzLmxlZnQgKyB3IC8gMiArIHBhZGRpbmcubGVmdCk7XG4gICAgdGhpcy55Q2VudGVyID0gTWF0aC5mbG9vcih0aGlzLnRvcCArIGggLyAyICsgcGFkZGluZy50b3ApO1xuICAgIHRoaXMuZHJhd2luZ0FyZWEgPSBNYXRoLmZsb29yKE1hdGgubWluKHcsIGgpIC8gMik7XG4gIH1cbiAgZGV0ZXJtaW5lRGF0YUxpbWl0cygpIHtcbiAgICBjb25zdCB7bWluLCBtYXh9ID0gdGhpcy5nZXRNaW5NYXgoZmFsc2UpO1xuICAgIHRoaXMubWluID0gaXNOdW1iZXJGaW5pdGUobWluKSAmJiAhaXNOYU4obWluKSA/IG1pbiA6IDA7XG4gICAgdGhpcy5tYXggPSBpc051bWJlckZpbml0ZShtYXgpICYmICFpc05hTihtYXgpID8gbWF4IDogMDtcbiAgICB0aGlzLmhhbmRsZVRpY2tSYW5nZU9wdGlvbnMoKTtcbiAgfVxuICBjb21wdXRlVGlja0xpbWl0KCkge1xuICAgIHJldHVybiBNYXRoLmNlaWwodGhpcy5kcmF3aW5nQXJlYSAvIGdldFRpY2tCYWNrZHJvcEhlaWdodCh0aGlzLm9wdGlvbnMpKTtcbiAgfVxuICBnZW5lcmF0ZVRpY2tMYWJlbHModGlja3MpIHtcbiAgICBMaW5lYXJTY2FsZUJhc2UucHJvdG90eXBlLmdlbmVyYXRlVGlja0xhYmVscy5jYWxsKHRoaXMsIHRpY2tzKTtcbiAgICB0aGlzLl9wb2ludExhYmVscyA9IHRoaXMuZ2V0TGFiZWxzKClcbiAgICAgIC5tYXAoKHZhbHVlLCBpbmRleCkgPT4ge1xuICAgICAgICBjb25zdCBsYWJlbCA9IGNhbGxiYWNrKHRoaXMub3B0aW9ucy5wb2ludExhYmVscy5jYWxsYmFjaywgW3ZhbHVlLCBpbmRleF0sIHRoaXMpO1xuICAgICAgICByZXR1cm4gbGFiZWwgfHwgbGFiZWwgPT09IDAgPyBsYWJlbCA6ICcnO1xuICAgICAgfSlcbiAgICAgIC5maWx0ZXIoKHYsIGkpID0+IHRoaXMuY2hhcnQuZ2V0RGF0YVZpc2liaWxpdHkoaSkpO1xuICB9XG4gIGZpdCgpIHtcbiAgICBjb25zdCBvcHRzID0gdGhpcy5vcHRpb25zO1xuICAgIGlmIChvcHRzLmRpc3BsYXkgJiYgb3B0cy5wb2ludExhYmVscy5kaXNwbGF5KSB7XG4gICAgICBmaXRXaXRoUG9pbnRMYWJlbHModGhpcyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuc2V0Q2VudGVyUG9pbnQoMCwgMCwgMCwgMCk7XG4gICAgfVxuICB9XG4gIHNldENlbnRlclBvaW50KGxlZnRNb3ZlbWVudCwgcmlnaHRNb3ZlbWVudCwgdG9wTW92ZW1lbnQsIGJvdHRvbU1vdmVtZW50KSB7XG4gICAgdGhpcy54Q2VudGVyICs9IE1hdGguZmxvb3IoKGxlZnRNb3ZlbWVudCAtIHJpZ2h0TW92ZW1lbnQpIC8gMik7XG4gICAgdGhpcy55Q2VudGVyICs9IE1hdGguZmxvb3IoKHRvcE1vdmVtZW50IC0gYm90dG9tTW92ZW1lbnQpIC8gMik7XG4gICAgdGhpcy5kcmF3aW5nQXJlYSAtPSBNYXRoLm1pbih0aGlzLmRyYXdpbmdBcmVhIC8gMiwgTWF0aC5tYXgobGVmdE1vdmVtZW50LCByaWdodE1vdmVtZW50LCB0b3BNb3ZlbWVudCwgYm90dG9tTW92ZW1lbnQpKTtcbiAgfVxuICBnZXRJbmRleEFuZ2xlKGluZGV4KSB7XG4gICAgY29uc3QgYW5nbGVNdWx0aXBsaWVyID0gVEFVIC8gKHRoaXMuX3BvaW50TGFiZWxzLmxlbmd0aCB8fCAxKTtcbiAgICBjb25zdCBzdGFydEFuZ2xlID0gdGhpcy5vcHRpb25zLnN0YXJ0QW5nbGUgfHwgMDtcbiAgICByZXR1cm4gX25vcm1hbGl6ZUFuZ2xlKGluZGV4ICogYW5nbGVNdWx0aXBsaWVyICsgdG9SYWRpYW5zKHN0YXJ0QW5nbGUpKTtcbiAgfVxuICBnZXREaXN0YW5jZUZyb21DZW50ZXJGb3JWYWx1ZSh2YWx1ZSkge1xuICAgIGlmIChpc051bGxPclVuZGVmKHZhbHVlKSkge1xuICAgICAgcmV0dXJuIE5hTjtcbiAgICB9XG4gICAgY29uc3Qgc2NhbGluZ0ZhY3RvciA9IHRoaXMuZHJhd2luZ0FyZWEgLyAodGhpcy5tYXggLSB0aGlzLm1pbik7XG4gICAgaWYgKHRoaXMub3B0aW9ucy5yZXZlcnNlKSB7XG4gICAgICByZXR1cm4gKHRoaXMubWF4IC0gdmFsdWUpICogc2NhbGluZ0ZhY3RvcjtcbiAgICB9XG4gICAgcmV0dXJuICh2YWx1ZSAtIHRoaXMubWluKSAqIHNjYWxpbmdGYWN0b3I7XG4gIH1cbiAgZ2V0VmFsdWVGb3JEaXN0YW5jZUZyb21DZW50ZXIoZGlzdGFuY2UpIHtcbiAgICBpZiAoaXNOdWxsT3JVbmRlZihkaXN0YW5jZSkpIHtcbiAgICAgIHJldHVybiBOYU47XG4gICAgfVxuICAgIGNvbnN0IHNjYWxlZERpc3RhbmNlID0gZGlzdGFuY2UgLyAodGhpcy5kcmF3aW5nQXJlYSAvICh0aGlzLm1heCAtIHRoaXMubWluKSk7XG4gICAgcmV0dXJuIHRoaXMub3B0aW9ucy5yZXZlcnNlID8gdGhpcy5tYXggLSBzY2FsZWREaXN0YW5jZSA6IHRoaXMubWluICsgc2NhbGVkRGlzdGFuY2U7XG4gIH1cbiAgZ2V0UG9pbnRMYWJlbENvbnRleHQoaW5kZXgpIHtcbiAgICBjb25zdCBwb2ludExhYmVscyA9IHRoaXMuX3BvaW50TGFiZWxzIHx8IFtdO1xuICAgIGlmIChpbmRleCA+PSAwICYmIGluZGV4IDwgcG9pbnRMYWJlbHMubGVuZ3RoKSB7XG4gICAgICBjb25zdCBwb2ludExhYmVsID0gcG9pbnRMYWJlbHNbaW5kZXhdO1xuICAgICAgcmV0dXJuIGNyZWF0ZVBvaW50TGFiZWxDb250ZXh0KHRoaXMuZ2V0Q29udGV4dCgpLCBpbmRleCwgcG9pbnRMYWJlbCk7XG4gICAgfVxuICB9XG4gIGdldFBvaW50UG9zaXRpb24oaW5kZXgsIGRpc3RhbmNlRnJvbUNlbnRlciwgYWRkaXRpb25hbEFuZ2xlID0gMCkge1xuICAgIGNvbnN0IGFuZ2xlID0gdGhpcy5nZXRJbmRleEFuZ2xlKGluZGV4KSAtIEhBTEZfUEkgKyBhZGRpdGlvbmFsQW5nbGU7XG4gICAgcmV0dXJuIHtcbiAgICAgIHg6IE1hdGguY29zKGFuZ2xlKSAqIGRpc3RhbmNlRnJvbUNlbnRlciArIHRoaXMueENlbnRlcixcbiAgICAgIHk6IE1hdGguc2luKGFuZ2xlKSAqIGRpc3RhbmNlRnJvbUNlbnRlciArIHRoaXMueUNlbnRlcixcbiAgICAgIGFuZ2xlXG4gICAgfTtcbiAgfVxuICBnZXRQb2ludFBvc2l0aW9uRm9yVmFsdWUoaW5kZXgsIHZhbHVlKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0UG9pbnRQb3NpdGlvbihpbmRleCwgdGhpcy5nZXREaXN0YW5jZUZyb21DZW50ZXJGb3JWYWx1ZSh2YWx1ZSkpO1xuICB9XG4gIGdldEJhc2VQb3NpdGlvbihpbmRleCkge1xuICAgIHJldHVybiB0aGlzLmdldFBvaW50UG9zaXRpb25Gb3JWYWx1ZShpbmRleCB8fCAwLCB0aGlzLmdldEJhc2VWYWx1ZSgpKTtcbiAgfVxuICBnZXRQb2ludExhYmVsUG9zaXRpb24oaW5kZXgpIHtcbiAgICBjb25zdCB7bGVmdCwgdG9wLCByaWdodCwgYm90dG9tfSA9IHRoaXMuX3BvaW50TGFiZWxJdGVtc1tpbmRleF07XG4gICAgcmV0dXJuIHtcbiAgICAgIGxlZnQsXG4gICAgICB0b3AsXG4gICAgICByaWdodCxcbiAgICAgIGJvdHRvbSxcbiAgICB9O1xuICB9XG4gIGRyYXdCYWNrZ3JvdW5kKCkge1xuICAgIGNvbnN0IHtiYWNrZ3JvdW5kQ29sb3IsIGdyaWQ6IHtjaXJjdWxhcn19ID0gdGhpcy5vcHRpb25zO1xuICAgIGlmIChiYWNrZ3JvdW5kQ29sb3IpIHtcbiAgICAgIGNvbnN0IGN0eCA9IHRoaXMuY3R4O1xuICAgICAgY3R4LnNhdmUoKTtcbiAgICAgIGN0eC5iZWdpblBhdGgoKTtcbiAgICAgIHBhdGhSYWRpdXNMaW5lKHRoaXMsIHRoaXMuZ2V0RGlzdGFuY2VGcm9tQ2VudGVyRm9yVmFsdWUodGhpcy5fZW5kVmFsdWUpLCBjaXJjdWxhciwgdGhpcy5fcG9pbnRMYWJlbHMubGVuZ3RoKTtcbiAgICAgIGN0eC5jbG9zZVBhdGgoKTtcbiAgICAgIGN0eC5maWxsU3R5bGUgPSBiYWNrZ3JvdW5kQ29sb3I7XG4gICAgICBjdHguZmlsbCgpO1xuICAgICAgY3R4LnJlc3RvcmUoKTtcbiAgICB9XG4gIH1cbiAgZHJhd0dyaWQoKSB7XG4gICAgY29uc3QgY3R4ID0gdGhpcy5jdHg7XG4gICAgY29uc3Qgb3B0cyA9IHRoaXMub3B0aW9ucztcbiAgICBjb25zdCB7YW5nbGVMaW5lcywgZ3JpZH0gPSBvcHRzO1xuICAgIGNvbnN0IGxhYmVsQ291bnQgPSB0aGlzLl9wb2ludExhYmVscy5sZW5ndGg7XG4gICAgbGV0IGksIG9mZnNldCwgcG9zaXRpb247XG4gICAgaWYgKG9wdHMucG9pbnRMYWJlbHMuZGlzcGxheSkge1xuICAgICAgZHJhd1BvaW50TGFiZWxzKHRoaXMsIGxhYmVsQ291bnQpO1xuICAgIH1cbiAgICBpZiAoZ3JpZC5kaXNwbGF5KSB7XG4gICAgICB0aGlzLnRpY2tzLmZvckVhY2goKHRpY2ssIGluZGV4KSA9PiB7XG4gICAgICAgIGlmIChpbmRleCAhPT0gMCkge1xuICAgICAgICAgIG9mZnNldCA9IHRoaXMuZ2V0RGlzdGFuY2VGcm9tQ2VudGVyRm9yVmFsdWUodGljay52YWx1ZSk7XG4gICAgICAgICAgY29uc3Qgb3B0c0F0SW5kZXggPSBncmlkLnNldENvbnRleHQodGhpcy5nZXRDb250ZXh0KGluZGV4IC0gMSkpO1xuICAgICAgICAgIGRyYXdSYWRpdXNMaW5lKHRoaXMsIG9wdHNBdEluZGV4LCBvZmZzZXQsIGxhYmVsQ291bnQpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gICAgaWYgKGFuZ2xlTGluZXMuZGlzcGxheSkge1xuICAgICAgY3R4LnNhdmUoKTtcbiAgICAgIGZvciAoaSA9IGxhYmVsQ291bnQgLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgICBjb25zdCBvcHRzQXRJbmRleCA9IGFuZ2xlTGluZXMuc2V0Q29udGV4dCh0aGlzLmdldFBvaW50TGFiZWxDb250ZXh0KGkpKTtcbiAgICAgICAgY29uc3Qge2NvbG9yLCBsaW5lV2lkdGh9ID0gb3B0c0F0SW5kZXg7XG4gICAgICAgIGlmICghbGluZVdpZHRoIHx8ICFjb2xvcikge1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGN0eC5saW5lV2lkdGggPSBsaW5lV2lkdGg7XG4gICAgICAgIGN0eC5zdHJva2VTdHlsZSA9IGNvbG9yO1xuICAgICAgICBjdHguc2V0TGluZURhc2gob3B0c0F0SW5kZXguYm9yZGVyRGFzaCk7XG4gICAgICAgIGN0eC5saW5lRGFzaE9mZnNldCA9IG9wdHNBdEluZGV4LmJvcmRlckRhc2hPZmZzZXQ7XG4gICAgICAgIG9mZnNldCA9IHRoaXMuZ2V0RGlzdGFuY2VGcm9tQ2VudGVyRm9yVmFsdWUob3B0cy50aWNrcy5yZXZlcnNlID8gdGhpcy5taW4gOiB0aGlzLm1heCk7XG4gICAgICAgIHBvc2l0aW9uID0gdGhpcy5nZXRQb2ludFBvc2l0aW9uKGksIG9mZnNldCk7XG4gICAgICAgIGN0eC5iZWdpblBhdGgoKTtcbiAgICAgICAgY3R4Lm1vdmVUbyh0aGlzLnhDZW50ZXIsIHRoaXMueUNlbnRlcik7XG4gICAgICAgIGN0eC5saW5lVG8ocG9zaXRpb24ueCwgcG9zaXRpb24ueSk7XG4gICAgICAgIGN0eC5zdHJva2UoKTtcbiAgICAgIH1cbiAgICAgIGN0eC5yZXN0b3JlKCk7XG4gICAgfVxuICB9XG4gIGRyYXdCb3JkZXIoKSB7fVxuICBkcmF3TGFiZWxzKCkge1xuICAgIGNvbnN0IGN0eCA9IHRoaXMuY3R4O1xuICAgIGNvbnN0IG9wdHMgPSB0aGlzLm9wdGlvbnM7XG4gICAgY29uc3QgdGlja09wdHMgPSBvcHRzLnRpY2tzO1xuICAgIGlmICghdGlja09wdHMuZGlzcGxheSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBzdGFydEFuZ2xlID0gdGhpcy5nZXRJbmRleEFuZ2xlKDApO1xuICAgIGxldCBvZmZzZXQsIHdpZHRoO1xuICAgIGN0eC5zYXZlKCk7XG4gICAgY3R4LnRyYW5zbGF0ZSh0aGlzLnhDZW50ZXIsIHRoaXMueUNlbnRlcik7XG4gICAgY3R4LnJvdGF0ZShzdGFydEFuZ2xlKTtcbiAgICBjdHgudGV4dEFsaWduID0gJ2NlbnRlcic7XG4gICAgY3R4LnRleHRCYXNlbGluZSA9ICdtaWRkbGUnO1xuICAgIHRoaXMudGlja3MuZm9yRWFjaCgodGljaywgaW5kZXgpID0+IHtcbiAgICAgIGlmIChpbmRleCA9PT0gMCAmJiAhb3B0cy5yZXZlcnNlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGNvbnN0IG9wdHNBdEluZGV4ID0gdGlja09wdHMuc2V0Q29udGV4dCh0aGlzLmdldENvbnRleHQoaW5kZXgpKTtcbiAgICAgIGNvbnN0IHRpY2tGb250ID0gdG9Gb250KG9wdHNBdEluZGV4LmZvbnQpO1xuICAgICAgb2Zmc2V0ID0gdGhpcy5nZXREaXN0YW5jZUZyb21DZW50ZXJGb3JWYWx1ZSh0aGlzLnRpY2tzW2luZGV4XS52YWx1ZSk7XG4gICAgICBpZiAob3B0c0F0SW5kZXguc2hvd0xhYmVsQmFja2Ryb3ApIHtcbiAgICAgICAgY3R4LmZvbnQgPSB0aWNrRm9udC5zdHJpbmc7XG4gICAgICAgIHdpZHRoID0gY3R4Lm1lYXN1cmVUZXh0KHRpY2subGFiZWwpLndpZHRoO1xuICAgICAgICBjdHguZmlsbFN0eWxlID0gb3B0c0F0SW5kZXguYmFja2Ryb3BDb2xvcjtcbiAgICAgICAgY29uc3QgcGFkZGluZyA9IHRvUGFkZGluZyhvcHRzQXRJbmRleC5iYWNrZHJvcFBhZGRpbmcpO1xuICAgICAgICBjdHguZmlsbFJlY3QoXG4gICAgICAgICAgLXdpZHRoIC8gMiAtIHBhZGRpbmcubGVmdCxcbiAgICAgICAgICAtb2Zmc2V0IC0gdGlja0ZvbnQuc2l6ZSAvIDIgLSBwYWRkaW5nLnRvcCxcbiAgICAgICAgICB3aWR0aCArIHBhZGRpbmcud2lkdGgsXG4gICAgICAgICAgdGlja0ZvbnQuc2l6ZSArIHBhZGRpbmcuaGVpZ2h0XG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICByZW5kZXJUZXh0KGN0eCwgdGljay5sYWJlbCwgMCwgLW9mZnNldCwgdGlja0ZvbnQsIHtcbiAgICAgICAgY29sb3I6IG9wdHNBdEluZGV4LmNvbG9yLFxuICAgICAgfSk7XG4gICAgfSk7XG4gICAgY3R4LnJlc3RvcmUoKTtcbiAgfVxuICBkcmF3VGl0bGUoKSB7fVxufVxuUmFkaWFsTGluZWFyU2NhbGUuaWQgPSAncmFkaWFsTGluZWFyJztcblJhZGlhbExpbmVhclNjYWxlLmRlZmF1bHRzID0ge1xuICBkaXNwbGF5OiB0cnVlLFxuICBhbmltYXRlOiB0cnVlLFxuICBwb3NpdGlvbjogJ2NoYXJ0QXJlYScsXG4gIGFuZ2xlTGluZXM6IHtcbiAgICBkaXNwbGF5OiB0cnVlLFxuICAgIGxpbmVXaWR0aDogMSxcbiAgICBib3JkZXJEYXNoOiBbXSxcbiAgICBib3JkZXJEYXNoT2Zmc2V0OiAwLjBcbiAgfSxcbiAgZ3JpZDoge1xuICAgIGNpcmN1bGFyOiBmYWxzZVxuICB9LFxuICBzdGFydEFuZ2xlOiAwLFxuICB0aWNrczoge1xuICAgIHNob3dMYWJlbEJhY2tkcm9wOiB0cnVlLFxuICAgIGNhbGxiYWNrOiBUaWNrcy5mb3JtYXR0ZXJzLm51bWVyaWNcbiAgfSxcbiAgcG9pbnRMYWJlbHM6IHtcbiAgICBiYWNrZHJvcENvbG9yOiB1bmRlZmluZWQsXG4gICAgYmFja2Ryb3BQYWRkaW5nOiAyLFxuICAgIGRpc3BsYXk6IHRydWUsXG4gICAgZm9udDoge1xuICAgICAgc2l6ZTogMTBcbiAgICB9LFxuICAgIGNhbGxiYWNrKGxhYmVsKSB7XG4gICAgICByZXR1cm4gbGFiZWw7XG4gICAgfSxcbiAgICBwYWRkaW5nOiA1LFxuICAgIGNlbnRlclBvaW50TGFiZWxzOiBmYWxzZVxuICB9XG59O1xuUmFkaWFsTGluZWFyU2NhbGUuZGVmYXVsdFJvdXRlcyA9IHtcbiAgJ2FuZ2xlTGluZXMuY29sb3InOiAnYm9yZGVyQ29sb3InLFxuICAncG9pbnRMYWJlbHMuY29sb3InOiAnY29sb3InLFxuICAndGlja3MuY29sb3InOiAnY29sb3InXG59O1xuUmFkaWFsTGluZWFyU2NhbGUuZGVzY3JpcHRvcnMgPSB7XG4gIGFuZ2xlTGluZXM6IHtcbiAgICBfZmFsbGJhY2s6ICdncmlkJ1xuICB9XG59O1xuXG5jb25zdCBJTlRFUlZBTFMgPSB7XG4gIG1pbGxpc2Vjb25kOiB7Y29tbW9uOiB0cnVlLCBzaXplOiAxLCBzdGVwczogMTAwMH0sXG4gIHNlY29uZDoge2NvbW1vbjogdHJ1ZSwgc2l6ZTogMTAwMCwgc3RlcHM6IDYwfSxcbiAgbWludXRlOiB7Y29tbW9uOiB0cnVlLCBzaXplOiA2MDAwMCwgc3RlcHM6IDYwfSxcbiAgaG91cjoge2NvbW1vbjogdHJ1ZSwgc2l6ZTogMzYwMDAwMCwgc3RlcHM6IDI0fSxcbiAgZGF5OiB7Y29tbW9uOiB0cnVlLCBzaXplOiA4NjQwMDAwMCwgc3RlcHM6IDMwfSxcbiAgd2Vlazoge2NvbW1vbjogZmFsc2UsIHNpemU6IDYwNDgwMDAwMCwgc3RlcHM6IDR9LFxuICBtb250aDoge2NvbW1vbjogdHJ1ZSwgc2l6ZTogMi42MjhlOSwgc3RlcHM6IDEyfSxcbiAgcXVhcnRlcjoge2NvbW1vbjogZmFsc2UsIHNpemU6IDcuODg0ZTksIHN0ZXBzOiA0fSxcbiAgeWVhcjoge2NvbW1vbjogdHJ1ZSwgc2l6ZTogMy4xNTRlMTB9XG59O1xuY29uc3QgVU5JVFMgPSAoT2JqZWN0LmtleXMoSU5URVJWQUxTKSk7XG5mdW5jdGlvbiBzb3J0ZXIoYSwgYikge1xuICByZXR1cm4gYSAtIGI7XG59XG5mdW5jdGlvbiBwYXJzZShzY2FsZSwgaW5wdXQpIHtcbiAgaWYgKGlzTnVsbE9yVW5kZWYoaW5wdXQpKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgY29uc3QgYWRhcHRlciA9IHNjYWxlLl9hZGFwdGVyO1xuICBjb25zdCB7cGFyc2VyLCByb3VuZCwgaXNvV2Vla2RheX0gPSBzY2FsZS5fcGFyc2VPcHRzO1xuICBsZXQgdmFsdWUgPSBpbnB1dDtcbiAgaWYgKHR5cGVvZiBwYXJzZXIgPT09ICdmdW5jdGlvbicpIHtcbiAgICB2YWx1ZSA9IHBhcnNlcih2YWx1ZSk7XG4gIH1cbiAgaWYgKCFpc051bWJlckZpbml0ZSh2YWx1ZSkpIHtcbiAgICB2YWx1ZSA9IHR5cGVvZiBwYXJzZXIgPT09ICdzdHJpbmcnXG4gICAgICA/IGFkYXB0ZXIucGFyc2UodmFsdWUsIHBhcnNlcilcbiAgICAgIDogYWRhcHRlci5wYXJzZSh2YWx1ZSk7XG4gIH1cbiAgaWYgKHZhbHVlID09PSBudWxsKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgaWYgKHJvdW5kKSB7XG4gICAgdmFsdWUgPSByb3VuZCA9PT0gJ3dlZWsnICYmIChpc051bWJlcihpc29XZWVrZGF5KSB8fCBpc29XZWVrZGF5ID09PSB0cnVlKVxuICAgICAgPyBhZGFwdGVyLnN0YXJ0T2YodmFsdWUsICdpc29XZWVrJywgaXNvV2Vla2RheSlcbiAgICAgIDogYWRhcHRlci5zdGFydE9mKHZhbHVlLCByb3VuZCk7XG4gIH1cbiAgcmV0dXJuICt2YWx1ZTtcbn1cbmZ1bmN0aW9uIGRldGVybWluZVVuaXRGb3JBdXRvVGlja3MobWluVW5pdCwgbWluLCBtYXgsIGNhcGFjaXR5KSB7XG4gIGNvbnN0IGlsZW4gPSBVTklUUy5sZW5ndGg7XG4gIGZvciAobGV0IGkgPSBVTklUUy5pbmRleE9mKG1pblVuaXQpOyBpIDwgaWxlbiAtIDE7ICsraSkge1xuICAgIGNvbnN0IGludGVydmFsID0gSU5URVJWQUxTW1VOSVRTW2ldXTtcbiAgICBjb25zdCBmYWN0b3IgPSBpbnRlcnZhbC5zdGVwcyA/IGludGVydmFsLnN0ZXBzIDogTnVtYmVyLk1BWF9TQUZFX0lOVEVHRVI7XG4gICAgaWYgKGludGVydmFsLmNvbW1vbiAmJiBNYXRoLmNlaWwoKG1heCAtIG1pbikgLyAoZmFjdG9yICogaW50ZXJ2YWwuc2l6ZSkpIDw9IGNhcGFjaXR5KSB7XG4gICAgICByZXR1cm4gVU5JVFNbaV07XG4gICAgfVxuICB9XG4gIHJldHVybiBVTklUU1tpbGVuIC0gMV07XG59XG5mdW5jdGlvbiBkZXRlcm1pbmVVbml0Rm9yRm9ybWF0dGluZyhzY2FsZSwgbnVtVGlja3MsIG1pblVuaXQsIG1pbiwgbWF4KSB7XG4gIGZvciAobGV0IGkgPSBVTklUUy5sZW5ndGggLSAxOyBpID49IFVOSVRTLmluZGV4T2YobWluVW5pdCk7IGktLSkge1xuICAgIGNvbnN0IHVuaXQgPSBVTklUU1tpXTtcbiAgICBpZiAoSU5URVJWQUxTW3VuaXRdLmNvbW1vbiAmJiBzY2FsZS5fYWRhcHRlci5kaWZmKG1heCwgbWluLCB1bml0KSA+PSBudW1UaWNrcyAtIDEpIHtcbiAgICAgIHJldHVybiB1bml0O1xuICAgIH1cbiAgfVxuICByZXR1cm4gVU5JVFNbbWluVW5pdCA/IFVOSVRTLmluZGV4T2YobWluVW5pdCkgOiAwXTtcbn1cbmZ1bmN0aW9uIGRldGVybWluZU1ham9yVW5pdCh1bml0KSB7XG4gIGZvciAobGV0IGkgPSBVTklUUy5pbmRleE9mKHVuaXQpICsgMSwgaWxlbiA9IFVOSVRTLmxlbmd0aDsgaSA8IGlsZW47ICsraSkge1xuICAgIGlmIChJTlRFUlZBTFNbVU5JVFNbaV1dLmNvbW1vbikge1xuICAgICAgcmV0dXJuIFVOSVRTW2ldO1xuICAgIH1cbiAgfVxufVxuZnVuY3Rpb24gYWRkVGljayh0aWNrcywgdGltZSwgdGltZXN0YW1wcykge1xuICBpZiAoIXRpbWVzdGFtcHMpIHtcbiAgICB0aWNrc1t0aW1lXSA9IHRydWU7XG4gIH0gZWxzZSBpZiAodGltZXN0YW1wcy5sZW5ndGgpIHtcbiAgICBjb25zdCB7bG8sIGhpfSA9IF9sb29rdXAodGltZXN0YW1wcywgdGltZSk7XG4gICAgY29uc3QgdGltZXN0YW1wID0gdGltZXN0YW1wc1tsb10gPj0gdGltZSA/IHRpbWVzdGFtcHNbbG9dIDogdGltZXN0YW1wc1toaV07XG4gICAgdGlja3NbdGltZXN0YW1wXSA9IHRydWU7XG4gIH1cbn1cbmZ1bmN0aW9uIHNldE1ham9yVGlja3Moc2NhbGUsIHRpY2tzLCBtYXAsIG1ham9yVW5pdCkge1xuICBjb25zdCBhZGFwdGVyID0gc2NhbGUuX2FkYXB0ZXI7XG4gIGNvbnN0IGZpcnN0ID0gK2FkYXB0ZXIuc3RhcnRPZih0aWNrc1swXS52YWx1ZSwgbWFqb3JVbml0KTtcbiAgY29uc3QgbGFzdCA9IHRpY2tzW3RpY2tzLmxlbmd0aCAtIDFdLnZhbHVlO1xuICBsZXQgbWFqb3IsIGluZGV4O1xuICBmb3IgKG1ham9yID0gZmlyc3Q7IG1ham9yIDw9IGxhc3Q7IG1ham9yID0gK2FkYXB0ZXIuYWRkKG1ham9yLCAxLCBtYWpvclVuaXQpKSB7XG4gICAgaW5kZXggPSBtYXBbbWFqb3JdO1xuICAgIGlmIChpbmRleCA+PSAwKSB7XG4gICAgICB0aWNrc1tpbmRleF0ubWFqb3IgPSB0cnVlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdGlja3M7XG59XG5mdW5jdGlvbiB0aWNrc0Zyb21UaW1lc3RhbXBzKHNjYWxlLCB2YWx1ZXMsIG1ham9yVW5pdCkge1xuICBjb25zdCB0aWNrcyA9IFtdO1xuICBjb25zdCBtYXAgPSB7fTtcbiAgY29uc3QgaWxlbiA9IHZhbHVlcy5sZW5ndGg7XG4gIGxldCBpLCB2YWx1ZTtcbiAgZm9yIChpID0gMDsgaSA8IGlsZW47ICsraSkge1xuICAgIHZhbHVlID0gdmFsdWVzW2ldO1xuICAgIG1hcFt2YWx1ZV0gPSBpO1xuICAgIHRpY2tzLnB1c2goe1xuICAgICAgdmFsdWUsXG4gICAgICBtYWpvcjogZmFsc2VcbiAgICB9KTtcbiAgfVxuICByZXR1cm4gKGlsZW4gPT09IDAgfHwgIW1ham9yVW5pdCkgPyB0aWNrcyA6IHNldE1ham9yVGlja3Moc2NhbGUsIHRpY2tzLCBtYXAsIG1ham9yVW5pdCk7XG59XG5jbGFzcyBUaW1lU2NhbGUgZXh0ZW5kcyBTY2FsZSB7XG4gIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgc3VwZXIocHJvcHMpO1xuICAgIHRoaXMuX2NhY2hlID0ge1xuICAgICAgZGF0YTogW10sXG4gICAgICBsYWJlbHM6IFtdLFxuICAgICAgYWxsOiBbXVxuICAgIH07XG4gICAgdGhpcy5fdW5pdCA9ICdkYXknO1xuICAgIHRoaXMuX21ham9yVW5pdCA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLl9vZmZzZXRzID0ge307XG4gICAgdGhpcy5fbm9ybWFsaXplZCA9IGZhbHNlO1xuICAgIHRoaXMuX3BhcnNlT3B0cyA9IHVuZGVmaW5lZDtcbiAgfVxuICBpbml0KHNjYWxlT3B0cywgb3B0cykge1xuICAgIGNvbnN0IHRpbWUgPSBzY2FsZU9wdHMudGltZSB8fCAoc2NhbGVPcHRzLnRpbWUgPSB7fSk7XG4gICAgY29uc3QgYWRhcHRlciA9IHRoaXMuX2FkYXB0ZXIgPSBuZXcgYWRhcHRlcnMuX2RhdGUoc2NhbGVPcHRzLmFkYXB0ZXJzLmRhdGUpO1xuICAgIG1lcmdlSWYodGltZS5kaXNwbGF5Rm9ybWF0cywgYWRhcHRlci5mb3JtYXRzKCkpO1xuICAgIHRoaXMuX3BhcnNlT3B0cyA9IHtcbiAgICAgIHBhcnNlcjogdGltZS5wYXJzZXIsXG4gICAgICByb3VuZDogdGltZS5yb3VuZCxcbiAgICAgIGlzb1dlZWtkYXk6IHRpbWUuaXNvV2Vla2RheVxuICAgIH07XG4gICAgc3VwZXIuaW5pdChzY2FsZU9wdHMpO1xuICAgIHRoaXMuX25vcm1hbGl6ZWQgPSBvcHRzLm5vcm1hbGl6ZWQ7XG4gIH1cbiAgcGFyc2UocmF3LCBpbmRleCkge1xuICAgIGlmIChyYXcgPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHJldHVybiBwYXJzZSh0aGlzLCByYXcpO1xuICB9XG4gIGJlZm9yZUxheW91dCgpIHtcbiAgICBzdXBlci5iZWZvcmVMYXlvdXQoKTtcbiAgICB0aGlzLl9jYWNoZSA9IHtcbiAgICAgIGRhdGE6IFtdLFxuICAgICAgbGFiZWxzOiBbXSxcbiAgICAgIGFsbDogW11cbiAgICB9O1xuICB9XG4gIGRldGVybWluZURhdGFMaW1pdHMoKSB7XG4gICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMub3B0aW9ucztcbiAgICBjb25zdCBhZGFwdGVyID0gdGhpcy5fYWRhcHRlcjtcbiAgICBjb25zdCB1bml0ID0gb3B0aW9ucy50aW1lLnVuaXQgfHwgJ2RheSc7XG4gICAgbGV0IHttaW4sIG1heCwgbWluRGVmaW5lZCwgbWF4RGVmaW5lZH0gPSB0aGlzLmdldFVzZXJCb3VuZHMoKTtcbiAgICBmdW5jdGlvbiBfYXBwbHlCb3VuZHMoYm91bmRzKSB7XG4gICAgICBpZiAoIW1pbkRlZmluZWQgJiYgIWlzTmFOKGJvdW5kcy5taW4pKSB7XG4gICAgICAgIG1pbiA9IE1hdGgubWluKG1pbiwgYm91bmRzLm1pbik7XG4gICAgICB9XG4gICAgICBpZiAoIW1heERlZmluZWQgJiYgIWlzTmFOKGJvdW5kcy5tYXgpKSB7XG4gICAgICAgIG1heCA9IE1hdGgubWF4KG1heCwgYm91bmRzLm1heCk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmICghbWluRGVmaW5lZCB8fCAhbWF4RGVmaW5lZCkge1xuICAgICAgX2FwcGx5Qm91bmRzKHRoaXMuX2dldExhYmVsQm91bmRzKCkpO1xuICAgICAgaWYgKG9wdGlvbnMuYm91bmRzICE9PSAndGlja3MnIHx8IG9wdGlvbnMudGlja3Muc291cmNlICE9PSAnbGFiZWxzJykge1xuICAgICAgICBfYXBwbHlCb3VuZHModGhpcy5nZXRNaW5NYXgoZmFsc2UpKTtcbiAgICAgIH1cbiAgICB9XG4gICAgbWluID0gaXNOdW1iZXJGaW5pdGUobWluKSAmJiAhaXNOYU4obWluKSA/IG1pbiA6ICthZGFwdGVyLnN0YXJ0T2YoRGF0ZS5ub3coKSwgdW5pdCk7XG4gICAgbWF4ID0gaXNOdW1iZXJGaW5pdGUobWF4KSAmJiAhaXNOYU4obWF4KSA/IG1heCA6ICthZGFwdGVyLmVuZE9mKERhdGUubm93KCksIHVuaXQpICsgMTtcbiAgICB0aGlzLm1pbiA9IE1hdGgubWluKG1pbiwgbWF4IC0gMSk7XG4gICAgdGhpcy5tYXggPSBNYXRoLm1heChtaW4gKyAxLCBtYXgpO1xuICB9XG4gIF9nZXRMYWJlbEJvdW5kcygpIHtcbiAgICBjb25zdCBhcnIgPSB0aGlzLmdldExhYmVsVGltZXN0YW1wcygpO1xuICAgIGxldCBtaW4gPSBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFk7XG4gICAgbGV0IG1heCA9IE51bWJlci5ORUdBVElWRV9JTkZJTklUWTtcbiAgICBpZiAoYXJyLmxlbmd0aCkge1xuICAgICAgbWluID0gYXJyWzBdO1xuICAgICAgbWF4ID0gYXJyW2Fyci5sZW5ndGggLSAxXTtcbiAgICB9XG4gICAgcmV0dXJuIHttaW4sIG1heH07XG4gIH1cbiAgYnVpbGRUaWNrcygpIHtcbiAgICBjb25zdCBvcHRpb25zID0gdGhpcy5vcHRpb25zO1xuICAgIGNvbnN0IHRpbWVPcHRzID0gb3B0aW9ucy50aW1lO1xuICAgIGNvbnN0IHRpY2tPcHRzID0gb3B0aW9ucy50aWNrcztcbiAgICBjb25zdCB0aW1lc3RhbXBzID0gdGlja09wdHMuc291cmNlID09PSAnbGFiZWxzJyA/IHRoaXMuZ2V0TGFiZWxUaW1lc3RhbXBzKCkgOiB0aGlzLl9nZW5lcmF0ZSgpO1xuICAgIGlmIChvcHRpb25zLmJvdW5kcyA9PT0gJ3RpY2tzJyAmJiB0aW1lc3RhbXBzLmxlbmd0aCkge1xuICAgICAgdGhpcy5taW4gPSB0aGlzLl91c2VyTWluIHx8IHRpbWVzdGFtcHNbMF07XG4gICAgICB0aGlzLm1heCA9IHRoaXMuX3VzZXJNYXggfHwgdGltZXN0YW1wc1t0aW1lc3RhbXBzLmxlbmd0aCAtIDFdO1xuICAgIH1cbiAgICBjb25zdCBtaW4gPSB0aGlzLm1pbjtcbiAgICBjb25zdCBtYXggPSB0aGlzLm1heDtcbiAgICBjb25zdCB0aWNrcyA9IF9maWx0ZXJCZXR3ZWVuKHRpbWVzdGFtcHMsIG1pbiwgbWF4KTtcbiAgICB0aGlzLl91bml0ID0gdGltZU9wdHMudW5pdCB8fCAodGlja09wdHMuYXV0b1NraXBcbiAgICAgID8gZGV0ZXJtaW5lVW5pdEZvckF1dG9UaWNrcyh0aW1lT3B0cy5taW5Vbml0LCB0aGlzLm1pbiwgdGhpcy5tYXgsIHRoaXMuX2dldExhYmVsQ2FwYWNpdHkobWluKSlcbiAgICAgIDogZGV0ZXJtaW5lVW5pdEZvckZvcm1hdHRpbmcodGhpcywgdGlja3MubGVuZ3RoLCB0aW1lT3B0cy5taW5Vbml0LCB0aGlzLm1pbiwgdGhpcy5tYXgpKTtcbiAgICB0aGlzLl9tYWpvclVuaXQgPSAhdGlja09wdHMubWFqb3IuZW5hYmxlZCB8fCB0aGlzLl91bml0ID09PSAneWVhcicgPyB1bmRlZmluZWRcbiAgICAgIDogZGV0ZXJtaW5lTWFqb3JVbml0KHRoaXMuX3VuaXQpO1xuICAgIHRoaXMuaW5pdE9mZnNldHModGltZXN0YW1wcyk7XG4gICAgaWYgKG9wdGlvbnMucmV2ZXJzZSkge1xuICAgICAgdGlja3MucmV2ZXJzZSgpO1xuICAgIH1cbiAgICByZXR1cm4gdGlja3NGcm9tVGltZXN0YW1wcyh0aGlzLCB0aWNrcywgdGhpcy5fbWFqb3JVbml0KTtcbiAgfVxuICBpbml0T2Zmc2V0cyh0aW1lc3RhbXBzKSB7XG4gICAgbGV0IHN0YXJ0ID0gMDtcbiAgICBsZXQgZW5kID0gMDtcbiAgICBsZXQgZmlyc3QsIGxhc3Q7XG4gICAgaWYgKHRoaXMub3B0aW9ucy5vZmZzZXQgJiYgdGltZXN0YW1wcy5sZW5ndGgpIHtcbiAgICAgIGZpcnN0ID0gdGhpcy5nZXREZWNpbWFsRm9yVmFsdWUodGltZXN0YW1wc1swXSk7XG4gICAgICBpZiAodGltZXN0YW1wcy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgc3RhcnQgPSAxIC0gZmlyc3Q7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzdGFydCA9ICh0aGlzLmdldERlY2ltYWxGb3JWYWx1ZSh0aW1lc3RhbXBzWzFdKSAtIGZpcnN0KSAvIDI7XG4gICAgICB9XG4gICAgICBsYXN0ID0gdGhpcy5nZXREZWNpbWFsRm9yVmFsdWUodGltZXN0YW1wc1t0aW1lc3RhbXBzLmxlbmd0aCAtIDFdKTtcbiAgICAgIGlmICh0aW1lc3RhbXBzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICBlbmQgPSBsYXN0O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZW5kID0gKGxhc3QgLSB0aGlzLmdldERlY2ltYWxGb3JWYWx1ZSh0aW1lc3RhbXBzW3RpbWVzdGFtcHMubGVuZ3RoIC0gMl0pKSAvIDI7XG4gICAgICB9XG4gICAgfVxuICAgIGNvbnN0IGxpbWl0ID0gdGltZXN0YW1wcy5sZW5ndGggPCAzID8gMC41IDogMC4yNTtcbiAgICBzdGFydCA9IF9saW1pdFZhbHVlKHN0YXJ0LCAwLCBsaW1pdCk7XG4gICAgZW5kID0gX2xpbWl0VmFsdWUoZW5kLCAwLCBsaW1pdCk7XG4gICAgdGhpcy5fb2Zmc2V0cyA9IHtzdGFydCwgZW5kLCBmYWN0b3I6IDEgLyAoc3RhcnQgKyAxICsgZW5kKX07XG4gIH1cbiAgX2dlbmVyYXRlKCkge1xuICAgIGNvbnN0IGFkYXB0ZXIgPSB0aGlzLl9hZGFwdGVyO1xuICAgIGNvbnN0IG1pbiA9IHRoaXMubWluO1xuICAgIGNvbnN0IG1heCA9IHRoaXMubWF4O1xuICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG4gICAgY29uc3QgdGltZU9wdHMgPSBvcHRpb25zLnRpbWU7XG4gICAgY29uc3QgbWlub3IgPSB0aW1lT3B0cy51bml0IHx8IGRldGVybWluZVVuaXRGb3JBdXRvVGlja3ModGltZU9wdHMubWluVW5pdCwgbWluLCBtYXgsIHRoaXMuX2dldExhYmVsQ2FwYWNpdHkobWluKSk7XG4gICAgY29uc3Qgc3RlcFNpemUgPSB2YWx1ZU9yRGVmYXVsdCh0aW1lT3B0cy5zdGVwU2l6ZSwgMSk7XG4gICAgY29uc3Qgd2Vla2RheSA9IG1pbm9yID09PSAnd2VlaycgPyB0aW1lT3B0cy5pc29XZWVrZGF5IDogZmFsc2U7XG4gICAgY29uc3QgaGFzV2Vla2RheSA9IGlzTnVtYmVyKHdlZWtkYXkpIHx8IHdlZWtkYXkgPT09IHRydWU7XG4gICAgY29uc3QgdGlja3MgPSB7fTtcbiAgICBsZXQgZmlyc3QgPSBtaW47XG4gICAgbGV0IHRpbWUsIGNvdW50O1xuICAgIGlmIChoYXNXZWVrZGF5KSB7XG4gICAgICBmaXJzdCA9ICthZGFwdGVyLnN0YXJ0T2YoZmlyc3QsICdpc29XZWVrJywgd2Vla2RheSk7XG4gICAgfVxuICAgIGZpcnN0ID0gK2FkYXB0ZXIuc3RhcnRPZihmaXJzdCwgaGFzV2Vla2RheSA/ICdkYXknIDogbWlub3IpO1xuICAgIGlmIChhZGFwdGVyLmRpZmYobWF4LCBtaW4sIG1pbm9yKSA+IDEwMDAwMCAqIHN0ZXBTaXplKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IobWluICsgJyBhbmQgJyArIG1heCArICcgYXJlIHRvbyBmYXIgYXBhcnQgd2l0aCBzdGVwU2l6ZSBvZiAnICsgc3RlcFNpemUgKyAnICcgKyBtaW5vcik7XG4gICAgfVxuICAgIGNvbnN0IHRpbWVzdGFtcHMgPSBvcHRpb25zLnRpY2tzLnNvdXJjZSA9PT0gJ2RhdGEnICYmIHRoaXMuZ2V0RGF0YVRpbWVzdGFtcHMoKTtcbiAgICBmb3IgKHRpbWUgPSBmaXJzdCwgY291bnQgPSAwOyB0aW1lIDwgbWF4OyB0aW1lID0gK2FkYXB0ZXIuYWRkKHRpbWUsIHN0ZXBTaXplLCBtaW5vciksIGNvdW50KyspIHtcbiAgICAgIGFkZFRpY2sodGlja3MsIHRpbWUsIHRpbWVzdGFtcHMpO1xuICAgIH1cbiAgICBpZiAodGltZSA9PT0gbWF4IHx8IG9wdGlvbnMuYm91bmRzID09PSAndGlja3MnIHx8IGNvdW50ID09PSAxKSB7XG4gICAgICBhZGRUaWNrKHRpY2tzLCB0aW1lLCB0aW1lc3RhbXBzKTtcbiAgICB9XG4gICAgcmV0dXJuIE9iamVjdC5rZXlzKHRpY2tzKS5zb3J0KChhLCBiKSA9PiBhIC0gYikubWFwKHggPT4gK3gpO1xuICB9XG4gIGdldExhYmVsRm9yVmFsdWUodmFsdWUpIHtcbiAgICBjb25zdCBhZGFwdGVyID0gdGhpcy5fYWRhcHRlcjtcbiAgICBjb25zdCB0aW1lT3B0cyA9IHRoaXMub3B0aW9ucy50aW1lO1xuICAgIGlmICh0aW1lT3B0cy50b29sdGlwRm9ybWF0KSB7XG4gICAgICByZXR1cm4gYWRhcHRlci5mb3JtYXQodmFsdWUsIHRpbWVPcHRzLnRvb2x0aXBGb3JtYXQpO1xuICAgIH1cbiAgICByZXR1cm4gYWRhcHRlci5mb3JtYXQodmFsdWUsIHRpbWVPcHRzLmRpc3BsYXlGb3JtYXRzLmRhdGV0aW1lKTtcbiAgfVxuICBfdGlja0Zvcm1hdEZ1bmN0aW9uKHRpbWUsIGluZGV4LCB0aWNrcywgZm9ybWF0KSB7XG4gICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMub3B0aW9ucztcbiAgICBjb25zdCBmb3JtYXRzID0gb3B0aW9ucy50aW1lLmRpc3BsYXlGb3JtYXRzO1xuICAgIGNvbnN0IHVuaXQgPSB0aGlzLl91bml0O1xuICAgIGNvbnN0IG1ham9yVW5pdCA9IHRoaXMuX21ham9yVW5pdDtcbiAgICBjb25zdCBtaW5vckZvcm1hdCA9IHVuaXQgJiYgZm9ybWF0c1t1bml0XTtcbiAgICBjb25zdCBtYWpvckZvcm1hdCA9IG1ham9yVW5pdCAmJiBmb3JtYXRzW21ham9yVW5pdF07XG4gICAgY29uc3QgdGljayA9IHRpY2tzW2luZGV4XTtcbiAgICBjb25zdCBtYWpvciA9IG1ham9yVW5pdCAmJiBtYWpvckZvcm1hdCAmJiB0aWNrICYmIHRpY2subWFqb3I7XG4gICAgY29uc3QgbGFiZWwgPSB0aGlzLl9hZGFwdGVyLmZvcm1hdCh0aW1lLCBmb3JtYXQgfHwgKG1ham9yID8gbWFqb3JGb3JtYXQgOiBtaW5vckZvcm1hdCkpO1xuICAgIGNvbnN0IGZvcm1hdHRlciA9IG9wdGlvbnMudGlja3MuY2FsbGJhY2s7XG4gICAgcmV0dXJuIGZvcm1hdHRlciA/IGNhbGxiYWNrKGZvcm1hdHRlciwgW2xhYmVsLCBpbmRleCwgdGlja3NdLCB0aGlzKSA6IGxhYmVsO1xuICB9XG4gIGdlbmVyYXRlVGlja0xhYmVscyh0aWNrcykge1xuICAgIGxldCBpLCBpbGVuLCB0aWNrO1xuICAgIGZvciAoaSA9IDAsIGlsZW4gPSB0aWNrcy5sZW5ndGg7IGkgPCBpbGVuOyArK2kpIHtcbiAgICAgIHRpY2sgPSB0aWNrc1tpXTtcbiAgICAgIHRpY2subGFiZWwgPSB0aGlzLl90aWNrRm9ybWF0RnVuY3Rpb24odGljay52YWx1ZSwgaSwgdGlja3MpO1xuICAgIH1cbiAgfVxuICBnZXREZWNpbWFsRm9yVmFsdWUodmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWUgPT09IG51bGwgPyBOYU4gOiAodmFsdWUgLSB0aGlzLm1pbikgLyAodGhpcy5tYXggLSB0aGlzLm1pbik7XG4gIH1cbiAgZ2V0UGl4ZWxGb3JWYWx1ZSh2YWx1ZSkge1xuICAgIGNvbnN0IG9mZnNldHMgPSB0aGlzLl9vZmZzZXRzO1xuICAgIGNvbnN0IHBvcyA9IHRoaXMuZ2V0RGVjaW1hbEZvclZhbHVlKHZhbHVlKTtcbiAgICByZXR1cm4gdGhpcy5nZXRQaXhlbEZvckRlY2ltYWwoKG9mZnNldHMuc3RhcnQgKyBwb3MpICogb2Zmc2V0cy5mYWN0b3IpO1xuICB9XG4gIGdldFZhbHVlRm9yUGl4ZWwocGl4ZWwpIHtcbiAgICBjb25zdCBvZmZzZXRzID0gdGhpcy5fb2Zmc2V0cztcbiAgICBjb25zdCBwb3MgPSB0aGlzLmdldERlY2ltYWxGb3JQaXhlbChwaXhlbCkgLyBvZmZzZXRzLmZhY3RvciAtIG9mZnNldHMuZW5kO1xuICAgIHJldHVybiB0aGlzLm1pbiArIHBvcyAqICh0aGlzLm1heCAtIHRoaXMubWluKTtcbiAgfVxuICBfZ2V0TGFiZWxTaXplKGxhYmVsKSB7XG4gICAgY29uc3QgdGlja3NPcHRzID0gdGhpcy5vcHRpb25zLnRpY2tzO1xuICAgIGNvbnN0IHRpY2tMYWJlbFdpZHRoID0gdGhpcy5jdHgubWVhc3VyZVRleHQobGFiZWwpLndpZHRoO1xuICAgIGNvbnN0IGFuZ2xlID0gdG9SYWRpYW5zKHRoaXMuaXNIb3Jpem9udGFsKCkgPyB0aWNrc09wdHMubWF4Um90YXRpb24gOiB0aWNrc09wdHMubWluUm90YXRpb24pO1xuICAgIGNvbnN0IGNvc1JvdGF0aW9uID0gTWF0aC5jb3MoYW5nbGUpO1xuICAgIGNvbnN0IHNpblJvdGF0aW9uID0gTWF0aC5zaW4oYW5nbGUpO1xuICAgIGNvbnN0IHRpY2tGb250U2l6ZSA9IHRoaXMuX3Jlc29sdmVUaWNrRm9udE9wdGlvbnMoMCkuc2l6ZTtcbiAgICByZXR1cm4ge1xuICAgICAgdzogKHRpY2tMYWJlbFdpZHRoICogY29zUm90YXRpb24pICsgKHRpY2tGb250U2l6ZSAqIHNpblJvdGF0aW9uKSxcbiAgICAgIGg6ICh0aWNrTGFiZWxXaWR0aCAqIHNpblJvdGF0aW9uKSArICh0aWNrRm9udFNpemUgKiBjb3NSb3RhdGlvbilcbiAgICB9O1xuICB9XG4gIF9nZXRMYWJlbENhcGFjaXR5KGV4YW1wbGVUaW1lKSB7XG4gICAgY29uc3QgdGltZU9wdHMgPSB0aGlzLm9wdGlvbnMudGltZTtcbiAgICBjb25zdCBkaXNwbGF5Rm9ybWF0cyA9IHRpbWVPcHRzLmRpc3BsYXlGb3JtYXRzO1xuICAgIGNvbnN0IGZvcm1hdCA9IGRpc3BsYXlGb3JtYXRzW3RpbWVPcHRzLnVuaXRdIHx8IGRpc3BsYXlGb3JtYXRzLm1pbGxpc2Vjb25kO1xuICAgIGNvbnN0IGV4YW1wbGVMYWJlbCA9IHRoaXMuX3RpY2tGb3JtYXRGdW5jdGlvbihleGFtcGxlVGltZSwgMCwgdGlja3NGcm9tVGltZXN0YW1wcyh0aGlzLCBbZXhhbXBsZVRpbWVdLCB0aGlzLl9tYWpvclVuaXQpLCBmb3JtYXQpO1xuICAgIGNvbnN0IHNpemUgPSB0aGlzLl9nZXRMYWJlbFNpemUoZXhhbXBsZUxhYmVsKTtcbiAgICBjb25zdCBjYXBhY2l0eSA9IE1hdGguZmxvb3IodGhpcy5pc0hvcml6b250YWwoKSA/IHRoaXMud2lkdGggLyBzaXplLncgOiB0aGlzLmhlaWdodCAvIHNpemUuaCkgLSAxO1xuICAgIHJldHVybiBjYXBhY2l0eSA+IDAgPyBjYXBhY2l0eSA6IDE7XG4gIH1cbiAgZ2V0RGF0YVRpbWVzdGFtcHMoKSB7XG4gICAgbGV0IHRpbWVzdGFtcHMgPSB0aGlzLl9jYWNoZS5kYXRhIHx8IFtdO1xuICAgIGxldCBpLCBpbGVuO1xuICAgIGlmICh0aW1lc3RhbXBzLmxlbmd0aCkge1xuICAgICAgcmV0dXJuIHRpbWVzdGFtcHM7XG4gICAgfVxuICAgIGNvbnN0IG1ldGFzID0gdGhpcy5nZXRNYXRjaGluZ1Zpc2libGVNZXRhcygpO1xuICAgIGlmICh0aGlzLl9ub3JtYWxpemVkICYmIG1ldGFzLmxlbmd0aCkge1xuICAgICAgcmV0dXJuICh0aGlzLl9jYWNoZS5kYXRhID0gbWV0YXNbMF0uY29udHJvbGxlci5nZXRBbGxQYXJzZWRWYWx1ZXModGhpcykpO1xuICAgIH1cbiAgICBmb3IgKGkgPSAwLCBpbGVuID0gbWV0YXMubGVuZ3RoOyBpIDwgaWxlbjsgKytpKSB7XG4gICAgICB0aW1lc3RhbXBzID0gdGltZXN0YW1wcy5jb25jYXQobWV0YXNbaV0uY29udHJvbGxlci5nZXRBbGxQYXJzZWRWYWx1ZXModGhpcykpO1xuICAgIH1cbiAgICByZXR1cm4gKHRoaXMuX2NhY2hlLmRhdGEgPSB0aGlzLm5vcm1hbGl6ZSh0aW1lc3RhbXBzKSk7XG4gIH1cbiAgZ2V0TGFiZWxUaW1lc3RhbXBzKCkge1xuICAgIGNvbnN0IHRpbWVzdGFtcHMgPSB0aGlzLl9jYWNoZS5sYWJlbHMgfHwgW107XG4gICAgbGV0IGksIGlsZW47XG4gICAgaWYgKHRpbWVzdGFtcHMubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gdGltZXN0YW1wcztcbiAgICB9XG4gICAgY29uc3QgbGFiZWxzID0gdGhpcy5nZXRMYWJlbHMoKTtcbiAgICBmb3IgKGkgPSAwLCBpbGVuID0gbGFiZWxzLmxlbmd0aDsgaSA8IGlsZW47ICsraSkge1xuICAgICAgdGltZXN0YW1wcy5wdXNoKHBhcnNlKHRoaXMsIGxhYmVsc1tpXSkpO1xuICAgIH1cbiAgICByZXR1cm4gKHRoaXMuX2NhY2hlLmxhYmVscyA9IHRoaXMuX25vcm1hbGl6ZWQgPyB0aW1lc3RhbXBzIDogdGhpcy5ub3JtYWxpemUodGltZXN0YW1wcykpO1xuICB9XG4gIG5vcm1hbGl6ZSh2YWx1ZXMpIHtcbiAgICByZXR1cm4gX2FycmF5VW5pcXVlKHZhbHVlcy5zb3J0KHNvcnRlcikpO1xuICB9XG59XG5UaW1lU2NhbGUuaWQgPSAndGltZSc7XG5UaW1lU2NhbGUuZGVmYXVsdHMgPSB7XG4gIGJvdW5kczogJ2RhdGEnLFxuICBhZGFwdGVyczoge30sXG4gIHRpbWU6IHtcbiAgICBwYXJzZXI6IGZhbHNlLFxuICAgIHVuaXQ6IGZhbHNlLFxuICAgIHJvdW5kOiBmYWxzZSxcbiAgICBpc29XZWVrZGF5OiBmYWxzZSxcbiAgICBtaW5Vbml0OiAnbWlsbGlzZWNvbmQnLFxuICAgIGRpc3BsYXlGb3JtYXRzOiB7fVxuICB9LFxuICB0aWNrczoge1xuICAgIHNvdXJjZTogJ2F1dG8nLFxuICAgIG1ham9yOiB7XG4gICAgICBlbmFibGVkOiBmYWxzZVxuICAgIH1cbiAgfVxufTtcblxuZnVuY3Rpb24gaW50ZXJwb2xhdGUodGFibGUsIHZhbCwgcmV2ZXJzZSkge1xuICBsZXQgbG8gPSAwO1xuICBsZXQgaGkgPSB0YWJsZS5sZW5ndGggLSAxO1xuICBsZXQgcHJldlNvdXJjZSwgbmV4dFNvdXJjZSwgcHJldlRhcmdldCwgbmV4dFRhcmdldDtcbiAgaWYgKHJldmVyc2UpIHtcbiAgICBpZiAodmFsID49IHRhYmxlW2xvXS5wb3MgJiYgdmFsIDw9IHRhYmxlW2hpXS5wb3MpIHtcbiAgICAgICh7bG8sIGhpfSA9IF9sb29rdXBCeUtleSh0YWJsZSwgJ3BvcycsIHZhbCkpO1xuICAgIH1cbiAgICAoe3BvczogcHJldlNvdXJjZSwgdGltZTogcHJldlRhcmdldH0gPSB0YWJsZVtsb10pO1xuICAgICh7cG9zOiBuZXh0U291cmNlLCB0aW1lOiBuZXh0VGFyZ2V0fSA9IHRhYmxlW2hpXSk7XG4gIH0gZWxzZSB7XG4gICAgaWYgKHZhbCA+PSB0YWJsZVtsb10udGltZSAmJiB2YWwgPD0gdGFibGVbaGldLnRpbWUpIHtcbiAgICAgICh7bG8sIGhpfSA9IF9sb29rdXBCeUtleSh0YWJsZSwgJ3RpbWUnLCB2YWwpKTtcbiAgICB9XG4gICAgKHt0aW1lOiBwcmV2U291cmNlLCBwb3M6IHByZXZUYXJnZXR9ID0gdGFibGVbbG9dKTtcbiAgICAoe3RpbWU6IG5leHRTb3VyY2UsIHBvczogbmV4dFRhcmdldH0gPSB0YWJsZVtoaV0pO1xuICB9XG4gIGNvbnN0IHNwYW4gPSBuZXh0U291cmNlIC0gcHJldlNvdXJjZTtcbiAgcmV0dXJuIHNwYW4gPyBwcmV2VGFyZ2V0ICsgKG5leHRUYXJnZXQgLSBwcmV2VGFyZ2V0KSAqICh2YWwgLSBwcmV2U291cmNlKSAvIHNwYW4gOiBwcmV2VGFyZ2V0O1xufVxuY2xhc3MgVGltZVNlcmllc1NjYWxlIGV4dGVuZHMgVGltZVNjYWxlIHtcbiAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcyk7XG4gICAgdGhpcy5fdGFibGUgPSBbXTtcbiAgICB0aGlzLl9taW5Qb3MgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5fdGFibGVSYW5nZSA9IHVuZGVmaW5lZDtcbiAgfVxuICBpbml0T2Zmc2V0cygpIHtcbiAgICBjb25zdCB0aW1lc3RhbXBzID0gdGhpcy5fZ2V0VGltZXN0YW1wc0ZvclRhYmxlKCk7XG4gICAgY29uc3QgdGFibGUgPSB0aGlzLl90YWJsZSA9IHRoaXMuYnVpbGRMb29rdXBUYWJsZSh0aW1lc3RhbXBzKTtcbiAgICB0aGlzLl9taW5Qb3MgPSBpbnRlcnBvbGF0ZSh0YWJsZSwgdGhpcy5taW4pO1xuICAgIHRoaXMuX3RhYmxlUmFuZ2UgPSBpbnRlcnBvbGF0ZSh0YWJsZSwgdGhpcy5tYXgpIC0gdGhpcy5fbWluUG9zO1xuICAgIHN1cGVyLmluaXRPZmZzZXRzKHRpbWVzdGFtcHMpO1xuICB9XG4gIGJ1aWxkTG9va3VwVGFibGUodGltZXN0YW1wcykge1xuICAgIGNvbnN0IHttaW4sIG1heH0gPSB0aGlzO1xuICAgIGNvbnN0IGl0ZW1zID0gW107XG4gICAgY29uc3QgdGFibGUgPSBbXTtcbiAgICBsZXQgaSwgaWxlbiwgcHJldiwgY3VyciwgbmV4dDtcbiAgICBmb3IgKGkgPSAwLCBpbGVuID0gdGltZXN0YW1wcy5sZW5ndGg7IGkgPCBpbGVuOyArK2kpIHtcbiAgICAgIGN1cnIgPSB0aW1lc3RhbXBzW2ldO1xuICAgICAgaWYgKGN1cnIgPj0gbWluICYmIGN1cnIgPD0gbWF4KSB7XG4gICAgICAgIGl0ZW1zLnB1c2goY3Vycik7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChpdGVtcy5sZW5ndGggPCAyKSB7XG4gICAgICByZXR1cm4gW1xuICAgICAgICB7dGltZTogbWluLCBwb3M6IDB9LFxuICAgICAgICB7dGltZTogbWF4LCBwb3M6IDF9XG4gICAgICBdO1xuICAgIH1cbiAgICBmb3IgKGkgPSAwLCBpbGVuID0gaXRlbXMubGVuZ3RoOyBpIDwgaWxlbjsgKytpKSB7XG4gICAgICBuZXh0ID0gaXRlbXNbaSArIDFdO1xuICAgICAgcHJldiA9IGl0ZW1zW2kgLSAxXTtcbiAgICAgIGN1cnIgPSBpdGVtc1tpXTtcbiAgICAgIGlmIChNYXRoLnJvdW5kKChuZXh0ICsgcHJldikgLyAyKSAhPT0gY3Vycikge1xuICAgICAgICB0YWJsZS5wdXNoKHt0aW1lOiBjdXJyLCBwb3M6IGkgLyAoaWxlbiAtIDEpfSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0YWJsZTtcbiAgfVxuICBfZ2V0VGltZXN0YW1wc0ZvclRhYmxlKCkge1xuICAgIGxldCB0aW1lc3RhbXBzID0gdGhpcy5fY2FjaGUuYWxsIHx8IFtdO1xuICAgIGlmICh0aW1lc3RhbXBzLmxlbmd0aCkge1xuICAgICAgcmV0dXJuIHRpbWVzdGFtcHM7XG4gICAgfVxuICAgIGNvbnN0IGRhdGEgPSB0aGlzLmdldERhdGFUaW1lc3RhbXBzKCk7XG4gICAgY29uc3QgbGFiZWwgPSB0aGlzLmdldExhYmVsVGltZXN0YW1wcygpO1xuICAgIGlmIChkYXRhLmxlbmd0aCAmJiBsYWJlbC5sZW5ndGgpIHtcbiAgICAgIHRpbWVzdGFtcHMgPSB0aGlzLm5vcm1hbGl6ZShkYXRhLmNvbmNhdChsYWJlbCkpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aW1lc3RhbXBzID0gZGF0YS5sZW5ndGggPyBkYXRhIDogbGFiZWw7XG4gICAgfVxuICAgIHRpbWVzdGFtcHMgPSB0aGlzLl9jYWNoZS5hbGwgPSB0aW1lc3RhbXBzO1xuICAgIHJldHVybiB0aW1lc3RhbXBzO1xuICB9XG4gIGdldERlY2ltYWxGb3JWYWx1ZSh2YWx1ZSkge1xuICAgIHJldHVybiAoaW50ZXJwb2xhdGUodGhpcy5fdGFibGUsIHZhbHVlKSAtIHRoaXMuX21pblBvcykgLyB0aGlzLl90YWJsZVJhbmdlO1xuICB9XG4gIGdldFZhbHVlRm9yUGl4ZWwocGl4ZWwpIHtcbiAgICBjb25zdCBvZmZzZXRzID0gdGhpcy5fb2Zmc2V0cztcbiAgICBjb25zdCBkZWNpbWFsID0gdGhpcy5nZXREZWNpbWFsRm9yUGl4ZWwocGl4ZWwpIC8gb2Zmc2V0cy5mYWN0b3IgLSBvZmZzZXRzLmVuZDtcbiAgICByZXR1cm4gaW50ZXJwb2xhdGUodGhpcy5fdGFibGUsIGRlY2ltYWwgKiB0aGlzLl90YWJsZVJhbmdlICsgdGhpcy5fbWluUG9zLCB0cnVlKTtcbiAgfVxufVxuVGltZVNlcmllc1NjYWxlLmlkID0gJ3RpbWVzZXJpZXMnO1xuVGltZVNlcmllc1NjYWxlLmRlZmF1bHRzID0gVGltZVNjYWxlLmRlZmF1bHRzO1xuXG52YXIgc2NhbGVzID0gLyojX19QVVJFX18qL09iamVjdC5mcmVlemUoe1xuX19wcm90b19fOiBudWxsLFxuQ2F0ZWdvcnlTY2FsZTogQ2F0ZWdvcnlTY2FsZSxcbkxpbmVhclNjYWxlOiBMaW5lYXJTY2FsZSxcbkxvZ2FyaXRobWljU2NhbGU6IExvZ2FyaXRobWljU2NhbGUsXG5SYWRpYWxMaW5lYXJTY2FsZTogUmFkaWFsTGluZWFyU2NhbGUsXG5UaW1lU2NhbGU6IFRpbWVTY2FsZSxcblRpbWVTZXJpZXNTY2FsZTogVGltZVNlcmllc1NjYWxlXG59KTtcblxuY29uc3QgcmVnaXN0ZXJhYmxlcyA9IFtcbiAgY29udHJvbGxlcnMsXG4gIGVsZW1lbnRzLFxuICBwbHVnaW5zLFxuICBzY2FsZXMsXG5dO1xuXG5leHBvcnQgeyBBbmltYXRpb24sIEFuaW1hdGlvbnMsIEFyY0VsZW1lbnQsIEJhckNvbnRyb2xsZXIsIEJhckVsZW1lbnQsIEJhc2VQbGF0Zm9ybSwgQmFzaWNQbGF0Zm9ybSwgQnViYmxlQ29udHJvbGxlciwgQ2F0ZWdvcnlTY2FsZSwgQ2hhcnQsIERhdGFzZXRDb250cm9sbGVyLCBwbHVnaW5fZGVjaW1hdGlvbiBhcyBEZWNpbWF0aW9uLCBEb21QbGF0Zm9ybSwgRG91Z2hudXRDb250cm9sbGVyLCBFbGVtZW50LCBwbHVnaW5fZmlsbGVyIGFzIEZpbGxlciwgSW50ZXJhY3Rpb24sIHBsdWdpbl9sZWdlbmQgYXMgTGVnZW5kLCBMaW5lQ29udHJvbGxlciwgTGluZUVsZW1lbnQsIExpbmVhclNjYWxlLCBMb2dhcml0aG1pY1NjYWxlLCBQaWVDb250cm9sbGVyLCBQb2ludEVsZW1lbnQsIFBvbGFyQXJlYUNvbnRyb2xsZXIsIFJhZGFyQ29udHJvbGxlciwgUmFkaWFsTGluZWFyU2NhbGUsIFNjYWxlLCBTY2F0dGVyQ29udHJvbGxlciwgcGx1Z2luX3N1YnRpdGxlIGFzIFN1YlRpdGxlLCBUaWNrcywgVGltZVNjYWxlLCBUaW1lU2VyaWVzU2NhbGUsIHBsdWdpbl90aXRsZSBhcyBUaXRsZSwgcGx1Z2luX3Rvb2x0aXAgYXMgVG9vbHRpcCwgYWRhcHRlcnMgYXMgX2FkYXB0ZXJzLCBfZGV0ZWN0UGxhdGZvcm0sIGFuaW1hdG9yLCBjb250cm9sbGVycywgZWxlbWVudHMsIGxheW91dHMsIHBsdWdpbnMsIHJlZ2lzdGVyYWJsZXMsIHJlZ2lzdHJ5LCBzY2FsZXMgfTtcbiIsImltcG9ydCB7Q2hhcnQsIHJlZ2lzdGVyYWJsZXN9IGZyb20gJy4uL2Rpc3QvY2hhcnQuZXNtJztcblxuQ2hhcnQucmVnaXN0ZXIoLi4ucmVnaXN0ZXJhYmxlcyk7XG5cbmV4cG9ydCBkZWZhdWx0IENoYXJ0O1xuIiwiaW1wb3J0IGNsZWFyc2t5X2RheSBmcm9tICcuL2ltYWdlcy9jbGVhcnNreV9kYXkuc3ZnJztcclxuaW1wb3J0IGNsZWFyc2t5X25pZ2h0IGZyb20gJy4vaW1hZ2VzL2NsZWFyc2t5X25pZ2h0LnN2Zyc7XHJcbmltcG9ydCBjbGVhcnNreV9wb2xhcnR3aWxpZ2h0IGZyb20gJy4vaW1hZ2VzL2NsZWFyc2t5X3BvbGFydHdpbGlnaHQuc3ZnJztcclxuaW1wb3J0IGNsb3VkeSBmcm9tICcuL2ltYWdlcy9jbG91ZHkuc3ZnJztcclxuaW1wb3J0IGZhaXJfZGF5IGZyb20gJy4vaW1hZ2VzL2ZhaXJfZGF5LnN2Zyc7XHJcbmltcG9ydCBmYWlyX25pZ2h0IGZyb20gJy4vaW1hZ2VzL2ZhaXJfbmlnaHQuc3ZnJztcclxuaW1wb3J0IGZhaXJfcG9sYXJ0d2lsaWdodCBmcm9tICcuL2ltYWdlcy9mYWlyX3BvbGFydHdpbGlnaHQuc3ZnJztcclxuaW1wb3J0IGZvZyBmcm9tICcuL2ltYWdlcy9mb2cuc3ZnJztcclxuaW1wb3J0IGhlYXZ5cmFpbiBmcm9tICcuL2ltYWdlcy9oZWF2eXJhaW4uc3ZnJztcclxuaW1wb3J0IGhlYXZ5cmFpbmFuZHRodW5kZXIgZnJvbSAnLi9pbWFnZXMvaGVhdnlyYWluYW5kdGh1bmRlci5zdmcnO1xyXG5pbXBvcnQgaGVhdnlyYWluc2hvd2Vyc2FuZHRodW5kZXJfZGF5IGZyb20gJy4vaW1hZ2VzL2hlYXZ5cmFpbnNob3dlcnNhbmR0aHVuZGVyX2RheS5zdmcnO1xyXG5pbXBvcnQgaGVhdnlyYWluc2hvd2Vyc2FuZHRodW5kZXJfbmlnaHQgZnJvbSAnLi9pbWFnZXMvaGVhdnlyYWluc2hvd2Vyc2FuZHRodW5kZXJfbmlnaHQuc3ZnJztcclxuaW1wb3J0IGhlYXZ5cmFpbnNob3dlcnNhbmR0aHVuZGVyX3BvbGFydHdpbGlnaHQgZnJvbSAnLi9pbWFnZXMvaGVhdnlyYWluc2hvd2Vyc2FuZHRodW5kZXJfcG9sYXJ0d2lsaWdodC5zdmcnO1xyXG5pbXBvcnQgaGVhdnlyYWluc2hvd2Vyc19kYXkgZnJvbSAnLi9pbWFnZXMvaGVhdnlyYWluc2hvd2Vyc19kYXkuc3ZnJztcclxuaW1wb3J0IGhlYXZ5cmFpbnNob3dlcnNfbmlnaHQgZnJvbSAnLi9pbWFnZXMvaGVhdnlyYWluc2hvd2Vyc19uaWdodC5zdmcnO1xyXG5pbXBvcnQgaGVhdnlyYWluc2hvd2Vyc19wb2xhcnR3aWxpZ2h0IGZyb20gJy4vaW1hZ2VzL2hlYXZ5cmFpbnNob3dlcnNfcG9sYXJ0d2lsaWdodC5zdmcnO1xyXG5pbXBvcnQgaGVhdnlzbGVldCBmcm9tICcuL2ltYWdlcy9oZWF2eXNsZWV0LnN2Zyc7XHJcbmltcG9ydCBoZWF2eXNsZWV0YW5kdGh1bmRlciBmcm9tICcuL2ltYWdlcy9oZWF2eXNsZWV0YW5kdGh1bmRlci5zdmcnO1xyXG5pbXBvcnQgaGVhdnlzbGVldHNob3dlcnNhbmR0aHVuZGVyX2RheSBmcm9tICcuL2ltYWdlcy9oZWF2eXNsZWV0c2hvd2Vyc2FuZHRodW5kZXJfZGF5LnN2Zyc7XHJcbmltcG9ydCBoZWF2eXNsZWV0c2hvd2Vyc2FuZHRodW5kZXJfbmlnaHQgZnJvbSAnLi9pbWFnZXMvaGVhdnlzbGVldHNob3dlcnNhbmR0aHVuZGVyX25pZ2h0LnN2Zyc7XHJcbmltcG9ydCBoZWF2eXNsZWV0c2hvd2Vyc2FuZHRodW5kZXJfcG9sYXJ0d2lsaWdodCBmcm9tICcuL2ltYWdlcy9oZWF2eXNsZWV0c2hvd2Vyc2FuZHRodW5kZXJfcG9sYXJ0d2lsaWdodC5zdmcnO1xyXG5pbXBvcnQgaGVhdnlzbGVldHNob3dlcnNfZGF5IGZyb20gJy4vaW1hZ2VzL2hlYXZ5c2xlZXRzaG93ZXJzX2RheS5zdmcnO1xyXG5pbXBvcnQgaGVhdnlzbGVldHNob3dlcnNfbmlnaHQgZnJvbSAnLi9pbWFnZXMvaGVhdnlzbGVldHNob3dlcnNfbmlnaHQuc3ZnJztcclxuaW1wb3J0IGhlYXZ5c2xlZXRzaG93ZXJzX3BvbGFydHdpbGlnaHQgZnJvbSAnLi9pbWFnZXMvaGVhdnlzbGVldHNob3dlcnNfcG9sYXJ0d2lsaWdodC5zdmcnO1xyXG5pbXBvcnQgaGVhdnlzbm93IGZyb20gJy4vaW1hZ2VzL2hlYXZ5c25vdy5zdmcnO1xyXG5pbXBvcnQgaGVhdnlzbm93YW5kdGh1bmRlciBmcm9tICcuL2ltYWdlcy9oZWF2eXNub3dhbmR0aHVuZGVyLnN2Zyc7XHJcbmltcG9ydCBoZWF2eXNub3dzaG93ZXJzYW5kdGh1bmRlcl9kYXkgZnJvbSAnLi9pbWFnZXMvaGVhdnlzbm93c2hvd2Vyc2FuZHRodW5kZXJfZGF5LnN2Zyc7XHJcbmltcG9ydCBoZWF2eXNub3dzaG93ZXJzYW5kdGh1bmRlcl9uaWdodCBmcm9tICcuL2ltYWdlcy9oZWF2eXNub3dzaG93ZXJzYW5kdGh1bmRlcl9uaWdodC5zdmcnO1xyXG5pbXBvcnQgaGVhdnlzbm93c2hvd2Vyc2FuZHRodW5kZXJfcG9sYXJ0d2lsaWdodCBmcm9tICcuL2ltYWdlcy9oZWF2eXNub3dzaG93ZXJzYW5kdGh1bmRlcl9wb2xhcnR3aWxpZ2h0LnN2Zyc7XHJcbmltcG9ydCBoZWF2eXNub3dzaG93ZXJzX2RheSBmcm9tICcuL2ltYWdlcy9oZWF2eXNub3dzaG93ZXJzX2RheS5zdmcnO1xyXG5pbXBvcnQgaGVhdnlzbm93c2hvd2Vyc19uaWdodCBmcm9tICcuL2ltYWdlcy9oZWF2eXNub3dzaG93ZXJzX25pZ2h0LnN2Zyc7XHJcbmltcG9ydCBoZWF2eXNub3dzaG93ZXJzX3BvbGFydHdpbGlnaHQgZnJvbSAnLi9pbWFnZXMvaGVhdnlzbm93c2hvd2Vyc19wb2xhcnR3aWxpZ2h0LnN2Zyc7XHJcbmltcG9ydCBsaWdodHJhaW4gZnJvbSAnLi9pbWFnZXMvbGlnaHRyYWluLnN2Zyc7XHJcbmltcG9ydCBsaWdodHJhaW5hbmR0aHVuZGVyIGZyb20gJy4vaW1hZ2VzL2xpZ2h0cmFpbmFuZHRodW5kZXIuc3ZnJztcclxuaW1wb3J0IGxpZ2h0cmFpbnNob3dlcnNhbmR0aHVuZGVyX2RheSBmcm9tICcuL2ltYWdlcy9saWdodHJhaW5zaG93ZXJzYW5kdGh1bmRlcl9kYXkuc3ZnJztcclxuaW1wb3J0IGxpZ2h0cmFpbnNob3dlcnNhbmR0aHVuZGVyX25pZ2h0IGZyb20gJy4vaW1hZ2VzL2xpZ2h0cmFpbnNob3dlcnNhbmR0aHVuZGVyX25pZ2h0LnN2Zyc7XHJcbmltcG9ydCBsaWdodHJhaW5zaG93ZXJzYW5kdGh1bmRlcl9wb2xhcnR3aWxpZ2h0IGZyb20gJy4vaW1hZ2VzL2xpZ2h0cmFpbnNob3dlcnNhbmR0aHVuZGVyX3BvbGFydHdpbGlnaHQuc3ZnJztcclxuaW1wb3J0IGxpZ2h0cmFpbnNob3dlcnNfZGF5IGZyb20gJy4vaW1hZ2VzL2xpZ2h0cmFpbnNob3dlcnNfZGF5LnN2Zyc7XHJcbmltcG9ydCBsaWdodHJhaW5zaG93ZXJzX25pZ2h0IGZyb20gJy4vaW1hZ2VzL2xpZ2h0cmFpbnNob3dlcnNfbmlnaHQuc3ZnJztcclxuaW1wb3J0IGxpZ2h0cmFpbnNob3dlcnNfcG9sYXJ0d2lsaWdodCBmcm9tICcuL2ltYWdlcy9saWdodHJhaW5zaG93ZXJzX3BvbGFydHdpbGlnaHQuc3ZnJztcclxuaW1wb3J0IGxpZ2h0c2xlZXQgZnJvbSAnLi9pbWFnZXMvbGlnaHRzbGVldC5zdmcnO1xyXG5pbXBvcnQgbGlnaHRzbGVldGFuZHRodW5kZXIgZnJvbSAnLi9pbWFnZXMvbGlnaHRzbGVldGFuZHRodW5kZXIuc3ZnJztcclxuaW1wb3J0IGxpZ2h0c2xlZXRzaG93ZXJzX2RheSBmcm9tICcuL2ltYWdlcy9saWdodHNsZWV0c2hvd2Vyc19kYXkuc3ZnJztcclxuaW1wb3J0IGxpZ2h0c2xlZXRzaG93ZXJzX25pZ2h0IGZyb20gJy4vaW1hZ2VzL2xpZ2h0c2xlZXRzaG93ZXJzX25pZ2h0LnN2Zyc7XHJcbmltcG9ydCBsaWdodHNsZWV0c2hvd2Vyc19wb2xhcnR3aWxpZ2h0IGZyb20gJy4vaW1hZ2VzL2xpZ2h0c2xlZXRzaG93ZXJzX3BvbGFydHdpbGlnaHQuc3ZnJztcclxuaW1wb3J0IGxpZ2h0c25vdyBmcm9tICcuL2ltYWdlcy9saWdodHNub3cuc3ZnJztcclxuaW1wb3J0IGxpZ2h0c25vd2FuZHRodW5kZXIgZnJvbSAnLi9pbWFnZXMvbGlnaHRzbm93YW5kdGh1bmRlci5zdmcnO1xyXG5pbXBvcnQgbGlnaHRzbm93c2hvd2Vyc19kYXkgZnJvbSAnLi9pbWFnZXMvbGlnaHRzbm93c2hvd2Vyc19kYXkuc3ZnJztcclxuaW1wb3J0IGxpZ2h0c25vd3Nob3dlcnNfbmlnaHQgZnJvbSAnLi9pbWFnZXMvbGlnaHRzbm93c2hvd2Vyc19uaWdodC5zdmcnO1xyXG5pbXBvcnQgbGlnaHRzbm93c2hvd2Vyc19wb2xhcnR3aWxpZ2h0IGZyb20gJy4vaW1hZ2VzL2xpZ2h0c25vd3Nob3dlcnNfcG9sYXJ0d2lsaWdodC5zdmcnO1xyXG5pbXBvcnQgbGlnaHRzc2xlZXRzaG93ZXJzYW5kdGh1bmRlcl9kYXkgZnJvbSAnLi9pbWFnZXMvbGlnaHRzc2xlZXRzaG93ZXJzYW5kdGh1bmRlcl9kYXkuc3ZnJztcclxuaW1wb3J0IGxpZ2h0c3NsZWV0c2hvd2Vyc2FuZHRodW5kZXJfbmlnaHQgZnJvbSAnLi9pbWFnZXMvbGlnaHRzc2xlZXRzaG93ZXJzYW5kdGh1bmRlcl9uaWdodC5zdmcnO1xyXG5pbXBvcnQgbGlnaHRzc2xlZXRzaG93ZXJzYW5kdGh1bmRlcl9wb2xhcnR3aWxpZ2h0IGZyb20gJy4vaW1hZ2VzL2xpZ2h0c3NsZWV0c2hvd2Vyc2FuZHRodW5kZXJfcG9sYXJ0d2lsaWdodC5zdmcnO1xyXG5pbXBvcnQgbGlnaHRzc25vd3Nob3dlcnNhbmR0aHVuZGVyX2RheSBmcm9tICcuL2ltYWdlcy9saWdodHNzbm93c2hvd2Vyc2FuZHRodW5kZXJfZGF5LnN2Zyc7XHJcbmltcG9ydCBsaWdodHNzbm93c2hvd2Vyc2FuZHRodW5kZXJfbmlnaHQgZnJvbSAnLi9pbWFnZXMvbGlnaHRzc25vd3Nob3dlcnNhbmR0aHVuZGVyX25pZ2h0LnN2Zyc7XHJcbmltcG9ydCBsaWdodHNzbm93c2hvd2Vyc2FuZHRodW5kZXJfcG9sYXJ0d2lsaWdodCBmcm9tICcuL2ltYWdlcy9saWdodHNzbm93c2hvd2Vyc2FuZHRodW5kZXJfcG9sYXJ0d2lsaWdodC5zdmcnO1xyXG5pbXBvcnQgcGFydGx5Y2xvdWR5X2RheSBmcm9tICcuL2ltYWdlcy9wYXJ0bHljbG91ZHlfZGF5LnN2Zyc7XHJcbmltcG9ydCBwYXJ0bHljbG91ZHlfbmlnaHQgZnJvbSAnLi9pbWFnZXMvcGFydGx5Y2xvdWR5X25pZ2h0LnN2Zyc7XHJcbmltcG9ydCBwYXJ0bHljbG91ZHlfcG9sYXJ0d2lsaWdodCBmcm9tICcuL2ltYWdlcy9wYXJ0bHljbG91ZHlfcG9sYXJ0d2lsaWdodC5zdmcnO1xyXG5pbXBvcnQgcmFpbiBmcm9tICcuL2ltYWdlcy9yYWluLnN2Zyc7XHJcbmltcG9ydCByYWluYW5kdGh1bmRlciBmcm9tICcuL2ltYWdlcy9yYWluYW5kdGh1bmRlci5zdmcnO1xyXG5pbXBvcnQgcmFpbnNob3dlcnNhbmR0aHVuZGVyX2RheSBmcm9tICcuL2ltYWdlcy9yYWluc2hvd2Vyc2FuZHRodW5kZXJfZGF5LnN2Zyc7XHJcbmltcG9ydCByYWluc2hvd2Vyc2FuZHRodW5kZXJfbmlnaHQgZnJvbSAnLi9pbWFnZXMvcmFpbnNob3dlcnNhbmR0aHVuZGVyX25pZ2h0LnN2Zyc7XHJcbmltcG9ydCByYWluc2hvd2Vyc2FuZHRodW5kZXJfcG9sYXJ0d2lsaWdodCBmcm9tICcuL2ltYWdlcy9yYWluc2hvd2Vyc2FuZHRodW5kZXJfcG9sYXJ0d2lsaWdodC5zdmcnO1xyXG5pbXBvcnQgcmFpbnNob3dlcnNfZGF5IGZyb20gJy4vaW1hZ2VzL3JhaW5zaG93ZXJzX2RheS5zdmcnO1xyXG5pbXBvcnQgcmFpbnNob3dlcnNfbmlnaHQgZnJvbSAnLi9pbWFnZXMvcmFpbnNob3dlcnNfbmlnaHQuc3ZnJztcclxuaW1wb3J0IHJhaW5zaG93ZXJzX3BvbGFydHdpbGlnaHQgZnJvbSAnLi9pbWFnZXMvcmFpbnNob3dlcnNfcG9sYXJ0d2lsaWdodC5zdmcnO1xyXG5pbXBvcnQgc2xlZXQgZnJvbSAnLi9pbWFnZXMvc2xlZXQuc3ZnJztcclxuaW1wb3J0IHNsZWV0YW5kdGh1bmRlciBmcm9tICcuL2ltYWdlcy9zbGVldGFuZHRodW5kZXIuc3ZnJztcclxuaW1wb3J0IHNsZWV0c2hvd2Vyc2FuZHRodW5kZXJfZGF5IGZyb20gJy4vaW1hZ2VzL3NsZWV0c2hvd2Vyc2FuZHRodW5kZXJfZGF5LnN2Zyc7XHJcbmltcG9ydCBzbGVldHNob3dlcnNhbmR0aHVuZGVyX25pZ2h0IGZyb20gJy4vaW1hZ2VzL3NsZWV0c2hvd2Vyc2FuZHRodW5kZXJfbmlnaHQuc3ZnJztcclxuaW1wb3J0IHNsZWV0c2hvd2Vyc2FuZHRodW5kZXJfcG9sYXJ0d2lsaWdodCBmcm9tICcuL2ltYWdlcy9zbGVldHNob3dlcnNhbmR0aHVuZGVyX3BvbGFydHdpbGlnaHQuc3ZnJztcclxuaW1wb3J0IHNsZWV0c2hvd2Vyc19kYXkgZnJvbSAnLi9pbWFnZXMvc2xlZXRzaG93ZXJzX2RheS5zdmcnO1xyXG5pbXBvcnQgc2xlZXRzaG93ZXJzX25pZ2h0IGZyb20gJy4vaW1hZ2VzL3NsZWV0c2hvd2Vyc19uaWdodC5zdmcnO1xyXG5pbXBvcnQgc2xlZXRzaG93ZXJzX3BvbGFydHdpbGlnaHQgZnJvbSAnLi9pbWFnZXMvc2xlZXRzaG93ZXJzX3BvbGFydHdpbGlnaHQuc3ZnJztcclxuaW1wb3J0IHNub3cgZnJvbSAnLi9pbWFnZXMvc25vdy5zdmcnO1xyXG5pbXBvcnQgc25vd2FuZHRodW5kZXIgZnJvbSAnLi9pbWFnZXMvc25vd2FuZHRodW5kZXIuc3ZnJztcclxuaW1wb3J0IHNub3dzaG93ZXJzYW5kdGh1bmRlcl9kYXkgZnJvbSAnLi9pbWFnZXMvc25vd3Nob3dlcnNhbmR0aHVuZGVyX2RheS5zdmcnO1xyXG5pbXBvcnQgc25vd3Nob3dlcnNhbmR0aHVuZGVyX25pZ2h0IGZyb20gJy4vaW1hZ2VzL3Nub3dzaG93ZXJzYW5kdGh1bmRlcl9uaWdodC5zdmcnO1xyXG5pbXBvcnQgc25vd3Nob3dlcnNhbmR0aHVuZGVyX3BvbGFydHdpbGlnaHQgZnJvbSAnLi9pbWFnZXMvc25vd3Nob3dlcnNhbmR0aHVuZGVyX3BvbGFydHdpbGlnaHQuc3ZnJztcclxuaW1wb3J0IHNub3dzaG93ZXJzX2RheSBmcm9tICcuL2ltYWdlcy9zbm93c2hvd2Vyc19kYXkuc3ZnJztcclxuaW1wb3J0IHNub3dzaG93ZXJzX25pZ2h0IGZyb20gJy4vaW1hZ2VzL3Nub3dzaG93ZXJzX25pZ2h0LnN2Zyc7XHJcbmltcG9ydCBzbm93c2hvd2Vyc19wb2xhcnR3aWxpZ2h0IGZyb20gJy4vaW1hZ2VzL3Nub3dzaG93ZXJzX3BvbGFydHdpbGlnaHQuc3ZnJztcclxuaW1wb3J0IGljb25fYXJyb3cgZnJvbSAnLi9pbWFnZXMvaWNvbl9hcnJvdy5zdmcnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQge1xyXG4gIGNsZWFyc2t5X2RheTogY2xlYXJza3lfZGF5LFxyXG4gIGNsZWFyc2t5X25pZ2h0OiBjbGVhcnNreV9uaWdodCxcclxuICBjbGVhcnNreV9wb2xhcnR3aWxpZ2h0OiBjbGVhcnNreV9wb2xhcnR3aWxpZ2h0LFxyXG4gIGNsb3VkeTogY2xvdWR5LFxyXG4gIGZhaXJfZGF5OiBmYWlyX2RheSxcclxuICBmYWlyX25pZ2h0OiBmYWlyX25pZ2h0LFxyXG4gIGZhaXJfcG9sYXJ0d2lsaWdodDogZmFpcl9wb2xhcnR3aWxpZ2h0LFxyXG4gIGZvZzogZm9nLFxyXG4gIGhlYXZ5cmFpbjogaGVhdnlyYWluLFxyXG4gIGhlYXZ5cmFpbmFuZHRodW5kZXI6IGhlYXZ5cmFpbmFuZHRodW5kZXIsXHJcbiAgaGVhdnlyYWluc2hvd2Vyc2FuZHRodW5kZXJfZGF5OiBoZWF2eXJhaW5zaG93ZXJzYW5kdGh1bmRlcl9kYXksXHJcbiAgaGVhdnlyYWluc2hvd2Vyc2FuZHRodW5kZXJfbmlnaHQ6IGhlYXZ5cmFpbnNob3dlcnNhbmR0aHVuZGVyX25pZ2h0LFxyXG4gIGhlYXZ5cmFpbnNob3dlcnNhbmR0aHVuZGVyX3BvbGFydHdpbGlnaHQ6XHJcbiAgICBoZWF2eXJhaW5zaG93ZXJzYW5kdGh1bmRlcl9wb2xhcnR3aWxpZ2h0LFxyXG4gIGhlYXZ5cmFpbnNob3dlcnNfZGF5OiBoZWF2eXJhaW5zaG93ZXJzX2RheSxcclxuICBoZWF2eXJhaW5zaG93ZXJzX25pZ2h0OiBoZWF2eXJhaW5zaG93ZXJzX25pZ2h0LFxyXG4gIGhlYXZ5cmFpbnNob3dlcnNfcG9sYXJ0d2lsaWdodDogaGVhdnlyYWluc2hvd2Vyc19wb2xhcnR3aWxpZ2h0LFxyXG4gIGhlYXZ5c2xlZXQ6IGhlYXZ5c2xlZXQsXHJcbiAgaGVhdnlzbGVldGFuZHRodW5kZXI6IGhlYXZ5c2xlZXRhbmR0aHVuZGVyLFxyXG4gIGhlYXZ5c2xlZXRzaG93ZXJzYW5kdGh1bmRlcl9kYXk6IGhlYXZ5c2xlZXRzaG93ZXJzYW5kdGh1bmRlcl9kYXksXHJcbiAgaGVhdnlzbGVldHNob3dlcnNhbmR0aHVuZGVyX25pZ2h0OiBoZWF2eXNsZWV0c2hvd2Vyc2FuZHRodW5kZXJfbmlnaHQsXHJcbiAgaGVhdnlzbGVldHNob3dlcnNhbmR0aHVuZGVyX3BvbGFydHdpbGlnaHQ6XHJcbiAgICBoZWF2eXNsZWV0c2hvd2Vyc2FuZHRodW5kZXJfcG9sYXJ0d2lsaWdodCxcclxuICBoZWF2eXNsZWV0c2hvd2Vyc19kYXk6IGhlYXZ5c2xlZXRzaG93ZXJzX2RheSxcclxuICBoZWF2eXNsZWV0c2hvd2Vyc19uaWdodDogaGVhdnlzbGVldHNob3dlcnNfbmlnaHQsXHJcbiAgaGVhdnlzbGVldHNob3dlcnNfcG9sYXJ0d2lsaWdodDogaGVhdnlzbGVldHNob3dlcnNfcG9sYXJ0d2lsaWdodCxcclxuICBoZWF2eXNub3c6IGhlYXZ5c25vdyxcclxuICBoZWF2eXNub3dhbmR0aHVuZGVyOiBoZWF2eXNub3dhbmR0aHVuZGVyLFxyXG4gIGhlYXZ5c25vd3Nob3dlcnNhbmR0aHVuZGVyX2RheTogaGVhdnlzbm93c2hvd2Vyc2FuZHRodW5kZXJfZGF5LFxyXG4gIGhlYXZ5c25vd3Nob3dlcnNhbmR0aHVuZGVyX25pZ2h0OiBoZWF2eXNub3dzaG93ZXJzYW5kdGh1bmRlcl9uaWdodCxcclxuICBoZWF2eXNub3dzaG93ZXJzYW5kdGh1bmRlcl9wb2xhcnR3aWxpZ2h0OlxyXG4gICAgaGVhdnlzbm93c2hvd2Vyc2FuZHRodW5kZXJfcG9sYXJ0d2lsaWdodCxcclxuICBoZWF2eXNub3dzaG93ZXJzX2RheTogaGVhdnlzbm93c2hvd2Vyc19kYXksXHJcbiAgaGVhdnlzbm93c2hvd2Vyc19uaWdodDogaGVhdnlzbm93c2hvd2Vyc19uaWdodCxcclxuICBoZWF2eXNub3dzaG93ZXJzX3BvbGFydHdpbGlnaHQ6IGhlYXZ5c25vd3Nob3dlcnNfcG9sYXJ0d2lsaWdodCxcclxuICBsaWdodHJhaW46IGxpZ2h0cmFpbixcclxuICBsaWdodHJhaW5hbmR0aHVuZGVyOiBsaWdodHJhaW5hbmR0aHVuZGVyLFxyXG4gIGxpZ2h0cmFpbnNob3dlcnNhbmR0aHVuZGVyX2RheTogbGlnaHRyYWluc2hvd2Vyc2FuZHRodW5kZXJfZGF5LFxyXG4gIGxpZ2h0cmFpbnNob3dlcnNhbmR0aHVuZGVyX25pZ2h0OiBsaWdodHJhaW5zaG93ZXJzYW5kdGh1bmRlcl9uaWdodCxcclxuICBsaWdodHJhaW5zaG93ZXJzYW5kdGh1bmRlcl9wb2xhcnR3aWxpZ2h0OlxyXG4gICAgbGlnaHRyYWluc2hvd2Vyc2FuZHRodW5kZXJfcG9sYXJ0d2lsaWdodCxcclxuICBsaWdodHJhaW5zaG93ZXJzX2RheTogbGlnaHRyYWluc2hvd2Vyc19kYXksXHJcbiAgbGlnaHRyYWluc2hvd2Vyc19uaWdodDogbGlnaHRyYWluc2hvd2Vyc19uaWdodCxcclxuICBsaWdodHJhaW5zaG93ZXJzX3BvbGFydHdpbGlnaHQ6IGxpZ2h0cmFpbnNob3dlcnNfcG9sYXJ0d2lsaWdodCxcclxuICBsaWdodHNsZWV0OiBsaWdodHNsZWV0LFxyXG4gIGxpZ2h0c2xlZXRhbmR0aHVuZGVyOiBsaWdodHNsZWV0YW5kdGh1bmRlcixcclxuICBsaWdodHNsZWV0c2hvd2Vyc19kYXk6IGxpZ2h0c2xlZXRzaG93ZXJzX2RheSxcclxuICBsaWdodHNsZWV0c2hvd2Vyc19uaWdodDogbGlnaHRzbGVldHNob3dlcnNfbmlnaHQsXHJcbiAgbGlnaHRzbGVldHNob3dlcnNfcG9sYXJ0d2lsaWdodDogbGlnaHRzbGVldHNob3dlcnNfcG9sYXJ0d2lsaWdodCxcclxuICBsaWdodHNub3c6IGxpZ2h0c25vdyxcclxuICBsaWdodHNub3dhbmR0aHVuZGVyOiBsaWdodHNub3dhbmR0aHVuZGVyLFxyXG4gIGxpZ2h0c25vd2FuZHRodW5kZXI6IGxpZ2h0c25vd2FuZHRodW5kZXIsXHJcbiAgbGlnaHRzbm93c2hvd2Vyc19kYXk6IGxpZ2h0c25vd3Nob3dlcnNfZGF5LFxyXG4gIGxpZ2h0c25vd3Nob3dlcnNfbmlnaHQ6IGxpZ2h0c25vd3Nob3dlcnNfbmlnaHQsXHJcbiAgbGlnaHRzbm93c2hvd2Vyc19wb2xhcnR3aWxpZ2h0OiBsaWdodHNub3dzaG93ZXJzX3BvbGFydHdpbGlnaHQsXHJcbiAgaWdodHNzbGVldHNob3dlcnNhbmR0aHVuZGVyX2RheTogbGlnaHRzc2xlZXRzaG93ZXJzYW5kdGh1bmRlcl9kYXksXHJcbiAgbGlnaHRzc2xlZXRzaG93ZXJzYW5kdGh1bmRlcl9uaWdodDogbGlnaHRzc2xlZXRzaG93ZXJzYW5kdGh1bmRlcl9uaWdodCxcclxuICBsaWdodHNzbGVldHNob3dlcnNhbmR0aHVuZGVyX3BvbGFydHdpbGlnaHQ6XHJcbiAgICBsaWdodHNzbGVldHNob3dlcnNhbmR0aHVuZGVyX3BvbGFydHdpbGlnaHQsXHJcbiAgbGlnaHRzc25vd3Nob3dlcnNhbmR0aHVuZGVyX2RheTogbGlnaHRzc25vd3Nob3dlcnNhbmR0aHVuZGVyX2RheSxcclxuICBsaWdodHNzbm93c2hvd2Vyc2FuZHRodW5kZXJfbmlnaHQ6IGxpZ2h0c3Nub3dzaG93ZXJzYW5kdGh1bmRlcl9uaWdodCxcclxuICBsaWdodHNzbm93c2hvd2Vyc2FuZHRodW5kZXJfcG9sYXJ0d2lsaWdodDpcclxuICAgIGxpZ2h0c3Nub3dzaG93ZXJzYW5kdGh1bmRlcl9wb2xhcnR3aWxpZ2h0LFxyXG4gIHBhcnRseWNsb3VkeV9kYXk6IHBhcnRseWNsb3VkeV9kYXksXHJcbiAgcGFydGx5Y2xvdWR5X25pZ2h0OiBwYXJ0bHljbG91ZHlfbmlnaHQsXHJcbiAgcGFydGx5Y2xvdWR5X3BvbGFydHdpbGlnaHQ6IHBhcnRseWNsb3VkeV9wb2xhcnR3aWxpZ2h0LFxyXG4gIHJhaW46IHJhaW4sXHJcbiAgcmFpbmFuZHRodW5kZXI6IHJhaW5hbmR0aHVuZGVyLFxyXG4gIHJhaW5zaG93ZXJzYW5kdGh1bmRlcl9kYXk6IHJhaW5zaG93ZXJzYW5kdGh1bmRlcl9kYXksXHJcbiAgcmFpbnNob3dlcnNhbmR0aHVuZGVyX25pZ2h0OiByYWluc2hvd2Vyc2FuZHRodW5kZXJfbmlnaHQsXHJcbiAgcmFpbnNob3dlcnNhbmR0aHVuZGVyX3BvbGFydHdpbGlnaHQ6IHJhaW5zaG93ZXJzYW5kdGh1bmRlcl9wb2xhcnR3aWxpZ2h0LFxyXG4gIHJhaW5zaG93ZXJzX2RheTogcmFpbnNob3dlcnNfZGF5LFxyXG4gIHJhaW5zaG93ZXJzX25pZ2h0OiByYWluc2hvd2Vyc19uaWdodCxcclxuICByYWluc2hvd2Vyc19wb2xhcnR3aWxpZ2h0OiByYWluc2hvd2Vyc19wb2xhcnR3aWxpZ2h0LFxyXG4gIHNsZWV0OiBzbGVldCxcclxuICBzbGVldGFuZHRodW5kZXI6IHNsZWV0YW5kdGh1bmRlcixcclxuICBzbGVldHNob3dlcnNhbmR0aHVuZGVyX2RheTogc2xlZXRzaG93ZXJzYW5kdGh1bmRlcl9kYXksXHJcbiAgc2xlZXRzaG93ZXJzYW5kdGh1bmRlcl9uaWdodDogc2xlZXRzaG93ZXJzYW5kdGh1bmRlcl9uaWdodCxcclxuICBzbGVldHNob3dlcnNhbmR0aHVuZGVyX3BvbGFydHdpbGlnaHQ6IHNsZWV0c2hvd2Vyc2FuZHRodW5kZXJfcG9sYXJ0d2lsaWdodCxcclxuICBzbGVldHNob3dlcnNfZGF5OiBzbGVldHNob3dlcnNfZGF5LFxyXG4gIHNsZWV0c2hvd2Vyc19uaWdodDogc2xlZXRzaG93ZXJzX25pZ2h0LFxyXG4gIHNsZWV0c2hvd2Vyc19wb2xhcnR3aWxpZ2h0OiBzbGVldHNob3dlcnNfcG9sYXJ0d2lsaWdodCxcclxuICBzbm93OiBzbm93LFxyXG4gIHNub3dhbmR0aHVuZGVyOiBzbm93YW5kdGh1bmRlcixcclxuICBzbm93c2hvd2Vyc2FuZHRodW5kZXJfZGF5OiBzbm93c2hvd2Vyc2FuZHRodW5kZXJfZGF5LFxyXG4gIHNub3dzaG93ZXJzYW5kdGh1bmRlcl9uaWdodDogc25vd3Nob3dlcnNhbmR0aHVuZGVyX25pZ2h0LFxyXG4gIHNub3dzaG93ZXJzYW5kdGh1bmRlcl9wb2xhcnR3aWxpZ2h0OiBzbm93c2hvd2Vyc2FuZHRodW5kZXJfcG9sYXJ0d2lsaWdodCxcclxuICBzbm93c2hvd2Vyc19kYXk6IHNub3dzaG93ZXJzX2RheSxcclxuICBzbm93c2hvd2Vyc19uaWdodDogc25vd3Nob3dlcnNfbmlnaHQsXHJcbiAgc25vd3Nob3dlcnNfcG9sYXJ0d2lsaWdodDogc25vd3Nob3dlcnNfcG9sYXJ0d2lsaWdodCxcclxuICBpY29uX2Fycm93OiBpY29uX2Fycm93LFxyXG59O1xyXG4iLCIvL25weCB3ZWJwYWNrIC0td2F0Y2hcclxuLy91c2UgdHJlZSBzaGFraW5nIHdoZW4gbW9yZSBjaGFydHMgYXJlIGRvbmVcclxuLy9saW5qZSBtZWQgYW5uYW4gZsOkcmcgZsO2ciB2aW5kXHJcbi8vZGltZW5zaW9uZXJhIGbDtnIgcsOkdHQgc2vDpHJtdHlwLCAxNjo5PyBQaXhsYXI/XHJcbi8vdsOkZGVyIHDDpSB2YXJqZSB0ZW1wcHVua3RcclxuaW1wb3J0IENoYXJ0IGZyb20gJ2NoYXJ0LmpzL2F1dG8nO1xyXG5pbXBvcnQgaW1hZ2VzIGZyb20gJy4vaW1hZ2VzJztcclxuXHJcbmNsYXNzIEJhckxpbmVDaGFydCB7XHJcbiAgY29uc3RydWN0b3IoY3R4KSB7XHJcbiAgICB0aGlzLmJ1aWxkQ2hhcnQoY3R4KTtcclxuICB9XHJcblxyXG4gIGJ1aWxkQ2hhcnQoY3R4KSB7XHJcbiAgICB0aGlzLmNoYXJ0ID0gbmV3IENoYXJ0KGN0eCwge1xyXG4gICAgICBkYXRhOiB7XHJcbiAgICAgICAgZGF0YXNldHM6IHRoaXMuZ2V0RGF0YXNldHMoKSxcclxuICAgICAgfSxcclxuICAgICAgb3B0aW9uczogdGhpcy5nZXRPcHRpb25zKCksXHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIHVwZGF0ZURhdGEoXHJcbiAgICBob3VyLFxyXG4gICAgdGVtcCxcclxuICAgIHByZWNpcGl0YXRpb24sXHJcbiAgICB3aW5kLFxyXG4gICAgYWlyUHJlc3N1cmUsXHJcbiAgICB3ZWF0aGVySW1nLFxyXG4gICAgd2luZEFycm93LFxyXG4gICAgd2luZERpcmVjdGlvblxyXG4gICkge1xyXG4gICAgY29uc29sZS5sb2cod2luZERpcmVjdGlvbik7XHJcbiAgICB0aGlzLmNoYXJ0LmRhdGEubGFiZWxzID0gaG91cjtcclxuICAgIHRoaXMuY2hhcnQuZGF0YS5kYXRhc2V0c1swXS5kYXRhID0gdGVtcDtcclxuICAgIHRoaXMuY2hhcnQuZGF0YS5kYXRhc2V0c1swXS5wb2ludFN0eWxlID0gd2VhdGhlckltZztcclxuICAgIHRoaXMuY2hhcnQuZGF0YS5kYXRhc2V0c1sxXS5kYXRhID0gcHJlY2lwaXRhdGlvbjtcclxuICAgIHRoaXMuY2hhcnQuZGF0YS5kYXRhc2V0c1syXS5kYXRhID0gd2luZDtcclxuICAgIHRoaXMuY2hhcnQuZGF0YS5kYXRhc2V0c1syXS5wb2ludFN0eWxlID0gd2luZEFycm93O1xyXG4gICAgdGhpcy5jaGFydC5kYXRhLmRhdGFzZXRzWzJdLnBvaW50Um90YXRpb24gPSB3aW5kRGlyZWN0aW9uO1xyXG4gICAgdGhpcy5jaGFydC5kYXRhLmRhdGFzZXRzWzNdLmRhdGEgPSBhaXJQcmVzc3VyZTtcclxuICAgIHRoaXMuY2hhcnQudXBkYXRlKCk7XHJcbiAgfVxyXG5cclxuICBnZXREYXRhc2V0cygpIHtcclxuICAgIHJldHVybiBbXHJcbiAgICAgIHtcclxuICAgICAgICAvL3RlbXBcclxuICAgICAgICBvcmRlcjogMixcclxuICAgICAgICB0eXBlOiAnbGluZScsXHJcbiAgICAgICAgcG9pbnRSYWRpdXM6IDAuMSxcclxuICAgICAgICB0ZW5zaW9uOiAwLjQsXHJcbiAgICAgICAgZmlsbDogdHJ1ZSxcclxuICAgICAgICBib3JkZXJXaWR0aDogMCxcclxuICAgICAgICB5QXhpc0lEOiAneScsXHJcbiAgICAgICAgc2VnbWVudDoge1xyXG4gICAgICAgICAgYmFja2dyb3VuZENvbG9yOiAoY3R4KSA9PlxyXG4gICAgICAgICAgICBjdHgucDAucGFyc2VkLnkgPiAwXHJcbiAgICAgICAgICAgICAgPyAncmdiYSgzNjAsIDYzLCA3MywgMC41KSdcclxuICAgICAgICAgICAgICA6ICdyZ2JhKDE0MSwgMTY2LCAyMjksIDAuNSknLFxyXG4gICAgICAgIH0sXHJcbiAgICAgIH0sXHJcbiAgICAgIHtcclxuICAgICAgICAvL3ByZWNpcGl0YXRpb25cclxuICAgICAgICBvcmRlcjogMSxcclxuICAgICAgICB0eXBlOiAnYmFyJyxcclxuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6ICdyZ2JhKDU0LCAxNjIsIDIzNSwgMC4zKScsXHJcbiAgICAgICAgYm9yZGVyV2lkdGg6IDAsXHJcbiAgICAgICAgeUF4aXNJRDogJ3kyJyxcclxuICAgICAgfSxcclxuICAgICAge1xyXG4gICAgICAgIC8vd2luZFxyXG4gICAgICAgIG9yZGVyOiAzLFxyXG4gICAgICAgIHR5cGU6ICdsaW5lJyxcclxuICAgICAgICBwb2ludFJhZGl1czogMC4xLFxyXG4gICAgICAgIHRlbnNpb246IDAuNCxcclxuICAgICAgICB5QXhpc0lEOiAneScsXHJcbiAgICAgICAgc2VnbWVudDoge1xyXG4gICAgICAgICAgYm9yZGVyQ29sb3I6ICdyZ2JhKDE0MSwgMjI5LCAxNjYsIDAuNSknLFxyXG4gICAgICAgIH0sXHJcbiAgICAgIH0sXHJcbiAgICAgIHtcclxuICAgICAgICAvL2FpclByZXNzdXJlXHJcbiAgICAgICAgb3JkZXI6IDQsXHJcbiAgICAgICAgdHlwZTogJ2xpbmUnLFxyXG4gICAgICAgIHBvaW50UmFkaXVzOiAwLFxyXG4gICAgICAgIHRlbnNpb246IDAuNCxcclxuICAgICAgICBib3JkZXJEYXNoOiBbNSwgNV0sXHJcbiAgICAgICAgeUF4aXNJRDogJ3kzJyxcclxuICAgICAgICBzZWdtZW50OiB7XHJcbiAgICAgICAgICBib3JkZXJDb2xvcjogJ3JnYmEoMTk3LCAyMDEsIDE5OCwgMC45KScsXHJcbiAgICAgICAgfSxcclxuICAgICAgfSxcclxuICAgIF07XHJcbiAgfVxyXG5cclxuICBnZXRPcHRpb25zKCkge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgcmVzcG9uc2l2ZTogdHJ1ZSxcclxuICAgICAgcGx1Z2luczogeyBsZWdlbmQ6IHsgZGlzcGxheTogZmFsc2UgfSB9LFxyXG4gICAgICBzY2FsZXM6IHtcclxuICAgICAgICB5OiB7XHJcbiAgICAgICAgICAvL3RlbXAgJiB3aW5kXHJcbiAgICAgICAgICBtaW46IC0xNSxcclxuICAgICAgICAgIG1heDogMzUsXHJcbiAgICAgICAgICB0eXBlOiAnbGluZWFyJyxcclxuICAgICAgICAgIHBvc2l0aW9uOiAnbGVmdCcsXHJcbiAgICAgICAgICB0aWNrczoge1xyXG4gICAgICAgICAgICBjb2xvcjogJ2JsYWNrJyxcclxuICAgICAgICAgICAgYmVnaW5BdFplcm86IHRydWUsXHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgeTI6IHtcclxuICAgICAgICAgIC8vcHJlY2lwaXRhdGlvblxyXG4gICAgICAgICAgbWluOiAwLFxyXG4gICAgICAgICAgbWF4OiAxNixcclxuICAgICAgICAgIHR5cGU6ICdsaW5lYXInLFxyXG4gICAgICAgICAgcG9zaXRpb246ICdyaWdodCcsXHJcbiAgICAgICAgICB0aWNrczoge1xyXG4gICAgICAgICAgICBjb2xvcjogJ3JnYmEoNTQsIDE2MiwgMjM1LCAwLjgpJyxcclxuICAgICAgICAgIH0sXHJcbiAgICAgICAgICBncmlkOiB7XHJcbiAgICAgICAgICAgIGRyYXdPbkNoYXJ0QXJlYTogZmFsc2UsXHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgeTM6IHtcclxuICAgICAgICAgIC8vYWlyUHJlc3N1cmVcclxuICAgICAgICAgIHR5cGU6ICdsaW5lYXInLFxyXG4gICAgICAgICAgcG9zaXRpb246ICdyaWdodCcsXHJcbiAgICAgICAgICB0aWNrczoge1xyXG4gICAgICAgICAgICBjb2xvcjogJ3JnYmEoMTk3LCAyMDEsIDE5OCwgMSknLFxyXG4gICAgICAgICAgICBzdGVwU2l6ZTogNSxcclxuICAgICAgICAgIH0sXHJcbiAgICAgICAgICBncmlkOiB7XHJcbiAgICAgICAgICAgIGRyYXdPbkNoYXJ0QXJlYTogZmFsc2UsXHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgIH0sXHJcbiAgICAgIH0sXHJcbiAgICB9O1xyXG4gIH1cclxufVxyXG5cclxuY2xhc3MgRGlzcGxheUNvbnRyb2xsZXIge1xyXG4gIGdldENoYXJ0RWwoKSB7XHJcbiAgICByZXR1cm4gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2NoYXJ0Jyk7XHJcbiAgfVxyXG59XHJcblxyXG5jbGFzcyBXZWF0aGVyRGF0YSB7XHJcbiAgYXN5bmMgZmV0Y2hKc29uKHVybCkge1xyXG4gICAgLy8gY29uc3QgcmVzID0gYXdhaXQgZmV0Y2goXHJcbiAgICAvLyAgICcgaHR0cHM6Ly9vcGVuZGF0YS1kb3dubG9hZC1tZXRmY3N0LnNtaGkuc2UvYXBpL2NhdGVnb3J5L3BtcDNnL3ZlcnNpb24vMi9nZW90eXBlL3BvaW50L2xvbi8xNy42MzIwL2xhdC81OS44NDcxL2RhdGEuanNvbicsXHJcbiAgICAvLyAgIHsgbW9kZTogJ2NvcnMnIH1cclxuICAgIC8vICk7XHJcbiAgICAvLyBjb25zdCBqc29uID0gYXdhaXQgcmVzLmpzb24oKTtcclxuICAgIGNvbnN0IGpzb24gPSByZXF1aXJlKCcuL2RhdGEyLmpzb24nKTtcclxuICAgIHJldHVybiBqc29uO1xyXG4gIH1cclxuXHJcbiAgZ2V0RGF0YShqc29uKSB7XHJcbiAgICBjb25zb2xlLmxvZyhqc29uKTtcclxuICAgIGNvbnN0IGhvdXIgPSBbXTtcclxuICAgIGNvbnN0IHRlbXAgPSBbXTtcclxuICAgIGNvbnN0IHByZWNpcGl0YXRpb24gPSBbXTtcclxuICAgIGNvbnN0IHdpbmQgPSBbXTtcclxuICAgIGNvbnN0IGFpclByZXNzdXJlID0gW107XHJcbiAgICBjb25zdCB3ZWF0aGVySW1nID0gW107XHJcbiAgICBjb25zdCB3aW5kQXJyb3cgPSBbXTtcclxuICAgIGNvbnN0IHdpbmREaXJlY3Rpb24gPSBbXTtcclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgMTI7IGkrKykge1xyXG4gICAgICAvL2FkZCArMWggZm9yIFVUQ1xyXG4gICAgICBob3VyLnB1c2gocGFyc2VJbnQoanNvbi5wcm9wZXJ0aWVzLnRpbWVzZXJpZXNbaV0udGltZS5zbGljZSgxMSwgMTMpKSArIDEpO1xyXG4gICAgICB0ZW1wLnB1c2goXHJcbiAgICAgICAganNvbi5wcm9wZXJ0aWVzLnRpbWVzZXJpZXNbaV0uZGF0YS5pbnN0YW50LmRldGFpbHMuYWlyX3RlbXBlcmF0dXJlXHJcbiAgICAgICk7XHJcbiAgICAgIHByZWNpcGl0YXRpb24ucHVzaChcclxuICAgICAgICBqc29uLnByb3BlcnRpZXMudGltZXNlcmllc1tpXS5kYXRhLm5leHRfMV9ob3Vycy5kZXRhaWxzXHJcbiAgICAgICAgICAucHJlY2lwaXRhdGlvbl9hbW91bnRcclxuICAgICAgKTtcclxuICAgICAgd2luZC5wdXNoKGpzb24ucHJvcGVydGllcy50aW1lc2VyaWVzW2ldLmRhdGEuaW5zdGFudC5kZXRhaWxzLndpbmRfc3BlZWQpO1xyXG4gICAgICBhaXJQcmVzc3VyZS5wdXNoKFxyXG4gICAgICAgIGpzb24ucHJvcGVydGllcy50aW1lc2VyaWVzW2ldLmRhdGEuaW5zdGFudC5kZXRhaWxzXHJcbiAgICAgICAgICAuYWlyX3ByZXNzdXJlX2F0X3NlYV9sZXZlbFxyXG4gICAgICApO1xyXG4gICAgICBpZiAoaSAlIDIgPT09IDApIHtcclxuICAgICAgICBjb25zdCBpbWcgPSBuZXcgSW1hZ2UoMzUsIDM1KTtcclxuICAgICAgICBpbWcuc3JjID1cclxuICAgICAgICAgIGltYWdlc1tcclxuICAgICAgICAgICAganNvbi5wcm9wZXJ0aWVzLnRpbWVzZXJpZXNbaV0uZGF0YS5uZXh0XzFfaG91cnMuc3VtbWFyeS5zeW1ib2xfY29kZVxyXG4gICAgICAgICAgXTtcclxuICAgICAgICB3ZWF0aGVySW1nLnB1c2goaW1nKTtcclxuICAgICAgICB3aW5kQXJyb3cucHVzaCgnJyk7XHJcbiAgICAgICAgd2luZERpcmVjdGlvbi5wdXNoKCcnKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBjb25zdCBpbWcgPSBuZXcgSW1hZ2UoMjAsIDIwKTtcclxuICAgICAgICB3ZWF0aGVySW1nLnB1c2goJycpO1xyXG4gICAgICAgIGltZy5zcmMgPSBpbWFnZXMuaWNvbl9hcnJvdztcclxuICAgICAgICB3aW5kQXJyb3cucHVzaChpbWcpO1xyXG4gICAgICAgIHdpbmREaXJlY3Rpb24ucHVzaChcclxuICAgICAgICAgIGpzb24ucHJvcGVydGllcy50aW1lc2VyaWVzW2ldLmRhdGEuaW5zdGFudC5kZXRhaWxzLndpbmRfZnJvbV9kaXJlY3Rpb25cclxuICAgICAgICApO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICBob3VyLFxyXG4gICAgICB0ZW1wLFxyXG4gICAgICBwcmVjaXBpdGF0aW9uLFxyXG4gICAgICB3aW5kLFxyXG4gICAgICBhaXJQcmVzc3VyZSxcclxuICAgICAgd2VhdGhlckltZyxcclxuICAgICAgd2luZEFycm93LFxyXG4gICAgICB3aW5kRGlyZWN0aW9uLFxyXG4gICAgfTtcclxuICB9XHJcbn1cclxuXHJcbmNsYXNzIE1haW4ge1xyXG4gIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgdGhpcy53ZWF0aGVyRGF0YSA9IG5ldyBXZWF0aGVyRGF0YSgpO1xyXG4gICAgdGhpcy5kaXNwbGF5Q29udHJvbGxlciA9IG5ldyBEaXNwbGF5Q29udHJvbGxlcigpO1xyXG4gICAgdGhpcy5jaGFydCA9IG5ldyBCYXJMaW5lQ2hhcnQodGhpcy5kaXNwbGF5Q29udHJvbGxlci5nZXRDaGFydEVsKCkpO1xyXG4gICAgdGhpcy51cGRhdGVDaGFydCgpO1xyXG4gIH1cclxuXHJcbiAgYXN5bmMgdXBkYXRlQ2hhcnQoKSB7XHJcbiAgICBjb25zdCBqc29uID0gYXdhaXQgdGhpcy53ZWF0aGVyRGF0YS5mZXRjaEpzb24oKTtcclxuICAgIGNvbnN0IGRhdGEgPSB0aGlzLndlYXRoZXJEYXRhLmdldERhdGEoanNvbik7XHJcbiAgICB0aGlzLmNoYXJ0LnVwZGF0ZURhdGEoXHJcbiAgICAgIGRhdGEuaG91cixcclxuICAgICAgZGF0YS50ZW1wLFxyXG4gICAgICBkYXRhLnByZWNpcGl0YXRpb24sXHJcbiAgICAgIGRhdGEud2luZCxcclxuICAgICAgZGF0YS5haXJQcmVzc3VyZSxcclxuICAgICAgZGF0YS53ZWF0aGVySW1nLFxyXG4gICAgICBkYXRhLndpbmRBcnJvdyxcclxuICAgICAgZGF0YS53aW5kRGlyZWN0aW9uXHJcbiAgICApO1xyXG4gICAgLy8gc2V0VGltZW91dCh0aGlzLnVwZGF0ZUNoYXJ0LmJpbmQodGhpcyksIDUwMDApO1xyXG4gIH1cclxufVxyXG5cclxuY29uc3QgbWFpbiA9IG5ldyBNYWluKCk7XHJcblxyXG4vLyBjb25zdCBidWlsZEdyYXBoID0gKGRhdGEpID0+IHtcclxuLy8gICBjb25zdCBjdHggPSBnZXRFbCgnbXlDaGFydCcpO1xyXG4vLyAgIG5ldyBDaGFydChjdHgsIHtcclxuLy8gICAgIGRhdGE6IHtcclxuLy8gICAgICAgbGFiZWxzOiBnZXRMYWJlbHMoZGF0YSksXHJcbi8vICAgICAgIGRhdGFzZXRzOiBnZXREYXRhc2V0cyhkYXRhLCBjdHgpLFxyXG4vLyAgICAgfSxcclxuLy8gICAgIG9wdGlvbnM6IGdldE9wdGlvbnMoKSxcclxuLy8gICB9KTtcclxuLy8gfTtcclxuXHJcbi8vIGNvbnN0IGdldERhdGFzZXRzID0gKGRhdGEpID0+IHtcclxuLy8gICBjb25zdCBkYXRhc2V0cyA9IFtcclxuLy8gICAgIHtcclxuLy8gICAgICAgdHlwZTogJ2JhcicsXHJcbi8vICAgICAgIC8vIGxhYmVsOiAnIyBvZiBWb3RlcycsXHJcbi8vICAgICAgIGRhdGE6IGRhdGEucHJlY2lwaXRhdGlvbixcclxuLy8gICAgICAgYmFja2dyb3VuZENvbG9yOiBbJ3JnYmEoNTQsIDE2MiwgMjM1LCAwLjIpJ10sXHJcbi8vICAgICAgIGJvcmRlckNvbG9yOiBbJ3JnYmEoNTQsIDE2MiwgMjM1LCAxKSddLFxyXG4vLyAgICAgICBib3JkZXJXaWR0aDogMSxcclxuLy8gICAgICAgeUF4aXNJRDogJ3kyJyxcclxuLy8gICAgIH0sXHJcbi8vICAgICB7XHJcbi8vICAgICAgIHR5cGU6ICdsaW5lJyxcclxuLy8gICAgICAgdGVuc2lvbjogMC40LFxyXG4vLyAgICAgICBmaWxsOiB0cnVlLFxyXG4vLyAgICAgICAvLyBsYWJlbDogJyMgb2YgVm90ZXMnLFxyXG4vLyAgICAgICBkYXRhOiBkYXRhLnRlbXBzLFxyXG4vLyAgICAgICAvLyBiYWNrZ3JvdW5kQ29sb3I6IFsncmdiYSg1NCwgMTYyLCAyMzUsIDAuMiknXSxcclxuLy8gICAgICAgLy8gYm9yZGVyQ29sb3I6IFsncmdiYSg1NCwgMTYyLCAyMzUsIDEpJ10sXHJcbi8vICAgICAgIGJvcmRlcldpZHRoOiAxLFxyXG4vLyAgICAgICB5QXhpc0lEOiAneScsXHJcbi8vICAgICAgIHNlZ21lbnQ6IHtcclxuLy8gICAgICAgICBib3JkZXJDb2xvcjogKGN0eCkgPT4gKGN0eC5wMC5wYXJzZWQueSA+IDAgPyAncmVkJyA6ICdibHVlJyksXHJcbi8vICAgICAgICAgYmFja2dyb3VuZENvbG9yOiAoY3R4KSA9PiAoY3R4LnAwLnBhcnNlZC55ID4gMCA/ICdyZWQnIDogJ2JsdWUnKSxcclxuLy8gICAgICAgfSxcclxuLy8gICAgIH0sXHJcbi8vICAgXTtcclxuLy8gICByZXR1cm4gZGF0YXNldHM7XHJcbi8vIH07XHJcblxyXG4vLyBjb25zdCBnZXRFbCA9IChzdHIpID0+IHtcclxuLy8gICByZXR1cm4gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoYCR7c3RyfWApO1xyXG4vLyB9O1xyXG5cclxuLy8gY29uc3QgZ2V0TGFiZWxzID0gKGRhdGEpID0+IHtcclxuLy8gICByZXR1cm4gZGF0YS5ob3VycztcclxuLy8gfTtcclxuXHJcbi8vIGNvbnN0IGdldE9wdGlvbnMgPSAoKSA9PiB7XHJcbi8vICAgY29uc3Qgb3B0aW9ucyA9IHtcclxuLy8gICAgIHJlc3BvbnNpdmU6IHRydWUsXHJcbi8vICAgICBwbHVnaW5zOiB7IGxlZ2VuZDogeyBkaXNwbGF5OiBmYWxzZSB9IH0sXHJcbi8vICAgICBzY2FsZXM6IHtcclxuLy8gICAgICAgeToge1xyXG4vLyAgICAgICAgIG1pbjogLTE1LFxyXG4vLyAgICAgICAgIG1heDogMzUsXHJcbi8vICAgICAgICAgdHlwZTogJ2xpbmVhcicsXHJcbi8vICAgICAgICAgcG9zaXRpb246ICdsZWZ0JyxcclxuLy8gICAgICAgICB0aWNrczoge1xyXG4vLyAgICAgICAgICAgY29sb3I6ICdibGFjaycsXHJcbi8vICAgICAgICAgICBiZWdpbkF0WmVybzogdHJ1ZSxcclxuLy8gICAgICAgICB9LFxyXG4vLyAgICAgICB9LFxyXG4vLyAgICAgICB5Mjoge1xyXG4vLyAgICAgICAgIG1heDogMjAsXHJcbi8vICAgICAgICAgdHlwZTogJ2xpbmVhcicsXHJcbi8vICAgICAgICAgcG9zaXRpb246ICdyaWdodCcsXHJcbi8vICAgICAgICAgLy8gcmV2ZXJzZTogdHJ1ZSxcclxuLy8gICAgICAgICB0aWNrczoge1xyXG4vLyAgICAgICAgICAgY29sb3I6ICdibHVlJyxcclxuLy8gICAgICAgICB9LFxyXG4vLyAgICAgICAgIGdyaWQ6IHtcclxuLy8gICAgICAgICAgIGRyYXdPbkNoYXJ0QXJlYTogZmFsc2UsXHJcbi8vICAgICAgICAgfSxcclxuLy8gICAgICAgfSxcclxuLy8gICAgIH0sXHJcbi8vICAgfTtcclxuLy8gICByZXR1cm4gb3B0aW9ucztcclxuLy8gfTtcclxuXHJcbi8vIGNvbnN0IGZldGNoSnNvbiA9IGFzeW5jICgpID0+IHtcclxuLy8gICAvLyAgIGNvbnN0IGFyciA9IFtdO1xyXG4vLyAgIC8vICAgY29uc29sZS5sb2coaCk7XHJcbi8vICAgLy8gICBjb25zdCByZXMgPSBhd2FpdCBmZXRjaChcclxuLy8gICAvLyAgICAgJyBodHRwczovL29wZW5kYXRhLWRvd25sb2FkLW1ldGZjc3Quc21oaS5zZS9hcGkvY2F0ZWdvcnkvcG1wM2cvdmVyc2lvbi8yL2dlb3R5cGUvcG9pbnQvbG9uLzE3LjYzMjAvbGF0LzU5Ljg0NzEvZGF0YS5qc29uJyxcclxuLy8gICAvLyAgICAgeyBtb2RlOiAnY29ycycgfVxyXG4vLyAgIC8vICAgKTtcclxuLy8gICAvLyAgIGNvbnNvbGUubG9nKHJlcyk7XHJcbi8vICAgLy8gICBjb25zdCBqc29uID0gYXdhaXQgcmVzLmpzb24oKTtcclxuLy8gICBjb25zdCBqc29uID0gcmVxdWlyZSgnLi9kYXRhMi5qc29uJyk7XHJcbi8vICAgcmV0dXJuIGpzb247XHJcbi8vIH07XHJcblxyXG4vLyBjb25zdCBnZXREYXRhID0gKGpzb24pID0+IHtcclxuLy8gICBjb25zb2xlLmxvZyhqc29uKTtcclxuLy8gICBjb25zdCB0ZW1wcyA9IFtdO1xyXG4vLyAgIGNvbnN0IHByZWNpcGl0YXRpb24gPSBbXTtcclxuLy8gICBjb25zdCBob3VycyA9IFtdO1xyXG4vLyAgIGxldCBoID0gcGFyc2VJbnQoanNvbi5wcm9wZXJ0aWVzLnRpbWVzZXJpZXNbMF0udGltZS5zbGljZSgxMSwgMTMpKSArIDE7XHJcblxyXG4vLyAgIGZvciAobGV0IGkgPSAwOyBpIDwgMTI7IGkrKykge1xyXG4vLyAgICAgdGVtcHMucHVzaChcclxuLy8gICAgICAganNvbi5wcm9wZXJ0aWVzLnRpbWVzZXJpZXNbaV0uZGF0YS5pbnN0YW50LmRldGFpbHMuYWlyX3RlbXBlcmF0dXJlXHJcbi8vICAgICApO1xyXG4vLyAgICAgcHJlY2lwaXRhdGlvbi5wdXNoKFxyXG4vLyAgICAgICBqc29uLnByb3BlcnRpZXMudGltZXNlcmllc1tpXS5kYXRhLm5leHRfMV9ob3Vycy5kZXRhaWxzXHJcbi8vICAgICAgICAgLnByZWNpcGl0YXRpb25fYW1vdW50XHJcbi8vICAgICApO1xyXG4vLyAgICAgaG91cnMucHVzaCgoaCArIGkpICUgMjQpO1xyXG4vLyAgICAgLy8gYXJyLnB1c2goe1xyXG4vLyAgICAgLy8gICB4OiBqc29uLnByb3BlcnRpZXMudGltZXNlcmllc1tpXS5kYXRhLmluc3RhbnQuZGV0YWlscy5haXJfdGVtcGVyYXR1cmUsXHJcbi8vICAgICAvLyAgIHk6IChoICsgaSkgJSAyNCxcclxuLy8gICAgIC8vIH0pO1xyXG4vLyAgIH1cclxuLy8gICAvLyAgIGNvbnNvbGUubG9nKGFpclRlbXApO1xyXG4vLyAgIC8vICAgY29uc29sZS5sb2coaG91cnMpO1xyXG4vLyAgIC8vIGNvbnNvbGUubG9nKGFycik7XHJcbi8vICAgcmV0dXJuIHsgdGVtcHMsIHByZWNpcGl0YXRpb24sIGhvdXJzIH07XHJcbi8vIH07XHJcblxyXG4vLyBjb25zdCBtYWluID0gYXN5bmMgKCkgPT4ge1xyXG4vLyAgIGNvbnN0IGpzb24gPSBhd2FpdCBmZXRjaEpzb24oKTtcclxuLy8gICBjb25zdCBkYXRhID0gZ2V0RGF0YShqc29uKTtcclxuLy8gICBidWlsZEdyYXBoKGRhdGEpO1xyXG4vLyB9O1xyXG5cclxuLy8gbWFpbigpO1xyXG5cclxuLy8gY29uc3QgZmV0Y2hKc29uID0gYXN5bmMgKCkgPT4ge1xyXG4vLyAgIHRyeSB7XHJcbi8vICAgICBjb25zdCB1cmwgPSBgaHR0cDovL2FwaS50ZW1wZXJhdHVyLm51L3RudV8xLjE2Yi5waHA/bGF0PTU4LjM3Njc2MSZsb249MTUuNTYyOTE2Jm51bT0yJmdyYXBoJmNsaT10ZXN0X2FwcDJgO1xyXG4vLyAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaCh1cmwsIHsgbW9kZTogJ2NvcnMnIH0pO1xyXG4vLyAgICAgY29uc3QgZGF0YSA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKTtcclxuLy8gICAgIGNvbnN0IHsgc3RhdGlvbnMgfSA9IGRhdGE7XHJcblxyXG4vLyAgICAgY29uc29sZS5sb2coZGF0YSk7XHJcbi8vICAgICBjb25zb2xlLmxvZyhzdGF0aW9ucyk7XHJcbi8vICAgICBjb25zb2xlLmxvZyhPYmplY3Qua2V5cyhkYXRhKSk7XHJcbi8vICAgICBjb25zb2xlLmxvZyhPYmplY3QuZW50cmllcyhzdGF0aW9ucykpO1xyXG4vLyAgICAgY29uc29sZS5sb2coT2JqZWN0LnZhbHVlcyhzdGF0aW9ucykpO1xyXG4vLyAgICAgY29uc29sZS5sb2coT2JqZWN0LnZhbHVlcyhzdGF0aW9ucylbMF0pO1xyXG4vLyAgICAgY29uc29sZS5sb2coT2JqZWN0LnZhbHVlcyhzdGF0aW9ucylbMF0udGVtcCk7XHJcbi8vICAgICBjb25zb2xlLmxvZyhkYXRhKTtcclxuLy8gICAgIGNvbnNvbGUubG9nKE9iamVjdC52YWx1ZXMoZGF0YSkpO1xyXG4vLyAgICAgY29uc29sZS5sb2coT2JqZWN0LnZhbHVlcyhkYXRhKVsyXSk7XHJcbi8vICAgICAvLyBjb25zb2xlLmxvZyhPYmplY3Qua2V5cyhkYXRhKSk7XHJcbi8vICAgfSBjYXRjaCAoZXJyKSB7XHJcbi8vICAgICBjb25zb2xlLmxvZyhlcnIpO1xyXG4vLyAgIH1cclxuLy8gfTtcclxuLy8gZmV0Y2hKc29uKCk7XHJcbiJdLCJuYW1lcyI6WyJfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18iLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJjYWNoZWRNb2R1bGUiLCJ1bmRlZmluZWQiLCJleHBvcnRzIiwibW9kdWxlIiwiX193ZWJwYWNrX21vZHVsZXNfXyIsImciLCJnbG9iYWxUaGlzIiwidGhpcyIsIkZ1bmN0aW9uIiwiZSIsIndpbmRvdyIsInNjcmlwdFVybCIsImltcG9ydFNjcmlwdHMiLCJsb2NhdGlvbiIsImRvY3VtZW50IiwiY3VycmVudFNjcmlwdCIsInNyYyIsInNjcmlwdHMiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsImxlbmd0aCIsIkVycm9yIiwicmVwbGFjZSIsInAiLCJyZXF1ZXN0QW5pbUZyYW1lIiwiY2FsbGJhY2siLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJ0aHJvdHRsZWQiLCJmbiIsInRoaXNBcmciLCJ1cGRhdGVGbiIsInVwZGF0ZUFyZ3MiLCJhcmdzIiwiQXJyYXkiLCJwcm90b3R5cGUiLCJzbGljZSIsImNhbGwiLCJ0aWNraW5nIiwicmVzdCIsImFwcGx5IiwiX3RvTGVmdFJpZ2h0Q2VudGVyIiwiYWxpZ24iLCJfYWxpZ25TdGFydEVuZCIsInN0YXJ0IiwiZW5kIiwibm9vcCIsInVpZCIsImlkIiwiaXNOdWxsT3JVbmRlZiIsInZhbHVlIiwiaXNBcnJheSIsInR5cGUiLCJPYmplY3QiLCJ0b1N0cmluZyIsInN1YnN0ciIsImlzT2JqZWN0IiwiaXNOdW1iZXJGaW5pdGUiLCJOdW1iZXIiLCJpc0Zpbml0ZSIsImZpbml0ZU9yRGVmYXVsdCIsImRlZmF1bHRWYWx1ZSIsInZhbHVlT3JEZWZhdWx0IiwidG9EaW1lbnNpb24iLCJkaW1lbnNpb24iLCJlbmRzV2l0aCIsInBhcnNlRmxvYXQiLCJlYWNoIiwibG9vcGFibGUiLCJyZXZlcnNlIiwiaSIsImxlbiIsImtleXMiLCJfZWxlbWVudHNFcXVhbCIsImEwIiwiYTEiLCJpbGVuIiwidjAiLCJ2MSIsImRhdGFzZXRJbmRleCIsImluZGV4IiwiY2xvbmUkMSIsInNvdXJjZSIsIm1hcCIsInRhcmdldCIsImNyZWF0ZSIsImtsZW4iLCJrIiwiaXNWYWxpZEtleSIsImtleSIsImluZGV4T2YiLCJfbWVyZ2VyIiwib3B0aW9ucyIsInR2YWwiLCJzdmFsIiwibWVyZ2UiLCJzb3VyY2VzIiwibWVyZ2VyIiwibWVyZ2VJZiIsIl9tZXJnZXJJZiIsImhhc093blByb3BlcnR5IiwiaW5kZXhPZkRvdE9yTGVuZ3RoIiwiaWR4IiwicmVzb2x2ZU9iamVjdEtleSIsIm9iaiIsInBvcyIsIl9jYXBpdGFsaXplIiwic3RyIiwiY2hhckF0IiwidG9VcHBlckNhc2UiLCJkZWZpbmVkIiwiaXNGdW5jdGlvbiIsInNldHNFcXVhbCIsImEiLCJiIiwic2l6ZSIsIml0ZW0iLCJoYXMiLCJQSSIsIk1hdGgiLCJUQVUiLCJQSVRBVSIsIklORklOSVRZIiwiUE9TSVRJVkVfSU5GSU5JVFkiLCJSQURfUEVSX0RFRyIsIkhBTEZfUEkiLCJRVUFSVEVSX1BJIiwiVFdPX1RISVJEU19QSSIsImxvZzEwIiwic2lnbiIsIm5pY2VOdW0iLCJyYW5nZSIsInJvdW5kZWRSYW5nZSIsInJvdW5kIiwiYWxtb3N0RXF1YWxzIiwibmljZVJhbmdlIiwicG93IiwiZmxvb3IiLCJmcmFjdGlvbiIsImlzTnVtYmVyIiwibiIsImlzTmFOIiwieCIsInkiLCJlcHNpbG9uIiwiYWJzIiwiX3NldE1pbkFuZE1heEJ5S2V5IiwiYXJyYXkiLCJwcm9wZXJ0eSIsIm1pbiIsIm1heCIsInRvUmFkaWFucyIsImRlZ3JlZXMiLCJ0b0RlZ3JlZXMiLCJyYWRpYW5zIiwiX2RlY2ltYWxQbGFjZXMiLCJnZXRBbmdsZUZyb21Qb2ludCIsImNlbnRyZVBvaW50IiwiYW5nbGVQb2ludCIsImRpc3RhbmNlRnJvbVhDZW50ZXIiLCJkaXN0YW5jZUZyb21ZQ2VudGVyIiwicmFkaWFsRGlzdGFuY2VGcm9tQ2VudGVyIiwic3FydCIsImFuZ2xlIiwiYXRhbjIiLCJkaXN0YW5jZSIsImRpc3RhbmNlQmV0d2VlblBvaW50cyIsInB0MSIsInB0MiIsIl9hbmdsZURpZmYiLCJfbm9ybWFsaXplQW5nbGUiLCJfYW5nbGVCZXR3ZWVuIiwic2FtZUFuZ2xlSXNGdWxsQ2lyY2xlIiwicyIsImFuZ2xlVG9TdGFydCIsImFuZ2xlVG9FbmQiLCJzdGFydFRvQW5nbGUiLCJlbmRUb0FuZ2xlIiwiX2xpbWl0VmFsdWUiLCJfaXNCZXR3ZWVuIiwiYXRFZGdlIiwidCIsImVsYXN0aWNJbiIsInNpbiIsImVsYXN0aWNPdXQiLCJlZmZlY3RzIiwibGluZWFyIiwiZWFzZUluUXVhZCIsImVhc2VPdXRRdWFkIiwiZWFzZUluT3V0UXVhZCIsImVhc2VJbkN1YmljIiwiZWFzZU91dEN1YmljIiwiZWFzZUluT3V0Q3ViaWMiLCJlYXNlSW5RdWFydCIsImVhc2VPdXRRdWFydCIsImVhc2VJbk91dFF1YXJ0IiwiZWFzZUluUXVpbnQiLCJlYXNlT3V0UXVpbnQiLCJlYXNlSW5PdXRRdWludCIsImVhc2VJblNpbmUiLCJjb3MiLCJlYXNlT3V0U2luZSIsImVhc2VJbk91dFNpbmUiLCJlYXNlSW5FeHBvIiwiZWFzZU91dEV4cG8iLCJlYXNlSW5PdXRFeHBvIiwiZWFzZUluQ2lyYyIsImVhc2VPdXRDaXJjIiwiZWFzZUluT3V0Q2lyYyIsImVhc2VJbkVsYXN0aWMiLCJlYXNlT3V0RWxhc3RpYyIsImVhc2VJbk91dEVsYXN0aWMiLCJlYXNlSW5CYWNrIiwiZWFzZU91dEJhY2siLCJlYXNlSW5PdXRCYWNrIiwiZWFzZUluQm91bmNlIiwiZWFzZU91dEJvdW5jZSIsIm0iLCJkIiwiZWFzZUluT3V0Qm91bmNlIiwiQSIsIkIiLCJDIiwiRCIsIkUiLCJGIiwiYyIsImYiLCJoZXgiLCJoMSIsImgyIiwiZXEiLCJ2IiwibGltIiwibCIsImgiLCJwMmIiLCJuMmIiLCJiMm4iLCJuMnAiLCJSR0JfUkUiLCJIVUVfUkUiLCJoc2wycmdibiIsImhzdjJyZ2JuIiwiaHdiMnJnYm4iLCJ3IiwicmdiIiwicmdiMmhzbCIsInIiLCJjYWxsbiIsImhzbDJyZ2IiLCJodWUiLCJtYXAkMSIsIloiLCJZIiwiWCIsIlciLCJWIiwiVSIsIlQiLCJTIiwiUiIsIlEiLCJQIiwiTyIsIk4iLCJNIiwiTCIsIksiLCJHIiwiSCIsIkkiLCJKIiwibmFtZXMiLCJPaWNlWGUiLCJhbnRpcXVld0V0ZSIsImFxdWEiLCJhcXVhbWFyUmUiLCJhenVZIiwiYmVpZ2UiLCJiaXNxdWUiLCJibGFjayIsImJsYW5LZWRPbW9uZCIsIlhlIiwiWGV2aVRldCIsImJQd24iLCJidXJseXdvb2QiLCJjYU10WGUiLCJLYXJ0WXVzZSIsIktvY1RhdGUiLCJjU08iLCJjU25mbG93ZXJYZSIsImNTbnNpbGsiLCJjcmltc29uIiwiY3lhbiIsInhYZSIsInhjeWFuIiwieGdUTW5QZCIsInhXYXkiLCJ4Z1lGIiwieGdZeSIsInhraGFraSIsInhtYWdGdGEiLCJ4VGl2ZWdZRiIsInhTYW5nZSIsInhTY0VkIiwieFlkIiwieHNPbW9uIiwieHNIZ1lGIiwieFVYZSIsInhVV2F5IiwieFVnWXkiLCJ4UWUiLCJ4dmlUZXQiLCJkQXBwUmsiLCJkQXBza3lYZSIsImRpbVdheSIsImRpbWdZeSIsImRvZGdlclhlIiwiZmlZYnJpY2siLCJmbFNPd0V0ZSIsImZvWXN0V0FuIiwiZnVLc2lhIiwiZ2FSc2JTbyIsImdob3N0d0V0ZSIsImdUZCIsImdUTW5QZCIsIldheSIsImdZRiIsImdZRkx3IiwiZ1l5IiwiaG9uZXlNdyIsImhvdHBSayIsIlJkaWFuWWQiLCJSZGlnbyIsIml2U3kiLCJraGFraSIsImxhdkZNciIsImxhdkZNclhzaCIsImxhd25nWUYiLCJObW9uY0VmZm9uIiwiWlhlIiwiWmNTTyIsIlpjeWFuIiwiWmdUTW5QZEx3IiwiWldheSIsIlpnWUYiLCJaZ1l5IiwiWnBSayIsIlpzT21vbiIsIlpzSGdZRiIsIlpza3lYZSIsIlpVV2F5IiwiWlVnWXkiLCJac3RBbFhlIiwiWkx3IiwibGltZSIsImxpbWVnWUYiLCJsUkYiLCJtYWdGdGEiLCJtYVBvbiIsIlZhcXVhbWFyUmUiLCJWWGUiLCJWU2NFZCIsIlZwdXJwTiIsIlZzSGdZRiIsIlZVWGUiLCJWc3ByUmdnWUYiLCJWUWUiLCJWdmlUZXRZZCIsIm1pZG5pZ2h0WGUiLCJtUnRjWWFtIiwibWlzdHlQc2UiLCJtb2NjYXNSIiwibmF2YWpvd0V0ZSIsIm5hdnkiLCJUZGxhY2UiLCJUaXZlIiwiVGl2ZWRCYiIsIlNhbmdlIiwiU2FuZ2VZZCIsIlNjRWQiLCJwT2VnVE1uUGQiLCJwT2VnWUYiLCJwT2VRZSIsInBPZXZpVGV0WWQiLCJwYXBheWF3RXAiLCJwSEtwdWZmIiwicGVydSIsInBSayIsInBsdW0iLCJwb3dNclhlIiwicHVycE4iLCJZYmVjY2FwdXJwTiIsIllkIiwiUHN5YnJvd24iLCJQeU9YZSIsInNhZGROYlB3biIsInNPbW9uIiwic2FuZHliUHduIiwic0hnWUYiLCJzSHNoZWxsIiwic2lGbmEiLCJzaWx2ZXIiLCJza3lYZSIsIlVYZSIsIlVXYXkiLCJVZ1l5Iiwic25vdyIsInNwclJnZ1lGIiwic3RBbFhlIiwidGFuIiwidGVPIiwidEVzdE4iLCJ0b21hdG8iLCJRZSIsInZpVGV0IiwiSkh0Iiwid0V0ZSIsIndFdGVzbW9rZSIsIkx3IiwiTHdnWUYiLCJuYW1lcyQxIiwibW9kSFNMIiwicmF0aW8iLCJ0bXAiLCJjbG9uZSIsInByb3RvIiwiYXNzaWduIiwiZnJvbU9iamVjdCIsImlucHV0IiwiZnVuY3Rpb25QYXJzZSIsImV4ZWMiLCJyZ2JQYXJzZSIsInAxIiwicDIiLCJod2IycmdiIiwiaHN2MnJnYiIsImh1ZVBhcnNlIiwiQ29sb3IiLCJjb25zdHJ1Y3RvciIsInJldCIsInVucGFja2VkIiwidGtleXMiLCJqIiwib2siLCJuayIsInBhcnNlSW50IiwidW5wYWNrIiwidHJhbnNwYXJlbnQiLCJ0b0xvd2VyQ2FzZSIsIm5hbWVQYXJzZSIsIl9yZ2IiLCJfdmFsaWQiLCJ2YWxpZCIsInJnYlN0cmluZyIsImhleFN0cmluZyIsImlzU2hvcnQiLCJoc2xTdHJpbmciLCJtaXgiLCJjb2xvciIsIndlaWdodCIsIm1lIiwiYzEiLCJjMiIsIncyIiwidzEiLCJhbHBoYSIsImNsZWFyZXIiLCJncmV5c2NhbGUiLCJ2YWwiLCJvcGFxdWVyIiwibmVnYXRlIiwibGlnaHRlbiIsImRhcmtlbiIsInNhdHVyYXRlIiwiZGVzYXR1cmF0ZSIsInJvdGF0ZSIsImRlZyIsImluZGV4X2VzbSIsImlzUGF0dGVybk9yR3JhZGllbnQiLCJDYW52YXNHcmFkaWVudCIsIkNhbnZhc1BhdHRlcm4iLCJnZXRIb3ZlckNvbG9yIiwib3ZlcnJpZGVzIiwiZGVzY3JpcHRvcnMiLCJnZXRTY29wZSQxIiwibm9kZSIsInNwbGl0Iiwic2V0Iiwicm9vdCIsInNjb3BlIiwidmFsdWVzIiwiZGVmYXVsdHMiLCJfZGVzY3JpcHRvcnMiLCJhbmltYXRpb24iLCJiYWNrZ3JvdW5kQ29sb3IiLCJib3JkZXJDb2xvciIsImRhdGFzZXRzIiwiZGV2aWNlUGl4ZWxSYXRpbyIsImNvbnRleHQiLCJjaGFydCIsInBsYXRmb3JtIiwiZ2V0RGV2aWNlUGl4ZWxSYXRpbyIsImVsZW1lbnRzIiwiZXZlbnRzIiwiZm9udCIsImZhbWlseSIsInN0eWxlIiwibGluZUhlaWdodCIsImhvdmVyIiwiaG92ZXJCYWNrZ3JvdW5kQ29sb3IiLCJjdHgiLCJob3ZlckJvcmRlckNvbG9yIiwiaG92ZXJDb2xvciIsImluZGV4QXhpcyIsImludGVyYWN0aW9uIiwibW9kZSIsImludGVyc2VjdCIsIm1haW50YWluQXNwZWN0UmF0aW8iLCJvbkhvdmVyIiwib25DbGljayIsInBhcnNpbmciLCJwbHVnaW5zIiwicmVzcG9uc2l2ZSIsInNjYWxlIiwic2NhbGVzIiwic2hvd0xpbmUiLCJkcmF3QWN0aXZlRWxlbWVudHNPblRvcCIsImRlc2NyaWJlIiwiZ2V0Iiwib3ZlcnJpZGUiLCJyb3V0ZSIsIm5hbWUiLCJ0YXJnZXRTY29wZSIsInRhcmdldE5hbWUiLCJzY29wZU9iamVjdCIsInRhcmdldFNjb3BlT2JqZWN0IiwicHJpdmF0ZU5hbWUiLCJkZWZpbmVQcm9wZXJ0aWVzIiwid3JpdGFibGUiLCJlbnVtZXJhYmxlIiwibG9jYWwiLCJfc2NyaXB0YWJsZSIsInN0YXJ0c1dpdGgiLCJfaW5kZXhhYmxlIiwiX2ZhbGxiYWNrIiwiX21lYXN1cmVUZXh0IiwiZGF0YSIsImdjIiwibG9uZ2VzdCIsInN0cmluZyIsInRleHRXaWR0aCIsIm1lYXN1cmVUZXh0Iiwid2lkdGgiLCJwdXNoIiwiX2xvbmdlc3RUZXh0IiwiYXJyYXlPZlRoaW5ncyIsImNhY2hlIiwiZ2FyYmFnZUNvbGxlY3QiLCJzYXZlIiwiamxlbiIsInRoaW5nIiwibmVzdGVkVGhpbmciLCJyZXN0b3JlIiwiZ2NMZW4iLCJzcGxpY2UiLCJfYWxpZ25QaXhlbCIsInBpeGVsIiwiY3VycmVudERldmljZVBpeGVsUmF0aW8iLCJoYWxmV2lkdGgiLCJjbGVhckNhbnZhcyIsImNhbnZhcyIsImdldENvbnRleHQiLCJyZXNldFRyYW5zZm9ybSIsImNsZWFyUmVjdCIsImhlaWdodCIsImRyYXdQb2ludCIsInhPZmZzZXQiLCJ5T2Zmc2V0IiwiY29ybmVyUmFkaXVzIiwicG9pbnRTdHlsZSIsInJvdGF0aW9uIiwicmFkaXVzIiwicmFkIiwidHJhbnNsYXRlIiwiZHJhd0ltYWdlIiwiYmVnaW5QYXRoIiwiYXJjIiwiY2xvc2VQYXRoIiwibW92ZVRvIiwibGluZVRvIiwiU1FSVDFfMiIsInJlY3QiLCJmaWxsIiwiYm9yZGVyV2lkdGgiLCJzdHJva2UiLCJfaXNQb2ludEluQXJlYSIsInBvaW50IiwiYXJlYSIsIm1hcmdpbiIsImxlZnQiLCJyaWdodCIsInRvcCIsImJvdHRvbSIsImNsaXBBcmVhIiwiY2xpcCIsInVuY2xpcEFyZWEiLCJfc3RlcHBlZExpbmVUbyIsInByZXZpb3VzIiwiZmxpcCIsIm1pZHBvaW50IiwiX2JlemllckN1cnZlVG8iLCJiZXppZXJDdXJ2ZVRvIiwiY3AxeCIsImNwMngiLCJjcDF5IiwiY3AyeSIsInJlbmRlclRleHQiLCJ0ZXh0Iiwib3B0cyIsImxpbmVzIiwic3Ryb2tlV2lkdGgiLCJzdHJva2VDb2xvciIsImxpbmUiLCJ0cmFuc2xhdGlvbiIsImZpbGxTdHlsZSIsInRleHRBbGlnbiIsInRleHRCYXNlbGluZSIsInNldFJlbmRlck9wdHMiLCJzdHJva2VTdHlsZSIsImxpbmVXaWR0aCIsInN0cm9rZVRleHQiLCJtYXhXaWR0aCIsImZpbGxUZXh0IiwiZGVjb3JhdGVUZXh0Iiwic3RyaWtldGhyb3VnaCIsInVuZGVybGluZSIsIm1ldHJpY3MiLCJhY3R1YWxCb3VuZGluZ0JveExlZnQiLCJhY3R1YWxCb3VuZGluZ0JveFJpZ2h0IiwiYWN0dWFsQm91bmRpbmdCb3hBc2NlbnQiLCJhY3R1YWxCb3VuZGluZ0JveERlc2NlbnQiLCJ5RGVjb3JhdGlvbiIsImRlY29yYXRpb25XaWR0aCIsImFkZFJvdW5kZWRSZWN0UGF0aCIsInRvcExlZnQiLCJib3R0b21MZWZ0IiwiYm90dG9tUmlnaHQiLCJ0b3BSaWdodCIsIkxJTkVfSEVJR0hUIiwiUmVnRXhwIiwiRk9OVF9TVFlMRSIsInRvTGluZUhlaWdodCIsIm1hdGNoZXMiLCJtYXRjaCIsIl9yZWFkVmFsdWVUb1Byb3BzIiwicHJvcHMiLCJvYmpQcm9wcyIsInJlYWQiLCJwcm9wIiwidG9UUkJMIiwidG9UUkJMQ29ybmVycyIsInRvUGFkZGluZyIsInRvRm9udCIsImZhbGxiYWNrIiwiY29uc29sZSIsIndhcm4iLCJ0b0ZvbnRTdHJpbmciLCJyZXNvbHZlIiwiaW5wdXRzIiwiaW5mbyIsImNhY2hlYWJsZSIsImNyZWF0ZUNvbnRleHQiLCJwYXJlbnRDb250ZXh0IiwiX2xvb2t1cCIsInRhYmxlIiwiY21wIiwibWlkIiwiaGkiLCJsbyIsIl9sb29rdXBCeUtleSIsIl9ybG9va3VwQnlLZXkiLCJhcnJheUV2ZW50cyIsInVubGlzdGVuQXJyYXlFdmVudHMiLCJsaXN0ZW5lciIsInN0dWIiLCJfY2hhcnRqcyIsImxpc3RlbmVycyIsImZvckVhY2giLCJfYXJyYXlVbmlxdWUiLCJpdGVtcyIsIlNldCIsImFkZCIsImZyb20iLCJfY3JlYXRlUmVzb2x2ZXIiLCJzY29wZXMiLCJwcmVmaXhlcyIsInJvb3RTY29wZXMiLCJnZXRUYXJnZXQiLCJfcmVzb2x2ZSIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwiX2NhY2hlYWJsZSIsIl9zY29wZXMiLCJfcm9vdFNjb3BlcyIsIl9nZXRUYXJnZXQiLCJQcm94eSIsImRlbGV0ZVByb3BlcnR5IiwiX2tleXMiLCJfY2FjaGVkIiwicHJveHkiLCJwcmVmaXgiLCJyZWFkS2V5IiwibmVlZHNTdWJSZXNvbHZlciIsImNyZWF0ZVN1YlJlc29sdmVyIiwiX3Jlc29sdmVXaXRoUHJlZml4ZXMiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJSZWZsZWN0IiwiZ2V0UHJvdG90eXBlT2YiLCJnZXRLZXlzRnJvbUFsbFNjb3BlcyIsImluY2x1ZGVzIiwib3duS2V5cyIsInN0b3JhZ2UiLCJfc3RvcmFnZSIsIl9hdHRhY2hDb250ZXh0Iiwic3ViUHJveHkiLCJkZXNjcmlwdG9yRGVmYXVsdHMiLCJfcHJveHkiLCJfY29udGV4dCIsIl9zdWJQcm94eSIsIl9zdGFjayIsInNldENvbnRleHQiLCJyZWNlaXZlciIsImlzU2NyaXB0YWJsZSIsImpvaW4iLCJkZWxldGUiLCJfcmVzb2x2ZVNjcmlwdGFibGUiLCJpc0luZGV4YWJsZSIsImFyciIsImZpbHRlciIsInJlc29sdmVyIiwiX3Jlc29sdmVBcnJheSIsIl9yZXNvbHZlV2l0aENvbnRleHQiLCJhbGxLZXlzIiwiY29uZmlndXJhYmxlIiwic2NyaXB0YWJsZSIsImluZGV4YWJsZSIsIl9hbGxLZXlzIiwicmVzb2x2ZUZhbGxiYWNrIiwiZ2V0U2NvcGUiLCJwYXJlbnQiLCJhZGRTY29wZXMiLCJwYXJlbnRTY29wZXMiLCJwYXJlbnRGYWxsYmFjayIsImFsbFNjb3BlcyIsImFkZFNjb3Blc0Zyb21LZXkiLCJzdWJHZXRUYXJnZXQiLCJyZXNvbHZlS2V5c0Zyb21BbGxTY29wZXMiLCJFUFNJTE9OIiwiZ2V0UG9pbnQiLCJwb2ludHMiLCJza2lwIiwiZ2V0VmFsdWVBeGlzIiwic3BsaW5lQ3VydmUiLCJmaXJzdFBvaW50IiwibWlkZGxlUG9pbnQiLCJhZnRlclBvaW50IiwiY3VycmVudCIsIm5leHQiLCJkMDEiLCJkMTIiLCJzMDEiLCJzMTIiLCJmYSIsImZiIiwiY2FwQ29udHJvbFBvaW50IiwicHQiLCJfdXBkYXRlQmV6aWVyQ29udHJvbFBvaW50cyIsImxvb3AiLCJjb250cm9sUG9pbnRzIiwic3BhbkdhcHMiLCJjdWJpY0ludGVycG9sYXRpb25Nb2RlIiwidmFsdWVBeGlzIiwicG9pbnRzTGVuIiwiZGVsdGFLIiwibUsiLCJwb2ludEJlZm9yZSIsInBvaW50Q3VycmVudCIsInBvaW50QWZ0ZXIiLCJzbG9wZURlbHRhIiwiYWxwaGFLIiwiYmV0YUsiLCJ0YXVLIiwic3F1YXJlZE1hZ25pdHVkZSIsIm1vbm90b25lQWRqdXN0IiwiZGVsdGEiLCJpUGl4ZWwiLCJ2UGl4ZWwiLCJtb25vdG9uZUNvbXB1dGUiLCJzcGxpbmVDdXJ2ZU1vbm90b25lIiwicHJldiIsInRlbnNpb24iLCJjYXBCZXppZXJQb2ludHMiLCJpbkFyZWEiLCJpbkFyZWFQcmV2IiwiaW5BcmVhTmV4dCIsIl9pc0RvbVN1cHBvcnRlZCIsIl9nZXRQYXJlbnROb2RlIiwiZG9tTm9kZSIsInBhcmVudE5vZGUiLCJob3N0IiwicGFyc2VNYXhTdHlsZSIsInN0eWxlVmFsdWUiLCJwYXJlbnRQcm9wZXJ0eSIsInZhbHVlSW5QaXhlbHMiLCJnZXRDb21wdXRlZFN0eWxlIiwiZWxlbWVudCIsInBvc2l0aW9ucyIsImdldFBvc2l0aW9uZWRTdHlsZSIsInN0eWxlcyIsInN1ZmZpeCIsInJlc3VsdCIsImdldFJlbGF0aXZlUG9zaXRpb24iLCJldnQiLCJib3JkZXJCb3giLCJib3hTaXppbmciLCJwYWRkaW5ncyIsImJvcmRlcnMiLCJib3giLCJuYXRpdmUiLCJ0b3VjaGVzIiwib2Zmc2V0WCIsIm9mZnNldFkiLCJzaGFkb3dSb290IiwidXNlT2Zmc2V0UG9zIiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwiY2xpZW50WCIsImNsaWVudFkiLCJnZXRDYW52YXNQb3NpdGlvbiIsInJvdW5kMSIsInJldGluYVNjYWxlIiwiZm9yY2VSYXRpbyIsImZvcmNlU3R5bGUiLCJwaXhlbFJhdGlvIiwiZGV2aWNlSGVpZ2h0IiwiZGV2aWNlV2lkdGgiLCJzZXRUcmFuc2Zvcm0iLCJzdXBwb3J0c0V2ZW50TGlzdGVuZXJPcHRpb25zIiwicGFzc2l2ZVN1cHBvcnRlZCIsInBhc3NpdmUiLCJhZGRFdmVudExpc3RlbmVyIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsInJlYWRVc2VkU2l6ZSIsImVsIiwiZ2V0UHJvcGVydHlWYWx1ZSIsImdldFN0eWxlIiwiX3BvaW50SW5MaW5lIiwiX3N0ZXBwZWRJbnRlcnBvbGF0aW9uIiwiX2JlemllckludGVycG9sYXRpb24iLCJjcDEiLCJjcDIiLCJpbnRsQ2FjaGUiLCJNYXAiLCJmb3JtYXROdW1iZXIiLCJudW0iLCJsb2NhbGUiLCJjYWNoZUtleSIsIkpTT04iLCJzdHJpbmdpZnkiLCJmb3JtYXR0ZXIiLCJJbnRsIiwiTnVtYmVyRm9ybWF0IiwiZ2V0TnVtYmVyRm9ybWF0IiwiZm9ybWF0IiwiZ2V0UnRsQWRhcHRlciIsInJ0bCIsInJlY3RYIiwic2V0V2lkdGgiLCJ4UGx1cyIsImxlZnRGb3JMdHIiLCJpdGVtV2lkdGgiLCJnZXRSaWdodFRvTGVmdEFkYXB0ZXIiLCJfaXRlbVdpZHRoIiwib3ZlcnJpZGVUZXh0RGlyZWN0aW9uIiwiZGlyZWN0aW9uIiwib3JpZ2luYWwiLCJnZXRQcm9wZXJ0eVByaW9yaXR5Iiwic2V0UHJvcGVydHkiLCJwcmV2VGV4dERpcmVjdGlvbiIsInJlc3RvcmVUZXh0RGlyZWN0aW9uIiwicHJvcGVydHlGbiIsImJldHdlZW4iLCJjb21wYXJlIiwibm9ybWFsaXplIiwibm9ybWFsaXplU2VnbWVudCIsImNvdW50IiwiX2JvdW5kU2VnbWVudCIsInNlZ21lbnQiLCJib3VuZHMiLCJzdGFydEJvdW5kIiwiZW5kQm91bmQiLCJnZXRTZWdtZW50IiwicHJldlZhbHVlIiwiaW5zaWRlIiwic3ViU3RhcnQiLCJfYm91bmRTZWdtZW50cyIsInNlZ21lbnRzIiwic3ViIiwicmVhZFN0eWxlIiwiYm9yZGVyQ2FwU3R5bGUiLCJib3JkZXJEYXNoIiwiYm9yZGVyRGFzaE9mZnNldCIsImJvcmRlckpvaW5TdHlsZSIsInN0eWxlQ2hhbmdlZCIsInByZXZTdHlsZSIsImFuaW1hdG9yIiwiX3JlcXVlc3QiLCJfY2hhcnRzIiwiX3J1bm5pbmciLCJfbGFzdERhdGUiLCJfbm90aWZ5IiwiYW5pbXMiLCJkYXRlIiwiY2FsbGJhY2tzIiwibnVtU3RlcHMiLCJkdXJhdGlvbiIsImluaXRpYWwiLCJjdXJyZW50U3RlcCIsIl9yZWZyZXNoIiwiX3VwZGF0ZSIsIkRhdGUiLCJub3ciLCJyZW1haW5pbmciLCJydW5uaW5nIiwiZHJhdyIsIl9hY3RpdmUiLCJfdG90YWwiLCJ0aWNrIiwicG9wIiwiX2dldEFuaW1zIiwiY2hhcnRzIiwiY29tcGxldGUiLCJwcm9ncmVzcyIsImxpc3RlbiIsImV2ZW50IiwiY2IiLCJyZWR1Y2UiLCJhY2MiLCJjdXIiLCJfZHVyYXRpb24iLCJzdG9wIiwiY2FuY2VsIiwicmVtb3ZlIiwiaW50ZXJwb2xhdG9ycyIsImJvb2xlYW4iLCJ0byIsImZhY3RvciIsImMwIiwibnVtYmVyIiwiQW5pbWF0aW9uIiwiY2ZnIiwiY3VycmVudFZhbHVlIiwiX2ZuIiwiX2Vhc2luZyIsImVhc2luZyIsIl9zdGFydCIsImRlbGF5IiwiX2xvb3AiLCJfdGFyZ2V0IiwiX3Byb3AiLCJfZnJvbSIsIl90byIsIl9wcm9taXNlcyIsImFjdGl2ZSIsInVwZGF0ZSIsImVsYXBzZWQiLCJyZW1haW4iLCJ3YWl0IiwicHJvbWlzZXMiLCJQcm9taXNlIiwicmVzIiwicmVqIiwicmVzb2x2ZWQiLCJtZXRob2QiLCJhbmltYXRpb25PcHRpb25zIiwiY29sb3JzIiwicHJvcGVydGllcyIsIm51bWJlcnMiLCJyZXNpemUiLCJzaG93IiwiYW5pbWF0aW9ucyIsInZpc2libGUiLCJoaWRlIiwiQW5pbWF0aW9ucyIsImNvbmZpZyIsIl9jaGFydCIsIl9wcm9wZXJ0aWVzIiwiY29uZmlndXJlIiwiYW5pbWF0ZWRQcm9wcyIsImdldE93blByb3BlcnR5TmFtZXMiLCJvcHRpb24iLCJfYW5pbWF0ZU9wdGlvbnMiLCJuZXdPcHRpb25zIiwiJHNoYXJlZCIsIiRhbmltYXRpb25zIiwicmVzb2x2ZVRhcmdldE9wdGlvbnMiLCJfY3JlYXRlQW5pbWF0aW9ucyIsImFuaW0iLCJhbGwiLCJhd2FpdEFsbCIsInRoZW4iLCJzY2FsZUNsaXAiLCJhbGxvd2VkT3ZlcmZsb3ciLCJnZXRTb3J0ZWREYXRhc2V0SW5kaWNlcyIsImZpbHRlclZpc2libGUiLCJtZXRhc2V0cyIsIl9nZXRTb3J0ZWREYXRhc2V0TWV0YXMiLCJhcHBseVN0YWNrIiwic3RhY2siLCJkc0luZGV4Iiwic2luZ2xlTW9kZSIsIm90aGVyVmFsdWUiLCJpc1N0YWNrZWQiLCJtZXRhIiwic3RhY2tlZCIsImdldE9yQ3JlYXRlU3RhY2siLCJzdGFja3MiLCJzdGFja0tleSIsImluZGV4VmFsdWUiLCJzdWJTdGFjayIsImdldExhc3RJbmRleEluU3RhY2siLCJ2U2NhbGUiLCJwb3NpdGl2ZSIsImdldE1hdGNoaW5nVmlzaWJsZU1ldGFzIiwidXBkYXRlU3RhY2tzIiwiY29udHJvbGxlciIsInBhcnNlZCIsIl9jYWNoZWRNZXRhIiwiX3N0YWNrcyIsImlTY2FsZSIsImlBeGlzIiwiYXhpcyIsInZBeGlzIiwiaW5kZXhTY2FsZSIsInZhbHVlU2NhbGUiLCJnZXRTdGFja0tleSIsIl90b3AiLCJfYm90dG9tIiwiZ2V0Rmlyc3RTY2FsZUlkIiwic2hpZnQiLCJjbGVhclN0YWNrcyIsIl9wYXJzZWQiLCJpc0RpcmVjdFVwZGF0ZU1vZGUiLCJjbG9uZUlmTm90U2hhcmVkIiwiY2FjaGVkIiwic2hhcmVkIiwiRGF0YXNldENvbnRyb2xsZXIiLCJfY3R4IiwiX2NhY2hlZERhdGFPcHRzIiwiZ2V0TWV0YSIsIl90eXBlIiwiX3BhcnNpbmciLCJfZGF0YSIsIl9vYmplY3REYXRhIiwiX3NoYXJlZE9wdGlvbnMiLCJfZHJhd1N0YXJ0IiwiX2RyYXdDb3VudCIsImVuYWJsZU9wdGlvblNoYXJpbmciLCIkY29udGV4dCIsIl9zeW5jTGlzdCIsImluaXRpYWxpemUiLCJsaW5rU2NhbGVzIiwiX3N0YWNrZWQiLCJhZGRFbGVtZW50cyIsInVwZGF0ZUluZGV4IiwiZGF0YXNldCIsImdldERhdGFzZXQiLCJjaG9vc2VJZCIsInhpZCIsInhBeGlzSUQiLCJ5aWQiLCJ5QXhpc0lEIiwicmlkIiwickF4aXNJRCIsImlpZCIsImlBeGlzSUQiLCJ2aWQiLCJ2QXhpc0lEIiwieFNjYWxlIiwiZ2V0U2NhbGVGb3JJZCIsInlTY2FsZSIsInJTY2FsZSIsImdldERhdGFzZXRNZXRhIiwic2NhbGVJRCIsIl9nZXRPdGhlclNjYWxlIiwicmVzZXQiLCJfZGVzdHJveSIsIl9kYXRhQ2hlY2siLCJhZGF0YSIsImNvbnZlcnRPYmplY3REYXRhVG9BcnJheSIsImlzRXh0ZW5zaWJsZSIsImRlZmluZVByb3BlcnR5IiwiYmFzZSIsIm9iamVjdCIsImRhdGFzZXRFbGVtZW50VHlwZSIsImJ1aWxkT3JVcGRhdGVFbGVtZW50cyIsInJlc2V0TmV3RWxlbWVudHMiLCJzdGFja0NoYW5nZWQiLCJvbGRTdGFja2VkIiwiX3Jlc3luY0VsZW1lbnRzIiwic2NvcGVLZXlzIiwiZGF0YXNldFNjb3BlS2V5cyIsImdldE9wdGlvblNjb3BlcyIsImNyZWF0ZVJlc29sdmVyIiwicGFyc2UiLCJzb3J0ZWQiLCJfc29ydGVkIiwicGFyc2VBcnJheURhdGEiLCJwYXJzZU9iamVjdERhdGEiLCJwYXJzZVByaW1pdGl2ZURhdGEiLCJpc05vdEluT3JkZXJDb21wYXJlZFRvUHJldiIsImxhYmVscyIsImdldExhYmVscyIsInNpbmdsZVNjYWxlIiwieEF4aXNLZXkiLCJ5QXhpc0tleSIsImdldFBhcnNlZCIsImdldERhdGFFbGVtZW50IiwidXBkYXRlUmFuZ2VGcm9tUGFyc2VkIiwicGFyc2VkVmFsdWUiLCJOYU4iLCJnZXRNaW5NYXgiLCJjYW5TdGFjayIsIm90aGVyU2NhbGUiLCJoaWRkZW4iLCJjcmVhdGVTdGFjayIsIk5FR0FUSVZFX0lORklOSVRZIiwib3RoZXJNaW4iLCJvdGhlck1heCIsIm1pbkRlZmluZWQiLCJtYXhEZWZpbmVkIiwiZ2V0VXNlckJvdW5kcyIsIl9za2lwIiwiZ2V0QWxsUGFyc2VkVmFsdWVzIiwiZ2V0TWF4T3ZlcmZsb3ciLCJnZXRMYWJlbEFuZFZhbHVlIiwibGFiZWwiLCJnZXRMYWJlbEZvclZhbHVlIiwiX2NsaXAiLCJkaXNhYmxlZCIsInRvQ2xpcCIsImRlZmF1bHRDbGlwIiwiY2hhcnRBcmVhIiwicmVzb2x2ZURhdGFzZXRFbGVtZW50T3B0aW9ucyIsInJlc29sdmVEYXRhRWxlbWVudE9wdGlvbnMiLCJkYXRhSW5kZXgiLCJyYXciLCJjcmVhdGVEYXRhQ29udGV4dCIsImNyZWF0ZURhdGFzZXRDb250ZXh0IiwiX3Jlc29sdmVFbGVtZW50T3B0aW9ucyIsImRhdGFFbGVtZW50VHlwZSIsImVsZW1lbnRUeXBlIiwic2hhcmluZyIsImRhdGFzZXRFbGVtZW50U2NvcGVLZXlzIiwicmVzb2x2ZU5hbWVkT3B0aW9ucyIsImZyZWV6ZSIsIl9yZXNvbHZlQW5pbWF0aW9ucyIsInRyYW5zaXRpb24iLCJkYXRhc2V0QW5pbWF0aW9uU2NvcGVLZXlzIiwiZ2V0U2hhcmVkT3B0aW9ucyIsImluY2x1ZGVPcHRpb25zIiwic2hhcmVkT3B0aW9ucyIsIl9hbmltYXRpb25zRGlzYWJsZWQiLCJ1cGRhdGVFbGVtZW50IiwidXBkYXRlU2hhcmVkT3B0aW9ucyIsIl9zZXRTdHlsZSIsInJlbW92ZUhvdmVyU3R5bGUiLCJzZXRIb3ZlclN0eWxlIiwiX3JlbW92ZURhdGFzZXRIb3ZlclN0eWxlIiwiX3NldERhdGFzZXRIb3ZlclN0eWxlIiwiYXJnMSIsImFyZzIiLCJudW1NZXRhIiwibnVtRGF0YSIsIl9pbnNlcnRFbGVtZW50cyIsIl9yZW1vdmVFbGVtZW50cyIsIm1vdmUiLCJ1cGRhdGVFbGVtZW50cyIsInJlbW92ZWQiLCJfc3luYyIsIl9kYXRhQ2hhbmdlcyIsIl9vbkRhdGFQdXNoIiwiYXJndW1lbnRzIiwiX29uRGF0YVBvcCIsIl9vbkRhdGFTaGlmdCIsIl9vbkRhdGFTcGxpY2UiLCJuZXdDb3VudCIsIl9vbkRhdGFVbnNoaWZ0IiwiY29tcHV0ZU1pblNhbXBsZVNpemUiLCJfY2FjaGUiLCIkYmFyIiwidmlzaWJsZU1ldGFzIiwiY29uY2F0Iiwic29ydCIsImdldEFsbFNjYWxlVmFsdWVzIiwiY3VyciIsIl9sZW5ndGgiLCJ1cGRhdGVNaW5BbmRQcmV2IiwiZ2V0UGl4ZWxGb3JWYWx1ZSIsInRpY2tzIiwiZ2V0UGl4ZWxGb3JUaWNrIiwicGFyc2VWYWx1ZSIsImVudHJ5Iiwic3RhcnRWYWx1ZSIsImVuZFZhbHVlIiwiYmFyU3RhcnQiLCJiYXJFbmQiLCJfY3VzdG9tIiwicGFyc2VGbG9hdEJhciIsInBhcnNlQXJyYXlPclByaW1pdGl2ZSIsImlzRmxvYXRCYXIiLCJjdXN0b20iLCJzZXRCb3JkZXJTa2lwcGVkIiwiZWRnZSIsImJvcmRlclNraXBwZWQiLCJob3Jpem9udGFsIiwiYm9yZGVyUHJvcHMiLCJlbmFibGVCb3JkZXJSYWRpdXMiLCJwYXJzZUVkZ2UiLCJvcmlnIiwidjIiLCJzdGFydEVuZCIsInNldEluZmxhdGVBbW91bnQiLCJpbmZsYXRlQW1vdW50IiwiQmFyQ29udHJvbGxlciIsImlBeGlzS2V5IiwidkF4aXNLZXkiLCJzdXBlciIsImJhcnMiLCJnZXRCYXNlUGl4ZWwiLCJpc0hvcml6b250YWwiLCJydWxlciIsIl9nZXRSdWxlciIsImZpcnN0T3B0cyIsInZwaXhlbHMiLCJoZWFkIiwiX2NhbGN1bGF0ZUJhclZhbHVlUGl4ZWxzIiwiaXBpeGVscyIsIl9jYWxjdWxhdGVCYXJJbmRleFBpeGVscyIsImNlbnRlciIsIl9nZXRTdGFja3MiLCJsYXN0IiwiZ3JvdXBlZCIsIl9nZXRTdGFja0NvdW50IiwiX2dldFN0YWNrSW5kZXgiLCJwaXhlbHMiLCJiYXJUaGlja25lc3MiLCJfc3RhcnRQaXhlbCIsIl9lbmRQaXhlbCIsInN0YWNrQ291bnQiLCJjYXRlZ29yeVBlcmNlbnRhZ2UiLCJiYXJQZXJjZW50YWdlIiwiYmFzZVZhbHVlIiwibWluQmFyTGVuZ3RoIiwiYWN0dWFsQmFzZSIsImZsb2F0aW5nIiwiZ2V0RGF0YVZpc2liaWxpdHkiLCJiYXJTaWduIiwiaGFsZkdyaWQiLCJnZXRMaW5lV2lkdGhGb3JWYWx1ZSIsInNraXBOdWxsIiwibWF4QmFyVGhpY2tuZXNzIiwiSW5maW5pdHkiLCJwZXJjZW50IiwiY2h1bmsiLCJjb21wdXRlRmxleENhdGVnb3J5VHJhaXRzIiwidGhpY2tuZXNzIiwiY29tcHV0ZUZpdENhdGVnb3J5VHJhaXRzIiwic3RhY2tJbmRleCIsInJlY3RzIiwiX2luZGV4XyIsIm9mZnNldCIsImdyaWQiLCJfdmFsdWVfIiwiYmVnaW5BdFplcm8iLCJCdWJibGVDb250cm9sbGVyIiwiZ2V0UGl4ZWxGb3JEZWNpbWFsIiwidG9vbHRpcCIsInRpdGxlIiwiRG91Z2hudXRDb250cm9sbGVyIiwiaW5uZXJSYWRpdXMiLCJvdXRlclJhZGl1cyIsImdldHRlciIsIl9nZXRSb3RhdGlvbiIsIl9nZXRDaXJjdW1mZXJlbmNlIiwiY2lyY3VtZmVyZW5jZSIsIl9nZXRSb3RhdGlvbkV4dGVudHMiLCJpc0RhdGFzZXRWaXNpYmxlIiwiYXJjcyIsInNwYWNpbmciLCJnZXRNYXhCb3JkZXJXaWR0aCIsImdldE1heE9mZnNldCIsIm1heFNpemUiLCJjdXRvdXQiLCJjaGFydFdlaWdodCIsIl9nZXRSaW5nV2VpZ2h0IiwicmF0aW9YIiwicmF0aW9ZIiwic3RhcnRBbmdsZSIsImVuZEFuZ2xlIiwic3RhcnRYIiwic3RhcnRZIiwiZW5kWCIsImVuZFkiLCJjYWxjTWF4IiwiY2FsY01pbiIsIm1heFgiLCJtYXhZIiwibWluWCIsIm1pblkiLCJnZXRSYXRpb0FuZE9mZnNldCIsIm1heEhlaWdodCIsIm1heFJhZGl1cyIsInJhZGl1c0xlbmd0aCIsIl9nZXRWaXNpYmxlRGF0YXNldFdlaWdodFRvdGFsIiwidG90YWwiLCJjYWxjdWxhdGVUb3RhbCIsIl9nZXRSaW5nV2VpZ2h0T2Zmc2V0IiwiX2NpcmN1bWZlcmVuY2UiLCJhbmltYXRlUm90YXRlIiwiY2FsY3VsYXRlQ2lyY3VtZmVyZW5jZSIsImFuaW1hdGlvbk9wdHMiLCJjZW50ZXJYIiwiY2VudGVyWSIsImFuaW1hdGVTY2FsZSIsIm1ldGFEYXRhIiwiYm9yZGVyQWxpZ24iLCJob3ZlckJvcmRlcldpZHRoIiwiaG92ZXJPZmZzZXQiLCJyaW5nV2VpZ2h0T2Zmc2V0IiwiYXNwZWN0UmF0aW8iLCJsZWdlbmQiLCJnZW5lcmF0ZUxhYmVscyIsImxlZ2VuZEl0ZW0iLCJ0b2dnbGVEYXRhVmlzaWJpbGl0eSIsInRvb2x0aXBJdGVtIiwiZGF0YUxhYmVsIiwiZm9ybWF0dGVkVmFsdWUiLCJMaW5lQ29udHJvbGxlciIsIl9kYXRhc2V0IiwiYW5pbWF0aW9uc0Rpc2FibGVkIiwicG9pbnRDb3VudCIsImdldFN0YXJ0QW5kQ291bnRPZlZpc2libGVQb2ludHMiLCJfc2NhbGVSYW5nZXMiLCJuZXdSYW5nZXMiLCJ4bWluIiwieG1heCIsInltaW4iLCJ5bWF4IiwiY2hhbmdlZCIsInNjYWxlUmFuZ2VzQ2hhbmdlZCIsIl9kYXRhc2V0SW5kZXgiLCJfZGVjaW1hdGVkIiwiYW5pbWF0ZWQiLCJtYXhHYXBMZW5ndGgiLCJkaXJlY3RVcGRhdGUiLCJwcmV2UGFyc2VkIiwibnVsbERhdGEiLCJib3JkZXIiLCJsYXN0UG9pbnQiLCJ1cGRhdGVDb250cm9sUG9pbnRzIiwiUG9sYXJBcmVhQ29udHJvbGxlciIsIl91cGRhdGVSYWRpdXMiLCJtaW5TaXplIiwiY3V0b3V0UGVyY2VudGFnZSIsImdldFZpc2libGVEYXRhc2V0Q291bnQiLCJ4Q2VudGVyIiwieUNlbnRlciIsImRhdGFzZXRTdGFydEFuZ2xlIiwiZ2V0SW5kZXhBbmdsZSIsImRlZmF1bHRBbmdsZSIsImNvdW50VmlzaWJsZUVsZW1lbnRzIiwiX2NvbXB1dGVBbmdsZSIsImdldERpc3RhbmNlRnJvbUNlbnRlckZvclZhbHVlIiwiYW5nbGVMaW5lcyIsImRpc3BsYXkiLCJjaXJjdWxhciIsInBvaW50TGFiZWxzIiwiUGllQ29udHJvbGxlciIsIlJhZGFyQ29udHJvbGxlciIsIl9mdWxsTG9vcCIsInBvaW50UG9zaXRpb24iLCJnZXRQb2ludFBvc2l0aW9uRm9yVmFsdWUiLCJTY2F0dGVyQ29udHJvbGxlciIsImNvbnRyb2xsZXJzIiwiX19wcm90b19fIiwiRGF0ZUFkYXB0ZXIiLCJmb3JtYXRzIiwidGltZXN0YW1wIiwiYW1vdW50IiwidW5pdCIsImRpZmYiLCJzdGFydE9mIiwid2Vla2RheSIsImVuZE9mIiwibWVtYmVycyIsImFkYXB0ZXJzIiwiX2RhdGUiLCJiaW5hcnlTZWFyY2giLCJtZXRhc2V0IiwibG9va3VwTWV0aG9kIiwiX3JldmVyc2VQaXhlbHMiLCJnZXRSYW5nZSIsIm9wdGltaXplZEV2YWx1YXRlSXRlbXMiLCJwb3NpdGlvbiIsImhhbmRsZXIiLCJnZXRTb3J0ZWRWaXNpYmxlRGF0YXNldE1ldGFzIiwiZ2V0SW50ZXJzZWN0SXRlbXMiLCJ1c2VGaW5hbFBvc2l0aW9uIiwiX21pblBhZGRpbmciLCJpblJhbmdlIiwiZ2V0TmVhcmVzdEl0ZW1zIiwiZGlzdGFuY2VNZXRyaWMiLCJ1c2VYIiwidXNlWSIsImRlbHRhWCIsImRlbHRhWSIsImdldERpc3RhbmNlTWV0cmljRm9yQXhpcyIsIm1pbkRpc3RhbmNlIiwiZ2V0Q2VudGVyUG9pbnQiLCJnZXROZWFyZXN0Q2FydGVzaWFuSXRlbXMiLCJnZXRQcm9wcyIsImdldE5lYXJlc3RSYWRpYWxJdGVtcyIsImdldEF4aXNJdGVtcyIsInJhbmdlTWV0aG9kIiwiaW50ZXJzZWN0c0l0ZW0iLCJldmFsdWF0ZUFsbFZpc2libGVJdGVtcyIsIkludGVyYWN0aW9uIiwibW9kZXMiLCJuZWFyZXN0IiwiU1RBVElDX1BPU0lUSU9OUyIsImZpbHRlckJ5UG9zaXRpb24iLCJmaWx0ZXJEeW5hbWljUG9zaXRpb25CeUF4aXMiLCJzb3J0QnlXZWlnaHQiLCJnZXRDb21iaW5lZE1heCIsIm1heFBhZGRpbmciLCJ1cGRhdGVNYXhQYWRkaW5nIiwiYm94UGFkZGluZyIsInVwZGF0ZURpbXMiLCJwYXJhbXMiLCJsYXlvdXQiLCJnZXRQYWRkaW5nIiwibmV3V2lkdGgiLCJvdXRlcldpZHRoIiwibmV3SGVpZ2h0Iiwib3V0ZXJIZWlnaHQiLCJ3aWR0aENoYW5nZWQiLCJoZWlnaHRDaGFuZ2VkIiwic2FtZSIsIm90aGVyIiwiZ2V0TWFyZ2lucyIsIm1hcmdpbkZvclBvc2l0aW9ucyIsImZpdEJveGVzIiwiYm94ZXMiLCJyZWZpdEJveGVzIiwicmVmaXQiLCJmdWxsU2l6ZSIsInNldEJveERpbXMiLCJwbGFjZUJveGVzIiwidXNlclBhZGRpbmciLCJwYWRkaW5nIiwicGxhY2VkIiwic3RhY2tXZWlnaHQiLCJhdXRvUGFkZGluZyIsImxheW91dHMiLCJhZGRCb3giLCJfbGF5ZXJzIiwieiIsInJlbW92ZUJveCIsImxheW91dEl0ZW0iLCJtaW5QYWRkaW5nIiwiYXZhaWxhYmxlV2lkdGgiLCJhdmFpbGFibGVIZWlnaHQiLCJsYXlvdXRCb3hlcyIsIndyYXBCb3hlcyIsIndyYXAiLCJjZW50ZXJIb3Jpem9udGFsIiwiY2VudGVyVmVydGljYWwiLCJsZWZ0QW5kVG9wIiwicmlnaHRBbmRCb3R0b20iLCJ2ZXJ0aWNhbCIsImJ1aWxkTGF5b3V0Qm94ZXMiLCJ2ZXJ0aWNhbEJveGVzIiwiaG9yaXpvbnRhbEJveGVzIiwiYmVmb3JlTGF5b3V0IiwidmlzaWJsZVZlcnRpY2FsQm94Q291bnQiLCJ2Qm94TWF4V2lkdGgiLCJoQm94TWF4SGVpZ2h0IiwiYnVpbGRTdGFja3MiLCJzZXRMYXlvdXREaW1zIiwidXBkYXRlUG9zIiwiY2hhbmdlIiwiaGFuZGxlTWF4UGFkZGluZyIsIkJhc2VQbGF0Zm9ybSIsImFjcXVpcmVDb250ZXh0IiwicmVsZWFzZUNvbnRleHQiLCJnZXRNYXhpbXVtU2l6ZSIsImlzQXR0YWNoZWQiLCJ1cGRhdGVDb25maWciLCJCYXNpY1BsYXRmb3JtIiwiRVZFTlRfVFlQRVMiLCJ0b3VjaHN0YXJ0IiwidG91Y2htb3ZlIiwidG91Y2hlbmQiLCJwb2ludGVyZW50ZXIiLCJwb2ludGVyZG93biIsInBvaW50ZXJtb3ZlIiwicG9pbnRlcnVwIiwicG9pbnRlcmxlYXZlIiwicG9pbnRlcm91dCIsImlzTnVsbE9yRW1wdHkiLCJldmVudExpc3RlbmVyT3B0aW9ucyIsInJlbW92ZUxpc3RlbmVyIiwibm9kZUxpc3RDb250YWlucyIsIm5vZGVMaXN0IiwiY29udGFpbnMiLCJjcmVhdGVBdHRhY2hPYnNlcnZlciIsIm9ic2VydmVyIiwiTXV0YXRpb25PYnNlcnZlciIsImVudHJpZXMiLCJ0cmlnZ2VyIiwiYWRkZWROb2RlcyIsInJlbW92ZWROb2RlcyIsIm9ic2VydmUiLCJjaGlsZExpc3QiLCJzdWJ0cmVlIiwiY3JlYXRlRGV0YWNoT2JzZXJ2ZXIiLCJkcnBMaXN0ZW5pbmdDaGFydHMiLCJvbGREZXZpY2VQaXhlbFJhdGlvIiwib25XaW5kb3dSZXNpemUiLCJkcHIiLCJjcmVhdGVSZXNpemVPYnNlcnZlciIsImNvbnRhaW5lciIsImNsaWVudFdpZHRoIiwiUmVzaXplT2JzZXJ2ZXIiLCJjb250ZW50UmVjdCIsImxpc3RlbkRldmljZVBpeGVsUmF0aW9DaGFuZ2VzIiwicmVsZWFzZU9ic2VydmVyIiwiZGlzY29ubmVjdCIsInVubGlzdGVuRGV2aWNlUGl4ZWxSYXRpb0NoYW5nZXMiLCJjcmVhdGVQcm94eUFuZExpc3RlbiIsImZyb21OYXRpdmVFdmVudCIsImFkZExpc3RlbmVyIiwiRG9tUGxhdGZvcm0iLCJyZW5kZXJIZWlnaHQiLCJnZXRBdHRyaWJ1dGUiLCJyZW5kZXJXaWR0aCIsImRpc3BsYXlXaWR0aCIsImRpc3BsYXlIZWlnaHQiLCJpbml0Q2FudmFzIiwicmVtb3ZlQXR0cmlidXRlIiwic2V0QXR0cmlidXRlIiwicHJveGllcyIsIiRwcm94aWVzIiwiYXR0YWNoIiwiZGV0YWNoIiwiYmJXaWR0aCIsImJiSGVpZ2h0IiwibWFyZ2lucyIsImNvbnRhaW5lclNpemUiLCJjb250YWluZXJTdHlsZSIsImNvbnRhaW5lckJvcmRlciIsImNvbnRhaW5lclBhZGRpbmciLCJjbGllbnRIZWlnaHQiLCJnZXRDb250YWluZXJTaXplIiwiaXNDb25uZWN0ZWQiLCJFbGVtZW50IiwidG9vbHRpcFBvc2l0aW9uIiwiaGFzVmFsdWUiLCJmaW5hbCIsImRlZmF1bHRSb3V0ZXMiLCJmb3JtYXR0ZXJzIiwibnVtZXJpYyIsInRpY2tWYWx1ZSIsIm5vdGF0aW9uIiwibWF4VGljayIsImNhbGN1bGF0ZURlbHRhIiwibG9nRGVsdGEiLCJudW1EZWNpbWFsIiwibWluaW11bUZyYWN0aW9uRGlnaXRzIiwibWF4aW11bUZyYWN0aW9uRGlnaXRzIiwibG9nYXJpdGhtaWMiLCJUaWNrcyIsIm5ld1RpY2tzIiwibWFqb3JTdGFydCIsIm1ham9yRW5kIiwiY2VpbCIsImdyYWNlIiwiZHJhd0JvcmRlciIsImRyYXdPbkNoYXJ0QXJlYSIsImRyYXdUaWNrcyIsInRpY2tMZW5ndGgiLCJ0aWNrV2lkdGgiLCJ0aWNrQ29sb3IiLCJtaW5Sb3RhdGlvbiIsIm1heFJvdGF0aW9uIiwibWlycm9yIiwidGV4dFN0cm9rZVdpZHRoIiwidGV4dFN0cm9rZUNvbG9yIiwiYXV0b1NraXAiLCJhdXRvU2tpcFBhZGRpbmciLCJsYWJlbE9mZnNldCIsIm1pbm9yIiwibWFqb3IiLCJjcm9zc0FsaWduIiwic2hvd0xhYmVsQmFja2Ryb3AiLCJiYWNrZHJvcENvbG9yIiwiYmFja2Ryb3BQYWRkaW5nIiwib2Zmc2V0RnJvbUVkZ2UiLCJzYW1wbGUiLCJudW1JdGVtcyIsImluY3JlbWVudCIsImdldFBpeGVsRm9yR3JpZExpbmUiLCJvZmZzZXRHcmlkTGluZXMiLCJ2YWxpZEluZGV4IiwibGluZVZhbHVlIiwiZ2V0VGlja01hcmtMZW5ndGgiLCJnZXRUaXRsZUhlaWdodCIsInRpdGxlQWxpZ24iLCJyZXZlcnNlQWxpZ24iLCJTY2FsZSIsIl9tYXJnaW5zIiwicGFkZGluZ1RvcCIsInBhZGRpbmdCb3R0b20iLCJwYWRkaW5nTGVmdCIsInBhZGRpbmdSaWdodCIsImxhYmVsUm90YXRpb24iLCJfcmFuZ2UiLCJfZ3JpZExpbmVJdGVtcyIsIl9sYWJlbEl0ZW1zIiwiX2xhYmVsU2l6ZXMiLCJfbWF4TGVuZ3RoIiwiX2xvbmdlc3RUZXh0Q2FjaGUiLCJfdXNlck1heCIsIl91c2VyTWluIiwiX3N1Z2dlc3RlZE1heCIsIl9zdWdnZXN0ZWRNaW4iLCJfdGlja3NMZW5ndGgiLCJfYm9yZGVyVmFsdWUiLCJfZGF0YUxpbWl0c0NhY2hlZCIsImluaXQiLCJzdWdnZXN0ZWRNaW4iLCJzdWdnZXN0ZWRNYXgiLCJtZXRhcyIsImdldFRpY2tzIiwieExhYmVscyIsInlMYWJlbHMiLCJiZWZvcmVVcGRhdGUiLCJ0aWNrT3B0cyIsInNhbXBsZVNpemUiLCJiZWZvcmVTZXREaW1lbnNpb25zIiwic2V0RGltZW5zaW9ucyIsImFmdGVyU2V0RGltZW5zaW9ucyIsImJlZm9yZURhdGFMaW1pdHMiLCJkZXRlcm1pbmVEYXRhTGltaXRzIiwiYWZ0ZXJEYXRhTGltaXRzIiwibWlubWF4Iiwia2VlcFplcm8iLCJfYWRkR3JhY2UiLCJiZWZvcmVCdWlsZFRpY2tzIiwiYnVpbGRUaWNrcyIsImFmdGVyQnVpbGRUaWNrcyIsInNhbXBsaW5nRW5hYmxlZCIsIl9jb252ZXJ0VGlja3NUb0xhYmVscyIsImJlZm9yZUNhbGN1bGF0ZUxhYmVsUm90YXRpb24iLCJjYWxjdWxhdGVMYWJlbFJvdGF0aW9uIiwiYWZ0ZXJDYWxjdWxhdGVMYWJlbFJvdGF0aW9uIiwidGlja3NMaW1pdCIsIm1heFRpY2tzTGltaXQiLCJfdGlja1NpemUiLCJtYXhTY2FsZSIsIm1heENoYXJ0IiwiZGV0ZXJtaW5lTWF4VGlja3MiLCJtYWpvckluZGljZXMiLCJlbmFibGVkIiwiZ2V0TWFqb3JJbmRpY2VzIiwibnVtTWFqb3JJbmRpY2VzIiwiZmlyc3QiLCJza2lwTWFqb3JzIiwiZXZlbk1ham9yU3BhY2luZyIsImdldEV2ZW5TcGFjaW5nIiwiZmFjdG9ycyIsIl9mYWN0b3JpemUiLCJjYWxjdWxhdGVTcGFjaW5nIiwiYXZnTWFqb3JTcGFjaW5nIiwiYmVmb3JlRml0IiwiZml0IiwiYWZ0ZXJGaXQiLCJhZnRlclVwZGF0ZSIsInN0YXJ0UGl4ZWwiLCJlbmRQaXhlbCIsInJldmVyc2VQaXhlbHMiLCJfYWxpZ25Ub1BpeGVscyIsImFsaWduVG9QaXhlbHMiLCJfY2FsbEhvb2tzIiwibm90aWZ5UGx1Z2lucyIsImJlZm9yZVRpY2tUb0xhYmVsQ29udmVyc2lvbiIsImdlbmVyYXRlVGlja0xhYmVscyIsImFmdGVyVGlja1RvTGFiZWxDb252ZXJzaW9uIiwibnVtVGlja3MiLCJtYXhMYWJlbERpYWdvbmFsIiwiX2lzVmlzaWJsZSIsImxhYmVsU2l6ZXMiLCJfZ2V0TGFiZWxTaXplcyIsIm1heExhYmVsV2lkdGgiLCJ3aWRlc3QiLCJtYXhMYWJlbEhlaWdodCIsImhpZ2hlc3QiLCJhc2luIiwidGl0bGVPcHRzIiwiZ3JpZE9wdHMiLCJ0aXRsZUhlaWdodCIsInRpY2tQYWRkaW5nIiwiYW5nbGVSYWRpYW5zIiwibGFiZWxIZWlnaHQiLCJsYWJlbFdpZHRoIiwiX2NhbGN1bGF0ZVBhZGRpbmciLCJfaGFuZGxlTWFyZ2lucyIsImlzUm90YXRlZCIsImxhYmVsc0JlbG93VGlja3MiLCJvZmZzZXRMZWZ0Iiwib2Zmc2V0UmlnaHQiLCJpc0Z1bGxTaXplIiwiX2NvbXB1dGVMYWJlbFNpemVzIiwiY2FjaGVzIiwid2lkdGhzIiwiaGVpZ2h0cyIsInRpY2tGb250IiwiZm9udFN0cmluZyIsIm5lc3RlZExhYmVsIiwid2lkZXN0TGFiZWxTaXplIiwiaGlnaGVzdExhYmVsU2l6ZSIsIl9yZXNvbHZlVGlja0ZvbnRPcHRpb25zIiwidmFsdWVBdCIsImdldFZhbHVlRm9yUGl4ZWwiLCJkZWNpbWFsIiwiZ2V0RGVjaW1hbEZvclBpeGVsIiwiZ2V0QmFzZVZhbHVlIiwiY3JlYXRlVGlja0NvbnRleHQiLCJvcHRpb25UaWNrcyIsInJvdCIsIl9jb21wdXRlR3JpZExpbmVJdGVtcyIsInRpY2tzTGVuZ3RoIiwidGwiLCJib3JkZXJPcHRzIiwiYXhpc1dpZHRoIiwiYXhpc0hhbGZXaWR0aCIsImFsaWduQm9yZGVyVmFsdWUiLCJib3JkZXJWYWx1ZSIsImFsaWduZWRMaW5lVmFsdWUiLCJ0eDEiLCJ0eTEiLCJ0eDIiLCJ0eTIiLCJ4MSIsInkxIiwieDIiLCJ5MiIsInBvc2l0aW9uQXhpc0lEIiwibGltaXQiLCJzdGVwIiwib3B0c0F0SW5kZXgiLCJsaW5lQ29sb3IiLCJ0aWNrQm9yZGVyRGFzaCIsInRpY2tCb3JkZXJEYXNoT2Zmc2V0IiwiX2NvbXB1dGVMYWJlbEl0ZW1zIiwidGlja0FuZFBhZGRpbmciLCJoVGlja0FuZFBhZGRpbmciLCJsaW5lQ291bnQiLCJ0ZXh0T2Zmc2V0IiwiX2dldFhBeGlzTGFiZWxBbGlnbm1lbnQiLCJfZ2V0WUF4aXNMYWJlbEFsaWdubWVudCIsImhhbGZDb3VudCIsImJhY2tkcm9wIiwibGFiZWxQYWRkaW5nIiwiX2NvbXB1dGVMYWJlbEFyZWEiLCJkcmF3QmFja2dyb3VuZCIsImZpbGxSZWN0IiwiZmluZEluZGV4IiwiZHJhd0dyaWQiLCJkcmF3TGluZSIsInNldExpbmVEYXNoIiwibGluZURhc2hPZmZzZXQiLCJsYXN0TGluZVdpZHRoIiwiZHJhd0xhYmVscyIsImRyYXdUaXRsZSIsInRpdGxlWCIsInRpdGxlWSIsInRpdGxlQXJncyIsInR6IiwiZ3oiLCJheGlzSUQiLCJfbWF4RGlnaXRzIiwiZm9udFNpemUiLCJUeXBlZFJlZ2lzdHJ5IiwiaXNGb3JUeXBlIiwiaXNQcm90b3R5cGVPZiIsInJlZ2lzdGVyIiwicGFyZW50U2NvcGUiLCJpc0lDaGFydENvbXBvbmVudCIsIml0ZW1EZWZhdWx0cyIsInJvdXRlcyIsInByb3BlcnR5UGFydHMiLCJzb3VyY2VOYW1lIiwic291cmNlU2NvcGUiLCJwYXJ0cyIsInJvdXRlRGVmYXVsdHMiLCJyZWdpc3RlckRlZmF1bHRzIiwidW5yZWdpc3RlciIsInJlZ2lzdHJ5IiwiX3R5cGVkUmVnaXN0cmllcyIsIl9lYWNoIiwiYWRkQ29udHJvbGxlcnMiLCJhZGRQbHVnaW5zIiwiYWRkU2NhbGVzIiwiZ2V0Q29udHJvbGxlciIsIl9nZXQiLCJnZXRFbGVtZW50IiwiZ2V0UGx1Z2luIiwiZ2V0U2NhbGUiLCJyZW1vdmVDb250cm9sbGVycyIsInJlbW92ZUVsZW1lbnRzIiwicmVtb3ZlUGx1Z2lucyIsInJlbW92ZVNjYWxlcyIsInR5cGVkUmVnaXN0cnkiLCJhcmciLCJyZWciLCJfZ2V0UmVnaXN0cnlGb3JUeXBlIiwiX2V4ZWMiLCJpdGVtUmVnIiwiY29tcG9uZW50IiwiY2FtZWxNZXRob2QiLCJQbHVnaW5TZXJ2aWNlIiwiX2luaXQiLCJub3RpZnkiLCJob29rIiwiX2NyZWF0ZURlc2NyaXB0b3JzIiwiZGVzY3JpcHRvciIsInBsdWdpbiIsImNhbmNlbGFibGUiLCJpbnZhbGlkYXRlIiwiX29sZENhY2hlIiwiX25vdGlmeVN0YXRlQ2hhbmdlcyIsImFsbFBsdWdpbnMiLCJnZXRPcHRzIiwicGx1Z2luT3B0cyIsImNyZWF0ZURlc2NyaXB0b3JzIiwicHJldmlvdXNEZXNjcmlwdG9ycyIsInNvbWUiLCJwbHVnaW5TY29wZUtleXMiLCJnZXRJbmRleEF4aXMiLCJkYXRhc2V0RGVmYXVsdHMiLCJkZXRlcm1pbmVBeGlzIiwic2NhbGVPcHRpb25zIiwiaW5pdE9wdGlvbnMiLCJjaGFydERlZmF1bHRzIiwiY29uZmlnU2NhbGVzIiwiY2hhcnRJbmRleEF4aXMiLCJmaXJzdElEcyIsInNjYWxlQ29uZiIsImVycm9yIiwiZGVmYXVsdElkIiwiZ2V0RGVmYXVsdFNjYWxlSURGcm9tQXhpcyIsImRlZmF1bHRTY2FsZU9wdGlvbnMiLCJkZWZhdWx0SUQiLCJnZXRBeGlzRnJvbURlZmF1bHRTY2FsZUlEIiwibWVyZ2VTY2FsZUNvbmZpZyIsImluaXREYXRhIiwia2V5Q2FjaGUiLCJrZXlzQ2FjaGVkIiwiY2FjaGVkS2V5cyIsImdlbmVyYXRlIiwiYWRkSWZGb3VuZCIsIkNvbmZpZyIsIl9jb25maWciLCJpbml0Q29uZmlnIiwiX3Njb3BlQ2FjaGUiLCJfcmVzb2x2ZXJDYWNoZSIsImNsZWFyQ2FjaGUiLCJjbGVhciIsImRhdGFzZXRUeXBlIiwiYWRkaXRpb25hbE9wdGlvblNjb3BlcyIsIl9jYWNoZWRTY29wZXMiLCJtYWluU2NvcGUiLCJyZXNldENhY2hlIiwia2V5TGlzdHMiLCJjaGFydE9wdGlvblNjb3BlcyIsInN1YlByZWZpeGVzIiwiZ2V0UmVzb2x2ZXIiLCJoYXNGdW5jdGlvbiIsIm5lZWRDb250ZXh0IiwicmVzb2x2ZXJDYWNoZSIsIktOT1dOX1BPU0lUSU9OUyIsInBvc2l0aW9uSXNIb3Jpem9udGFsIiwiY29tcGFyZTJMZXZlbCIsImwxIiwibDIiLCJvbkFuaW1hdGlvbnNDb21wbGV0ZSIsIm9uQ29tcGxldGUiLCJvbkFuaW1hdGlvblByb2dyZXNzIiwib25Qcm9ncmVzcyIsImdldENhbnZhcyIsImdldEVsZW1lbnRCeUlkIiwiaW5zdGFuY2VzIiwiZ2V0Q2hhcnQiLCJtb3ZlTnVtZXJpY0tleXMiLCJpbnRLZXkiLCJDaGFydCIsInVzZXJDb25maWciLCJpbml0aWFsQ2FudmFzIiwiZXhpc3RpbmdDaGFydCIsIk9mZnNjcmVlbkNhbnZhcyIsIl9kZXRlY3RQbGF0Zm9ybSIsIl9vcHRpb25zIiwiX2FzcGVjdFJhdGlvIiwiX21ldGFzZXRzIiwiX2xhc3RFdmVudCIsIl9saXN0ZW5lcnMiLCJfcmVzcG9uc2l2ZUxpc3RlbmVycyIsIl9zb3J0ZWRNZXRhc2V0cyIsIl9wbHVnaW5zIiwiX2hpZGRlbkluZGljZXMiLCJhdHRhY2hlZCIsIl9kb1Jlc2l6ZSIsInRpbWVvdXQiLCJjbGVhclRpbWVvdXQiLCJzZXRUaW1lb3V0IiwiZGVib3VuY2UiLCJyZXNpemVEZWxheSIsIl9pbml0aWFsaXplIiwiYmluZEV2ZW50cyIsIl9yZXNpemVCZWZvcmVEcmF3IiwiX3Jlc2l6ZSIsIm5ld1NpemUiLCJuZXdSYXRpbyIsIm9uUmVzaXplIiwicmVuZGVyIiwiZW5zdXJlU2NhbGVzSGF2ZUlEcyIsImF4aXNPcHRpb25zIiwiYnVpbGRPclVwZGF0ZVNjYWxlcyIsInNjYWxlT3B0cyIsInVwZGF0ZWQiLCJpc1JhZGlhbCIsImRwb3NpdGlvbiIsImR0eXBlIiwic2NhbGVUeXBlIiwiaGFzVXBkYXRlZCIsIl91cGRhdGVNZXRhc2V0cyIsIl9kZXN0cm95RGF0YXNldE1ldGEiLCJfcmVtb3ZlVW5yZWZlcmVuY2VkTWV0YXNldHMiLCJidWlsZE9yVXBkYXRlQ29udHJvbGxlcnMiLCJuZXdDb250cm9sbGVycyIsIm9yZGVyIiwiQ29udHJvbGxlckNsYXNzIiwiX3Jlc2V0RWxlbWVudHMiLCJhbmltc0Rpc2FibGVkIiwiX3VwZGF0ZVNjYWxlcyIsIl9jaGVja0V2ZW50QmluZGluZ3MiLCJfdXBkYXRlSGlkZGVuSW5kaWNlcyIsIl91cGRhdGVMYXlvdXQiLCJfdXBkYXRlRGF0YXNldHMiLCJfZXZlbnRIYW5kbGVyIiwiX3VwZGF0ZUhvdmVyU3R5bGVzIiwiZXhpc3RpbmdFdmVudHMiLCJuZXdFdmVudHMiLCJ1bmJpbmRFdmVudHMiLCJjaGFuZ2VzIiwiX2dldFVuaWZvcm1EYXRhQ2hhbmdlcyIsImRhdGFzZXRDb3VudCIsIm1ha2VTZXQiLCJjaGFuZ2VTZXQiLCJub0FyZWEiLCJfaWR4IiwiX3VwZGF0ZURhdGFzZXQiLCJsYXllcnMiLCJfZHJhd0RhdGFzZXRzIiwiX2RyYXdEYXRhc2V0IiwidXNlQ2xpcCIsImdldEVsZW1lbnRzQXRFdmVudEZvck1vZGUiLCJzZXREYXRhc2V0VmlzaWJpbGl0eSIsIl91cGRhdGVWaXNpYmlsaXR5IiwiX3N0b3AiLCJkZXN0cm95IiwidG9CYXNlNjRJbWFnZSIsInRvRGF0YVVSTCIsImJpbmRVc2VyRXZlbnRzIiwiYmluZFJlc3BvbnNpdmVFdmVudHMiLCJfYWRkIiwiX3JlbW92ZSIsImRldGFjaGVkIiwidXBkYXRlSG92ZXJTdHlsZSIsImdldEFjdGl2ZUVsZW1lbnRzIiwic2V0QWN0aXZlRWxlbWVudHMiLCJhY3RpdmVFbGVtZW50cyIsImxhc3RBY3RpdmUiLCJyZXBsYXkiLCJob3Zlck9wdGlvbnMiLCJkZWFjdGl2YXRlZCIsImFjdGl2YXRlZCIsImluQ2hhcnRBcmVhIiwiZXZlbnRGaWx0ZXIiLCJfaGFuZGxlRXZlbnQiLCJfZ2V0QWN0aXZlRWxlbWVudHMiLCJpc0NsaWNrIiwiX2lzQ2xpY2tFdmVudCIsImxhc3RFdmVudCIsImRldGVybWluZUxhc3RFdmVudCIsImludmFsaWRhdGVQbHVnaW5zIiwiY2xpcEFyYyIsInBpeGVsTWFyZ2luIiwiYW5nbGVNYXJnaW4iLCJyVGhldGFUb1hZIiwidGhldGEiLCJwYXRoQXJjIiwiaW5uZXJSIiwic3BhY2luZ09mZnNldCIsImF2Tm9nU3BhY2luZ1JhZGl1cyIsImFuZ2xlT2Zmc2V0Iiwib3V0ZXJTdGFydCIsIm91dGVyRW5kIiwiaW5uZXJTdGFydCIsImlubmVyRW5kIiwiYW5nbGVEZWx0YSIsIm8iLCJib3JkZXJSYWRpdXMiLCJoYWxmVGhpY2tuZXNzIiwiaW5uZXJMaW1pdCIsImNvbXB1dGVPdXRlckxpbWl0Iiwib3V0ZXJBcmNMaW1pdCIsInBhcnNlQm9yZGVyUmFkaXVzJDEiLCJvdXRlclN0YXJ0QWRqdXN0ZWRSYWRpdXMiLCJvdXRlckVuZEFkanVzdGVkUmFkaXVzIiwib3V0ZXJTdGFydEFkanVzdGVkQW5nbGUiLCJvdXRlckVuZEFkanVzdGVkQW5nbGUiLCJpbm5lclN0YXJ0QWRqdXN0ZWRSYWRpdXMiLCJpbm5lckVuZEFkanVzdGVkUmFkaXVzIiwiaW5uZXJTdGFydEFkanVzdGVkQW5nbGUiLCJpbm5lckVuZEFkanVzdGVkQW5nbGUiLCJwQ2VudGVyIiwicDQiLCJwOCIsInZlcnNpb24iLCJBcmNFbGVtZW50IiwiZnVsbENpcmNsZXMiLCJjaGFydFgiLCJjaGFydFkiLCJyQWRqdXN0IiwiYmV0d2VlbkFuZ2xlcyIsIndpdGhpblJhZGl1cyIsImhhbGZBbmdsZSIsImhhbGZSYWRpdXMiLCJyYWRpdXNPZmZzZXQiLCJkcmF3QXJjIiwiaW5uZXIiLCJsaW5lSm9pbiIsImRyYXdGdWxsQ2lyY2xlQm9yZGVycyIsInNldFN0eWxlIiwibGluZUNhcCIsInBhdGhWYXJzIiwicGFyYW1zU3RhcnQiLCJwYXJhbXNFbmQiLCJzZWdtZW50U3RhcnQiLCJzZWdtZW50RW5kIiwib3V0c2lkZSIsInBhdGhTZWdtZW50IiwibGluZU1ldGhvZCIsInN0ZXBwZWQiLCJnZXRMaW5lTWV0aG9kIiwiZmFzdFBhdGhTZWdtZW50IiwicHJldlgiLCJsYXN0WSIsImF2Z1giLCJjb3VudFgiLCJwb2ludEluZGV4IiwiZHJhd1giLCJ0cnVuY1giLCJfZ2V0U2VnbWVudE1ldGhvZCIsInVzZVBhdGgyRCIsIlBhdGgyRCIsIkxpbmVFbGVtZW50IiwiX3BhdGgiLCJfcG9pbnRzIiwiX3NlZ21lbnRzIiwiX3BvaW50c1VwZGF0ZWQiLCJzZWdtZW50T3B0aW9ucyIsImZpbmRTdGFydEFuZEVuZCIsImNoYXJ0Q29udGV4dCIsImJhc2VTdHlsZSIsImFkZFN0eWxlIiwic3QiLCJkaXIiLCJwMCIsInAwRGF0YUluZGV4IiwicDFEYXRhSW5kZXgiLCJkb1NwbGl0QnlTdHlsZXMiLCJzcGxpdEJ5U3R5bGVzIiwic29saWRTZWdtZW50cyIsIl9jb21wdXRlU2VnbWVudHMiLCJpbnRlcnBvbGF0ZSIsIl9pbnRlcnBvbGF0ZSIsIl9nZXRJbnRlcnBvbGF0aW9uTWV0aG9kIiwiaW50ZXJwb2xhdGVkIiwic2VnbWVudE1ldGhvZCIsInBhdGgiLCJzdHJva2VQYXRoV2l0aENhY2hlIiwic3Ryb2tlUGF0aERpcmVjdCIsImluUmFuZ2UkMSIsImhpdFJhZGl1cyIsIlBvaW50RWxlbWVudCIsIm1vdXNlWCIsIm1vdXNlWSIsImluWFJhbmdlIiwiaW5ZUmFuZ2UiLCJob3ZlclJhZGl1cyIsImdldEJhckJvdW5kcyIsImJhciIsImhhbGYiLCJza2lwT3JMaW1pdCIsInNraXBYIiwic2tpcFkiLCJhZGROb3JtYWxSZWN0UGF0aCIsImluZmxhdGVSZWN0IiwicmVmUmVjdCIsIkJhckVsZW1lbnQiLCJvdXRlciIsIm1heFciLCJtYXhIIiwicGFyc2VCb3JkZXJXaWR0aCIsIm1heFIiLCJlbmFibGVCb3JkZXIiLCJwYXJzZUJvcmRlclJhZGl1cyIsImJvdW5kaW5nUmVjdHMiLCJhZGRSZWN0UGF0aCIsImNsZWFuRGVjaW1hdGVkRGF0YXNldCIsImNsZWFuRGVjaW1hdGVkRGF0YSIsInBsdWdpbl9kZWNpbWF0aW9uIiwiYWxnb3JpdGhtIiwiYmVmb3JlRWxlbWVudHNVcGRhdGUiLCJ4QXhpcyIsImRlY2ltYXRlZCIsImdldFN0YXJ0QW5kQ291bnRPZlZpc2libGVQb2ludHNTaW1wbGlmaWVkIiwidGhyZXNob2xkIiwic2FtcGxlcyIsImJ1Y2tldFdpZHRoIiwic2FtcGxlZEluZGV4IiwiZW5kSW5kZXgiLCJtYXhBcmVhUG9pbnQiLCJtYXhBcmVhIiwibmV4dEEiLCJhdmdZIiwiYXZnUmFuZ2VTdGFydCIsImF2Z1JhbmdlRW5kIiwiYXZnUmFuZ2VMZW5ndGgiLCJyYW5nZU9mZnMiLCJyYW5nZVRvIiwicG9pbnRBeSIsInBvaW50QXgiLCJsdHRiRGVjaW1hdGlvbiIsIm1pbkluZGV4IiwibWF4SW5kZXgiLCJzdGFydEluZGV4IiwieE1pbiIsImR4IiwibGFzdEluZGV4IiwiaW50ZXJtZWRpYXRlSW5kZXgxIiwiaW50ZXJtZWRpYXRlSW5kZXgyIiwibWluTWF4RGVjaW1hdGlvbiIsImRlY29kZUZpbGwiLCJmaWxsT3B0aW9uIiwicGFyc2VGaWxsT3B0aW9uIiwic2ltcGxlQXJjIiwiZmluZFNlZ21lbnRFbmQiLCJhZGRQb2ludHNCZWxvdyIsInNvdXJjZVBvaW50IiwibGluZXNCZWxvdyIsInBvc3Rwb25lZCIsImZpbmRQb2ludCIsInVuc2hpZnQiLCJwb2ludFZhbHVlIiwibGluZVBvaW50cyIsImZpcnN0VmFsdWUiLCJsYXN0VmFsdWUiLCJnZXRMaW5lQnlJbmRleCIsInNvdXJjZVBvaW50cyIsImJlbG93IiwiZ2V0TGluZXNCZWxvdyIsImNyZWF0ZUJvdW5kYXJ5TGluZSIsImJ1aWxkU3RhY2tMaW5lIiwiYm91bmRhcnkiLCJjb21wdXRlQ2lyY3VsYXJCb3VuZGFyeSIsImNvbXB1dGVMaW5lYXJCb3VuZGFyeSIsImNvbXB1dGVCb3VuZGFyeSIsInBvaW50c0Zyb21TZWdtZW50cyIsInJlc29sdmVUYXJnZXQiLCJwcm9wYWdhdGUiLCJ2aXNpdGVkIiwiY2xpcFkiLCJsaW5lTG9vcCIsImdldEJvdW5kcyIsIl9nZXRFZGdlIiwiY2xpcEJvdW5kcyIsImludGVycG9sYXRlZExpbmVUbyIsImludGVycG9sYXRlZFBvaW50IiwiX2ZpbGwiLCJ0cG9pbnRzIiwidGFyZ2V0U2VnbWVudHMiLCJ0Z3QiLCJzdWJCb3VuZHMiLCJmaWxsU291cmNlcyIsImZpbGxTb3VyY2UiLCJub3RTaGFwZSIsInRhcmdldExvb3AiLCJkcmF3ZmlsbCIsImxpbmVPcHRzIiwiYWJvdmUiLCJkb0ZpbGwiLCJwbHVnaW5fZmlsbGVyIiwiYWZ0ZXJEYXRhc2V0c1VwZGF0ZSIsIl9hcmdzIiwiJGZpbGxlciIsImJlZm9yZURyYXciLCJkcmF3VGltZSIsImJlZm9yZURhdGFzZXRzRHJhdyIsImJlZm9yZURhdGFzZXREcmF3IiwiZ2V0Qm94U2l6ZSIsImxhYmVsT3B0cyIsImJveEhlaWdodCIsImJveFdpZHRoIiwidXNlUG9pbnRTdHlsZSIsIml0ZW1IZWlnaHQiLCJMZWdlbmQiLCJfYWRkZWQiLCJsZWdlbmRIaXRCb3hlcyIsIl9ob3ZlcmVkSXRlbSIsImRvdWdobnV0TW9kZSIsImxlZ2VuZEl0ZW1zIiwiY29sdW1uU2l6ZXMiLCJsaW5lV2lkdGhzIiwiYnVpbGRMYWJlbHMiLCJsYWJlbEZvbnQiLCJfY29tcHV0ZVRpdGxlSGVpZ2h0IiwiX2ZpdFJvd3MiLCJfZml0Q29scyIsImhpdGJveGVzIiwidG90YWxIZWlnaHQiLCJyb3ciLCJoZWlnaHRMaW1pdCIsInRvdGFsV2lkdGgiLCJjdXJyZW50Q29sV2lkdGgiLCJjdXJyZW50Q29sSGVpZ2h0IiwiY29sIiwiYWRqdXN0SGl0Qm94ZXMiLCJydGxIZWxwZXIiLCJoaXRib3giLCJfZHJhdyIsImRlZmF1bHRDb2xvciIsImZvbnRDb2xvciIsImhhbGZGb250U2l6ZSIsImN1cnNvciIsInRleHREaXJlY3Rpb24iLCJsaW5lRGFzaCIsImRyYXdPcHRpb25zIiwiU1FSVDIiLCJ5Qm94VG9wIiwieEJveExlZnQiLCJkcmF3TGVnZW5kQm94IiwiX3RleHRYIiwidGl0bGVGb250IiwidGl0bGVQYWRkaW5nIiwidG9wUGFkZGluZ1BsdXNIYWxmRm9udFNpemUiLCJfZ2V0TGVnZW5kSXRlbUF0IiwiaGl0Qm94IiwibGgiLCJoYW5kbGVFdmVudCIsIm9uTGVhdmUiLCJpc0xpc3RlbmVkIiwiaG92ZXJlZEl0ZW0iLCJzYW1lSXRlbSIsInBsdWdpbl9sZWdlbmQiLCJfZWxlbWVudCIsImFmdGVyRXZlbnQiLCJjaSIsIlRpdGxlIiwiX3BhZGRpbmciLCJ0ZXh0U2l6ZSIsIl9kcmF3QXJncyIsImZvbnRPcHRzIiwicGx1Z2luX3RpdGxlIiwidGl0bGVCbG9jayIsImNyZWF0ZVRpdGxlIiwiV2Vha01hcCIsInBsdWdpbl9zdWJ0aXRsZSIsInBvc2l0aW9uZXJzIiwiYXZlcmFnZSIsImV2ZW50UG9zaXRpb24iLCJuZWFyZXN0RWxlbWVudCIsInRwIiwicHVzaE9yQ29uY2F0IiwidG9QdXNoIiwic3BsaXROZXdsaW5lcyIsIlN0cmluZyIsImNyZWF0ZVRvb2x0aXBJdGVtIiwiZ2V0VG9vbHRpcFNpemUiLCJib2R5IiwiZm9vdGVyIiwiYm9keUZvbnQiLCJmb290ZXJGb250IiwidGl0bGVMaW5lQ291bnQiLCJmb290ZXJMaW5lQ291bnQiLCJib2R5TGluZUl0ZW1Db3VudCIsImNvbWJpbmVkQm9keUxlbmd0aCIsImJvZHlJdGVtIiwiYmVmb3JlIiwiYWZ0ZXIiLCJiZWZvcmVCb2R5IiwiYWZ0ZXJCb2R5IiwidGl0bGVTcGFjaW5nIiwidGl0bGVNYXJnaW5Cb3R0b20iLCJkaXNwbGF5Q29sb3JzIiwiYm9keVNwYWNpbmciLCJmb290ZXJNYXJnaW5Ub3AiLCJmb290ZXJTcGFjaW5nIiwid2lkdGhQYWRkaW5nIiwibWF4TGluZVdpZHRoIiwiZGV0ZXJtaW5lWEFsaWduIiwieUFsaWduIiwiY2hhcnRXaWR0aCIsInhBbGlnbiIsImNhcmV0IiwiY2FyZXRTaXplIiwiY2FyZXRQYWRkaW5nIiwiZG9lc05vdEZpdFdpdGhBbGlnbiIsImRldGVybWluZUFsaWdubWVudCIsImRldGVybWluZVlBbGlnbiIsImdldEJhY2tncm91bmRQb2ludCIsImFsaWdubWVudCIsInBhZGRpbmdBbmRTaXplIiwiYWxpZ25YIiwiYWxpZ25ZIiwiZ2V0QWxpZ25lZFgiLCJnZXRCZWZvcmVBZnRlckJvZHlMaW5lcyIsIm92ZXJyaWRlQ2FsbGJhY2tzIiwiVG9vbHRpcCIsIm9wYWNpdHkiLCJfZXZlbnRQb3NpdGlvbiIsIl9zaXplIiwiX2NhY2hlZEFuaW1hdGlvbnMiLCJfdG9vbHRpcEl0ZW1zIiwiZGF0YVBvaW50cyIsImNhcmV0WCIsImNhcmV0WSIsImxhYmVsQ29sb3JzIiwibGFiZWxQb2ludFN0eWxlcyIsImxhYmVsVGV4dENvbG9ycyIsInRvb2x0aXBJdGVtcyIsImdldFRpdGxlIiwiYmVmb3JlVGl0bGUiLCJhZnRlclRpdGxlIiwiZ2V0QmVmb3JlQm9keSIsImdldEJvZHkiLCJib2R5SXRlbXMiLCJzY29wZWQiLCJiZWZvcmVMYWJlbCIsImFmdGVyTGFiZWwiLCJnZXRBZnRlckJvZHkiLCJnZXRGb290ZXIiLCJiZWZvcmVGb290ZXIiLCJhZnRlckZvb3RlciIsIl9jcmVhdGVJdGVtcyIsIml0ZW1Tb3J0IiwibGFiZWxDb2xvciIsImxhYmVsUG9pbnRTdHlsZSIsImxhYmVsVGV4dENvbG9yIiwicG9zaXRpb25BbmRTaXplIiwiYmFja2dyb3VuZFBvaW50IiwiZXh0ZXJuYWwiLCJkcmF3Q2FyZXQiLCJ0b29sdGlwUG9pbnQiLCJjYXJldFBvc2l0aW9uIiwiZ2V0Q2FyZXRQb3NpdGlvbiIsIngzIiwieTMiLCJwdFgiLCJwdFkiLCJ0aXRsZUNvbG9yIiwiX2RyYXdDb2xvckJveCIsImNvbG9yWCIsInJ0bENvbG9yWCIsInlPZmZTZXQiLCJjb2xvclkiLCJtdWx0aUtleUJhY2tncm91bmQiLCJvdXRlclgiLCJpbm5lclgiLCJzdHJva2VSZWN0IiwiZHJhd0JvZHkiLCJib2R5QWxpZ24iLCJib2R5TGluZUhlaWdodCIsInhMaW5lUGFkZGluZyIsImZpbGxMaW5lT2ZUZXh0IiwiYm9keUFsaWduRm9yQ2FsY3VsYXRpb24iLCJ0ZXh0Q29sb3IiLCJib2R5Q29sb3IiLCJkcmF3Rm9vdGVyIiwiZm9vdGVyQWxpZ24iLCJmb290ZXJDb2xvciIsInRvb2x0aXBTaXplIiwicXVhZHJhdGljQ3VydmVUbyIsIl91cGRhdGVBbmltYXRpb25UYXJnZXQiLCJhbmltWCIsImFuaW1ZIiwiaGFzVG9vbHRpcENvbnRlbnQiLCJnbG9iYWxBbHBoYSIsInBvc2l0aW9uQ2hhbmdlZCIsIl9wb3NpdGlvbkNoYW5nZWQiLCJfaWdub3JlUmVwbGF5RXZlbnRzIiwicGx1Z2luX3Rvb2x0aXAiLCJhZnRlckluaXQiLCJhZnRlckRyYXciLCJsYWJlbENvdW50IiwiRGVjaW1hdGlvbiIsIkZpbGxlciIsIlN1YlRpdGxlIiwiQ2F0ZWdvcnlTY2FsZSIsIl9zdGFydFZhbHVlIiwiX3ZhbHVlUmFuZ2UiLCJfYWRkZWRMYWJlbHMiLCJhZGRlZCIsImFkZGVkTGFiZWxzIiwiYWRkSWZTdHJpbmciLCJsYXN0SW5kZXhPZiIsImZpbmRPckFkZExhYmVsIiwicmVsYXRpdmVMYWJlbFNpemUiLCJtaW5TcGFjaW5nIiwiTGluZWFyU2NhbGVCYXNlIiwiX2VuZFZhbHVlIiwiaGFuZGxlVGlja1JhbmdlT3B0aW9ucyIsInNldE1pbiIsInNldE1heCIsIm1pblNpZ24iLCJtYXhTaWduIiwiTUFYX1NBRkVfSU5URUdFUiIsIk1JTl9TQUZFX0lOVEVHRVIiLCJnZXRUaWNrTGltaXQiLCJtYXhUaWNrcyIsInN0ZXBTaXplIiwiY29tcHV0ZVRpY2tMaW1pdCIsImdlbmVyYXRpb25PcHRpb25zIiwiZGF0YVJhbmdlIiwicHJlY2lzaW9uIiwibWF4RGlnaXRzIiwiaW5jbHVkZUJvdW5kcyIsIm1heFNwYWNlcyIsInJtaW4iLCJybWF4IiwiY291bnREZWZpbmVkIiwibmljZU1pbiIsIm5pY2VNYXgiLCJudW1TcGFjZXMiLCJyb3VuZGVkIiwiYWxtb3N0V2hvbGUiLCJkZWNpbWFsUGxhY2VzIiwiZ2VuZXJhdGVUaWNrcyQxIiwiTGluZWFyU2NhbGUiLCJpc01ham9yIiwidGlja1ZhbCIsIkxvZ2FyaXRobWljU2NhbGUiLCJfemVybyIsImV4cCIsImVuZEV4cCIsImVuZFNpZ25pZmljYW5kIiwic2lnbmlmaWNhbmQiLCJsYXN0VGljayIsImdlbmVyYXRlVGlja3MiLCJnZXRUaWNrQmFja2Ryb3BIZWlnaHQiLCJkZXRlcm1pbmVMaW1pdHMiLCJ1cGRhdGVMaW1pdHMiLCJsaW1pdHMiLCJoTGltaXRzIiwidkxpbWl0cyIsImdldFRleHRBbGlnbkZvckFuZ2xlIiwieUZvckFuZ2xlIiwicGF0aFJhZGl1c0xpbmUiLCJnZXRQb2ludFBvc2l0aW9uIiwiUmFkaWFsTGluZWFyU2NhbGUiLCJkcmF3aW5nQXJlYSIsIl9wb2ludExhYmVscyIsIl9wb2ludExhYmVsSXRlbXMiLCJ2YWx1ZUNvdW50IiwicG9pbnRMYWJlbE9wdHMiLCJhZGRpdGlvbmFsQW5nbGUiLCJjZW50ZXJQb2ludExhYmVscyIsImdldFBvaW50TGFiZWxDb250ZXh0IiwicGxGb250Iiwic2V0Q2VudGVyUG9pbnQiLCJleHRyYSIsIm91dGVyRGlzdGFuY2UiLCJwb2ludExhYmVsUG9zaXRpb24iLCJidWlsZFBvaW50TGFiZWxJdGVtcyIsImZpdFdpdGhQb2ludExhYmVscyIsImxlZnRNb3ZlbWVudCIsInJpZ2h0TW92ZW1lbnQiLCJ0b3BNb3ZlbWVudCIsImJvdHRvbU1vdmVtZW50Iiwic2NhbGluZ0ZhY3RvciIsImdldFZhbHVlRm9yRGlzdGFuY2VGcm9tQ2VudGVyIiwic2NhbGVkRGlzdGFuY2UiLCJwb2ludExhYmVsIiwiY3JlYXRlUG9pbnRMYWJlbENvbnRleHQiLCJkaXN0YW5jZUZyb21DZW50ZXIiLCJnZXRCYXNlUG9zaXRpb24iLCJnZXRQb2ludExhYmVsUG9zaXRpb24iLCJkcmF3UG9pbnRMYWJlbHMiLCJncmlkTGluZU9wdHMiLCJkcmF3UmFkaXVzTGluZSIsImFuaW1hdGUiLCJJTlRFUlZBTFMiLCJtaWxsaXNlY29uZCIsImNvbW1vbiIsInN0ZXBzIiwic2Vjb25kIiwibWludXRlIiwiaG91ciIsImRheSIsIndlZWsiLCJtb250aCIsInF1YXJ0ZXIiLCJ5ZWFyIiwiVU5JVFMiLCJzb3J0ZXIiLCJhZGFwdGVyIiwiX2FkYXB0ZXIiLCJwYXJzZXIiLCJpc29XZWVrZGF5IiwiX3BhcnNlT3B0cyIsImRldGVybWluZVVuaXRGb3JBdXRvVGlja3MiLCJtaW5Vbml0IiwiY2FwYWNpdHkiLCJpbnRlcnZhbCIsImFkZFRpY2siLCJ0aW1lIiwidGltZXN0YW1wcyIsInRpY2tzRnJvbVRpbWVzdGFtcHMiLCJtYWpvclVuaXQiLCJzZXRNYWpvclRpY2tzIiwiVGltZVNjYWxlIiwiX3VuaXQiLCJfbWFqb3JVbml0IiwiX29mZnNldHMiLCJfbm9ybWFsaXplZCIsImRpc3BsYXlGb3JtYXRzIiwibm9ybWFsaXplZCIsIl9hcHBseUJvdW5kcyIsIl9nZXRMYWJlbEJvdW5kcyIsImdldExhYmVsVGltZXN0YW1wcyIsInRpbWVPcHRzIiwiX2dlbmVyYXRlIiwiX2ZpbHRlckJldHdlZW4iLCJfZ2V0TGFiZWxDYXBhY2l0eSIsImRldGVybWluZVVuaXRGb3JGb3JtYXR0aW5nIiwiZGV0ZXJtaW5lTWFqb3JVbml0IiwiaW5pdE9mZnNldHMiLCJnZXREZWNpbWFsRm9yVmFsdWUiLCJoYXNXZWVrZGF5IiwiZ2V0RGF0YVRpbWVzdGFtcHMiLCJ0b29sdGlwRm9ybWF0IiwiZGF0ZXRpbWUiLCJfdGlja0Zvcm1hdEZ1bmN0aW9uIiwibWlub3JGb3JtYXQiLCJtYWpvckZvcm1hdCIsIm9mZnNldHMiLCJfZ2V0TGFiZWxTaXplIiwidGlja3NPcHRzIiwidGlja0xhYmVsV2lkdGgiLCJjb3NSb3RhdGlvbiIsInNpblJvdGF0aW9uIiwidGlja0ZvbnRTaXplIiwiZXhhbXBsZVRpbWUiLCJleGFtcGxlTGFiZWwiLCJwcmV2U291cmNlIiwibmV4dFNvdXJjZSIsInByZXZUYXJnZXQiLCJuZXh0VGFyZ2V0Iiwic3BhbiIsIlRpbWVTZXJpZXNTY2FsZSIsIl90YWJsZSIsIl9taW5Qb3MiLCJfdGFibGVSYW5nZSIsIl9nZXRUaW1lc3RhbXBzRm9yVGFibGUiLCJidWlsZExvb2t1cFRhYmxlIiwicmVnaXN0ZXJhYmxlcyIsImNsZWFyc2t5X2RheSIsImNsZWFyc2t5X25pZ2h0IiwiY2xlYXJza3lfcG9sYXJ0d2lsaWdodCIsImNsb3VkeSIsImZhaXJfZGF5IiwiZmFpcl9uaWdodCIsImZhaXJfcG9sYXJ0d2lsaWdodCIsImZvZyIsImhlYXZ5cmFpbiIsImhlYXZ5cmFpbmFuZHRodW5kZXIiLCJoZWF2eXJhaW5zaG93ZXJzYW5kdGh1bmRlcl9kYXkiLCJoZWF2eXJhaW5zaG93ZXJzYW5kdGh1bmRlcl9uaWdodCIsImhlYXZ5cmFpbnNob3dlcnNhbmR0aHVuZGVyX3BvbGFydHdpbGlnaHQiLCJoZWF2eXJhaW5zaG93ZXJzX2RheSIsImhlYXZ5cmFpbnNob3dlcnNfbmlnaHQiLCJoZWF2eXJhaW5zaG93ZXJzX3BvbGFydHdpbGlnaHQiLCJoZWF2eXNsZWV0IiwiaGVhdnlzbGVldGFuZHRodW5kZXIiLCJoZWF2eXNsZWV0c2hvd2Vyc2FuZHRodW5kZXJfZGF5IiwiaGVhdnlzbGVldHNob3dlcnNhbmR0aHVuZGVyX25pZ2h0IiwiaGVhdnlzbGVldHNob3dlcnNhbmR0aHVuZGVyX3BvbGFydHdpbGlnaHQiLCJoZWF2eXNsZWV0c2hvd2Vyc19kYXkiLCJoZWF2eXNsZWV0c2hvd2Vyc19uaWdodCIsImhlYXZ5c2xlZXRzaG93ZXJzX3BvbGFydHdpbGlnaHQiLCJoZWF2eXNub3ciLCJoZWF2eXNub3dhbmR0aHVuZGVyIiwiaGVhdnlzbm93c2hvd2Vyc2FuZHRodW5kZXJfZGF5IiwiaGVhdnlzbm93c2hvd2Vyc2FuZHRodW5kZXJfbmlnaHQiLCJoZWF2eXNub3dzaG93ZXJzYW5kdGh1bmRlcl9wb2xhcnR3aWxpZ2h0IiwiaGVhdnlzbm93c2hvd2Vyc19kYXkiLCJoZWF2eXNub3dzaG93ZXJzX25pZ2h0IiwiaGVhdnlzbm93c2hvd2Vyc19wb2xhcnR3aWxpZ2h0IiwibGlnaHRyYWluIiwibGlnaHRyYWluYW5kdGh1bmRlciIsImxpZ2h0cmFpbnNob3dlcnNhbmR0aHVuZGVyX2RheSIsImxpZ2h0cmFpbnNob3dlcnNhbmR0aHVuZGVyX25pZ2h0IiwibGlnaHRyYWluc2hvd2Vyc2FuZHRodW5kZXJfcG9sYXJ0d2lsaWdodCIsImxpZ2h0cmFpbnNob3dlcnNfZGF5IiwibGlnaHRyYWluc2hvd2Vyc19uaWdodCIsImxpZ2h0cmFpbnNob3dlcnNfcG9sYXJ0d2lsaWdodCIsImxpZ2h0c2xlZXQiLCJsaWdodHNsZWV0YW5kdGh1bmRlciIsImxpZ2h0c2xlZXRzaG93ZXJzX2RheSIsImxpZ2h0c2xlZXRzaG93ZXJzX25pZ2h0IiwibGlnaHRzbGVldHNob3dlcnNfcG9sYXJ0d2lsaWdodCIsImxpZ2h0c25vdyIsImxpZ2h0c25vd2FuZHRodW5kZXIiLCJsaWdodHNub3dzaG93ZXJzX2RheSIsImxpZ2h0c25vd3Nob3dlcnNfbmlnaHQiLCJsaWdodHNub3dzaG93ZXJzX3BvbGFydHdpbGlnaHQiLCJpZ2h0c3NsZWV0c2hvd2Vyc2FuZHRodW5kZXJfZGF5IiwibGlnaHRzc2xlZXRzaG93ZXJzYW5kdGh1bmRlcl9uaWdodCIsImxpZ2h0c3NsZWV0c2hvd2Vyc2FuZHRodW5kZXJfcG9sYXJ0d2lsaWdodCIsImxpZ2h0c3Nub3dzaG93ZXJzYW5kdGh1bmRlcl9kYXkiLCJsaWdodHNzbm93c2hvd2Vyc2FuZHRodW5kZXJfbmlnaHQiLCJsaWdodHNzbm93c2hvd2Vyc2FuZHRodW5kZXJfcG9sYXJ0d2lsaWdodCIsInBhcnRseWNsb3VkeV9kYXkiLCJwYXJ0bHljbG91ZHlfbmlnaHQiLCJwYXJ0bHljbG91ZHlfcG9sYXJ0d2lsaWdodCIsInJhaW4iLCJyYWluYW5kdGh1bmRlciIsInJhaW5zaG93ZXJzYW5kdGh1bmRlcl9kYXkiLCJyYWluc2hvd2Vyc2FuZHRodW5kZXJfbmlnaHQiLCJyYWluc2hvd2Vyc2FuZHRodW5kZXJfcG9sYXJ0d2lsaWdodCIsInJhaW5zaG93ZXJzX2RheSIsInJhaW5zaG93ZXJzX25pZ2h0IiwicmFpbnNob3dlcnNfcG9sYXJ0d2lsaWdodCIsInNsZWV0Iiwic2xlZXRhbmR0aHVuZGVyIiwic2xlZXRzaG93ZXJzYW5kdGh1bmRlcl9kYXkiLCJzbGVldHNob3dlcnNhbmR0aHVuZGVyX25pZ2h0Iiwic2xlZXRzaG93ZXJzYW5kdGh1bmRlcl9wb2xhcnR3aWxpZ2h0Iiwic2xlZXRzaG93ZXJzX2RheSIsInNsZWV0c2hvd2Vyc19uaWdodCIsInNsZWV0c2hvd2Vyc19wb2xhcnR3aWxpZ2h0Iiwic25vd2FuZHRodW5kZXIiLCJzbm93c2hvd2Vyc2FuZHRodW5kZXJfZGF5Iiwic25vd3Nob3dlcnNhbmR0aHVuZGVyX25pZ2h0Iiwic25vd3Nob3dlcnNhbmR0aHVuZGVyX3BvbGFydHdpbGlnaHQiLCJzbm93c2hvd2Vyc19kYXkiLCJzbm93c2hvd2Vyc19uaWdodCIsInNub3dzaG93ZXJzX3BvbGFydHdpbGlnaHQiLCJpY29uX2Fycm93IiwiQmFyTGluZUNoYXJ0IiwiYnVpbGRDaGFydCIsImdldERhdGFzZXRzIiwiZ2V0T3B0aW9ucyIsInVwZGF0ZURhdGEiLCJ0ZW1wIiwicHJlY2lwaXRhdGlvbiIsIndpbmQiLCJhaXJQcmVzc3VyZSIsIndlYXRoZXJJbWciLCJ3aW5kQXJyb3ciLCJ3aW5kRGlyZWN0aW9uIiwibG9nIiwicG9pbnRSb3RhdGlvbiIsInBvaW50UmFkaXVzIiwiRGlzcGxheUNvbnRyb2xsZXIiLCJnZXRDaGFydEVsIiwiV2VhdGhlckRhdGEiLCJhc3luYyIsInVybCIsImdldERhdGEiLCJqc29uIiwidGltZXNlcmllcyIsImluc3RhbnQiLCJkZXRhaWxzIiwiYWlyX3RlbXBlcmF0dXJlIiwibmV4dF8xX2hvdXJzIiwicHJlY2lwaXRhdGlvbl9hbW91bnQiLCJ3aW5kX3NwZWVkIiwiYWlyX3ByZXNzdXJlX2F0X3NlYV9sZXZlbCIsImltZyIsIkltYWdlIiwic3VtbWFyeSIsInN5bWJvbF9jb2RlIiwid2luZF9mcm9tX2RpcmVjdGlvbiIsIndlYXRoZXJEYXRhIiwiZGlzcGxheUNvbnRyb2xsZXIiLCJ1cGRhdGVDaGFydCIsImZldGNoSnNvbiJdLCJzb3VyY2VSb290IjoiIn0=